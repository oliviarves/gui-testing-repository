Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Molecular Sequence Numbers,Chemicals/CAS,Tradenames,Manufacturers,Funding Details,Funding Text 1,Funding Text 2,References,Correspondence Address,Editors,Sponsors,Publisher,Conference name,Conference date,Conference location,Conference code,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
"Xie M., Feng S., Xing Z., Chen J., Chen C.","57220181228;57211802256;8347413500;57196018877;57191225906;","UIED: A hybrid tool for GUI element detection",2020,"ESEC/FSE 2020 - Proceedings of the 28th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering",,,,"1655","1659",,,"10.1145/3368089.3417940","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097192553&doi=10.1145%2f3368089.3417940&partnerID=40&md5=f3cc2e1da4744938b33312a9e7e4844b","Australian National University, Canberra, Australia; Monash University, Melbourne, Australia","Xie, M., Australian National University, Canberra, Australia; Feng, S., Australian National University, Canberra, Australia; Xing, Z., Australian National University, Canberra, Australia; Chen, J., Australian National University, Canberra, Australia; Chen, C., Monash University, Melbourne, Australia","Graphical User Interface (GUI) elements detection is critical for many GUI automation and GUI testing tasks. Acquiring the accurate positions and classes of GUI elements is also the very first step to conduct GUI reverse engineering or perform GUI testing. In this paper, we implement a User Iterface Element Detection (UIED), a toolkit designed to provide user with a simple and easy-to-use platform to achieve accurate GUI element detection. UIED integrates multiple detection methods including old-fashioned computer vision (CV) approaches and deep learning models to handle diverse and complicated GUI images. Besides, it equips with a novel customized GUI element detection methods to produce state-of-the-art detection results. Our tool enables the user to change and edit the detection result in an interactive dashboard. Finally, it exports the detected UI elements in the GUI image to design files that can be further edited in popular UI design tools such as Sketch and Photoshop. UIED is evaluated to be capable of accurate detection and useful for downstream works. Tool URL: <a>http://uied.online</a> Github Link: <a>https://github.com/MulongXie/UIED</a> © 2020 ACM.","Computer Vision; Deep Learning; Object Detection; User Interface","Deep learning; Reverse engineering; Software engineering; Design files; Detection methods; Elements detection; Graphical user interfaces (GUI); GUI testing; Learning models; Multiple detection; State of the art; Graphical user interfaces",,,,,,,,"Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., Corrado, G.S., Zheng, X., (2015) TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems, , https://www.tensorflow.org/, Software available from tensorflow. org; Bao, L., Li, J., Xing, Z., Wang, X., Zhou, B., Scvripper: Video scraping tool for modeling developers' behavior using interaction data (2015) 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, 2, pp. 673-676; Bernal-Cardenas, C., Cooper, N., Moran, K., Chaparro, O., Marcus, A., Poshyvanyk, D., Translating video recordings of mobile app usages into replayable scenarios (2020) 42nd International Conference on Software Engineering (ICSE '20), , ACM, New York, NY; Bridge, K., Satran, M., (2018) Windows Accessibility API Overview, , https://docs.microsoft.com/en-us/windows/win32/winauto/windows-automation-api-portal, Retrieved March 2, 2020 from; Canny, J., A computational approach to edge detection (1986) IEEE Transactions on Pattern Analysis and Machine Intelligence, PAMI-8 (6), pp. 679-698. , https://doi.org/10.1109/TPAMI.1986.4767851, Nov 1986; Chen, C., Feng, S., Xing, Z., Liu, L., Zhao, S., Wang, J., Gallery dc: Design search and knowledge discovery through auto-created GUI component gallery (2019) Proceedings of the ACM on Human-Computer Interaction, 3, pp. 1-22. , CSCW (2019); Chen, J., Xie, M., Xing, Z., Chen, C., Xu, X., Zhu, L., Li, G., (2020) Object Detection for Graphical User Interface: Old Fashioned or Deep Learning or A Combination?; Deka, B., Huang, Z., Franzen, C., Hibschman, J., Afergan, D., Li, Y., Nichols, J., Kumar, R., Rico: A mobile app dataset for building data-driven design applications (2017) Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology, pp. 845-854; (2020) Protocol Buffers &nbsp; |&nbsp; Google Developers, , https://developers.google.com/protocol-buffers, Google Developers; Duan, K., Bai, S., Xie, L., Qi, H., Huang, Q., Tian, Q., Centernet: Keypoint triplets for object detection (2019) Proceedings of the IEEE International Conference on Computer Vision, pp. 6569-6578; (2019) UI Automator, , https://developer.android.com/training/testing/ui-automator, Google Retrieved March 2, 2020 from; (2020) Build More Accessible Apps, , https://developer.android.com/guide/topics/ui/accessibility, Google Retrieved March 2, 2020 from; He, K., Zhang, X., Ren, S., Sun, J., Deep residual learning for image recognition (2016) Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 770-778; Lin, F., Song, C., Xu, X., Cavuoto, L., Xu, W., Sensing from the bottom: Smart insole enabled patient handling activity recognition through manifold learning (2016) 2016 IEEE First International Conference on Connected Health: Applications, Systems and Engineering Technologies (CHASE), pp. 254-263; Lin, T., Dollár, P., Girshick, R., He, K., Hariharan, B., Belongie, S., Feature pyramid networks for object detection (2017) Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 2117-2125; (2016) Introducing Spy++, , https://docs.microsoft.com/en-us/visualstudio/debugger/introducing-spyincrement?view=vs-2019, Retrieved March 2, 2020 from; Moran, K., Li, B., Bernal-Cárdenas, C., Jelf, D., Poshyvanyk, D., Automated reporting of GUI design violations for mobile apps (2018) Proceedings of the 40th International Conference on Software Engineering, pp. 165-175; Anh Nguyen, T., Csallner, C., Reverse engineering mobile application user interfaces with remaui (t) (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 248-259; Pongnumkul, S., Dontcheva, M., Li, W., Wang, J., Bourdev, L., Avidan, S., Cohen, M.F., Pause-and-play: Automatically linking screencast video tutorials with applications (2011) Proceedings of the 24th Annual ACM Symposium on User Interface Software and Technology, pp. 135-144; Prasad, D.K., Leung, H.M.K., Quek, C., Cho, S., A novel framework for making dominant point detection methods non-parametric (2012) Image and Vision Computing, 30 (11), pp. 843-859. , https://doi.org/10.1016/j.imavis.2012.06.010, 2012; Qian, J., Shang, Z., Yan, S., Wang, Y., Chen, L., Roscript: A visual script driven truly non-intrusive robotic testing system for touch screen applications (2020) 42nd International Conference on Software Engineering (ICSE '20), , ACM, New York, NY; Redmon, J., Farhadi, A., (2018) Yolov3: An Incremental Improvement, , 2018; Ren, S., He, K., Girshick, R., Sun, J., Faster r-cnn: Towards real-time object detection with region proposal networks (2015) Advances in Neural Information Processing Systems, pp. 91-99; Samet, H., Tamminen, M., Efficient component labeling of images of arbitrary dimension represented by linear bintrees (1988) IEEE Transactions on Pattern Analysis and Machine Intelligence, 10 (4), pp. 579-586. , https://doi.org/10.1109/34.3918, 1988; Smith, R., An overview of the tesseract ocr engine (2007) Ninth International Conference on Document Analysis and Recognition (ICDAR 2007), 2, pp. 629-633; Suzuki, S., Be, K., Topological structural analysis of digitized binary images by border following (1985) Computer Vision, Graphics, and Image Processing, 30 (1), pp. 32-46. , https://doi.org/10.1016/0734-189X(85)90016-7, 1985; (2020) OpenCV Team, , https://opencv.org/; (2020) Pytorch Team, , https://pytorch.org/; Torbert, S., (2016) Applied Computer Science, , Springer; White, T.D., Fraser, G., Brown, G.J., Improving random GUI testing with image-based widget detection (2019) Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 307-317; Yeh, T., Chang, T., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192; Yongxin, C., Tonghui, Z., Jie, C., (2019) UI2code: How to Fine-tune Background and Foreground Analysis, , https://laptrinhx.com/ui2code-how-to-fine-tune-background-andforeground-analysis-2293652041/, Retrieved Feb 23, 2020 from; Zhao, D., Xing, Z., Chen, C., Xu, X., Zhu, L., Li, G., Wang, J., Seenomaly: Vision-based linting of GUI animation effects against design-don't guidelines (2020) 42nd International Conference on Software Engineering (ICSE '20), 12p. , https://doi.org/10.1145/3377811.3380411, ACM, New York, NY; Zhou, X., Yao, C., Wen, H., Wang, Y., Zhou, S., He, W., Liang, J., East: An efficient and accurate scene text detector (2017) Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 5551-5560",,"Devanbu P.Cohen M.Zimmermann T.","ACM SIGSOFT","Association for Computing Machinery, Inc","28th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2020","8 November 2020 through 13 November 2020",,164831,,9781450370431,,,"English","ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85097192553
"Prasetya I.S.W.B., Voshol M., Tanis T., Smits A., Smit B., Mourik J.V., Klunder M., Hoogmoed F., Hinlopen S., Casteren A.V., Berg J.V.D., Prasetya N.G.W.Y., Shirzadehhajimahmood S., Ansari S.G.","8980537400;57220118476;57220122745;57220123840;57210239490;57220121191;57220119472;57220116402;57220117774;57220123465;57220115221;57220121255;57220114778;57219185008;","Navigation and exploration in 3D-game automated play testing",2020,"A-TEST 2020 - Proceedings of the 11th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, Co-located with ESEC/FSE 2020",,,,"3","9",,,"10.1145/3412452.3423570","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096995917&doi=10.1145%2f3412452.3423570&partnerID=40&md5=a9bf2fcc70a10810141cc9d703a1578e","Utrecht University, Netherlands","Prasetya, I.S.W.B., Utrecht University, Netherlands; Voshol, M., Utrecht University, Netherlands; Tanis, T., Utrecht University, Netherlands; Smits, A., Utrecht University, Netherlands; Smit, B., Utrecht University, Netherlands; Mourik, J.V., Utrecht University, Netherlands; Klunder, M., Utrecht University, Netherlands; Hoogmoed, F., Utrecht University, Netherlands; Hinlopen, S., Utrecht University, Netherlands; Casteren, A.V., Utrecht University, Netherlands; Berg, J.V.D., Utrecht University, Netherlands; Prasetya, N.G.W.Y., Utrecht University, Netherlands; Shirzadehhajimahmood, S., Utrecht University, Netherlands; Ansari, S.G., Utrecht University, Netherlands","To enable automated software testing, the ability to automatically navigate to a state of interest and to explore all, or at least sufficient number of, instances of such a state is fundamental. When testing a computer game the problem has an extra dimension, namely the virtual world where the game is played on. This world often plays a dominant role in constraining which logical states are reachable, and how to reach them. So, any automated testing algorithm for computer games will inevitably need a layer that deals with navigation on a virtual world. Unlike e.g. navigating through the GUI of a typical web-based application, navigating over a virtual world is much more challenging. This paper discusses how concepts from geometry and graph-based path finding can be applied in the context of game testing to solve the problem of automated navigation and exploration. As a proof of concept, the paper also briefly discusses the implementation of the proposed approach. © 2020 ACM.","agent-based testing; automated game testing; automated play testing","Ability testing; Automation; Computer games; Computer testing; Graphic methods; Navigation; Virtual reality; Automated navigation; Automated software testing; Automated testing; Extra dimensions; Logical state; Proof of concept; Virtual worlds; Web-based applications; Software testing",,,,,"856716","This work is supported by the EU ICT-2018-3 H2020 Programme grant nr. 856716.",,"Ammann, P., Offutt, J., (2017) Introduction to Software Testing, 2nd Edition, , Cambridge University Press; Baldominos, A., Saez, Y., Recio, G., Calle, J., 2015. Learning levels of mario ai using genetic algorithms Conference of the Spanish Association for Artificial Intelligence, pp. 267-277. , Springer; Bedder, M., Ai Tools for Automated Game Testing, , https://www.prowler.io/blog/ai-Tools-for-Automated-game-Testing; Dastani, M., Testerink, B., 2016. Design patterns for multi-Agent programming Int Journal Agent-Oriented Software Engineering, 5 (2-3), p. 2016; WDijkstra, E., A note on two problems in connexion with graphs (1959) Numerische Mathematik, 1 (1), pp. 269-271; Hart, P.E., Nilsson, N.J., Raphael, B., 1968. A formal basis for the heuristic determination of minimum cost paths (1968) Ieee Transactions on Systems Science and Cybernetics, 4 (2), pp. 100-107; Iftikhar, S., Zohaib Iqbal, M., Uzair Khan, M., Mahmood, W., 2015. An automated model based testing approach for platform games 2015 ACM/ Ieee 18th International Conference on Model Driven Engineering Languages and Systems (MODELS). Ieee, pp. 426-435; Kwek, S., On a simple depth-first search strategy for exploring unknown graphs (1997) Workshop on Algorithms and Data Structures, pp. 345-353. , Springer; Leotta, M., Stocco, A., Ricca, F., Tonella, P., 2016. ROBULA+: An algorithm for generating robust XPath locators for web testing Journal of Software: Evolution and Process 28, 3, p. 2016; McMinn, P., Search-based software test data generation: A survey (2004) Softw.Testing, Verification and Reliability, 14 (2), p. 2004; John-Jules Meyer, C.H., Agent Technology (2008) Encyclopedia of Computer Science and Engineering, , Benjamin W. Wah (Ed.). John Wiley & Sons; Millington, I., Funge, J., (2019) Artificial Intelligence for Games, 3rd Edition, , CRC Press; (2020) 2020 Global Games Market Report, , https://newzoo.com/insights/trend-reports/newzoo-global-games-market-report-2020-light-version/, Newzoo; Panaite, P., Pelc, A., 1999. Exploring unknown undirected graphs (1999) Journal of Algorithms, 33 (2), pp. 281-295; Pfau, J., David Smeddinck, J., Malaka, R., 2017. Automated game testing with icarus: Intelligent completion of adventure riddles via unsupervised solving Extended Abstracts Publication of the Annual Symposium on Computer-Human Interaction in Play, pp. 153-164; Prada, R., Prasetya, I.S.W.B., Kifetew, F.M., Dignum, F., Vos, T.E.J., Lander, J., Donnart, J., Fernandes, P.M., 2020. Agent-based Testing of Extended Reality Systems 13th International Conference on Software Testing, Validation and Verification (ICST; Prasetya, I.S.W.B., Dastani, M., Prada, R., Vos, T.E.J., Dignum, F., Kifetew, F.M., 2020. Tactical Agents for Testing Computer Games 8th Int. Workshop on Engineering Multi-Agent Systems (EMAS; (2017) Ui Testing Tips: Selenium Locators Best Practices, , https://screenster.io/selenium-locators-best-practices-7-helpful-Tips-for-ui-Testers/, Screenster; Tuovenen, J., Oussalah, M., Kostakos, P., 2019. MAuto: Automatic Mobile Game Testing Tool Using Image-Matching Based Approach The Computer Games Journal, 8 (3-2019), pp. 215-239. , https://doi.org/10.1007/s40869-019-00087-z; Utting, M., Pretschner, A., Legeard, B., 2012. A taxonomy of model-based testing approaches. Software Testing (2012) Verification and Reliability, 22 (5)",,"Getir S.Nguyen P.","ACM SIGSOFT","Association for Computing Machinery, Inc","11th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, Co-located with the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2020","8 November 2020 through 9 November 2020",,164837,,9781450381017,,,"English","A-TEST - Proc. ACM SIGSOFT Int. Workshop Autom. TEST Case Des., Select., Eval., Co-located ESEC/FSE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85096995917
"Zhao Y., Chen J., Sejfia A., Schmitt Laser M., Zhang J., Sarro F., Harman M., Medvidovic N.","57189501261;57219795507;57194655191;57220184207;57219788786;36631133800;7006379048;7003876248;","FrUITeR: A framework for evaluating UI test reuse",2020,"ESEC/FSE 2020 - Proceedings of the 28th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering",,,,"1190","1201",,1,"10.1145/3368089.3409708","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096692782&doi=10.1145%2f3368089.3409708&partnerID=40&md5=1c0f00e08a492fb4959bd1273731dcbc","University of Southern California, United States; Columbia University, United States; University College London, United Kingdom","Zhao, Y., University of Southern California, United States; Chen, J., Columbia University, United States; Sejfia, A., University of Southern California, United States; Schmitt Laser, M., University of Southern California, United States; Zhang, J., University College London, United Kingdom; Sarro, F., University College London, United Kingdom; Harman, M., University College London, United Kingdom; Medvidovic, N., University of Southern California, United States","UI testing is tedious and time-consuming due to the manual effort required. Recent research has explored opportunities for reusing existing UI tests from an app to automatically generate new tests for other apps. However, the evaluation of such techniques currently remains manual, unscalable, and unreproducible, which can waste effort and impede progress in this emerging area. We introduce FrUITeR, a framework that automatically evaluates UI test reuse in a reproducible way. We apply FrUITeR to existing test-reuse techniques on a uniform benchmark we established, resulting in 11,917 test reuse cases from 20 apps. We report several key findings aimed at improving UI test reuse that are missed by existing work. © 2020 ACM.","Mobile Application; Open Science; Software Testing; Test Reuse","Testing; Recent researches; Software engineering",,,,,"1717963, 1823354

N00014-17-1-2896

Engineering Research Centers, ERC: 741278","We would like to thank Farnaz Behrang, Gang Hu, and Jun-Wei Lin, for their generous help on explaining the details of their respective test-reuse techniques to us. This work is supported by the U.S. National Science Foundation under grants 1717963 and 1823354, U.S. Office of Naval Research under grant N00014-17-1-2896, and ERC Advanced Fellowship Grant no. 741278 (EPIC).",,"(2019) AppFlow's Source Code and Artifacts, , https://github.com/columbia/appflow; (2019) Appium: Mobile App Automation Made Awesome, , http://appium.io; (2019) ATM's Source Code and Artifacts, , https://sites.google.com/view/apptestmigrator/; (2019) Click-Appium, , http://appium.io/docs/en/commands/element/actions/click; (2019) CraftDroid's Source Code and Artifacts, , https://sites.google.com/view/craftdroid/; (2019), https://developer.android.com/training/testing/espresso; (2019) Find Elements-Appium, , http://appium.io/docs/en/commands/element/find-elements; (2019) GTM's Source Code and Artifacts, , https://sites.google.com/view/testmigration/; (2019) Introduction to Activities | Android Developers, , https://developer.android.com/guide/components/activities/intro-activities; (2019) Send Keys-Appium, , http://appium.io/docs/en/commands/element/actions/send-keys; (2019) Soot-A Java Optimization Framework, , https://github.com/Sable/soot; (2020) FrUITeR's Website, , https://felicitia.github.io/FrUITeR/; (2020) Gherkin Syntax-Cucumber Documentation, , https://cucumber.io/docs/gherkin; (2020) How to Locate An Element on the Page-Web Performance, , https://www.webperformance.com/load-testing-tools/blog/articles/realbrowser-manual/building-a-testcase/how-locate-element-the-page; (2020) JSON-Wikipedia, , https://en.wikipedia.org/wiki/JSON; (2020) SeleniumHQ Browser Automation, , https://www.selenium.dev; (2020) Web Element:: Documentation for Selenium, , https://selenium.dev/documentation/en/webdriver/web_element; Chapter-4: Appium locator finding strategies-kobiton (2019) Kobiton, , https://kobiton.com/book/chapter-4-appium-locator-findingstrategies, Apr 2019 admin; Allen, F.E., Cocke, J., A program data flow analysis procedure (1976) Commun. ACM, 19 (3), p. 137. , 1976; Behrang, F., Orso, A., Test migration for efficient largescale assessment of mobile app coding assignments (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis; Behrang, F., Orso, A., Test migration between mobile apps with similar functionality (2019) 34th International Conference on Automated Software Engineering (ASE 2019); Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (e) (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE); Hu, G., Zhu, L., Yang, J., Appflow: Using machine learning to synthesize robust, reusable ui tests (2018) Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, pp. 269-282; Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10, pp. 707-710; Lin, J., Jabbarvand, R., Malek, S., Test transfer across mobile apps through semantic mapping (2019) 34th International Conference on Automated Software Engineering (ASE 2019); Linares-Vasquez, M., Bernal-Cardenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME); Manning, C.D., Raghavan, P., Schutze, H., (2008) Introduction to Information Retrieval, , Cambridge university press; Rau, A., Hotzkow, J., Zeller, A., Transferring tests across web applications (2018) Web Engineering, pp. 50-64. , Springer International Publishing, Cham, Tommi Mikkonen, Ralf Klamma, and Juan Hernandez",,"Devanbu P.Cohen M.Zimmermann T.","ACM SIGSOFT","Association for Computing Machinery, Inc","28th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2020","8 November 2020 through 13 November 2020",,164831,,9781450370431,,,"English","ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85096692782
"Yasin H.N., Hamid S.H.A., Yusof R.J.R., Hamzah M.","57219978166;57220838788;57190702342;56242029200;","An empirical analysis of test input generation tools for android apps through a sequence of events",2020,"Symmetry","12","11", 1894,"1","27",,1,"10.3390/sym12111894","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85096369624&doi=10.3390%2fsym12111894&partnerID=40&md5=c5e14035cc4598d87b070bd2b1cec64f","Department of Software Engineering, Faculty of Computer Science and Information Technology, University Malaya, Kuala Lumpur, 50603, Malaysia; Faculty of Computing and Informatics, Universiti Malaysia SabahSabah  88400, Malaysia","Yasin, H.N., Department of Software Engineering, Faculty of Computer Science and Information Technology, University Malaya, Kuala Lumpur, 50603, Malaysia; Hamid, S.H.A., Department of Software Engineering, Faculty of Computer Science and Information Technology, University Malaya, Kuala Lumpur, 50603, Malaysia; Yusof, R.J.R., Department of Software Engineering, Faculty of Computer Science and Information Technology, University Malaya, Kuala Lumpur, 50603, Malaysia; Hamzah, M., Faculty of Computing and Informatics, Universiti Malaysia SabahSabah  88400, Malaysia","Graphical User Interface (GUI) testing of Android apps has gained considerable interest from the industries and research community due to its excellent capability to verify the operational requirements of GUI components. To date, most of the existing GUI testing tools for Android apps are capable of generating test inputs by using different approaches and improve the Android apps’ code coverage and fault detection performance. Many previous studies have evaluated the code coverage and crash detection performances of GUI testing tools in the literature. However, very few studies have investigated the effectiveness of the test input generation tools, especially in the events sequence length of the overall test coverage and crash detection. The event sequence length generally shows the number of steps required by the test input generation tools to detect a crash. It is critical to highlight its effectiveness due to its significant effects on time, testing effort, and computational cost. Thus, this study evaluated the effectiveness of six test input generation tools for Android apps that support the system events generation on 50 Android apps. The generation tools were evaluated and compared based on the activity coverage, method coverage, and capability in detecting crashes. Through a critical analysis of the results, this study identifies the diversity and similarity of test input generation tools for Android apps to provide a clear picture of the current state of the art. The results revealed that a long events sequence performed better than a shorter events sequence. However, a long events sequence led to a minor positive effect on the coverage and crash detection. Moreover, the study showed that the tools achieved less than 40% of the method coverage and 67% of the activity coverage. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.","Android apps; Empirical study; GUI testing; Test input generation",,,,,,"Kementerian Pendidikan Malaysia, KPM: FRGS/1/2018/ICT04/UMS/02/2","This research was funded by Malaysia Ministry of Education, grant number FRGS/1/2018/ICT04/UMS/02/2.",,"Chaffey, D., (2018) Mobile Marketing Statistics Compilation|Smart Insights, , https://www.smartinsights.com/mobile-marketing/mobile-marketing-analytics/mobile-marketing-statistics/, (accessed on 16 December 2019); IDC—Smartphone Market Share—OS, , https://www.idc.com/promo/smartphonemarket-share, IDC. (accessed on 16 December 2019); Number of Android Applications on the Google Play Store|AppBrain, , https://www.appbrain.com/stats/number-of-android-apps, TheAppBrain. (accessed on 16 December 2019); Packard, H., (2015) Failing to Meet Mobile App User Expectations: A Mobile User Survey, , https://techbeacon.com/sites/default/files/gated_asset/mobile-app-user-survey-failingmeet-user-expectations.pdf, Technical Report. (accessed on 16 December 2019); Ammann, P., Offutt, J., (2016) Introduction to Software Testing, , Cambridge University Press: Cambridge, UK; Memon, A., (2001) Comprehensive Framework for Testing Graphical User Interfaces, , University of Pittsburgh: Pittsburgh, PA, USA; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real Challenges in Mobile App Development Proceedings of the 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24. , Baltimore, MD, USA, 10–11 October 2013; Choudhary, S.R., Gorla, A., Orso, A., Automated Test Input Generation for Android: Are We There yet?(e) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , Lincoln, NE, USA, 9–13 November 2015; Arnatovich, Y.L., Wang, L., Ngo, N.M., Soh, C., Mobolic: An automated Approach to Exercising Mobile Application GUIs Using Symbiosis of Online Testing Technique and Customated Input Generation (2018) Softw. Pr. Exp, 48, pp. 1107-1142. , [CrossRef]; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An Input Generation System for Android Apps Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , Saint Petersburg, Russia, 18–26 August 2013; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI Ripping for Automated Testing of Android Applications Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , Essen, Germany, 3–7 September 2012; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, Stochastic Model-Based GUI Testing of Android Apps Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 245-256. , Paderborn, Germany, 4–8 September 2017; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-Objective Automated Testing for Android Applications Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 94-105. , Saarbrücken, Germany, 18–20 July 2016; Zhu, H., Ye, X., Zhang, X., Shen, K., A Context-aware Approach for Dynamic GUI Testing of Android Applications Proceedings of the 2015 IEEE 39th Annual Computer Software and Applications Conference, pp. 248-253. , Taichung, Taiwan, 1–5 July 2015; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2014) IEEE Softw, 32, pp. 53-59. , [CrossRef]; Usman, A., Ibrahim, N., Salihu, I.A., Test Case Generation from Android Mobile Applications Focusing on Context Events Proceedings of the 2018 7th International Conference on Software and Computer Applications, pp. 25-30. , Kuantan, Malaysia, 8–10 February 2018; Arnatovich, Y.L., Ngo, M.N., Kuan, T.H.B., Soh, C., Achieving High Code Coverage in Android UI Testing via Automated Widget Exercising Proceedings of the 2016 23rd Asia-Pacific Software Engineering Conference (APSEC), pp. 193-200. , Hamilton, New Zealand, 6–9 December 2016; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated testing of android apps: A systematic literature review (2018) IEEE Trans. Reliab, 68, pp. 45-66. , [CrossRef]; Wang, W., Li, D., Yang, W., Cao, Y., Zhang, Z., Deng, Y., Xie, T., An Empirical Study of Android Test Generation Tools in Industrial Cases Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pp. 738-748. , Montpellier, France, 3–7 September 2018; UI/Application Exerciser Monkey|Android Developers, , https://developer.android.com/studio/test/monkey, Google. (accessed on 10 December 2019); Linares-Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., Mining Android App Usages for Generating Actionable GUI-Based Execution Scenarios Proceedings of the 2015 IEEE/ACM 12th Working Conference on Mining Software Repositories, pp. 111-122. , Florence, Italy, 16–17 May 2015; Understand the Activity Lifecycle|Android Developers, , https://developer.android.com/guide/components/activities/activity-lifecycle.html, Google. (accessed on 25 December 2019); Memon, A., GUI testing: Pitfalls and process (2002) Computer, 35, pp. 87-88. , [CrossRef]; Yu, S., Takada, S., Mobile application test case generation focusing on external events Proceedings of the 1st International Workshop on Mobile Development, pp. 41-42. , Amsterdam, The Netherlands, 30 October–31 December 2016; Rubinov, K., Baresi, L., What Are We Missing When Testing Our Android Apps? (2018) Computer, 51, pp. 60-68. , [CrossRef]; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated Concolic Testing of Smartphone Apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, p. 59. , Cary, NC, USA, 11–16 November; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T., Adaptive Random Testing: The Art of Test Case Diversity (2010) J. Syst. Softw, 83, pp. 60-66. , [CrossRef]; Wang, P., Liang, B., You, W., Li, J., Shi, W., Automatic Android GUI Traversal with High Coverage Proceedings of the 2014 Fourth International Conference on Communication Systems and Network Technologies, pp. 1161-1166. , Bhopal, India, 7–9 April 2014; Saeed, A., Ab Hamid, S.H., Sani, A.A., Cost and effectiveness of search-based techniques for model-based testing: An empirical analysis (2017) Int. J. Softw. Eng. Knowl. Eng, 27, pp. 601-622. , [CrossRef]; Sutton, R.S., Barto, A.G., (2011) Reinforcement Learning: An Introduction, , MIT Press: Cambridge, MA, USA; Méndez Porras, A., Quesada López, C., Jenkins Coronas, M., Automated Testing of Mobile Applications: A Systematic Map and Review Proceedings of the 2015 18th Conferencia Iberoamericana en Software Engineering (CIbSE 2015), pp. 195-208. , Lima, Peru, 22–24 April 2015; Crashes Android Developers, , https://developer.android.com/topic/performance/vitals/crash, Google. (accessed on 25 December 2019); Haoyin, L., Automatic Android Application GUI Testing—A Random Walk Approach Proceedings of the 2017 International Conference on Wireless Communications, Signal Processing and Networking (WiSPNET), pp. 72-76. , Chennai, India, 22–24 March 2017; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A Toolset for GUI Testing of Android Applications Proceedings of the 2012 28th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653. , Trento, Italy, 23–28 September 2012; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering Context Events in Event-Based Testing of Mobile Applications Proceedings of the 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops, pp. 126-133. , Luxembourg, 18–22 March 2013; Li, Y., Yang, Z., Guo, Y., Chen, X., DroidBot: A Lightweight UI-Guided Test Input Generator for Android Proceedings of the 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C), pp. 23-26. , Buenos Aires, Argentina, 20–28 May 2017; Li, Y., Yang, Z., Guo, Y., Chen, X., (2019) A Deep Learning Based Approach to Automated Android App Testing, , arXiv arXiv:1901.02633; Azim, T., Neamtiu, I., Targeted and Depth-First Exploration for Systematic Testing of Android Apps Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, pp. 641-660. , Indianapolis USA, 26–31 October 2013; Koroglu, Y., Sen, A., Muslu, O., Mete, Y., Ulker, C., Tanriverdi, T., Donmez, Y., QBE: QLearning-Based Exploration of Android Applications Proceedings of the 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST), pp. 105-115. , Luxembourg, 18–22 March 2013; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically Discovering, Reporting and Reproducing Android Application Crashes Proceedings of the 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 33-44. , Chicago, IL, USA, 11–15 April 2016; Kitchenham, B.A., Pfleeger, S.L., Pickard, L.M., Jones, P.W., Hoaglin, D.C., El Emam, K., Rosenberg, J., Preliminary guidelines for empirical research in software engineering (2002) IEEE Trans. Softw. Eng, 28, pp. 721-734. , [CrossRef]; Perry, D.E., Sim, S.E., Easterbrook, S.M., Case Studies for Software Engineers Proceedings of the 26th International Conference on Software Engineering, pp. 736-738. , Edinburgh, UK, 23–28 May 2004; Morrison, G.C., Inggs, C.P., Visser, W., Automated Coverage Calculation and Test Case Generation Proceedings of the South African Institute for Computer Scientists and Information Technologists Conference, pp. 84-93. , Cape Town, South African, 14–16 September 2020; Dashevskyi, S., Gadyatskaya, O., Pilgun, A., Zhauniarovich, Y., The Influence of Code Coverage Metrics on Automated Testing Efficiency in Android Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pp. 2216-2218. , Toronto, ON, Canada, 15–19 October 2018; F-Droid—Free and Open Source Android App Repository, , https://f-droid.org/, F-Droid. (accessed on 10 December 2019); Monetize, Advertise and Analyze Android Apps|AppBrain, , https://www.appbrain.com/, AppBrain. (accessed on 20 December 2019); Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., PUMA: Programmable UI-Automation for Large-Scale Dynamic Analysis of Mobile Apps Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, pp. 204-217. , Bretton Woods, NH, USA, 16–19 June 2014; Saswat, A., (2015) ELLA: A Tool for Binary Instrumentation of Android Apps, , https://github.com/saswatanand/ella, (accessed on 10 November 2019); Roubtsov, V., (2005) Emma: A Free Java Code Coverage Tool, , http://emma.sourceforge.net/, (accessed on 10 November 2020); Command Line Tools|Android Developers, , https://developer.android.com/studio/command-line, Google. (accessed on 16 December 2019); Harman, M., Mansouri, S.A., Zhang, Y., Search-based software engineering: Trends, techniques and applications (2012) ACM Comput. Surv. (CSUR), 45, p. 11. , [CrossRef]; Su, T., Fan, L., Chen, S., Liu, Y., Xu, L., Pu, G., Su, Z., Why my app crashes understanding and benchmarking framework-specific exceptions of android apps (2020) IEEE Trans. Softw. Eng, 1. , [CrossRef]; Xie, Q., Memon, A.M., Studying the Characteristics of a “Good” GUI Test Suite Proceedings of the 2006 17th International Symposium on Software Reliability Engineering, pp. 159-168. , Raleigh, NC, USA, 7–10 November 2006; Baek, Y.-M., Bae, D.-H., Automated Model-Based Android GUI Testing Using Multi-Level GUI Comparison Criteria Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, pp. 238-249. , Singapore, 3–7 September 2016; Hu, Z., Ma, Y., Huang, Y., (2017) DroidWalker: Generating Reproducible Test Cases via Automatic Exploration of Android Apps, , arXiv arXiv:1710.08562; Kayes, A., Kalaria, R., Sarker, I.H., Islam, M., Watters, P.A., Ng, A., Hammoudeh, M., Kumara, I., A Survey of Context-Aware Access Control Mechanisms for Cloud and Fog Networks: Taxonomy and Open Research Issues (2020) Sensors, 20, p. 2464. , [CrossRef] [PubMed]; Shebaro, B., Oluwatimi, O., Bertino, E., Context-based access control systems for mobile devices (2014) IEEE Trans. Dependable Secur. Comput, 12, pp. 150-163. , [CrossRef]; Sadeghi, A., Jabbarvand, R., Malek, S., Patdroid: Permission-Aware GUI Testing of Android Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 220-232. , Paderborn, Germany, 4–8 September 2017; Borges, N.P., Zeller, A., Why Does this App Need this Data? Automatic Tightening of Resource Access Proceedings of the 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST), pp. 449-456. , Xi′an, China, 22–27 April 2019; Kowalczyk, E., Cohen, M.B., Memon, A.M., Configurations in Android testing: They Matter (2018) Proceedings of the 1st International Workshop on Advances in Mobile App Analysis, pp. 1-6. , Montpellier, France, 4 September","Yasin, H.N.; Department of Software Engineering, Malaysia; email: husam_yas@siswa.um.edu.my
Hamid, S.H.A.; Department of Software Engineering, Malaysia; email: sitihafizah@um.edu.my
Hamzah, M.; Faculty of Computing and Informatics, Malaysia; email: muzaffar@ums.edu.my",,,"MDPI AG",,,,,20738994,,,,"English","Symmetry",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85096369624
"Marinho E.H., Figueiredo E.","15044828800;18433988600;","PLATOOL: A Functional Test Generation Tool for Mobile Applications",2020,"ACM International Conference Proceeding Series",,,,"548","553",,,"10.1145/3422392.3422508","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099377615&doi=10.1145%2f3422392.3422508&partnerID=40&md5=30b9755a55b88e1e32934da3365e509f","Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, Minas Gerais, Brazil","Marinho, E.H., Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, Minas Gerais, Brazil; Figueiredo, E., Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, Minas Gerais, Brazil","Mobile applications are ubiquitous nowadays and their testing is a central activity for quality assurance. Software testing is considered an important activity in this context. Application testers are faced with several classes of events in this domain including GUI and system events, such as sensor-related events. While GUI events have been systematically explored in mobile application testing literature, system events have received less attention. A possible difficulty faced by mobile application testers is the identification and generation of input data for system events. This paper presents PLATOOL for assisting mobile application testers to deal with common events of the mobile applications during the automation of functional tests. Our preliminary results indicate that PLATOOL is able to generate and execute useful functional tests to support testing of mobile applications. © 2020 ACM.","events; GUI events; mobile applications; sensor events; software testing; system events",,,,,,"Coordenação de Aperfeiçoamento de Pessoal de Nível Superior, CAPES

Conselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq: 424340/2016-0

Fundação de Amparo à Pesquisa do Estado de Minas Gerais, FAPEMIG: PPM-00651-17","This research was partially supported by Brazilian funding agencies: CNPq (Grant 424340/2016-0), CAPES, and FAPEMIG (grant PPM-00651-17).",,"Adamo, D., Nurmuradov, D., Piparia, S., Bryce, R., Combinatorial-based event sequence testing of Android applications (2018) Information and Software Technology 99 2018, pp. 98-117; Project, A., (2020) Agape Library, , https://www.univ-orleans.fr/lifo/traclifo/Agape/, Access date 06/19/2020; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., A general framework for comparing automatic testing techniques of Android mobile apps (2017) Journal of Systems and Software, 125, pp. 322-343. , 2017; Amalfitano, D., Fasolino, A., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR-A tool for automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , 2015; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Proceedings of the ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA, pp. 641-660; Belli, F., (2001) Finite State Testing and Analysis of Graphical User Interfaces, pp. 34-43; Belli, F., Budnik, C.J., Minimal spanning set for coverage testing of interactive systems (2004) Proceedings of the International Colloquium on Theoretical Aspects of Computing (ICTAC), Zhiming Liu and Keijiro Araki (Eds.). Lecture Notes in Computer Science, 3407, pp. 220-234. , Springer Berlin /Heidelberg; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis, and testing of user interactions: Approach and case study. Software Testing. Verification and Reliability 16 (2006), pp. 3-32; Belli, F., Endo, A.T., Linschulte, M., Simao, A., (2014) A Holistic Approach to Model-based Testing of Web Service Compositions Software: Practice and Experience, 44 (2), pp. 201-234. , 2014; Bergmann, V., (2020) Databene Benerator, , https://sourceforge.net/projects/benerator/, Access date 06/19/2020; Budnik, C.J., (2007) Test Generation Using Event Sequence Graphs, , Ph.D Dissertation. Department of Electrical Engineering, University of Paderborn; Choudhary, S.R., Gorla, A., Orso, A., Automated Test Input Generation for Android: Are We There Yet? (2015) Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE, pp. 420-440; Cruz, L., Abreu, R., Lo, D., (2019) To the Attention of Mobile Software Developers: Guess What, Test Your App! Empirical Software Engineering 24 2019, pp. 2438-2468; Farto, G.C., Endo, A.T., Evaluating the Model-Based Testing Approach in the Context of Mobile Applications (2015) Electronic Notes in Theoretical Computer Science, 314, pp. 3-21. , 2015; Ferreira, F., Diniz, J.P., Silva, C., Figueiredo, E., Testing Tools for Configurable Software Systems: A Review-based Empirical Study (2019) Proceedings of the International Workshop on Variability Modelling of Software-Intensive Systems (VAMOS, pp. 1-10; Garousi, V., Elberzhager, F., Test Automation: Not Just for Test Execution (2017) IEEE Software, 34 (2), pp. 90-96. , 2017; Garousi, V., Mantyla, M.V., When and what to automate in software testing? A multi-vocal literature review (2016) Information and Software Technology, 76, pp. 92-117; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timing-And Touch-Sensitive Record and Replay for Android (2013) Proceedings of the International Conference on Software Engineering (ICSE, pp. 72-81; (2020) UI Automator, , https://developer.android.com/training/testing/uiautomator, Google.Access date 06/19/2020; Hu, C., Neamtiu, I., Fuzzy and cross-App replay for smartphone apps (2016) Proceedings of the ICSE Workshop on Automation of Software Test (AST, pp. 50-56; Kassab, M., Defranco, J.F., Laplante, P.A., Software testing: State of the Practice (2017) IEEE Software, 34 (5), pp. 46-52; Kowalczyk, E., Cohen, M.B., Memon, A.M., Configurations in Android testing: They matter (2018) Proceedings of the International Workshop on Advances in Mobile App Analysis (A-MOBILE, pp. 1-6; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the Joint Meeting on European Software Engineering Conference and Foundations of Software Engineering (ESEC-FSE, pp. 224-234; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-Objective Automated Testing for Android Applications (2016) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA, pp. 94-105; Marinho, E.H., Resende, R.F., 2017 (2017) PLATEM: A Method for Mobile Applications Testing. IET Software, 11 (6), pp. 319-328; Mohamed, M., Shrestha, B., Saxena, N., 2017 SMASheD: Sniffing and Manipulating Android Sensor Data for Offensive Purposes (2017) IEEE Transactions on Information Forensics and Security, 12 (4), pp. 901-913; Myers, G.J., Sandler, C., Badgett, T., (2011) The Art of Software Testing (3 Ed.). John, , Wiley and Sons, Hoboken, NJ; Natella, R., Cotroneo, D., Duraes, J.A., Madeira, H.S., On fault representativeness of software fault injection (2013) IEEE Transactions on Software Engineering (TSE, 39 (1), pp. 80-96. , 2013; Omadadhain, J., (2020) JUNG: The Java Universal Network/Graph Framework, , https://github.com/jrtom/jung, Access date 06/19/2020; Pan, K., Kim, S., Whitehead, E.J., Jr., Toward an understanding of bug fix patterns (2009) Empirical Software Engineering, 14 (3), pp. 286-315. , 2009; Riccio, V., Amalfitano, D., Fasolino, A.R., Is this the lifecycle we really want? An automated black-box testing approach for Android activities (2018) Proceedings of the International Workshop on User Interface Test Automation and Testing Techniques for Event Based Software (INTUITESTBEDS, pp. 68-77; Rubinov, K., Baresi, L., What are we missing when testing our Android apps? (2018) Computer, 51 (4), pp. 60-68. , 2018; Song, W., Qian, X., Huang, J., EHBDroid: Beyond GUI testing for Android applications (2017) Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE, pp. 27-37; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an Android application (2011) Proceedings of the IEEE International Conference on Software Testing, Verification, and Validation (ICST, pp. 377-386; Thimbleby, H., The directed Chinese Postman Problem (2003) Software: Practice and Experience, 33 (11), pp. 1081-1096; Tramontana, P., Amalfitano, D., Amatucci, N., Fasolino, A.R., Automated functional testing of mobile applications: A systematic mapping study (2019) Software Quality Journal, 27 (1), pp. 149-201. , 2019; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) Journal of Systems and Software, 117, pp. 334-356",,,"CNPq;Google;Loggi","Association for Computing Machinery","34th Brazilian Symposium on Software Engineering, SBES 2020","21 October 2020 through 23 October 2020",,165927,,9781450387538,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85099377615
"Silistre A., Kilincceker O., Belli F., Challenger M., Kardas G.","57211425274;55807841400;57200611344;55910368200;8876828200;","Models in Graphical User Interface Testing: Study Design",2020,"2020 Turkish National Software Engineering Symposium, UYMS 2020 - Proceedings",,, 9247072,"","",,,"10.1109/UYMS50627.2020.9247072","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097537439&doi=10.1109%2fUYMS50627.2020.9247072&partnerID=40&md5=dd26bc3c6ba9fdc3b64011911817b4ce","Ege University, International Computer Institute, Izmir, Turkey; University of Paderborn, Paderborn, Germany, Germany; University of Antwerp and Flanders Make, Belgium; Mugla Sitki Kocman University, Mugla, Turkey; Izmir Institute of Technology, Izmir, Turkey","Silistre, A., Ege University, International Computer Institute, Izmir, Turkey; Kilincceker, O., University of Paderborn, Paderborn, Germany, Germany, Mugla Sitki Kocman University, Mugla, Turkey; Belli, F., University of Paderborn, Paderborn, Germany, Germany, Izmir Institute of Technology, Izmir, Turkey; Challenger, M., University of Antwerp and Flanders Make, Belgium; Kardas, G., Ege University, International Computer Institute, Izmir, Turkey","Model-based GUI testing is an important concept in Software GUI testing. Manual testing is a time-consuming labor and heavily error-prone. It has several well-accepted models that Software Testing community has been working and contributing to them for many years. This paper reviews different models used in model-based GUI testing and presents a case study with a proposed approach for how to convert several well-accepted models to ESG (Event Sequence Graphs) to generate test cases and execute them with an aim to consolidate past and future works in a single model. © 2020 IEEE.","Event Flow Graph; Event Sequence Graph; Finite State Machine; GUI Testing; Model-Based Testing; Regular Expression","Graphical user interfaces; Well testing; Error prones; Event sequence graphs; GUI testing; Manual testing; Model-based OPC; Single models; Study design; Test case; Software testing",,,,,,,,"Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of IEEE 27th International Symposium on Fault Tolerant Computing, Seattle, WA, USA, pp. 80-88; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Transactions on Software Engineering, SE-4 (3), pp. 178-187. , May; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings 11th International Symposium on Software Reliability Engineering. ISSRE 2000, San Jose, CA, USA, pp. 110-121; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proceedings 12th International Symposium on Software Reliability Engineering, Hong Kong, China, pp. 34-43; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , February; Memon, A., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157. , September; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Software Eng. Methodol., 18 (2), pp. 1-35. , November; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) 2010 Third International Conference on Software Testing, Verification and Validation, Paris, pp. 245-254; Belli, F., Beyazit, M., Güler, N., Event-oriented, model-based GUI testing and reliability assessment-approach and case study (2012) Advances in Computers, 85, pp. 277-326; Belli, F., Beyazit, M., Budnik, C.J., Tuglular, T., Advances in modelbased testing of graphical user interfaces (2017) Advances in Computers, 107, pp. 219-280. , Elsevier; Belli, F., Güler, N., Linschulte, M., Layer-centric testing (2012) FERSMitteilungen, 30 (1), pp. 55-62; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267. , September; Memon, A.M., GUI testing: Pitfalls and process (2002) Computer, 35 (8), pp. 87-88. , August; Lee, D., Yannakakis, M., Principles and methods of testing finite state machines-A survey (1996) Proceedings of the IEEE, 84 (8), pp. 1090-1123. , August; Fujiwara, S., Bochmann, G.V., Khendek, F., Amalou, M., Ghedamsi, A., Test selection based on finite state models (1991) IEEE Transactions on Software Engineering, 17 (6), pp. 591-603. , June; Utting, M., Pretschner, A., Legeard, B., A taxonomy of modelbased testing approaches (2012) Software Testing, Verification and Reliability, 22 (5), pp. 297-312; Belli, F., Beyazit, M., Memon, A., Testing is an event-centric activity (2012) 2012 IEEE Sixth International Conference on Software Security and Reliability Companion, Gaithersburg, MD, pp. 198-206; Hopcroft, J.E., Motwani, R., Ullman, J.D., (2006) Automata Theory, Languages, and Computation, , International Edition 24.2.2; ISELTA Website, , http://iselta.ivknet.de, Available online; Kilincceker, O., Silistre, A., Challenger, M., Belli, F., Random test generation from regular expressions for graphical user interface (GUI) testing (2019) 2019 IEEE 19th International Conference on Software Quality, Reliability and Security Companion (QRS-C), Sofia, Bulgaria, pp. 170-176; Mercan, G., Akgündüz, E., Kilinççeker, O., Challenger, M., Belli, F., Android uygulamasi testi için ideal test ön çalişmasi (2018) CEUR Workshop Proceedings; Kilincceker, O., Belli, F., Grafiksel kullanici arayüzleri için düzenli ifade bazli test kapsama kriterleri (2017) CEUR Workshop Proceedings; Kilinccceker, O., Turk, E., Challenger, M., Belli, F., Regular expression based test sequence generation for HDL program validation (2018) 2018 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C), Lisbon, pp. 585-592; Kilincceker, O., Turk, E., Challenger, M., Belli, F., Applying the ideal testing framework to HDL programs (2018) ARCS Workshop 2018; 31th International Conference on Architecture of Computing Systems, Braunschweig, Germany, pp. 1-6; Kilincceker, O., Belli, F., Towards uniform modeling and holistic testing of hardware and software (2019) 2019 1st International Informatics and Software Engineering Conference (UBMYK), Ankara, Turkey, pp. 1-6",,"Akgun B.T.Ayav T.Bilgen S.Kardas G.",,"Institute of Electrical and Electronics Engineers Inc.","14th Turkish National Software Engineering Symposium, UYMS 2020","7 October 2020 through 9 October 2020",,164914,,9781728185415,,,"English","Turk. Natl. Softw. Eng. Symp., UYMS - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85097537439
"Wanwarang T., Borges N.P., Bettscheider L., Zeller A.","57219516972;57190220281;57219519000;7007015864;","Testing apps with real-world inputs",2020,"Proceedings - 2020 IEEE/ACM 1st International Conference on Automation of Software Test, AST 2020",,,,"1","10",,1,"10.1145/3387903.3389310","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85093506855&doi=10.1145%2f3387903.3389310&partnerID=40&md5=fa75f1f8c297529d7b434aca98fd3b68","Cispa Helmholtz Center for Information Security, Saarbrücken, Germany","Wanwarang, T., Cispa Helmholtz Center for Information Security, Saarbrücken, Germany; Borges, N.P., Cispa Helmholtz Center for Information Security, Saarbrücken, Germany; Bettscheider, L., Cispa Helmholtz Center for Information Security, Saarbrücken, Germany; Zeller, A., Cispa Helmholtz Center for Information Security, Saarbrücken, Germany","To test mobile apps, one requires realistic and coherent test inputs. The Link approach for Web testing has shown that knowledge bases such as DBPedia can be a reliable source of semantically coherent inputs. In this paper, we adapt and extend the Link approach towards test generation for mobile applications: (1) We identify and match descriptive labels with input fields, based on the Gestalt principles of human perception; (2) We then use natural language processing techniques to extract the concept associated with the label; (3) We use this concept to query a knowledge base for candidate input values; (4) We cluster the UI elements according to their functionality into input and actions, filling the input elements first and then interacting with the actions. Our evaluation shows that leveraging knowledge bases for testing mobile apps with realistic inputs is effective. On average, our approach covered 9% more statements than randomly generated text inputs. © 2020 Association for Computing Machinery.","Android; Automated Testing; Input Generation; Knowledge-Base","Knowledge based systems; Knowledge management; Labels; Natural language processing systems; Testing; Gestalt principles; Human perception; Input values; Knowledge base; Knowledge basis; Mobile applications; NAtural language processing; Test generations; Software testing",,,,,"Deutsche Forschungsgemeinschaft, DFG: D514111409","This work was funded by a Deutsche Forschungsgemeinschaft (DFG) grant (D514111409).",,"Allahyari, M., Pouriyeh, S., Assef, M., Safaei, S., Trippe, E.D., Gutierrez, J.B., Kochut, K., (2017) A Brief Survey of Text Mining: Classifcation, Clustering and Extraction Techniques, , arXiv preprint (2017); Amalftano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using gui ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261; Amalftano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) Ieee Software, 32 (5), pp. 53-59. , 2015; (2017) Ui Overview, , https://developer.android.com/guide/topics/ui/overview.html, Android; Auer, S., Bizer, C., Kobilarov, G., Lehmann, J., Cyganiak, R., Ives, Z., Dbpedia: A nucleus for a web of open data (2007) The Semantic Web, pp. 722-735. , Springer; Azim, T., Neamtiu, I., Targeted and depth-frst exploration for systematic testing of android apps. In (2013) Acm Sigplan Notices, 48, pp. 641-660; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from guis (2012) International Conference on Fundamental Approaches to Software Engineering, pp. 347-361. , Springer; Bizer, C., Heath, T., Berners-Lee, T., Linked data-the story so far (2009) International Journal on Semantic Web and Information Systems, 5 (3), pp. 1-22. , 2009; Borges, N.P., Jr., Gómez, M., Zeller, A., Guiding app testing with mined interaction models (2018) Proceedings of the 5th International Conference on Mobile Software Engineering and Systems, pp. 133-143; Borges, N.P., Jr., Hotzkow, J., Zeller, A., Droidmate-2: A platform for android test generation (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pp. 916-919; Carter, P., Mulliner, C., Lindorfer, M., Robertson, W., Kirda, E., Curiousdroid: Automated user interface interaction for android application analysis sandboxes (2016) International Conference on Financial Cryptography and Data Security, pp. 231-249. , Springer; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning. In (2013) Acm Sigplan Notices, 48, pp. 623-640; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (e) (2015) Automated Software Engineering (ASE) 2015 30th IEEE/ACM International Conference on, pp. 429-440; Costa, P., Paiva, A.C.R., Nabuco, M., Pattern based gui testing for mobile applications (2014) Quality of Information and Communications Technology (QUATIC) 2014 9th International Conference on the, pp. 66-74; Degott, C., Borges, N.P., Jr., Zeller, A., Learning user interface element interactions (2019) Proceedings of the 28th Acm Sigsoft International Symposium on Software Testing and Analysis, pp. 296-306; (2012) Android Developers, , UI/application exerciser monkey; Dix, A., Human-computer interaction (2009) Encyclopedia of Database Systems, pp. 1327-1331. , Springer; Gopinath, R., Jensen, C., Groce, A., Code coverage for suite evaluation by developers (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 72-82; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., Puma: Programmable ui-Automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, pp. 204-217; Jacinto, R., (2010) What Is F-Droid?, , https://f-droid.org/en/about, Accessed: 2018-07-28; Jamrozik, K., Zeller, A., Droidmate: A robust and extensible test generator for android (2016) Mobile Software Engineering and Systems (MOBILESoft) 2016 IEEE/ACM International Conference on, pp. 293-294; Li, Y., Yang, Z., Guo, Y., Chen, X., Droidbot: A lightweight ui-guided test input generator for android (2017) Software Engineering Companion (ICSE-C) 2017 IEEE/ACM 39th International Conference on, pp. 23-26; Lohr, L.L., Three principles of perception for instructional interface design (2000) Educational Technology, 40 (1), pp. 45-52. , 2000; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22nd Acm Sigsoft International Symposium on Foundations of Software Engineering, pp. 599-609; Manning, C., Surdeanu, M., Bauer, J., Finkel, J., Bethard, S., McClosky, D., The stanford corenlp natural language processing toolkit (2014) Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations., pp. 55-60; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Link: Exploiting the web of data to generate test inputs (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 373-384; Màrquez, L., Rodríguez, H., Part-of-speech tagging using decision trees (1998) European Conference on Machine Learning, pp. 25-36. , Springer; Masinter, L., Berners-Lee, T., Fielding, R.T., (2005) Uniform Resource Identifer (URI): Generic Syntax, , 2005; Mirrezaei, S.I., Martins, B., Cruz, I., The triplex approach for recognizing semantic relations from noun phrases, appositions, and adjectives (2015) International Semantic Web Conference, pp. 230-243. , Springer; Shirazi, A.S., Henze, N., Schmidt, A., Goldberg, R., Schmidt, B., Schmauder, H., Insights into layout patterns of mobile user interfaces by an automatic analysis of android apps (2013) Proceedings of the 5th Acm Sigchi Symposium on Engineering Interactive Computing Systems, pp. 275-284; Schmachtenberg, M., Bizer, C., Paulheim, H., Adoption of the linked data best practices in diferent topical domains (2014) International Semantic Web Conference, pp. 245-260. , Springer; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based gui testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 245-256; Toutanova, K., Cherry, C., A global model for joint lemmati-zation and part-of-speech prediction (2009) Proceedings of the Joint Conference of the 47th Annual Meeting of the Acl and the 4th International Joint Conference on Natural Language Processing of the AFNLP: Volume 1-Volume 1, pp. 486-494. , Association for Computational Linguistics; Wong, M.Y., Lie, D., Intellidroid: A targeted input generator for the dynamic analysis of android malware (2016) Ndss, 16, pp. 21-24; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , Springer; Zaveri, A., Rula, A., Maurino, A., Pietrobon, R., Lehmann, J., Auer, S., Quality assessment for linked data: A survey (2016) Semantic Web, 7 (1), pp. 63-93. , 2016",,,"ACM Special Interest Group on Software Engineering (SIGSOFT)","Association for Computing Machinery","2020 IEEE/ACM 1st International Conference on Automation of Software Test, AST 2020","15 July 2020 through 16 July 2020",,162963,,9781450379571,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Test, AST",Conference Paper,"Final","",Scopus,2-s2.0-85093506855
"Santos R.E.S., Cordeiro J.R., Labiche Y., Magalhães C.V.C., Da Silva F.Q.B.","57211898703;57220410573;6602305217;57211147199;35229324700;","Bug! Falha! Bachi! Fallo! Défaut!! What about internationalization testing in the software industry?",2020,"International Symposium on Empirical Software Engineering and Measurement",,, 3422167,"","",,,"10.1145/3382494.3422167","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095851205&doi=10.1145%2f3382494.3422167&partnerID=40&md5=67eaea16956addece6a7c86d35849c35","CESAR, Recife Center for Advanced Studies and Systems, Brazil; Philips Do Brasil Ltda, Brazil; Dept. of Systems and Computer Engineering, Carleton University, Canada; Liferay Inc., Brazil; Centro de Informática, UFPE, Brazil","Santos, R.E.S., CESAR, Recife Center for Advanced Studies and Systems, Brazil; Cordeiro, J.R., Philips Do Brasil Ltda, Brazil; Labiche, Y., Dept. of Systems and Computer Engineering, Carleton University, Canada; Magalhães, C.V.C., Liferay Inc., Brazil; Da Silva, F.Q.B., Centro de Informática, UFPE, Brazil","Background. Testing is an essential activity in the software development life cycle. Nowadays, testing activities are widely spread along the software development process, since software products are continuously tested to meet the user's expectations and to compete in global markets. In this context, internationalization testing is defined as the practice focused on determining that a software works properly in a specific language and in a particular region. Aims. This study aims to explore the particularities of internationalization testing in the software industry and discuss the importance of this practice from the point of view of professionals working in this context. Method. We developed an exploratory qualitative study and conducted interviews with professionals from an international software company, in order to understand three aspects of internationalization testing: general characteristics and importance of this practice, particularities of the process, and the role of test automation in this context. Results. An amount of 13 professionals participated in this study. Results demonstrated that internationalization testing is mostly related to aspects of graphical user interfaces. In this context, truncation and mistranslations are the main faults observed, and test automation might be difficult to implement and maintain due to amount validations that are human-dependent. Conclusion. Internationalization testing is an important practice to guarantee the quality of software products developed for global markets. However, this aspect of software testing remains unpopular or unfamiliar among professionals. This study is a step forward in the process of informing and enlightening academic researchers and practitioners in industry about this theme. © 2020 IEEE Computer Society. All rights reserved.","Internationalization; Localization; Software Testing","Graphical user interfaces; International trade; Life cycle; Software design; Qualitative study; Quality of softwares; Software company; Software development life cycle; Software development process; Software industry; Software products; Specific languages; Software testing",,,,,,,,"Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) 2007 Future of Software Engineering, , IEEE Computer Society; Gillenson, M.L., A literature review of software test cases and future research (2018) 2018 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW); Alaqail, H., Ahmed, S., Overview of software testing standard iso/iec/ieee 29119 (2018) International Journal of Computer Science and Network Security (IJCSNS), 18 (2), pp. 112-116; Bartram, D., The internationalization of testing and new models of test delivery on the internet (2006) International Journal of Testing, 6 (2), pp. 121-131; Abufardeh, S., Magel, K., Qa/testing bi-directional languages software: Issues and challenges (2008) 2008 32nd Annual IEEE International Computer Software and Applications Conference. IEEE; Chang, D.W., Malloy, W.E., (2011) Method for Automating Internationalization Software Testing., , 22 Feb; Archana, J., Raja Chermapandan, S., Palanivel, S., Automation framework for localizability testing of internationalized software (2013) 2013 International Conference on Human Computer Interactions (ICHCI); Abufardeh, S., Magel, K., Software internationalization: Testing methods for bidirectional software (2009) 2009 Fifth International Joint Conference on INC, IMS and IDC. IEEE; Ramler, R., Hoschek, R., Process and tool support for internationalization and localization testing in software product development (2017) International Conference on Product-Focused Software Process Improvement, , Springer, Cham; Yin, R.K., (2003) Case Study Research: Design and Methods, , third ed., Sage, London; Eisenhardt, K.M., Building theories from case study research (1989) The Academy of Management Review; Merriam, B.S., (2009) Qualitative Research: A Guide to Design and Implementation, , Jossey-Bass, San Francisco; Merriam, S., What can you tell from an n of l?: Issues of validity and reliability in qualitative research (1995) PAACE Journal of Lifelong Learning, 4, pp. 50-60; Seaman, C.B., Qualitative methods in empirical studies of software engineering (1999) IEEE Transactions on Software Engineering, 25 (4), pp. 557-572; Strauss, A., Corbin, J., (1990) Basics of Qualitative Research, , Sage publications",,,,"IEEE Computer Society","14th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2020","5 October 2020 through 7 October 2020",,164322,19493770,9781450375801,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-85095851205
"Behrang F., Orso A.","55789905000;6603901617;","AppTestMigrator: A Tool for Automated Test Migration for Android Apps *",2020,"Proceedings - 2020 ACM/IEEE 42nd International Conference on Software Engineering: Companion, ICSE-Companion 2020",,, 9270392,"17","20",,,"10.1145/3377812.3382149","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098572094&doi=10.1145%2f3377812.3382149&partnerID=40&md5=f6b7f61199818cd2f0c9da9757ef3362","Georgia Institute of Technology, Atlanta, GA, United States","Behrang, F., Georgia Institute of Technology, Atlanta, GA, United States; Orso, A., Georgia Institute of Technology, Atlanta, GA, United States","The use of mobile apps is increasingly widespread, and much effort is put into testing these apps to make sure they behave as intended. In this demo, we present AppTestMigrator, a technique and tool for migrating test cases between apps with similar functionality. The intuition behind AppTestMigrator is that many apps share similarities in their functionality, and these similarities often result in conceptually similar user interfaces (through which that functionality is accessed). AppTestMigrator attempts to automatically transform the sequence of events and oracles in a test case for an app (source app) to events and oracles for another app (target app). The results of our preliminary evaluation show the effectiveness of AppTestMigrator in migrating test cases between mobile apps with similar functionality.Video URL: Https://youtu.be/WQnfEcwYqa4 © 2020 ACM.","GUI testing; mobile apps; test migration","User interfaces; Android apps; Automated test; Mobile apps; Sequence of events; Test case; Android (operating system)",,,,,"National Science Foundation, NSF: 1548856, CCF-1161821

Defense Advanced Research Projects Agency, DARPA: FA8650-15-C-7556, FA8650-16-C-7620

International Business Machines Corporation, IBM

Microsoft Research

Google","We thank the students who helped with our empirical evaluation for their time. This work was partially supported by the National Science Foundation under grants CCF-1161821 and 1548856, DARPA, under contracts FA8650-15-C-7556 and FA8650-16-C-7620, and gifts from Google, IBM Research, and Microsoft Research.",,"(2020) PDF2TEXT, , https://www.pdf2txt.com/, AKS-Labs; (2020) Communicate with the UI Thread, , https://developer.android.com/training/multiple-threads/communicate-ui, Android Open Source Project; (2020) Espresso, , https://developer.android.com/training/testing/espresso/, Android Open Source Project; (2020) Flask, , https://palletsprojects.com/p/flask/, Armin Ronacher; Behrang, F., Orso, A., Automated test migration for mobile apps (2018) Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings (ICSE '18), pp. 384-385. , ACM, New York, NY, USA; Behrang, F., Orso, A., Test migration for efficient largescale assessment of mobile app coding assignments (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA '18), pp. 164-175. , ACM, New York, NY, USA; Behrang, F., Orso, A., Test migration between mobile apps with similar functionality (2019) Proceedings of the 34th ACM/IEEE International Conference on Automated Software Engineering (ASE '19), pp. 54-65. , ACM, New York, NY, USA; Hu, G., Zhu, L., Yang, J., Appflow: Using machine learning to synthesize robust, reusable ui tests (2018) Proceedings of the 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE '18), pp. 269-282. , ACM, New York, NY, USA; Lin, J., Jabbarvand, R., Malek, S., Test transfer across mobile apps through semantic mapping (2019) Proceedings of the 34th ACM/IEEE International Conference on Automated Software Engineering (ASE '19), pp. 42-53. , ACM, New York, NY, USA; Loper, E., Bird, S., Nltk: The natural language toolkit (2002) Proceedings of the ACL-02 Workshop on Effective Tools and Methodologies for Teaching Natural Language Processing and Computational Linguistics-1 (ETMTNLP '02), 1, pp. 63-70. , Association for Computational Linguistics, Stroudsburg, PA, USA; Manning, C.D., Surdeanu, M., Bauer, J., Finkel, J., Bethard, S.J., McClosky, D., The stanford corenlp natural language processing toolkit (2014) Association for Computational Linguistics (ACL) System Demonstrations, pp. 55-60. , Association for Computational Linguistics, Stroudsburg, PA, USA; Mariani, L., Pezzè, M., Zuddas, D., Augusto: Exploiting popular functionalities for the generation of semantic gui tests with oracles (2018) Proceedings of the 40th International Conference on Software Engineering (ICSE '18), pp. 280-290. , ACM, New York, NY, USA; Mikolov, T., Chen, K., Corrado, G., Dean, J., Efficient estimation of word representations in vector space (2013) CoRR, pp. 1-10. , 2013; (2020) Cypher Query Language, , https://neo4j.com/developer/cypherquery-language/, Neo4j Inc; (2020) Neo4j, , https://neo4j.com, Neo4j Inc; Qin, X., Zhong, H., Wang, X., Testmig: Migrating gui test cases from ios to android (2019) Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2019), pp. 284-295. , ACM, New York, NY, USA; Rau, A., Hotzkow, J., Zeller, A., Efficient gui test generation by learning from tests of other apps (2018) Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings (ICSE '18), pp. 370-371. , ACM, New York, NY, USA; Rau, A., Hotzkow, J., Zeller, A., Transferring tests across web applications (2018) Web Engineering, pp. 50-64. , Tommi Mikkonen, Ralf Klamma, and Juan Hernández (Eds.) Springer International Publishing, Cham; Ehek, R., Sojka, P., Software framework for topic modelling with large corpora (2010) Proceedings of the LREC Workshop on New Challenges for NLP Frameworks. ELRA, Valletta, Malta, pp. 45-50; (2020) OkHttp, , https://square.github.io/okhttp/, Square Inc; (2020) XML Path Language, , https://www.w3.org/TR/xpath-30/, W3C; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE '15), pp. 658-668. , IEEE, New York",,,"ACM;et al.;IEEE CS and its Technical Committee on Software Engineering (TCSE);Korean Institute for Information Scientists and Engineers (KIISE);National Science Foundation (NSF);Special Interest Group on Software Engineering (SIGSOFT)","Institute of Electrical and Electronics Engineers Inc.","42nd ACM/IEEE International Conference on Software Engineering: Companion, ICSE-Companion 2020","27 June 2020 through 19 July 2020",,165567,,9781450371223,,,"English","Proc. - ACM/IEEE Int. Conf. Softw. Eng.: Companion, ICSE-Companion",Conference Paper,"Final","",Scopus,2-s2.0-85098572094
"Nass M., Alegroth E., Feldt R.","55843952200;55843479600;24476388300;","On the Industrial Applicability of Augmented Testing: An Empirical Study",2020,"Proceedings - 2020 IEEE 13th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020",,, 9155725,"364","371",,,"10.1109/ICSTW50294.2020.00065","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091800049&doi=10.1109%2fICSTW50294.2020.00065&partnerID=40&md5=a24b951ce92e21a1059369ce97be49e2","Blekinge Institute of Technology, Serl Sweden, Karlskrona, Sweden","Nass, M., Blekinge Institute of Technology, Serl Sweden, Karlskrona, Sweden; Alegroth, E., Blekinge Institute of Technology, Serl Sweden, Karlskrona, Sweden; Feldt, R., Blekinge Institute of Technology, Serl Sweden, Karlskrona, Sweden","Testing applications with graphical user Interfaces (GUI) is an important but also a time-consuming task in practice. Tools and frameworks for GUI test automation can make the test execution more efficient and lower the manual labor required for regression testing. However, the test scripts used for automated GUI-based testing still require a substantial development effort and are often reported as sensitive to change, leading to frequent and costly maintenance. The efficiency of development, maintenance, and evolution of such tests are thereby dependent on the readability of scripts and the ease-of-use of test tools/frameworks in which the test scripts are defined. To address these shortcomings in existing state-of-practice techniques, a novel technique referred to as Augmented Testing (AT) has been proposed. AT is defined as testing the System Under Test (SUT) through an Augmented GUI that superimposes information on top of the SUT GUI. The Augmented GUI can provide the user with hints, test data, or other support while also observing and recording the tester's interactions. For this study, a prototype tool, called Scout, has been used that adheres to the AT concept that is evaluated in an industrial empirical study. In the evaluation, quasi-experiments and questionnaire surveys are performed in two workshops, with 12 practitioners from two Swedish companies (Ericsson and Inceptive). Results show that Scout can be used to create equivalent test cases faster, with statistical significance, than creating automated scripts in two popular state-of-practice tools. The study concludes that AT has cost-value benefits, applies to industrial-grade software, and overcomes several deficiencies of state-of-practice GUI testing technologies in terms of ease-of-use. © 2020 IEEE.","Augmented Testing; Industrial Case Study; System Testing; Test Automation","Automation; Graphical user interfaces; Surveys; Testing; Verification; Automated scripts; Empirical studies; Graphical user interfaces (GUI); Questionnaire surveys; Regression testing; Statistical significance; System under test; Time-consuming tasks; Software testing",,,,,"Blekinge Tekniska Högskola, BTH","IX. ACKNOWLEDGMENTS This work was supported by the KKS foundation through the S.E.R.T. Research Profile project at Blekinge Institute of Technology.",,"Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving guidirected test scripts (2009) Proceedings of the 31st International Conference on Software Engineering. IEEE Computer Society, pp. 408-418; Creating gui testing tools using accessibility technologies (2009) Software Testing, Verification and Validation Workshops, 2009. ICSTW'09. International Conference On. IEEE, pp. 243-250; Rafi, D.M., Moses, K.R.K., Petersen, K., M¨antyl¨a, M.V., Benefits and limitations of automated software testing: Systematic literature review and practitioner survey (2012) Proceedings of the 7th International Workshop on Automation of Software Test. IEEE Press, pp. 36-42; Kresse, A., Kruse, P.M., Development and maintenance efforts testing graphical user interfaces: A comparison (2016) Proceedings of the 7th International Workshop on Automating Test Case Design, Selection, and Evaluation. ACM, pp. 52-58; Thummalapenta, S., Devaki, P., Sinha, S., Chandra, S., Gnanasundaram, S., Nagaraj, D.D., Sathishkumar, S., Efficient and change-resilient test automation: An industrial case study (2013) Proceedings of the 2013 International Conference on Software Engineering. IEEE Press, pp. 1002-1011; Nass, M., Alégroth, E., Feldt, R., Augmented testing: Industry feedback to shape a new testing technology (2019) 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW). IEEE, pp. 176-183; Gorschek, T., Garre, P., Larsson, S., Wohlin, C., A model for technology transfer in practice (2006) IEEE Software, 23 (6), pp. 88-95; Mahmud, J., Cypher, A., Haber, E., Lau, T., Design and industrial evaluation of a tool supporting semi-automated website testing (2014) Software Testing, Verification and Reliability, 24 (1), pp. 61-82; Moreira, R.M., Paiva, A.C., Nabuco, M., Memon, A., Pattern-based gui testing: Bridging the gap between design and quality assurance (2017) Software Testing, Verification and Reliability, 27 (3), p. e1629; Pham, R., Holzmann, H., Schneider, K., Br¨uggemann, C., Beyond plain video recording of gui tests: Linking test case instructions with visual response documentation (2012) Proceedings of the 7th International Workshop on Automation of Software Test. IEEE Press, pp. 103-109; Vos, T.E., Kruse, P.M., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) International Journal of Information System Modeling and Design (IJISMD), 6 (3), pp. 46-83; Aho, P., Suarez, M., Kanstrén, T., Memon, A.M., Murphy tools: Utilizing extracted gui models for industrial software testing (2014) Software Testing, Verification and Validation Workshops (ICSTW), 2014 IEEE Seventh International Conference On. IEEE, pp. 343-348; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference On. IEEE, pp. 81-90; Amalfitano, D., Riccio, V., Amatucci, N., De Simone, V., Fasolino, A.R., Combining automated gui exploration of android apps with capture and replay through machine learning (2019) Information and Software Technology, 105, pp. 95-116; Wohlin, C., Runeson, P., H¨ost, M., Ohlsson, M.C., Regnell, B., Wesslén, A., Experimentation in software engineering (2012) Springer Science & Business Media; https://www.protractortest.org; https://angular.io; Bertram, D., Likert scales (2007) Retrieved November, 2, p. 2013; https://www.seleniumhq.org",,,,"Institute of Electrical and Electronics Engineers Inc.","13th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020","23 March 2020 through 27 March 2020",,162282,,9781728110752,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85091800049
"Nayak V., Kraus D.","57219225346;57219227347;","Session-Based Recommender Systems for Action Selection in GUI Test Generation",2020,"Proceedings - 2020 IEEE 13th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020",,, 9155582,"372","375",,,"10.1109/ICSTW50294.2020.00066","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091780566&doi=10.1109%2fICSTW50294.2020.00066&partnerID=40&md5=dff2822409619c68bf83c98a4c58e309","ReTest GmbH, Haid-und-Neu-Straße 7, Karlsruhe, 76131, Germany","Nayak, V., ReTest GmbH, Haid-und-Neu-Straße 7, Karlsruhe, 76131, Germany; Kraus, D., ReTest GmbH, Haid-und-Neu-Straße 7, Karlsruhe, 76131, Germany","Test generation at the graphical user interface (GUI) level has proven to be an effective method to reveal faults. When doing so, a test generator has to repeatably decide what action to execute given the current state of the system under test (SUT). This problem of action selection usually involves random choice, which is often referred to as monkey testing. Some approaches leverage other techniques to improve the overall effectiveness, but only a few try to create human-like actions - or even entire action sequences. We have built a novel session-based recommender system that can guide test generation. This allows us to mimic past user behavior, reaching states that require complex interactions. We present preliminary results from an empirical study, where we use GitHub as the SUT. These results show that recommender systems appear to be well-suited for action selection, and that the approach can significantly contribute to the improvement of GUI-based test generation. © 2020 IEEE.","information filtering; Test generation; testing and debugging","Behavioral research; Graphical user interfaces; Recommender systems; Verification; Action selection; Action sequences; Empirical studies; Graphical user interfaces (GUI); Overall effectiveness; System under test; Test generations; User behaviors; Software testing",,,,,,"ACKNOWLEDGEMENTS As part of the joint research project “Surili”, this work is supported by a grant (no. 01IS17092A) from the German Federal Ministry of Education and Research.",,"Fowler, M., (2012), https://martinfowler.com/bliki/TestPyramid.html, May; Walgude, A., Natarajan, S., (2019) World Quality Report 2019-20, , Paris, France, Tech. Rep; Wiklund, K., Wiklund, M., The next level of test automation: What about the users (2018) Proceedings of the 2018 International Conference on Software Testing, Verification, and Validation Workshops, Ser. ICSTW '18, Vasteras, Sweden: IEEE, pp. 159-162; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th ACM SIGSOFT International Symposium on Software Testing and Analysis, Ser. ISSTA '16, Saarbrücken, Germany: IEEE, pp. 94-105; Alshahwan, N., Gao, X., Harman, M., Jia, Y., Mao, K., Mols, A., Tei, T., Zorin, I., Deploying search based software engineering with sapienz at facebook (2018) Proceedings of the 10th International Conference on Search-Based Software Engineering, Ser. SSBSE '18, Montpellier, France: Springer Verlag, pp. 3-45; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a gui (2011) Proceedings of the 3rd International Conference on Search-Based Software Engineering, Ser. SSBSE '11, pp. 173-187. , Szeged, Hungary: Springer Verlag; Esparcia-Alcázar, A.I., Almenar, F., Vos, T.E.J., Rueda, U., Using genetic programming to evolve action selection rules in traversal-based automated software testing: Results obtained with the testar tool (2018) Memetic Computing, 10 (3), pp. 257-265. , Sep; Kraus, D., (2018) Machine Learning and Evolutionary Computing for Gui-based Regression Testing, , arXiv: 1802.03768; Ermuth, M., Pradel, M., Monkey see, monkey do: Effective generation of gui tests with inferred macro events (2016) Proceedings of the 25th ACM SIGSOFT International Symposium on Software Testing and Analysis, Ser. ISSTA '16, pp. 82-93. , Saarbrücken, Germany: ACM; Li, Y., Yang, Z., Guo, Y., Chen, X., (2019) A Deep Learning Based Approach to Automated Android App Testing, , arXiv: 1901.02633; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U.R., Vos, T.E.J., Q-learning strategies for action selection in the testar automated testing tool (2016) Proceedings of the 6th International Conference on Metaheuristics and Nature Inspired Computing, Ser. META '16, Marrakech, Morocco, pp. 174-180; Degott, C., Borges, N.P., Jr., Zeller, A., Learning user interface element interactions (2019) Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, Ser. ISSTA '19, pp. 296-306. , Beijing, China: ACM; Amalfitano, D., Riccio, V., Amatucci, N., De Simone, V., Fasolino, A.R., Combining automated gui exploration of android apps with capture and replay through machine learning (2019) Information and Software Technology, 105, pp. 95-116. , May; Ciupa, I., Meyer, B., Oriol, M., Pretschner, A., Finding faults: Manual testing vs. random+ testing vs. user reports (2008) Proceedings of the 19th IEEE International Symposium on Software Reliability Engineering, Ser. ISSRE '08, pp. 157-166. , Seattle, WA, USA: IEEE Press; Gomez-Uribe, C.A., Hunt, N., The netflix recommender system: Algorithms, business value, and innovation (2015) ACM Transactions on Management Information Systems, 6 (4), pp. 131-1319. , Dec; Covington, P., Adams, J., Sargin, E., Deep neural networks for youtube recommendations (2016) Proceedings of the 10th ACM Conference on Recommender Systems, Ser. RecSys '16, pp. 191-198. , Boston, MA, USA: ACM; Wang, S., Cao, L., Wang, Y., (2019) A Survey on Session-based Recommender Systems, , arXiv: 1902.04864; Lipton, Z.C., Berkowitz, J., Elkan, C., (2015) A Critical Review of Recurrent Neural Networks for Sequence Learning, , arXiv: 1506.00019; Bengio, Y., Simard, P.Y.S., Frasconi, P., Learning long-term dependencies with gradient descent is difficult (1994) IEEE Transactions on Neural Networks, 5 (2), pp. 157-166. , Mar; Hidasi, B., Karatzoglou, A., Baltrunas, L., Tikk, D., (2016) Session-based Recommendations with Recurrent Neural Networks, , arXiv: 1511. 06939; Cho, K., Van Merriënboer, B., Bahdanau, D., Bengio, Y., (2014) On the Properties of Neural Machine Translation: Encoder-decoder Approaches, , arXiv: 1409.1259; Hidasi, B., Karatzoglou, A., (2017) Recurrent Neural Networks with Top-k Gains for Session-based Recommendations, , arXiv: 1706.03847; Buenen, M., Walgude, A., (2018) World Quality Report 2018-19, , Paris, France, Tech. Rep; Wu, H., Ning, Y., Chakraborty, P., Vreeken, J., Tatti, N., Ramakrishnan, N., (2016) Generating Realistic Synthetic Population Datasets, , arXiv: 1602.06844; Nagaraja, S., Shah, R., (2019) Clicktok: Click Fraud Detection Using Traffic Analysis, , arXiv: 1903.00733; Quadrana, M., Cremonesi, P., Jannach, D., Sequence-aware recommender systems (2018) ACM Computing Surveys, 51 (4), pp. 661-6636. , Jul",,,,"Institute of Electrical and Electronics Engineers Inc.","13th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020","23 March 2020 through 27 March 2020",,162282,,9781728110752,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85091780566
"Canny A., Palanque P., Navarre D.","57196296740;6602748156;6602114671;","Model-Based Testing of GUI Applications Featuring Dynamic Instanciation of Widgets",2020,"Proceedings - 2020 IEEE 13th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020",,, 9155667,"95","104",,,"10.1109/ICSTW50294.2020.00029","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091754999&doi=10.1109%2fICSTW50294.2020.00029&partnerID=40&md5=482dc57c98c7dcc0cd4a70172c972416","Université Toulouse Iii Paul Sabatier, ICS-IRIT, Toulouse, France","Canny, A., Université Toulouse Iii Paul Sabatier, ICS-IRIT, Toulouse, France; Palanque, P., Université Toulouse Iii Paul Sabatier, ICS-IRIT, Toulouse, France; Navarre, D., Université Toulouse Iii Paul Sabatier, ICS-IRIT, Toulouse, France","The testing of applications with a Graphical User Interface (GUI) is a complex activity because of the infinity of possible event sequences. In the field of GUI Testing, model-based approaches based on reverse engineering of GUI application have been proposed to generate test cases. Unfortunately, evidences show that these techniques do not support some of the features of modern GUI applications. These features include dynamic widgets instantiation or advanced interaction techniques (e.g. multitouch). In this paper, we propose to build models of the applications from requirements, as it is standard practice in Model-Based Testing. To do so, we identified ICO (Interactive Cooperative Object) as one of the modelling techniques allowing the description of complex GUI behavior. We demonstrate that this notation is suitable for generating test cases targeting complex GUI applications in a process derived from the standard ModelBased Testing process. © 2020 IEEE.","GUI Testing; Model-Based Testing; User Interface Description Languages","Graphical user interfaces; Model checking; Reverse engineering; Complex activity; Graphical user interfaces (GUI); GUI applications; Interaction techniques; Model based approach; Model based testing; Modelling techniques; Standard practices; Software testing",,,,,,,,"Appert, C., Beaudouin-Lafon, M., SwingStates: Adding state machines to the swing toolkit (2006) Proceedings of the 19th Annual ACM Symposium on User Interface Software and Technology, Montreux, Switzerland, pp. 319-322; Banerjee, I., Nguyen, B., Garousi, V., Memon, A.M., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694. , Oct; Barboni, E., Conversy, S., Navarre, D., Palanque, P., Model-Based engineering of widgets, user applications and servers compliant with arinc 661 specification (2007) Interactive Systems. Design, Specification, and Verification, Berlin, Heidelberg, pp. 25-38; Bastide, R., Navarre, D., Palanque, P., A model-based tool for interactive prototyping of highly interactive applications (2002) CHI '02 Extended Abstracts on Human Factors in Computing Systems, pp. 516-517. , New York, NY, USA; Bastide, R., Navarre, D., Palanque, P., Schyn, A., Dragicevic, P., A model-based approach for real-time embedded multimodal systems in military aircrafts (2004) Proceedings of the 6th International Conference on Multimodal Interfaces, pp. 243-250. , State College, PA, USA; Best, E., Schlachter, U., Analysis of petri nets and transition systems (2015) Electron. Proc. Theor. Comput. Sci, 189, pp. 53-67. , Aug; Bolt, R.A., Put-that-there': Voice and gesture at the graphics interface (1980) Proceedings of the 7th Annual Conference on Computer Graphics and Interactive Techniques, Seattle, Washington, pp. 262-270; Campos, J.C., A more intelligent test case generation approach through task models manipulation (2017) Proc. ACM Hum.-Comput. Interact, 1, pp. 91-920. , Jun. EICS; Canny, A., Bouzekri, E., Martinie, C., Palanque, P., Rationalizing the need of architecture-driven testing of interactive systems (2018) Human-Centered and Error-Resilient Systems Development; Canny, A., Navarre, D., Campos, J.C., Palanque, P., Model-based testing of post-wimp interactions using object oriented petri-nets (2019) 8th Formal Methods for Interactive Systems Workshop (FMIS); Cardelli, L., Pike, R., Squeak: A language for communicating with mice (1985) SIGGRAPH Comput. Graph, 19 (3), pp. 199-204. , Jul; Cheng, L., Chang, J., Yang, Z., Wang, C., GUICat: GUI testing as a service (2016) 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 858-863; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440; Dragicevic, P., Fekete, J.-D., Support for input adaptability in the ICON toolkit (2004) Proceedings of the 6th International Conference on Multimodal Interfaces, pp. 212-219. , State College, PA, USA; Dumas, B., Lalanne, D., Ingold, R., HephaisTK: A toolkit for rapid prototyping of multimodal interfaces (2009) Proceedings of the 2009 International Conference on Multimodal Interfaces, Cambridge, Massachusetts, pp. 231-232; Gregory, J., Berthoud, L., Tryfonas, T., Rossignol, A., Faure, L., The long and winding road: MBSE adoption for functional avionics of spacecraft Journal of Systems and Software, 160, p. 110453. , Feb. 2020; Hamon, A., Palanque, P., Silva, J.L., Deleris, Y., Barboni, E., Formal description of multi-touch interactions (2013) Proceedings of the 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, New York, NY, pp. 207-216; Hamon, A., Palanque, P., Silva, J.L., Deleris, Y., Barboni, E., Formal description of multi-touch interactions (2013) Proceedings of the 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, New York, NY, pp. 207-216; Hamon, A., Palanque, P., Cronel, M., André, R., Barboni, E., Navarre, D., Formal modelling of dynamic instantiation of input devices and interaction techniques: Application to multi-touch interactions (2014) Proceedings of the 2014 ACM SIGCHI Symposium on Engineering Interactive Computing Systems, New York, NY, pp. 173-178; Hinckley, K., Czerwinski, M., Sinclair, M., Interaction and modeling techniques for desktop two-handed input (1998) Proceedings of the 11th Annual ACM Symposium on User Interface Software and Technology, San Francisco, California, pp. 49-58; (2014), IEEE Computer Society, P. Bourque, and R. E. Fairley, Guide to the Software Engineering Body of Knowledge (SWEBOK(R)): Version 3.0, 3rd ed. Los Alamitos, CA, USA: IEEE Computer Society Press; Jensen, K., Kristensen, L.M., Wells, L., Coloured petri nets and cpn tools for modelling and validation of concurrent systems (2007) Int J Softw Tools Technol Transfer, 9 (3), pp. 213-254. , Jun; Kammer, D., Wojdziak, J., Keck, M., Groh, R., Taranko, S., Towards a formalization of multi-touch gestures (2010) ACM International Conference on Interactive Tabletops and Surfaces, Saarbrücken, Germany, pp. 49-58; Katsurada, K., Nakamura, Y., Yamada, H., Nitta, T., XISL: A language for describing multimodal interaction scenarios (2003) Proceedings of the 5th International Conference on Multimodal Interfaces, Vancouver, British Columbia, Canada, pp. 281-284; Lelli, V., Blouin, A., Baudry, B., Coulon, F., On model-based testing advanced GUIs (2015) 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 1-10; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) Verification and Validation 2012 IEEE Fifth International Conference on Software Testing, pp. 81-90; Memon, A.M., Nguyen, B.N., Advances in automated model-based system testing of software applications with a gui front-end (2010) Advances in Computers, 80, pp. 121-162. , M. V. Zelkowitz, Ed. Elsevier; Navarre, D., Palanque, P., Ladry, J.-F., Barboni, E., ICOs: A modelbased user interface description technique dedicated to interactive systems addressing usability, reliability and scalability (2009) ACM Trans. Comput.-Hum. Interact, 16 (4), pp. 181-1856. , Nov; De Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) Tools and Algorithms for the Construction and Analysis of Systems, pp. 337-340. , Berlin, Heidelberg; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Autom Softw Eng, 21 (1), pp. 65-105. , Mar; Oney, S., Myers, B., Brandt, J., ConstraintJS: Programming interactive behaviors for the web by integrating constraints and states (2012) Proceedings of the 25th Annual ACM Symposium on User Interface Software and Technology, Cambridge, Massachusetts, pp. 229-238; Palanque, P.A., Bastide, R., Dourte, L., Sibertin-Blanc, C., Design of user-driven interfaces using Petri nets and objects (1993) Advanced Information Systems Engineering, Berlin, Heidelberg, pp. 569-585; Palanque, P., Bastide, R., Paterno, F., Formal Specification as a Tool for Objective Assessment of Safety-Critical Interactive Systems (1997) Human-Computer Interaction INTERACT '97: IFIP TC13 International Conference on Human-Computer Interaction, pp. 323-330. , 14th-18th July 1997, Sydney, Australia, S. Howard, J. Hammond, and G. Lindgaard, Eds. Boston, MA: Springer US; Palanque, P., Bernhaupt, R., Navarre, D., Ould, M., Winckler, M., Supporting usability evaluation of multimodal man-machine interfaces for space ground segment applications using petri nets based formal specification (2006) SpaceOps 2006 Conference, , American Institute of Aeronautics and Astronautics; Palanque, P., Ladry, J.-F., Navarre, D., Barboni, E., High-Fidelity prototyping of interactive systems can be formal too (2009) Human-Computer Interaction, pp. 667-676. , New Trends, Berlin, Heidelberg; Petri, C.A., (1966) Communication with Automata, , http://edoc.sub.unihamburg.de/informatik/volltexte/2010/155/pdf/diss-petri-engl.pdf; Pezze, M., Rondena, P., Zuddas, D., Automatic gui testing of desktop applications: An empirical assessment of the state of the art (2018) Companion Proceedings for the ISSTA/ECOOP 2018 Workshops, New York, NY, pp. 54-62; Utting, M., Pretschner, A., Legeard, B., A taxonomy of model-based testing approaches (2012) Softw. Test. Verif. Reliab, 22 (5), pp. 297-312. , Aug; Vorobyov, K., Krishnan, P., Comparing model checking and static program analysis: A case study in error detection approaches (2010) Proceedings of SSV; Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TESTAR: Tool support for test automation at the user interface level (2015) IJISMD, 6 (3), pp. 46-83. , Jul; Ye, X., Zhou, J., Song, X., On reachability graphs of Petri nets (2003) Computers & Electrical Engineering, 29 (2), pp. 263-272. , Mar",,,,"Institute of Electrical and Electronics Engineers Inc.","13th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020","23 March 2020 through 27 March 2020",,162282,,9781728110752,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85091754999
"Coppola R., Ardito L., Torchiano M., Alegroth E.","57191261885;36184897700;6602571197;55843479600;","Translation from Visual to Layout-based Android Test Cases: A Proof of Concept",2020,"Proceedings - 2020 IEEE 13th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020",,, 9156007,"74","83",,,"10.1109/ICSTW50294.2020.00027","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091747062&doi=10.1109%2fICSTW50294.2020.00027&partnerID=40&md5=e916831cc1f493af946d8547cf67ed31","Politecnico di Torino, Turin, Italy; Blekinge Institute of Technology, Karlskrona, Sweden","Coppola, R., Politecnico di Torino, Turin, Italy; Ardito, L., Politecnico di Torino, Turin, Italy; Torchiano, M., Politecnico di Torino, Turin, Italy; Alegroth, E., Blekinge Institute of Technology, Karlskrona, Sweden","Context: 2nd generation (Layout-based) and 3rd generation (Visual) GUI testing are two approaches for testing mobile GUIs, both with individual benefits and drawbacks. Previous research has presented approaches to translate 2nd generation scripts to 3rd generation scripts but not the vice versa. Goal: The objective of this work is to provide Proof of Concept of the effectiveness of automatic translation between existing 3rd generation test scripts to 2nd generation test scripts. Method: A tool architecture is presented and implemented in a tool capable of translating most 3rd generation interactions with the GUI of an Android app into 2nd generation instructions and oracles for the Espresso testing tool.Results: We validate our approach on two test suites of our own creation, consisting of 30 test cases each. The measured success rate of the translation is 96.7% (58 working test cases out of 60 applications of the translator). Conclusion: The study provides support for the feasibility of a translation-based approach from 3rd to 2nd generation test cases. However, additional work is needed to make the approach applicable in real-world scenarios or larger open-source test suites. © 2020 IEEE.","Android; Mobile Applications; Software Engineering; Testing","Android (operating system); Graphical user interfaces; Open source software; Verification; 3rd generation; Automatic translation; GUI testing; Open sources; Proof of concept; Real-world scenario; Test case; Test scripts; Software testing",,,,,,,,"Ardito, L., Coppola, R., Torchiano, M., Alégroth, E., Towards automated translation between generations of gui-based tests for mobile devices (2018) Companion Proceedings for the ISSTA/ECOOP 2018 Workshops. ACM, pp. 46-53; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing (2017) Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference On. IEEE, pp. 399-410; Nolan, G., Espresso (2015) Agile Android. Springer, pp. 59-68; Zelenchuk, D., Espresso and ui automator: The perfect tandem (2019) Android Espresso Revealed. Springer, pp. 165-189; Shah, G., Shah, P., Muchhala, R., Software testing automation using appium (2014) International Journal of Current Engineering and Technology, 4 (5), pp. 3528-3531; Sadeh, B., Orbekk, K., Eide, M.M., Gjerde, N.C., Tønnesland, T.A., Gopalakrishnan, S., Towards unit testing of user interface code for android mobile applications (2011) International Conference on Software Engineering and Computer Systems. Springer, pp. 163-175; Zadgaonkar, H., (2013) Robotium Automated Testing for Android, , Packt Publishing Ltd; Fazzini, M., Freitas, E.N.D.A., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, and running platform independent android tests (2017) Software Testing, Verification and Validation (ICST), 2017 IEEE International Conference On. IEEE, pp. 149-160; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for android (2013) Proceedings of the 2013 International Conference on Software Engineering. IEEE Press, pp. 72-81; Negara, S., Esfahani, N., Buse, R.P., Practical android test recording with espresso test recorder (2019) Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Practice. IEEE Press, pp. 193-202; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, pp. 94-105; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Crashscope: A practical tool for automated testing of android applications (2017) Software Engineering Companion (ICSE-C), 2017 IEEE/ACM 39th International Conference On. IEEE, pp. 15-18; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based gui testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, pp. 245-256; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using gui screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology. ACM, pp. 183-192; Alégroth, E., (2015) Visual GUI Testing: Automating High-level Software Testing in Industrial Practice, , Chalmers University of Technology; Alegroth, E., Nass, M., Olsson, H.H., Jautomate: A tool for systemand acceptance-test automation (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation. IEEE, pp. 439-446; Hasselknippe, K.F., Li, J., A novel tool for automatic gui layout testing (2017) 2017 24th Asia-Pacific Software Engineering Conference (APSEC). IEEE, pp. 695-700; Linares-Vásquez, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications (2017) Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference On. IEEE, pp. 613-622; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST). IEEE, pp. 1-10; Coppola, R., Morisio, M., Torchiano, M., Mobile gui testing fragility: A study on open-source android applications (2018) IEEE Transactions on Reliability; Alégroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual gui testing: An empirical study (2015) Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference On. IEEE, pp. 1-10; Ardito, L., Coppola, R., Morisio, M., Torchiano, M., Espresso vs. eyeautomate: An experiment for the comparison of two generations of android gui testing (2019) Proceedings of the Evaluation and Assessment on Software Engineering. ACM, pp. 13-22; Coppola, R., Morisio, M., Torchiano, M., Ardito, L., Scripted gui testing of android open-source apps: Evolution of test code and fragility causes (2019) Empirical Software Engineering, pp. 1-44; Imtiaz, J., Sherin, S., Khan, M.U., Iqbal, M.Z., A systematic literature review of test breakage prevention and repair techniques (2019) Information and Software Technology, 113, pp. 1-19; Li, X., Chang, N., Wang, Y., Huang, H., Pei, Y., Wang, L., Li, X., Atom: Automatic maintenance of gui test scripts for evolving mobile applications (2017) 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST). IEEE, pp. 161-171; Chang, N., Wang, L., Pei, Y., Mondal, S.K., Li, X., Change-based test script maintenance for android apps (2018) 2018 IEEE International Conference on Software Quality, Reliability and Security (QRS). IEEE, pp. 215-225; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Pesto: Automated migration of dom-based web tests towards the visual approach (2018) Software Testing, Verification and Reliability, 28 (4), p. e1665",,,,"Institute of Electrical and Electronics Engineers Inc.","13th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2020","23 March 2020 through 27 March 2020",,162282,,9781728110752,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-85091747062
"Borges N.P., Rau J., Zeller A.","57190220281;57221477900;7007015864;","Speeding up GUI Testing by On-Device Test Generation",2020,"Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020",,, 9285989,"1340","1343",,,"10.1145/3324884.3415302","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099245701&doi=10.1145%2f3324884.3415302&partnerID=40&md5=e7eef95404f308801cec029fc122914e","CISPA Helmholtz Center for Information Security, Saarbrücken, Germany","Borges, N.P., CISPA Helmholtz Center for Information Security, Saarbrücken, Germany; Rau, J., CISPA Helmholtz Center for Information Security, Saarbrücken, Germany; Zeller, A., CISPA Helmholtz Center for Information Security, Saarbrücken, Germany","When generating GUI tests for Android apps, it typically is a separate test computer that generates interactions, which are then executed on an actual Android device. While this approach is efficient in the sense that apps and interactions execute quickly, the communication overhead between test computer and device slows down testing considerably. In this work, we present DD-2, a test generator for Android that tests other apps on the device using Android accessibility services. In our experiments, DD-2 has shown to be 3.2 times faster than its computer-device counterpart, while sharing the same source code. © 2020 ACM.","Android; Dynamic analysis; test generation","Graphical user interfaces; Android apps; Communication overheads; Computer device; GUI testing; Source codes; Test generations; Android (operating system)",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., de Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Acm Sigplan Notices, 48, pp. 641-660; Borges, N.P., Jr., Gómez, M., Zeller, A., Guiding app testing with mined interaction models (2018) Proceedings of the 5th International Conference on Mobile Software Engineering and Systems (MobileSoft), pp. 133-143; Borges, N.P., Jr., Hotzkow, J., Zeller, A., Droidmate-2: A platform for Android test generation (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE), pp. 916-919; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? (E) (2015) Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on, pp. 429-440; Gopinath, R., Jensen, C., Groce, A., Code coverage for suite evaluation by developers (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 72-82; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated testing of android apps: A systematic literature review (2018) IEEE Transactions on Reliability, 99, pp. 1-22. , 2018; Li, Y., Yang, Z., Guo, Y., Chen, X., Humanoid: A deep learning-based approach to automated black-box android app testing (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 1070-1073; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 94-105; Wong, M.Y., Lie, D., Intellidroid: A targeted input generator for the dynamic analysis of android malware (2016) NDSS, 16, pp. 21-24",,,"Deakin University;Monash University;NASA Ames Research Centre","Institute of Electrical and Electronics Engineers Inc.","35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020","22 September 2020 through 25 September 2020",,166082,,9781450367684,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85099245701
"Behrang F., Orso A.","55789905000;6603901617;","Seven Reasons Why: An In-Depth Study of the Limitations of Random Test Input Generation for Android",2020,"Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020",,, 9286135,"1066","1077",,,"10.1145/3324884.3416567","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099188928&doi=10.1145%2f3324884.3416567&partnerID=40&md5=e658f22a419337c3493e24ebd298acec","Georgia Tech, Atlanta, GA, United States","Behrang, F., Georgia Tech, Atlanta, GA, United States; Orso, A., Georgia Tech, Atlanta, GA, United States","Experience paper: Testing of mobile apps is time-consuming and requires a great deal of manual effort. For this reason, industry and academic researchers have proposed a number of test input generation techniques for automating app testing. Although useful, these techniques have weaknesses and limitations that often prevent them from achieving high coverage. We believe that one of the reasons for these limitations is that tool developers tend to focus mainly on improving the strategy the techniques employ to explore app behavior, whereas limited effort has been put into investigating other ways to improve the performance of these techniques. To address this problem, and get a better understanding of the limitations of input-generation techniques for mobile apps, we conducted an in-depth study of the limitations of MONKEy-arguably the most widely used tool for automated testing of Android apps. Specifically, in our study, we manually analyzed Monkey's performance on a benchmark of 64 apps to identify the common limitations that prevent the tool from achieving better coverage results. We then assessed the coverage improvement that Monkey could achieve if these limitations were eliminated. In our analysis of the results, we also discuss whether other existing test input generation tools suffer from these common limitations and provide insights on how they could address them. © 2020 ACM.","Android UI testing; empirical study; test generation","Automation; Benchmarking; Android apps; Automated testing; Generation techniques; Generation tools; In-depth study; Mobile apps; Random tests; Test inputs; Android (operating system)",,,,,"National Science Foundation, NSF: CCF-1563991

Defense Advanced Research Projects Agency, DARPA: FA8650-15-C-7556, FA8650-16-C-7620

Microsoft Research","This work was partially supported by NSF, under grant CCF-1563991, DARPA, under contracts FA8650-15-C-7556 and FA8650-16-C-7620, and gifts from Facebook, Google, and Microsoft Research.",,"Anand, S., Naik, M., Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE 2012, , ACM, New York, NY, USA; Android Runtime (ART) and Dalvik, , https://source.android.com/devices/tech/dalvik, 2020; (2020) Dalvik Bytecode, , https://source.android.com/devices/tech/dalvik/dalvik-bytecode; (2020) SDK Platform Tools Release Notes, , https://developer.android.com/studio/releases/platform-tools; (2020) UI/Application Exerciser Monkey, , https://developer.android.com/studio/test/monkey; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Proceedings of the ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (Indianapolis, Indiana, USA) (OOPSLA’13), pp. 641-660. , ACM, New York, NY, USA; Baek, Y.-M., Bae, D.-H., Automated model-based android GUI testing using multi-level GUI comparison criteria (2016) Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (, pp. 238-249. , Singapore, Singapore) (ASE 2016). ACM, New York, NY, USA; Bastani, O., Sharma, R., Aiken, A., Liang, P., Synthesizing program input grammars (2017) SIGPLAN Not, 52 (6), pp. 95-110. , June 2017; Bauersfeld, S., Vos, T., A reinforcement learning approach to automated GUI robustness testing (2012) Fast Abstracts of the 4th Symposium on Search-Based Software Engineering (SSBSE 2012), pp. 7-12. , Springer Berlin Heidelberg, Berlin, Heidelberg; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR; what about more sophisticated action specification and selection? (2014) SATToSE, pp. 60-78. , CEUR-WS.org, Aachen; Behrang, F., Orso, A., Automated test migration for mobile apps (2018) Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings (Gothenburg, Sweden) (ICSE’18), pp. 384-385. , ACM, New York, NY, USA; Behrang, F., Orso, A., (2020) Seven Reasons Why: An In-Depth Study of the Limitations of Random Test Input Generation for Android, , https://sites.google.com/view/studymonkeylimitations; Carter, P., Mulliner, C., Lindorfer, M., Robertson, W., Kirda, E., CuriousDroid: Automated user interface interaction for android application analysis sandboxes (2017) Financial Cryptography and Data Security, pp. 231-249. , Jens Grossklags and Bart Preneel (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (Indianapolis, Indiana, USA) (OOPSLA’13), pp. 623-640. , ACM, New York, NY, USA; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering (Lincoln, Nebraska) (ASE’15), pp. 429-440. , IEEE Press, New York, NY, USA; Degott, C., Borges, N.P., Jr., Zeller, A., Learning user interface element interactions (2019) Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (Beijing, China) (ISSTA 2019), pp. 296-306. , ACM, New York, NY, USA; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U., Vos, T., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) 6th International Conferenrence on Metaheuristics and Nature Inspired Computing (META 2016), pp. 130-137. , 2016; (2020) F-Droid, , https://f-droid.org; Godefroid, P., Peleg, H., Singh, R., Learn&Fuzz: Machine learning for input fuzzing (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, pp. 50-59. , Urbana-Champaign, IL, USA) (ASE 2017). IEEE Press, New York, NY, USA; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (Bretton Woods, New Hampshire, USA) (MobiSys’14), pp. 204-217. , ACM, New York, NY, USA; Koroglu, Y., Sen, A., Muslu, O., Mete, Y., Ulker, C., Tanriverdi, T., Donmez, Y., QBE: Qlearning-based exploration of android applications (2018) 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST), pp. 105-115. , IEEE, New York, NY, USA; Liu, P., Zhang, X., Pistoia, M., Zheng, Y., Marques, M., Zeng, L., Automatic text input generation for mobile testing (2017) Proceedings of the 39th International Conference on Software Engineering (Buenos Aires, Argentina) (ICSE’17), pp. 643-653. , IEEE Press, New York, NY, USA; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (Saint Petersburg, Russia) (ESEC/FSE 2013, pp. 224-234. , ACM, New York, NY, USA; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (Hong Kong, China) (FSE 2014), pp. 599-609. , ACM, New York, NY, USA; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis (Saarbrücken, Germany) (ISSTA 2016), pp. 94-105. , ACM, New York, NY, USA; Mao, K., Harman, M., Jia, Y., Crowd intelligence enhances automated mobile testing (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE’17), pp. 16-26. , ACM, New York, NY, USA; Mathis, B., Gopinath, R., Mera, M., Kampmann, A., Höschele, M., Zeller, A., Parser-directed fuzzing (2019) Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 548-560. , Phoenix, AZ, USA) (PLDI 2019). Association for Computing Machinery, New York, NY, USA; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in GUI testing of android applications (2016) Proceedings of the 38th International Conference on Software Engineering (Austin, Texas) (ICSE’16), pp. 559-570. , ACM, New York, NY, USA; (2020) JaCoCo Java Code Coverage Library, , https://www.eclemma.org/jacoco; Borges, N.P., Gómez, M., Zeller, A., Guiding app testing with mined interaction models (2018) 2018 IEEE/ACM 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft), pp. 133-143. , ACM, New York, NY, USA; Padhye, R., Lemieux, C., Sen, K., Papadakis, M., Le Traon, Y., Semantic fuzzing with ZEST (2019) Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (Beijing, China) (ISSTA 2019), pp. 329-340. , https://doi.org/10.1145/3293882.3330576, Association for Computing Machinery, New York, NY, USA; Rau, A., Hotzkow, J., Zeller, A., Efficient GUI test generation by learning from tests of other apps (2018) Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings (Gothenburg, Sweden) (ICSE’18), pp. 370-371. , ACM, New York, NY, USA; Sasnauskas, R., Regehr, J., Intent fuzzer: Crafting intents of death (2014) Proceedings of the 2014 Joint International Workshop on Dynamic Analysis (WODA) and Software and System Performance Testing, Debugging, and Analytics (PERTEA), pp. 1-5. , San Jose, CA, USA) (WODA+PERTEA 2014). ACM, New York, NY, USA; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (Paderborn, Germany) (ESEC/FSE 2017), pp. 245-256. , ACM, New York, NY, USA; van der Merwe, H., van der Merwe, B., Visser, W., Verifying android applications using Java pathfinder (2012) SIGSOFT Softw. Eng. Notes, 37 (6), pp. 1-5. , Nov. 2012; Wang, W., Li, D., Yang, W., Cao, Y., Zhang, Z., Deng, Y., Xie, T., An empirical study of android test generation tools in industrial cases (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (Montpellier, France) (ASE 2018, pp. 738-748. , ACM, New York, NY, USA; Wong, M., Lie, D., Intellidroid: A targeted input generator for the dynamic analysis of Android malware (2016) NDSS16, pp. 21-24. , The Internet Society, Reston, VA, USA; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated Gui-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering (Rome, Italy) (, pp. 250-265. , FASE’13). Springer-Verlag, Berlin, Heidelberg; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated Gui-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering (Rome, Italy) (, pp. 250-265. , https://doi.org/10.1007/978-3-642-37057-1_19, FASE’13). Springer-Verlag, Berlin, Heidelberg; Ye, H., Cheng, S., Zhang, L., Jiang, F., Droidfuzzer: Fuzzing the android apps with intent-filter tag (2013) Proceedings of International Conference on Advances in Mobile Computing & Multimedia (Vienna, Austria) (MoMM’13), pp. 68-74. , ACM, New York, NY, USA; Li, Y., Yang, Z., Guo, Y., Chen, X., Droidbot: A lightweight UI-guided test input generator for android (2017) 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C), pp. 23-26. , IEEE Press, New York, NY, USA; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Are we really there yet in an industrial case? (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (Seattle,, pp. 987-992. , WA, USA) (FSE 2016). ACM, New York, NY, USA; Zheng, Y., Xie, X., Su, T., Ma, L., Hao, J., Meng, Z., Liu, Y., Fan, C., Wuji: Automatic online combat game testing using evolutionary deep reinforcement learning (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 772-784. , IEEE, New York, NY, USA",,,"Deakin University;Monash University;NASA Ames Research Centre","Institute of Electrical and Electronics Engineers Inc.","35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020","22 September 2020 through 25 September 2020",,166082,,9781450367684,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85099188928
"Clerissi D., Denaro G., Mobilio M., Mariani L.","55815716500;6602786647;55916296500;8965048200;","Plug the Database Play with Automatic Testing: Improving System Testing by Exploiting Persistent Data",2020,"Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020",,, 9286121,"66","77",,,"10.1145/3324884.3416561","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099187783&doi=10.1145%2f3324884.3416561&partnerID=40&md5=bac12b312419e879eb0f5543efe80aa6","University of Milano - Bicocca, Milano, Italy","Clerissi, D., University of Milano - Bicocca, Milano, Italy; Denaro, G., University of Milano - Bicocca, Milano, Italy; Mobilio, M., University of Milano - Bicocca, Milano, Italy; Mariani, L., University of Milano - Bicocca, Milano, Italy","A key challenge in automatic Web testing is the generation of syntactically and semantically valid input values that can exercise the many functionalities that impose constraints on the validity of the inputs. Existing test case generation techniques either rely on manually curated catalogs of values, or extract values from external data sources, such as the Web or publicly available knowledge bases. Unfortunately, relying on manual effort is generally too expensive for most practical applications, while domain-specific and application-specific data can be hardly found either on the Web or in general purpose knowledge bases.This paper proposes DBINPuTs, a novel approach that reuses the data from the database of the target Web application, to automatically identify domain-specific and application-specific inputs, and effectively fulfill the validity constraints present in the tested Web pages. DBINPUTS can properly cope with system testing and maintenance testing efforts, since databases are naturally and inexpensively available in those phases. To extract valid inputs from the application databases, DBINPUTS exploits the syntactic and semantic similarity between the identifiers of the input fields and the ones in the tables of the database, automatically resolving the mismatch between the user interface and the schema of the database. Our experiments provide initial evidence that DBINPUTS can outperform both random input selection and Link, a competing approach for searching inputs from knowledge bases. © 2020 ACM.","System testing; Test generation; Test inputs; Web testing","Automatic testing; Natural language processing systems; Semantics; Software engineering; Syntactics; System theory; User interfaces; Websites; Application specific; Domain specific; External data sources; Improving systems; Knowledge basis; Semantic similarity; Test case generation; WEB application; Database systems",,,,,"824939

Ministero dell’Istruzione, dell’Università e della Ricerca, MIUR: 201752ENYB","This work has been partially supported by the H2020 ERC PoC project AST (n. 824939), and by the SISMA national research project (MIUR, PRIN 2017, Contract 201752ENYB).",,"Artzi, S., Dolby, J., Jensen, S.H., Moller, A., Tip, F., A framework for automated testing of javascript web applications (2011) Proceedings of the 33rd International Conference on Software Engineering (ICSE); Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from Guis (2012) Proceedings of the International Conference on Fundamental Approaches to Software Engineering; Birant, D., Kut, A., ST-DBSCan: An algorithm for clustering spatial–temporal data (2007) Data & Knowledge Engineering, 60 (1), pp. 208-221. , 2007; Bozkurt, M., Harman, M., Automatically generating realistic test input from web services (2011) Proceedings of the International Symposium on Service Oriented System Engineering; Bures, M., Frajtak, K., Ahmed, B.S., TaPIR: Automation support of exploratory testing using model reconstruction of the system under test (2018) IEEE Transactions on Reliability, 67 (2), pp. 557-580. , 2018; UI/Application Exerciser Monkey, , https://developer.android.com/studio/test/monkey, n.d; Fard, A.M., Mesbah, A., Feedback-directed exploration of web applications to derive test models (2013) Proceedings of the International Symposium on Software Reliability Engineering (ISSRE); Hammoudi, M., Rothermel, G., Stocco, A., Waterfall: An incremental approach for repairing record-replay tests of web applications (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 751-762; Hammoudi, M., Rothermel, G., Tonella, P., Why do record/replay tests of web applications break? (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 180-190; Heidegger, P., Thiemann, P., Contract-driven testing of JavaScript code (2010) Objects, Models, Components, Patterns, pp. 154-172. , Jan Vitek (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) 2013 20th Working Conference on Reverse Engineering (WCRE), pp. 272-281; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Pesto: Automated migration of DOM-based Web tests towards the visual approach (2018) Software Testing, Verification & Reliability (STVR), 28, p. 4. , 2018; Marchetto, A., Tonella, P., Ricca, F., State-based testing of AJAX web applications (2008) Proceedings of the International Conference on Software Testing, Verification, and Validation (ICST); Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., AutoblackTest: Automatic black-box testing of interactive applications (2012) Proceedings of the 5th IEEE International Conference on Software Testing, Verification and Validation (ICST); Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Automatic testing of GUI-based applications (2014) Software Testing, Verification & Reliability (STVR), 24 (5), pp. 341-366. , 2014; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Link: Exploiting the web of data to generate test inputs (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 373-384; McMinn, P., Shahbaz, M., Stevenson, M., Search-based test input generation for string data types using the results of web queries (2012) Proceedings of the International Conference on Software Testing, Verification and Validation; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering (TSE), 31 (10), pp. 884-896. , 2005; Mesbah, A., van Deursen, A., Lenselink, S., Crawling Ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Transactions on the Web (TWEB), 6 (1), pp. 3:1–3:30. , 2012; Mesbah, A., van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Transactions on Software Engineering (TSE), 38 (1), pp. 35-53. , 2012; Raffelt, H., Margaria, T., Steffen, B., Merten, M., Hybrid test of web applications with webtest (2008) Proceedings of the Workshop on Testing, Analysis, and Verification of Web Services and Applications, pp. 1-7; Ristad, E.S., Yianilos, P.N., Learning string-edit distance (1998) IEEE Transactions on Pattern Analysis and Machine Intelligence, 20 (5), pp. 522-532. , 1998; Rong, X., (2014) Word2vec Parameter Learning Explained, , arXiv preprint 2014; Schubert, E., Sander, J., Ester, M., Kriegel, H.P., Xu, X., DBSCAN revisited, revisited: Why and how you should (still) use DBSCAN (2017) ACM Transactions on Database Systems (TODS), 42 (3), pp. 1-21. , 2017; Shahbaz, M., McMinn, P., Stevenson, M., Automatic generation of valid and invalid test data for string validation routines using web searches and regular expressions (2015) Science of Computer Programming, 97, pp. 405-425. , 2015; Sutton, R.S., Barto, A.G., (2018) Reinforcement Learning: An Introduction, , MIT press; (2013) Sparql 1.1 Overview, , Technical Report; Wanwarang, T., Borges, N., Bettscheider, L., Zeller, A., Testing apps with real world inputs (2020) Proceedings of the IEEE/ACM International Conference on Automation of Software Test (AST)",,,"Deakin University;Monash University;NASA Ames Research Centre","Institute of Electrical and Electronics Engineers Inc.","35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020","22 September 2020 through 25 September 2020",,166082,,9781450367684,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85099187783
"Coppola R., Ardito L., Morisio M., Torchiano M.","57191261885;36184897700;6701428565;6602571197;","Mobile testing: New challenges and perceived difficulties from developers of the Italian industry",2020,"IT Professional","22","5", 9194436,"32","39",,1,"10.1109/MITP.2019.2942810","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091321332&doi=10.1109%2fMITP.2019.2942810&partnerID=40&md5=7b110e28b48d30ae0e6282deb998f8fe","Department of Control and Computer Engineering, Politecnico di Torino, Turin, Italy; Politecnico di Torino, Turin, Italy","Coppola, R., Department of Control and Computer Engineering, Politecnico di Torino, Turin, Italy; Ardito, L., Department of Control and Computer Engineering, Politecnico di Torino, Turin, Italy; Morisio, M., Politecnico di Torino, Turin, Italy; Torchiano, M., Department of Control and Computer Engineering, Politecnico di Torino, Turin, Italy","Automated Graphical User Interface (GUI) testing is a fundamental part of the Verification and Validation process of every software, but it is often linked to notable maintenance costs, especially for mobile applications. The literature reports a general lack of automated testing adoption among mobile developers in the industry. In this article, we present the outcome of seven interviews centered on how companies automate the testing process of mobile applications. The interviews confirmed that automated testing is still not widely adopted and rarely formalized by industry, with manual testing being still the primary form of testing. Test fragility and evolution of the user interface are seen as a relevant issue by developers, with a cost of around 30% of the overall maintenance performed on test suites. Some clear shared needs emerged during our interviews that can be considered hints for the added research effort from academia in meeting the needs of industry. © 1999-2012 IEEE.",,"Application programs; Automation; Costs; Graphical user interfaces; Mobile computing; Verification; Automated testing; Graphical user interfaces (GUI); Maintenance cost; Mobile applications; Perceived difficulties; Research efforts; Testing process; Verification-and-validation; Software testing",,,,,,,,"Alegroth, E., Feldt, R., Kolstrom, P., Maintenance of automated test suites in industry: An empirical study on Visual GUI Testing (2016) Inf. Softw. Technol., 73, pp. 66-80; Amalfitano, D., MobiGUITAR: Automated model-based testing of mobile apps (2015) Ieee Softw., 32 (5), pp. 53-59. , Sep./Oct; Kaur, A., Review of mobile applications testing with automated techniques (2015) Int. J. Adv. Res. Comput. Commun. Eng., 4, pp. 503-507; Coppola M Morisio, R., Torchiano, M., Maintenance of android widget-based GUI testing: A taxonomy of test case modification causes (2018) Proc. Ieee Int. Conf. Softw. Testing, Verification Validation Workshops, pp. 151-158; Coppola, R., Morisio, M., Torchiano, M., Mobile GUI testing fragility: A study on open-source android applications (2019) Ieee Trans. Rel., 68 (1), pp. 67-90. , Mar; Coppola, R., Morisio, M., Torchiano, M., Scripted UI testing of android apps: A study on diffusion, evolution and fragility (2017) Proc. 13th Int. Conf. Predictive Models Data Analytics Softw. Eng., pp. 22-32; Gomez, L., Reran: Timing-and touch-sensitive record and replay for android (2013) Proc. IEEE35th Int. Conf. Softw. Eng., pp. 72-81; Kochhar, P.S., Understanding the test automation culture of app developers (2015) Proc. Ieee 8th Int. Conf. Softw. Testing, Verification Validation, pp. 1-10; Kropp, M., Morales, P., Automated GUI testing on the Android platform (2010) Testing Softw. Syst., 67, pp. 67-72; Leotta, M., Visual vs. DOM-based web locators: An empirical study (2014) Proc. Int. Conf. Web Eng, pp. 322-340; Liu, C.-H., Capture-replay testing for android applications (2014) Proc. Ieee Int. Symp. Comput., Consum. Control, pp. 1129-1132; Nguyen, B.N., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105",,,,"IEEE Computer Society",,,,,15209202,,IPMAF,,"English","IT Prof",Article,"Final","",Scopus,2-s2.0-85091321332
"Eskonen J., Kahles J., Reijonen J.","57219438427;57209498821;57211851690;","Automating GUI testing with image-based deep reinforcement learning",2020,"Proceedings - 2020 IEEE International Conference on Autonomic Computing and Self-Organizing Systems, ACSOS 2020",,, 9196452,"160","167",,,"10.1109/ACSOS49614.2020.00038","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092706550&doi=10.1109%2fACSOS49614.2020.00038&partnerID=40&md5=a3acc4bb8691b88f311da9d883e0eb65","Ericsson, Jorvas, Finland","Eskonen, J., Ericsson, Jorvas, Finland; Kahles, J., Ericsson, Jorvas, Finland; Reijonen, J., Ericsson, Jorvas, Finland","Users interact with modern applications and devices through graphical user interfaces (GUIs). To ensure intuitive and easy usability, the GUIs need to be tested, where developers aim at finding possible bugs and inconsistent functionality. Manual GUI testing requires time and effort, and thus, its efficiency can be improved with automation. Conventional automation tools for GUI testing reduce the burden of manual testing but also introduce challenges in the maintenance of test cases. In order to overcome these issues, we propose a deep-reinforcement-learning-based (DRL) solution for automated and adaptive GUI testing. Specifically, we propose and evaluate the performance of an image-based DRL solution. We adapt the asynchronous advantage actor-critic (A3C) algorithm to GUI testing inspired by how a human uses a GUI. We feed screenshots of the GUI as the input and let the algorithm decide how to interact with GUI components. We observe that our solution can achieve up to six times higher exploration efficiency compared to selected baseline algorithms. Moreover, our solution is more efficient than inexperienced human users and almost as efficient as an experienced human user in our experimental GUI testing scenario. For these reasons, image-based DRL exploration can be considered as a viable GUI testing method. © 2020 IEEE.","automation; deep reinforcement learning; GUI testing; image processing","Automation; Efficiency; Graphical user interfaces; Reinforcement learning; Testing; Actor critic; Adaptive GUI; Automation tools; Graphical user interface (GUIs); Human users; Its efficiencies; Manual testing; Modern applications; Deep learning",,,,,,,,"Li, K., Wu, M., (2006) Effective Gui Testing Automation: Developing An Automated Gui Testing Tool, , John Wiley &Sons; Bruns, A., Kornstadt, A., Wichmann, D., Web application tests with selenium (2009) IEEE Software, 26 (5), pp. 88-91. , Sep; https://www.cypress.io, Cypress/, accessed: 2020-04-15; https://robotframework.org, Robot framework/, accessed: 2020-04-15; Alégroth, E., Random visual gui testing: Proof of concept (2013) Seke, pp. 178-183; Wetzlmaier, T., Ramler, R., Putsch¨ogl, W., A framework for monkey gui testing (2016) 2016 IEEE International Conference on Software Testing, pp. 416-423. , Verification and Validation (ICST), April; Sutton, R.S., Barto, A.G., (2018) Reinforcement Learning: An Introduction, 2nd Ed, , The MIT Press; Eskonen, J., (2019) Deep Reinforcement Learning in Automated User Interface Testing; Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) Ijismd, 6, pp. 46-83; Mathur, R., Miles, S., Du, M., (2015) Adaptive Automation: Leveraging Machine Learning to Support Uninterrupted Automated Testing of Software Applications; Adamo, D., Khan, M.K., Koppula, S., Bryce, R., Reinforcement learning for android gui testing Proceedings of the 9th Acm Sigsoft International Workshop on Automating Test Case Design, pp. 2-8. , https://doi.org/10.1145/3278186.3278187, Selection, and Evaluation, ser. A-TEST 2018. New York, NY, USA: Association for Computing Machinery, 2018; Bauersfeld, S., Vos, T.E.J., (2012) A Reinforcement Learning Approach to Automated Gui Robustness Testing, , https://pdfs.semanticscholar.org/d2ae/393cf723228cf6f96d61ee068c681203e943.pdf; Li, Y., Yang, Z., Guo, Y., Chen, X., A deep learning based approach to automated android app testing (2019) CoRR, , http://arxiv.org/abs/1901.02633, abs/1901.02633; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 94-105. , https://doi.org/10.1145/2931037.2931054, ser. ISSTA 2016. New York, NY, USA: Association for Computing Machinery; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, pp. 204-217. , https://doi.org/10.1145/2594368.2594390, Applications, and Services, ser. MobiSys '14. New York, NY, USA: Association for Computing Machinery; Li, Y., Yang, Z., Guo, Y., Chen, X., Droidbot: A lightweight ui-guided test input generator for android (2017) 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C), pp. 23-26; Liu, E.Z., Guu, K., Pasupat, P., Shi, T., Liang, P., Reinforcement learning on web interfaces using workflow-guided exploration (2018) CoRR, , http://arxiv.org/abs/1802.08802, abs/1802.08802; Vuong, T., Takada, S., (2019) Semantic Analysis for Deep Q-network in Android Gui Testing, pp. 123-128. , 07; Goodfellow, I., Bengio, Y., Courville, A., (2016) Deep Learning, , http://www.deeplearningbook.org, MIT Press; Boudjelal, A., Messali, Z., Elmoataz, A., A novel kernel-based regularization technique for pet image reconstruction (2017) Technologies, 5 (2); Zeiler, M.D., Fergus, R., Visualizing and understanding convolutional networks (2013) CoRR, , http://arxiv.org/abs/1311.2901, abs/1311.2901; Hochreiter, S., Schmidhuber, J., Long short-term memory (1997) Neural Computation, 9, pp. 1735-1780. , 12; http://colah.github.io/posts/2015-08-Understanding-LSTMs/, Understanding LSTM Networks accessed: 2020-04-15; Mnih, V., Kavukcuoglu, K., Silver, D., Graves, A., Antonoglou, I., Wierstra, D., Riedmiller, M.A., Playing atari with deep reinforcement learning (2013) CoRR, , http://arxiv.org/abs/1312.5602, abs/1312.5602; Hessel, M., Modayil, J., Van Hasselt, H., Schaul, T., Ostrovski, G., Dabney, W., Horgan, D., Silver, D., Rainbow: Combining improvements in deep reinforcement learning (2018) Thirty-Second Aaai Conference on Artificial Intelligence; Schulman, J., Wolski, F., Dhariwal, P., Radford, A., Klimov, O., (2017) Proximal Policy Optimization Algorithms; Andrychowicz, M., Wolski, F., Ray, A., Schneider, J., Fong, R., Welinder, P., McGrew, B., Zaremba, W., Hindsight experience replay (2017) CoRR, , http://arxiv.org/abs/1707.01495, abs/1707.01495; Ha, D., Schmidhuber, J., World models (2018) CoRR, , http://arxiv.org/abs/1803.10122, abs/1803.10122; Mnih, V., Badia, A.P., Mirza, M., Graves, A., Lillicrap, T., Harley, T., Silver, D., Kavukcuoglu, K., Asynchronous methods for deep reinforcement learning (2016) Proceedings of the 33rd International Conference on Machine Learning, Ser. Proceedings of Machine Learning Research, M. F. Balcan and K. Q. Weinberger, Eds., 48, pp. 1928-1937. , http://proceedings.mlr.press/v48/mniha16.html, New York, New York, USA: PMLR, 20-22 Jun; Griffis, D., A3c Lstm Atari with Pytorch plus a3g Design, , https://github.com/dgriff777/rla3cpytorch, (dgriff777) , accessed: 2020-05-06",,"El-Araby E.Tomforde S.Wood T.Kumar P.Raibulet C.Petri I.Valentini G.Nelson P.Porter B.",,"Institute of Electrical and Electronics Engineers Inc.","1st IEEE International Conference on Autonomic Computing and Self-Organizing Systems, ACSOS 2020","17 August 2020 through 21 August 2020",,163201,,9781728172774,,,"English","Proc. - IEEE Int. Conf. Auton. Comput. Self-Organ. Syst., ACSOS",Conference Paper,"Final","",Scopus,2-s2.0-85092706550
"Liu H., Shen M., Jin J., Jiang Y.","56862404100;57219052591;57204919408;57207334833;","Automated classification of actions in bug reports of mobile apps",2020,"ISSTA 2020 - Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"128","140",,,"10.1145/3395363.3397355","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85088925979&doi=10.1145%2f3395363.3397355&partnerID=40&md5=fd4761e0d157e14ee78e0f215f2450e3","Beijing Institute of Technology, China","Liu, H., Beijing Institute of Technology, China; Shen, M., Beijing Institute of Technology, China; Jin, J., Beijing Institute of Technology, China; Jiang, Y., Beijing Institute of Technology, China","When users encounter problems with mobile apps, they may commit such problems to developers as bug reports. To facilitate the processing of bug reports, researchers proposed approaches to validate the reported issues automatically according to the steps to reproduce specified in bug reports. Although such approaches have achieved high success rate in reproducing the reported issues, they often rely on a predefined vocabulary to identify and classify actions in bug reports. However, such manually constructed vocabulary and classification have significant limitations. It is challenging for the vocabulary to cover all potential action words because users may describe the same action with different words. Besides that, classification of actions solely based on the action words could be inaccurate because the same action word, appearing in different contexts, may have different meaning and thus belongs to different action categories. To this end, in this paper we propose an automated approach, called MaCa, to identify and classify action words in Mobile apps' bug reports. For a given bug report, it first identifies action words based on natural language processing. For each of the resulting action words, MaCa extracts its contexts, i.e., its enclosing segment, the associated UI target, and the type of its target element by both natural language processing and static analysis of the associated app. The action word and its contexts are then fed into a machine learning based classifier that predicts the category of the given action word in the given context. To train the classifier, we manually labelled 1,202 actions words from 525 bug reports that are associated with 207 apps. Our evaluation results on manually labelled data suggested that MaCa was accurate with high accuracy varying from 95% to 96.7%. We also investigated to what extent MaCa could further improve existing approaches (i.e., Yakusu and ReCDroid) in reproducing bug reports. Our evaluation results suggested that integrating MaCa into existing approaches significantly improved the success rates of ReCDroid and Yakusu by 22.7% = (69.2%-56.4%)/56.4% and 22.9%= (62.7%-51%)/51%, respectively. © 2020 ACM.","Bug report; Classification; Mobile Testing; Test Case Generation","Classifiers; Natural language processing systems; Software testing; Static analysis; Automated approach; Automated classification; Bug reports; Evaluation results; High-accuracy; Mobile apps; NAtural language processing; Target element; Program debugging",,,,,"National Natural Science Foundation of China, NSFC: 61690205, 61772071","This work is partially supported by the National Natural Science Foundation of China under Grant No.: 61690205, 61772071",,"(2019) Bugzilla, , https://www.bugzilla.org/; (2019) Flutter's Bug Report, No. 34330, , https://github.com/flutter/flutter/issues/34330; (2019) Github Issue Tracker, , https://github.com/issues; (2019) Google Code Issue Tracker, , https://code.google.com/archive/; (2019) LibreNew's Bug Report, No. 22, , https://github.com/milesmcc/LibreNews-Android/issues/22; (2019) Lockwise's Bug Report, No. 783, , https://github.com/mozilla-lockwise/lockwise-android/issues/783; (2019) MvvmCross's Bug Report, No. 2532, , https://github.com/MvvmCross/MvvmCross/issues/2532; (2019) SpaCy, , https://spacy.io/; Bhattacharya, P., Ulanova, L., Neamtiu, I., Charan Koduru, S., An empirical analysis of bug reports and bug fixing in open source android apps (2013) 17th European Conference on Software Maintenance and Reengineering, CSMR 2013, pp. 133-143. , Genova, Italy, March 5-8, 2013. IEEE; Böhning, D., Multinomial logistic regression algorithm (1992) Annals of the Institute of Statistical Mathematics, 44 (1), pp. 197-200. , 1992; Chaparro, O., Bernal-Cárdenas, C., Lu, J., Moran, K., Marcus, A., Di Penta, M., Poshyvanyk, D., Ng, V., Assessing the quality of the steps to reproduce in bug reports (2019) Proceedings of the ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2019, pp. 86-96. , Tallinn, Estonia, August 26-30, 2019. ACM; Chaparro, O., Lu, J., Zampetti, F., Moreno, L., Di Penta, M., Marcus, A., Bavota, G., Ng, V., Detecting missing information in bug descriptions (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, pp. 396-407. , Paderborn, Germany, September 4-8, 2017. ACM; Cohen, J., A coefficient of agreement for nominal scales (1960) Educational and Psychological Measurement, 20 (1), pp. 37-46. , 1960; Devlin, J., Chang, M., Lee, K., Toutanova, K., Bert: Pre-training of deep bidirectional transformers for language understanding (2019) Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019, 1, pp. 4171-4186. , Minneapolis, MN, USA, June 2-7, 2019 (Long and Short Papers); Fazzini, M., Prammer, M., D'Amorim, M., Orso, A., Automatically translating bug reports into test cases for mobile apps (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018, pp. 141-152. , Amsterdam, The Netherlands, July 16-21, 2018. ACM; Gambi, A., Huynh, T., Fraser, G., Generating effective test cases for self-driving cars from police reports (2019) Proceedings of the ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2019, pp. 257-267. , Tallinn, Estonia, August 26-30, 2019. ACM; Gao, J., Galley, M., Li, L., Neural approaches to conversational AI (2018) Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (ACL'18), pp. 2-7. , Melbourne, Australia, July 15-20, 2018, Tutorial Abstracts; Jerzy, W., Grzymala-Busse, On the unknown attribute values in learning from examples (1991) Methodologies for Intelligent Systems, 6th International Symposium, ISMIS '91, pp. 368-377. , Charlotte, N. C., USA, October 16-19, 1991, Proceedings; Hochreiter, S., Schmidhuber, J., Long short-term memory (1997) Neural Computation, 9 (8), pp. 1735-1780. , 1997; Erfani Joorabchi, M., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24. , Baltimore, Maryland, USA, October 10-11, 2013. IEEE; Kelly, L., Suominen, H., Goeuriot, L., Neves, M.L., Kanoulas, E., Li, D., Azzopardi, L., Palotti, M.J.R., Overview of the CLEF ehealth evaluation lab 2019 (2019) Proceedings of the 10th International Conference of the CLEF Association, CLEF2019, pp. 322-339. , Lugano, Switzerland, September 9-12; Kim, Y., Convolutional neural networks for sentence classification (2014) Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing, EMNLP 2014, pp. 1746-1751. , October 25-29, 2014, Doha, Qatar, A meeting of SIGDAT, a Special Interest Group of the ACL; Kononenko, I., Semi-naive Bayesian classifier (1991) European Working Session on Machine Learning (EWSL'91), pp. 206-219. , March 6-8 Porto, Portuga; Liaw, A., Wiener, M., Classification and regression by randomforest (2002) R News, 2 (3), pp. 18-22. , 2002; Luo, X., Nur Zincir-Heywood, A., Evaluation of two systems on multi-class multi-label document classification (2005) Foundations of Intelligent Systems, 15th International Symposium, ISMIS 2005, pp. 161-169. , Saratoga Springs, NY, USA, May 25-28, 2005, Proceedings. Springer; Ma, Y., Huang, Y., Hu, Z., Xiao, X., Liu, X., Paladin: Automated generation of reproducible test cases for android apps (2019) Proceedings of the 20th International Workshop on Mobile Computing Systems and Applications, HotMobile 2019, pp. 99-104. , Santa Cruz, CA, USA, February 27-28, 2019. ACM; Mikolov, T., Sutskever, I., Chen, K., Corrado, G.S., Dean, J., Distributed representations of words and phrases and their compositionality (2013) Proceedings of 27th Annual Conference on Neural Information Processing Systems, pp. 3111-3119; Moran, K., Linares Vásquez, M., Bernal-Cárdenas, C., Poshyvanyk, D., Auto-completing bug reports for android applications (2015) Proceedings of the 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE, pp. 673-686. , Bergamo, Italy, August 30-September 4; Motwani, M., Brun, Y., Automatically generating precise oracles from structured natural language specifications (2019) Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, pp. 188-199. , Montreal, QC, Canada, May 25-31, 2019. IEEE Press; Pal, S.K., Mitra, S., Multilayer perceptron, fuzzy sets, and classification (1992) IEEE Trans. Neural Networks, 3 (5), pp. 683-697. , 1992; Petsas, T., Papadogiannakis, A., Polychronakis, M., Markatos, E.P., Karagiannis, T., Rise of the planet of the apps: A systematic study of the mobile app ecosystem (2013) Proceedings of the 2013 Internet Measurement Conference, IMC 2013, pp. 277-290. , Barcelona, Spain, October 23-25, 2013. ACM; Martin Powers, D., Evaluation: From precision, recall and f-measure to roc, informedness, markedness and correlation (2011) Journal of Machine Learning Technologies, 2 (1), pp. 37-63. , 2011; Ross Quinlan, J., Unknown attribute values in induction (1989) Proceedings of the Sixth International Workshop on Machine Learning (ML 1989), pp. 164-168. , Cornell University, Ithaca, New York, USA, June 26-27, 1989; Rätsch, G., Onoda, T., Müller, K., Regularizing adaboost (1998) Advances in Neural Information Processing Systems (NIPS), pp. 564-570. , Denver, Colorado, USA, November 30-December 5; Reddy, S., Chen, D., Manning, C.D., Coqa: A conversational question answering challenge (2019) Transactions of the Association for Computational Linguistics, 7, pp. 249-266. , (2019); Rountev, A., Yan, D., Static reference analysis for gui objects in android software (2014) 12th Annual IEEE/ACM International Symposium on Code Generation and Optimization, CGO 2014, p. 143. , Orlando, FL, USA, February 15-19, 2014. IEEE; Schuster, M., Paliwal, K.K., Bidirectional recurrent neural networks (1997) IEEE Trans. Signal Processing, 45 (11), pp. 2673-2681. , 1997; (2019) API Specification on Weight of Categorie, , https://scikitlearn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html?highlight=class_weight; Shen, M., (2020) Replication Package for Maca, , https://github.com/sakura182/Maca; Suykens, J.A.K., Vandewalle, J., Least squares support vector machine classifiers (1999) Neural Processing Letters, 9 (3), pp. 293-300. , 1999; Yan, H., Ding, Y., Li, P., Wang, Q., Xu, Y., Zuo, W., Mind the class weight bias: Weighted maximum mean discrepancy for unsupervised domain adaptation (2017) 2017 IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2017, pp. 945-954. , Honolulu, HI, USA, July 21-26, 2017; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (2015) 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, pp. 658-668. , Lincoln, NE, USA, November 9-13, 2015. IEEE; Yu, T., Zaman, T.S., Wang, C., Descry: Reproducing system-level concurrency failures (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, pp. 694-704. , Paderborn, Germany, September 4-8, 2017. ACM; Zamfir, C., Candea, G., Execution synthesis: A technique for automated software debugging (2010) European Conference on Computer Systems, Proceedings of the 5th European Conference on Computer Systems, EuroSys 2010, pp. 321-334. , Paris, France, April 13-16, 2010. ACM; Zhao, Y., Miller, K., Yu, T., Zheng, W., Pu, M., Automatically extracting bug reproducing steps from android bug reports (2019) Reuse in the Big Data Era-18th International Conference on Software and Systems Reuse, ICSR 2019, pp. 100-111. , Cincinnati, OH, USA, June 26-28, 2019, Proceedings. Springer; Zhao, Y., Yu, T., Su, T., Liu, Y., Zheng, W., Zhang, J., Halfond, J.W.G., Recdroid: Automatically reproducing android application crashes from bug reports (2019) Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, pp. 128-139. , Montreal, QC, Canada, May 25-31, 2019. IEEE Press","Liu, H.; Beijing Institute of TechnologyChina; email: liuhui08@bit.edu.cn","Khurshid S.Pasareanu C.S.","ACM SIGSOFT","Association for Computing Machinery, Inc","29th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2020","18 July 2020 through 22 July 2020",,161847,,9781450380089,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85088925979
"Guo C., He T., Yuan W., Guo Y., Hao R.","57218364513;56732381300;57218364085;57218364847;57212994009;","Crowdsourced requirements generation for automatic testing via knowledge graph",2020,"ISSTA 2020 - Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"545","548",,,"10.1145/3395363.3404363","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85088925039&doi=10.1145%2f3395363.3404363&partnerID=40&md5=21c71e0a84a6a42439c56fc59939b594","Nanjing University, China","Guo, C., Nanjing University, China; He, T., Nanjing University, China; Yuan, W., Nanjing University, China; Guo, Y., Nanjing University, China; Hao, R., Nanjing University, China","Crowdsourced testing provides an effective way to deal with the problem of Android system fragmentation, as well as the application scenario diversity faced by Android testing. The generation of test requirements is a significant part of crowdsourced testing. However, manually generating crowdsourced testing requirements is tedious, which requires the issuers to have the domain knowledge of the Android application under test. To solve these problems, we have developed a tool named KARA, short for Knowledge Graph Aided Crowdsourced Requirements Generation for Android Testing. KARA first analyzes the result of automatic testing on the Android application, through which the operation sequences can be obtained. Then, the knowledge graph of the target application is constructed in a manner of pay-as-you-go. Finally, KARA utilizes knowledge graph and the automatic testing result to generate crowdsourced testing requirements with domain knowledge. Experiments prove that the test requirements generated by KARA are well understandable, and KARA can improve the quality of crowdsourced testing. The demo video can be found at https://youtu.be/kE-dOiekWWM. © 2020 ACM.","Android GUI Testing; Crowdsourced Requirements; Knowledge Graph","Android (operating system); Automatic testing; Crowdsourcing; Knowledge representation; Well testing; Android applications; Application scenario; Domain knowledge; Knowledge graphs; Operation sequences; Target application; Test requirements; Testing requirements; Software testing",,,,,"National Basic Research Program of China (973 Program): 2018YFB1403401

Fundamental Research Funds for the Central Universities: 14380023","This work was partially funded by the National Key Research and Development Program of China (2018YFB1403401) and the Fundamental Research Funds for the Central Universities (14380023).",,"Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) ASE. ACM, pp. 258-261; Feng, Y., Chen, Z., Jones, J.A., Fang, C., Xu, B., Test report prioritization to assist crowdsourced testing (2015) ESEC/SIGSOFT FSE., pp. 225-236; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) MobiSys. ACM, pp. 204-217; Komarov, S., Reinecke, K., Gajos, K.Z., Crowdsourcing performance evaluations of user interfaces (2013) SigCHI., pp. 207-216; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) ESEC/SIGSOFT FSE. ACM, pp. 224-234; Nayak, A., Kesri, V., Kumar Dubey, R., Knowledge graph based automated generation of test cases in software engineering (2020) Proceedings of the 7th ACM IKDD CoDS and 25th COMAD., pp. 289-295","He, T.; Nanjing UniversityChina; email: hetieke@gmail.com","Khurshid S.Pasareanu C.S.","ACM SIGSOFT","Association for Computing Machinery, Inc","29th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2020","18 July 2020 through 22 July 2020",,161847,,9781450380089,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85088925039
"Pan M., Huang A., Wang G., Zhang T., Li X.","35100822300;57204734712;57218365452;7404374507;35173053900;","Reinforcement learning based curiosity-driven testing of Android applications",2020,"ISSTA 2020 - Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"153","164",,1,"10.1145/3395363.3397354","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85088922644&doi=10.1145%2f3395363.3397354&partnerID=40&md5=535b78930de933d2af3f93f3921f96b2","Nanjing University, China","Pan, M., Nanjing University, China; Huang, A., Nanjing University, China; Wang, G., Nanjing University, China; Zhang, T., Nanjing University, China; Li, X., Nanjing University, China","Mobile applications play an important role in our daily life, while it still remains a challenge to guarantee their correctness. Model-based and systematic approaches have been applied to Android GUI testing. However, they do not show significant advantages over random approaches because of limitations such as imprecise models and poor scalability. In this paper, we propose Q-testing, a reinforcement learning based approach which benefits from both random and model-based approaches to automated testing of Android applications. Q-testing explores the Android apps with a curiosity-driven strategy that utilizes a memory set to record part of previously visited states and guides the testing towards unfamiliar functionalities. A state comparison module, which is a neural network trained by plenty of collected samples, is novelly employed to divide different states at the granularity of functional scenarios. It can determine the reinforcement learning reward in Q-testing and help the curiosity-driven strategy explore different functionalities efficiently. We conduct experiments on 50 open-source applications where Q-testing outperforms the state-of-the-art and state-of-practice Android GUI testing tools in terms of code coverage and fault detection. So far, 22 of our reported faults have been confirmed, among which 7 have been fixed. © 2020 ACM.","Android app testing; functional scenario division; reinforcement learning","Fault detection; Graphical user interfaces; Open source software; Open systems; Reinforcement learning; Software testing; Android applications; Automated testing; Functional scenarios; Mobile applications; Model based approach; Open source application; State comparisons; State of practice; Android (operating system)",,,,,"2017YFB1001801

61632015, 61972193

Fundamental Research Funds for the Central Universities: 14380020, 14380022","This research is supported by the National Key R&D Program (Grant No. 2017YFB1001801), the National Natural Science Foundation (Nos. 61632015, 61972193), and the Fundamental Research Funds for the Central Universities (Nos. 14380022, 14380020) of China.",,"Adamo, D., Khorrom Khan, M., Koppula, S., Bryce, R., Reinforcement learning for Android GUI testing (2018) Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation. ACM, pp. 2-8; Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) 2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE). ACM, pp. 258-261; Amalfitano, D., Rita Fasolino, A., Tramontana, P., Dzung Ta, B., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2014) IEEE Software, 32 (5), pp. 53-59. , 2014; Anand, S., Naik, M., Jean Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering. ACM, pp. 1-11; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Acm Sigplan Notices, 48, pp. 641-660. , ACM; Baek, Y., Bae, D., Automated model-based Android GUI testing using multi-level GUI comparison criteria (2016) 2016 Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE). ACM, pp. 238-249; Nataniel Borges, P., Jr., Gómez, M., Zeller, A., Guiding app testing with mined interaction models (2018) Proceedings of the 5th International Conference on Mobile Software Engineering and Systems. ACM, pp. 133-143; Bromley, J., Guyon, I., LeCun, Y., Säckinger, E., Shah, R., Signature verification using a ""siamese"" time delay neural network (1994) Advances in Neural Information Processing Systems., pp. 737-744; Burda, Y., Edwards, H., Pathak, D., Storkey, A., Darrell, T., Efros, A.A., Large-scale study of curiosity-driven learning (2019) 7th International Conference on Learning Representations (ICLR); Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet?(e) (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, pp. 429-440; Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet?(e) (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, pp. 429-440; Degott, C., Nataniel Borges, P., Jr., Zeller, A., Learning user interface element interactions (2019) Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis., pp. 296-306; Neto Dias, A.C., Subramanyan, R., Vieira, M., Travassos, G.H., A survey on model-based testing approaches: A systematic review (2007) Proceedings of the 1st ACM International Workshop on Empirical Assessment of Software Engineering Languages and Technologies: Held in Conjunction with the 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE) 2007. ACM, pp. 31-36; (2020) JaCoCo Java Code Coverage Library, , https://www.eclemma.org/jacoco/index.html; Gao, X., Hwei Tan, S., Dong, Z., Roychoudhury, A., Android testing via synthetic symbolic execution (2018) 2018 Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE). ACM, pp. 419-429; (2020) GitHub, , https://github.com/; (2019) Broadcasts Overview, , https://developer.android.google.cn/guide/components/broadcasts; (2019) ListView, , https://developer.android.google.cn/reference/android/widget/ListView; (2019) Recyclerview, , https://developer.android.google.cn/reference/androidx/recyclerview/widget/RecyclerView; (2019) UI Automator, , https://developer.android.com/training/testing/uiautomator; (2019) UI/Application Exerciser Monkey, , https://developer.android.com/studio/test/monkey; (2012) Intent Fuzzer, , https://www.nccgroup.trust/us/our-research/intent-fuzzer/, NCC group; Gu, T., Cao, C., Liu, T., Sun, C., Deng, J., Ma, X., Lü, J., Aimdroid: Activity-insulated multi-level automated testing for android applications (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, pp. 103-114; Gu, T., Sun, C., Ma, X., Cao, C., Xu, C., Yao, Y., Zhang, Q., Su, Z., Practical GUI testing of Android applications via model abstraction and refinement (2019) Proceedings of the 41st International Conference on Software Engineering. IEEE Press, pp. 269-280; Houthooft, R., Chen, X., Duan, Y., Schulman, J., De Turck, F., Abbeel, P., Vime: Variational information maximizing exploration (2016) Advances in Neural Information Processing Systems., pp. 1109-1117; Koroglu, Y., Sen, A., Muslu, O., Mete, Y., Ulker, C., Tanriverdi, T., Donmez, Y., QBE: QLearning-based exploration of android applications (2018) 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST). IEEE, pp. 105-115; Lai, D., Rubin, J., Goal-driven exploration for Android applications (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, pp. 115-127; Li, Y., Yang, Z., Guo, Y., Chen, X., Humanoid: A deep learning-based approach to automated black-box android app testing (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, pp. 1070-1073; (2020) F-Droid-Free and Open Source Android App Repository, , https://f-droid.org/, F-Droid Limited; Lin, J., Jabbarvand, R., Malek, S., Test transfer across mobile apps through semantic mapping (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, pp. 42-53; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, pp. 224-234; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, pp. 599-609; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, pp. 94-105; Mao, K., Harman, M., Jia, Y., Crowd intelligence enhances automated mobile testing (2017) 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 16-26. , IEEE Press; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation. IEEE, pp. 81-90; Mueller, J., Thyagarajan, A., Siamese recurrent architectures for learning sentence similarity (2016) Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence (Phoenix, Arizona) (AAAI'16), pp. 2786-2792. , AAAI Press; Neculoiu, P., Versteegh, M., Rotaru, M., Learning text similarity with siamese recurrent networks (2016) Proceedings of the 1st Workshop on Representation Learning for NLP., pp. 148-157; Pathak, D., Agrawal, P., Efros, A.A., Darrell, T., Curiosity-driven exploration by self-supervised prediction (2017) International Conference on Machine Learning (ICML), pp. 2778-2787; (2020) Open-Source Android Apps, , https://github.com/pcqpcq/opensource-android-apps; (2019) Soot-A Framework for Analyzing and Transforming Java and Android Applications, , https://sable.github.io/soot/; Sadeghi, A., Jabbarvand, R., Malek, S., Patdroid: Permission-aware gui testing of android (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, pp. 220-232; Sasnauskas, R., Regehr, J., Intent fuzzer: Crafting intents of death (2014) Proceedings of the 2014 Joint International Workshop on Dynamic Analysis (WODA) and Software and System Performance Testing, Debugging, and Analytics (PERTEA). ACM, pp. 1-5; Savinov, N., Raichuk, A., Marinier, R., Vincent, D., Pollefeys, M., Lillicrap, T., Gelly, S., Episodic curiosity through reachability (2019) 7th International Conference on Learning Representations (ICLR); Shafique, M., Labiche, Y., (2010) A Systematic Review of Model Based Testing Tool Support, , Technical Report SCE-10-04. Carleton University, Canada. 2010; Spieker, H., Gotlieb, A., Marijan, D., Mossige, M., Reinforcement learning for automatic test case prioritization and selection in continuous integration (2017) Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, pp. 12-22; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of Android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, pp. 245-256; Vuong, T., Takada, S., Semantic analysis for deep Q-network in android GUI testing (2019) 31st International Conference on Software Engineering and Knowledge Engineering, SEKE 2019. Knowledge Systems Institute Graduate School, pp. 123-128; Anh Tuyet Vuong, T., Takada, S., A reinforcement learning based approach to automated testing of Android applications (2018) Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation. ACM, pp. 31-37; Christopher, J.C.H.W., Dayan, P., Q-learning (1992) Machine Learning, 8 (3-4), pp. 279-292. , (1992); Wurmser, Y., (2018) Mobile Time Spent 2018, , https://www.emarketer.com/content/mobile-time-spent-2018; Yan, J., Pan, L., Li, Y., Yan, J., Zhang, J., LAND: A userfriendly and customizable test generation tool for Android apps (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, pp. 360-363; Yan, J., Wu, T., Yan, J., Zhang, J., Widget-sensitive and back-stack-aware GUI exploration for testing android apps (2017) 2017 IEEE International Conference on Software Quality, Reliability and Security (QRS). IEEE, pp. 42-53; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , Springer; Ye, H., Cheng, S., Zhang, L., Jiang, F., Droidfuzzer: Fuzzing the android apps with intent-filter tag (2013) Proceedings of International Conference on Advances in Mobile Computing & Multimedia. ACM, p. 68; Zheng, Y., Xie, X., Su, T., Ma, L., Hao, J., Meng, Z., Liu, Y., Fan, C., Wuji: Automatic online combat game testing using evolutionary deep reinforcement learning (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 772-784","Pan, M.; Nanjing UniversityChina; email: mxp@nju.edu.cn","Khurshid S.Pasareanu C.S.","ACM SIGSOFT","Association for Computing Machinery, Inc","29th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2020","18 July 2020 through 22 July 2020",,161847,,9781450380089,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85088922644
"Paydar S.","24438157900;","Making Android apps monkey-friendly",2020,"Proceedings - 2020 IEEE/ACM 7th International Conference on Mobile Software Engineering and Systems, MOBILESoft 2020",,,,"16","20",,,"10.1145/3387905.3388609","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85094838932&doi=10.1145%2f3387905.3388609&partnerID=40&md5=b45c2f3361ec992961aa578eb425ac37","Ferdowsi University of Mashhad, Mashhad, Iran","Paydar, S., Ferdowsi University of Mashhad, Mashhad, Iran","Monkey testing is a random testing technique in which a stream of pseudo-random events are automatically fired on the GUI of the application under test, usually with the purpose of robustness testing or responsiveness analysis. A line of research is dedicated to addressing the limitations of monkey testing for Android apps. However, all the existing works try to improve the underlying algorithms or techniques used by the monkey testing tools. In this vision paper, we propose the idea of improving the effectiveness of monkey testing by automatically refactoring the application under test. We provide two sample scenarios in which this idea can be used to address limitations of monkey testing for Android applications. © 2020 ACM.","Android; GUI; monkey testing; refactoring",,,,,,,,,"Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (e) (2015) 30th IEEE/ACM International Conference on Automated Software Engineering, Ase 2015, pp. 429-440. , https://doi.org/10.1109/ASE.2015.89, Lincoln, NE, USA, November 9-13, 2015; Haoyin, L.V., Automatic android application gui testing-a random walk approach (2017) 2017 International Conference on Wireless Communications, Signal Processing and Networking (WiSPNET), pp. 72-76; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated testing of android apps: A systematic literature review (2019) Ieee Trans. Reliability, 68 (1), pp. 45-66. , https://doi.org/10.1109/TR.2018.2865733, 2019; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Joint Meeting of the European Software Engineering Conference and the Acm Sigsoft Symposium on the Foundations of Software Engineering, ESEC/FSE'13, pp. 224-234. , https://doi.org/10.1145/2491411.2491450, Saint Petersburg, Russian Federation, August 18-26, 2013; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, Issta 2016, pp. 94-105. , https://doi.org/10.1145/2931037.2931054, Saarbrücken, Germany, July 18-20, 2016; Patel, P., Srinivasan, G., Rahaman, S., Neamtiu, I., On the efectiveness of random testing for android: Or how i learned to stop worrying and love the monkey (2018) Proceedings of the 13th International Workshop on Automation of Software Test, AST@ICSE 2018, pp. 34-37. , https://doi.org/10.1145/3194733.3194742, Gothenburg, Sweden, May 28-29, 2018; Pilgun, A., Gadyatskaya, O., Dashevskyi, S., Zhauniarovich, Y., Kushniarou, A., An efective android code coverage tool (2018) Proceedings of the 2018 Acm Sigsac Conference on Computer and Communications Security, Ccs 2018, pp. 2189-2191. , https://doi.org/10.1145/3243734.3278484, Toronto, ON, Canada, October 15-19, 2018; Song, W., Qian, X., Huang, J., Ehbdroid: Beyond gui testing for android applications (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, Ase 2017, pp. 27-37. , https://doi.org/10.1109/ASE.2017.8115615, Urbana, IL, USA, October 30-November 03, 2017; Wetzlmaier, T., Ramler, R., Hybrid monkey testing: Enhancing automated gui tests with random test generation (2017) Proceedings of the 8th Acm Sigsoft International Workshop on Automated Software Testing, A-TEST@ESEC/SIGSOFT Fse 2017, pp. 5-10. , https://doi.org/10.1145/3121245.3121247, Paderborn, Germany, September 4-5, 2017; Wetzlmaier, T., Ramler, R., Putschögl, W., A framework for monkey gui testing (2016) 2016 Ieee International Conference on Software Testing, Verifcation and Validation, Icst 2016, pp. 416-423. , https://doi.org/10.1109/ICST.2016.51, Chicago, IL, USA, April 11-15, 2016; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Are we really there yet in an industrial case? (2016) Proceedings of the 24th Acm Sigsoft International Symposium on Foundations of Software Engineering, Fse 2016, pp. 987-992. , https://doi.org/10.1145/2950290.2983958, Seattle, WA, USA, November 13-18, 2016","Paydar, S.; Ferdowsi University of MashhadIran; email: s-paydar@um.ac.ir",,"ACM SIGSOFT;IEEE TCSE;Korean Institute of Information Scientists and Engineers;Microsoft Research","Association for Computing Machinery, Inc","7th IEEE/ACM International Conference on Mobile Software Engineering and Systems, MOBILESoft 2020","13 July 2020",,163744,,9781450379595,,,"English","Proc. - IEEE/ACM Int. Conf. Mob. Softw. Eng. Syst., MOBILESoft",Conference Paper,"Final","",Scopus,2-s2.0-85094838932
"Yan J., Liu H., Pan L., Yan J., Zhang J., Liang B.","57191229706;57221581149;57191051747;56415455000;57219348144;57220970352;","Multiple-entry testing of android applications by constructing activity launching contexts",2020,"Proceedings - International Conference on Software Engineering",,, 3380347,"457","468",,1,"10.1145/3377811.3380347","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85094314386&doi=10.1145%2f3377811.3380347&partnerID=40&md5=f8aca19fa9b7f985e593e6817e0b342c","Tech. Center of Softw. Eng. Institute of Software, Cas, China Univ. of Chinese Academy of Sciences Beijing, China; Dept. of Informatics Beijing, University of Tech., Beijing, China; State Key Lab. of Computer Science Institute of Software, Cas, China Univ. of Chinese Academy of Sciences, Beijing, China; School of Information Renmin, University of China, Beijing, China","Yan, J., Tech. Center of Softw. Eng. Institute of Software, Cas, China Univ. of Chinese Academy of Sciences Beijing, China; Liu, H., Dept. of Informatics Beijing, University of Tech., Beijing, China; Pan, L., State Key Lab. of Computer Science Institute of Software, Cas, China Univ. of Chinese Academy of Sciences, Beijing, China; Yan, J., State Key Lab. of Computer Science Institute of Software, Cas, China Univ. of Chinese Academy of Sciences, Beijing, China; Zhang, J., State Key Lab. of Computer Science Institute of Software, Cas, China Univ. of Chinese Academy of Sciences, Beijing, China; Liang, B., School of Information Renmin, University of China, Beijing, China","Existing GUI testing approaches of Android apps usually test apps from a single entry. In this way, the marginal activities far away from the default entry are difficult to be covered. The marginal activities may fail to be launched due to requiring a great number of activity transitions or involving complex user operations, leading to uneven coverage on activity components. Besides, since the test space of GUI programs is infinite, it is difficult to test activities under complete launching contexts using single-entry testing approaches. In this paper, we address these issues by constructing activity launching contexts and proposing a multiple-entry testing framework. We perform an inter-procedural, flow-, context- and pathsensitive analysis to build activity launching models and generate complete launching contexts. By activity exposing and static analysis, we could launch activities directly under various contexts without performing long event sequence on GUI. Besides, to achieve an in-depth exploration, we design an adaptive exploration framework which supports the multiple-entry exploration and dynamically assigns weights to entries in each turn. Our approach is implemented in a tool called Fax, with an activity launching strategy Faxla and an exploration strategy Faxex . The experiments on 20 real-world apps show that Faxla can cover 96.4% and successfully launch 60.6% activities, based on which Faxex further achieves a relatively 19.7% improvement on method coverage compared with the most popular tool Monkey. Our tool also behaves well in revealing hidden bugs. Fax can trigger over seven hundred unique crashes, including 180 Errors and 539 Warnings, which is significantly higher than those of other tools. Among the 46 bugs reported to developers on Github, 33 have been fixed up to now. © 2020 Association for Computing Machinery.","Android app; Icc; Multiple-entry testing; Static analysis","Graphical user interfaces; Launching; Program debugging; Static analysis; Adaptive explorations; Android applications; Android apps; Event sequence; Exploration strategies; Inter-procedural; Path-sensitive analysis; Testing framework; Android (operating system)",,,,,"National Natural Science Foundation of China, NSFC: 61672505

Chinese Academy of Sciences, CAS: QYZDJ-SSW-JSC036","The authors would like to thank the anonymous reviewers for their helpful comments and suggestions. This work is supported by the Key Research Program of Frontier Sciences, Chinese Academy of Sciences (Grant No. QYZDJ-SSW-JSC036), and the National Natural Science Foundation of China (Grant No. 61672505).",,"(2019), http://adbshell.com/, 2019 ADB shell-Android ADB Commands Manual; Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using gui ripping for automated testing of android applications (2012) ASE 2012, pp. 258-261; Amalfitano, D., Rita Fasolino, A., Tramontana, P., Dzung Ta, B., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , 2015; Anand, S., Naik, M., Jean Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) SIGSOFT/FSE 2012, pp. 1-11; (2019), https://ant.apache.org/; (2019) Apktool-A Tool for Reverse Engineering, , http://ibotpeaches.github.io/Apktool/, 2019; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) OOPSLA 2013, Part of SPLASH 2013, pp. 641-660; (2019) Bundle | Android Developers, , https://developer.android.com/reference/android/os/Bundle.html, 2019; Choi, W., Necula, G.C., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) OOPSLA 2013, Part of SPLASH 2013, pp. 623-640; Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) ASE 2015, pp. 429-440; De Moura, L.M., Bjørner, N., Z3: An efficient SMT solver (2008) ETAPS 2008, pp. 337-340; (2019), https://f-droid.org/, F-Droid 2019; (2019), https://github.com/hanada31/Fax, 2019; Gao, X., Hwei Tan, S., Dong, Z., Roychoudhury, A., Android testing via synthetic symbolic execution (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, pp. 419-429; Gu, T., Sun, C., Ma, X., Cao, C., Xu, C., Yao, Y., Zhang, Q., Su, Z., Practical gui testing of android applications via model abstraction and refinement (2019) ICSE 2019, pp. 269-280; Hao, S., Liu, B., Nath, S., Halfond, J.W.G., Govindan, R., PUMA: Programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) MobiSys 2014, pp. 204-217; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) AST 2011, pp. 77-83; (2019), https://www.nccgroup.trust/us/our-research/intent-fuzzer/, Intent Fuzzer. 2019; (2019), https://github.com/hanada31/Fax/tree/master/IntentBench, 2019; (2016), https://developer.android.com/guide/components/intents-filters.html, Intents and Intent Filters | Android Developers. 2016; Path Finder, J., (2019), http://Javapathfinder.sourceforge.net/, 2019; Svenning Jensen, C., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) ISSTA 2013, pp. 67-77; Liu, J., Wu, T., Yan, J., Zhang, J., InsDal: A safe and extensible instrumentation tool on dalvik byte-code for android applications (2017) IEEE 24th International Conference on Software Analysis, Evolution and Reengineering, SANER 2017, pp. 502-506; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) ESEC/FSE 2013, pp. 224-234; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., A whitebox approach for automated security testing of android applications on the cloud (2012) AST 2012, pp. 22-28; Kumar Maji, A., Arshad, F.A., Bagchi, S., Rellermeyer, J.S., An empirical study of the robustness of inter-component communication in android (2012) DSN 2012, pp. 1-12; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA, 2016, pp. 94-105; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in gui testing of android applications (2016) ICSE 2016, pp. 559-570; (2019), https://developer.android.com/studio/test/monkey, 2019; Nielson, F., Nielson, H.R., Hankin, C., (2015) Principles of Program Analysis, , Springer; Octeau, D., Luchaup, D., Dering, M., Jha, S., McDaniel, P., Composite constant propagation: Application to android inter-component communication analysis (2015) ICSE 2015, pp. 77-88; (2019), https://github.com/ankidroid/Anki-Android/issues/5401, Issuse of AnkiDroid. 2019; (2019), https://github.com/AntennaPod/AntennaPod/issues/3304, Issuse of AntennaPod. 2019; (2019), https://github.com/siacs/Conversations/issues/3512, Issuse of Conversations. 2019; (2019), https://github.com/etesync/android/issues/84, Issuse of EteSync. 2019; (2019), https://github.com/inaturalist/iNaturalistAndroid/issues/684, 2019 Issuse of iNaturalist; (2019), https://github.com/k9mail/k-9/issues/4160, 2019 Issuse of K9Mail; (2019), https://github.com/mikifus/padland/issues/54, 2019 Issuse of Padland; (2019), https://github.com/ligi/PassAndroid/issues/228, 2019 Issuse of PassAndroid; (2019), https://github.com/forrestguice/SuntimesWidget/issues/353, 2019 Issuse of SuntimesWidget; (2019), https://github.com/syncthing/syncthing-android/issues/1382, 2019 Issuse of Synthing; (2019), https://github.com/k9mail/k-9/tree/GH-701_fix_special_use_folders_with_prefix, 2019 K9Mail on Github; Pan, L., Cui, B., Yan, J., Ma, X., Yan, J., Zhang, J., Androlic: An extensible flow, context, object, field, and path-sensitive static analysis framework for android (2019) ISSTA 2019, pp. 394-397; Rasthofer, S., Arzt, S., Triller, S., Pradel, M., Making malory behave maliciously: Targeted fuzzing of android execution environments (2017) ICSE 2017, pp. 300-311; Sasnauskas, R., Regehr, J., Intent fuzzer: Crafting intents of death (2014) WODA+PERTEA 2014, pp. 1-5; (2019), http://www.bodden.de/2008/09/22/soot-intra, 2019; (2019), https://docs.oracle.com/Javase/8/docs/api/Java/lang/String.html, 2019 Java String; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based gui testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE, 2017, pp. 245-256; Sutton, M., Greene, A., Amini, P., Fuzzing: Brute force vulnerability discovery (2007) Pearson Education; Tian, C., Xia, C., Duan, Z., Android inter-component communication analysis with intent revision (2018) ICSE 2018, pp. 254-255; (2019), https://github.com/MindMac/IntentFuzzer, 2019 IntentFuzzer Tool; Van Der Merwe, H., Van Der Merwe, B., Visser, W., Verifying android applications using Java pathfinder (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), pp. 1-5. , 2012; Wang, J., Jiang, Y., Xu, C., Ma, X., Lu, J., Automatic test-input generation for android applications (in Chinese) (2019) SCIENCE China Informationis, 49 (10), pp. 1234-1266. , https://doi.org/10.1360/N112019-00003, 2019; Wu, T., Deng, X., Yan, J., Zhang, J., Analyses for specific defects in android applications: A survey (2019) Frontiers Comput. Sci., 13 (6), pp. 1210-1227. , 2019; Yan, J., Deng, X., Wang, P., Wu, T., Yan, J., Zhang, J., Characterizing and identifying misexposed activities in android applications (2018) ASE 2018, pp. 691-701; Yang, K., Zhuge, J., Wang, Y., Zhou, L., Duan, H., IntentFuzzer: Detecting capability leaks of android applications (2014) Asia CCS 2014, pp. 531-536; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (2015) ASE 2015, pp. 658-668; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) ETAPS 2013, pp. 250-265; Ye, H., Cheng, S., Zhang, L., Jiang, F., DroidFuzzer: Fuzzing the android apps with intent-filter tag (2013) MoMM 2013, pp. 68-74; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Are we really there yet in an industrial case? (2016) FSE 2016, pp. 987-992; Zheng, Y., Zhang, X., Ganesh, V., Z3-str: A z3-based string solver for web application analysis (2013) ESEC/FSE 2013, pp. 114-124",,,"ACM Special Interest Group on Software Engineering (SIGSOFT);IEEE Computer Society Technical Council on Software Engineering (TCSE);Korean Institute of Information Scientists and Engineers (KIISE)","IEEE Computer Society","42nd ACM/IEEE International Conference on Software Engineering, ICSE 2020","27 June 2020 through 19 July 2020",,163540,02705257,9781450371216,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85094314386
"Paydar S.","24438157900;","Automated GUI Layout Refactoring to Improve Monkey Testing of Android Applications",2020,"Proceedings of RTEST 2020 - 3rd CSI/CPSSI International Symposium on Real-Time and Embedded Systems and Technologies",,, 9140106,"","",,,"10.1109/RTEST49666.2020.9140106","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089601604&doi=10.1109%2fRTEST49666.2020.9140106&partnerID=40&md5=0fc06a9f728beb85d0a54e34f3794847","Ferdowsi University of Mashhad, Dept. of Computer Engineering, Mashhad, Iran","Paydar, S., Ferdowsi University of Mashhad, Dept. of Computer Engineering, Mashhad, Iran","A line of research in the software testing community is dedicated to proposing effective testing techniques for finding defects in Android applications. Monkey testing is one of the promising techniques, mainly because of having low setup cost, good reusability across different applications, and being successful in challenging the application under test with corner cases. Despite its benefits, monkey testing suffers from well-known weaknesses, including widget obliviousness and state obliviousness. The former means that the monkey does not utilize specific knowledge about the behavior of the elements in the GUI of the application under test. The latter means that the monkey simply generates random events without taking into consideration the current state of the application and whether those events are helpful in that state, from the point of view of revealing potential faults. As a result, different methods are presented in the literature to improve monkey testing of Android applications. In this paper, we have proposed a novel technique to improve effectiveness of monkey testing by alleviating the widget obliviousness issue. This technique is based on the idea of automated GUI layout refactoring to improve effectiveness of the monkey. We have implemented the proposed technique and have used it to conduct a case study on a real-world Android application. The results demonstrate that the proposed technique is promising in improving effectiveness of monkey testing by increasing the interaction of the monkey with the GUI elements that are associated with the more complex functionalities of the application. © 2020 IEEE.","Android; GUI; monkey testing; random testing; refactoring",,,,,,,,,"Ardito, L., Coppola, R., Morisio, M., Torchiano, M., Espresso vs. Eyeautomate: An experiment for the comparison of two generations of android gui testing (2019) Proceedings of the Evaluation and Assessment on Software Engineering, EASE 2019, pp. 13-22. , Copenhagen, Denmark, April 15-17 2019; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet (e) (2015) 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, pp. 429-440. , Lincoln, NE, USA, November 9-13 2015; Deng, L., Offutt, J., Ammann, P., Mirzaei, N., Mutation operators for testing android apps (2017) Information & Software Technology, 81, pp. 154-168; Deng, L., Offutt, J., Samudio, D., Is mutation analysis effective at testing android apps (2017) 2017 IEEE International Conference on Software Quality, Reliability and Security, QRS 2017, pp. 86-93. , Prague, Czech Republic 2017; Groot, M.D., (2018) Smarter Monkeys: Using Evolutionary Computing to Improve Black Box Monkey Testing on A Graphical User Interface, , Master's thesis, Open Universiteit Nederland; Haoyin, L., Automatic android application gui testing-a random walk approach (2017) 2017 International Conference on Wireless Communications, Signal Processing and Networking (WiSPNET), pp. 72-76. , IEEE; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test, AST 2011, pp. 77-83. , Waikiki, Honolulu, HI, USA, May 23-24 2011; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 8th IEEE International Conference on Software Testing, Verification and Validation, ICST 2015, pp. 1-10. , Graz, Austria, April 13-17 2015; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated testing of android apps: A systematic literature review (2019) IEEE Trans. Reliability, 68 (1), pp. 45-66; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE'13, pp. 224-234. , Saint Petersburg, Russian Federation, August 18-26 2013; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 94-105. , Saarbrücken, Germany, July 18-20 2016; McDonnell, T., Ray, B., Kim, M., An empirical study of api stability and adoption in the android ecosystem (2013) 2013 IEEE International Conference on Software Maintenance, pp. 70-79. , Eindhoven, The Netherlands, September 22-28 2013; Ongkosit, T., Takada, S., Responsiveness analysis tool for android application (2014) Proceedings of the 2nd International Workshop on Software Development Lifecycle for Mobile, DeMobile 2014, pp. 1-4. , Hong Kong, China, November 17 2014; Patel, P., Srinivasan, G., Rahaman, S., Neamtiu, I., On the effectiveness of random testing for android: Or how i learned to stop worrying and love the monkey (2018) Proceedings of the 13th International Workshop on Automation of Software Test, AST@ICSE 2018, pp. 34-37. , Gothenburg, Sweden, May 28-29 2018; Paydar, S., Azamnouri, A., An experimental study on robustness and responsiveness testing of iranian android games (2018) 2018 8th International Conference on Computer and Knowledge Engineering (ICCKE), pp. 27-33. , IEEE; Paydar, S., Houshmand, M., Hayeri, E., Experimental study on the importance and effectiveness of monkey testing for android applications (2017) 2017 International Symposium on Computer Science and Software Engineering Conference (CSSE), pp. 73-79. , IEEE; Sadeghi, A., Jabbarvand, R., Malek, S., Patdroid: Permission-aware gui testing of android (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, pp. 220-232. , Paderborn, Germany, September 4-8 2017; Song, W., Qian, X., Huang, J., Ehbdroid: Beyond gui testing for android applications (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, ASE 2017, pp. 27-37. , Urbana, IL, USA, October 30-November 03 2017; Su, T., Fsmdroid: Guided gui testing of android apps (2016) Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, pp. 689-691. , Austin, TX, USA, May 14-22, 2016-Companion Volume; Tramontana, P., Amalfitano, D., Amatucci, N., Fasolino, A.R., Automated functional testing of mobile applications: A systematic mapping study (2019) Software Quality Journal, 27 (1), pp. 149-201; Vásquez, M.L., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017, pp. 613-622. , Shanghai, China, September 17-22 2017; Wetzlmaier, T., Ramler, R., Hybrid monkey testing: Enhancing automated gui tests with random test generation (2017) Proceedings of the 8th ACM SIGSOFT International Workshop on Automated Software Testing, A-TEST@ESEC/SIGSOFT FSE 2017, pp. 5-10. , Paderborn, Germany, September 4-5 2017; Wetzlmaier, T., Ramler, R., Putschögl, W., A framework for monkey gui testing (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation, ICST 2016, pp. 416-423. , Chicago, IL, USA, April 11-15 2016; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Are we really there yet in an industrial case? (2016) Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pp. 987-992. , Seattle, WA, USA, November 13-18 2016; McCabe, T.J., A complexity measure (1976) IEEE Trans. Software Eng, 2 (4), pp. 308-320","Paydar, S.; Ferdowsi University of Mashhad, Iran",,,"Institute of Electrical and Electronics Engineers Inc.","3rd CSI/CPSSI International Symposium on Real-Time and Embedded Systems and Technologies, RTEST 2020","10 June 2020 through 11 June 2020",,161862,,9781728175515,,,"English","Proc. RTEST - CSI/CPSSI Int. Symp. Real-Time Embed. Syst. Technol.",Conference Paper,"Final","",Scopus,2-s2.0-85089601604
"Chowdhury R.R., Hossain S.S., Arafat Y., Siddiqui B.J.","57218449151;57205525765;57218449171;57218450602;","Configuring Appium for iOS Applications and Test Automation in Multiple Devices",2020,"ACM International Conference Proceeding Series",,,,"63","69",,,"10.1145/3399871.3399883","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089237970&doi=10.1145%2f3399871.3399883&partnerID=40&md5=931a7e6c1733931a51cda88dfe2a2fb6","Islamic University of Technology, Gazipur, Bangladesh; Daffodil International University, Dhaka, Bangladesh; Ahsanullah University of Science and Technology, Dhaka, Bangladesh","Chowdhury, R.R., Islamic University of Technology, Gazipur, Bangladesh; Hossain, S.S., Daffodil International University, Dhaka, Bangladesh; Arafat, Y., Daffodil International University, Dhaka, Bangladesh; Siddiqui, B.J., Ahsanullah University of Science and Technology, Dhaka, Bangladesh","With the ever-expanding of mobile technologies, maintaining software quality becomes a challenging job as a high volume of analyzes and high arrangements of features ought to be tested. Today, organizations are investing an expanding measure of energy and assets in guaranteeing the application is completely tried for the best client experience and ideal execution by the application. Automation in testing could be a great solution in this regard. Though there are mere tools for testing iOS applications, an open source mobile testing tool Appium is one of those. The purpose of this study is to discuss the detailed configuration of Appium for testing iOS applications and to address one of the major limitations of testing iOS applications using Appium, that is to test in multiple iOS devices using one Mac machine. This will support the iOS mobile industry to improve the quality of user experience by guiding the step by step set up of Appium for testing in commercial level and making it more cost effective. © 2020 ACM.","Appium; Automated Testing; iOS Application; Test Automation; Testing on Multiple Devices; User Interface Testing","Computer software selection and evaluation; Cost effectiveness; iOS (operating system); Open source software; Software quality; User experience; Cost effective; High volumes; Mobile industry; Mobile Technology; Mobile testing; Multiple devices; Test Automation; Tools for testing; Software testing",,,,,,,,"Singh, S., Gadgil, R., Chudgor, A., Automated testing of mobile applications using scripting technique: A study on appium (2014) International Journal of Current Engineering and Technology (IJCET), 4 (5), pp. 3627-3630; Shah, G., Shah, P., Muchhala, R., Software testing automation using appium (2014) International Journal of Current Engineering and Technology, 4 (5), pp. 3528-3531; Gao, J., Bai, X., Tsai, W.-T., Uehara, T., Mobile application testing: A tutorial (2014) Computer, 47 (2), pp. 46-55; Bharath, A.R., Shanker, A., Kumar Mandala, P., Shenoy, A., (2012) Automated Software Testing Framework Using Independent Test Scripts, , August 7, US Patent; Noller, J.A., Mason, R.S., Jr., (2012) Automated Software Testing Framework, , July 24, US Patent; Momin, S., (2014) Automated Mobile Web Apps Testing Tool; Song, H., Ryoo, S., Hyung Kim, J., An integrated test automation framework for testing on heterogeneous mobile platforms. in (2011) 2011 First Acis International Symposium on Software and Network Engineering, pp. 141-145. , IEEE; Noller, J.A., Mason, R.S., Jr., (2010) Automated Software Testing Framework, , April 6, US Patent 7,694,181; Mozgovoy, M., Pyshkin, E., Unity application testing automation with appium and image recognition (2017) International Conference on Tools and Methods for Program Analysis, pp. 139-150. , Springer; Alotaibi, A.A., Qureshi, R.J., Novel framework for automation testing of mobile applications using appium (2017) International Journal of Modern Education and Computer Science, 9 (2), p. 34; Rah, D.M., Kiran Moses, K.R., Petersen, K., Mantyla, M.V., Benefits and limitations of automated software testing: Systematic literature review and practitioner survey. in (2012) 2012 7th International Workshop on Automation of Software Test (AST, pp. 36-42. , IEEE; Asfaw, D., Benefits of automated testing over manual testing (2015) International Journal of Innovative Research in Information Security, 2 (1), pp. 5-13; Wiklund, K., Sundmark, D., Eldh, S., Lundvist, K., Impediments for automated testing-An empirical analysis of a user support discussion board. in (2014) 2014 Ieee Seventh International Conference on Software Testing, Verification and Validation, pp. 113-122. , IEEE; Hanna, M., El-Haggar, N., Sami, M., A review of scripting techniques used in automated software testing (2014) International Journal of Advanced Computer Science and Applications (IJACSA), 5 (1); Garcia, B., Gortazar, F., Gallego, M., Jimenez, E., User impersonation as a service in end-to-end testing (2018) Modelsward, pp. 707-714; Dubey, N., Shiwani, M.S., Studying and comparing automated testing tools; Ranorex and testcomplete (2014) International Journal of Engineering and Computer Science, 3 (5); Zun, D., Qi, T., Chen, L., Research on automated testing framework for multi-platform mobile applications. in (2016) 2016 4th International Conference on Cloud Computing and Intelligence Systems (CCIS, pp. 82-87. , IEEE; Gunasekaran, S., Bargavi, V., Survey on automation testing tools for mobile applications (2015) International Journal of Advanced Engineering Research and Science, 2 (11), pp. 2349-6495",,,,"Association for Computing Machinery","2020 Asia Service Sciences and Software Engineering Conference, ASSE 2020","13 May 2020 through 15 May 2020",,161557,,9781450377102,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85089237970
"Chae H., Kang R., Seok H.-S.","57216976862;57216981228;55828336100;","Unsupervised detection of changes in usage-phases of a mobile app",2020,"Applied Sciences (Switzerland)","10","10", 3656,"","",,,"10.3390/app10103656","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085621036&doi=10.3390%2fapp10103656&partnerID=40&md5=2b960849281bca3e19d6675907c1755d","Department of Computer Science and Engineering, Kangwon National University, Chuncheon-si, Gangwon-do, 24341, South Korea; Apptest. ai, Songpa-gu, Seoul, 05854, South Korea","Chae, H., Department of Computer Science and Engineering, Kangwon National University, Chuncheon-si, Gangwon-do, 24341, South Korea; Kang, R., Apptest. ai, Songpa-gu, Seoul, 05854, South Korea; Seok, H.-S., Department of Computer Science and Engineering, Kangwon National University, Chuncheon-si, Gangwon-do, 24341, South Korea","Under the fierce competition and budget constraints, most mobile apps are launched without sufficient tests. Thus, there exists a great demand for automated app testing. Recent developments in various machine learning techniques have made automated app testing a promising alternative to manual testing. This work proposes novel approaches for one of the core functionalities of automated app testing: the detection of changes in usage-phases of a mobile app. Because of the flexibility of app development languages and the lack of standards, each mobile app is very different from other apps. Furthermore, the graphical user interfaces for similar functionalities are rarely consistent or similar. Thus, we propose methods detecting usage-phase changes through object recognition and metrics utilizing graphs and generative models. Contrary to the existing change detection methods requiring learning models, the proposed methods eliminate the burden of training models. This elimination of training is suitable for mobile app testing whose typical usage-phase is composed of less than 10 screenshots. Our experimental results on commercial mobile apps show promising improvement over the state-of-the-practice method based on SIFT (scale-invariant feature transform). © 2020 by the authors. Licensee MDPI, Basel, Switzerland.","Automated mobile app testing; Generative model; Graph entropy; Graph kernel; Machine learning; Unsupervised learning",,,,,,"NRF-2018R1D1A1B07047156

National Research Foundation of Korea, NRF","This research was supported by the Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education (NRF-2018R1D1A1B07047156).",,"Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objec tive automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 94-105. , Saarbrücken, Germany, 18-20 July; (2017) Android Monkey, , https://developer.android.com/studio/test/monkey, (accessed on 25 May 2020); Wetzlmaier, T., Ramler, R., Putschögl, W., A framework for monkey GUI testing (2016) Proceedings of the 9th IEEE International Conference on Software Testing, pp. 416-423. , Verification and Validation, Chicago, IL, USA, 11-15 April; Nyman, N., Using monkey test tools (2000) STQE, 29, pp. 18-23; White, T.D., Fraser, G., Brown, G.J., Improving random GUI testing with image-based widget detection (2019) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 307-317. , Beijing, China, 15-19 July; Degott, C., Borges, N.P., Jr., Zeller, A., Learning user interface element interactions (2019) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 296-306. , Beijing, China, 15-19 July; Saumya, C., Koo, J., Kulkarni, M., Bagchi, S., XSTRESSOR: Automatic generation of large-scale worst-case test inputs by inferring path conditions (2019) Proceedings of the 12th IEEE International Conference on Software Testing, pp. 1-12. , Verification and Validation, Xi'an, China, 22-27 April; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) Proceedings of the IEEE International Conference on Software Testing, pp. 33-44. , Verification and Validation, Chicago, IL, USA, 10-15 April; Iwashita, A.S., Papa, J.P., An overview on concept drift learning (2019) IEEE Access, 7, pp. 1532-1547; Lu, J., Liu, A., Dong, F., Gu, F., Gama, J., Zhang, G., Learning under concept drift: A review (2019) IEEE Trans. Knowl. Data Eng, 31, pp. 2346-2363; Orlitsky, A., Roche, J.R., Coding for computing (2001) IEEE Trans. Inf. Theory, 47, pp. 903-917; Vishwanathan, S.V.N., Schraudolph, N.N., Kondor, R., Borgwardt, K.M., Graph kernels (2010) J. Mach. Learn. Res, 11, pp. 1201-1242; Bishop, C.M., (2006) Pattern Recognition and Machine Learning;, pp. 42-43. , Springer: New York, NY, USA; Li, X., Hu, W., Shen, C., Zhang, Z., Dick, A., A survey of appearance models in visual object tracking (2013) ACM Trans. Intell. Syst. Technol, 58, pp. 1-48; Wang, Y., Du, L., Dai, H., Unsupervised SAR image change detection based on SIFT keypoints and region information (2016) IEEE Geosci. Remote Sens. Lett, 13, pp. 931-935; Akoglu, L., Tong, H., Koutra, D., Graph-based anomaly detection and description: A survey (2015) Data Min. Knowl. Discov, 29, pp. 626-688; Ramírez-Gallego, S., Krawczyk, B., García, S., WoZniak, M., Herrera, F., A survey on data processing for data stream mining: Current status and future directions (2017) Neurocomputing, 239, pp. 39-57; Gama, J., Medas, P., Castillo, G., Rodrigues, P., Learning with drift detection (2004) Advances in Artificial Intelligence-SBIA 2004. SBIA 2004. Lecture Notes in Computer Science;, 3171, pp. 286-295. , Bazzan, A.L.C., Labidi, S., Eds.; Springer: Berlin/Heidelberg, Germany; Huang, G., Huang, G.-B., Song, S., You, K., Trends in extreme learning machines: A review (2015) Neural Netw, 61, pp. 32-48; Xu, S., Wang, J., Dynamic extreme learning machine for data stream classification (2017) Neurocomputing, 238, pp. 433-449; Dasu, T., Krishnan, S., Venkatasubramanian, S., Yi, K., An information-theoretic approach to detecting changes in multi-dimensional data streams (2006) Proceedings of the 38th Symposium on the Interface of Statistics, pp. 1-24. , Computing Science, and Applications, Pasadena, CA, USA, 24-27 May; Nguyen, T.D., Du Plessis, M.C., Kanamori, T., Sugiyama, M., Constrained least-squares density-difference estimation (2014) IEICE Trans. Inf. Syst, 97, pp. 1822-1829; Bu, L., Alippi, C., Zhao, D., A PDF-free change detection test based on density difference estimation (2018) IEEE Trans. Neural Netw. Learn. Syst, 29, pp. 324-334; Ross, G.J., Adams, N.M., Two nonparametric control charts for detecting arbitrary distribution changes (2012) J. Qual. Technol, 44, pp. 102-116; Alippi, C., Boracchi, G., Carrera, D., Roveri, M., Change detection in multivariate datastreams: Likelihood and detectability loss (2016) Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence, pp. 1368-1374. , New York, NY, USA, 9-15 July; Ranshous, S., Shen, S., Koutra, D., Harenberg, S., Faloutsos, C., Samatova, N.F., Anomaly detection in dynamic networks: A survey (2015) WIREs Comput. Stat, 7, pp. 223-247; Grattarola, D., Zambon, D., Alippi, C., Livi, L., Change detection in graph streams by learning graph embeddings on constant-curvature manifolds (2019); Zambon, D., Alippi, C., Livi, L., Concept drift and anomaly detection in graph streams (2018) IEEE Trans. Neur. Netw. Learn. Syst, 29, pp. 5592-5605; Wackerly, D.D., Mendenhall, W., Scheaffer, R.L., Likelihood ratio tests (2008) Mathematical Statistics with Applications;, pp. 549-550. , Thomson Brooks/Cole: Belmont, NV, USA; Alippi, C., Roveri, M., An adaptive CUSUM-based test for signal change detection (2006) Proceedings of the International Symposium on Circuits and Systems, pp. 5752-5755. , Island of Kos, Greece, 21-24 May; Ren, S., He, K., Girshick, R., Sun, J., Faster R-CNN: Towards real-time object detection with region proposal networks (2016) IEEE Trans. Pattern Anal. Mach. Meli, 39, pp. 1137-1149; Lowe, D.G., Object recognition from local scale-invariant features (1999) Proceedings of the International Conference on Computer Vision, pp. 1150-1157. , Kerkyra, Greece, 20-27 September; Park, M.-H., Park, R.-H., Lee, S.W., Shot boundary detection using scale invariant feature matching (2006) Proceedings of SPIE Visual Communications and Image Processing;, pp. 569-577. , SPIE: Bellingham, WA, USA; Guan, B., Ye, H., Target image video search based on local features (2019); Korhonen, A., Krymolowski, Y., On the robustness of entropy-based similarity measures in evaluation of subcategorization acquisition systems (2002) Proceedings of the 6th Conference on Natural Language Learning (CoNLL-2002), pp. 1-7. , Taipei, Taiwan, 31 August-1 September; Kriege, N.M., Johansson, F.D., Morris, C., A survey on graph kernels (2020) Appl. Netw. Sci, 5, p. 6; Sugiyama, M., Borgwardt, K.M., Halting in Random Walk Kernels (2015) Adv. Neural Inf. Process. Syst, 28, pp. 1630-1638","Seok, H.-S.; Department of Computer Science and Engineering, South Korea; email: hosik.seok@gmail.com",,,"MDPI AG",,,,,20763417,,,,"English","Appl. Sci.",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85085621036
"Li X., Zhou D., Zhang L., Jing Y.","57218836034;57207859886;57211245462;57211244199;","Human-like UI Automation through Automatic Exploration",2020,"ACM International Conference Proceeding Series",,,,"47","53",,,"10.1145/3436286.3436297","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098962919&doi=10.1145%2f3436286.3436297&partnerID=40&md5=3c793bab03bd9b660253623233dfcf53","Turing Lab Tencent Inc., Chengdu, China","Li, X., Turing Lab Tencent Inc., Chengdu, China; Zhou, D., Turing Lab Tencent Inc., Chengdu, China; Zhang, L., Turing Lab Tencent Inc., Chengdu, China; Jing, Y., Turing Lab Tencent Inc., Chengdu, China","Most UI testing tools for mobile games are designed to help us create and run the test cases with scripts. However, these scripts must be manually updated for new test cases, which increases the test cost. In this paper, we propose a method to implement humanlike UI automation through automatic exploration in mobile games. Our method can automatically explore most UIs by recognizing and operating the UI elements similar to manual UI testing. First, we design a lightweight convolutional neural network to detect the buttons in the UI image captured from the mobile phone. Next, we build a directed graph model to store the visited UIs during automatic exploration. Finally, according to our exploration strategy, we choose one button from the UI image and send a click action to the mobile phone. Our method obtains over 85% UI and button coverage rates on three popular mobile games. © 2020 ACM.","Automatic exploration; Convolutional neural network; Directed graph model; UI automation","Big data; Cellular telephones; Convolutional neural networks; Directed graphs; Coverage rate; Directed graph models; Exploration strategies; Human like; Mobile games; Test case; Test cost; Testing tools; Fasteners",,,,,,,,"Yu, Z., Fahid, F.M., Menzies, T., Rothermel, G., Patrick, K., Cherian, S., (2019) TERMINATOR: Better Automated UI Test Case Prioritization; (2019) AirTest, , http://airtest.netease.com, Accessed December 13; (2019) UI Automator, , https://developer.android.com/training/testing/uiautomator, Accessed December 13; (2019) Appium, , http://appium.io, Accessed December 13; Clark, C., Storkey, A., Training deep convolutional neural networks to play go (2015) Proceedings of International Conference on Machine Learning (ICML), pp. 1766-1774; Gudmundsson, S.F., Eisen, P., Poromaa, E., Nodet, A., Purmonen, S., Kozakowski, B., Meurling, R., Cao, L., Human-like playtesting with deep learning (2018) Proceedings of IEEE Conference on Computational Intelligence and Games (CIG), pp. 1-8; Mugrai, L., Silva, F., Holmgard, C., Togelius, J., Automated playtesting of matching tile games (2019) Proceedings of IEEE Conference on Games (CoG), pp. 1-7; Redmon, J., Farhadi, A., (2018) Yolov3: An Incremental Improvement; Szeliski, R., (2010) Computer Vision: Algorithms and Applications, , Springer Science & Business Media; Li, X., Mao, Y., Liu, Y., Zhu, C., Memory-based pedestrian detection through sequence learning (2017) Proceedings of IEEE International Conference on Multimedia and Expo (ICME), pp. 1129-1134; Liu, W., Anguelov, D., Erhan, D., Szegedy, C., Reed, S., Fu, C., Berg, A., Ssd: Single shot multibox detector (2016) Proceedings of the European Conference on Computer Vision (ECCV), pp. 21-37; Ren, S., He, K., Ross, G., Sun, J., Faster r-cnn: Towards real-time object detection with region proposal networks (2015) Advances in Neural Information Processing Systems (NeurIPS), pp. 91-99; Law, H., Deng, J., Cornernet: Detecting objects as paired keypoints (2018) Proceedings of the European Conference on Computer Vision (ECCV), pp. 734-750; Li, Y., Chen, Y., Wang, N., Zhang, Z., Scale-aware trident networks for object detection (2019) Proceedings of the IEEE International Conference on Computer Vision, pp. 6054-6063",,,,"Association for Computing Machinery","2nd International Conference on Big Data and Artificial Intelligence, ISBDAI 2020","15 October 2020 through 16 October 2020",,166197,,9781450376457,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85098962919
"Wu H., Zhang H., Wang Y., Rountev A.","57020062700;55885267700;57215439390;6602227713;","Sentinel: generating GUI tests for sensor leaks in Android and Android wear apps",2020,"Software Quality Journal","28","1",,"335","367",,,"10.1007/s11219-019-09484-z","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076598199&doi=10.1007%2fs11219-019-09484-z&partnerID=40&md5=cf62221695e7681b024d65024a22a858","Google Inc., Mountain View, CA  94043, United States; Ohio State University, Columbus, OH  43210, United States","Wu, H., Google Inc., Mountain View, CA  94043, United States; Zhang, H., Ohio State University, Columbus, OH  43210, United States; Wang, Y., Google Inc., Mountain View, CA  94043, United States; Rountev, A., Ohio State University, Columbus, OH  43210, United States","Due to the widespread use of Android devices and apps, it is important to develop tools and techniques to improve app quality and performance. Our work focuses on a problem related to hardware sensors on Android devices: the failure to disable unneeded sensors, which leads to sensor leaks and thus battery drain. We propose the Sentinel testing tool to uncover such leaks. The tool performs static analysis of app code and produces a model which maps GUI events to callback methods that affect sensor behavior. Edges in the model are labeled with symbols representing the acquiring/releasing of sensors and the opening/closing of UI windows. The model is traversed to identify paths that are likely to exhibit sensor leaks during run-time execution based on two context-free languages over the symbol alphabet. The reported paths are then used to generate test cases. The execution of each test case tracks the run-time behavior of sensors and reports observed leaks. This approach has been applied to both open-sourced and closed-sourced regular Android applications as well as watch faces for Android Wear smartwatches. Our experimental results indicate that Sentinel effectively detects sensor leaks, while focusing the testing efforts on a very small subset of possible GUI event sequences. © 2019, Springer Science+Business Media, LLC, part of Springer Nature.","Android; Android Wear; Energy; GUI; Sensor; Smartwatch; Static analysis; Testing","Context free languages; Graphical user interfaces; Sensors; Static analysis; Testing; Wearable computers; Android; Android applications; Energy; Hardware sensors; Run-time execution; Sensor behavior; Smartwatch; Tools and techniques; Android (operating system)",,,,,"CCF-1319695, CCF-1526459

Google","This material is based upon work supported by the U.S. National Science Foundation under CCF-1319695 and CCF-1526459, and by a Google Faculty Research Award.",,"Alshahwan, N., Gao, X., Harman, M., Jia, Y., Mao, K., Mols, A., Tei, T., Zorin, I., Deploying search based software engineering with Sapienz at Facebook (2018) SBSE, pp. 3-45; Amalfitano, D., Fasolino, A., Tramontana, P., de Carmine, S., Memon, A., Using GUI ripping for automated testing of Android applications (2012) ASE, pp. 258-261; Amalfitano, D., Fasolino, A., Tramontana, P., Ta, B., Memon, A., MobiGUITAR: automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Anand, S., Naik, M., Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) FSE, pp. 1-11; (2018) Apkpure: Free Apks Online, , https://apkpure.com; Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., McDaniel, P., FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps (2014) PLDI, pp. 259-269; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) OOPSLA, pp. 641-660; Bacon, D., Sweeney, P., Fast static analysis of C++ virtual function calls (1996) OOPSLA, pp. 324-341; Banerjee, A., Roychoudhury, A., Automated re-factoring of Android apps to enhance energy-efficiency (2016) Mobilesoft, pp. 139-150; Banerjee, A., Chong, L., Chattopadhyay, S., Roychoudhury, A., Detecting energy bugs and hotspots in mobile apps (2014) FSE, pp. 588-598; Banerjee, A., Guo, H., Roychoudhury, A., Debugging energy-efficiency related field failures in mobile apps (2016) Mobilesoft, pp. 127-138; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) OOPSLA, pp. 623-640; Choudhary, S., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? (2015) ASE, pp. 429-440; Corral, L., Fronza, I., Better code for better apps: A study on source code quality and market success of Android applications (2015) Mobilesoft, pp. 22-32; Corral, L., Sillitti, A., Succi, G., Defining relevant software quality characteristics from publishing policies of mobile app stores International Conference on Mobile Web and Information Systems, 205; Cruz, L., Abreu, R., Performance-based guidelines for energy efficient mobile applications (2017) Mobilesoft, pp. 46-57; Dean, J., Grove, D., Chambers, C., Optimizations of object-oriented programs using static class hierarchy analysis (1995) ECOOP, pp. 77-101; d’Heureuse, N., Huici, F., Arumaithurai, M., Ahmed, M., Papagiannaki, K., Niccolini, S., What’s app?: a wide-scale measurement study of smart phone markets (2012) ACM SIGMOBILE Mobile Computing and Communications Review, 16 (2), pp. 16-27; Fazzini, M., Freitas, E., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, and running platform independent Android tests (2017) ICST, pp. 149-160; Garcia, J., Hammad, M., Ghorbani, N., Malek, S., Automatic generation of inter-component communication exploits for Android applications (2017) FSE, pp. 661-671; (2017) GATOR: Program Analysis Toolkit for Android, , http://web.cse.ohio-state.edu/presto/software/gator; (2017) Monkey: Ui/Application Exerciser for Android, , http://developer.Android.com/tools/help/monkey.html; (2017) UI Automator Testing Framework, , http://developer.Android.com/training/testing/ui-automator.html; (2018) Android Debug Bridge (Adb, , https://developer.Android.com/studio/command-line/adb; (2018) Android Wear, , http://developer.Android.com/wear; (2018) Best Practices for Accessing and Using Sensors, , https://developer.Android.com/guide/topics/sensors/sensors_overview.html#sensors-practices; (2018) Dumpsys, , https://developer.Android.com/studio/command-line/dumpsys; (2018) Firebase Test Lab Robo Test, , https://firebase.google.com/docs/test-lab/Android/robo-ux-test; (2018) Monkeyrunner, , https://developer.Android.com/studio/test/monkeyrunner; (2018) Optimizing Watch Faces: Move Expensive Operations outside the Drawing Method, , https://developer.Android.com/training/wearables/watch-faces/performance.html#OutDrawing; Grano, G., Ciurumelea, A., Panichella, S., Palomba, F., Gall, H.C., Exploring the integration of user feedback in automated testing of Android applications (2018) SANER, pp. 72-83; Grove, D., Chambers, C., A framework for call graph construction algorithms (2001) TOPLAS, 23 (6), pp. 685-746; Hao, S., Liu, B., Nath, S., Halfond, W., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Mobisys, pp. 204-217; He, X., (2018) Python Wrapper of Android UI Automator Test Tool, , http://github.com/xiaocong/uiautomator; Jabbarvand, R., Malek, S., μ droid: An energy-aware mutation testing framework for Android (2017) FSE, pp. 208-219; Jabbarvand, R., Sadeghi, A., Bagheri, H., Malek, S., Energy-aware test-suite minimization for Android apps (2016) ISSTA, pp. 425-436; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) ISSTA, pp. 67-77; Jiang, H., Yang, H., Qin, S., Su, Z., Zhang, J., Yan, J., Detecting energy bugs in Android apps using static analysis (2017) ICFEM, pp. 192-208; Lhoták, O., (2002) Spark: A Scalable Points-To Analysis Framework for Java, , Master?s thesis, McGill University; Li, L., Bissyandé, T.F., Papadakis, M., Rasthofer, S., Bartel, A., Octeau, D., Klein, J., Traon, L., Static analysis of Android apps: a systematic literature review (2017) IST, 88, pp. 67-95; Li, X., Chang, N., Wang, Y., Huang, H., Pei, Y., Wang, L., Li, X., Atom: Automatic maintenance of GUI test scripts for evolving mobile applications (2017) ICST, pp. 161-171; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing (2017) ICSME, pp. 399-410; Liu, X., Chen, T., Qian, F., Guo, Z., Lin, F.X., Wang, X., Kai, C., Characterizing smartwatch usage in the wild (2017) Mobisys, pp. 385-398; Liu, Y., Xu, C., Cheung, S.C., Where has my battery gone? Finding sensor related energy black holes in smartphone applications (2013) Percom, pp. 2-10; Liu, Y., Xu, C., Cheung, S.C., Lu, J., Greendroid: automated diagnosis of energy inefficiency for smartphone applications (2014) TSE, 40, pp. 911-940; Liu, Y., Xu, C., Cheung, S., Terragni, V., Understanding and detecting wake lock misuses for Android applications (2016) FSE, pp. 296-409; Ma, J., Liu, S., Yue, S., Tao, X., Lu, J., LeakDAF: An automated tool for detecting leaked activities and fragments of Android applications (2017) COMPSAC, pp. 23-32; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) FSE, pp. 224-234; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps (2014) FSE, pp. 599-609; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) ISSTA, pp. 94-105; Mao, K., Harman, M., Jia, Y., Robotic testing of mobile apps for truly black-box automation (2017) IEEE Software, 34 (2), pp. 11-16; Min, C., Kang, S., Yoo, C., Cha, J., Choi, S., Oh, Y., Song, J., Exploring current practices for battery use and management of smartwatches (2015) ISWC, pp. 11-18; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in GUI testing of Android applications (2016) ICSE, pp. 559-570; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing Android application crashes (2016) ICST, pp. 33-44; Pathak, A., Jindal, A., Hu, Y., Midkiff, S., What is keeping my phone awake?: Characterizing and detecting no-sleep energy bugs in smartphone apps (2012) Mobisys, pp. 267-280; Poyraz, E., Memik, G., Analyzing power consumption and characterizing user activities on smartwatches (2016) IISWC, pp. 1-2; Reps, T., Program analysis via graph reachability (1998) IST, 40 (11-12), pp. 701-726; Rountev, A., Yan, D., Static reference analysis for GUI objects in Android software (2014) CGO, pp. 143-153; Ryder, B., Dimensions of precision in reference analysis of object-oriented programming languages (2003) CC, pp. 126-137; Sadeghi, A., Jabbarvand, R., Malek, S., PATDroid: Permission-aware GUI testing of Android (2017) FSE, pp. 220-232; Shivers, O., (1991) Control-Flow Analysis of Higher-Order Languages, , PhD thesis, Carnegie Mellon University; (2018) Jadx: Dex to Java Decompiler, , https://github.com/skylot/jadx; Wang, Y., Zhang, H., Rountev, A., (2016) On the Unsoundness of Static Analysis for Android Guis; Wu, H., Yang, S., Rountev, A., Static detection of energy defect patterns in Android applications (2016) CC, pp. 185-195; Wu, H., Wang, Y., Rountev, A., Sentinel: Generating GUI tests for Android sensor leaks (2018) AST, pp. 27-33; Wu, T., Liu, J., Deng, X., Yan, J., Zhang, J., Relda2: An effective static analysis tool for resource leak detection in Android apps (2016) ASE, pp. 762-767; Yang, S., Yan, D., Wu, H., Wang, Y., Rountev, A., Static control-flow analysis of user-driven callbacks in Android applications (2015) ICSE, pp. 89-99; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for Android (2015) ASE, pp. 658-668; Yang, S., Wu, H., Zhang, H., Wang, Y., Swaminathan, C., Yan, D., Rountev, A., (2018) Static Window Transition Graphs for Android. JASE, pp. 1-41; Yang, W., Prasad, M., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) FASE, pp. 250-265; Zhang, H., Rountev, A., Analysis and testing of notifications in Android Wear applications (2017) ICSE, pp. 64-70; Zhang, H., Wu, H., Rountev, A., Automated test generation for detection of leaks in Android applications (2016) AST, pp. 64-70; Zhang, H., Wu, H., Rountev, A., Detection of energy inefficiencies in Android Wear watch faces (2018) FSE, pp. 691-702","Zhang, H.; Ohio State UniversityUnited States; email: zhang.4858@osu.edu",,,"Springer",,,,,09639314,,,,"English","Softw. Qual. J.",Article,"Final","",Scopus,2-s2.0-85076598199
"Zarubin I., Filinskikh A.","57220746959;57207883769;","Automation of selection of a pool of graphical interface regression tests for multi module information systems",2020,"CEUR Workshop Proceedings","2744",,,"","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85098224364&partnerID=40&md5=b4b809fee3cd8aa487021e0055d4a864","Nizhny Novgorod State Technical University n. a. R.Е. Alexeyev, Nizhny Novgorod, Russian Federation","Zarubin, I., Nizhny Novgorod State Technical University n. a. R.Е. Alexeyev, Nizhny Novgorod, Russian Federation; Filinskikh, A., Nizhny Novgorod State Technical University n. a. R.Е. Alexeyev, Nizhny Novgorod, Russian Federation","Features of using the regression test selection method for automated testing of the graphical user interface in the development of information systems that consist of a set of modules are considered. The source of the need to create additional test environments required in the development of multi-module information systems that are using databases is specified. The three most popular approaches to organizing test environments - Copying, Scaling, and Scaling with synthetic data generation - are considered. The positive and negative sides are considered in terms of implementation, using, and resources spent on creating and maintaining resources, as well as in terms of the reliability of the results obtained in the process of testing models created using these approaches. The positive aspects of checking the quality of complex multi-module information systems from the point of view of the graphical user interface by various testing methods and, in particular, in the process of performing regression testing are presented. The positive aspects of using regression testing automation in conditions of lack of resources using various software platforms are indicated. The advantages of using the dynamic selection method for regression tests for automated testing are also given, as well as recommendations for implementing the selection method in existing and beginning projects. © 2020 for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).","Automated Testing; Graphical User Interface Testing; Regression Testing; Selection of Test Scenarios","Automation; Computer graphics; Computer vision; Graphical user interfaces; Information systems; Information use; Well testing; Automated testing; Dynamic selection; Graphical interface; Regression test selection; Regression testing; Selection methods; Software platforms; Synthetic data generations; Software testing",,,,,"Russian Foundation for Basic Research, РФФИ: 19-07-00926","* Publication is supported by RFBR grant №19-07-00926.",,"Kuznetsov, S.D., Great Russian encyclopedia, , https://bigenc.ru/technology_and_technique/text/3444940, accessed 20-September-2020; Terry, R., O'Connor, R.V., Dorling, A., (2015) An Agile Implementation within a Medical Device Software Organization. Software Process Improvement and Capability Determination. Communications in Computer and Information Science, , Springer; Larman, C., Basili, V.R., Iterative and Incremental Development: A Brief History (2003) Computer; Savin, R., (2017) Testing Dot Com or a Manual on how to abuse bugs in Internet startups, , Delo Moscow; Ambler, S., Lines, M., (2019) Choose Your WoW!: A Disciplined Agile Delivery Handbook for Optimizing Your Way of Working (WoW), , Disciplined Agile, Inc; Yoo, S., Harman, M., (2007) Regression testing minimization, selection and prioritization: A survey, , King`s College London; Hohhof, B., Developing Information System for Competitive Intelligence Support (1994) Intelligent Information, LIBRARY TRENDS, 43 (2); Golze, A., Sarbiewski, M., Zahm, A., (2008) Quality optimization to achieve high business results, , Third edition. Wiley Publishing, Inc., Indianapolis; Duvall, P., Matyas, S., Glover, A., (2008) Continuous Integration: Improving Software Quality and Reducing Risk (The Addison-Wesley Signature Series), , Wiliams; Filinskikh, A. D., Merzlyakov, I. N., Evaluating geometric models based on the structure of their parameters (2015) Information-measuring and control systems Т, 13 (3), pp. 69-74; Richards, M., (2020) Fundamentals of Software Architecture: An Engineering Approach, , O'Reilly Media; Filinskikh, A. D., (2013) The information metric is the transmission and recovery of geometric models in professional software environments, dissertation of the candidate of technical Sciences, Nizhny Novgorod; Colborne, G., (2018) Simple and Usable web, mobile, and interaction design 2nd edition, , New Riders; (2019) Mobile UI/UX Design Notebook: (Yellow) User Interface & User Experience Design Sketchbook for App Designers and Developers - 8.5 x 11, , Mobile Ui/Ux Design Notebook: Independently Published; Weidman, G., (2014) Penetration testing, , starch press. San Francisco; Levin, M. S., (2014) Modular System Design and Evaluation (Decision Engineering), , Springer; Kleppmann, M., (2017) Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems, , O'Reilly Media; Lucsa, M., (2018) Kubernetes in Action, , DMK Press, Moscow; Axelrod, A., (2018) Complete Guide to Test Automation: Techniques, Practices, and Patterns for Building and Maintaining Effective Software Projects, , Apress; Laster, B., (2018) Jenkins 2: Up and Running: Evolve Your Deployment Pipeline for Next Generation Automation, , O'Reilly Media",,"Bykovskii S.Kustarev P.Mouromtsev D.",,"CEUR-WS","30th International Conference on Computer Graphics and Machine Vision, GraphiCon 2020","22 September 2020 through 25 September 2020",,165807,16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85098224364
"Tramontana P., Amatucci N., Fasolino A.R.","8879739800;55843621200;7006159957;","A Technique for Parallel GUI Testing of Android Applications",2020,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","12543 LNCS",,,"169","185",,,"10.1007/978-3-030-64881-7_11","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097830650&doi=10.1007%2f978-3-030-64881-7_11&partnerID=40&md5=170576a2ce5b2459a0e49b533ebbe239","University of Naples “Federico II”, Napoli, Italy","Tramontana, P., University of Naples “Federico II”, Napoli, Italy; Amatucci, N., University of Naples “Federico II”, Napoli, Italy; Fasolino, A.R., University of Naples “Federico II”, Napoli, Italy","There is a large need for effective and efficient testing processes and tools for mobile applications, due to their continuous evolution and to the sensitivity of their users to failures. Industries and researchers focus their effort to the realization of effective fully automatic testing techniques for mobile applications. Many of the proposed testing techniques lack in efficiency because their algorithms cannot be executed in parallel. In particular, Active Learning testing techniques usually relay on sequential algorithms. In this paper we propose a Active Learning technique for the fully automatic exploration and testing of Android applications, that parallelizes and improves a general algorithm proposed in the literature. The novel parallel algorithm has been implemented in the context of a prototype tool exploiting a component-based architecture, and has been experimentally evaluated on 3 open source Android applications by varying different deployment configurations. The measured results have shown the feasibility of the proposed technique and an average saving in testing time between 33% (deploying two testing resources) and about 80% (deploying 12 testing resources). © 2020, IFIP International Federation for Information Processing.",,"Android (operating system); Automatic testing; Learning algorithms; Mobile computing; Open source software; Active Learning; Android applications; Component-based architecture; Measured results; Mobile applications; Sequential algorithm; Testing resources; Testing technique; Software testing",,,,,,,,"Amalfitano, D., Amatucci, N., Memon, A., Tramontana, P., Fasolino, A., A general framework for comparing automatic testing techniques of android mobile apps (2017) J. Syst. Softw., 125, pp. 322-343; Amalfitano, D., Fasolino, A., Tramontana, P., de Carmine, S., Imparato, G., A toolset for gui testing of android applications (2012) IEEE International Conference on Software Maintenance, ICSM, pp. 650-653; Amalfitano, D., Fasolino, A., Tramontana, P., Ta, B., Memon, A., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Softw, 32 (5), pp. 53-59; Amalfitano, D., Fasolino, A.R., Carmine, S.D., Memon, A., Tramontana, P., Using GUI ripping for automated testing of android applications (2012) ASE 2012: Proceedings of the 27Th IEEE International Conference on Automated Software Engineering, , IEEE Computer Society, Washington, DC, USA; Anbunathan, R., Basu, A., Data driven architecture based automated test generation for android mobile (2016) 2015 IEEE International Conference on Computational Intelligence and Computing Research, ICCIC 2015; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) SIGPLAN Not, 48 (10), pp. 641-660; Cao, C., Deng, J., Yu, P., Duan, Z., Ma, X., Paraaim: Testing android applications parallel at activity granularity (2019) IEEE 43Rd Annual Computer Software and Applications Conference (COMPSAC), 1, pp. 81-90. , 2019; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, pp. 623-640. , ACM; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (E) (2015) 2015 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , November; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for android (2013) Proceedings of the 2013 International Conference on Software Engineering, ICSE 2013, pp. 72-81. , IEEE Press, Piscataway, NJ, USA; Griebe, T., Hesenius, M., Gruhn, V., Towards automated UI-tests for sensor-based mobile applications (2015) Commun. Comput. Inf. Sci, 532, pp. 3-17; Gu, T., AimDroid: Activity-insulated multi-level automated testing for android applications (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 103-114; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12Th Annual International Conference on Mobile Systems, Applications, and Services, Mobisys 2014, pp. 204-217. , ACM, New York; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proceedings of the 6Th International Workshop on Automation of Software Test, pp. 77-83; Li, A., Qin, Z., Chen, M., Liu, J., Adautomation: An activity diagram based automated GUI testing framework for smartphone applications (2014) Proceedings-8Th International Conference on Software Security and Reliability, 2014, pp. 68-77. , SERE; Li, X., Jiang, Y., Liu, Y., Xu, C., Ma, X., Lu, J., User guided automation for testing mobile apps (2014) Software Engineering Conference (APSEC), 2014 21St Asia-Pacific, 1, pp. 27-34. , December; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9Th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 224-234. , ACM, New York; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pp. 599-609. , ACM, New York; Majeed, S., Ryu, M., Model-based replay testing for event-driven software (2016) Proceedings of the ACM Symposium on Applied Computing, pp. 1527-1533. , 04–08-April-2016; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25Th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 94-105. , ACM, New York; Meng, Z., Jiang, Y., Xu, C., Facilitating reusable and scalable automated testing and analysis for android apps (2015) Proceedings of the 7Th Asia-Pacific Symposium on Internetware, Internetware 2015, pp. 166-175. , ACM, New York; Nguyen, C., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation (2012) 2012 International Symposium on Software Testing and Analysis, pp. 100-110. , ISSTA 2012-Proceedings; Su, T., FSMdroid: Guided GUI testing of android apps (2016) Proceedings of the 38Th International Conference on Software Engineering Companion, ICSE 2016, pp. 689-691. , ACM, New York; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an android application (2011) Proceedings of the 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation, ICST 2011, pp. 377-386. , IEEE Computer Society, Washington, DC; Tramontana, P., Amalfitano, D., Amatucci, N., Fasolino, A.R., Automated functional testing of mobile applications: A systematic mapping study (2018) Softw. Qual. J., 27 (1), pp. 149-201. , https://doi.org/10.1007/s11219-018-9418-6; Tramontana, P., Amalfitano, D., Amatucci, N., Memon, A., Fasolino, A.R., Developing and evaluating objective termination criteria for random testing (2019) ACM Trans. Softw. Eng. Methodol., 28 (3); Wang, P., Liang, B., You, W., Li, J., Shi, W., Automatic android GUI traversal with high coverage (2014) Proceedings of the 2014 Fourth International Conference on Communication Systems and Network Technologies, CSNT 2014, pp. 1161-1166. , IEEE Computer Society, Washington, DC; Wen, H., Lin, C., Hsieh, T., Yang, C., Pats: A parallel GUI testing framework for android applications (2015) 39Th IEEE Annual Computer Software and Applications Conference, COMPSAC 2015, 2, pp. 210-215. , Taichung, Taiwan, 1–5 July 2015; Zaeem, R.N., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) Proceedings of the 2014 IEEE International Conference on Software Testing, Verification, and Validation, ICST 2014, pp. 183-192. , IEEE Computer Society, Washington, DC; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) J. Syst. Soft., 117, pp. 334-356","Tramontana, P.; University of Naples “Federico II”Italy; email: ptramont@unina.it","Casola V.De Benedictis A.Rak M.",,"Springer Science and Business Media Deutschland GmbH","32nd IFIP WG 6.1 International Conference on Testing Software and Systems, ICTSS 2020","9 December 2020 through 11 December 2020",,252699,03029743,9783030648800,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85097830650
"Ricós F.P., Aho P., Vos T., Boigues I.T., Blasco E.C., Martínez H.M.","57219549886;35188652400;8980537100;57220594023;57220581877;57220584653;","Deploying TESTAR to Enable Remote Testing in an Industrial CI Pipeline: A Case-Based Evaluation",2020,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","12476 LNCS",,,"543","557",,1,"10.1007/978-3-030-61362-4_31","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097442040&doi=10.1007%2f978-3-030-61362-4_31&partnerID=40&md5=be737bbcd41242b4e32c44ca0bfc0c48","Universitat Politècnica de València, Valencia, 46002, Spain; Open Universiteit, Heerlen, Netherlands; Prodevelop, Valencia, Spain","Ricós, F.P., Universitat Politècnica de València, Valencia, 46002, Spain; Aho, P., Open Universiteit, Heerlen, Netherlands; Vos, T., Universitat Politècnica de València, Valencia, 46002, Spain, Open Universiteit, Heerlen, Netherlands; Boigues, I.T., Universitat Politècnica de València, Valencia, 46002, Spain, Open Universiteit, Heerlen, Netherlands, Prodevelop, Valencia, Spain; Blasco, E.C., Universitat Politècnica de València, Valencia, 46002, Spain, Open Universiteit, Heerlen, Netherlands, Prodevelop, Valencia, Spain; Martínez, H.M., Prodevelop, Valencia, Spain","Companies are facing constant pressure towards shorter release cycles while still maintaining a high level of quality. Agile development, continuous integration and testing are commonly used quality assurance techniques applied in industry. Increasing the level of test automation is a key ingredient to address the short release cycles. Testing at the graphical user interface (GUI) level is challenging to automate, and therefore many companies still do this manually. To help find solutions for better GUI test automation, academics are researching scriptless GUI testing to complement the script-based approach. In order to better match industrial problems with academic results, more academia-industry collaborations for case-based evaluations are needed. This paper describes such an initiative to improve, transfer and integrate an academic scriptless GUI testing tool TESTAR into the CI pipeline of a Spanish company Prodevelop. The paper describes the steps taken, the outcome, the challenges, and some lessons learned for successful industry-academia collaboration. © 2020, Springer Nature Switzerland AG.","Automated testing; CI; GUI level; Technology transfer; TESTAR","Formal methods; Graphical user interfaces; Pipelines; Quality assurance; Agile development; Constant pressures; Continuous integrations; Graphical user interfaces (GUI); Industrial problem; Industry collaboration; Release cycles; Test Automation; Integration testing",,,,,,"Acknowledgment. This work has been funded through the ITEA3 TESTOMAT project (www.testomatproject.eu), the EU H2020 DECODER project (www.decoder-project.eu), the EU H2020 iv4XR project (iv4xr-project.eu) and the ITEA3 IVVES project (ivves.weebly.com).",,"Aho, P., Vos, T., Challenges in automated testing through graphical user interface (2018) 2018 IEEE International Conference on Software Testing. Verification and Validation Workshops (ICSTW), pp. 118-121. , IEEE Computer Society, Los Alamitos, April; Aho, P., Vos, T.E.J., Ahonen, S., Piirainen, T., Moilanen, P., Ricos, F.P., Continuous piloting of an open source test automation tool in an industrial environment (2019) Jornadas De Ingeniería Del Software Y Bases De Datos (JISBD), pp. 1-4; Bauersfeld, S., de Rojas, A., Vos, T.E.J., Evaluating rogue user testing in industry: An experience report (2014) 2014 IEEE Eighth International Conference on Research Challenges in Information Science (RCIS), pp. 1-10. , May; Bauersfeld, S., Vos, T.E.J., Condori-Fernández, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2014, p. 4. , Torino, Italy, 18–19 September 2014; Beckman, K., Coulter, N., Khajenoori, S., Mead, N.R., Collaborations: Closing the industry-academia gap (1997) IEEE Softw, 14 (6), pp. 49-57; Coppola, R., Ardito, L., Torchiano, M., Fragility of layout-based and visual GUI test scripts: An assessment study on a hybrid mobile application (2019) Proceedings of the 10Th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, A-TEST 2019, pp. 28-34. , ACM, New York; Chahim, H., Duran, M., Vos, T.E.J., Aho, P., Condori Fernandez, N., Scriptless testing at the GUI level in an industrial setting (2020) RCIS 2020. LNBIP, 385, pp. 267-284. , https://doi.org/10.1007/978-3-030-50316-116, Dalpiaz, F., Zdravkovic, J., Loucopoulos, P. (eds.) , Springer, Cham; Fowler, M., (2006) Continuous Integration, , https://www.martinfowler.com/articles/continuousIntegration.html, Accessed 12 Dec 2019; Martinez, M., Esparcia, A.I., Rueda, U., Vos, T.E.J., Ortega, C., Automated localisation testing in industry with test∗ (2016) ICTSS 2016. LNCS, 9976, pp. 241-248. , https://doi.org/10.1007/978-3-319-47443-417, Wotawa, F., Nica, M., Kushik, N, Springer, Cham; Meyer, M., Continuous integration and its tools (2014) Softw. IEEE, 31, pp. 14-16; O’Connor, R.V., Elger, P., Clarke, P.M., Continuous software engineering: A microservices architecture perspective (2017) J. Softw.: Evol. Process, 29 (11); Rovegard, P., The success factors powering industry-academia collaboration (2012) IEEE Softw, 29 (2), pp. 67-73; Sandberg, A., Pareto, L., Arts, T., Agile collaborative research: Action principles for industry-academia collaboration (2011) IEEE Softw, 28 (4), pp. 74-83; Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TES-TAR: Tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des, 6 (3), pp. 46-83; Wieringa, R., Daneva, M., Six strategies for generalizing software engineering theories (2015) Sci. Comput. Program, 101, pp. 136-152. , Towards general theories of software engineering","Ricós, F.P.; Universitat Politècnica de ValènciaSpain; email: ferpasri@inf.upv.es","Margaria T.Steffen B.",,"Springer Science and Business Media Deutschland GmbH","9th International Symposium on Leveraging Applications of Formal Methods, Verification and Validation, ISoLA 2020","20 October 2020 through 30 October 2020",,250909,03029743,9783030613617,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85097442040
"Oliveira A., Freitas R., Jorge A., Amorim V., Moniz N., Paiva A.C.R., Azevedo P.J.","57220182777;57220187728;55938897400;57220184317;55821255300;7102683763;6701389847;","Sequence Mining for Automatic Generation of Software Tests from GUI Event Traces",2020,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","12490 LNCS",,,"516","523",,,"10.1007/978-3-030-62365-4_49","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097138003&doi=10.1007%2f978-3-030-62365-4_49&partnerID=40&md5=0c2059f0ebd9153142a5f599b290a2b9","LIAAD-INESC TEC, FCUP-University of Porto, Porto, Portugal; RandTech Computing, R&D, Porto, Portugal; INESC TEC, FEUP-University of Porto, Porto, Portugal; INESC TEC, University of Minho, Braga, Portugal","Oliveira, A., LIAAD-INESC TEC, FCUP-University of Porto, Porto, Portugal; Freitas, R., LIAAD-INESC TEC, FCUP-University of Porto, Porto, Portugal; Jorge, A., LIAAD-INESC TEC, FCUP-University of Porto, Porto, Portugal; Amorim, V., RandTech Computing, R&D, Porto, Portugal; Moniz, N., LIAAD-INESC TEC, FCUP-University of Porto, Porto, Portugal; Paiva, A.C.R., INESC TEC, FEUP-University of Porto, Porto, Portugal; Azevedo, P.J., INESC TEC, University of Minho, Braga, Portugal","In today’s software industry, systems are constantly changing. To maintain their quality and to prevent failures at controlled costs is a challenge. One way to foster quality is through thorough and systematic testing. Therefore, the definition of adequate tests is crucial for saving time, cost and effort. This paper presents a framework that generates software test cases automatically based on user interaction data. We propose a data-driven software test generation solution that combines the use of frequent sequence mining and Markov chain modeling. We assess the quality of the generated test cases by empirically evaluating their coverage with respect to observed user interactions and code. We also measure the plausibility of the distribution of the events in the generated test sets using the Kullback-Leibler divergence. © 2020, Springer Nature Switzerland AG.","Data mining; Frequent pattern mining; Markov chains; Software testing","Data mining; Markov chains; Automatic Generation; Frequent sequences; Kullback Leibler divergence; Markov chain models; Software industry; Systematic testing; Test generations; User interaction; Software testing",,,,,"European Commission***Delivered and deleted from Elsevier end because this record is to be no longer updated or in business with Elsevier on Date 10-03-2020***, EC

Fundação para a Ciência e a Tecnologia, FCT

Instituto Nacional de Ciência e Tecnologia para Excitotoxicidade e Neuroproteção, INCT-EN: UIDB/50014/2020

European Regional Development Fund, FEDER","This work is financed by the Northern Regional Operational Program, Portugal 2020 and the European Union, through the European Regional Development Fund (https://www.rtcom.pt/wordpress/rute-randtech-update-and-test-environment/). Also, this work is financed by National Funds through the Portuguese funding agency, FCT-Funda??o para a Ci?ncia e a Tecnologia, within project UIDB/50014/2020.","Acknowledgment. This work is financed by the Northern Regional Operational Program, Portugal 2020 and the European Union, through the European Regional Development Fund (https://www.rtcom.pt/wordpress/rute-randtech-update-and-test-environment/). Also, this work is financed by National Funds through the Portuguese funding agency, FCT - Funda¸cão para a Ciência e a Tecnologia, within project UIDB/50014/2020.","Ajouli, A., Henchiri, K., (2019) MODEM: An UML Profile for Modeling and Predicting Software Maintenance before Implementation, , https://doi.org/10.1109/ICCISci.2019.8716421; Choetkiertikul, M., Dam, H.K., Tran, T., Ghose, A., Predicting delays in software projects using networked classification (T) (2015) 2015 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 353-364. , https://doi.org/10.1109/ASE.2015.55; Grossman, L., (2010) Metric Math Mistake Muffed Mars Meteorology Mission, , https://www.wired.com/2010/11/1110mars-climate-observer-report/; Kelion, L., Fatal a400m crash linked to data-wipe mistake (2015) BBC, , https://www.bbc.com/news/technology-33078767; Babar, M.A., Brown, A.W., Mistrik, I., (2013) Agile Software Architecture: Aligning Agile Processes and Software Architectures, , 1st edn. Morgan Kaufmann Publishers Inc., San Francisco; Florea, R., Stray, V., The skills that employers look for in software testers (2019) Softw. Qual. J., 27, pp. 1449-1479; Anderson, B., Best Automation Testing Tools for 2019 (Top10 Reviews), , https://medium.com, October 2017; Last, M., Friedman, M., Kandel, A., Using data mining for automated software testing (2004) Int. J. Software Eng. Knowl. Eng., 14 (4), pp. 369-393. , https://doi.org/10.1142/S0218194004001737; Giudice, D.L., (2016) How AI Will Change Software Development and Applications Key Takeaways; Isabella, A., Retna, E., Study paper on test case generation for GUI based testing (2012) Corr, Vol. Abs/1202, p. 4527. , http://arxiv.org/abs/1202.4527; Conroy, K., Grechanik, M., Hellige, M., Liongosari, E., Xie, Q., (2007) Automatic Test Generation from GUI Applications for Testing Web Services, pp. 345-354. , October; Zhou, K., Wang, X., Hou, G., Wang, J., Ai, S., Software reliability test based on Markov usage model (2012) JSW, 7 (9), pp. 2061-2068. , https://doi.org/10.4304/jsw.7.9.2061-2068; Fournier-Viger, P., Gomariz, A., Campos, M., Thomas, R., Fast Vertical Mining of Sequential Patterns Using Co-Occurrence Information, , May 2014; Ayres, J., Flannick, J., Gehrke, J., Yiu, T., Sequential Pattern Mining Using a Bitmap Representation, , July 2002; Gutjahr, W.J., Software dependability evaluation based on Markov usage models (2000) Perform. Eval., 40 (4), pp. 199-222. , https://doi.org/10.1016/S0166-5316(99)00052-8; Kullback, S., (1959) Information Theory and Statistics, , Wiley, New York","Oliveira, A.; LIAAD-INESC TEC, Portugal; email: alberto.p.oliveira@inesctec.pt","Analide C.Novais P.Camacho D.Yin H.",,"Springer Science and Business Media Deutschland GmbH","21th International Conference on Intelligent Data Engineering and Automated Learning, IDEAL 2020","4 November 2020 through 6 November 2020",,251049,03029743,9783030623647,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85097138003
"Ardito L., Coppola R., Leonardi S., Morisio M., Buy U.","36184897700;57191261885;57216288391;6701428565;6603047581;","Automated Test Selection for Android Apps Based on APK and Activity Classification",2020,"IEEE Access","8",, 3029735,"187648","187670",,,"10.1109/ACCESS.2020.3029735","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095454300&doi=10.1109%2fACCESS.2020.3029735&partnerID=40&md5=b7127b4d65d05a3cf405a38eb82e9d23","Department of Control and Computer Engineering, Politecnico di Torino, Turin, 10138, Italy; Department of Computer Science, University of Illinois at Chicago, Chicago, IL  60607, United States","Ardito, L., Department of Control and Computer Engineering, Politecnico di Torino, Turin, 10138, Italy; Coppola, R., Department of Control and Computer Engineering, Politecnico di Torino, Turin, 10138, Italy; Leonardi, S., Department of Control and Computer Engineering, Politecnico di Torino, Turin, 10138, Italy; Morisio, M., Department of Control and Computer Engineering, Politecnico di Torino, Turin, 10138, Italy; Buy, U., Department of Computer Science, University of Illinois at Chicago, Chicago, IL  60607, United States","Several techniques exist for mobile test automation, from script-based techniques to automated test generation based on GUI models. Most techniques fall short in being adopted extensively by practitioners because of the very costly definition (and maintenance) of test cases. We present a novel testing framework for Android apps that allows a developer to write effective test scripts without having to know the implementation details and the user interface of the app under test. The main goal of the framework is to generate adaptive tests that can be executed on a significant number of apps, or different releases of the same app, without manual editing of the tests. The frameworks consists of: (1) a Test Scripting Language, that allows the tester to write generic test scripts tailored to activity and app categories; (2) a State Graph Modeler, that creates a model of the app's GUI, identifying activities (i.e., screens) and widgets; (3) an app classifier that determines the type of application under test; (4) an activity classifier that determines the purpose of each screen; (5) a test adapter that executes test scripts that are compatible with the specific app and activity, automatically tailoring the test scripts to the classes of the app and the activities under test. We evaluated empirically the components of our testing framework. The classifiers were able to outperform available approaches in the literature. The developed testing frameworkwas able to correctly adapt high-level test cases to 28 out of 32 applications, and to reduce the LOCs of the test scripts of around 90%.We conclude that machine learning can be fruitfully applied to the creation of high-level, adaptive test cases for Android apps. Our framework is modular in nature and allows expansions through the addition of new commands to be executed on the classified apps and activities. © 2020 BMJ Publishing Group. All rights reserved.",,"Automation; Graphical user interfaces; Modeling languages; Testing; Activity classifications; Adaptive test case; Adaptive tests; Application under tests; Automated test; Automated test generations; Scripting languages; Testing framework; Android (operating system)",,,,,,,,"Li, X., Chang, N., Wang, Y., Huang, H., Pei, Y., Wang, L., Li, X., ATOM: Automatic maintenance of GUI test scripts for evolving mobile applications (2017) Proc Ieee Int. Conf. Softw. Test., Verification Validation (ICST), pp. 161-171. , Mar; Chang, N., Wang, L., Pei, Y., Mondal, S.K., Li, X., Change-based test script maintenance for Android apps (2018) Proc Ieee Int. Conf. Softw. Qual., Rel. Secur. (QRS), pp. 215-225. , Jul; Coppola, R., Morisio, M., Torchiano, M., Ardito, L., Scripted GUI testing of Android open-source apps: Evolution of test code and fragility causes Empirical Softw. Eng, 24, pp. 3205-3248. , May 2019; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) Proc Ieee 8th Int. Conf. Softw. Test., Verification Validation (ICST), pp. 1-10. , Apr; Linares-Vasquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing Proc Ieee Int. Conf. Softw. Maintenance Evol. (ICSME), 2017, pp. 399-410. , Sep; Rimawi, D., Zein, S., A model based approach for Android design patterns detection Proc. 3rd Int. Symp. Multidisciplinary Stud. Innov. Technol. (ISMSIT), 2019, pp. 1-10. , Oct; Hamedani, M.R., Shin, D., Lee, M., Cho, S.-J., Hwang, C., AndroClass: An effective method to classify Android applications by applying deep neural networks to comprehensive features (2018) Wireless Commun. Mobile Comput, 2018, pp. 1-21. , Sep; Dong, F., Guo, Y., Li, C., Xu, G., Wei, F., ClassifyDroid: Large scale Android applications classification using semi-supervised multinomial Naive Bayes Proc. 4th Int. Conf. Cloud Comput. Intell. Syst. (CCIS), 2016, pp. 77-81. , Aug; Singh, S., Gadgil, R., Chudgor, A., Automated testing of mobile applications using scripting technique:Astudy on Appium (2014) Int. J. Current Eng. Technol, 4 (5), pp. 3627-3630; Negara, S., Esfahani, N., Buse, R., Practical Android test recording with espresso test recorder Proc IEEE/ACM 41st Int. Conf. Softw. Eng., Softw. Eng. Pract. (ICSE-SEIP, pp. 193-202. , Piscataway, NJ, USA: IEEE Press, May 2019; Espresso, , https://developer.android.com/training/testing/espresso, Accessed: Jan 14 2020; Uiautomator, , https://developer.android.com/training/testing/ui-Automator, Accessed: Jan 14 2020; Kulkarni, M.K., Soumya, A., Deployment of calabash automation framework to analyze the performance of an Android application (2016) J. Res, 2 (3), pp. 1-6; Jain, A., Jain, M., Dhankar, S., A comparison of ranorex and qtp automated testing tools and their impact on software testing (2014) Ijems, 1 (1), pp. 8-12; Sadeh, B., Ørbekk, K., Eide, M.M., Gjerde, N.C., Tønnesland, T.A., Gopalakrishnan, S., Towards unit testing of user interface code for Android mobile applications (2011) Proc. Int. Conf. Softw. Eng. Comput. Syst, pp. 163-175. , Berlin, Germany Springer; Zadgaonkar, H., (2013) Robotium Automated Testing for Android, , Birmingham, U.K.: Packt Publishing Ltd; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timingand touch-sensitive record and replay for Android (2013) Proc. 35th Int. Conf. Softw. Eng. ICSE, pp. 72-81. , Piscataway, NJ, USA IEEE Press May; Fazzini, M., Freitas, E.N.D.A., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, and running platform independent Android tests (2017) Proc Ieee Int. Conf. Softw. Test., Verification Validation (ICST), pp. 149-160. , Mar; Ui Application Exerciser Monkey, , https://developer.android.com/studio/-Test/monkey, Accessed: Jan 14 2020; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proc. 9th Joint Meeting Found. Softw. Eng. (ESEC/FSE, pp. 224-234; Zhu, H., Ye, X., Zhang, X., Shen, K., A context-Aware approach for dynamic GUI testing of Android applications (2015) Proc Ieee 39th Annu. Comput. Softw. Appl. Conf, 2, pp. 248-253. , Jul; Amaltano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) Ieee Softw, 32 (5), pp. 53-59. , Sep; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Proc Acm Sigplan Int. Conf. Object Oriented Program. Syst. Lang. Appl. (OOPSLA, 48, pp. 641-660; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) Proc Acm Sigplan Int. Conf. Object Oriented Program. Syst. Lang. Appl. (OOPSLA, 48, pp. 623-640; Zaeem, R.N., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) Proc Ieee 7th Int. Conf. Softw. Test., Verification Validation, pp. 183-192. , Mar; Amaltano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of Android applications (2012) Proc. 28th Ieee Int. Conf. Softw. Maintenance (ICSM), pp. 650-653. , Sep; Amaltano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) Proc Ieee 6th Int. Conf. Softw. Test., Verification Validation Workshops, pp. 126-133. , Mar; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., CrashScope: A practical tool for automated testing of Android applications Proc IEEE/ACM 39th Int. Conf. Softw. Eng. Companion (ICSE-C), pp. 15-18. , May 2017; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps (2014) Proc. 22nd Acm Sigsoft Int. Symp. Found. Softw. Eng. (FSE, pp. 599-609; Yang, C.-Z., Tu, M.-H., Lacta: An enhanced automatic software categorization on the native code of Android applications (2012) Proc. Int. Multiconf. Eng. Comput. Scientists, in Lecture Notes in Engineering and Computer Science, 2195, pp. 769-773. , Hong Kong: Newswood Limited Mar; Rosenfeld, A., Kardashov, O., Zang, O., (2017) Automation of Android Applications Testing Using Machine Learning Activities Classification, , http://arxiv.org/abs/1709.00928, arXiv:1709 00928; Hu, G., Zhu, L., Yang, J., AppFlow: Using machine learning to synthesize robust, reusable UI tests (2018) Proc. 26th Acm Joint Meeting Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng. ESEC/FSE, p. 269. , New York, NY, USA: Association Computing Machinery; Yang, C.-Z., Tu, M.-H., Lacta: An enhanced automatic software categorization on the native code of Android applications (2012) Proc. Int. Multiconf. Eng. Comput. Scientists (IMECS, 1, pp. 1-5; Parr, T., Fisher, K., LL the foundation of the ANTLR parser generator (2011) Acm Sigplan Notices, 46 (6), pp. 425-436; Kong, P., Li, L., Gao, J., Liu, K., Bissyande, T.F., Klein, J., Automated testing of Android apps: A systematic literature review Ieee Trans. Rel, 68 (1), pp. 45-66. , Mar. 2019; Cardone, A., (2019) Machine Learning Methods for Adaptive Test Case Generation for Android Activities, , M.S.Thesis, Dept. Comput. Sci., Univ. Illinois Chicago, Chicago IL, USA","LEONARDI, S.; Department of Control and Computer Engineering, Italy; email: simone.leonardi@polito.it",,,"Institute of Electrical and Electronics Engineers Inc.",,,,,21693536,,,,"English","IEEE Access",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85095454300
"Di Martino S., Fasolino A.R., Starace L.L.L., Tramontana P.","9640416000;7006159957;57211982059;8879739800;","Comparing the effectiveness of capture and replay against automatic input generation for Android graphical user interface testing",2020,"Software Testing Verification and Reliability",,,,"","",,1,"10.1002/stvr.1754","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092584947&doi=10.1002%2fstvr.1754&partnerID=40&md5=9174a61f472fa04e3a91d67f023da6b6","Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, Italy","Di Martino, S., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, Italy; Fasolino, A.R., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, Italy; Starace, L.L.L., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, Italy; Tramontana, P., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, Italy","Exploratory testing and fully automated testing tools represent two viable and cheap alternatives to traditional test-case-based approaches for graphical user interface (GUI) testing of Android apps. The former can be executed by capture and replay tools that directly translate execution scenarios registered by testers in test cases, without requiring preliminary test-case design and advanced programming/testing skills. The latter tools are able to test Android GUIs without tester intervention. Even if these two strategies are widely employed, to the best of our knowledge, no empirical investigation has been performed to compare their performance and obtain useful insights for a project manager to establish an effective testing strategy. In this paper, we present two experiments we carried out to compare the effectiveness of exploratory testing approaches using a capture and replay tool (Robotium Recorder) against three freely available automatic testing tools (AndroidRipper, Sapienz, and Google Robo). The first experiment involved 20 computer engineering students who were asked to record testing executions, under strict temporal limits and no access to the source code. Results were slightly better than those of fully automated tools, but not in a conclusive way. In the second experiment, the same students were asked to improve the achieved testing coverage by exploiting the source code and the coverage obtained in the previous tests, without strict temporal constraints. The results of this second experiment showed that students outperformed the automated tools especially for long/complex execution scenarios. The obtained findings provide useful indications for deciding testing strategies that combine manual exploratory testing and automated testing. © 2020 John Wiley & Sons, Ltd.","Android app testing; automatic input generation; capture and replay; GUI testing; testing effectiveness","Automatic testing; Automation; Codes (symbols); Graphical user interfaces; Students; Automated testing; Computer engineering; Empirical investigation; Execution scenario; Exploratory testing; Graphical user interfaces (GUI); Temporal constraints; Testing strategies; Android (operating system)",,,,,,,,"(2018) Newzoo. Global Mobile Market Report, 2018. , https://newzoo.com/insights/trend-reports/newzoo-global-mobile-market-report-2018-light-version/; Mobile Operating System Market Share Worldwide, , http://gs.statcounter.com/os-market-share/mobile/worldwide; Choudhary, S.R., Gorla, A., Orso, A., (2015) Automated test input generation for Android: are we there yet?(e), pp. 429-440. , https://doi.org/10.1109/ASE.2015.89, 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), IEEE; Khalid, H., Shihab, E., Nagappan, M., Hassan, A., What do mobile app users complain about? (2015) IEEE Software, 32 (3), pp. 70-77; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Automatic testing of GUI-based applications (2014) Software Testing Verification and Reliability, 24 (5), pp. 341-366; Mendez-Porras, A., Quesada-Lopez, C., Jenkins, M., Automated testing of mobile applications: a systematic map and review (2015) XVIII Ibero-American Conference on Software Engineering, pp. 195-208. , UCSP, Lima-Peru; Sahinoglu, M., Incki, K., Aktas, M.S., Mobile application verification: a systematic mapping study (2015) Computational Science and Its Applications—ICCSA 2015: 15th International Conference, Banff, AB, Canada, June 22–25, 2015, Proceedings, Part v, pp. 147-163. , https://doi.org/10.1007/978-3-319-21413-9_11, Springer International Publishing, Cham; Tramontana, P., Amalfitano, D., Amatucci, N., Fasolino, A.R., Automated functional testing of mobile applications: a systematic mapping study (2019) Software Quality Journal, 27 (1), pp. 149-201. , https://doi.org/10.1007/s11219-018-9418-6, 1573-1367; Kaner, C., (2008) A tutorial in exploratory testing, , https://www.kaner.com/pdfs/QAIExploring.pdf; Bach, J., The testing practitioner (2004) Exploratory Testing, pp. 253-265. , van Veenendaal E, (ed.)., UTN Publishers; Itkonen, J., Mäntylä, M.V., Lassenius, C., The role of the tester's knowledge in exploratory software testing (2013) IEEE Transactions on Software Engineering, 39 (5), pp. 707-724. , https://doi.org/10.1109/TSE.2012.55, 2326-3881; Gomez, L., Neamtiu, L., Azim, T., Millstein, T., Reran: timing-and touch-sensitive record and replay for Android (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 72-81. , https://dx.doi.org/10.1109/ICSE.2013.6606553, IEEE Press; Hu, Y., Azim, T., Neamtiu, I., Versatile yet lightweight record-and-replay for Android (2015) ACM SIGPLAN Notices, 50 (10), pp. 349-366; Robotium: User Scenario Testing for Android—GitHub Repository, , https://github.com/RobotiumTech/robotium; Create UI Tests with Espresso Test Recorder, , https://developer.android.com/studio/test/espresso-test-recorder; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., Fasolino, A.R., A general framework for comparing automatic testing techniques of Android mobile apps (2017) Journal of Systems and Software, 125, pp. 322-343. , https://dx.doi.org/10.1016/j.jss.2016.12.017; Mao, K., Harman, M., Jia, Y., Sapienz: multi-objective automated testing for Android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 94-105. , ACM; Lam, W., Wu, Z., Li, D., Record and replay for Android: are we there yet in industrial cases? (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 854-859. , ACM; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , https://doi.org/10.1145/2351676.2351717, ACM; Firebase Test Lab Robo Test, , https://firebase.google.com/docs/test-lab/android/robo-ux-test; Alégroth, E., Gao, Z., Oliveira, R., Memon, A., (2015) Conceptualization and evaluation of component-based testing unified with visual GUI testing: an empirical study, pp. 1-10. , 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), IEEE; Ardito, L., Coppola, R., Morisio, M., Torchiano, M., Espresso vs. eyeautomate: an experiment for the comparison of two generations of Android GUI testing (2019) Proceedings of the Evaluation and Assessment on Software Engineering, pp. 13-22. , ACM; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Approaches and tools for automated end-to-end web testing (2016) Advances in Computers, 101, pp. 193-237. , Elsevier; Appetizer Replaykit-Github Repository, , https://github.com/appetizerio/replaykit, visited on 05/09/2019; Sahin, O., Aliyeva, A., Mathavan, H., Coskun, A., Egele, M., Towards practical record and replay for mobile applications (2019) Proceedings of the 56th Annual Design Automation Conference 2019, pp. 230:1-230:2. , http://doi.acm.org/10.1145/3316781.3322476, DAC '19, ACM, New York, NY, USA; Halpern, M., Zhu, Y., Peri, R., Reddi, V.J., Mosaic: cross-platform user-interaction record and replay for the fragmented Android ecosystem (2015) 2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS), pp. 215-224; Moran, K., Bonett, R., Bernal-Cárdenas, C., Otten, B., Park, D., Poshyvanyk, D., (2017) On-device bug reporting for Android applications, pp. 215-216. , http://doi.acm.org/10.1109/MOBILESoft.2017.36, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft); Fazzini, M., Freitas, E.N.D.A., Choudhary, S.R., Orso, A., (2017) Barista: a technique for recording, encoding, and running platform independent Android tests, pp. 149-160. , https://doi.org/10.1109/ICST.2017.21, 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST); Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 1535-1544. , ACM; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192. , ACM; Moreira, R.M.L.M., Paiva, A.C., Nabuco, M., Memon, A.J., Pattern-based GUI testing: bridging the gap between design and quality assurance (2017) Software Testing Verification and Reliability, 27 (3); Walsh, T.A., Kapfhammer, G.M., McMinn, P., Automatically identifying potential regressions in the layout of responsive web pages (2020) Software Testing Verification and Reliability, 30 (6); Linares-Vásquez, M., Moran, K., Poshyvanyk, D., (2017) Continuous, evolutionary and large-scale: a new perspective for automated mobile app testing, pp. 399-410. , 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME), IEEE; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., (2014) Visual vs. Dom-based web locators: an empirical study, pp. 322-340. , International Conference on Web Engineering, Springer; Garousi, V., Afzal, W., Cauglar, A., Comparing automated visual GUI testing tools: an industrial case study (2017) Proceedings of the 8th ACM SIGSOFT International Workshop on Automated Software Testing, pp. 21-28. , http://doi.acm.org/10.1145/3121245.3121250, A-TEST 2017, ACM, New York, NY, USA; Kong, P., Li, L., Gao, K., Bissyandé, T.F., Klein, J., Automated testing of Android apps: a systematic literature review (2019) IEEE Transactions on Reliability, 68 (1), pp. 45-66. , https://doi.org/10.1109/TR.2018.2865733, 1558-1721; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) Journal of Systems and Software, 117 (C), pp. 334-356. , https://doi.org/10.1016/j.jss.2016.03.065, 0164-1212; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., (2012) A toolset for GUI testing of Android applications, pp. 650-653. , https://doi.org/10.1109/ICSM.2012.6405345; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: an input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , ACM; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) SIGPLAN Not., 48 (10), pp. 641-660. , https://doi.org/10.1145/2544173.2509549, 0362-1340; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, pp. 623-640. , ACM; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., (2013) Capture-replay vs. programmable web testing: an empirical assessment during test case evolution, pp. 272-281. , 2013 20th Working Conference on Reverse Engineering (WCRE), IEEE; Mohammed, M., Cai, H., Meng, N., An empirical comparison between monkey testing and human testing (WIP paper) (2019) Proceedings of the 20th ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems, pp. 188-192. , http://doi.acm.org/10.1145/3316482.3326342, LCTES 2019; Mao, K., Harman, M., Jia, Y., (2017) Crowd intelligence enhances automated mobile testing, pp. 16-26. , https://doi.org/10.1109/ASE.2017.8115614, 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE); Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., (2015) Understanding the test automation culture of app developers, pp. 1-10. , 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), IEEE; Anbunathan, R., Basu, A., (2015) A recursive crawler algorithm to detect crash in Android application, pp. 256-267; Li, Y., Yang, Z., Guo, Y., Chen, X., Droidbot: a lightweight UI-guided test input generator for Android (2017) Proceedings of the 39th International Conference on Software Engineering Companion, pp. 23-26. , https://doi.org/10.1109/ICSE-C.2017.8, ICSE-C '17, IEEE Press, Piscataway, NJ, USA; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., (2016) Automatically discovering, reporting and reproducing Android application crashes, pp. 33-44. , 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), IEEE; Salihu, I.A., Ibrahim, R., Systematic exploration of Android apps' events for automated testing (2016) Proceedings of the 14th International Conference on Advances in Mobile Computing and Multi Media, pp. 50-54. , MoMM '16, ACM, New York, NY, USA; F-droid—free and Open Source Android App Repository, , https://f-droid.org/; Emma Reference Manual, , http://emma.sourceforge.net/reference:single/reference.html; Munchlife: A Munchkin Level Counter for Android—GitHub Repository, , https://github.com/averyada/MunchLife; Simply do—f-droid, , https://f-droid.org/en/packages/kdk.android.simplydo/; Tippy, T., (Tip Calculator)—Github Repository, , https://github.com/mandlar/tippytipper; Amalfitano, D., Riccio, V., Paiva, A.C.R., Fasolino, A.R., Why does the orientation change mess up my Android application? From GUI failures to code faults (2018) Software Testing, Verification and Reliability, 28 (1). , https://onlinelibrary.wiley.com/doi/abs/10.1002/stvr.1654; Coppola, R., Morisio, M., Torchiano, M., Mobile GUI testing fragility: a study on open-source Android applications (2019) IEEE Transactions on Reliability, 68 (1), pp. 67-90; Wohlin, C., Runeson, P., Host, M., Ohlsson, M.C., Regnell, B., Wesslen, A., (2012) Experimentation in Software Engineering, , Springer; Carver, J., Jaccheri, L., Morasca, S., Shull, F., Issues in using students in empirical studies in software engineering education (2003) Proceedings of the 5th International Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. no. 03ex717), pp. 239-249. , https://doi.org/10.1109/METRIC.2003.1232471; Ciolkowski, M., Muthig, D., Rech, J., Using academic courses for empirical validation of software development processes (2004) Proceedings of the 30th Euromicro Conference, 2004, pp. 354-361. , https://doi.org/10.1109/EURMIC.2004.1333390; Host, M., Regnell, B., Wohlin, C., Using students as subjects a comparative study of students and professionals in lead-time impact assessment (2000) Empirical Software Engineering, 5 (3), pp. 201-214; Salman, I., Misirli, A.T., Juristo, N., (2015) Are students representatives of professionals in software engineering experiments?, 1, pp. 666-676. , 2015 IEEE/ACM 37th Ieee International Conference on Software Engineering, IEEE","Tramontana, P.; Department of Electrical Engineering and Information Technologies, Via Claudio 21, Italy; email: ptramont@unina.it",,,"John Wiley and Sons Ltd",,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Conference Paper,"Article in Press","",Scopus,2-s2.0-85092584947
"Koroglu Y., Sen A.","57189759429;36467092300;","Functional test generation from UI test scenarios using reinforcement learning for android applications",2020,"Software Testing Verification and Reliability",,,,"","",,,"10.1002/stvr.1752","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092015479&doi=10.1002%2fstvr.1752&partnerID=40&md5=f43056f29da7195d72ff0e731caf5989","Department of Computer Engineering, Bogazici University, Istanbul, Turkey","Koroglu, Y., Department of Computer Engineering, Bogazici University, Istanbul, Turkey; Sen, A., Department of Computer Engineering, Bogazici University, Istanbul, Turkey","With the ever-growing Android graphical user interface (GUI) application market, there have been many studies on automated test generation for Android GUI applications. These studies successfully demonstrate how to detect fatal exceptions and achieve high coverage with fully automated test generation engines. However, it is unclear how many GUI functions these engines manage to test. The current best practice for the functional testing of Android GUI applications is to design user interface (UI) test scenarios with a non-technical and human-readable language such as Gherkin and implement Java/Kotlin methods for every statement of all the UI test scenarios. Writing tests for UI test scenarios is hard, especially when some scenario statements are high-level and declarative, so it is not clear what actions should the generated test perform. We propose the Fully Automated Reinforcement LEArning-Driven specification-based test generator for Android (FARLEAD-Android). FARLEAD-Android first translates the UI test scenario to a GUI-level formal specification as a linear-time temporal logic (LTL) formula. The LTL formula guides the test generation and acts as a specified test oracle. By dynamically executing the application under test (AUT), and monitoring the LTL formula, FARLEAD-Android learns how to produce a witness for the UI test scenario, using reinforcement learning (RL). Our evaluation shows that FARLEAD-Android is more effective and achieves higher performance in generating tests for UI test scenarios than three known engines: Random, Monkey and QBEa. To the best of our knowledge, FARLEAD-Android is the first fully automated mobile GUI testing engine that uses formal specifications. © 2020 John Wiley & Sons, Ltd.","mobile applications; reinforcement learning; software testing; temporal logic; test oracles; test scenarios","Android (operating system); Automation; Engines; Formal specification; Graphical user interfaces; Reinforcement learning; Temporal logic; Android applications; Application under tests; Automated test generations; Functional test generation; Functional testing; Graphical user interfaces (GUI); Linear time temporal logic; Test generations; Testing",,,,,"16201","This research was supported in part by Bogazici University Research Fund Grant 16201.",,"Piejko, P., (2016) 16 mobile market statistics you should know in 2016, , https://deviceatlas.com/blog/16-mobile-market-statistics-you-should-know-2016; Bolton, D., (2017) 88 percent of people will abandon an app because of bugs, , https://www.applause.com/blog/app-abandonment-bug-testing; (2018) Market share: final pcs, ultramobiles and mobile phones, all countries, 4q17 update; https://en.wikipedia.org/wiki/GooglePlay; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM Sigsoft 20th International Symposium on the Foundations of Software Engineering (FSE), , https://github.com/saswatanand/acteve, Cary, USA; Azim, T., Neamtiu, I., (2013) Targeted and depth-first exploration for systematic testing of android apps, pp. 641-660. , ACM Sigplan International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA), Indianapolis, Indiana, USA; Cao, C., Deng, J., Yu, P., Duan, Z., Ma, X., (2019) Paraaim: testing android applications parallel at activity granularity, , 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC), Milwaukee, Wisconsin, USA; Cao, Y., Wu, G., Chen, W., Wei, J., (2018) Crawldroid: effective model-based GUI testing of android apps, pp. 1-6. , https://github.com/sy1121/CrawlDroid, Tenth Asia-Pacific Symposium on Internetware, Beijing, China; Choi, W., SwiftHand2: Android GUI testing framework, , https://github.com/wtchoi/swifthand2; Choi, W., Necula, G., Sen, K., (2013) Guided GUI testing of android apps with minimal restart and approximate learning, pp. 623-640. , Acm Sigplan International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA), Indianapolis Indiana, USA; Eler, M.M., Rojas, J.M., Ge, Y., Fraser, G., (2018) Automated accessibility testing of mobile apps, pp. 116-126. , 2018 ieee 11th International Conference on Software Testing, Verification and Validation (ICST), Vasteras, Sweden; Android Ui/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., (2014) PUMA: programmable UI-automation for large-scale dynamic Analysis of Mobile Apps, pp. 204-217. , 12th Annual International Conference on Mobile Systems, ApplicationsServices (MOBISYS), Bretton Woods, NH, USA; Koroglu, Y., Sen, A., (2018) TCM: test case mutation to improve crash detection in android, pp. 264-280. , International Conference on Fundamental Approaches to Software Engineering, Cham; Koroglu, Y., Sen, A., Muslu, O., Mete, Y., Ulker, C., Tanriverdi, T., Donmez, Y., (2018) QBE: QLearning-based exploration of android applications, pp. 105-115. , IEEE International Conference on Software Testing, Verification and Validation (ICST), Vasteras, Sweden; Li, Y., Yang, Z., Guo, Y., Chen, X., (2017) Droidbot: a lightweight UI-guided test input generator for android, pp. 23-26. , https://github.com/honeynet/droidbot, 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C), Buenos Aires, Argentina; Linares-Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., (2015) Mining android app usages for generating actionable GUI-based execution scenarios, pp. 111-122. , 12th Working Conference on Mining Software Repositories (MSR), Florence, Italy; Liu, Y., Xu, C., Cheung, S.-C., Lu, J., Greendroid: automated diagnosis of energy inefficiency for smartphone applications (2014) IEEE Transactions on Software Engineering, 40, pp. 911-940; Machiry, A., Tahiliani, R., Naik, M., (2013) Dynodroid: an input generation system for android apps, pp. 224-234. , https://dynodroid.github.io, 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE), Saint Petersburg, Russia; Mahmood, R., Mirzaei, N., Malek, S., (2014) EvoDroid: segmented evolutionary testing of android apps, pp. 599-609. , 22nd ACM Sigsoft International Symposium on Foundations of Software Engineering (FSE), Hong Kong, China; Mao, K., Harman, M., Jia, Y., (2016) Sapienz: multi-objective automated testing for android applications, pp. 94-105. , 25th International Symposium on Software Testing and Analysis (ISSTA), Saarland University, Saarbrücken, Germany; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., (2016) Reducing combinatorics in GUI testing of android applications, pp. 559-570. , 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), IEEE, Austin, TX, USA; Moran, K., Vásquez, M.L., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., (2016) Automatically discovering, reporting and reproducing android application crashes, pp. 33-44. , https://www.android-dev-tools.com/crashscope-home, IEEE International Conference on Software Testing, Verification and Validation (ICST), Chicago, IL, USA; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 245-256. , https://tingsu.github.io/files/stoat.html; Yan, J., Pan, L., Li, Y., Yan, J., Zhang, J., Land: a user-friendly and customizable test generation tool for android apps (2018) Proceedings of the 27th ACM Sigsoft International Symposium on Software Testing and Analysis (ISSTA), pp. 360-363. , Amsterdam, Netherlands; Yang, W., Prasad, M.R., Xie, T., (2013) A grey-box approach for automated GUI-model generation of mobile applications, pp. 250-265. , 16th International Conference on Fundamental Approaches to Software Engineering (FASE), Berlin, Heidelberg; Zaeem, R.N., Prasad, M.R., Khurshid, S., (2014) Automated generation of oracles for testing user-interaction features of mobile apps, pp. 183-192. , IEEE International Conference on Software Testing, VerificationValidation (ICST), Cleveland, OH, USA; Gherkin language, , https://en.wikipedia.org/wiki/Cucumber{_}(software){\#}Gherkin{_}language; Barr, E.T., Harman, M., McMinn, P., Shahbaz, M., Yoo, S., The oracle problem in software testing: a survey (2014) IEEE Transactions on Software Engineering, 41 (5), pp. 507-525; Mao, H., Alizadeh, M., Menache, I., Kandula, S., Resource management with deep reinforcement learning (2016) Proceedings of the 15th ACM Workshop on Hot Topics in Networks, pp. 50-56. , ACM, Atlanta, GA, USA; Arel, I., Liu, C., Urbanik, T., Kohls, A.G., Reinforcement learning-based multi-agent system for network traffic signal control (2010) IET Intelligent Transport Systems, 4 (2), pp. 128-135; Silver, D., Hubert, T., Schrittwieser, J., Antonoglou, I., Lai, M., Guez, A., Lanctot, M., Lillicrap, T., (2017) Mastering chess and shogi by self-play with a general reinforcement learning algorithm, , arXiv preprint; Mnih, V., Kavukcuoglu, K., Silver, D., Graves, A., Antonoglou, I., Wierstra, D., Riedmiller, M., (2013) Playing Atari with deep reinforcement learning, , arXiv preprint; Zhou, Z., Li, X., Zare, R.N., Optimizing chemical reactions with deep reinforcement learning (2017) ACS Central Science, 3 (12), pp. 1337-1344; Sutton, R.S., Barto, A.G., (2018) Reinforcement learning: an introduction, , 2nd ed, The MIT Press, One Rogers Street Cambridge, MA 02142-1209,USA; Drugan, M., Reinforcement learning versus evolutionary computation: a survey on hybrid algorithms (2018) Swarm and Evolutionary Computation, 44, pp. 228-246; Alpaydin, E., (2014) Introduction to Machine Learning, , 3rd ed, One Rogers Street Cambridge, MA 02142-1209, USA, The MIT Press; Gultnieks, C., (2010) F-Droid Benchmarks, , https://f-droid.org/; Hasanbeig, M., Abate, A., Kroening, D., (2019) Certified reinforcement learning with logic guidance, , arXiv preprint; Hasanbeig, M., Abate, A., Kroening, D., Logically-constrained neural fitted Q-iteration (2019) Proceedings of the 18th International Conference on Autonomous Agents and Multiagent Systems, pp. 2012-2014. , International Foundation for Autonomous Agents and Multiagent Systems, Montreal, Canada; Toro Icarte, R., Klassen, T.Q., Valenzano, R., McIlraith, S.A., Teaching multiple tasks to an RL agent using LTL (2018) Proceedings of the 17th International Conference on Autonomous Agents and Multiagent Systems, pp. 452-461. , http://dl.acm.org/citation.cfm?id=3237383.3237452, AAMAS '18, International Foundation for Autonomous Agents and Multiagent Systems, Richland, SC; Wen, M., Ehlers, R., Topcu, U., (2015) Correct-by-synthesis reinforcement learning with temporal logic constraints, pp. 4983-4990. , IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Hamburg, Germany; Araragi, T., Cho, S.M., (2006) Checking liveness properties of concurrent systems by reinforcement learning, pp. 84-94. , International Workshop on Model Checking and Artificial Intelligence, Springer, Riva del Garda, Italy; Behjati, R., Sirjani, M., Ahmadabadi, M.N., (2009) Bounded rational search for on-the-fly model checking of LTL properties, pp. 292-307. , International Conference on Fundamentals of Software Engineering, Springer, Kish Island, Iran; Adamo, D., Khan, M.K., Koppula, S., Bryce, R.C., Reinforcement learning for android GUI testing (2018) Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, pp. 2-8. , Lake Buena Vista, FL, USA; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U., Vos, T.E.J., (2016) Q-learning strategies for action selection in the TESTAR automated testing tool, pp. 130-137. , 6th International Conference on Metaheuristics and nature inspired computing (META 2016), Marrakech, Morocco; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., (2012) Autoblacktest: automatic black-box testing of interactive applications, pp. 81-90. , 2012 IEEE Fifth International Conference on Software Testing, verification and validation, IEEE, Montreal, Canada; Vuong, T.A.T., Takada, S., A reinforcement learning based approach to automated testing of android applications (2018) Proceedings of the 9th ACM Sigsoft International Workshop on Automating Test Case Design, Selection, and Evaluation, pp. 31-37. , Lake Buena Vista, FL, USA; Falcone, Y., Currea, S., Jaber, M., (2012) Runtime verification and enforcement for android applications with rv-droid, pp. 88-95. , International Conference on Runtime Verification, Springer, Berlin, Heidelberg; Daian, P., Falcone, Y., Meredith, P.O., Serbanuta, T.-F., Shiraishi, S., Iwai, A., Rosu, G., RV-android: efficient parametric android runtime verification, a brief tutorial (2015) Runtime Verification - 6th International Conference, RV 2015 vienna, Austria, September 22-25, 2015. Proceedings, 9333, pp. 342-357. , http://doi.org/10.1007/978-3-319-23820-3_24, Lecture Notes in Computer Science, Springer, Cham; Sun, H., Rosa, A., Javed, O., Binder, W., (2017) ADRENALIN-RV: android runtime verification using load-time weaving, pp. 532-539. , 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST), IEEE, Tokyo, Japan; Laud, A.D., (2004) Theory and application of reward shaping in reinforcement learning, , In Technical Illinois Digital Environment for Access to Learning and Scholarship (IDEALS), University of Illinois, Champaign, Illinois, USA; Brunello, A., Montanari, A., Reynolds, M., Synthesis of LTL formulas from natural language texts: state of the art and research directions (2019) 26th International Symposium on Temporal Representation and Reasoning (Time), Leibniz International Proceedings in Informatics (LIPIcs), , Malaga, Spain; Zhang, L., He, W., Martinez, J., Brackenbury, N., Lu, S., Ur, B., Autotap: synthesizing and repairing trigger-action programs using LTL properties (2019) Proceedings of the 41st International Conference on Software Engineering, pp. 281-291. , ICSE, Montreal, QC, Canada; Ganger, M., Duryea, E., Hu, W., Double sarsa and double expected sarsa with shallow and deep learning (2016) Journal of Data Analysis and Information Processing, 4 (4), p. 159","Koroglu, Y.; Department of Computer Engineering, Turkey; email: yavuz.koroglu@boun.edu.tr",,,"John Wiley and Sons Ltd",,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Conference Paper,"Article in Press","",Scopus,2-s2.0-85092015479
"Elgendy I.T., Girgis M.R., Sewisy A.A.","57218453287;8716158900;6507818667;","A GA-based approach to automatic test data generation for ASP. NET web applications",2020,"IAENG International Journal of Computer Science","47","3",,"557","564",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089803130&partnerID=40&md5=27bace4a0a7576e87dfcfdf94919c2d8","Department of Computer Science, Faculty of Computers and Information, Assiut University, Egypt; Department of Computer Science, Minia University, Egypt","Elgendy, I.T., Department of Computer Science, Faculty of Computers and Information, Assiut University, Egypt; Girgis, M.R., Department of Computer Science, Minia University, Egypt; Sewisy, A.A., Department of Computer Science, Faculty of Computers and Information, Assiut University, Egypt","One of the major challenges in software testing is the generation of test data automatically that satisfy a specified adequacy criterion. This paper presents a GA-based approach and a supporting tool for data-flow test data generation for ASP. NET web applications. The proposed tool accepts as input the web application under test, instruments it, and performs static analysis to compute the definition-use pairs. The proposed GA conducts its search by constructing new test data from previously generated test data that are evaluated as effective test data. In this GA, the chromosome is a collection of user interface control objects, where each control is considered as a gene. Therefore, novel crossover and mutation operators are developed to manipulate the chromosome, which are called block crossover and control-based mutation operators. The proposed GA accepts as input the instrumented version, the list of definition-use pairs to be covered, and input controls related information. The tool produces a set of test cases, the set of definition-use pairs covered by each test case, and a list of uncovered definition-use pairs, if any. Also the paper presents a case study to illustrate how the tool works. Finally, it presents the results of the empirical evaluation that is performed to evaluate the effectiveness of the generated test data in exposing web application errors. © International Association of Engineers.","Automated testing tool; Automatic test data generation; Data flow testing; Software testing; Web applications testing","Chromosomes; Static analysis; User interfaces; Adequacy criterion; Automatic test data generation; Crossover and mutation; Empirical evaluations; Mutation operators; Supporting tool; User interface control; WEB application; Software testing",,,,,,,,"Korel, B., (1990) Automated software test data generation, 16, pp. 870-879. , IEEE Transactions on Software Engineering; Edvardsson, J., (1999) A Survey on Automatic Test Data Generation, pp. 21-28. , Proceedings of the 2nd Conference on Computer Science and Engineering; Li, Y.F., Das, P.K., Dowe, D.L., (2014) 'Two Decades of Web Application Testing-A Survey of Recent Advances, "", 43, pp. 20-54. , Information Systems; Frankl, P.G., Weiss, S.N., An Experimental Comparison of The Effectiveness of Branch Testing and Data Flow Testing (1993) IEEE Transactions on Software Engineering, 19 (8), pp. 774-787; Alshahwan, N., Harman, M., (2011) 'Automated Web Application Testing using Search Based Software Engineering, "", pp. 3-12. , In 2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011); Sharma, C., Sabharwal, S., Sibal, R., A Survey on Software Testing Techniques using Genetic Algorithm (2013) International Journal of Computer Science Issues (IJCSI), 10 (1), p. 381; Lakshmi, D.R., Mallika, S.S., A Review on Web Application Testing and its Current Research Directions (2017) International Journal of Electrical and Computer Engineering (IJECE), 7 (4), pp. 2132-2141; Girgis, M.R., Automatic Test Data Generation for Data Flow Testing Using a Genetic Algorithm (2005) Journal of Universal Computer Science, 11 (6), pp. 898-915; Setiadi, T.E., Ohsuga, A., Maekawa, M., Efficient Execution Path Exploration for Detecting Races in Concurrent Programs, "" (2013) IAENG International Journal of Computer Science, 40 (3), pp. 143-163; Setiadi, T.E., Ohsuga, A., Maekawa, M., Efficient Test Case Generation for Detecting Race Conditions (2014) IAENG International Journal of Computer Science, 41 (2), pp. 112-130; Takamatsu, H., Sato, H., Oyama, S., Kurihara, M., Automated Test Generation for Object-Oriented Programs with Multiple Targets, "" (2014) IAENG International Journal of Computer Science, 41 (3), pp. 198-203; Thummalapenta, S., Xie, T., Tillmann, N., de Halleux, J., Su, Z., Synthesizing Method Sequences for High-Coverage Testing (2011) ACM SIGPLAN Notices, 46 (10), pp. 189-206; Boussaa, M., Barais, O., Sunye, G., Baudry, B., (2015) A Novelty Search Approach for Automatic Test Data Generation, p. 4043. , In 2015 IEEE/ACM 8th International Workshop on Search-Based Software Testing; Girgis, M.R., El-Nashar, A.I., Abd El-Rahman, T.A., Mohammed, M.A., An ASP. NET Web Applications Data Flow Testing Approach, "" (2016) International Journal of Computer Applications, 975, p. 8887; Akhter, N., Singh, A., Singh, G., Automatic Test Case Generation by using Parallel 3 Parent Genetic Algorithm, "" (2018) International Journal for Research in Applied Science and Engineering Technology, 6, pp. 114-121; Azam, M., Sultan, K., Dash, S., Naqeeb, S., Alam, M., (2018) 'Automated Testcase Generation and Prioritization Using GA and FRBS, "", pp. 571-584. , International Conference on Advanced Informatics for Computing Research; Scalabrino, S., Grano, G., Di Nucci, D., Guerra, M., de Lucia, A., Gall, H., Oliveto, R., OCELOT: A Search-Based Test-Data Generation Tool for C (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pp. 868-871; Holland, J., (1975) 'Adaptation in Natural and Artificial Systems: An Introductory Analysis with Application to Biology, "", , Control and artificial intelligence; Srinivas, M., Patnaik, L.M., Genetic Algorithms: A Survey (1994) IEEE Computer, 27 (6), pp. 17-26; (2019), https://docs.microsoft.com/en-us/visualstudio/test/use-ui-automation-to-test-your-code?view=vs-2017; (2019), https://bitbucket.org/johnnewcombe/gaf/wiki/Home; Elgendy, I.T., Girgis, M.R., Seiwsy, A., 'An Automated Tool for Data Flow Testing of ASP. NET Web Applications, "" (2020) Applied Mathematics & Information Sciences, 14 (4), pp. 679-691; White, L.J., Cohen, E.I., A Domain Strategy for Computer Program Testing (1980) IEEE Transactions on Software Engineering, 6 (3), pp. 247-257; Mansour, N., Houri, M., 'Testing Web Applications, "" (2006) Information and Software Technology, 48 (1), pp. 31-42","Elgendy, I.T.; Department of Computer Science, Egypt; email: islam.elgendy@aun.edu.eg",,,"International Association of Engineers",,,,,1819656X,,,,"English","IAENG Int. J. Comput. Sci.",Article,"Final","",Scopus,2-s2.0-85089803130
"Chahim H., Duran M., Vos T.E.J., Aho P., Condori Fernandez N.","57217867349;57217873002;8980537100;35188652400;6507361130;","Scriptless Testing at the GUI Level in an Industrial Setting",2020,"Lecture Notes in Business Information Processing","385 LNBIP",,,"267","284",,1,"10.1007/978-3-030-50316-1_16","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85087763650&doi=10.1007%2f978-3-030-50316-1_16&partnerID=40&md5=d206be17fc1693d6d7fff823466a576f","ProRail, Utrecht, Netherlands; Capgemini, Utrecht, Netherlands; Open Universiteit, Heerlen, Netherlands; Universidad Politecnica de Valencia, Valencia, Spain; University of A Coruña/Vrije Universiteit, Amsterdam, Netherlands","Chahim, H., ProRail, Utrecht, Netherlands; Duran, M., Capgemini, Utrecht, Netherlands; Vos, T.E.J., Open Universiteit, Heerlen, Netherlands, Universidad Politecnica de Valencia, Valencia, Spain; Aho, P., Open Universiteit, Heerlen, Netherlands; Condori Fernandez, N., University of A Coruña/Vrije Universiteit, Amsterdam, Netherlands","TESTAR is a traversal-based and scriptless tool for test automation at the Graphical User Interface (GUI) level. It is different from existing test approaches because no test cases need to be defined before testing. Instead, the tests are generated during the execution, on-the-fly. This paper presents an empirical case study in a realistic industrial context where we compare TESTAR to a manual test approach of a web-based application in the rail sector. Both qualitative and quantitative research methods are used to investigate learnability, effectiveness, efficiency, and satisfaction. The results show that TESTAR was able to detect more faults and higher functional test coverage than the used manual test approach. As far as efficiency is concerned, the preparation time of both test approaches is identical, but TESTAR can realize test execution without the use of human resources. Finally, TESTAR turns out to be a learnable test approach. As a result of the study described in this paper, TESTAR technology was successfully transferred and the company will use both test approaches in a complementary way in the future. © 2020, Springer Nature Switzerland AG.","Compare test approaches; GUI test automation tools; Industrial case study; Railway sector; Technology transfer; TESTAR","Efficiency; Graphical user interfaces; Empirical case studies; Functional test; Graphical user interfaces (GUI); Industrial context; Industrial settings; Quantitative research methods; Test Automation; Web-based applications; Testing",,,,,"Horizon 2020 Framework Programme, H2020","We would like to acknowledge the help of the case study companies They have been supporting our research, answering our questions, and validating our analyses. We would also like to thank the involved universities. This work was partially funded by the ITEA3 TESTOMAT project and the H2020 DECODER project.",,"Vos, T.E.J., TESTAR: tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des, 6; Kresse, A., Kruse, P.M., Development and maintenance efforts testing graphical user interfaces: a comparison (2016) Proceedings of the 7th International Workshop on Automating Test Case Design, Selection, and Evaluation (A-TEST 2016), pp. 52-58; Grechanik, M., Xie, Q., Fu, C., Experimental assessment of manual versus tool-based maintenance of GUI-directed test scripts (2009) ICSM; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: an innovative tool for automated testing of GUI-driven software (2013) Autom. Softw. Eng, 21 (1), pp. 65-105. , https://doi.org/10.1007/s10515-013-0128-9; Garousi, V., Comparing automated visual GUI testing tools: an industrial case study (2017) ACM SIGSOFT International Workshop on Automated Software Testing (A-TEST 2017), pp. 21-28; Aho, P., Evolution of automated regression testing of software systems through the graphical user interface (2016) International Conference on Advances in Computation, Communications and Services; Leotta, M., Capture-replay vs. programmable web testing: an empirical assessment during test case evolution (2013) Conference on Reverse Engineering, pp. 272-281; Alégroth, E., Nass, M., Olsson, H.H., JAutomate: a tool for system-and acceptance-test automation (2013) Proceedings-IEEE 6th International Conference on Software Testing, Verification and Validation. ICST 2013, pp. 439-446; Alégroth, E., Feldt, R., Ryrholm, L., Visual GUI Testing in Practice: Challenges, Problems and Limitations (2015) Empir. Softw. Eng. J, 20 (3), pp. 694-744. , https://doi.org/10.1007/s10664-013-9293-5; Kitchenham, B., Pickard, L., Pfleeger, S., Case studies for method and tool evaluation (1995) IEEE Softw, 12, pp. 52-62; Briand, L., The case for context-driven software engineering research: generalizability is overrated (2017) IEEE Softw, 34 (5), pp. 72-75; Bauersfeld, S., Evaluating the TESTAR tool in an industrial case study (2014) Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement-ESEM 2014, pp. 1-9. , ACM Press, New York; Bauersfeld, S., de Rojas, A., Vos, T.E.J., (2014) Evaluating rogue user testing in industry: an experience report, , Universitat Politecnica de Valencia, Valencia; Martinez, M., Esparcia, A.I., Rueda, U., Vos, T.E.J., Ortega, C., Automated localisation testing in industry with test* (2016) ICTSS 2016. LNCS, 9976, pp. 241-248. , https://doi.org/10.1007/978-3-319-47443-4_17, Wotawa, F., Nica, M., Kushik, N. (eds) Springer, Cham; Runeson, P., Host, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empir. Softw. Eng, 14 (2), pp. 131-164. , https://doi.org/10.1007/s10664-008-9102-8; Vos, T.E.J., A methodological framework for evaluating software testing techniques and tools (2012) 2012 12th International Conference on Quality Software, pp. 230-239; Condori-Fernández, N., Combinatorial testing in an industrial environment-analyzing the applicability of a tool (2014) Proceedings-2014 9th International Conference on the Quality of Information and Communications Technology, QUATIC 2014, pp. 210-215; Borjesson, E., Feldt, R., Automated system testing using visual GUI testing tools: a comparative study in industry (2012) ICST 2012 Proceedings of the 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, pp. 350-359; Nguyen, C.D., Evaluating the FITTEST automated testing tools: an industrial case study (2013) 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 332-339; Rueda, U., (2014) TESTAR-from academic prototype towards an industry-ready tool for automated testing at the User interface level; Imparato, G., A combined technique of GUI ripping and input perturbation testing for Android apps (2015) Proceedings-International Conference on Software Engineering, pp. 760-762; Vos, T.E.J., Industrial scaled automated structural testing with the evolutionary testing tool (2010) ICST 2010 – 3rd International Conference on Software Testing, Verification and Validation, pp. 175-184; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based GUI testing techniques: An empirical study (2014) J. Syst. Softw, 97, pp. 15-46; Marchetto, A., Ricca, F., Tonella, P., A case study-based comparison of web testing techniques applied to AJAX web applications (2008) Int. J. Softw. Tools Technol. Transf, 10, pp. 477-492. , https://doi.org/10.1007/s10009-008-0086-x; Benedek, J., Miner, T., Measuring desirability new methods for evaluating desirability in a usability lab setting (2002) Microsoft Corporation; Esparcia-Alcazar, A., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) Proceedings of the 6th International Conference on Metaheuristics and Nature Inspired Computing. META; Bohme, M., Paul, S., Probabilistic analysis of the efficiency of automated software testing (2016) IEEE Trans. Softw. Eng, 42, pp. 345-360; Wieringa, R., Daneva, M., Six strategies for generalizing software engineering theories (2015) Sci. Comput. Program, 101, pp. 136-152. , https://doi.org/10.1016/j.scico.2014.11.013, ISSN 0167-6423","Vos, T.E.J.; Universidad Politecnica de ValenciaSpain; email: tvos@dsic.upv.es","Dalpiaz F.Zdravkovic J.Loucopoulos P.",,"Springer","14th International Conference on Research Challenges in Information Sciences, RCIS 2020","23 September 2020 through 25 September 2020",,241489,18651348,9783030503154,,,"English","Lect. Notes Bus. Inf. Process.",Conference Paper,"Final","",Scopus,2-s2.0-85087763650
"Ivanova K., Kondratenko G., Sidenko I., Kondratenko Y.","57216896033;55991478400;55991342900;6602324472;","Artificial intelligence in automated system for web-interfaces visual testing",2020,"CEUR Workshop Proceedings","2604",,,"1019","1031",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085180679&partnerID=40&md5=97c800d6b45ff1b2639a569fed522d26","Intelligent Information Systems Department, Petro Mohyla Black Sea National University, 68th Desantnykiv Str., 10, Mykolaiv, 54003, Ukraine","Ivanova, K., Intelligent Information Systems Department, Petro Mohyla Black Sea National University, 68th Desantnykiv Str., 10, Mykolaiv, 54003, Ukraine; Kondratenko, G., Intelligent Information Systems Department, Petro Mohyla Black Sea National University, 68th Desantnykiv Str., 10, Mykolaiv, 54003, Ukraine; Sidenko, I., Intelligent Information Systems Department, Petro Mohyla Black Sea National University, 68th Desantnykiv Str., 10, Mykolaiv, 54003, Ukraine; Kondratenko, Y., Intelligent Information Systems Department, Petro Mohyla Black Sea National University, 68th Desantnykiv Str., 10, Mykolaiv, 54003, Ukraine","In this paper, the authors consider an artificial intelligence technique of providing visual testing, and also the developed system that is integrated into functional automated test suites. Thus carried out monitoring and analyzing of visual changes in the graphical interface of the application under test. A proposed tool is supposed to resolve the existing problems of the traditional snapshot visual testing. Graphical user interface (GUI) testing is a very important testing step for quality control of software applications. The GUI is the central node in the test application, from where all functions are accessed. Thus, it is difficult to thoroughly test programs through their graphical interface, especially because they are designed to work with humans, not machines. In addition, they are inherently non-static interfaces, prone to constant changes caused by functionality upgrades, improved usability, changing requirements or changed contexts. This complicates the development and maintenance of test cases without resorting to time-consuming and costly manual testing. A proposed automated system for web-interfaces visual testing uses computer vision technology as an artificial intelligence technique for visual comparison. A comparative analysis is carried out with the developed interface for testing (in particular, a web page) and the expected mockup with the location of visual elements on the page for example, an interface from the customer). When designing an automated system for web-interfaces visual testing, the programming languages Python, JavaScript, library TensorFlow, testing framework Cypress, and database MySQL were used. © 2020 for this paper by its authors.","AI algorithms; Artificial intelligence; Automated testing; Computer vision; Digital image; Graphical interface; Pixel comparator; Snapshot; Visual element; Visual testing","Application programs; Automation; Computational linguistics; Computer testing; Graphical user interfaces; Intelligent systems; Quality control; Software testing; Websites; Application under tests; Artificial intelligence techniques; Comparative analysis; Computer vision technology; Graphical interface; Graphical user interfaces (GUI); Software applications; Visual comparison; Visual languages",,,,,,,,"Graves, T., Harrold, M., Kim, J., Porter, A., Rothermel, G., An empirical study of regression test selection techniques (2001) ACM Transactions on Software Engineering and Methodology (TOSEM), 10 (2), pp. 184-208; Li, P., Huynh, T., Reformat, M., Miller, J., A practical approach to testing GUI systems (2007) Empirical Software Engineering, 12 (4), pp. 331-357; Lönnberg, J., (2003) Visual Testing of Software, , Master's thesis, Helsinki University of Technology; Myers, G., (2004) The Art of Software Testing, , John Wiley & Sons, N.Y; Weyuker, E., Axiomatizing software test data adequacy (1986) IEEE Transactions on Software Engineering, 1215 (12), pp. 1128-1138; Schneider, G., Winters, J., (1998) Applying Use Cases: A Practical Guide, , Addison Wesley, Boston; Cohn, M., (2005) Agile Estimating and Planning, , Addison Wesley, Boston; Burnett, M., Ambler, A., Interactive visual data abstraction in a declarative visual programming language (1994) Journal of Visual Languages and Computing, 5 (1), pp. 29-60; Azem, A., Belli, F., Jack, O., Jedrzejowicz, P., Testing and reliability of logic programs (1993) The Fourth International Symposium on Software Reliability Engineering, pp. 318-327; Mikhov, D., Kondratenko, Y., Kondratenko, G., Sidenko, I., Fuzzy logic approach to improving the digital images contrast (2019) IEEE 2nd Ukraine Conference on Electrical and Computer Engineering, pp. 1183-1188. , UKRCON,. Lviv, Ukraine; Pomanysochka, Y., Kondratenko, Y., Kondratenko, G., Sidenko, I., Soft computing techniques for noise filtration in the image recognition processes (2019) IEEE 2nd Ukraine Conference on Electrical and Computer Engineering, pp. 1189-1195. , UKRCON,. Lviv, Ukraine; Mohanty, H., Mohanty, J., Balakrishnan, A., (2017) Trends in Software Testing, , Springer, Singapore; Robert, M., Linda, H., Shapiro, G., Image Segmentation Techniques, , https://www.sciencedirect.com/science/article/pii/S0734189X85901537, Online; Kaur, D., Kaur, Y., Various image segmentation (2014) Techniques: A Review, 3 (5), pp. 809-814; Hlaing, S., Khaing, A., Weed and crop segmentation and classification using area thresholding (2014) International Journal of Research in Engineering and Technology, pp. 2321-7308; Haug, S., Michaels, A., Plant classification system for crop/weed discrimination without segmentation (2014) IEEE Winter Conference; Lottes, P., Stachniss, C., Semi-Supervised Online Visual Crop and Weed Classification in Precision Farming Exploiting Plant Arrangement, , http://flourishproject.eu/fileadmin/user_upload/publications/lottes17iros.pdf, Online; Wang, Y., Chen, Y., Lu, P., Wang, H., Sobel heuristic kernel for aerial semantic segmentation 25th IEEE International Conference on Image Processing (ICIP), , Electronic ISSN; Fan, W., Color image segmentation algorithm based on region growth (2010) Computer Engineering, 36 (13), pp. 25-34; Angelina, S., Suresh, L., Veni, S., Image segmentation based on genetic algorithm for region growth and region merging (2012) International Conference on Computing, Electronics and Electrical Technologies (ICCEET), pp. 970-974; Ugarriza, L., Saber, E., Vantaram, S., Automatic image segmentation by dynamic region growth and multiresolution merging (2009) IEEE Transactions on Image Processing, 18 (10), pp. 2275-2288; Pomanysochka, Y., Kondratenko, Y., Sidenko, I., Noise filtration in the digital images using fuzzy sets and fuzzy logic (2019) 15th International Conference on ICT in Education, Research, and Industrial Applications: PhD Symposium (ICTERI 2019: PhD Symposium), 2403, pp. 63-72. , Kherson, Ukraine; Kondratenko, Y., Gordienko, E., Neural networks for adaptive control system of caterpillar turn (2011) Annals of DAAAM for 2011 & Proceeding of the 22th Int. DAAAM Symp. ""Intelligent Manufacturing and Automation, pp. 0305-0306; Kushneryk, P., Kondratenko, Y., Sidenko, I., Intelligent dialogue system based on deep learning technology (2019) 15th International Conference on ICT in Education, Research, and Industrial Applications: PhD Symposium (ICTERI 2019: PhD Symposium), 2403, pp. 53-62. , http://icteri.org/icteri-2020/PhDS/11110053.pdf, Kherson, Ukraine; Siriak, R., Skarga-Bandurova, I., Boltov, Y., Deep convolutional network with long short-term memory layers for dynamic gesture recognition (2019) 10th IEEE International Conference on Intelligent Data Acquisition and Advanced Computing Systems: Technology and Applications (IDAACS), pp. 158-162. , Metz, France; Celebi, M., Kingravi, H., Vela, P., A comparative study of efficient initialization methods for the K-means clustering algorithm (2013) Expert Systems with Applications, 40 (1), pp. 200-210",,"Lytvyn V.Vysotska V.Hamon T.Grabar N.Sharonova N.Cherednichenko O.Kanishcheva O.","Institut Galilee of Universite Paris 13;Lviv Polytechnic National University;National Technical University ""Kharkiv Polytechnic Institute"" (NTU);Politechnika Slaska;Ukrainian Scientific and Educational IT Society (USIT)","CEUR-WS","4th International Conference on Computational Linguistics and Intelligent Systems, COLINS 2020","23 April 2020 through 24 April 2020",,159817,16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85085180679
"Jiménez-Ramírez A., Chacón-Montero J., Wojdynsky T., González Enríquez J.","53979785300;6506956803;57215774509;56203929000;","Automated testing in robotic process automation projects",2020,"Journal of Software: Evolution and Process",,,,"","",,3,"10.1002/smr.2259","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081886253&doi=10.1002%2fsmr.2259&partnerID=40&md5=71aa2dcfcd19f792eaa77093b0c99055","Computer Languages and Systems Department, University of Seville, Seville, Spain; Faculty of Management, Economics and Computer Science, The School of Banking and Management, Cracow, Poland","Jiménez-Ramírez, A., Computer Languages and Systems Department, University of Seville, Seville, Spain; Chacón-Montero, J., Computer Languages and Systems Department, University of Seville, Seville, Spain; Wojdynsky, T., Faculty of Management, Economics and Computer Science, The School of Banking and Management, Cracow, Poland; González Enríquez, J., Computer Languages and Systems Department, University of Seville, Seville, Spain","Robotic process automation (RPA) has received increasing attention in recent years. It enables task automation by software components, which interact with user interfaces in a similar way to that of humans. An RPA project life cycle is closely resembling a software project one. However, in certain contexts (e.g., business process outsourcing), a testing environment is not always available. Thus, deploying the robots in the production environment entails high risk. To mitigate it, an innovative approach to automatically generate a testing environment and a test suite for an RPA project is presented. The activities of the humans whose processes are to be robotized are monitored and a UI log is confirmed. On one side, the test environment is generated as a fake application, which mimics the real environment by leveraging the UI log information. The control flow of the application is governed by an invisible control layer that decides which image to show depending on the interface actions that it receives. On the other side, the test case checks whether the robot can reproduce the behaviour of the UI log. Promising results were obtained and a number of limitations were identified such that it may be applied in more realistic domains. © 2020 John Wiley & Sons, Ltd.","automated testing; robotic process automation","Life cycle; Process control; User interfaces; Automated testing; Business process outsourcing; Innovative approaches; Process automation; Production environments; Project life cycle; Software component; Testing environment; Robotics",,,,,"P114‐16/E09

Centre for Industrial Technological Development, CDTI","This research has been supported by the Pololas project (TIN2016‐76956‐C3‐2‐R) of the Spanish Ministry of Economy and Competitiveness and the RAIL project (P114‐16/E09) of the Centre for Industrial Technological Development (Centro para el Desarrollo Tecnológico Industrial, CDTI) of Spain.",,"Fung, H.P., Criteria, use cases and effects of information technology process automation (ITPA) (2014) Advances in Robotic and Automation, 3, pp. 1-11. , https://10.4172/2168-9695.1000124; Willcocks, L., Lacity, M., Craig, A., Robotic process automation: strategic transformation lever for global business services? (2017) J Inform Technolo Teach Cases, 7 (1), pp. 17-28; Slaby, J.R., (2018) Robotic Automation emerges as a threat to traditional low-cost outsourcing, , https://www.blueprism.com/wpapers/robotic-automation-emerges-threat-traditional-low-cost-outsourcing, [Online; accessed September 2019]; Geyer-Klingeberg, J., Nakladal, J., Baldauf, F., Veit, F., (2018) Process mining and robotic process atomation: a perfect match, , In 1–8; Penttinen, E., Kasslin, H., Asatiani, A., (2018) How to choose between robotic process automation and back-end system automation?; https://www.blueprism.com, [Online; accessed September 2019]; https://www.uipath.com, [Online; accessed September 2019]; https://www.workfusion.com/rpaexpress, [Online; accessed September 2019]; Leno, V., Dumas, M., Maggi, F.M., La Rosa, M., (2018) Multi-perspective process model discovery for robotic process automation, 2114, pp. 37-45. , In CEUR Workshop Proceedings; Chacón-Montero, J., Jiménez-Ramírez, A., Enríquez, J.G., (2019) Towards a method for automated testing in robotic process automation projects, pp. 42-47. , In AST '19 Proceedings of the 14th International Workshop on Automation of Software Test IEEE Press; Anagnoste, S., (2017) Robotic automation process—the next major revolution in terms of back office operations improvement, 11, pp. 676-686. , https://10.1515/picbe-2017-0072, In Proceedings of the International Conference on Business Excellence, Bucharest, Romania; Asatiani, A., Penttinen, E., Turning robotic process automation into commercial success—case OpusCapita (2016) J Info Technol Teach Cases, 6 (2), pp. 67-74; Madakam, S., Holmukhe, R.M., Jaiswal, D.K., The future digital work force: robotic process automation (RPA) (2019) JISTEM - J Inf Syst Technol Manag, 16 (1), pp. 1-16; Kämäräinen, T., (2018) Managing robotic process automation: opportunities and challenges associated with a federated governance model, , Master's Thesis, School of Business; Jimenez-Ramirez, A., Reijers, H.A., Barba, I., Del Valle, C., A method to improve the early stages of the robotic process automation lifecycle (2019) Advanced Information Systems Engineering, 11483, pp. 446-461. , P. Giorgini, B. Weber, eds., CAiSE 2019. Lecture Notes in Computer Science, Cham, Springer; Spillner, A., Linz, T., Schaefer, H., (2006) Software testing foundations, , Germany, dpunkt.verlang; Hultin, J., Trudell, C., Vashistha, A., Glover, T., (2017) Implications of technology on the future workforce, , tech. rep.,  Defense Business Board Washington United States; Naik, V.K., Garbacki, P., Mohindra, A., (2006) Architecture for service request driven solution delivery using grid systems, pp. 414-422. , In SCC '06 Proceedings of the IEEE International Conference on Services Computing IEEE; Lacity, M., Willcocks, L., (2015) Robotic process automation: the next transformation lever for shared services, , London School of Economics Outsourcing Unit Working Papers 7; Aguirre, S., Rodriguez, A., Automation of a business process using robotic process automation(RPA): a case study (2017) Applied Computer Sciences in Engineering. WEA 2017. Communications in Computer and Information Science, 742, pp. 65-71. , J. Figueroa-Garcá, E. López-Santana, J. Villa-Ramírez, R. Ferro-Escobar, eds., Cham, Springer; Barnett, G., (2015) Robotic process automation: adding to the process transformation toolkit, , White paper IT0022-0005, Ovum Consulting; Mijović, P., Giagloglou, E., Todorović, P., Mačužić, I., Jeremić, B., Gligorijević, I., (2014) A tool for neuroergonomic study of repetitive operational tasks; Lu, H., Li, Y., Chen, M., Kim, H., Serikawa, S., Brain intelligence: go beyond artificial intelligence (2018) Mob Netw Appl, 23 (2), pp. 368-375; Lamberton, C., Brigo, D., Hoy, D., Impact of robotics, RPA and AI on the insurance industry: challenges and opportunities (2017) J Financ Perspect: Insurance ed, 4 (1), pp. 8-20; Le Clair, C., Cullen, A., King, M., (2017) The forrester wave TM: robotic process automation, , q1 2017; Leopold, H., Aa v, D., Reijers, H.A., Identifying candidate tasks for robotic process automation in textual process descriptions (2018) Enterprise, Business-Process and Information Systems Modeling. BPMDS 2018, EMMSAD 2018. Lecture Notes in Business Information Processing, 318, pp. 67-81. , J. Gulden, I. Reinhartz-Berger, R. Schmidt, S. Guerreiro, W. Guédria, P. Bera, eds., Cham, Springer; Linn, C., Zimmermann, P., Werth, D., (2018) Desktop activity mining—a new level of detail in mining business processes, , Köllen Druck+ Verlag GmbH; van der Aalst, W.M.P., Bichler, M., Heinzl, A., Robotic process automation (2018) Bus Inf Syst Eng, 60, pp. 269-227; Morán, J., Bertolino, A., de la Riva, C., Tuya, J., Automatic testing of design faults in mapreduce applications (2018) IEEE Trans Reliab, 67 (3), pp. 717-732; Petković, M., Čandrlić, S., Ašenbrener Katić, M., Automatic testing of web applications with the support of Geb web driver (2019) Zbornik Veleučilišta u Rijeci, 7 (1), pp. 185-207; Huang, M., Zeng, L., (2019) An automatic testing method for GUI using the framework of three-layer test script, , InAtlantis Press; Yatskiv, S., Voytyuk, I., Yatskiv, N., Kushnir, O., Trufanova, Y., Panasyuk, V., (2019) Improved method of software automation testing based on the robotic process automation technology, pp. 293-296. , In 2019 9th International Conference on Advanced Computer Information Technologies (ACIT)., IEEE; Moffitt, K.C., Rozario, A.M., Vasarhelyi, M.A., Robotic process automation for auditing (2018) J Emerging Technol Account, 15 (1), pp. 1-10; Rozario, A.M., Vasarhelyi, M.A., How robotic process automation is transforming accounting and auditing (2018) The CPA J, 88 (6), pp. 46-49","Jiménez-Ramírez, A.; Computer Languages and Systems Department, Spain; email: ajramirez@us.es",,,"John Wiley and Sons Ltd",,,,,20477481,,,,"English","J. Softw. Evol. Process",Article,"Article in Press","",Scopus,2-s2.0-85081886253
"Usman A., Ibrahim N., Salihu I.A.","57202460880;56036883900;57077031600;","TEGDroid: Test case generation approach for android apps considering context and GUI events",2020,"International Journal on Advanced Science, Engineering and Information Technology",,"1",,"16","23",,,"10.18517/ijaseit.10.1.10194","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081236675&doi=10.18517%2fijaseit.10.1.10194&partnerID=40&md5=bf403b26e8c6c3090de5596ce3ad31ea","Faculty of Sciences, Department of Computer Science, Abdu Gusau Polytechnic Talata Mafara, 892, Zamfara State, Nigeria; Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia; Department of Software Engineering, Faculty of Natural and Applied Sciences, Nile University of Nigeria, Abuja, Nigeria","Usman, A., Faculty of Sciences, Department of Computer Science, Abdu Gusau Polytechnic Talata Mafara, 892, Zamfara State, Nigeria, Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia; Ibrahim, N., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia; Salihu, I.A., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, Johor, Malaysia, Department of Software Engineering, Faculty of Natural and Applied Sciences, Nile University of Nigeria, Abuja, Nigeria","The advancement in mobile technologies has led to the production of mobile devices (e.g. smartphone) with rich innovative features. This has enabled the development of mobile applications that offer users an advanced and extremely localized context-aware content. The recent dependence of people on mobile applications for various computational needs poses a significant concern on the quality of mobile applications. In order to build a high quality and more reliable applications, there is a need for effective testing techniques to test the applications. Most existing testing technique focuses on GUI events only without sufficient support for context events. This makes it difficult to identify other defects in the changes that can be inclined by context in which an application runs. This paper presents an approach named TEGDroid for generating test case for Android Apps considering both context and GUI Events. The GUI and context events are identified through the static analysis of bytecode, and the analysis of app's permission from the XML file. An experiment was performed on real world mobile apps to evaluate TEGDroid. Our experimental results show that TEGDroid is effective in identifying context events and had 65%-91% coverage across the eight selected applications. To evaluate the fault detection capability of this approach, mutation testing was performed by introducing mutants to the applications. Results from the mutation analysis shows that 100% of the mutants were killed. This indicates that TEGDroid have the capability to detect faults in mobile apps. © 2020 Insight Society.","Context event; GUI event; Mobile application test case generation; Software testing",,,,,,"Universiti Tun Hussein Onn Malaysia, UTHM

Universiti Tun Hussein Onn Malaysia, UTHM","We would like to acknowledge the support from Ministry of Higher Education and university Tun Hussein Onn Malaysia (UTHM) in undertaking the research under the Graduate Research Assistant for Postgraduate Research Grants (GPPS) and Fundamental Research Grant (FRGS) Vot number 1610.",,"Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) 7th International Workshop on Automation of Software Test (AST), pp. 29-35; Tamilarasi, T., Prasanna, M., Research and Development on Software Testing Techniques and Tools (2018) Encyclopedia of Information Science and Technology, pp. 7503-7513. , Fourth Edition, ed: IGI Global; Salihu, I.-A., Ibrahim, R., Ahmed, B.S., Zamli, K.Z., Usman, A., (2019) AMOGA: A Static-Dynamic Model Generation Strategy for Mobile Apps Testing, 7, pp. 17158-17173. , IEEE Access; Qasim, I., Azam, F., Anwar, M.W., Tufail, H., Qasim, T., Mobile User Interface Development Techniques: A Systematic Literature Review (2018) IEEE 9th Annual Information Technology, Electronics and Mobile Communication Conference (IEMCON), pp. 1029-1034; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 252-261. , IEEE; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21, pp. 65-105; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) 2nd International Conference on Computer Engineering and Technology (ICCET), pp. V2-297; Morgado, I.C., Paiva, A.C., Faria, J.P., Automated pattern-based testing of mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC), pp. 294-299; Salihu, I.A., Ibrahim, R., Comparative Analysis of GUI Reverse Engineering Techniques (2016) Advanced Computer and Communication Engineering Technology, pp. 295-305. , ed: Springer; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86, pp. 1978-2001; Aho, P., Suarez, M., Memon, A., Kanstrén, T., Making GUI Testing Practical: Bridging the Gaps (2015) 12th International Conference on Information Technology-New Generations (ITNG), pp. 439-444; Amalfitano, D., Amatucci, N., Tramontana, P., Fasolino, A.R., Memon, A.M., A General Framework for comparing Automatic Testing Techniques of Android Mobile Apps (2016) Journal of Systems and Software; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated testing of android apps: A systematic literature review (2018) IEEE Transactions on Reliability, 68, pp. 45-66; Salihu, I.A., Ibrahim, R., Systematic Exploration of Android Apps' Events for Automated Testing (2016) Proceedings of the 14th International Conference on Advances in Mobile Computing and Multi Media, pp. 50-54; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in GUI testing of android applications (2016) Proceedings of the 38th International Conference on Software Engineering, pp. 559-570; Song, K., Han, A.-R., Jeong, S., Cha, S.D., Generating various contexts from permissions for testing Android applications (2015) SEKE, pp. 87-92; Méndez-Porras, A., Quesada-Löpez, C., Jenkins, M., Automated testing of mobile applications: A systematic map and review (2015) XVIII Ibero-American Conference on Software Engineering, pp. 195-208. , Lima-Peru; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 126-133; Song, W., Qian, X., Huang, J., Ehbdroid: Beyond GUI testing for android applications (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, pp. 27-37; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83, pp. 60-66; Griebe, T., Gruhn, V., A model-based approach to test automation for context-aware mobile applications (2014) Proceedings of the 29th Annual ACM Symposium on Applied Computing, pp. 420-427; Majchrzak, T.A., Schulte, M., Context-dependent testing of applications for mobile devices (2015) Open Journal of Web Technologies (OJWT), 2, pp. 27-39; Yu, S., Takada, S., Mobile application test case generation focusing on external events (2016) Proceedings of the 1st International Workshop on Mobile Development, pp. 41-42; Bartel, A., Klein, J., Le Traon, Y., Monperrus, M., Dexpler: Converting android dalvik bytecode to jimple for static analysis with soot (2012) Proceedings of the ACM SIGPLAN International Workshop on State of the Art in Java Program analysis, pp. 27-38; Wichmann, B., Canning, A., Clutterbuck, D., Winsborrow, L., Ward, N., Marsh, D., Industrial perspective on static analysis (1995) Software Engineering Journal, 10, pp. 69-75; Yang, S., Wu, H., Zhang, H., Wang, Y., Swaminathan, C., Yan, D., Static window transition graphs for Android (2018) Automated Software Engineering, 25, pp. 833-873; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265; Salihu, I.A., Ibrahim, R., Mustapha, A., A Hybrid Approach for Reverse Engineering GUI Model from Android Apps for Automated Testing (2017) Journal of Telecommunication, Electronic and Computer Engineering (JTEC), 9, pp. 45-49; GATOR: Program Analysis Toolkit For Android; Mujahid, S., Abdalkareem, R., Shihab, E., Studying permission related issues in android wearable apps (2018) 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 345-356; Usman, A., Ibrahim, N., Salihu, I.A., Test Case Generation from Android Mobile Applications Focusing on Context Events (2018) Proceedings of the 2018 7th International Conference on Software and Computer Applications, pp. 25-30; Levinson, J., (2011) Software Testing with Visual Studio 2010: Pearson Education; Horvâth, F., Gergely, T., Beszédes, A., Tengeri, D., Balogh, G., Gyimöthy, T., Code coverage differences of Java bytecode and source code instrumentation tools (2019) Software Quality Journal, 27, pp. 79-123; An open source Java code coverage tool, , http://emma.sourceforge.net/; Gay, G., Staats, M., Whalen, M., Heimdahl, M.P., The risks of coverage-directed test case generation (2015) IEEE Transactions on Software Engineering, 41, pp. 803-819; Inozemtseva, L., Holmes, R., Coverage is not strongly correlated with test suite effectiveness (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 435-445; Gopinath, R., Jensen, C., Groce, A., Code coverage for suite evaluation by developers (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 72-82; Papadakis, M., Kintis, M., Zhang, J., Jia, Y., Le Traon, Y., Harman, M., Mutation testing advances: An analysis and survey (2019) Advances in Computers, 112, pp. 275-378. , ed: Elsevier; Wei, Y., (2016) MuDroid: Mutation Testing for Android Apps; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE transactions on software engineering, 37, pp. 649-678; Iida, C., Takada, S., Reducing mutants with mutant killable precondition (2017) 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 128-133",,,,"Insight Society",,,,,20885334,,,,"English","Int. J. Adv. Sci. Eng. Inf. Technol.",Article,"Final","All Open Access, Hybrid Gold",Scopus,2-s2.0-85081236675
"Sadaj A., Ochodek M., Kopczyńska S., Nawrocki J.","57214780631;24765408500;34872700700;56382113500;","Maintainability of Automatic Acceptance Tests for Web Applications—A Case Study Comparing Two Approaches to Organizing Code of Test Cases",2020,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","12011 LNCS",,,"454","466",,,"10.1007/978-3-030-38919-2_37","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079085768&doi=10.1007%2f978-3-030-38919-2_37&partnerID=40&md5=43da3341f7f92d40f7d05cd35f5758cf","Poznan University of Technology, Poznań, Poland","Sadaj, A., Poznan University of Technology, Poznań, Poland; Ochodek, M., Poznan University of Technology, Poznań, Poland; Kopczyńska, S., Poznan University of Technology, Poznań, Poland; Nawrocki, J., Poznan University of Technology, Poznań, Poland","[Context] Agile software development calls for test automation since it is critical for continuous development and delivery. However, automation is a challenging task especially for tests of user interface, which can be very expensive. [Problem] There are two extreme approaches of structuring the code of test duties for web-applicating, i.e., linear scripting and keyword-driven scripting technique employing the page object pattern. The goal of this research is to compare them focusing on the maintainability aspect. [Method] We develop and maintain two automatic test suites implementing the same test cases for a mature open-source system using these two approaches. For each approach, we measure the size of the testing codebase and the number of lines of code that need to be modified to keep the test suites passing and valid through five releases of the system. [Results] We observed that the total number of physical lines was higher for the keyword-driven approach than for the linear scripting one. However, the number of programmatical lines of code was smaller for the former. The number of lines of code that had to be modified to maintain the tests was lower for the keyword-driven scripting test suite than for the linear-scripting one. We found the linear-scripting technique was more difficult to maintain because the scripts consist only of low-level code directly interacting with a web browser making it hard to understand the purpose and broader context of the interaction they implement. [Conclusions] We conclude that test suites created using the keyword-driven approach are easier to maintain and more suitable for most of the projects. However, the results show that the linear scripting approach could be considered as a less expensive alternative for small projects that are not likely to be frequently modified in the future. © 2020, Springer Nature Switzerland AG.","Acceptance testing; Cucumber; Keyword-driven testing; Linear scripting; Selenium; Web applications","Codes (symbols); Maintainability; Open source software; Open systems; Selenium; Software design; Software testing; User interfaces; Acceptance testing; Cucumber; Keyword driven; Linear scripting; WEB application; Acceptance tests",,,,,,,,"Carvalho, R., (2016) A Comparative Study of GUI Testing Approaches; Cohn, M., (2010) Succeeding with Agile: Software Development Using Scrum, , Pearson Education, London; Dees, I., Wynne, M., Hellesoy, A., (2013) Cucumber Recipes: Automate Anything with BDD Tools and Techniques., , Pragmatic Bookshelf, Raleigh; Fowler, M., https://martinfowler.com/bliki/PageObject.html; Garousi, V., Mika, M., When and what to automate in software testing? A multivocal literature review (2016) Inf. Softw. Technol., 76, pp. 92-117; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Comparing the maintainability of selenium WebDriver test suites employing different locators: A case study (2013) Joining Academia and Industry Contributions to Testing Automation (JAMAICA); Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) WCRE 2013, pp. 272-281. , Koblenz, Germany; Leotta, M., Ricca, F., Stocco, A., Tonella, P., Reducing web test cases aging by means of robust XPath locators (2013) IEEE; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Using multi-locators to increase the robustness of web test cases (2015) IEEE; Mg, R.P., (2015) Learning Selenium Testing Tools, , Packt Publishing Ltd., Birmingham; (2019), https://moodle.org, Moodle.org, Accessed 17 June 2019; Natarajan, S., Balasubramaniam, K., Kanitkar, M., (2019) Efficiency and Cost Containment in Quality Assurance, , 10th edn. Capgemini, Micro Focus, Sogeti, World Quality Report 2018-19; Ochodek, M., Kopczyńska, S., Perceived importance of agile requirements engineering practices-a survey (2018) J. Syst. Softw., 143, pp. 29-43; (2019) Getting Started with Page Object Pattern for Your Selenium Tests, , https://www.pluralsight.com/guides/getting-started-withpage-object-pattern-for-your-selenium-tests, pluralsight.com, Accessed 13 June 2019; Runeson, P., Host, M., Rainer, A., Regnell, B., (2012) Case Study Research in Software Engineering: Guidelines and Examples, , Wiley, Hoboken; Sadaj, A., (2019) Maintainability of Automatic Acceptance Tests for Web applications–a Case Study Comparing Two Approaches to Organizing Code of Test Cases, , Master’s thesis, Poznan University of Technology; Spinellis, D., State-of-the-art software testing (2017) IEEE Softw, 34 (5), pp. 4-6; Ståhl, D., Bosch, J., Modeling continuous integration practice differences in industry software development (2014) J. Syst. Softw., 87, pp. 48-59; Tahchiev, P., Leme, F., Massol, V., Gregory, G., (2010) Junit in Action, , Manning Publications Co., Greenwich; Yin, R., (2003) Case Study Research: Design and Methods, , SAGE Publications, Thousand Oaks","Ochodek, M.; Poznan University of TechnologyPoland; email: miroslaw.ochodek@cs.put.poznan.pl","Chatzigeorgiou A.Dondi R.Herodotou H.Kapoutsis C.Manolopoulos Y.Papadopoulos G.A.Sikora F.",,"Springer","46th International Conference on Current Trends in Theory and Practice of Computer Science, SOFSEM 2020","20 January 2020 through 24 January 2020",,236569,03029743,9783030389185,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85079085768
"Yerima S.Y., Alzaylaee M.K., Sezer S.","22735916500;57190579820;7004935772;","Machine learning-based dynamic analysis of Android apps with improved code coverage",2019,"Eurasip Journal on Information Security","2019","1", 4,"","",,5,"10.1186/s13635-019-0087-1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065019743&doi=10.1186%2fs13635-019-0087-1&partnerID=40&md5=f61b3eb8d3e02a6f6430e5af816e370b","De Montfort University, Leicester, LE1 9BH, United Kingdom; Centre for Secure Information Technologies (CSIT), Queen’s University Belfast, Belfast, BT7 1NN, United Kingdom","Yerima, S.Y., De Montfort University, Leicester, LE1 9BH, United Kingdom; Alzaylaee, M.K., Centre for Secure Information Technologies (CSIT), Queen’s University Belfast, Belfast, BT7 1NN, United Kingdom; Sezer, S., Centre for Secure Information Technologies (CSIT), Queen’s University Belfast, Belfast, BT7 1NN, United Kingdom","This paper investigates the impact of code coverage on machine learning-based dynamic analysis of Android malware. In order to maximize the code coverage, dynamic analysis on Android typically requires the generation of events to trigger the user interface and maximize the discovery of the run-time behavioral features. The commonly used event generation approach in most existing Android dynamic analysis systems is the random-based approach implemented with the Monkey tool that comes with the Android SDK. Monkey is utilized in popular dynamic analysis platforms like AASandbox, vetDroid, MobileSandbox, TraceDroid, Andrubis, ANANAS, DynaLog, and HADM. In this paper, we propose and investigate approaches based on stateful event generation and compare their code coverage capabilities with the state-of-the-practice random-based Monkey approach. The two proposed approaches are the state-based method (implemented with DroidBot) and a hybrid approach that combines the state-based and random-based methods. We compare the three different input generation methods on real devices, in terms of their ability to log dynamic behavior features and the impact on various machine learning algorithms that utilize the behavioral features for malware detection. Experiments performed using 17,444 applications show that overall, the proposed methods provide much better code coverage which in turn leads to more accurate machine learning-based malware detection compared to the state-of- the- art approach. © 2019, The Author(s).","Android malware detection; Code coverage; DroidBot; Dynamic analysis; Event generation; Machine learning; Model-based input generation; Monkey; Random input generation; State-based input generation","Codes (symbols); Computer crime; Dynamic analysis; Learning algorithms; Learning systems; Machine learning; Malware; Software testing; User interfaces; Android malware; Code coverage; DroidBot; Event generation; Model-based OPC; Monkey; Random input; State based; Android (operating system)",,,,,"Engineering and Physical Sciences Research Council, EPSRC: EP/K004379/1, EP/N508664/1, EP/R007187/1","This work was supported by EPSRC under Grant CSIT-2 EP/N508664/1.",,"(2019) Google Play: Number of Downloads 2010-2016 | Statistic, , https://www.statista.com/statistics/281106/number-of-android-app-downloads-from-google-play, Accessed Jan; Global Smartphone Shipments by OS 2016-2021 | Statistic, , https://www.statista.com/statistics/309448/global-smartphone-shipments-forecast-operating-system/, Accessed Feb 2019; Mcafee Labs Threats Predictions Report | Mcafee Labs, , https://www.mcafee.com/uk/resources/reports/rp-quarterly-threats-mar-2016.pdf, Accessed Feb 2019; Oberheide, J., Miller, C., Dissecting the Android Bouncer (2012) Summercon2012, p. 110. , New York; Linares-Vàsquez, M., Moran, K., Poshyvanyk, D., (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 399-410. , https://doi.org/10.1109/ICSME.2017.27, Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing; Choudhary, S.R., Gorla, A., Orso, A., (2015) In 2015 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , Automated test input generation for android: Are we there yet?, IEEE; Alzaylaee, M.K., Yerima, S.Y., Sezer, S., Improving dynamic analysis of android apps using hybrid test input generation (2017) International Conference on Cyber Security and Protection of Digital Services (Cyber Security), pp. 1-8. , https://doi.org/10.1109/CyberSecPODS.2017.8074845; Alzaylaee, M.K., Yerima, S.Y., Sezer, S., 2016 International Conference On Cyber Security And Protection Of Digital Services (Cyber Security) (2016) Dynalog: An Automated Dynamic Analysis Framework for Characterizing Android Applications, pp. 1-8. , https://doi.org/10.1109/CyberSecPODS.2016.7502337; https://github.com/pjlantz/droidbox/wiki/APIMonitor, APIMonitor, Accessed Sept 2018; Alzaylaee, M.K., Yerima, S.Y., Sezer, S., Emulator vs real phone: Android malware detection using machine learning (2017) Proceedings of the 3rd ACM on International Workshop on Security And Privacy Analytics. IWSPA ’17, pp. 65-72. , ACM, Scottsdale: https://doi.org/10.1145/3041008.3041010. http://doi.acm.org/10.1145/3041008.3041010; Bläsing, T., Batyuk, L., Schmidt, A.D., Camtepe, S.A., Albayrak, S., 2010 5th International Conference on Malicious and Unwanted Software (2010) An Android Application Sandbox System for Suspicious Software Detection, pp. 55-62. , https://doi.org/10.1109/MALWARE.2010.5665792; Eder, T., Rodler, M., Vymazal, D., Zeilinger, M., International Conference on Availability, Reliability and Security (2013) Ananas - a Framework for Analyzing Android Applications, (2013), pp. 711-719. , https://doi.org/10.1109/ARES.2013.93; Spreitzenbarth, M., Freiling, F., Echtler, F., Schreck, T., Hoffmann, J., Mobile-sandbox: having a deeper look into android applications (2013) Proceedings of the 28th Annual ACM Symposium on Applied Computing. SAC ’13, pp. 1808-1815. , https://doi.org/10.1145/2480362.2480701, ACM, New York; Zhang, Y., Yang, M., Xu, B., Yang, Z., Gu, G., Ning, P., Wang, X.S., Zang, B., Vetting undesirable behaviors in android apps with permission use analysis (2013) Proceedings of the 2013 ACM SIGSAC Conference on Computer; Communications Security. CCS ’13, pp. 611-622. , https://doi.org/10.1145/2508859.2516689, ACM, New York; (2017), https://developer.android.com/studio/test/monkey.html, Accessed Sept 2018; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ASE 2012, pp. 258-261. , https://doi.org/10.1145/2351676.2351717, ACM, New York; Yang, W., Prasad, M.R., Xie, T., Lecture Notes in Computer Science, Vol. 7793, ed. by Cortellessa V., Varró D.A grey-box approach for automated GUI-model generation of mobile applications (SpringerBerlin, 2013), pp (2013) 250–265, , in Fundamental Approaches to Software Engineering. FASE; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) SIGPLAN Not., 48 (10), pp. 641-660. , https://doi.org/10.1145/2544173.2509549; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN international conference on Object oriented programming systems languages & applications (OOPSLA ’13), pp. 623-640. , https://doi.org/10.1145/2509136.2509552, ACM, New York; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys ’14), pp. 204-217. , ACM, New York: https://doi.org/10.1145/2594368.2594390. http://doi.acm.org/10.1145/2594368.2594390; Li, Y., Yang, Z., Guo, Y., Chen, X., (2017) 2017 IEEE/ACM 39Th International Conference on Software Engineering Companion (ICSE-C). Droidbot: A Lightweight Ui-Guided Test Input Generator for Android, pp. 23-26. , https://doi.org/10.1109/ICSE-C.2017.8; Yajin, Z., Xuxian, J., Android Malware Genome Project, , http://www.malgenomeproject.org/, Accessed Sept 2018; Santoku, L., https://santoku-linux.com/, Accessed July 2018; Arp, D., Spreitzenbarth, M., Malte, H., Gascon, H., Rieck, K., Drebin: Effective and explainable detection of Android malware in your pocket (2014) Symposium on Network and Distributed System Security (NDSS), pp. 23-26. , https://doi.org/10.14722/ndss.2014.23247, February; Aafer, Y., Du, W., Yin, H., DroidAPIMiner: mining API-level features for robust malware detection in Android (2013) Security and Privacy in Communication Networks, 127, pp. 86-103. , https://doi.org/10.1007/978-3-319-04283-1_6; Yerima, S.Y., Sezer, S., Muttik, I., Android malware detection: an eigenspace analysis approach (2015) Science and Information Conference (SAI), 2015, pp. 1236-1242. , https://doi.org/10.1109/SAI.2015.7237302, IEEE, London; Fan, M., Liu, J., Wang, W., Li, H., Tian, Z., Liu, T., Dapasa: detecting android piggybacked apps through sensitive subgraph analysis (2017) IEEE Trans. Inf. Forensics Secur., 12 (8), pp. 1772-1785. , https://doi.org/10.1109/TIFS.2017.2687880; Yerima, S.Y., Sezer, S., Muttik, I., High accuracy android malware detection using ensemble learning (2015) IET Inf. Secur., 9 (6), pp. 313-320. , https://doi.org/10.1049/iet-ifs.2014.0099; Kang, B., Yerima, S.Y., Sezer, S., McLaughlin, K., N-gram opcode analysis for android malware detection (2016) Corr, , http://arxiv.org/abs/1612.01445; Cen, L., Gates, C.S., Si, L., Li, N., A probabilistic discriminative model for android malware detection with decompiled source code (2015) IEEE Trans. Dependable Secure Comput., 12 (4), pp. 400-412. , https://doi.org/10.1109/TDSC.2014.2355839; Westyariandabarsyah, Y.R., 2015 International Conference on Electrical Engineering and Informatics (ICEEI) (2015) Malware Detection on Android Smartphones Using Api Class and Machine Learning, pp. 294-297. , https://doi.org/10.1109/ICEEI.2015.7352513; Kang, B., Yerima, S.Y., McLaughlin, K., Sezer, S., (2016) 2016 International Conference on Cyber Security and Protection of Digital Services (Cyber Security). N-Opcode Analysis for Android Malware Classification and Categorization, pp. 1-7. , https://doi.org/10.1109/CyberSecPODS.2016.7502343; Yerima, S.Y., Sezer, S., Droidfusion: A novel multilevel classifier fusion approach for android malware detection (2018) IEEE Trans. Cybern., 49 (2), pp. 453-466. , Feb 2019, https://doi.org/10.1109/TCYB.2017.2777960; Enck, W., Gilbert, P., Chun, B.-G., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N., TaintDroid: an information-flow tracking system for realtime privacy monitoring on smartphones (2010) Osdi ’10, 49, pp. 1-6. , https://doi.org/10.1145/2494522; (2019), https://code.google.com/archive/p/droidbox/, Accessed Jan; Tam, K., Khan, S.J., Fattori, A., Cavallaro, L., CopperDroid: Automatic reconstruction of android malware behaviors (2015) Ndss (February), pp. 8-11. , https://doi.org/10.14722/ndss.2015.23145; Rastogi, V., Chen, Y., Enck, W., AppsPlayground: Automatic security analysis of smartphone applications (2013) CODASPY ’13 (3Rd ACM Conference on Data and Application Security and Privac), pp. 209-220. , https://doi.org/10.1145/2435349.2435379; (2019), http://tracedroid.few.vu.nl/, Accessed Feb; (2019), https://apkscan.nviso.be/, Accessed Feb; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: segmented evolutionary testing of android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2014), pp. 599-609. , https://doi.org/10.1145/2635868.2635896, ACM, New York; Mao, K., Harman, M., Jia, Y., Sapienz: multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis. ISSTA 2016, pp. 94-105. , ACM, New York: https://doi.org/10.1145/2931037.2931054. http://doi.acm.org/10.1145/2931037.2931054; Mirzaei, N., Bagheri, H., Mahmood, R., Malek, S., 2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE) Sig-Droid: Automated System Input Generation for Android Applications (IEEE, 2015), pp. 461-471. , https://doi.org/10.1109/ISSRE.2015.7381839, Gaithersbury, MD; Dash, S.K., Suarez-Tangil, G., Khan, S., Tam, K., Ahmadi, M., Kinder, J., Cavallaro, L., (2016) 2016 IEEE Security and Privacy Workshops (SPW). Droidscribe: Classifying Android Malware Based on Runtime Behavior, pp. 252-261. , IEEE; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: an input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013), pp. 224-234. , https://doi.org/10.1145/2491411.2491450, ACM, New York; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: automated model-based testing of mobile apps (2015) IEEE Softw., 32 (5), pp. 53-59. , https://doi.org/10.1109/MS.2014.55; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering (FSE ’12), p. 11. , https://doi.org/10.1145/2393596.2393666, ACM, New York; van Der Veen, V., Bos, H., Rossow, C., (2013) Dynamic Analysis of Android Malware; Weichselbaum, L., Neugschwandtner, M., Lindorfer, M., Fratantonio, Y., van Der Veen, V., Platzer, C., (2014) Andrubis: Android Malware under the Magnifying Glass, , Vienna University of Technology, Tech. Rep. TR-ISECLAB-0414- 001; Xu, L., Zhang, D., Jayasena, N., Cavazos, J., Hybrid analysis for detection of malware (2016) Proceedings of SAI Intelligent Systems Conference (Intellisys), 16. , Bi Y., Kapoor S., Bhatia R., Springer, Cham, IntelliSys 2016. Lecture Notes in Networks and Systems; Dimjašević, M., Atzeni, S., Ugrina, I., Rakamaric, Z., Evaluation of android malware detection based on system calls (2016) Proceedings of the 2016 ACM on International Workshop on Security And Privacy Analytics. IWSPA ’16, pp. 1-8. , ACM, New York: https://doi.org/10.1145/2875475.2875487. http://doi.acm.org/10.1145/2875475.2875487; Irolla, P., Filiol, E., Glassbox: Dynamic analysis platform for malware android applications on real devices (2016) Corr, , http://arxiv.org/abs/1609.04718; Dai, S., Tongaonkar, A., Wang, X., Nucci, A., Song, D., (2013) 2013 Proceedings IEEE INFOCOM. Networkprofiler: Towards Automatic Fingerprinting of Android Apps, pp. 809-817. , https://doi.org/10.1109/INFCOM.2013.6566868; Bierma, M., Gustafson, E., Erickson, J., Fritz, D., Choe, Y.R., (2014) Andlantis: Large-scale android dynamic analysis, , http://arxiv.org/abs/1410.7751; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test. AST ’11, pp. 77-83. , ACM, New York: https://doi.org/10.1145/1982595.1982612. http://doi.acm.org/10.1145/1982595.1982612; Cai, H., Ryder, B.G., Tech, V., (2017) Understanding Android Application Programming and Security: A Dynamic Study, 1, pp. 1-12. , https://doi.org/10.1109/ICSME.2017.31; Lindorfer, M., Neugschwandtner, M., (2015) IEEE 39Th Annual Computer Software and Applications Conference. Marvin: Efficient and Comprehensive Mobile App Classification through Static and Dynamic Analysis, 2015, pp. 422-433. , https://doi.org/10.1109/COMPSAC.2015.103, Taichung; Shabtai, A., Kanonov, U., Elovici, Y., Glezer, C., Weiss, Y., Andromaly”: a behavioral malware detection framework for android devices (2012) J. Intell. Inf. Syst., 38 (1), pp. 161-190. , https://doi.org/10.1007/s10844-010-0148-x; Dini, G., Martinelli, F., Saracino, A., Sgandurra, D., MADAM: a multi-level anomaly detector for android malware (2012) Lect. Notes Comput. Sci (Incl. subseries Lect. Notes Artif. Intell. Lect. Notes Bioinforma.), 7531 LNCS, pp. 240-253. , https://doi.org/10.1007/978-3-642-33704-8-21; Cai, H., Meng, N., Ryder, B., Yao, D., (2017) Droidcat: Unified Dynamic Detection of Android Malware; Amos, B., Turner, H., White, J., (2013) Applying machine learning classifiers to dynamic android malware detection at scale, , https://doi.org/10.1109/IWCMC.2013.6583806; Spreitzenbarth, M., Schreck, T., Echtler, F., Arp, D., Hoffmann, J., Mobile-sandbox: combining static and dynamic analysis with machine-learning techniques (2015) Int. J. Inf. Secur., 14 (2), pp. 141-153; Karbab, E.B., Debbabi, M., Alrabaee, S., Mouheb, D., (2016) 2016 11Th International Conference on Malicious and Unwanted Software (MALWARE). Dysign: Dynamic Fingerprinting for the Automatic Detection of Android Malware, pp. 1-8. , https://doi.org/10.1109/MALWARE.2016.7888739; Massarelli, L., Aniello, L., Ciccotelli, C., Querzoni, L., Ucci, D., Baldoni, R., (2017) Android Malware Family Classification Based on Resource Consumption over Time, , http://arxiv.org/abs/1709.00875; Afonso, V.M., de Amorim, M.F., Grégio, A.R.A., Junquera, G.B., de Geus, P.L., Identifying android malware using dynamically obtained features (2015) J. Comput. Virol. Hacking Tech., 11 (1), pp. 9-17","Alzaylaee, M.K.; Centre for Secure Information Technologies (CSIT), United Kingdom; email: malzaylaee01@qub.ac.uk",,,"Springer International Publishing",,,,,2510523X,,,,"English","Eurasip J. Inf. Secur.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85065019743
"Santiago D., Phillips J., Alt P., Muras B., King T.M., Clarke P.J.","56517825600;57203640453;55791897100;57215538728;16241488800;7401877941;","Machine Learning and Constraint Solving for Automated Form Testing",2019,"Proceedings - International Symposium on Software Reliability Engineering, ISSRE","2019-October",, 8987475,"217","227",,,"10.1109/ISSRE.2019.00030","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081113091&doi=10.1109%2fISSRE.2019.00030&partnerID=40&md5=1be86067a371b94f0bd32074f2005a34","Quality and Performance Architecture, Ultimate Software Group, Inc., Weston, FL  33326, United States; School of Computing and Information Sciences, Florida International University, Miami, FL  33199, United States","Santiago, D., Quality and Performance Architecture, Ultimate Software Group, Inc., Weston, FL  33326, United States, School of Computing and Information Sciences, Florida International University, Miami, FL  33199, United States; Phillips, J., Quality and Performance Architecture, Ultimate Software Group, Inc., Weston, FL  33326, United States; Alt, P., Quality and Performance Architecture, Ultimate Software Group, Inc., Weston, FL  33326, United States; Muras, B., Quality and Performance Architecture, Ultimate Software Group, Inc., Weston, FL  33326, United States; King, T.M., Quality and Performance Architecture, Ultimate Software Group, Inc., Weston, FL  33326, United States, School of Computing and Information Sciences, Florida International University, Miami, FL  33199, United States; Clarke, P.J., School of Computing and Information Sciences, Florida International University, Miami, FL  33199, United States","In recent years there has been a focus on the automatic generation of test cases using white box testing techniques, however the same cannot be said for the generation of test cases at the system-level from natural language system requirements. Some of the white-box techniques include: the use of constraint solvers for the automatic generation of test inputs at the white box level; the use of control flow graphs generated from code; and the use of path generation and symbolic execution to generate test inputs and test for path feasibility. Techniques such as boundary value analysis (BVA) may also be used for generating stronger test suites. However, for black box testing we rely on specifications or implicit requirements and spend considerable time and effort designing and executing test cases. This paper presents an approach that leverages natural language processing and machine learning techniques to capture black box system behavior in the form of constraints. Constraint solvers are then used to generate test cases using BVA and equivalence class partitioning. We also conduct a proof of concept that applies this approach to a simplified task management application and an enterprise job recruiting application. © 2019 IEEE.","Black box testing; Constraint solvers; Form crawling; GUI Testing; Machine learning; Natural language processing","Automatic programming; Equivalence classes; Flow graphs; Learning algorithms; Learning systems; Logic programming; Machine learning; Natural language processing systems; Software reliability; Automatic Generation; Boundary value analysis; Constraint solvers; Control flow graphs; GUI testing; Machine learning techniques; NAtural language processing; Natural language systems; Black-box testing",,,,,,,,"Aamodt, A., Plaza, E., Case-based reasoning: Foundational issues, methodological variations, and system approaches (1994) AI Communications, 7 (1), pp. 39-59; Adamo, D., Alt, P., Briggs, K., Celli, N., Clarke, P.J., Daye, P., King, T.M., Santiago, D., (2019) Agent Source Code; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., Bertolino, A., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86 (8), pp. 1978-2001; Arbon, J., AI for software testing (2017) Pacific NW Software Quality Conference. PNSQC; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from guis (2012) International Conference on Fundamental Approaches to Software Engineering, pp. 347-361. , Springer; Cadar, C., Dunbar, D., Engler, D.R., Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) OSDI, 8, pp. 209-224; Cadar, C., Sen, K., Symbolic execution for software testing: Three decades later (2013) Communications of the ACM, 56 (2), pp. 82-90; De Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) International Conference on Tools and Algorithms for the Construction and Analysis of Systems, pp. 337-340. , Springer; Ernst, M.D., Perkins, J.H., Guo, P.J., McCamant, S., Pacheco, C., Tschantz, M.S., Xiao, C., The daikon system for dynamic detection of likely invariants (2007) Science of Computer Programming, 69 (1-3), pp. 35-45; Fruhwirth, T., Constraint handling rules-what else? (2015) International Symposium on Rules and Rule Markup Languages for the Semantic Web, pp. 13-34. , Springer; Furche, T., Gottlob, G., Grasso, G., Guo, X., Orsi, G., Schallhart, C., Opal: Automated form understanding for the deep web (2012) Proceedings of the 21st International Conference on World Wide Web, pp. 829-838. , ACM; Gogar, T., Hubacek, O., Sedivy, J., Deep neural networks for web page information extraction (2016) IFIP International Conference on Artificial Intelligence Applications and Innovations, pp. 154-163. , Springer; Grant, J., Minker, J., Deductive databases (2007) Wiley Encyclopedia of Computer Science and Engineering; Hall, M., Frank, E., Holmes, G., Pfahringer, B., Reutemann, P., Witten, I.H., The weka data mining software: An update (2009) SIGKDD Explor. Newsl., 11 (1), pp. 10-18. , Nov; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Transactions on Software Engineering, 37 (5), pp. 649-678. , Sep; Kuhn, D.R., Wallace, D.R., Gallo, A.M., Software fault interactions and implications for software testing (2004) IEEE Transactions on Software Engineering, 30 (6), pp. 418-421. , June; Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10 (8), pp. 708-710; Li, N., Offutt, J., Test oracle strategies for model-based testing (2017) IEEE Transactions on Software Engineering, 43 (4), pp. 372-395; Liaw, A., Wiener, M., Classification and regression by randomforest (2002) R News, 2 (3), pp. 18-22; Lin, J.-W., Wang, F., Chu, P., Using semantic similarity in crawlingbased web application testing (2017) 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 138-148. , IEEE; Maier, D., Tekle, K.T., Kifer, M., Warren, D.S., Datalog: Concepts, history, and outlook (2018) Declarative Logic Programming, pp. 3-100. , Association for Computing Machinery and Morgan &Claypool; Manning, C., Surdeanu, M., Bauer, J., Finkel, J., Bethard, S., Mc-Closky, D., The stanford corenlp natural language processing toolkit (2014) Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pp. 55-60; Memon, A.M., Automated gui regression testing using ai planning (2004) Artificial Intelligence Methods in Software Testing, pp. 51-99. , World Scientific; Ng, A., (2019) Deep Learning, , https://online.stanford.edu/courses/cs230-deeplearning, Accessed: 2019-08-21; Nguyen, H., Nguyen, T., Freire, J., Learning to extract form labels (2008) Proceedings of the VLDB Endowment, 1 (1), pp. 684-694; Nidhra, S., Dondeti, J., Black box and white box testing techniquesa literature review (2012) International Journal of Embedded Systems and Applications (IJESA), 2 (2), pp. 29-50; Taneja, T.W.P., Icon: Inferring temporal constraints from natural language api descriptions (2016) The International Conference on Software Maintenance and Evolution, pp. 378-388; Papadopoulos, P., Walkinshaw, N., Black-box test generation from inferred models (2015) Realizing Artificial Intelligence Synergies in Software Engineering (RAISE), 2015 IEEE/ACM 4th International Workshop on, pp. 19-24. , IEEE; Patil, T.R., Sherekar, S., Performance analysis of naive bayes and j48 classification algorithm for data classification (2013) International Journal of Computer Science and Applications, 6 (2), pp. 256-261; Pedersen, T., Patwardhan, S., Michelizzi, J., Wordnet: Similarity: Measuring the relatedness of concepts (2004) Demonstration Papers at HLTNAACL 2004, pp. 38-41. , Association for Computational Linguistics; Peterson, L.E., K-nearest neighbor (2009) Scholarpedia, 4 (2), p. 1883; (2018), https://sites.google.com/site/pydatalog/home, Pierre Carbonnelle. pyDatalog. Accessed: 2019-08-21; Quinlan, J.R., Bagging, boosting, and c4 5 (1996) AAAI/IAAI, 1, pp. 725-730; (2018), http://scikit-learn.org/stable/modules/tree.html, ScikitLearn. Decision trees Accessed: 2019-08-21; Sen, K., Marinov, D., Agha, G., Cute: A concolic unit testing engine for c (2005) ACM SIGSOFT Software Engineering Notes, 30, pp. 263-272. , ACM; Sharma, G., Wu, W., Dalal, E.N., The ciede2000 color-difference formula: Implementation notes, supplementary test data, and mathematical observations (2005) Color Research &Application: Endorsed by Inter-Society Color Council, the Colour Group (Great Britain), Canadian Society for Color, Color Science Association of Japan, Dutch Society for the Study of Color, the Swedish Colour Centre Foundation, Colour Society of Australia, Centre Français de la Couleur, 30 (1), pp. 21-30; Sravanthi, S., Semantic similarity between sentences (2017) International Research Journal of Engineering and Technology, 4, pp. 156-161; Veloso, M.M., Learning by analogical reasoning in general problem solving (1992) Carnegie Mellon University, p. 40; Wu, L.W., Wu, X.M., Inferring dependency constraints on parameters for web services (2013) Proceedings of the 22nd International Conference on World Wide Web (WWW '13), pp. 1421-1432; Xu, Z., Zhang, J., A test data generation tool for unit testing of c programs (2006) Quality Software, 2006. QSIC 2006. Sixth International Conference on, pp. 107-116. , IEEE; Zhang, Z., Wu, T., Zhang, J., Boundary value analysis in automatic white-box test generation (2015) Software Reliability Engineering (ISSRE), 2015 IEEE 26th International Symposium on, pp. 239-249. , IEEE",,"Wolter K.Schieferdecker I.Gallina B.Cukier M.Natella R.Ivaki N.Laranjeiro N.","Bosch;Concordia;et al.;German Testing Board e.V.;iRights.Lab;Verteilte Intelligente Systeme e.V.","IEEE Computer Society","30th IEEE International Symposium on Software Reliability Engineering, ISSRE 2019","28 October 2019 through 31 October 2019",,157630,10719458,9781728149813,PSSRF,,"English","Proc. Int. Symp. Softw. Reliab. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85081113091
"Wang Y., Xu H., Zhou Y., Lyu M.R., Wang X.","57215539962;57189049589;15046284500;7006811415;56029076400;","Textout: Detecting Text-Layout Bugs in Mobile Apps via Visualization-Oriented Learning",2019,"Proceedings - International Symposium on Software Reliability Engineering, ISSRE","2019-October",, 8987514,"239","249",,,"10.1109/ISSRE.2019.00032","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081112062&doi=10.1109%2fISSRE.2019.00032&partnerID=40&md5=cbd943c1a750867a07b0534842562600","School of Computer Science, Fudan University, Shanghai, China; Dept. of Computer Science and Engineering, Chinese University of Hong Kong, Hong Kong; Shenzhen Research Institute, Chinese University of Hong Kong, Shenzhen, China; Shanghai Key Laboratory of Intelligent Information Processing, Shanghai, China","Wang, Y., School of Computer Science, Fudan University, Shanghai, China, Shanghai Key Laboratory of Intelligent Information Processing, Shanghai, China; Xu, H., Dept. of Computer Science and Engineering, Chinese University of Hong Kong, Hong Kong, Shenzhen Research Institute, Chinese University of Hong Kong, Shenzhen, China; Zhou, Y., School of Computer Science, Fudan University, Shanghai, China, Shanghai Key Laboratory of Intelligent Information Processing, Shanghai, China; Lyu, M.R., Dept. of Computer Science and Engineering, Chinese University of Hong Kong, Hong Kong, Shenzhen Research Institute, Chinese University of Hong Kong, Shenzhen, China; Wang, X., School of Computer Science, Fudan University, Shanghai, China, Shanghai Key Laboratory of Intelligent Information Processing, Shanghai, China","Layout bugs commonly exist in mobile apps. Due to the fragmentation issues of smartphones, a layout bug may occur only on particular versions of smartphones. It is quite challenging to detect such bugs for state-of-the-art commercial automated testing platforms, although they can test an app with thousands of different smartphones in parallel. The main reason is that typical layout bugs neither crash an app nor generate any error messages. In this paper, we present our work for detecting text-layout bugs, which account for a large portion of layout bugs. We model text-layout bug detection as a classification problem. This then allows us to address it with sophisticated image processing and machine learning techniques. To this end, we propose an approach which we call Textout. Textout takes screenshots as its input and adopts a specifically-tailored text detection method and a convolutional neural network (CNN) classifier to perform automatic text-layout bug detection. We collect 33,102 text-region images as our training dataset and verify the effectiveness of our tool with 1,481 text-region images collected from real-world apps. Textout achieves an AUC (area under the curve) of 0.956 on the test dataset and shows an acceptable overhead. The dataset is open-source released for follow-up research. © 2019 IEEE.","Deep learning; GUI bug detection; GUI testing; Mobile application testing; Text-layout bug detection","Convolutional neural networks; Deep learning; E-learning; Graphical user interfaces; Image processing; Learning systems; Open source software; Smartphones; Software reliability; Statistical tests; Area under the curves; Automated testing; Bug detection; GUI testing; Machine learning techniques; Mobile application testing; State of the art; Training dataset; Text processing",,,,,"National Natural Science Foundation of China, NSFC: 61571136, 61672164

Chinese University of Hong Kong, CUHK: 14210717","This work is supported by the National Natural Science Foundation of China (Project Nos. 61672164 and 61571136). Lyu and Xu's work was supported by the Research Grants Council of the Hong Kong Special Administrative Region, China (No. CUHK 14210717 of the General Research Fund), and Microsoft Research Asia (2018 Microsoft Research Asia Collaborative Research Award)","IX. ACKNOWLEDGEMENT The authors are grateful to their shepherd Dr. S. Baner-jee and anonymous reviewers for the detailed and valuable comments. This work is supported by the National Natural Science Foundation of China (Project Nos. 61672164 and 61571136). Lyu and Xu’s work was supported by the Research Grants Council of the Hong Kong Special Administrative Region, China (No. CUHK 14210717 of the General Research Fund), and Microsoft Research Asia (2018 Microsoft Research Asia Collaborative Research Award). Yangfan Zhou is the corresponding author.","Zhang, A., He, Y., Jiang, Y., Crashfuzzer: Detecting input processing related crash bugs in android applications (2016) Proc. of the 2016 IEEE 35th International Performance Computing and Communications Conference (IPCCC). IEEE, pp. 1-8; Kang, Y., Zhou, Y., Xu, H., Lyu, M.R., Diagdroid: Android performance diagnosis via anatomizing asynchronous executions (2016) Proc. of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 410-421. , ACM; Kang, Y., Zhou, Y., Gao, M., Sun, Y., Lyu, M.R., Experience report: Detecting poor-responsive ui in android applications (2016) Proc. of the 2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE), pp. 490-501. , IEEE; Mahajan, S., Alameer, A., McMinn, P., Halfond, W.G., Automated repair of layout cross browser issues using search-based techniques (2017) Proc. of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 249-260. , ACM; http://gs.statcounter.com/platform-market-share/desktopmobile-tablet/worldwide, StatCounter; Khalid, H., Shihab, E., Nagappan, M., Hassan, A.E., What do mobile app users complain about? (2014) IEEE Software, 32 (3), pp. 70-77; Wei, L., Liu, Y., Cheung, S.-C., Taming android fragmentation: Characterizing and detecting compatibility issues for android apps (2016) Proc. of the 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 226-237. , IEEE; Hasselknippe, K.F., Li, J., A novel tool for automatic gui layout testing (2017) Proc. of the 24th Asia-Pacific Software Engineering Conference (APSEC), pp. 695-700. , IEEE; Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Bernstein, M., Imagenet large scale visual recognition challenge (2015) International Journal of Computer Vision, 115 (3), pp. 211-252; Mahajan, S., Halfond, W.G., Finding HTML presentation failures using image comparison techniques (2014) Proc. of the 29th ACM/IEEE International Conference on Automated Software Engineering, pp. 91-96. , ACM; https://code.google.com/archive/p/fighting-layout-bugs; Lu, H., Wang, L., Ye, M., Yan, K., Jin, Q., DNN-based image classification for software gui testing (2018) Proc. of the 2018 IEEE SmartWorld, Ubiquitous Intelligence &Computing, Advanced &Trusted Computing, Scalable Computing &Communications, Cloud &Big Data Computing, Internet of People and Smart City Innovation, pp. 1818-1823. , IEEE; Wang, H., Rath, S., Sharan, Y., https://www.ebayinc.com/stories/blogs/tech/gui-testing-powered-by-deep-learning/; https://applitools.com; https://developer.android.com/studio/debug/layoutinspector, Android Inspector; https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/debuggingwithxcode/chapters/specialdebuggingworkflows.html, View Hierarchy Debugger; Deng, J., Dong, W., Socher, R., Li, L.-J., Li, K., Fei-Fei, L., ImageNet: A large-scale hierarchical image database (2009) Proc. of the IEEE Conference on Computer Vision and Pattern Recognition; He, T., Huang, W., Qiao, Y., Yao, J., Text-attentional convolutional neural network for scene text detection (2016) IEEE Transactions on Image Processing, 25 (6), pp. 2529-2541; Zhang, Z., Zhang, C., Shen, W., Yao, C., Liu, W., Bai, X., Multioriented text detection with fully convolutional networks (2016) Proc. of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 4159-4167; He, K., Zhang, X., Ren, S., Sun, J., Deep residual learning for image recognition (2016) Proc. of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 770-778","Zhou, Y.; School of Computer Science, China","Wolter K.Schieferdecker I.Gallina B.Cukier M.Natella R.Ivaki N.Laranjeiro N.","Bosch;Concordia;et al.;German Testing Board e.V.;iRights.Lab;Verteilte Intelligente Systeme e.V.","IEEE Computer Society","30th IEEE International Symposium on Software Reliability Engineering, ISSRE 2019","28 October 2019 through 31 October 2019",,157630,10719458,9781728149813,PSSRF,,"English","Proc. Int. Symp. Softw. Reliab. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85081112062
"Zhao W., Ding Z., Xia M., Qi Z.","57215347185;57215364576;55272830600;7202289842;","Systematically Testing and Diagnosing Responsiveness for Android Apps",2019,"Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",,, 8918940,"449","453",,1,"10.1109/ICSME.2019.00077","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077212925&doi=10.1109%2fICSME.2019.00077&partnerID=40&md5=d6b56896fbed21ade6e9029b98e820b2","Shanghai Jiao Tong University, Shanghai, China; AppetizerIO","Zhao, W., Shanghai Jiao Tong University, Shanghai, China; Ding, Z., Shanghai Jiao Tong University, Shanghai, China; Xia, M., AppetizerIO; Qi, Z., Shanghai Jiao Tong University, Shanghai, China","App responsiveness is the most intuitive interpretation of app performance from user's perspective. Traditional performance profilers only focus on one kind of program activities (e.g., CPU profiling), while the cause for slow responsiveness is diverse or even due to the joint effect of multiple kinds. Also, various test configurations, such as device hardware and wireless connectivity can have dramatic impact on particular program activities and indirectly affect app responsiveness. Conventional mobile testing lacks mechanisms to reveal configuration-sensitive bugs. In this paper, we propose AppSPIN, a tool to automatically diagnose app responsiveness bugs and systematically explore configuration-sensitive bugs. AppSPIN instruments the app to collect program events and UI responsiveness. The instrumented app is exercised with automated monkey testers and AppSPIN correlates excessive and lengthy program events with bad responsiveness detected at runtime. The diagnosis process also synthesizes the major resource bottleneck for the app. After one test run, AppSPIN automatically alters the test configuration to with most bottlenecked resource to further explore responsiveness bugs happened only with particular test configurations. Our preliminary experiments with 30 real-world apps show that AppSPIN can detect 123 responsiveness bugs and successfully diagnose the cause for 87% cases, within an average of 15-minute test time. Also with altered test configurations, AppSPIN uncovers a notable number of new bugs within four extra test runs. © 2019 IEEE.","Android; configuration; Responsiveness","Application programs; Computer software maintenance; Program debugging; Software testing; Android; configuration; Joint effect; Mobile testing; Program activities; Responsiveness; Test configurations; Wireless connectivities; Android (operating system)",,,,,"61525204, 61672344, 61732010

National Key Research and Development Program of China Stem Cell and Translational Research: 2016YFB1000502","This work was supported in part by National Key Research & Development Program of China (No.2016YFB1000502), National NSF of China (NO. 61672344, 61525204, 61732010), and Shanghai Key Laboratory of Scalable Computing and Systems.",,"Vásquez, M.L., Vendome, C., Luo, Q., Poshyvanyk, D., How developers detect and fix performance bottlenecks in android apps (2015) 2015 IEEE International Conference on Software Maintenance and Evolution, ICSME 2015, pp. 352-361. , Bremen, Germany, September 29-October 1 2015, R. Koschke, J. Krinke, M. P. Robillard, Eds. IEEE Computer Society; Liu, Y., Xu, C., Cheung, S., Characterizing and detecting performance bugs for smartphone applications (2014) 36th International Conference on Software Engineering, ICSE '14, Hyderabad, India-May 31-June 07, pp. 1013-1024. , P. Jalote, L. C. Briand, A. van der Hoek, Eds. ACM; Liang, C.M., Lane, N.D., Brouwers, N., Zhang, L., Karlsson, B.F., Liu, H., Liu, Y., Zhao, F., Caiipa: Automated large-scale mobile app testing through contextual fuzzing (2014) The 20th Annual International Conference on Mobile Computing and Networking, MobiCom'14, pp. 519-530. , Maui, HI, USA, September 7-11, 2014, S. Lee, A. Sabharwal, P. Sinha, Eds. ACM; Xiong, W., Chen, S., Zhang, Y., Xia, M., Qi, Z., Reproducible interference-aware mobile testing (2018) 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018, pp. 36-47. , Madrid, Spain, September 23-29, 2018. IEEE Computer Society; Huang, T., Zhang, Z., Zhu, X., Analyzing GUI running fluency for android apps (2016) Proceedings of the 3rd ACM Workshop on Mobile Sensing, Computing and Communication, MSCC@MobiHoc 2016, pp. 16-22. , Paderborn, Germany, July 5-8 2016, X. Li, Ed. ACM; Gao, Y., Luo, Y., Chen, D., Huang, H., Dong, W., Xia, M., Liu, X., Bu, J., Every pixel counts: Fine-grained UI rendering analysis for mobile applications (2017) 2017 IEEE Conference on Computer Communications, INFOCOM 2017, pp. 1-9. , Atlanta, GA, USA, May 1-4, 2017. IEEE; Rosen, S., Nikravesh, A., Guo, Y., Mao, Z.M., Qian, F., Sen, S., Revisiting network energy efficiency of mobile apps: Performance in the wild (2015) Proceedings of the 2015 ACM Internet Measurement Conference, IMC 2015, Tokyo, pp. 339-345. , Japan, October 28-30 2015, K. Cho, K. Fukuda, V. S. Pai, N. Spring, Eds. ACM; Ravindranath, L., Padhye, J., Agarwal, S., Mahajan, R., Obermiller, I., Shayandeh, S., Appinsight: Mobile app performance monitoring in the wild (2012) 10th USENIX Symposium on Operating Systems Design and Implementation, OSDI 2012, pp. 107-120. , Hollywood, CA, USA, October 8-10 2012, C. Thekkath and A. Vahdat, Eds. USENIX Association; Zhang, L., Bild, D., Dick, R., Mao, Z., Dinda, P., Panappticon: Eventbased tracing to measure mobile application and platform performance (2013) Hardware/Software Codesign and System Synthesis (CODES+ISSS), 2013 International Conference on, pp. 1-10. , Sept; Kwon, Y., Lee, S., Yi, H., Kwon, D., Yang, S., Chun, B.-G., Huang, L., Paek, Y., Mantis: Automatic performance prediction for smartphone applications (2013) Proceedings of the 2013 USENIX Conference on Annual Technical Conference, pp. 297-308. , USENIX ATC'13. Berkeley, CA, USA: USENIX Association; Xu, Q., Mehrotra, S., Mao, Z., Li, J., Proteus: Network performance forecast for real-time, interactive mobile applications (2013) Proceeding of the 11th Annual International Conference on Mobile Systems, Applications, Services, pp. 347-360. , MobiSys '13. New York, NY, USA ACM; Wei, X., Gomez, L., Neamtiu, I., Faloutsos, M., Profiledroid: Multilayer profiling of android applications (2012) Proceedings of the 18th Annual International Conference on Mobile Computing and Networking, pp. 137-148. , Mobicom '12. New York, NY, USA ACM; Mudduluru, R., Ramanathan, M.K., Efficient flow profiling for detecting performance bugs (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA 2016, Saarbrücken, pp. 413-424. , Germany, July 18-20, 2016, A. Zeller and A. Roychoudhury, Eds. ACM; Brocanelli, M., Wang, X., Hang doctor: Runtime detection and diagnosis of soft hangs for smartphone apps (2018) Proceedings of the Thirteenth EuroSys Conference, EuroSys 2018, Porto, Portugal, pp. 61-615. , April 23-26 2018, R. Oliveira, P. Felber, Y. C. Hu, Eds. ACM; Chen, Q.A., Luo, H., Rosen, S., Mao, Z.M., Iyer, K., Hui, J., Sontineni, K., Lau, K., Qoe doctor: Diagnosing mobile app qoe with automated ui control and cross-layer analysis (2014) Proceedings of the 2014 Conference on Internet Measurement Conference, pp. 151-164. , IMC '14. New York, NY, USA ACM; Habchi, S., Blanc, X., Rouvoy, R., On adopting linters to deal with performance concerns in android apps (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, Ser. ASE 2018, pp. 6-16. , New York, NY, USA: ACM; Android Performance Patterns: Why 60fps, , http://www.youtube.com/watchv=CaMTIgxCSqU/; Measure App Performance, , http://developer.android.com/studio/profile/android-profiler/; Maxim, , http://github.com/zhangzhao4444/Maxim/; AppetizerIO, , http://github.com/appetizerio/; Hrubý, T., Bos, H., Tanenbaum, A.S., When slower is faster: On heterogeneous multicores for reliable systems (2013) 2013 USENIX Annual Technical Conference, pp. 255-266. , San Jose, CA, USA, June 26-28, 2013, A. Birrell and E. G. Sirer, Eds. USENIX Association",,,,"Institute of Electrical and Electronics Engineers Inc.","2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019","30 September 2019 through 4 October 2019",,155692,,9781728130941,,,"English","Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME",Conference Paper,"Final","",Scopus,2-s2.0-85077212925
"Coppola R., Ardito L., Torchiano M.","57191261885;36184897700;6602571197;","Fragility of layout-based and visual gui test scripts: An assessment study on a hybrid mobile application",2019,"A-TEST 2019 - Proceedings of the 10th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, co-located with ESEC/FSE 2019",,,,"28","34",,1,"10.1145/3340433.3342824","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85076391911&doi=10.1145%2f3340433.3342824&partnerID=40&md5=1bf6134042667df66e0c5df8f7a4d47b","Politecnico di Torino, Turin, Italy","Coppola, R., Politecnico di Torino, Turin, Italy; Ardito, L., Politecnico di Torino, Turin, Italy; Torchiano, M., Politecnico di Torino, Turin, Italy","Albeit different approaches exist for automated GUI testing of hybrid mobile applications, the practice appears to be not so commonly adopted by developers. A possible reason for such a low diffusion can be the fragility of the techniques, i.e. the frequent need for maintaining test cases when the GUI of the app is changed. In this paper, we perform an assessment of the maintenance needed by test cases for a hybrid mobile app, and the related fragility causes. We evaluated a small test suite with a Layout-based testing tool (Appium) and a Visual one (EyeAutomate) and observed the changes needed by tests during the co-evolution with the GUI of the app. We found that 20% Layout-based test methods and 30% Visual test methods had to be modified at least once, and that each release induced fragilities in 3-4% of the test methods. Fragility of GUI tests can induce relevant maintenance efforts in test suites of large applications. Several principal causes for fragilities have been identified for the tested hybrid application, and guidelines for developers are deduced from them. Copyright © A-TEST 2019 - ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, co-located with ESEC/FSE 2019.All right reserved.","Automated software testing; Empirical Software Engineering; GUI testing; Image Recognition Testing; Mobile Development; Software maintenance","Computer software maintenance; Computer software selection and evaluation; Graphical user interfaces; Image recognition; Maintenance; Mobile computing; Testing; Automated software testing; Empirical Software Engineering; GUI testing; Hybrid applications; Maintenance efforts; Mobile applications; Mobile Development; Testing tools; Software testing",,,,,,,,"Alégroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual gui testing: An empirical study (2015) Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference on, pp. 1-10; Alégroth, E., Karlsson, A., Radway, A., Continuous integration and visual gui testing: Benefits and drawbacks in industrial practice (2018) Software Testing, Verification and Validation (ICST), 2018 IEEE 11th International Conference on, pp. 172-181; Ardito, L., Coppola, R., Morisio, M., Torchiano, M., Espresso vs eyeautomate: An experiment for the comparison of two generations of android gui testing (2019) Proceedings of the Evaluation and Assessment on Software Engineering (EASE '19), pp. 13-22. , ACM, New York, NY, USA; Ardito, L., Coppola, R., Torchiano, M., Alegroth, E., Towards automated translation between generations of gui-based tests for mobile devices (2018) Proceedings of INTUITESTBEDS 2018, JointWorkshop of the 4th InternationalWorkshop on User Interface Test Automation, and 8th Workshop on TESting Techniques for Event BasED Software; Bosnic, S., Papp, I., Novak, S., The development of hybrid mobile applications with Apache Cordova (2016) 2016 24th Telecommunications Forum (TELFOR), pp. 1-4; Bruns, A., Kornstadt, A., Wichmann, D., Web application tests with selenium (2009) IEEE Software, 26 (5). , 2009; Caldiera Basili-Gianluigi, V.R., Dieter Rombach, H., Goal question metric paradigm (1994) Encyclopedia of Software Engineering, 1, pp. 528-532. , 1994; Claes Claes, W., Runeson, R., Per, Höst, H., Martin, Ohlsson, C.O., Magnus, Wesslén, A., (2012) Experimentation in Software Engineering, , Springer; Coppola, R., Morisio, M., Torchiano, M., Scripted gui testing of android apps: A study on diffusion, evolution and fragility (2017) Proceedings of the 13th International Conference on Predictive Models and Data Analytics in Software Engineering, pp. 22-32; Coppola, R., Morisio, M., Torchiano, M., Maintenance of android widget-based gui testing: A taxonomy of test case modification causes (2018) 2018 IEEE International Conference on Software Testing, Verification and ValidationWorkshops (ICSTW), pp. 151-158; Coppola, R., Morisio, M., Torchiano, M., Mobile gui testing fragility: A study on open-source android applications (2018) IEEE Transactions on Reliability, pp. 1-24. , 2018; Coppola, R., Morisio, M., Torchiano, M., Ardito, L., Scripted GUI testing of Android open-source apps: Evolution of test code and fragility causes (2019) Empirical Software Engineering, , 18 May 2019; Dalmasso, I., Kanti Datta, S., Bonnet, C., Nikaein, N., Survey, comparison and evaluation of cross platform mobile application development tools (2013) 2013 9th International Wireless Communications and Mobile Computing Conference (IWCMC), pp. 323-328; Jabangwe, R., Edison, H., Nguyen Duc, A., Software engineering process models for mobile app development: A systematic literature review (2018) Journal of Systems and Software, 145, pp. 98-111. , 2018; Erfani Joorabchi, M., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) Empirical Software Engineering and Measurement, 2013 ACM/IEEE International Symposium On. IEEE, pp. 15-24; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), pp. 1-10; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Pesto: Automated migration of DOM-based Web tests towards the visual approach (2018) Software Testing, Verification and Reliability, 28 (4), p. e1665. , 2018; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A newperspective for automated mobile app testing (2017) Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference on, pp. 399-410; Luo, Q., Hariri, F., Eloussi, L., Marinov, D., An empirical analysis of flaky tests (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 643-653; Malavolta, I., Ruberto, S., Soru, T., Terragni, V., End users' perception of hybrid mobile apps in the google play store (2015) 2015 IEEE International Conference on Mobile Services, pp. 25-32; Shah, G., Shah, P., Muchhala, R., Software testing automation using appium (2014) International Journal of Current Engineering and Technology, 4 (5), pp. 3528-3531. , 2014; Yeh, T., Chang, T., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192",,"Vos T.E.J.Prasetya W.Getir S.","ACM SIGSOFT","Association for Computing Machinery, Inc","10th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, A-TEST 2019, co-located with the 27th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2019","26 August 2019 through 27 August 2019",,154996,,9781450368506,,,"English","A-TEST - Proc. ACM SIGSOFT Int. Workshop Autom. TEST Case Des., Sel., Evaluation, co-located ESEC/FSE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85076391911
"Sui Y., Zhang Y., Zheng W., Zhang M., Xue J.","54788439800;57211359045;57212360752;57210928814;7202881461;","Event trace reduction for effective bug replay of Android apps via differential GUI state analysis",2019,"ESEC/FSE 2019 - Proceedings of the 2019 27th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering",,,,"1095","1099",,1,"10.1145/3338906.3341183","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071936181&doi=10.1145%2f3338906.3341183&partnerID=40&md5=dde9445a860f849daa074a37598f56e3","University of Technology Sydney, Australia; Alibaba Group, China; Northwestern Polytechnical University, China; UNSW, Australia","Sui, Y., University of Technology Sydney, Australia; Zhang, Y., Alibaba Group, China; Zheng, W., Northwestern Polytechnical University, China; Zhang, M., Northwestern Polytechnical University, China; Xue, J., UNSW, Australia","Existing Android testing tools, such as Monkey, generate a large quantity and a wide variety of user events to expose latent GUI bugs in Android apps. However, even if a bug is found, a majority of the events thus generated are often redundant and bug-irrelevant. In addition, it is also time-consuming for developers to localize and replay the bug given a long and tedious event sequence (trace). This paper presents ECHO, an event trace reduction tool for effective bug replay by using a new differential GUI state analysis. Given a sequence of events (trace), ECHO aims at removing bug-irrelevant events by exploiting the differential behavior between the GUI states collected when their corresponding events are triggered. During dynamic testing, ECHO injects at most one lightweight inspection event after every event to collect its corresponding GUI state. A new adaptive model is proposed to selectively inject inspection events based on sliding windows to differentiate the GUI states on-the-fly in a single testing process. The experimental results show that ECHO improves the effectiveness of bug replay by removing 85.11% redundant events on average while also revealing the same bugs as those detected when full event sequences are used. © 2019 ACM.","Android testing; Bug replay; Program analysis","Dynamic analysis; Graphical user interfaces; Program debugging; Software testing; Trace analysis; Adaptive modeling; Bug replay; Dynamic testing; Program analysis; Reduction tools; Redundant event; Sequence of events; Testing process; Android (operating system)",,,,,,,,"Addi, A Math Calculation Environment, , https://f-droid.org/en/packages/com.addi/; Appium: Mobile App Automation Made Awesome, , http://appium.io/; F-Droid: Open-Source Android Apps Repository, , https://f-droid.org/; Google Monkey, , https://developer.android.com/studio/test/monkey.html; Anand, S., Naik, M., Jean Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) FSE '12, p. 59; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) OOPSLA '13, pp. 641-660; Baek, Y., Bae, D., Automated model-based android gui testing using multi-level gui comparison criteria (2016) ASE '16, pp. 238-249; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) OOPSLA '13, pp. 623-640; Choi, W., Sen, K., Necula, G., Wang, W., Detreduce: Minimizing android gui test suites for regression testing (2018) ICSE '18. ACM, pp. 445-455; Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (e) (2015) ASE '15, pp. 429-440; Clapp, L., Bastani, O., Anand, S., Aiken, A., Minimizing gui event traces (2016) FSE '16, pp. 422-434; Gao, X., Hwei Tan, S., Dong, Z., Roychoudhury, A., Android testing via synthetic symbolic execution (2018) ASE '18. ACM, pp. 419-429; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) ISSTA '13. ACM, pp. 67-77; Jiang, B., Wu, Y., Li, T., Chan, W.K., Simplydroid: Efficient event sequence simplification for android application (2017) ASE '17, pp. 297-307; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) FSE '13, pp. 224-234; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) FSE '14, pp. 599-609; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications ISSTA '16, pp. 94-105; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in gui testing of android applications (2016) ICSE '16, pp. 559-570; Song, W., Qian, X., Huang, J., Ehbdroid: Beyond gui testing for android applications (2017) ASE '17, pp. 27-37; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based gui testing of android apps FSE '17, pp. 245-256; Sui, Y., Xue, J., Svf: Interprocedural static value-flow analysis in llvm (2016) CC '16. ACM, pp. 265-266; Wang, W., Li, D., Yang, W., Cao, Y., Zhang, Z., Deng, Y., Xie, T., An empirical study of android test generation tools in industrial cases (2018) ASE '18. ACM, pp. 738-748; Wu, D., Liu, J., Sui, Y., Chen, S., Xue, J., Precise static happens-before analysis for detecting uaf order violations in android (2019) ICST '19. IEEE, pp. 276-287; Xu, X., Sui, Y., Yan, H., Xue, J., Vfix: Value-flow-guided precise program repair for null pointer dereferences (2019) ICSE '19. IEEE Press, pp. 512-523; Zeller, A., Yesterday, my program worked. today, it does not. why? (1999) FSE '99, pp. 253-267; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Transactions on Software Engineering, 28 (2), pp. 183-200; Zhang, Y., Sui, Y., Xue, J., Launch-mode-aware contextsensitive activity transition analysis (2018) ICSE '18. IEEE, pp. 598-608",,"Apel S.Dumas M.Russo A.Pfahl D.","ACM SIGSOFT","Association for Computing Machinery, Inc","27th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2019","26 August 2019 through 30 August 2019",,150532,,9781450355728,,,"English","ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85071936181
"White T.D., Fraser G., Brown G.J.","55361024800;9247521200;7406465050;","Improving random GUI testing with image-based widget detection",2019,"ISSTA 2019 - Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"307","317",,8,"10.1145/3293882.3330551","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85070598252&doi=10.1145%2f3293882.3330551&partnerID=40&md5=16024ef30cb1dda94d3683dfb9db33a9","Department of Computer Science, University of Sheffield, Sheffield, United Kingdom; Depart of Software Engineering II, University of Passau Passau, Germany","White, T.D., Department of Computer Science, University of Sheffield, Sheffield, United Kingdom; Fraser, G., Depart of Software Engineering II, University of Passau Passau, Germany; Brown, G.J., Department of Computer Science, University of Sheffield, Sheffield, United Kingdom","Graphical User Interfaces (GUIs) are amongst the most common user interfaces, enabling interactions with applications through mouse movements and key presses. Tools for automated testing of programs through their GUI exist, however they usually rely on operating system or framework specific knowledge to interact with an application. Due to frequent operating system updates, which can remove required information, and a large variety of different GUI frameworks using unique underlying data structures, such tools rapidly become obsolete, Consequently, for an automated GUI test generation tool, supporting many frameworks and operating systems is impractical. We propose a technique for improving GUI testing by automatically identifying GUI widgets in screen shots using machine learning techniques. As training data, we generate randomized GUIs to automatically extract widget information. The resulting model provides guidance to GUI testing tools in environments not currently supported by deriving GUI widget information from screen shots only. In our experiments, we found that identifying GUI widgets in screen shots and using this information to guide random testing achieved a significantly higher branch coverage in 18 of 20 applications, with an average increase of 42.5% when compared to conventional random testing. © 2019 Association for Computing Machinery.","Black box testing; Data generation; GUI testing; Neural networks; Object detection; Random testing; Software engineering","Application programs; Graphical user interfaces; Image enhancement; Learning systems; Mammals; Neural networks; Object detection; Software engineering; Automated testing; Data generation; Graphical user interface (GUIs); GUI testing; Machine learning techniques; Random testing; Specific knowledge; Test generations; Black-box testing",,,,,"Engineering and Physical Sciences Research Council, EPSRC: EP/N023978/2",,,"(2015) Monkeyrunner, , roid Developers; Bajammal, M., Mesbah, A., Web canvas testing through visual inference (2018) 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST), pp. 193-203. , https://doi.org/10.1109/ICST.2018.00028; Bauersfeld, S., Vos, T.E.J., Guitest: A Java library for fully automated GUI robustness testing (2012) 2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 330-333. , https://doi.org/10.1145/2351676.2351739; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from Guis (2012) Fundamental Approaches to Software Engineering, pp. 347-361. , Juan de Lara and Andrea Zisman (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg; Borges, N.P., Jr., Gómez, M., Zeller, A., Guiding app testing with mined interaction models (2018) Proceedings of the 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft’18), pp. 133-143. , https://doi.org/10.1145/3197231.3197243, ACM, New York, NY, USA; Chahim, H., Duran, M., Vos, T.E.J., (2018) Challenging TESTAR in An Industrial Setting: The Rail Sector, , 2018; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android:are we there yet? (E) (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440; Ding, J., Chen, B., Liu, H., Huang, M., Convolutional neural network with data augmentation for SAR target recognition (2016) IEEE Geoscience and Remote Sensing Letters, 13 (3), pp. 364-368. , https://doi.org/10.1109/LGRS.2015.2513754, March 2016; Forrester, J.E., Miller, B.P., An empirical study of the robustness of Windows NT applications using random testing (2000) Proceedings of the 4th USENIX Windows System Symposium, pp. 59-68. , Seattle; Fraser, G., Arcuri, A., A large-scale evaluation of automated unit test generation using evosuite (2014) ACM Transactions on Software Engineering and Methodology (TOSEM), 24 (2), p. 42. , https://doi.org/10.1145/2685612, Article Dec. 2014; Gao, Z., Liang, Y., Cohen, M.B., Memon, A.M., Wang, Z., Making system user interactive tests repeatable: When and what should we control? (2015) 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, 1, pp. 55-65; Girshick, R., Donahue, J., Darrell, T., Malik, J., Rich feature hierarchies for accurate object detection and semantic segmentation (2014) Proceedings of the 2014 IEEE Conference on Computer Vision and Pattern Recognition (CVPR’14), pp. 580-587. , https://doi.org/10.1109/CVPR.2014.81, IEEE Computer Society, Washington, DC, USA; Lo, R., Webby, R., Jeffery, R., Sizing and estimating the coding and unit testing effort for GUI systems (1996) Proceedings of the 3rd International Software Metrics Symposium, pp. 166-173. , https://doi.org/10.1109/METRIC.1996.492453; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective Automated Testing for Android Applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 94-105; Mariani, L., PezzÃĺ, M., Riganelli, O., Santoro, M., (2011) AutoBlackTest: A Tool for Automatic Black-Box Testing, pp. 1013-1015. , https://doi.org/10.1145/1985793.1985979, May 2011; Memon, A., Banerjee, I., Nagarajan, A., GUi Ripping: Reverse engineering of graphical user interfaces for testing (2003) 10th Working Conference on Reverse Engineering, 2003. WCRE 2003. Proceedings., pp. 260-269. , https://doi.org/10.1109/WCRE.2003.1287256; Nguyen, B., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21. , https://doi.org/10.1007/s10515-013-0128-9, 03 2014; Redmon, J., Divvala, S.K., Girshick, R.B., Farhadi, A., You only look once: Unified, real-time object detection (2015) CoRR, , http://arxiv.org/abs/1506.02640, abs/1506.02640 2015; Redmon, J., Farhadi, A., YOLO9000: Better, faster, stronger (2016) CoRR, , http://arxiv.org/abs/1612.08242, abs/1612.08242 2016; Redmon, J., Farhadi, A., Yolov3: An incremental improvement (2018) CoRR, , http://arxiv.org/abs/1804.02767, abs/1804.02767 2018; Russakovsky, O., Li, L., Fei-Fei, L., Best of both worlds: Human-machine collaboration for object annotation (2015) 2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 2121-2131. , https://doi.org/10.1109/CVPR.2015.7298824; Salamon, J., Bello, J.P., Deep convolutional neural networks and data augmentation for environmental sound classification (2017) IEEE Signal Processing Letters, 24 (3), pp. 279-283. , https://doi.org/10.1109/LSP.2017.2657381, March 2017; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 245-256; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of the 22Nd Annual ACM Symposium on User Interface Software and Technology (UIST’09), pp. 183-192. , https://doi.org/10.1145/1622176.1622213, ACM, New York, NY, USA",,"Zhang D.Moller A.","ACM SIGSOFT","Association for Computing Machinery, Inc","28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019","15 July 2019 through 19 July 2019",,149531,,9781450362245,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85070598252
"Degott C., Borges N.P., Jr., Zeller A.","57210413571;57190220281;7007015864;","Learning user interface element interactions",2019,"ISSTA 2019 - Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"101","111",,10,"10.1145/3293882.3330569","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85070589967&doi=10.1145%2f3293882.3330569&partnerID=40&md5=31aa6b4fa22cd8803792161982804610","CISPA Helmholtz Center for Information Security, Saarbrücken, Germany","Degott, C., CISPA Helmholtz Center for Information Security, Saarbrücken, Germany; Borges, N.P., Jr., CISPA Helmholtz Center for Information Security, Saarbrücken, Germany; Zeller, A., CISPA Helmholtz Center for Information Security, Saarbrücken, Germany","When generating tests for graphical user interfaces, one central problem is to identify how individual UI elements can be interacted with—clicking, long- or right-clicking, swiping, dragging, typing, or more. We present an approach based on reinforcement learning that automatically learns which interactions can be used for which elements, and uses this information to guide test generation. We model the problem as an instance of the multi-armed bandit problem (MAB problem) from probability theory, and show how its traditional solutions work on test generation, with and without relying on previous knowledge. © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.","Android; Multi-Armed Bandit problem; Test generation; User interactions","Graphical user interfaces; Probability; Reinforcement learning; Statistics; Android; Central problems; Interface elements; Multi-armed bandit problem; Probability theory; Test generations; User interaction; Software testing",,,,,"D514111409

European Research Council, ERC: G514111401","This work was funded partially by and European Research Council (ERC) grant (G514111401) and partially by a Deutsche Forschungs-gemeinschaft (DFG) grant (D514111409).",,"Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGuitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , 2015; (2017) UI/Application Exerciser Monkey, , https://developer.{Android}.com/studio/test/monkey.html, 2017; Avdiienko, V., Kuznetsov, K., Rommelfanger, I., Rau, A., Gorla, A., Zeller, A., Detecting behavior anomalies in graphical user interfaces (2017) Proceedings of the 39th International Conference on Software Engineering Companion, pp. 201-203. , IEEE Press; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Acm Sigplan Notices, 48, pp. 641-660; Bauersfeld, S., Vos, T., A reinforcement learning approach to automated GUI robustness testing (2012) Fast Abstracts of the 4th Symposium on Search-Based Software Engineering (SSBSE 2012), pp. 7-12; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR; what about more sophisticated action specification and selection? (2014) SATToSE, pp. 60-78; Bellman, R., A Markovian decision process (1957) Journal of Mathematics and Mechanics, pp. 679-684. , 1957; Benzing, H., Hinderer, K., Kolonko, M., On the k-armed Bernoulli bandit: Monotonicity of the total reward under an arbitrary prior distribution (1984) Mathematische Operationsforschung Und Statistik. Series Optimization, 15 (4), pp. 583-595. , 1984; Borges, N.P., Jr., Gómez, M., Zeller, A., Guiding app testing with mined interaction models (2018) Proceedings of the 5th International Conference on Mobile Software Engineering and Systems, pp. 133-143; Borges, N.P., Jr., Hotzkow, J., Zeller, A., Droidmate-2: A platform for Android test generation (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pp. 916-919; Carter, P., Mulliner, C., Lindorfer, M., Robertson, W., Kirda, E., CuriousDroid: Automated user interface interaction for Android application analysis sandboxes (2016) International Conference on Financial Cryptography and Data Security, pp. 231-249. , Springer; Chapelle, O., Li, L., An empirical evaluation of Thompson sampling (2011) Advances in Neural Information Processing Systems, pp. 2249-2257; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) Acm Sigplan Notices, 48, pp. 623-640; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? (E) (2015) Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on, pp. 429-440; Dix, A., Human-computer interaction (2009) Encyclopedia of Database Systems, pp. 1327-1331. , Springer; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U., Vos, T., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) 6th International Conferenrence on Metaheuristics and Nature Inspired Computing (META 2016), pp. 130-137; Gopinath, R., Jensen, C., Groce, A., Code coverage for suite evaluation by developers (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 72-82; Jamrozik, K., Zeller, A., Droidmate: A robust and extensible test generator for Android (2016) Proceedings of the International Conference on Mobile Software Engineering and Systems, pp. 293-294; Katehakis, M.N., Veinott, A.F., Jr., The multi-armed bandit problem: Decomposition and computation (1987) Mathematics of Operations Research, 12 (2), pp. 262-268. , 1987; Koroglu, Y., Sen, A., Muslu, O., Mete, Y., Ulker, C., Tan-Riverdi, T., Donmez, Y., QBE: QLearning-based exploration of Android applications (2018) Software Testing, Verification and Validation (ICST), 2018 IEEE 11th International Conference on, pp. 105-115; Li, Y., Yang, Z., Guo, Y., Chen, X., Droidbot: A lightweight ui-guided test input generator for Android (2017) Software Engineering Companion (ICSE-C), 2017 IEEE/ACM 39th International Conference on, pp. 23-26; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Robbins, H., Some aspects of the sequential design of experiments (1952) Bull. Amer. Math. Soc., 58 (5), pp. 527-535. , 1952; Rubin, J., Gordon, M.I., Nguyen, N., Rinard, M., Covert communication in mobile applications (t) (2015) Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on, pp. 647-657; Russo, D.J., Van Roy, B., Kazerouni, A., Osband, I., Wen, Z., A tutorial on Thompson sampling (2018) Foundations and Trends® in Machine Learning, 11 (1), pp. 1-96. , 2018; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of Android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 245-256; Thompson, W.R., On the likelihood that one unknown probability exceeds another in view of the evidence of two samples (1933) Biometrika, 25 (3-4), pp. 285-294. , 1933; Vermorel, J., Mohri, M., Multi-armed bandit algorithms and empirical evaluation (2005) European Conference on Machine Learning, pp. 437-448. , Springer; Watkins, C.J.C.H., Dayan, P., Q-learning (1992) Machine Learning, 8 (3-4), pp. 279-292. , 1992; Watkins, C.J.C.H., (1989) Learning from Delayed Rewards, , Ph.D. Dissertation. King’s College, Cambridge; Wong, M.Y., Lie, D., Intellidroid: A targeted input generator for the dynamic analysis of android malware (2016) NDSS, 16, pp. 21-24; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , Springer",,"Zhang D.Moller A.","ACM SIGSOFT","Association for Computing Machinery, Inc","28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019","15 July 2019 through 19 July 2019",,149531,,9781450362245,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85070589967
"Wang P., Yan J., Deng X., Yan J., Zhang J.","57204649519;57191229706;57191362690;56415455000;57219348144;","Understanding ineffective events and reducing test sequences for android applications",2019,"Proceedings - 2019 13th International Symposium on Theoretical Aspects of Software Engineering, TASE 2019",,, 8913958,"264","272",,1,"10.1109/TASE.2019.00012","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077012050&doi=10.1109%2fTASE.2019.00012&partnerID=40&md5=03757d5201d602a8d8cdafff700051a4","State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China; Technology Center of Software Engineering, Institute of Software, Chinese Academy of Sciences, China; University of Chinese Academy of Sciences, Beijing, China","Wang, P., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, University of Chinese Academy of Sciences, Beijing, China; Yan, J., Technology Center of Software Engineering, Institute of Software, Chinese Academy of Sciences, China; Deng, X., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, University of Chinese Academy of Sciences, Beijing, China; Yan, J., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, Technology Center of Software Engineering, Institute of Software, Chinese Academy of Sciences, China, University of Chinese Academy of Sciences, Beijing, China; Zhang, J., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, University of Chinese Academy of Sciences, Beijing, China","Monkey, which is integrated with the Android system, becomes the most widely used test input generation tool, owing to the simplicity, effectiveness and good compatibility. However, Monkey is based on coordinates of screen and oblivious to the widgets and the GUI states, which results in a great many ineffective events that have no contribution to the test. To address the major drawbacks, this paper parses the events of 200 test sequences generated by Monkey into human-readable scripts and manually investigate the effects of these events. We find three types of patterns on the ineffective events, including no-ops, single and combination of effect-free ones, and summarize them into ten rules for sequence reduction. Then, we implement a tool CHARD to match these patterns in real-world traces and prune the redundant events. The evaluation on 923 traces from various apps covering 16 categories shows that CHARD can process 1,000 events in a few seconds and identifies 41.3% events as ineffective ones. Meanwhile, the reduced sequence keeps the same functionality with the original one that can trigger the same behaviors. Our work can be applied to lessen the diagnose effort for record-and-replay, and as a preprocessing step for other works on analyzing sequences. For instance, CHARD can remove 72.6% ineffective events and saves 67.6% time of delta debugging in our experiments. © 2019 IEEE.","Android Testing; Event Trace Reduction; Monkey; Record-and-replay","Engineering; Industrial engineering; Android applications; Android systems; Generation tools; Good compatibility; Monkey; Pre-processing step; Record-and-replay; Redundant event; Android (operating system)",,,,,"QYZDJ-SSW-JSC036

National Natural Science Foundation of China, NSFC: 61672505

Chinese Academy of Sciences, CAS","This work is supported by National Natural Science Foundation of China (Grant No. 61672505) and Key Research Program of Frontier Sciences, CAS, Grant No. QYZDJ-SSW-JSC036.",,"The google play application market Google Play, , https://play.google.com/store?hl=en; Alagar, V.S., Periyasamy, K., Specification of software systems (1998) Graduate Texts in Computer Science, , Springer; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? (E) (2015) 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, pp. 429-440. , Lincoln, NE, USA, November 9-13 2015; Clapp, L., Bastani, O., Anand, S., Aiken, A., Minimizing GUI event traces (2016) Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pp. 422-434. , Seattle, WA, USA, November 13-18 2016; Org/ F-droid, , https://f-droid; Android Monkey, , http://developer.android.com/tools/help/monkey.html, Google; Gyimóthy, T., Beszédes, Á., Forgács, I., An efficient relevant slicing method for debugging (1999) Software Engineering-ESEC/FSE'99, 7th European Software Engineering Conference, Held Jointly with the 7th ACM SIGSOFT Symposium on the Foundations of Software Engineering, Toulouse, France, September 1999 Proceedings, pp. 303-321; Hammoudi, M., Burg, B., Bae, G., Rothermel, G., On the use of delta debugging to reduce recordings and facilitate debugging of web applications (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, pp. 333-344. , Bergamo, Italy, August 30-September 4 2015; Hu, G., Yuan, X., Tang, Y., Yang, J., Efficiently, effectively detecting mobile app bugs with AppDoctor (2014) Ninth Eurosys Conference 2014 EuroSys 2014, pp. 181-1815. , Amsterdam, The Netherlands, April 13-16 2014; Jiang, B., Wu, Y., Li, T., Chan, W.K., Simplydroid: Efficient event sequence simplification for Android application (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, ASE 2017, pp. 297-307. , Urbana, IL, USA, October 30-November 032017; Liu, J., Wu, T., Deng, X., Yan, J., Zhang, J., Insdal: A safe and extensible instrumentation tool on dalvik byte-code for Android applications (2017) IEEE 24th International Conference on Software Analysis, Evolution and Reengineering, SANER 2017, pp. 502-506. , Klagenfurt, Austria, February 20-24 2017; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE'13, pp. 224-234. , Saint Petersburg, Russian Federation, August 18-26 2013; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, (FSE-22), pp. 599-609. , Hong Kong, China, November 16-22 2014; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 94-105. , Saarbrücken, Germany, July 18-20 2016; Moran, K., Vásquez, M.L., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing Android application crashes (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation, ICST 2016, pp. 33-44. , Chicago, IL, USA, April 11-15 2016; Qian, C., Huang, L., Cao, M., Xie, J., So, H., PUMA: An improved realization of MODE for DOA estimation (2017) IEEE Trans. Aerospace and Electronic Systems, 53 (5), pp. 2128-2139; Sipser, M., (1997) Introduction to the Theory of Computation, , PWS Publishing Company; (2018) Number of Available Applications in the Google Play Store from December 2009 to December, , https://www.statista.com/statistics/266210/number-of-availableapplications-in-the-google-play-store/; Wang, J., Dou, W., Gao, C., Wei, J., Fast reproducing web application errors (2015) 26th IEEE International Symposium on Software Reliability Engineering, ISSRE 2015, pp. 530-540. , Gaithersbury, MD, USA, November 2-5 2015; Weiser, M., Programmers use slices when debugging (1982) Commun. ACM, 25 (7), pp. 446-452; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Trans. Software Eng., 28 (2), pp. 183-200; Zhang, X., Gupta, R., Zhang, Y., Precise dynamic slicing algorithms (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 319-329. , May 3-10 2003 Portland, Oregon, USA; Zhang, X., Tallam, S., Gupta, R., Dynamic slicing long running programs through execution fast forwarding (2006) Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2006, pp. 81-91. , Portland, Oregon, USA, November 5-11",,,"College of Computer Science and Information Technology, Guangxi Normal University","Institute of Electrical and Electronics Engineers Inc.","13th International Symposium on Theoretical Aspects of Software Engineering, TASE 2019","29 July 2019 through 31 July 2019",,155650,,9781728133423,,,"English","Proc. - Int. Symp. Theor. Asp. Softw. Eng., TASE",Conference Paper,"Final","",Scopus,2-s2.0-85077012050
"Kilincceker O., Silistre A., Challenger M., Belli F.","55807841400;57211425274;55910368200;57200611344;","Random Test Generation from Regular Expressions for Graphical User Interface (GUI) Testing",2019,"Proceedings - Companion of the 19th IEEE International Conference on Software Quality, Reliability and Security, QRS-C 2019",,, 8859463,"170","176",,4,"10.1109/QRS-C.2019.00044","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073879489&doi=10.1109%2fQRS-C.2019.00044&partnerID=40&md5=0e6c09cc76db70544e0cb466b5d23618","University of Paderborn Paderborn, Germany Mugla Sitki Kocman University, Mugla, Turkey; International Computer Institute, Ege University, Izmir, Turkey; Electronics-ICT Dep., University of Antwerp Antwerp, Belgium","Kilincceker, O., University of Paderborn Paderborn, Germany Mugla Sitki Kocman University, Mugla, Turkey; Silistre, A., International Computer Institute, Ege University, Izmir, Turkey; Challenger, M., Electronics-ICT Dep., University of Antwerp Antwerp, Belgium; Belli, F., University of Paderborn Paderborn, Germany Mugla Sitki Kocman University, Mugla, Turkey","Generation of test sequences, that is, (user) inputs - expected (system) outputs, is an important task of testing of graphical user interfaces (GUI). This work proposes an approach to randomly generate test sequences that might be used for comparison with existing GUI testing techniques to evaluate their efficiency. The proposed approach first models GUI under test by a finite state machine (FSM) and then converts it to a regular expression (RE). A tool based on a special technique we developed analyzes the RE to fulfill missing context information such as the position of a symbol in the RE. The result is a context table representing the RE. The proposed approach traverses the context table to generate the test sequences. To do this, the approach repeatedly selects a symbol in the table, starting from the initial symbol, in a random manner until reaching a special, finalizing symbol for constructing a test sequence. Thus, the approach uses a symbol coverage criterion to assess the adequacy of the test generation. To evaluate the approach, mutation testing is used. The proposed technique is to a great extent implemented and is available as a tool called PQ-Ran Test (PQ-analysis based Random Test Generation). A case study demonstrates the proposed approach and analyzes its effectiveness by mutation testing. © 2019 IEEE.","Finite State Machine; GUI Testing; Random Test Generation; Regular Expression","C (programming language); Computer software selection and evaluation; Finite automata; Pattern matching; Software reliability; Software testing; Testing; Context information; Coverage criteria; Graphical user interfaces (GUI); GUI testing; Mutation testing; Random test generation; Regular expressions; Test generations; Graphical user interfaces",,,,,,,,"Chen, T.Y., Kuo, F.C., Merkel, R.G., Tse, T.H., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83 (1), pp. 60-66; Salomaa, A., Two complete axiom systems for the algebra of regular events (1966) Journal of the ACM, 13 (1), pp. 158-169; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th Annual International Symposium on Fault-Tolerant Computing (FTCS 1997), pp. 80-88. , IEEE Computer Society, Washington, DC, 24-27 June; Belli, F., Finite state testing and analysis of graphical user interfaces. Software reliability engineering (2001) 2001. ISSRE 2001. Proceedings. 12th International Symposium On. IEEE; Belli, F., Budnik, C.J., Hollmann, A., Tuglular, T., Wong, W.E., Model-based mutation testing approach and case studies (2016) Science of Computer Programming, 120, pp. 25-48; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Software Eng., 27 (2), pp. 144-155; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Transactions on Software Engineering, (3), pp. 178-187; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Li, J.J., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86 (8), pp. 1978-2001; Chen, T.Y., Kuo, F.C., Merkel, R.G., Tse, T.H., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83 (1), pp. 60-66; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) ACM Sigplan Notices, 40 (6), pp. 213-223. , June. ACM; Ciupa, I., Leitner, A., Automatic testing based on design by contract (2005) Proceedings of Net. ObjectDays 2005, p. 545557; Olsson, N., Karl, K., (2015) Graphwalker: The Open Source Model-based Testing Tool; Hopcroft, J.E., Motwani, R., Ullman, J.D., Automata theory, languages, and computation (2006) International Edition, 24 (2), p. 2; Belli, F., (1978) Extending Regular Languages for Self-Detection and Self-Correction of Syntactical Faults, , (PhD Thesis in German; Technical Univ. Berlin), Bericht 119 der Gesellschaft fur Mathematik und Datenverarbeitung, Oldenburg Verlag; PQ-Analysis Tool, , http://download.ivknet.de/, (last access: May 2019); http://iselta.ivknet.de/, ISELTA website (last access: May 2019); JFLAP Tool, , http://www.jflap.org/, (last access: May 2019); Selenium Test Automation Tool, , https://www.seleniumhq.org/, (last access: May 2019); ISELTA Mutants, , http://iseltamutants.ivknet.de/, (last access: May 2019); Kilincceker, O., Belli, F., Regular expression based coverage criteria for graphical user interface (2017) CEUR Workshop Proceedings, , (in Turkish); Ravi, S., Lakshminarayana, G., Jha, N.K., TAO: Regular expression-based register-transfer level testability analysis and optimization (2001) IEEE Transactions on Very Large Scale Integration (VLSI) Systems, 9 (6), p. 824832; Kilincceker, O., Turk, E., Challenger, M., Belli, F., Regular expression based test sequence generation for hdl program validation (2018) 2018 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C), pp. 585-592. , July. IEEE; Kilincceker, O., Turk, E., Challenger, M., Belli, F., Applying the ideal testing framework to hdl programs (2018) ARCS Workshop 2018; 31th International Conference on Architecture of Computing Systems, pp. 1-6. , April. VDE; Arcaini, P., Gargantini, A., Riccobene, E., Fault-based test generation for regular expressions by mutation (2019) Software Testing, Verification and Reliability, 29 (1-2), p. e1664; Mercan, G., Akgunduz, E., Kilincceker, O., Challenger, M., Belli, F., (2018) Preliminary Work on Ideal Testing of Android Application, , (in Turkish), CEUR Workshop Proceedings; DeMillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) Computer, 11 (4), pp. 34-41; Belli, F., Budnik, C.J., Eric Wong, W., Basic operations for generating behavioral mutants (2006) Second Workshop on Mutation Analysis (Mutation 2006-1SSRE Workshops 2006). IEEE",,,"IEEE Reliability Society","Institute of Electrical and Electronics Engineers Inc.","19th IEEE International Conference on Software Quality, Reliability and Security Companion, QRS-C 2019","22 July 2019 through 26 July 2019",,152544,,9781728139258,,,"English","Proc. - Companion IEEE Int. Conf. Softw. Qual., Reliab. Secur., QRS-C",Conference Paper,"Final","",Scopus,2-s2.0-85073879489
"Tramontana P., Amalfitano D., Amatucci N., Memon A., Fasolino A.R.","8879739800;25926238800;55843621200;35599876500;7006159957;","Developing and evaluating objective termination criteria for random testing",2019,"ACM Transactions on Software Engineering and Methodology","28","3", 17,"","",,3,"10.1145/3339836","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074605635&doi=10.1145%2f3339836&partnerID=40&md5=17b2c0bc18cfe0ee171984fd566b98b2","Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Naples, Italy; Department of Computer Science, University of Maryland, Via Claudio, 21, College Park, MD, United States","Tramontana, P., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Naples, Italy; Amalfitano, D., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Naples, Italy; Amatucci, N., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Naples, Italy; Memon, A., Department of Computer Science, University of Maryland, Via Claudio, 21, College Park, MD, United States; Fasolino, A.R., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Naples, Italy","Random testing is a software testing technique through which programs are tested by generating and executing random inputs. Because of its unstructured nature, it is difficult to determine when to stop a random testing process. Faults may be missed if the process is stopped prematurely, and resources may be wasted if the process is run too long. In this article, we propose two promising termination criteria, “All Equivalent” (AEQ) and “All Included in One” (AIO), applicable to random testing. These criteria stop random testing once the process has reached a code-coverage-based saturation point after which additional testing effort is unlikely to provide additional effectiveness. We model and implement them in the context of a general random testing process composed of independent random testing sessions. Thirty-six experiments involving GUI testing and unit testing of Java applications have demonstrated that the AEQ criteria is generally able to stop the process when a code coverage equal or very near to the saturation level is reached, while AIO is able to stop the process earlier in cases it reaches the saturation level of coverage. In addition, the performance of the two criteria has been compared against other termination criteria adopted in the literature. © 2019 Association for Computing Machinery.","Code coverage; Random testing; Saturation effect","Codes (symbols); Testing; Code coverage; Java applications; Random testing; Saturation effects; Saturation levels; Saturation point; Software testing techniques; Termination criteria; Software testing",,,,,,,,"(2015) ISO/IEC/IEEE International Standard-Software and Systems Engineering-Software Testing-Part 4: Test Techniques, pp. 1-149. , https://doi.org/10.1109/IEEESTD.2015.7346375, ISO/IEC/IEEE 29119-4:2015 Dec. 2015; Ahmed, M.A., Hermadi, I., GA-based multiple paths test data generator (2008) Comput. Operat. Res., 35 (10), pp. 3107-3124. , https://doi.org/10.1016/j.cor.2007.01.012, Oct. 2008; Amalfitano, D., Amatucci, N., Fasolino, A.R., Tramontana, P., Kowalczyk, E., Memon, A.M., Exploiting the saturation effect in automatic random testing of android applications (2015) Proceedings of the 2nd ACM International Conference on Mobile Software Engineering and Systems (MOBILESoft'15), pp. 33-43. , http://dl.acm.org/citation.cfm?id=2825041.2825046, IEEE Press, Los Alamitos, CA; Amalfitano, D., Fasolino, A.R., De Carmine, S., Memon, A., Tramontana, P., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE International Conference on Automated Software Engineering (ASE'12), , IEEE Computer Society, Los Alamitos, CA; Amalfitano, D., Riccio, V., Amatucci, N., Simone, V.D., Fasolino, A.R., Combining automated GUI exploration of Android apps with capture and replay through machine learning (2019) Inf. Softw. Technol., 105 (2019), pp. 95-116. , https://doi.org/10.1016/j.infsof.2018.08.007; Andrews, J.H., Groce, A., Weston, M., Xu, R.G., Random test run length and effectiveness (2008) Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE'08), pp. 19-28. , https://doi.org/10.1109/ASE.2008.12; Arcuri, A., A theoretical and empirical analysis of the role of test sequence length in software testing for structural coverage (2012) IEEE Trans. Softw. Eng., 38 (3), pp. 497-519. , https://doi.org/10.1109/TSE.2011.44, May 2012; Arcuri, A., Briand, L., Adaptive random testing: An illusion of effectiveness? (2011) Proceedings of the 2011 International Symposium on Software Testing and Analysis (ISSTA'11), pp. 265-275. , https://doi.org/10.1145/2001420.2001452, ACM, New York, NY; Arcuri, A., Briand, L., Formal analysis of the probability of interaction fault detection using random testing (2012) IEEE Trans. Softw. Eng., 38 (5), pp. 1088-1099. , https://doi.org/10.1109/TSE.2011.85, Sep. 2012; Arcuri, A., Briand, L., A Hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering (2014) Softw. Test. Verif. Reliab., 24 (3), pp. 219-250. , https://doi.org/10.1002/stvr.1486, May 2014; Arcuri, A., Fraser, G., Parameter tuning or default values? An empirical investigation in search-based software engineering (2013) Empir. Softw. Eng., 18 (3), pp. 594-623. , https://doi.org/10.1007/s10664-013-9249-9, 2013; Arcuri, A., Iqbal, M.Z., Briand, L., Random testing: Theoretical results and practical implications (2012) IEEE Trans. Softw. Eng., 38 (2), pp. 258-277. , https://doi.org/10.1109/TSE.2011.121, Mar. 2012; Arnold, T.R., (1998) Visual Test 6 Bible (1st Ed.), , IDG Books Worldwide, Inc., Foster City, CA; Bauersfeld, S., Vos, T.E.J., Guitest: A Java library for fully automated GUI robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE'12), pp. 330-333. , https://doi.org/10.1145/2351676.2351739, ACM, New York, NY; Böhme, M., Paul, S., On the efficiency of automated testing (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE'14), pp. 632-642. , https://doi.org/10.1145/2635868.2635923, ACM, New York, NY; Briand, L., Pfahl, D., Using simulation for assessing the real impact of test coverage on defect coverage (1999) Proceedings of the 10th International Symposium on Software Reliability Engineering, pp. 148-157. , https://doi.org/10.1109/ISSRE.1999.809319, 1999; Bueno, P.M.S., Jino, M., Identification of potentially infeasible program paths by monitoring the search for test data (2000) Proceedings of the 15th IEEE International Conference on Automated Software Engineering (ASE'00), pp. 209-218. , https://doi.org/10.1109/ASE.2000.873665; Bueno, P.M.S., Jino, M., Automatic test data generation for program paths using genetic algorithms (2002) Int. J. Softw. Eng. Knowl. Eng., 12, pp. 691-709. , https://doi.org/10.1142/S0218194002001074, 06 2002; Böhme, M., Paul, S., A probabilistic analysis of the efficiency of automated software testing (2016) IEEE Trans. Softw. Eng., 42 (4), pp. 345-360. , https://doi.org/10.1109/TSE.2015.2487274, Apr. 2016; Cai, X., Lyu, M.R., The effect of code coverage on fault detection under different testing profiles (2005) Proceedings of the 1st International Workshop on Advances in Model-Based Testing (A-MOST'05), pp. 1-7. , https://doi.org/10.1145/1082983.1083288, ACM, New York, NY; Ceccato, M., Marchetto, A., Mariani, L., Nguyen, C.D., Tonella, P., An empirical study about the effectiveness of debugging when random test cases are used (2012) Proceedings of the 34th International Conference on Software Engineering (ICSE'12), pp. 452-462. , http://dl.acm.org/citation.cfm?id=2337223.2337277, IEEE Press, Los Alamitos, CA; Ceccato, M., Marchetto, A., Mariani, L., Nguyen, C.D., Tonella, P., Do automatically generated test cases make debugging easier? An experimental assessment of debugging effectiveness and efficiency (2015) ACM Trans. Softw. Eng. Methodol., 25 (1), p. 38. , https://doi.org/10.1145/2768829, Article Dec. 2015; Chang, W.-K., Jeng, S.-L., Practical stopping criteria for validating safety-critical software by estimating impartial reliability (2007) Appl. Math. Model., 31 (7), pp. 1411-1424. , https://doi.org/10.1016/j.apm.2006.04.017, 2007; Chen, M.-H., Lyu, M.R., Wong, W.E., An empirical study of the correlation between code coverage and reliability estimation (1996) Proceedings of the 3rd International Symposium on Software Metrics: From Measurement to Empirical Results (METRICS'96), p. 133. , http://dl.acm.org/citation.cfm?id=525586.823872, IEEE Computer Society, Los Alamitos, CA, -; Chen, M.-H., Lyu, M.R., Wong, W.E., Incorporating code coverage in the reliability estimation for fault-tolerant software (1997) Proceedings of the 16th Symposium on Reliable Distributed Systems, pp. 45-52. , https://doi.org/10.1109/RELDIS.1997.632796, 1997; Chen, S., Mills, S., A binary Markov process model for random testing (1996) IEEE Trans. Softw. Eng., 22 (3), pp. 218-223. , https://doi.org/10.1109/32.489081, Mar. 1996; Chen, T.Y., Kuo, F.C., Merkel, R.G., Tse, T.H., Adaptive random testing: The ART of test case diversity (2010) J. Syst. Softw., 83 (1), pp. 60-66. , 2010; Chen, T.Y., Merkel, R., An upper bound on software testing effectiveness (2008) ACM Trans. Softw. Eng. Methodol., 17 (3), p. 27. , https://doi.org/10.1145/1363102.1363107, Article Jun. 2008; Chen, T.Y., Tse, T.H., Yu, Y.T., Proportional sampling strategy: A compendium and some insights (2001) J. Syst. Softw., 58 (1), pp. 65-81. , https://doi.org/10.1016/S0164-1212(01)00028-0, Aug. 2001; Ciupa, I., Leitner, A., Oriol, M., Meyer, B., Experimental assessment of random testing for object-oriented software (2007) Proceedings of the 2007 International Symposium on Software Testing and Analysis (ISSTA'07), pp. 84-94. , https://doi.org/10.1145/1273463.1273476, ACM, New York, NY; Ciupa, I., Pretschner, A., Leitner, A., Oriol, M., Meyer, B., On the predictability of random tests for object-oriented software (2008) Proceedings of the 2008 1st International Conference on Software Testing, Verification, and Validation, pp. 72-81. , https://doi.org/10.1109/ICST.2008.20; Ciupa, I., Pretschner, A., Oriol, M., Leitner, A., Meyer, B., On the number and nature of faults found by random testing (2011) Softw. Test. Verif. Reliab., 21 (1), pp. 3-28. , 2011; Currit, P.A., Dyer, M., Mills, H.D., Certifying the reliability of software (1986) IEEE Trans. Softw. Eng. SE-12, (1), pp. 3-11. , https://doi.org/10.1109/TSE.1986.6312914, Jan. 1986; Dyer, M., A formal approach to software error removal (1987) J. Syst. Softw., 7 (2), pp. 109-114. , https://doi.org/10.1016/0164-1212(87)90015-X, 1987; Fisher, R.A., On the interpretation of Chi squared from contingency tables, and the calculation of P (1922) J. Roy. Stat. Soc., 85 (1), pp. 87-94. , http://www.jstor.org/stable/2340521, 1922; Forrester, J.E., Miller, B.P., An empirical study of the robustness of windows NT applications using random testing (2000) Proceedings of the 4th Conference on USENIX Windows Systems Symposium-Volume 4 (WSS'00), p. 6. , http://dl.acm.org/citation.cfm?id=1267102.1267108, USENIX Association, Berkeley, CA; Frankl, P.G., Iakounenko, O., Further empirical studies of test effectiveness (1998) Proceedings of the 6th ACM SIGSOFT International Symposium on Foundations of Software Engineering (SIGSOFT'98/FSE-6), pp. 153-162. , https://doi.org/10.1145/288195.288298, ACM, New York, NY; Fraser, G., Arcuri, A., Evolutionary generation of whole test suites (2011) Proceedings of the 2011 11th International Conference on Quality Software, pp. 31-40. , https://doi.org/10.1109/QSIC.2011.19; Fraser, G., Arcuri, A., Sound empirical evidence in software testing (2012) Proceedings of the 2012 34th International Conference on Software Engineering (ICSE'12), pp. 178-188. , https://doi.org/10.1109/ICSE.2012.6227195; Fraser, G., Arcuri, A., Whole test suite generation (2013) IEEE Trans. Softw. Eng., 39 (2), pp. 276-291. , https://doi.org/10.1109/TSE.2012.14, Feb. 2013; Fraser, G., Gargantini, A., Experiments on the test case length in specification based test case generation (2009) Proceedings of the ICSE Workshop on Automation of Software Test (AST'09), pp. 18-26. , https://doi.org/10.1109/IWAST.2009.5069037; Furia, C.A., Meyer, B., Oriol, M., Tikhomirov, A., Wei, Y., The search for the laws of automatic random testing (2013) Proceedings of the 28th Annual ACM Symposium on Applied Computing (SAC'13), pp. 1211-1216. , https://doi.org/10.1145/2480362.2480590, ACM, New York, NY; Garg, P., Investigating coverage-reliability relationship and sensitivity of reliability to errors in the operational profile (1994) Proceedings of the 1st International Conference on Software Testing, Reliability and Quality Assurance, pp. 21-35. , https://doi.org/10.1109/STRQA.1994.526380, 1994; Girgis, M.R., Automatic test data generation for data flow testing using a genetic algorithm (2005) Journal of Universal Computer Science (JUCS), 11 (6), pp. 898-915. , https://doi.org/10.3217/jucs-011-06-0898, Jun. 2005; Godefroid, P., Kiezun, A., Levin, M.Y., Grammar-based whitebox fuzzing (2008) SIGPLAN Not, 43 (6), pp. 206-215. , https://doi.org/10.1145/1379022.1375607, Jun. 2008; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) SIGPLAN Not, 40 (6), pp. 213-223. , https://doi.org/10.1145/1064978.1065036, Jun. 2005; Goel, A.L., Software reliability models: Assumptions, limitations, and applicability (1985) IEEE Trans. Softw. Eng. SE-11, (12), pp. 1411-1423. , https://doi.org/10.1109/TSE.1985.232177, Dec. 1985; Gokhale, S.S., Philip, T., Marinos, P.N., Trivedi, K.S., Unification of finite failure non-homogeneous Poisson process models through test coverage (1996) Proceedings of the 7th International Symposium on Software Reliability Engineering, pp. 299-307. , https://doi.org/10.1109/ISSRE.1996.558886, 1996; Gokhale, S.S., Trivedi, K.S., Log-logistic software reliability growth model (1998) Proceedings of the 3rd IEEE International High-Assurance Systems Engineering Symposium, pp. 34-41. , https://doi.org/10.1109/HASE.1998.731593, 1998; Groce, A., Zhang, C., Eide, E., Chen, Y., Regehr, J., Swarm testing (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA'12), pp. 78-88. , https://doi.org/10.1145/2338965.2336763, ACM, New York, NY; Gross, F., Fraser, G., Zeller, A., ExSysT: Search-based GUI testing (2012) Proceedings of the 34th International Conference on Software Engineering (ICSE'12), pp. 1423-1426. , http://dl.acm.org/citation.cfm?id=2337223.2337435, IEEE Press, Los Alamitos, CA; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA'12), pp. 67-77. , https://doi.org/10.1145/2338965.2336762, ACM, New York, NY; Grottke, M., A vector Markov model for structural coverage growth and the number of failure occurrences (2002) Proceedings of the 13th International Symposium on Software Reliability Engineering (ISSRE'02), p. 304. , http://dl.acm.org/citation.cfm?id=851033.856318, IEEE Computer Society, Los Alamitos, CA; Hajjar, A., Chen, T., Munn, I., Andrews, A., Bjorkman, M., High quality behavioral verification using statistical stopping criteria (2001) Proceedings of the Design, Automation and Test in Europe, 2001. Conference and Exhibition, pp. 411-418. , https://doi.org/10.1109/DATE.2001.915057, 2001; Hajjar, A., Chen, T., Munn, I., Andrews, A., Bjorkman, M., Stopping criteria comparison: Towards high quality behavioral verification (2001) Proceedings of the 2001 International Symposium on Quality Electronic Design, pp. 31-37. , https://doi.org/10.1109/ISQED.2001.915202; Hamlet, D., When only random testing will do (2006) Proceedings of the 1st International Workshop on Random Testing (RT'06), pp. 1-9. , https://doi.org/10.1145/1145735.1145737, ACM, New York, NY; Hamlet, R., (2002) Random Testing, , https://doi.org/10.1002/0471028959.sof268, John Wiley & Sons, New York, NY; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys'14), pp. 204-217. , https://doi.org/10.1145/2594368.2594390, ACM, New York, NY; Hofer, B., Peischl, B., Wotawa, F., GUI savvy end-to-end testing with smart monkeys (2009) Proceedings of the ICSE Workshop on Automation of Software Test (AST'09), pp. 130-137. , https://doi.org/10.1109/IWAST.2009.5069051; Howden, W.E., Confidence-based reliability and statistical coverage estimation (1997) Proceedings of the 8th International Symposium on Software Reliability Engineering, pp. 283-291. , https://doi.org/10.1109/ISSRE.1997.630877, 1997; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments of the effectiveness of dataflow- And controlflow-based test adequacy criteria (1994) Proceedings of the 16th International Conference on Software Engineering (ICSE'94), pp. 191-200. , http://dl.acm.org/citation.cfm?id=257734.257766, IEEE Computer Society Press, Los Alamitos, CA; Jalote, P., Muralidhara, Y.R., A coverage based model for software reliability estimation (1994) Proceedings of the 1st International Conference on Software Testing, Reliability and Quality Assurance, pp. 6-10. , https://doi.org/10.1109/STRQA.1994.526377, 1994; Krishnamurthy, S., Mathur, A.P., On predicting reliability of modules using code coverage (1996) Proceedings of the 1996 Conference of the Centre for Advanced Studies on Collaborative Research (CASCON'96), p. 22. , http://dl.acm.org/citation.cfm?id=782052.782074, IBM Press; Lil, M., Wei, Y., Desovski, D., Nejad, H., Ghose, S., Cukic, B., Smidts, C., Validation of a methodology for assessing software reliability (2004) Proceedings of the 15th International Symposium on Software Reliability Engineering (ISSRE'04), pp. 66-76. , https://doi.org/10.1109/ISSRE.2004.47; Lin, J.-C., Yeh, P.-L., Automatic test data generation for path testing using GAs (2001) Inf. Sci., 131 (1-4), pp. 47-64. , https://doi.org/10.1016/S0020-0255(00)00093-1, Jan. 2001; Littlewood, B., Wright, D., Some conservative stopping rules for the operational testing of safety critical software (1997) IEEE Trans. Softw. Eng., 23 (11), pp. 673-683. , https://doi.org/10.1109/32.637384, Nov. 1997; Liu, H., Xie, X., Yang, J., Lu, Y., Chen, T.Y., Adaptive random testing by exclusion through test profile (2010) Proceedings of the 2010 10th International Conference on Quality Software, pp. 92-101. , https://doi.org/10.1109/QSIC.2010.61; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) Proceedings of the 2nd International Conference on Computer Engineering and Technology (ICCET'10), 2, pp. V2-V297. , IEEE; Lyu, M.R., (1996) Handbook of Software Reliability Engineering, 222. , IEEE Computer Society, Los Alamitos, CA; Lyu, M.R., Huang, Z., Sze, S.K.S., Cai, X., An empirical study on testing and fault tolerance for software reliability engineering (2003) Proceedings of the 14th International Symposium on Software Reliability Engineering (ISSRE'03), pp. 119-130. , https://doi.org/10.1109/ISSRE.2003.1251036; Ma, L., Artho, C., Zhang, C., Sato, H., Gmeiner, J., Ramler, R., GRT: Program-analysis-guided random testing (T) (2015) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE'15), pp. 212-223. , https://doi.org/10.1109/ASE.2015.49; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE'13), pp. 224-234. , https://doi.org/10.1145/2491411.2491450, ACM, New York, NY; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE'14), pp. 599-609. , https://doi.org/10.1145/2635868.2635896, ACM, New York, NY; Malaiya, Y.K., Li, M.N., Bieman, J.M., Karcich, R., Software reliability growth with test coverage (2002) IEEE Trans. Reliabil., 51 (4), pp. 420-426. , https://doi.org/10.1109/TR.2002.804489, Dec. 2002; Malaiya, Y.K., Li, N., Bieman, J., Karcich, R., Skibbe, B., The relationship between test coverage and reliability (1994) Proceedings of the 5th International Symposium on Software Reliability Engineering, pp. 186-195. , https://doi.org/10.1109/ISSRE.1994.341373, 1994; Malevris, N., Petrova, E., On the determination of an appropriate time for ending the software testing process (2000) Proceedings of the 1st Asia-Pacific Conference on Quality Software 2000, pp. 81-88. , https://doi.org/10.1109/APAQ.2000.883781; Mansour, N., Salame, M., Data generation for path testing (2004) Softw. Qual. J., 12 (2), pp. 121-136. , https://doi.org/10.1023/B:SQJO.0000024059.72478.4e, Jun. 2004; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Automatic testing of GUI-based applications (2014) Softw. Test. Verif. Reliab., 24 (5), pp. 341-366. , https://doi.org/10.1002/stvr.1538, Aug. 2014; Mariani, L., PezzÃl, M., Zuddas, D., Recent advances in automatic black-box testing (2015) Advances in Computers, 99, pp. 157-193. , https://doi.org/10.1016/bs.adcom.2015.04.002, Elsevier; Martignoni, L., Paleari, R., Roglia, G.F., Bruschi, D., Testing system virtual machines (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA'10), pp. 171-182. , https://doi.org/10.1145/1831708.1831730, ACM, New York, NY; Menzies, T., Cukic, B., When to test less (2000) IEEE Softw, 17 (5), pp. 107-112. , https://doi.org/doi.ieeecomputersociety.org/10.1109/52.877876, 2000; Miller, J., Reformat, M., Zhang, H., Automatic test data generation using genetic algorithm and program dependence graphs (2006) Inf. Softw. Technol., 48 (7), pp. 586-605. , https://doi.org/10.1016/j.infsof.2005.06.006, 2006; Motwani, R., Raghavan, P., (1995) Randomized Algorithms, , Cambridge University Press, New York, NY; Namin, A.S., Andrews, J.H., The influence of size and coverage on test suite effectiveness (2009) Proceedings of the 18th International Symposium on Software Testing and Analysis (ISSTA'09), pp. 57-68. , https://doi.org/10.1145/1572272.1572280, ACM, New York, NY; Ntafos, S.C., On comparisons of random, partition, and proportional partition testing (2001) IEEE Trans. Softw. Eng., 27 (10), pp. 949-960. , https://doi.org/10.1109/32.962563, Oct. 2001; Oehlert, P., Violating assumptions with fuzzing (2005) IEEE Secur. Priv., 3 (2), pp. 58-62. , https://doi.org/10.1109/MSP.2005.55, Mar. 2005; Oriol, M., Random testing: Evaluation of a law describing the number of faults found (2012) Proceedings of the 2012 IEEE 5th International Conference on Software Testing, Verification and Validation, pp. 201-210. , https://doi.org/10.1109/ICST.2012.100; Orso, A., Rothermel, G., Software testing: A research travelogue (2000-2014) (2014) Proceedings of the on Future of Software Engineering (FOSE'14), pp. 117-132. , https://doi.org/10.1145/2593882.2593885, ACM, New York, NY; Pacheco, C., Ernst, M.D., ECLAT: Automatic generation and classification of test inputs (2005) Proceedings of the 19th European Conference on Object-Oriented Programming (ECOOP'05), pp. 504-527. , https://doi.org/10.1007/11531142_22, Springer-Verlag, Berlin; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback-directed random test generation (2007) Proceedings of the 29th International Conference on Software Engineering (ICSE'07), pp. 75-84. , https://doi.org/10.1109/ICSE.2007.37; Parnas, D.L., John Van Schouwen, A., Kwan, S.P., Evaluation of safety-critical software (1990) Commun. ACM, 33 (6), pp. 636-648. , https://doi.org/10.1145/78973.78974, Jun. 1990; Pei, M., Goodman, E.D., Gao, Z., Zhong, K., (1994) Automated Software Test Data Generation Using a Genetic Algorithm, , Technical Report. Michigan State University; Piwowarski, P., Ohba, M., Caruso, J., Coverage measurement experience during function test (1993) Proceedings of the 15th International Conference on Software Engineering (ICSE'93), pp. 287-301. , http://dl.acm.org/citation.cfm?id=257572.257635, IEEE Computer Society Press, Los Alamitos, CA; Ramsey, J., Basili, V.R., Analyzing the test process using structural coverage (1985) Proceedings of the 8th International Conference on Software Engineering (ICSE'85), pp. 306-312. , IEEE Computer Society Press, Los Alamitos, CA; Rauf, A., Anwar, S., Arfan Jaffar, M., Shahid, A.A., Automated GUI test coverage analysis using GA (2010) Proceedings of the 7th International Conference on Information Technology: New Generations (ITNG'10), pp. 1057-1062. , https://doi.org/10.1109/ITNG.2010.95; Ravindranath, L., Nath, S., Padhye, J., Balakrishnan, H., Automatic and scalable fault detection for mobile applications (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys'14), pp. 190-203. , https://doi.org/10.1145/2594368.2594377, ACM, New York, NY; Rueda, U., Vos, T.E.J., Prasetya, I.S.W.B., Unit testing tool competition: Round Three (2015) Proceedings of the 8th International Workshop on Search-Based Software Testing (SBST'15), pp. 19-24. , http://dl.acm.org/citation.cfm?id=2821339.2821346, IEEE Press, Piscataway, NJ; Sahinoglu, M., An empirical Bayesian stopping rule in testing and verification of behavioral models (2003) IEEE Trans. Instrum. Meas., 52 (5), pp. 1428-1443. , https://doi.org/10.1109/TIM.2003.818548, Oct. 2003; Sahinoglu, M., Von Mayrhauser, A., Hajjar, A., Chen, T., Anderson, C., On the efficiency of a compound Poisson stopping rule for mixed strategy testing (1999) Proceedings of the 1999 IEEE Aerospace Conference, 5, pp. 93-98. , https://doi.org/10.1109/AERO.1999.790193, 5; Sharma, R., Gligoric, M., Arcuri, A., Fraser, G., Marinov, D., Testing container classes: Random or systematic? (2011) Proceedings of the 14th International Conference on Fundamental Approaches to Software Engineering: Part of the Joint European Conferences on Theory and Practice of Software (FASE'11/ETAPS'11), pp. 262-277. , http://dl.acm.org/citation.cfm?id=1987434.1987460, Springer-Verlag, Berlin; Sherman, E., Dwyer, M.B., Elbaum, S., Saturation-based testing of concurrent programs (2009) Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE'09), pp. 53-62. , https://doi.org/10.1145/1595696.1595706, ACM, New York, NY; Thévenod-Fosse, P., Waeselynck, H., An investigation of statistical software testing (1991) Softw. Test. Verif. Reliabil., 1 (2), pp. 5-25. , https://doi.org/10.1002/stvr.4370010203, 1991; Tsankov, P., Dashti, M.T., Basin, D., Secfuzz: Fuzz-testing security protocols (2012) Proceedings of the 7th International Workshop on Automation of Software Test (AST'12), pp. 1-7. , http://dl.acm.org/citation.cfm?id=2663608.2663610, IEEE Press, Piscataway, NJ; Veevers, A., Marshall, A.C., A relationship between software coverage metrics and reliability (1994) Softw. Test. Verif. Reliabil., 4 (1), pp. 3-8. , https://doi.org/10.1002/stvr.4370040103, 1994; Wei, Y., Gebhardt, S., Meyer, B., Oriol, M., Satisfying test preconditions through guided object selection (2010) Proceedings of the 2010 3rd International Conference on Software Testing, Verification and Validation, pp. 303-312. , https://doi.org/10.1109/ICST.2010.34; Wei, Y., Meyer, B., Oriol, M., Is branch coverage a good measure of testing effectiveness? (2012) Empirical Software Engineering and Verification, 7007, pp. 194-212. , https://doi.org/10.1007/978-3-642-25231-0_5, Bertrand Meyer and Martin Nordio (Eds.). Lecture Notes in Computer Science,. Springer, Berlin; Weyuker, E.J., Jeng, B., Analyzing partition testing strategies (1991) IEEE Trans. Softw. Eng., 17 (7), pp. 703-711. , https://doi.org/10.1109/32.83906, Jul. 1991; Whittaker, J.A., Thomason, M.G., A Markov chain model for statistical software testing (1994) IEEE Trans. Softw. Eng., 20 (10), pp. 812-824. , https://doi.org/10.1109/32.328991, Oct. 1994; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslén, A., (2012) Experimentation in Software Engineering, , Springer, Berlin",,,,"Association for Computing Machinery",,,,,1049331X,,ATSME,,"English","ACM Trans. Software Eng. Methodol.",Article,"Final","",Scopus,2-s2.0-85074605635
"Morgado I.C., Paiva A.C.R.","55321167400;7102683763;","The iMPAcT tool for android testing",2019,"Proceedings of the ACM on Human-Computer Interaction","3","EICS", 4,"","",,3,"10.1145/3300963","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067928340&doi=10.1145%2f3300963&partnerID=40&md5=3f5101c40bad6e1145d7948752c2cfb6","Faculty of Engineering of the University of Porto, Rua Dr. Roberto Frias, s/n, Porto, 4200-465, Portugal; Faculty of Engineering of the University of Porto and INESC TEC, Porto, Portugal","Morgado, I.C., Faculty of Engineering of the University of Porto, Rua Dr. Roberto Frias, s/n, Porto, 4200-465, Portugal; Paiva, A.C.R., Faculty of Engineering of the University of Porto and INESC TEC, Porto, Portugal","This paper presents iMPAcT tool that tests recurring common behavior on Android mobile applications. The process followed combines exploration, reverse engineering and testing to automatically test Android mobile applications. The tool explores automatically the App by firing UI events. After each event fired, the tool checks if there are UI patterns present using a reverse engineering process. If a UI pattern is present, the tool runs the corresponding testing strategy (Test Pattern). During reverse engineering the tool uses a catalog of UI Patterns which describes recurring behavior (UI Patterns) to test and the corresponding test strategies (Test Patterns). This catalog may be extended in the future as needed (e.g., to deal with new interaction trends). This paper describes the implementation details of the iMPAcT tool, the catalog of patterns used, the outputs produced by the tool and the results of experiments performed in order to evaluate the overall testing approach. These results show that the overall testing approach is capable of finding failures on existing Android mobile applications. © 2019 Copyright held by the owner/author(s).","Android testing; Mobile crawler; Mobile testing; Reverse engineering; Software test automation; Software testing; UI Patterns","Android (operating system); Mobile computing; Reverse engineering; Automatically test; Mobile applications; Mobile crawler; Mobile testing; Reverse engineering process; Software test automation; Testing strategies; Ui patterns; Software testing",,,,,,,,"Quist Adamsen, C., Mezzetti, G., Møller, A., Systematic execution of Android test suites in adverse conditions (2015) Proceedings of the 2015 International Symposium on Software Testing and Analysis-ISSTA 2015, pp. 83-93. , https://doi.org/10.1145/2771783.2771786, ACM Press, New York, New York, USA, release 1. http://goo.gl/5PSQHj; Aho, P., Raty, T., Menz, N., Dynamic reverse engineering of GUI models for testing (2013) 2013 International Conference on Control, Decision and Information Technologies (CoDIT). IEEE, pp. 441-447. , https://doi.org/10.1109/CoDIT.2013.6689585; Alexander, C.W., Ishikawa, S., Silverstein, M., Jacobson, M., (1977) A Pattern Language: Towns, p. 1171. , Buildings, Construction (1 ed.). Oxford University Press, New York, New York, USA; Amalfitano, D., Amatucci, N., Rita Fasolino, A., Gentile, U., Mele, G., Nardone, R., Vittorini, V., Marrone, S., Improving code coverage in android apps testing by exploiting patterns and automatic test case generation (2014) International Workshop on Long-term Industrial Collaboration on Software Engineering (WISE 2014), pp. 29-34. , https://doi.org/10.1145/2647648.2656426, ACM, Västerás, Sweden; Amalfitano, D., Rita Fasolino, A., Tramontana, P., Experimenting a reverse engineering technique for modelling the behaviour of rich internet applications (2009) 2009 IEEE International Conference on Software Maintenance. IEEE, pp. 571-574. , https://doi.org/10.1109/ICSM.2009.5306391; Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), 258. , https://doi.org/10.1145/2351676.2351717, ACM Press, New York, New York, USA; Amalfitano, D., Riccio, V., Paiva, R.A.C., Rita Fasolino, A., Why does the orientation change mess up my Android application? from GUI failures to code faults (2018) Softw. Test., Verif. Reliab., 28 (1). , https://doi.org/10.1002/stvr.1654, 2018; Anand, S., Naik, M., Jean Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering-FSE ', 12, p. 1. , https://doi.org/10.1145/2393596.2393666, ACM Press, New York, New York, USA; (2008) Announcing the Android 1.0 SDK, Release 1, , http://goo.gl/5PSQHj, Google Android; (2015) Android-What to Test, , http://goo.gl/AL22tJ, Google Android; (2015) Android Navigation Drawer, , http://goo.gl/nnJOoj, Google Android; (2015) Up and Running with Material Design, , https://goo.gl/GmsJSJ, Google Android; (2016) Pure Android, , http://goo.gl/LqNPyS, Google Android; (2016) Tabs, , https://www.google.com/design/spec/components/tabs.html, Google Android; (2007) Apple Reinvents the Phone with IPhone, , https://goo.gl/AoFdyx, Apple; Arlt, S., Bertolini, C., Schäf, M., Behind the scenes: An approach to incorporate context in gui test case generation (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2011), pp. 222-231. , Washington, DC, USA; Avancini, A., Ceccato, M., Security testing of the communication among Android applications (2013) 8th International Workshop on Automation of Software Test (AST 2013), pp. 57-63. , http://dl.acm.org/citation.cfm?id=2662413.2662427, IEEE Press; Batyuk, L., Herpich, M., Ahmet Camtepe, S., Raddatz, K., Schmidt, A., Albayrak, S., Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications (2011) 2011 6th International Conference on Malicious and Unwanted Software, pp. 66-72. , https://doi.org/10.1109/MALWARE.2011.6112328, IEEE; Butcher, N., Developers, A., (2016) Android Design in Action: Navigation Anti-Patterns, , https://www.youtube.com/watch?v=Sww4omntVjs; Butcher, N., Nurik, R., (2016) Android Design in Action-Navigation Anti-Patterns, , http://www.allreadable.com/ff647Z8N; Capgemini, H.P., Sogeti, (2015) World Quality Report 2015-16, , https://goo.gl/SVoKtl, Technical Report; Capgemini, H.P., Sogeti, H.P., (2014) World Quality Report 2014-15, pp. 1-64. , http://goo.gl/jzN2aA, Technical Report; Chikofsky, E.J., Cross, J.H., Reverse engineering and design recovery: A taxonomy (1990) IEEE Software, 7 (1), pp. 13-17. , https://doi.org/10.1109/52.43044, 1990; Coimbra Morgado, I., Paiva, R.A.C., Test patterns for android mobile applications (2015) 20th European Conference on Pattern Languages of Programs (Europlop 2015), , http://dl.acm.org/citation.cfm?id=2855354, Irsee, Germany; Coimbra Morgado, I., Paiva, R.A.C., Testing approach for mobile applications through reverse engineering of UI patterns (2015) Sixth International Workshop on Testing Techniques for Event BasED Software; Coimbra Morgado, I., Paiva, R.A.C., The impact tool: Testing ui patterns on mobile applications (2015) 30th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015), , http://ieeexplore.ieee.org/xpls/abs{_}all.jsp?arnumber=7372083, Lincoln, NE, USA; Coimbra Morgado, I., Paiva, R.A.C., Impact of execution modes on finding Android failures (2016) The 7th International Conference on Ambient Systems, Networks and Technologies, 83, pp. 284-291. , https://doi.org/10.1016/j.procs.2016.04.127, 2016; Coimbra Morgado, I., Paiva, R.A.C., Pascoal Faria, J., Reverse engineering of graphical user interfaces (2011) The Sixth International Conference on Software Engineering Advances (ICSEA '11), pp. 293-298. , Barcelona; Coimbra Morgado, I., Paiva, R.A.C., Pascoal Faria, J., Dynamic reverse engineering of graphical user interfaces (2012) International Journal on Advances in Software, 5 (3-4), pp. 224-236. , http://goo.gl/yRoIKF, 2012; Costa, P., Paiva, R.A.C., Nabuco, M., Pattern based gui testing for mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), pp. 66-74. , https://doi.org/10.1109/QUATIC.2014.16, IEEE, Guimarães, Portugal; Cunha, M., Paiva, R.A.C., Sereno Ferreira, H., Abreu, R., PETTool: A pattern-based GUI testing tool (2010) Software Technology and Engineering (ICSTE) 2010 2nd International Conference on, 1. , https://doi.org/10.1109/ICSTE.2010.5608882, IEEE, San Juan, PR, V1-202-VI-206; Ahmad Dar, M., Parvez, J., Enhancing security of Android & IOS by implementing need-based security (NBS) (2014) 2014 International Conference on Control, Instrumentation, Communication and Computational Technologies (ICCICCT), pp. 728-733. , https://doi.org/10.1109/ICCICCT.2014.6993055; (2016) IOS Human Interface Guidilines, , https://goo.gl/kUhwJE, Apple Developer; Franke, D., Elsemann, C., Kowalewski, S., Weise, C., Reverse engineering of mobile application lifecycles (2011) 18th Working Conference on Reverse Engineering (WCRE '11). IEEE, pp. 283-292. , https://doi.org/10.1109/WCRE.2011.42; Franke, D., Kowalewski, S., Weise, C., Prakobkosol, N., Testing conformance of life cycle dependent properties of mobile applications (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation. IEEE, pp. 241-250. , https://doi.org/10.1109/ICST.2012.104; Fratantonio, Y., Machiry, A., Bianchi, A., Kruegel, C., Vigna, G., CLAPP: Characterizing loops in Android applications (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering-ESEC/FSE 2015, pp. 687-697. , https://doi.org/10.1145/2786805.2786873, ACM Press, New York, New York, USA; Gorla, A., Tavecchia, I., Gross, F., Zeller, A., Checking app behavior against app descriptions (2014) Proceedings of the 36th International Conference on Software Engineering-ICSE 2014, pp. 1025-1035. , https://doi.org/10.1145/2568225.2568276, ACM Press, New York, New York, USA; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI models for testing (2010) The 5th Iberian Conference on Information Systems and Technologies (CISTI '10), pp. 1-6. , http://goo.gl/bXcIy; Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) Companion of the 13th International Conference on Software Engineering (ICSE Companion '08) (ICSE Companion '08), 959. , https://doi.org/10.1145/1370175.1370207, ACM Press, New York, New York, USA; Holl, K., Elberzhager, F., A mobile-specific failure classification and its usage to focus quality assurance (2014) 2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications, pp. 385-388. , https://doi.org/10.1109/SEAA.2014.19; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) 6th International Workshop on Automation of Software Test (AST 2011), pp. 77-83. , https://doi.org/10.1145/1982595.1982612, ACM; Imparato, G., A combined technique of GUI ripping and input perturbation testing for Android apps (2015) 37th International Conference on Software Engineering-Volume 2 (ICSE '15), pp. 760-762. , http://dl.acm.org/citation.cfm?id=2819009.2819159, IEEE Press; Ingraham, N., (2013) Apple Announces 1 Million Apps in the App Store, More Than 1 Billion Songs Played on ITunes Radio, , http://goo.gl/z3RprB; (2011) ISO/IEC 25010:2011-Systems and Software Engineering ÂÂT Systems and Software Quality Requirements and Evaluation (SQuaRE) ÂÂT System and Software Quality Models, , https://www.iso.org/obp/ui/{#}:iso:std:iso-iec:25010, ISO/IEC. Technical Report; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis-ISSTA 2013, p. 67. , https://doi.org/10.1145/2483760.2483777, ACM Press, New York, New York, USA; Erfani Joorabchi, M., Mesbah, A., Reverse engineering ios mobile applications (2012) 2012 19th Working Conference on Reverse Engineering, pp. 177-186. , https://doi.org/10.1109/WCRE.2012.27, IEEE; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Grieskamp, W., Weise, C., Model-based testing through a gui (2005) 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005) (Lecture Notes in Computer Science), Wolfgang Grieskamp and Carsten Weise, 3997, pp. 16-31. , https://doi.org/10.1007/11759744, Springer-Verlag Berlin, Berlin, Heidelberg; Maezawa, Y., Washizaki, H., Honiden, S., Extracting interaction-based stateful behavior in rich internet applications (2012) 2012 16th European Conference on Software Maintenance and Reengineering, pp. 423-428. , https://doi.org/10.1109/CSMR.2012.53, IEEE; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., A whitebox approach for automated security testing of Android applications on the cloud (2012) 7th International Workshop on Automation of Software Test (AST 2012), pp. 22-28. , https://doi.org/10.1109/IWAST.2012.6228986, IEEE; Marchetto, A., Tonella, P., Ricca, F., Under and over approximation of state models recovered for ajax applications (2010) 2010 14th European Conference on Software Maintenance and Reengineering, pp. 236-239. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5714441, IEEE; Monteiro, T., Paiva, R.A.C., Pattern based gui testing modeling environment (2013) Sixth IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2013), pp. 140-143. , https://doi.org/10.1109/ICSTW.2013.24, IEEE, Luxembourg, Luxembourg; Moreira, M.L.R.M., Paiva, R.A.C., A GUI modeling DSL for pattern-based GUI testing PARADIGM (2014) 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE'2014), , Lisbon, Portugal; Moreira, M.L.R.M., Paiva, R.A.C., PBGT tool: An integrated modeling and testing environment for pattern-based GUI testing (2014) 29th ACM/IEEE International Conference on Automated Software Engineering (ASE 2014), pp. 863-866. , https://doi.org/10.1145/2642937.2648618, ACM Press, New York, New York, USA; Moreira, M.L.R.M., Paiva, R.A.C., Memon, A., A pattern-based approach for GUI modeling and testing (2013) 24th IEEE International Symposium on Software Reliability Engineering (ISSRE 2013), pp. 288-297. , https://doi.org/10.1109/ISSRE.2013.6698881, IEEE, Passadena, CA; Moreira, M.L.R.M., Paiva, R.A.C., Nabuco, M., Memon, A., Pattern-based GUI testing: Bridging the gap between design and quality assurance (2017) Softw. Test., Verif. Reliab., (27), p. 3. , https://doi.org/10.1002/stvr.1629, 2017; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) 7th International Workshop on Automation of Software Test (AST 2012), pp. 29-35. , https://doi.org/10.1109/IWAST.2012.6228987, IEEE, Zurich, Switzerland; Nabuco, M., Paiva, R.A.C., Camacho, R., Pascoal Faria, J., Inferring ui patterns with inductive logic programming (2013) 8th Iberian Conference on Information Systems and Technologies (CISTI '13), pp. 1-5. , Lisbon, Portugal; Nabuco, M., Paiva, R.A.C., Model-based test case generation forweb applications (2014) 14th International Conference on Computational Science and Applications (ICCSA 2014; Neil, T., (2014) Mobile Design Pattern Gallery: UI Patterns for Smartphone Apps, , (2nd ed.), O'Reilly Media Inc., Sebastopol, Canada; Nguyen, C.D., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis-ISSTA 2012, p. 100. , https://doi.org/10.1145/2338965.2336765, ACM Press, New York, New York, USA; Erik, G., Nilsson, Design patterns for user interface for mobile applications (2009) Advances in Engineering Software, 40 (12), pp. 1318-1328. , https://doi.org/10.1016/j.advengsoft.2009.01.017, dec, 2009; Paiva, R.A.C., Faria, P.J.C., Mendes, C.P.M., Reverse engineered formal models for GUI testing (2007) The 12th International Conference on Formal Methods for Industrial Critical Systems, pp. 218-233. , https://doi.org/10.1007/978-3-540-79707-4_16, Springer-Verlag; Ravitch, T., Rogan Creswick, E., Tomb, A., Foltzer, A., Elliott, T., Casburn, L., Multi-app security analysis with FUSE (2014) Proceedings of the 4th Program Protection and Reverse Engineering Workshop on 4th Program Protection and Reverse Engineering Workshop-PPREW-4, pp. 1-10. , https://doi.org/10.1145/2689702.2689705, ACM Press, New York, New York, USA; Rohatgi, A., Hamou-Lhadj, A., Rilling, J., An approach for mapping features to code based on static and dynamic analysis (2008) 2008 16th IEEE International Conference on Program Comprehension. IEEE, pp. 236-241. , https://doi.org/10.1109/ICPC.2008.35; Sacramento, C., Paiva, R.A.C., Web application model generation through reverse engineering and ui pattern inferring (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), pp. 105-115. , https://doi.org/10.1109/QUATIC.2014.20, IEEE, Guimarães, Portugal; Sahami Shirazi, A., Henze, N., Schmidt, A., Goldberg, R., Schmidt, B., Schmauder, H., Insights into layout patterns of mobile user interfaces by an automatic analysis of android apps (2013) 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 275-284. , https://doi.org/10.1145/2480296.2480308, ACM; Shahriar, H., North, S., Mawangi, E., Testing of memory leak in android applications (2014) 2014 IEEE 15th International Symposium on High-Assurance Systems Engineering. IEEE, pp. 176-183. , https://doi.org/10.1109/HASE.2014.32; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , (1 ed.), Morgan Kaufmann Publishers, San Francisco, CA, USA; Van Der Merwe, H., Van Der Merwe, B., Visse, W., Verifying android applications using Java PathFinder (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), p. 1. , https://doi.org/10.1145/2382756.2382797, nov, 2012; Wilson, M., (2008) T-Mobile G1: Full Details of the HTC Dream Android Phone, , http://goo.gl/6vqI4E; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) 28th International Conference on Software Engineering-(ICSE 2006), pp. 997-1000. , https://doi.org/10.1145/1134285.1134473, ACM Press, New York, New York, USA; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) 16th International Conference on Fundamental Approaches to Software Engineering (FASE'13), pp. 250-265. , https://doi.org/10.1007/978-3-642-37057-1_19, Rome, Italy; Yu, S., Takada, S., External event-based test cases for mobile application (2015) Proceedings of the Eighth International C∗ Conference on Computer Science & Software Engineering-C3S2E ', 15, pp. 148-149. , https://doi.org/10.1145/2790798.2790822, ACM Press, New York, New York, USA",,,,"Association for Computing Machinery",,,,,25730142,,,,"English","Proc. ACM Hum. Comput. Interact.",Article,"Final","",Scopus,2-s2.0-85067928340
"Tirodkar A.A., Khandpur S.S.","55208187000;57211057799;","EarlGrey: IOS UI automation testing tool",2019,"Proceedings - 2019 IEEE/ACM 6th International Conference on Mobile Software Engineering and Systems, MOBILESoft 2019",,, 8816983,"16","19",,,"10.1109/MOBILESoft.2019.00011","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072544493&doi=10.1109%2fMOBILESoft.2019.00011&partnerID=40&md5=81c390a3ccd7ad828baabd4dc425070a","Google Inc., Mountain View, United States","Tirodkar, A.A., Google Inc., Mountain View, United States; Khandpur, S.S., Google Inc., Mountain View, United States","In this paper, we outline the challenges faced in scalable UI testing of applications on the iOS platform. We analyze how different existing UI testing tools have provided solutions for them and highlight EarlGrey, Googles in-house multi-process UI Automation testing tool. We delve into the technical aspects of EarlGrey in regards to these challenges. © 2019 IEEE.","iOS Testing; iOS UI Testing; Mobile App Development; Testable Design; Testing Tools; UI testability","Engineering; Industrial engineering; Automation testing; Mobile app; Multi-Processes; Technical aspects; Testability; Testable design; Testing tools; iOS (operating system)",,,,,,,,"Olbrich, J., Automated UI-Testing for IOS Apps, , http://medium.com/mobile-quality/automated-ui-testing-for-ios-apps-cfe128ae6411; App Store Device Usage Pie Chart, , http://developer.apple.com/support/app-store, App Store; Understand the Testing Pyramid, , http://developer.android.com/training/testing/fundamentals; Micco, J., Flaky Tests at Google and How We Mitigate Them, , http://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html; http://github.com/kif-framework/KIF; http://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/testingwithxcode/chapters/09-uitesting.html, User Interface Testing; Apple Developer Forums, , http://forums.developer.apple.com/thread/28925; Knych Thomas, W., Baliga, A., Android application development and testability (2014) 1st International Conference on Mobile Software Engineering and Systems, , MOBILESoft 2014-Proceedings; http://github.com/google/EarlGrey; http://developer.apple.com/documentation/objectivec/nsobject/1615179-accessibilityactivationpointlanguage=objc; Singh Khandpur, S., (2016) Determining Visibility of Rendered Content, , 25 Oct; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24. , Baltimore, MD; http://github.com/google/eDistantObject; NS Distant Object, , http://developer.apple.com/documentation/foundation/nsdistantobject; Jagtap, S., http://medium.com/xcblog/hands-on-xcuitest-features-with-xcode-9-eb4d00be278",,,,"Institute of Electrical and Electronics Engineers Inc.","6th IEEE/ACM International Conference on Mobile Software Engineering and Systems, MOBILESoft 2019","25 May 2019",,151425,,9781728133959,,,"English","Proc. - IEEE/ACM Int. Conf. Mob. Softw. Eng. Syst., MOBILESoft",Conference Paper,"Final","",Scopus,2-s2.0-85072544493
"Negara S., Esfahani N., Buse R.","25825481400;35092350100;57210976820;","Practical Android Test Recording with Espresso Test Recorder",2019,"Proceedings - 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice, ICSE-SEIP 2019",,, 8804444,"193","202",,3,"10.1109/ICSE-SEIP.2019.00029","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072119639&doi=10.1109%2fICSE-SEIP.2019.00029&partnerID=40&md5=21d6ba19449cf94a62c3e899a716e72a","Google LLC, Mountain View, CA, United States","Negara, S., Google LLC, Mountain View, CA, United States; Esfahani, N., Google LLC, Mountain View, CA, United States; Buse, R., Google LLC, Mountain View, CA, United States","Tests for mobile apps can be difficult to write, are often fragile, unreliable, and come with a significant maintenance burden. As a result, many developers write few or no tests and instead rely on expensive and error-prone manual testing. We present Espresso Test Recorder, a practical approach to test creation for Android. Espresso Test Recorder employs a novel technique based on the Java Debugger to reliably capture UI interactions and generate robust well-formed instrumentation tests, which can be used across a wide range of devices. In this paper, we report on how we designed, built, and productionized Espresso Test Recorder in Android Studio, where it has been employed by thousands of users throughout the world to record tests with minimal effort. © 2019 IEEE.","Android; Espresso; Testing","Engineering; Industrial engineering; Testing; Android; Debuggers; Error prones; Espresso; Manual testing; Mobile apps; Novel techniques; Android (operating system)",,,,,,,,"(2017) AccessibilityService, ""web, , https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html, Oct; (2017) Bot-bot, ""web, , http://imaginea.github.io/bot-bot/, Oct; (2017) Create UI Tests with Espresso Test Recorder, ""web, , https://developer.android.com/studio/test/espresso-Test-recorder.html, Apr; (2017) Culebra, ""web, , http://culebra.dtmilano.com/, Oct; (2017) Espresso Idling Resource, , https://developer.android.com/training/testing/espresso/idling-resource.html, Web,"" Oct; (2017) Espresso Test Recorder Source Code, ""web, , https://android.googlesource.com/platform/tools/studio/google/cloud/testing/+/studio-master-dev/test-recorder, Oct; (2018) F-Droid, ""web, , https://f-droid.org, Dec; Fazzini, M., Freitas, E.N.D.A., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, and running platform independent android tests (2017) Int?l Conf. on Software Testing, Verification and Validation, Tokyo, Japan, pp. 149-160. , Mar; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timingand touch-sensitive record and replay for android (2013) Int?l Conf. on Software Engineering, , San Francisco, CA, USA May; Guerrouj, L., Baysal, O., Investigating the android apps? Success: An empirical study Int?l Conf. on Program Comprehension, pp. 1-4. , Austin, Texas, USA, May 2016; Halpern, M., Zhu, Y., Peri, R., Reddi, V.J., Mosaic: Cross-platform user-interaction record and replay for the fragmented android ecosystem (2015) Int?l Symp. on Performance Analysis of Systems and Software, Philadelphia, Pennsylvania, USA, pp. 215-224. , Mar; Hu, Y., Azim, T., Neamtiu, I., Versatile Yet Lightweight Record-Andreplay for Android (2015) Int?l Conf. on Object-Oriented Programming, Systems, Languages, and Applications, pp. 349-366. , Pittsburgh, Pennsylvania, USA Oct; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote ui testing on android (2012) International Conference on Mobile and Ubiquitous Multimedia, Ulm, Germany, pp. 281-284. , Dec; Lam, W., Record and replay for android: Are we there yet in industrial cases? (2017) The Joint Meeting of the European Software Engineering Conf. and the ACM SIGSOFT Symp. on the Foundations of Software Engineering, , http://doi.acm.org/10.1145/3106237.3117769, Paderborn, Germany Sep; Leung, H.K., Lui, K.M., An industrial survey and assessment on free mobile testing tools (2016) New Trends in Software Methodologies, Tools and Techniques, Ser. Frontiers in Artificial Intelligence and Applications, 286, pp. 302-311; Li, X., Atom: Automatic maintenance of gui test scripts for evolving mobile applications (2017) Int?l Conf. on Software Testing, Verification and Validation, pp. 161-171. , Tokyo, Japan Mar; Lin, Y.D., Chu, E.T.H., Yu, S.C., Lai, Y.C., Improving the accuracy of automated gui testing for embedded systems (2014) IEEE Software, 31 (1), pp. 39-45. , Jan; Lin, Y.D., Rojas, J.F., Chu, E.T.H., Lai, Y.C., On the accuracy, efficiency, and reusability of automated test oracles for android devices (2014) IEEE Trans. on Software Engineering, 40 (10), pp. 957-970. , Oct; (2018) List of Free and Open-source Android Applications, ""web, , https://goo.gl/Mw6bak, Dec; Liu, C.H., Lu, C.Y., Cheng, S.J., Chang, K.Y., Hsiao, Y.C., Chu, W.M., Capture-replay testing for android applications (2014) Int?l Symp. on Computer, Consumer and Control, Taichung , Taiwan, pp. 1129-1132. , Jun; (2017) Monkeyrunner, ""web, , https://developer.android.com/studio/test/monkeyrunner/index.html, Oct; Qin, Z., Tang, Y., Novak, E., Li, Q., MobiPlay: A remote execution based record-And-replay tool for mobile applications Int?l Conf. on Software Engineering, pp. 571-582. , Austin, Texas, USA, May 2016; (2017) Replaykit, ""web, , https://github.com/appetizerio/replaykit, Oct; (2017) The Apache Velocity Project, ""web, , http://velocity.apache.org, Apr; (2017) Topeka for Android, ""web, , https://github.com/googlesamples/android-Topeka, Oct; Wei, L., Liu, Y., Cheung, S.C., Taming android fragmentation: Characterizing and detecting compatibility issues for android apps (2016) Int?l Conf. on Automated Software Engineering, Singapore, Singapore, pp. 226-237. , Sep",,,"Association for Computing Machinery (ACM);et al.;IEEE Computer Society;National Science Foundation (NSF);Special Interest Group on Software Engineering (SIGSOFT);Technical Council on Software Engineering (TCSE)","Institute of Electrical and Electronics Engineers Inc.","41st IEEE/ACM International Conference on Software Engineering: Software Engineering in Practice, ICSE-SEIP 2019","25 May 2019 through 31 May 2019",,150945,,9781728117607,,,"English","Proc. - IEEE/ACM Int. Conf. Softw. Eng.: Softw. Eng. Pract., ICSE-SEIP",Conference Paper,"Final","",Scopus,2-s2.0-85072119639
"Ardito L., Coppola R., Morisio M., Torchiano M.","36184897700;57191261885;6701428565;6602571197;","Espresso vs. Eyeautomate: An experiment for the comparison of two generations of android GUI testing",2019,"ACM International Conference Proceeding Series",,,,"13","22",,8,"10.1145/3319008.3319022","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064770091&doi=10.1145%2f3319008.3319022&partnerID=40&md5=5e251ca8a46bb86677c253badc20f2a1","Politecnico di Torino, Turin, Italy","Ardito, L., Politecnico di Torino, Turin, Italy; Coppola, R., Politecnico di Torino, Turin, Italy; Morisio, M., Politecnico di Torino, Turin, Italy; Torchiano, M., Politecnico di Torino, Turin, Italy","Context: Different approaches exist for automated GUI testing of Android applications, each with its peculiarities, advantages, and drawbacks. The most common are either based on the structure of the GUI or use visual recognition. Goal: In this paper, we present an empirical evaluation of two different GUI testing techniques with the use for each of a representative tool: (1) Visual GUI testing, with the use of EyeAutomate, and (2) Layout-based GUI testing, with the use of Espresso. Method: We conducted an experiment with a population of 78 graduate students. The participants of the study were asked to create the same test suite for a popular, open-source Android app (Omni-Notes) with both the tools, and to answer a survey about their preference to the one or the other, and the perceived difficulties when developing the test scripts. Results: By analyzing the outcomes of the delivered test suites (in terms of number of test scripts delivered and ratio of working ones) and the answers to the survey, we found that the participants showed similar productivity with both the tools, but the test suites developed with EyeAutomate were of higher quality (in terms of correctly working test scripts). The participants expressed a slight preference towards the EyeAutomate testing tool, reflecting a general complexity of Layout-based techniques – represented by Espresso – and some obstacles that may make the identification of components of the GUI quite a long and laborious task. Conclusions: The evidence we collected can provide useful hints for researchers aiming at making GUI testing techniques for mobile applications more usable and effective. © 2019 Association for Computing Machinery.","Empirical software engineering; Mobile computing; Software testing","Android (operating system); Graphical user interfaces; Mobile computing; Open source software; Students; Surveys; Testing; Android applications; Empirical evaluations; Empirical Software Engineering; Graduate students; Mobile applications; Perceived difficulties; Visual gui testing; Visual recognition; Software testing",,,,,,,,"Omni Notes - App on Google Play, , https://play.google.com/store/Apps/details?id=it.feio.android.omninotes&hl=en/, n. d; Aho, P., Vos, T., Challenges in automated testing through graphical user interface (2018) 2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW); Alégroth, E., Feldt, R., On the long-term use of visual gui testing in industrial practice: A case study (2017) Empirical Software Engineering, 22 (6), pp. 2937-2971. , 2017; Alégroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual gui testing: An empirical study (2015) Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference on, pp. 1-10; Alégroth, E., Karlsson, A., Radway, A., Continuous integration and visual GUI testing: Benefits and drawbacks in industrial practice (2018) Software Testing, Verification and Validation (ICST), 2018 IEEE 11th International Conference on, pp. 172-181; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B., Memon, A., Mobiguitar – A tool for automated model-based testing of mobile apps (2014) IEEE Software, 1, p. 1. , 2014; Ardito, L., Coppola, R., Torchiano, M., Omni-Notes Modified APK File, , http://softeng.polito.it/coppola/omni-notes-good.apk, n. d; Ardito, L., Coppola, R., Torchiano, M., Responses to The Survey Questions, , http://softeng.polito.it/coppola/survey_results.xlsx, n. d; Ardito, L., Coppola, R., Torchiano, M., Alegroth, E., Towards automated translation between generations of GUI-based tests for mobile devices (2018) Proceedings of INTUITESTBEDS 2018, Joint Workshop of The 4th International Workshop on User Interface Test Automation, and 8th Workshop on TESting Techniques for Event BasED Software; Bruns, A., Kornstadt, A., Wichmann, D., Web application tests with selenium (2009) IEEE Software, 26, p. 5. , 2009; Basili-Gianluigi Caldiera, V.R., Dieter Rombach, H., Goal question metric paradigm (1994) Encyclopedia of Software Engineering, 1 (1994), pp. 528-532; Claes, C., Wohlin, Runeson, R., Per, Höst, H., Martin, Ohlsson, C.O., Wesslén, A., (2012) Experimentation in Software Engineering, , Springer; Coppola, R., Morisio, M., Torchiano, M., Scripted GUI testing of Android apps: A study on diffusion, evolution and fragility (2017) Proceedings of The 13th International Conference on Predictive Models and Data Analytics in Software Engineering, pp. 22-32; Coppola, R., Morisio, M., Torchiano, M., Mobile GUI testing fragility: A study on open-source android applications (2018) IEEE Transactions on Reliability, (2018), pp. 1-24. , https://doi.org/10.1109/TR.2018.2869227; Corbin, J.M., Strauss, A., Grounded theory research: Procedures, canons, and evaluative criteria (1990) Qualitative Sociology, 13 (1), pp. 3-21. , 1990; https://developer.android.com/training/testing/espresso/, n. d. Espresso; Fazzini, M., De A Freitas, E.N., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, and running platform independent android tests (2017) Software Testing, Verification and Validation (ICST), 2017 IEEE International Conference on, pp. 149-160; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timing-and touch-sensitive record and replay for android (2013) Proceedings of The 2013 International Conference on Software Engineering, pp. 72-81. , IEEE Press; (2017) Smartphone Market Share, , https://www.idc.com/promo/smartphone-market-share/os, n. d; Open Source Note-Taking Application for Android, , https://github.com/federicoiosue/Omni-Notes/, n. d; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of App developers (2015) 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), pp. 1-10. , https://doi.org/10.1109/ICST.2015.7102609; Kropp, M., Morales, P., Automated GUI testing on the Android platform (2010) Testing Software and Systems: Short Papers, p. 67. , 2010; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) Reverse Engineering (WCRE), 2013 20th Working Conference on, pp. 272-281; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. DOM-based web locators: An empirical study (2014) International Conference on Web Engineering, pp. 322-340. , Springer; Linares-Vásquez, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference on, pp. 613-622; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing (2017) Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference on, pp. 399-410; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of The 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Min, Y., Cai, S., (2018) Comparing Different Approaches of GUI Testing for Mobile Applications on Android Platform; Morgado, I.C., Paiva, A.C.R., The impact tool: Testing ui patterns on mobile applications (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 876-881; Singh, S., Gadgil, R., Chudgor, A., Automated testing of mobile applications using scripting technique: A study on Appium (2014) International Journal of Current Engineering and Technology (IJCET), 4 (5), pp. 3627-3630. , 2014; Tools for Visual GUI Testing, , http://eyeautomate.com/, n. d; Tramontana, P., Amalfitano, D., Amatucci, N., Fasolino, A.R., Automated functional testing of mobile applications: A systematic mapping study (2018) Software Quality Journal, 2018, pp. 1-53; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , Springer; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of The 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192; Zhauniarovich, Y., Philippov, A., Gadyatskaya, O., Crispo, B., Massacci, F., Towards black box testing of android apps (2015) Availability, Reliability and Security (ARES), 2015 10th International Conference on, pp. 501-510",,,"IT University of Copenhagen","Association for Computing Machinery","23rd Evaluation and Assessment in Software Engineering Conference, EASE 2019","14 April 2019 through 17 April 2019",,147277,,9781450371452,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85064770091
"Medhat Kamal M., Darwish S.M., Elfatatry A.","57209749816;16066562900;6507188428;","Enhancing the automation of GUI testing",2019,"ACM International Conference Proceeding Series",,,,"66","70",,,"10.1145/3328833.3328842","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068592099&doi=10.1145%2f3328833.3328842&partnerID=40&md5=47817f97d7a3c0bcecd9a2c1f1d29b7c","Information Technology Dept, Institute of Graduate Studies, Research Alexandria University, 163 Horreya Avenue - El-Shatby P.O. Box: 832, Alexandria, Egypt","Medhat Kamal, M., Information Technology Dept, Institute of Graduate Studies, Research Alexandria University, 163 Horreya Avenue - El-Shatby P.O. Box: 832, Alexandria, Egypt; Darwish, S.M., Information Technology Dept, Institute of Graduate Studies, Research Alexandria University, 163 Horreya Avenue - El-Shatby P.O. Box: 832, Alexandria, Egypt; Elfatatry, A., Information Technology Dept, Institute of Graduate Studies, Research Alexandria University, 163 Horreya Avenue - El-Shatby P.O. Box: 832, Alexandria, Egypt","GUI testing is one of the most important and significant testing approaches among all different software testing techniques. Most software errors are captured and detected through the software GUI layer. Manual testing for GUIs has its problems. It lacks in capturing all different cases and takes a huge time from the software tester to plan, design and re-design the testing suites in case of UI change. Old techniques in the area of test-case generation are not fully-automated or dependent on human inputs. This paper presents a test-case generation model to build a testing suite for webpages using its HTML file. The proposed model has two branches. The first one focuses on generating test cases for each web-element individually based on its type. The other branch focuses on generating test cases based on different paths between web-elements in the same webpage. It is also concerned with eliminating redundant test-cases using a supervised learning, feed-forward, dynamic artificial neural network that changes number of inputs according to generated cases per web page. The proposed system has been evaluated using several datasets. Results show a significant enhancement in the test-case generation procedure. © 2019 Association for Computing Machinery.","Automation Testing; Front-End Testing; Functional Testing; GUI Testing; Software Testing; Test-Case Generation","Automation; Feedforward neural networks; Graphical user interfaces; Testing; Websites; Automation testing; Front end; Functional testing; GUI testing; Test case generation; Software testing",,,,,,,,"Harris, G., Fault models and test generation for hardware-software covalidation (2003) IEEE Design and Test, 20 (4), pp. 40-47; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) 21St IEEE Int. Conference on Software Maintenance (ICSM), pp. 473-482; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) 12th International Symposium on Software Reliability Engineering (ISSRE), pp. 34-43; Reza, H., Endapally, S., Grant, E., A model-based approach for testing GUI using hierarchical predicate transition nets (2007) 4th Information Technology: New Generations (ITNG), pp. 366-370; Zacharias, B., Datchayani, M., Xavier, A., Yogesh, P., Test-case generation and reusing test cases for GUI designed with HTML (2012) Journal of Software, 7 (10), pp. 2269-2277; Yuan Cai, K., Zhao, L., Hu, H., Hai Jiang, C., On the test-case definition for GUI testing (2005) 5th International Conference on Quality Software (QSIC), pp. 19-26; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Juergen, K., Automation of GUI testing using a model-driven approach (2006) 6th International Workshop on Automation of Software Testing (AST), pp. 9-14; Memon, A.M., An event‐flow model of GUI‐based applications for testing (2007) Software Testing: Verification and Reliability, 17 (3), pp. 137-157; Qing, X., Developing cost-effective model-based techniques for GUI testing (2006) 28th International Conference on Software Engineering (ICSE), pp. 997-1000; Zebao, G., Chen, Z., Zou, Y., Memon, A.M., Developing testing techniques for event-driven pervasive computing applications (2004) 19th International ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPLSA), Workshop on Building Software for Pervasive Computing (BSPC); Zebao, G., Chen, Z., Zou, Y., Memon, A.M., SITAR: GUI test script repair (2016) IEEE Transactions on Software Engineering, 42 (2), pp. 170-186; Alsmadi, I., Magel, K., Generating test cases from the GUI model (2006) 5th International Conference of World Scientific and Engineering Academy and Society (WSEAS); Darvish, D., Ali, M., Chang, K., Black-box test data generation for GUI testing (2014) 14th Quality Software International Conference (QSIC), pp. 133-138; Stephan, A., Podelski, A., Bertolini, C., Schäf, M., Banerjee, I., Memon, A.M., Lightweight static analysis for GUI testing (2012) 23rd International Symposium on Software Reliability Engineering (ISSRE), pp. 301-310; Rodrigo, M., Memon, A.M., A pattern-based approach for GUI modeling and testing (2013) 24th International Symposium on Software Reliability Engineering (ISSRE), pp. 288-297; Hsiang, T., Yeh, T., Miller, C., GUI testing using computer vision (2010) ACM International Conference on Special Interest Group on Computer-Human Interaction (SIGCHI), pp. 1535-1544; Stephan, A., Cristiano, B., Simon, P., Schäf, M., Trends in model-based GUI testing (2012) Advances in Computers, 86 (1), pp. 183-222; Rodriguez, J., Automatic generation of GUI test cases using ant colony optimization and greedy algorithm (2015) 17th Conference on Software Engineering (CIBSE)",,,,"Association for Computing Machinery","8th International Conference on Software and Information Engineering, ICSIE 2019","9 April 2019 through 12 April 2019",,148824,,9781450361057,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85068592099
"Paiva A.C.R., Gouveia J.M.E.P., Elizabeth J.-D., Delamaro M.E.","7102683763;57209654972;57209654651;6602659678;","Testing when mobile apps go to background and come back to foreground",2019,"Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019",,, 8728917,"102","111",,3,"10.1109/ICSTW.2019.00038","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068395304&doi=10.1109%2fICSTW.2019.00038&partnerID=40&md5=4ef006a6743cb5e2117a87062b5e04b9","INESC TEC, Faculty of Engineering, University of Porto, Porto, Portugal; Faculty of Engineering, University of Porto, Porto, Portugal; Higher Institute for Electronics and Digital Training, Brest, France; Instituto de Ciências Matemáticas e de Computação, Universidade de São Paulo, São Paulo, Brazil","Paiva, A.C.R., INESC TEC, Faculty of Engineering, University of Porto, Porto, Portugal; Gouveia, J.M.E.P., Faculty of Engineering, University of Porto, Porto, Portugal; Elizabeth, J.-D., Higher Institute for Electronics and Digital Training, Brest, France; Delamaro, M.E., Instituto de Ciências Matemáticas e de Computação, Universidade de São Paulo, São Paulo, Brazil","Mobile applications have some specific characteristics not found on web and desktop applications. The mobile testing tools available may not be prepared to detect problems related to those specificities. So, it is important to assess the quality of the test cases generated/executed by mobile testing tools in order to check if they are able to find those specific problems. One way to assess the quality of a test suite is through mutation testing. This paper presents new mutation operators created to inject faults leading to known failures related to the non-preservation of users transient UI state when mobile applications go to background and then come back to foreground. A set of mutation operators is presented and the rational behind its construction is explained. A case study illustrates the approach to evaluate a mobile testing tool. In this study, the tool used is called iMPAcT tool, however any other mobile testing tool could be used. The experiments are performed over mobile applications publicly available on the Google Play store. The results are presented and discussed. Finally, some improvements are suggested for the iMPAcT tool in order to be able to generate test cases that can kill more mutants and so, hopefully, detect more failures in the future. © 2019 IEEE.","Android Testing; Mobile Testing; Mutation Operators; Mutation Testing; Software Test Automation; Software Testing","Mobile computing; Verification; Desktop applications; Google plays; Mobile applications; Mobile testing; Mutation operators; Mutation testing; Software test automation; Specific problems; Software testing",,,,,,,,"Android platform (2018) ViewModel Overview, , //developer.android.com/jetpack/arch/viewmodel, accessed in October; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Proceedings of the 7th International Workshop on Automation of Software Test (AST '12), pp. 29-35. , IEEE Press, Piscataway, NJ, USA; Android platform (2018) Saving UI State, , //developer.android.com/topic/libraries/architecture/saving-states, accessed in October; Coimbra Morgado, I., Paiva, R.A.C., The iMPAcT tool: Testing ui patterns on mobile applications (2015) 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 876-881; Coimbra Morgado, I., Paiva, R.A.C., Testing approach for mobile applications through reverse engineering of ui patterns (2015) 30th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW), pp. 42-49; (2018) Android Platform, , https://developer.android.com/reference/android/content/Intent, accessed in October; Amalfitano, D., Amatuccia, N., Memon, A., Tramontana, P., Fasolino, A.R., A general framework for comparing automatic testing techniques of Android mobile apps (2017) Journal of Systems and Software, 125, pp. 322-343. , March; Linares-Vsquez, M., Bavota, G., Tufano, M., Moran, K., Di Penta, M., Vendome, C., Bernal-Crdenas, C., Poshyvanyk, D., Enabling mutation testing for Android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017). ACM, pp. 233-244. , New York, NY, USA; Spafford, E., Extending mutation testing to find environmental bugs (1990) Software: Practice and Experience, 20 (2); Deng, L., Offutt, J., Ammann, P., Mirzaei, N., Mutation operators for testing android apps (2017) Information & Software Technology, 81, pp. 154-168; Leow, A., Van Baker, L., Marshall, R., Revang, M., Wong, J., (2016) Predicts 2017: Mobile Apps and Their Development, , Gartner Inc., December 1; (2017) Localytics Announces Industry Benchmarks for App Engagement and User Retention, , Boston, 13 March; Linares-Vásquez, M., Enabling mutation testing for android apps (2017) Proceedings of 2017 11th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, , Paderborn, Germany, September 48; Moran, K., MDroid+: A mutation testing framework for android (2018) ICSE 18 Companion: 40th International Conference on Software Engineering, , Gothenburg, Sweden, May 27-June 3; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Softw., 32 (5), pp. 53-59; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, ACM, pp. 599-609. , New York, NY, USA; Fabbri, S.C.P.F., Maldonado, J.C., Delamaro, M.E., Masiero, P.C., Proteum/FSM: A tool to support finite state machine validation based on mutation testing (1999) Proceedings of the XIX SCCC-International Conference of the Chilean Computer Science Society, pp. 96-104; Fabbri, S.C.P.F., Maldonado, J.C., Masiero, P.C., Delamaro, M.E., Mutation analysis applied to validate specifications based on petri nets (1994) Proceedings of the FORTE'95-8th IFIP Conference on Formal Descriptions Techniques for Distribute Systems and Communication Protocols, pp. 220-229. , Montreal, Canada; Coimbra Morgado, I., Paiva, R.A.C., Impact of execution modes on finding android failures (2016) The 7th International Conference on Ambient Systems, Networks and Technologies (ANT 2016), in Procedia Computer Science, 83, pp. 284-291; Coimbra Morgado, I., Paiva, R.A.C., Mobile GUI testing (2017) Software Quality Journal; Coimbra Morgado, I., Paiva, R.A.C., Test patterns for android mobile applications (2015) Proceedings of the 20th European Conference on Pattern Languages of Programs (EuroPLoP 2015), , Kloster Irsee in Bavaria, Germany, July; Android platform (2018) Understand the Activity Lifecycle, , //developer.android.com/guide/components/activities/activitylifecycle, accessed in October; Coimbra Morgado, I., Paiva, R.A.C., Pascoal Faria, J., Automated pattern-based testing of mobile applications (2014) 5th Portuguese Software Engineering Doctoral Symposium (SEDES 2014) Hosted by QUATIC2014 9th International Conference on the Quality of Information and Communications Technology (QUATIC), , September 23rd; Coimbra, I., Paiva, R.A.C., Faria, J.P., Camacho, R., GUI reverse engineering with machine learning (2012) RAISE'12-Workshop on Realizing Artificial Intelligence Synergies in Software Engineering, , Zurich, Switzerland, June 5; Amalfitano, D., Riccio, V., Paiva, R.A.C., Rita Fasolino, A., Why does the orientation change mess up my Android application? from GUI failures to code faults (2017) Software Testing, Verification and Reliability Journal (STVR), , 6 November; Costa, P., Paiva, R.A.C., Nabuco, M., Pattern based GUI testing for mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC), , 23-26 September",,,,"Institute of Electrical and Electronics Engineers Inc.","12th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019","22 April 2019 through 27 April 2019",,148643,,9781728108889,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-85068395304
"Nass M., Alegroth E., Feldt R.","55843952200;55843479600;24476388300;","Augmented testing: Industry feedback to shape a new testing technology",2019,"Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019",,, 8728937,"176","183",,1,"10.1109/ICSTW.2019.00048","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068385060&doi=10.1109%2fICSTW.2019.00048&partnerID=40&md5=492152364acab2cf8328a40ab01a23f0","SERL Sweden, Blekinge Institute of Technology, Karlskrona, Sweden; SERL Sweden and Software Engineering, Chalmers University of Technology, Gothenburg, Sweden","Nass, M., SERL Sweden, Blekinge Institute of Technology, Karlskrona, Sweden; Alegroth, E., SERL Sweden, Blekinge Institute of Technology, Karlskrona, Sweden; Feldt, R., SERL Sweden and Software Engineering, Chalmers University of Technology, Gothenburg, Sweden","Manual testing is the most commonly used approach in the industry today for acceptance-and system-testing of software applications. Test automation has been suggested to address drawbacks with manual testing but both test automation and manual testing have several challenges that limit their return of investment for system-and acceptance-test automation. Hence, there is still an industrial need for another approach to testing that can mitigate the challenges associated with system-and acceptance-testing and make it more efficient and cost effective for the industry. In this paper we present a novel technique we refer to as Augmented Testing (AT). AT is defined as testing through a visual layer between the tester and the System Under Test (SUT) that superimposes information on top of the GUI. We created a prototype for AT and performed an industrial workshop study with 10 software developers to get their perceived benefits and drawbacks of AT. The benefits and drawbacks will be useful for further development of the technique and prototype for AT. The workshop study identified more benefits than drawbacks with AT. Two of the identified benefits were: 'Know what to test and what has been tested' and 'Less manual work'. Due to these results, we believe that AT is a promising technique that deserves more research since it may provide industry with new benefits that current techniques lack. © 2019 IEEE.","Augmented Testing; Industrial Workshop Study; System Testing; Test Automation","Application programs; Automation; Cost effectiveness; Software prototyping; Software testing; System theory; Verification; Acceptance testing; Industrial Workshop Study; Return of investments; Software applications; Software developer; System testing; Test Automation; Testing technology; Acceptance tests",,,,,"Stiftelsen för Kunskaps- och Kompetensutveckling, KKS

Blekinge Tekniska Högskola, BTH: 20140218","IX. ACKNOWLEDGEMENTS This work was supported by the KKS foundation through the S.E.R.T. Research Profile project at Blekinge Institute of Technology and by a research grant for the ORION project (ref. 20140218) from The Knowledge Foundation in Sweden.",,"Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving guidirected test scripts (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 408-418. , IEEE Computer Society; Grechanik, M., Xie, Q., Fu, C., Creating gui testing tools using accessibility technologies (2009) Software Testing, Verification and Validation Workshops, 2009. ICSTW'09. International Conference on. IEEE, pp. 243-250; Olan, M., Unit testing: Test early, test often (2003) Journal of Computing Sciences in Colleges, 19 (2), pp. 319-328; Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated gui performance testing (2011) Software Quality Journal, 19 (4), pp. 801-839; Alégroth, E., (2015) Visual GUI Testing: Automating High-level Software Testing in Industrial Practice, , Chalmers University of Technology; Chang, T.-H., Yeh, T., Miller, R.C., Gui testing using computer vision (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM, pp. 1535-1544; Thummalapenta, S., Devaki, P., Sinha, S., Chandra, S., Gnanasundaram, S., Nagaraj, D.D., Sathishkumar, S., Efficient and change-resilient test automation: An industrial case study (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 1002-1011. , IEEE Press; Gill, K.S., (2012) Human Machine Symbiosis: The Foundations of Humancentred Systems Design, , Springer Science & Business Media; https://www.wikipedia.org; Nass, M., Olsson, H., Alegroth, E., Jautomate: A tool for system-and acceptance-test automation (2013) IEEE Sixth International Conference on Software Testing, Verification and Validation., , Citeseer; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Pesto: Automated migration of dom-based web tests towards the visual approach (2018) Software Testing, Verification and Reliability, 28 (4), p. e1665; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Using multi-locators to increase the robustness of web test cases (2015) Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference on. IEEE, pp. 1-10; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference on. IEEE, pp. 81-90; Aho, P., Suarez, M., Kanstrén, T., Memon, A.M., Murphy tools: Utilizing extracted gui models for industrial software testing (2014) Software Testing, Verification and Validation Workshops (ICSTW), 2014 IEEE Seventh International Conference on. IEEE, pp. 343-348; Amalfitano, D., Riccio, V., Amatucci, N., De Simone, V., Fasolino, A.R., Combining automated gui exploration of android apps with capture and replay through machine learning (2019) Information and Software Technology, 105, pp. 95-116; Rafi, D.M., Moses, K.R.K., Petersen, K., Mäntylä, M.V., Benefits and limitations of automated software testing: Systematic literature review and practitioner survey (2012) Proceedings of the 7th International Workshop on Automation of Software Test, pp. 36-42. , IEEE Press",,,,"Institute of Electrical and Electronics Engineers Inc.","12th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019","22 April 2019 through 27 April 2019",,148643,,9781728108889,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-85068385060
"Paiva A.C.R., Goncalves M.A., Barros A.R.","7102683763;57202581036;57209503985;","Testing android incoming calls",2019,"Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation, ICST 2019",,, 8730190,"441","448",,1,"10.1109/ICST.2019.00053","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067957042&doi=10.1109%2fICST.2019.00053&partnerID=40&md5=a06148bb7cfa42f35e955512e5e7f761","University of Porto, Faculty of Engineering, INESC TEC, Porto, Portugal","Paiva, A.C.R., University of Porto, Faculty of Engineering, INESC TEC, Porto, Portugal; Goncalves, M.A., University of Porto, Faculty of Engineering, INESC TEC, Porto, Portugal; Barros, A.R., University of Porto, Faculty of Engineering, INESC TEC, Porto, Portugal","Mobile applications are increasingly present in our daily lives. Being increasingly dependent on apps, we all want to make sure apps work as expected. One way to increase confidence and quality of software is through testing. However, the existing approaches and tools still do not provide sufficient solutions for testing mobile apps with features different from the ones found in desktop or web applications. In particular, there are guidelines that mobile developers should follow and that may be tested automatically but, as far as we know, there are no tools that are able do it. The iMPAcT tool combines exploration, reverse engineering and testing to check if mobile apps follow best practices to implement specific behavior called UI Patterns. Examples of UI Patterns within this catalog are: orientation, background-foreground, side drawer, tab-scroll, among others. For each of these behaviors (UI Patterns), the iMPAcT tool has a corresponding Test Pattern that checks if the UI Pattern implementation follows the guidelines. This paper presents an extension to iMPAcT tool. It enables to test if Android apps work properly after receiving an incoming call, i.e., if the state of the screen after the call is the same as before getting the call. It formalizes the problem, describes the overall approach, describes the architecture of the tool and reports an experiment performed over 61 public mobile apps. © 2019 IEEE.","Android Testing; Mobile Testing; Pattern Based Testing; Software Test Automation; Software Testing","Android (operating system); Reverse engineering; Verification; Android apps; Best practices; Mobile applications; Mobile testing; Quality of softwares; Software test automation; Test Pattern; WEB application; Software testing",,,,,,,,"Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Proceedings of the 7th International Workshop on Automation of Software Test (AST '12). IEEE Press, , Piscataway, NJ, USA, 29-35; Ma, X., Wang, N., Xie, P., Zhou, J., Zhang, X., Fang, C., An automated testing platform for mobile applications (2016) 2016 IEEE International Conference on Software Quality, pp. 159-162. , Reliability and Security Companion (QRS-C) , 1-3 Aug; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) IEEE International Conference on Software Testing, p. 3344. , Verification and Validation (ICST), IEEE, Chicago, IL, USA; Morgado, I.C., Paiva, A.C.R., The impact tool: Testing ui patterns on mobile applications (2015) 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 876-881; Morgado, I.C., Paiva, A.C.R., Testing approach for mobile applications through reverse engineering of ui patterns (2015) 30th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW), , pp.42-49; Saad, N.H., Bakar, N.S.A.A., Automated testing tools for mobile applications (2014) The 5th International Conference on Information and Communication Technology for the Muslim World (ICT4M), pp. 1-5; Gao, J., Bai, X., Tsai, W.T., Uehara, T., Mobile application testing: A tutorial (2014) Computer, 47. , Feb; Amalfitano, D., Amatuccia, N., Memon, A., Tramontana, P., Fasolino, A.R., A general framework for comparing automatic testing techniques of Android mobile apps (2017) Journal of Systems and Software, 125, pp. 322-343. , March; Nguyen, C.D., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation (2012) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA 2012), p. 100110. , ACM Press, Minneapolis, MN, USA; Franke, D., Kowalewski, S., Weise, C., Prakobkosol, N., Testing conformance of life cycle dependent properties of mobile applications (2012) The IEEE Fifth International Conference on Software Testing, p. 241250. , Verification and Validation, IEEE, Montreal, QC, Canada; Avancini, A., Ceccato, M., Security testing of the communication among android applications (2013) Automation of Software Test (AST), p. 5763. , 2013 8th International Workshop on, IEEE Press, San Francisco, California; Gorla, A., Tavecchia, I., Gross, F., Zeller, A., Checking app behavior against app descriptions (2014) Proceedings of the 36th International Conference on Software Engineering (ICSE 2014), p. 10251035. , ACM Press, Hyderabad, India; Localytics Announces Industry Benchmarks for App Engagement and User Retention, Boston, 13 March, 2017; Morgado, I.C., Paiva, A.C.R., Test patterns for android mobile applications (2015) EuroPLoP-20th European Conference on Pattern Languages of Programs; Morgado, I.C., Paiva, A.C.R., Pascoal Faria, J., Automated pattern-based testing of mobile applications (2014) 5th Portuguese Software Engineering Doctoral Symposium (SEDES 2014) Hosted by 9th International Conference on the Quality of Information and Communications Technology (QUATIC'14); Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Softw., 32 (5), pp. 53-59; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 599-609. , ACM, New York, NY, USA; Liu, C.H., Lu, C.Y., Cheng, S.J., Chang, K.Y., Hsiao, Y.C., Chu, W.M., Capture-replay testing for android applications (2014) International Symposium on Computer, Consumer and Control; Forman, I.R., Forman, N., Ibm, J.V., Forman, I.R., Forman, N., (2004) Java Reflection in Action; Morgado, I.C., Paiva, A.C.R., Mobile gui testing (2018) Software Quality Journal, 26 (4), pp. 1553-1570; Morgado, I.C., Paiva, A.C.R., Impact of execution modes on finding Android failures (2016) Procedia Computer Science, 83, pp. 284-291; Morgado, I.C., Paiva, A.C.R., Testing approach for mobile applications through reverse engineering of UI patterns (2015) TESTBEDS-Sixth International Workshop on Testing Techniques for Event BasED Software; Bissyand, L.L., Tegawend, F., Papadakis, M., Rasthofer, S., Bartel, A., Octeau, D., Klein, J., Traon, L., Static analysis of android apps (2017) Inf. Softw. Technol. Journal, 88 (C); Costa, P., Paiva, A.C.R., Nabuco, M., Pattern based gui testing for mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC'14); Amalfitano, D., Riccio, V., Paiva, A.C.R., Fasolino, A.R., Why does the orientation change mess up my Android application?. from GUI failures to code faults (2017) Journal of Software: Testing, Verification and Reliability (STVR)",,,"CCF;et al.;IEEE;IEEE Computer Society;Xi'an Jiaotong University;Xi'an University of Posts and Telecommunications","Institute of Electrical and Electronics Engineers Inc.","12th IEEE International Conference on Software Testing, Verification and Validation, ICST 2019","22 April 2019 through 27 April 2019",,148641,,9781728117355,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85067957042
"Jan S., Panichella A., Arcuri A., Briand L.","57188653523;35095519000;23097099900;7006613079;","Automatic Generation of Tests to Exploit XML Injection Vulnerabilities in Web Applications",2019,"IEEE Transactions on Software Engineering","45","4", 8125155,"335","362",,8,"10.1109/TSE.2017.2778711","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85037651663&doi=10.1109%2fTSE.2017.2778711&partnerID=40&md5=6017c2c63684818986977ac7e91b2834","Interdisciplinary Centre for Security, Reliability and Trust (SNT), University of Luxembourg, Esch-sur-Alzette 4365, Luxembourg; University of Engineering and Technology, Peshawar, 814, Pakistan; Westerdals Oslo ACT, Oslo, 0134, Norway","Jan, S., Interdisciplinary Centre for Security, Reliability and Trust (SNT), University of Luxembourg, Esch-sur-Alzette 4365, Luxembourg, University of Engineering and Technology, Peshawar, 814, Pakistan; Panichella, A., Interdisciplinary Centre for Security, Reliability and Trust (SNT), University of Luxembourg, Esch-sur-Alzette 4365, Luxembourg; Arcuri, A., Interdisciplinary Centre for Security, Reliability and Trust (SNT), University of Luxembourg, Esch-sur-Alzette 4365, Luxembourg; Briand, L., Interdisciplinary Centre for Security, Reliability and Trust (SNT), University of Luxembourg, Esch-sur-Alzette 4365, Luxembourg, Westerdals Oslo ACT, Oslo, 0134, Norway","Modern enterprise systems can be composed of many web services (e.g., SOAP and RESTful). Users of such systems might not have direct access to those services, and rather interact with them through a single-entry point which provides a GUI (e.g., a web page or a mobile app). Although the interactions with such entry point might be secure, a hacker could trick such systems to send malicious inputs to those internal web services. A typical example is XML injection targeting SOAP communications. Previous work has shown that it is possible to automatically generate such kind of attacks using search-based techniques. In this paper, we improve upon previous results by providing more efficient techniques to generate such attacks. In particular, we investigate four different algorithms and two different fitness functions. A large empirical study, involving also two industrial systems, shows that our technique is effective at automatically generating XML injection attacks. © 1976-2012 IEEE.","Evolutionary testing; security testing; XML injection","Information services; Network architecture; Network security; Personal computing; Service oriented architecture (SOA); Testing; Websites; XML; Automatic Generation; Empirical studies; Enterprise system; Evolutionary testing; Fitness functions; Industrial systems; Security testing; Simple object access protocols; Web services",,,,,"Horizon 2020 Framework Programme, H2020: 694277

European Research Council, ERC","This project has received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 694277). We thank Cu D. Nguyen for his contributions in our previous work on which we built.",,"Huhns, M.N., Singh, M.P., Service-oriented computing: Key concepts and principles (2005) IEEE Internet Comput, 9 (1), pp. 75-81. , Jan; (2016) Extensible Markup Language (XML). (2016), , https://www.w3.org/XML/, Accessed on: Apr. 26; (2016) XML Vulnerabilities Introduction. (2013), , http://resources.infosecinstitute.com/xml-vulnerabilities/, Accessed on: Apr. 26; Jensen, M., Gruschka, N., Herkenhoner, R., A survey of attacks on web services (2009) Comput. Sci.-Res. Develop, 24 (4), pp. 185-197. , http://dx.doi.org/10.1007/s00450-009-0092-6; Ransome, J., Misra, A., (2013) Core Software Security: Security at the Source. Boca Raton, , FL, USA: CRC Press; Adamczyk, P., Smith, P.H., Johnson, R.E., Hafiz, M., (2011) REST: From Research to Practice. New York, pp. 35-57. , http://dx.doi.org/10.1007/978-1-4419-8303-9_2, NY: Springer, , ch. REST and Web Services: In Theory and in Practice; (2016) Simple Object Access Protocol (SOAP). (2007), , https://www.w3.org/TR/soap/, Accessed on: Apr. 26; (2016) SmartBear ReadyAPI. [N.d], , http://smartbear.com/product/ready-api/overview/, Accessed on: Apr. 26; (2016) WSFuzzer Tool. (2010), , https://www.owasp.org/index.php/Category:OWASP_WSFuzzer_Project, Accessed on: Apr. 26; Jan, S., Nguyen, C.D., Briand, L., Automated and effective testing of web services for XML injection attacks (2016) Proc. Int. Symp. Softw. Testing Anal, pp. 12-23. , Jul; Jan, S., Nguyen, C.D., Arcuri, A., Briand, L., A search-based testing approach for XML injection vulnerabilities in web applications (2017) Proc. 10th IEEE Int. Conf. Softw. Testing Verification Validation, pp. 356-366. , Mar; Stuttard, D., Pinto, M., (2011) The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws. Hoboken, , NJ, USA: Wiley; Clarke, J., (2009) SQL Injection Attacks and Defense, , 1st ed. Rockland, MA, USA: Syngress; Harman, M., Mansouri, S.A., Zhang, Y., Search-based software engineering: Trends, techniques and applications (2012) ACM Comput. Surv, 45 (1), pp. 111-1161. , http://doi.acm.org/10.1145/2379776.2379787, Dec; Alshraideh, M., Bottaci, L., Search-based software test data generation for string data using program-specific search operators: Research articles (2006) Softw. Test. Verif. Reliab, 16 (3), pp. 175-203. , Sep; Metcalf, L., Casey, W., (2016) Cybersecurity and Applied Mathematics. Rockland, , MA, USA: Syngress; Wolpert, D.H., Macready, W.G., No free lunch theorems for optimization (1997) IEEE Trans. Evol. Comput, 1 (1), pp. 67-82. , Apr; Shamshiri, S., Rojas, J.M., Fraser, G., McMinn, P., Random or genetic algorithm search for object-oriented test suite generation? (2015) Proc. Annu. Conf. Genetic Evol. Comput, pp. 1367-1374; Qi, Y., Mao, X., Lei, Y., Dai, Z., Wang, C., The strength of random search on automated program repair (2014) Proc. 36th Int. Conf. Softw. Eng, pp. 254-265. , http://doi.acm.org/10.1145/2568225.2568254; Bergstra, J., Bengio, Y., Random search for hyper-parameter optimization (2012) J. Mach. Learn. Res, 13, pp. 281-305. , http://dl.acm.org/citation.cfm?id=2188385.2188395, Feb; Luke, S., (2013) Essentials of Metaheuristics, , https://cs.gmu.edu/~sean/book/metaheuristics/, 2nd ed. Morrisville, NC, USA: Lulu; Goldberg, D.E., Deb, K., A comparative analysis of selection schemes used in genetic algorithms (1991) Foundations of Genetic Algorithms. Burlington,MA, pp. 69-93. , USA:Morgan Kaufmann; Zhong, J., Hu, X., Zhang, J., Gu, M., Comparison of performance between different selection strategies on simple genetic algorithms (2005) Proc. Int. Conf. Comput. Intell. Modelling Control Autom. Int. Conf. Intell. Agents Web Technol. Internet Commerce, pp. 1115-1121; Herrera, F., Lozano, M., Verdegay, J.L., Tackling real-coded genetic algorithms: Operators and tools for behavioural analysis (1998) Artif. Intell. Rev, 12 (4), pp. 265-319; Ghosh, A., Tsutsui, S., (2012) Advances in Evolutionary Computing: Theory and Applications. Berlin, , Germany: Springer; Picek, S., Jakobovic, D., Golub, M., On the recombination operator in the real-coded genetic algorithms (2013) Proc. IEEE Congr. Evol. Comput, pp. 3103-3110; Deb, K., Deb, D., Analysingmutation schemes for real-parameter genetic algorithms (2014) Int. J. Artif. Intell. Soft Comput, 4 (1), pp. 1-28; (2016) Magical Code Injection Rainbow (MCIR). (2014), , https://github.com/SpiderLabs/MCIR/, Accessed on: Apr. 26; Sprent, P., (2011) Fisher Exact Test. Berlin, pp. 524-525. , http://dx.doi.org/10.1007/978-3-642-04898-2_253, Germany: Springer; Grissom, R.J., Kim, J.J., (2005) Effect Sizes for Research: A Broad Practical Approach. Mahwah, , NJ, USA: Lawrence Erlbaum Associates Publishers; Conover, W.J., (1998) Practical Nonparametric Statistics, , 3rd ed. Hoboken, NJ, USA: Wiley; Vargha, A., Delaney, H.D., A critique and improvement of the CL common language effect size statistics of McGraw and Wong (2000) J. Educational Behavioral Statist, 25 (2), pp. 101-132; Garcia, S., Molina, D., Lozano, M., Herrera, F., A study on the use of non-parametric tests for analyzing the evolutionary algorithms' behaviour: A case study on the CEC'2005 special session on real parameter optimization (2008) J. Heuristics, 15 (6). , http://dx.doi.org/10.1007/s10732-008-9080-4; Fisher, R.A., The use of multiple measurements in taxonomic problems (1936) Ann. Eugenics, 7 (2), pp. 179-188; Conover, W.J., Iman, R.L., Rank transformations as a bridge between parametric and nonparametric statistics (1981) Amer. Statistician, 35 (3), pp. 124-129. , http://amstat.tandfonline.com/doi/abs/10.1080/00031305.1981.10479327; Holm, S., A simple sequentially rejective multiple test procedure (1979) Scandinavian J. Statist, 6, pp. 65-70; De Jong, K.A., (1975) An Analysis of the Behavior of A Class of Genetic Adaptive Systems, , Ph.D. dissertation, Univ. Michigan, Computer and Communication SciencesDepartment,Ann Arbor, MI, USA; Grefenstette, J., Optimization of control parameters for genetic algorithms (1986) IEEE Trans. Syst. Man Cybern.: Syst, 16 (1), pp. 122-128. , http://dx.doi.org/10.1109/TSMC.1986.289288, Jan; Briand, L.C., Labiche, Y., Shousha, M., Using genetic algorithms for early schedulability analysis and stress testing in realtime systems (2006) Genetic Program. Evolvable Mach, 7 (2), pp. 145-170. , http://dx.doi.org/10.1007/s10710-006-9003-9; Schaffer, J.D., Caruana, R.A., Eshelman, L.J., Das, R., A study of control parameters affecting online performance of genetic algorithms for function optimization (1989) Proc. 3rd Int. Conf. Genetic Algorithms, pp. 51-60; Smith, J.E., Fogarty, T.C., Adaptively parameterised evolutionary systems: Self adaptive recombination and mutation in a genetic algorithm (1996) Parallel Problem Solving from Nature-PPSN IV. Berlin, Germany: Springer, pp. 441-450; Haupt, R.L., Haupt, S.E., (2004) Practical Genetic Algorithms. Hoboken, , NJ, USA: Wiley; Cobb, H.G., Grefenstette, J.J., Genetic algorithms for tracking changing environments (1993) Proc. 5th Int. Conf. Genetic Algorithms, pp. 523-530. , http://dl.acm.org/citation.cfm?id=645513.657576; Arcuri, A., Fraser, G., Parameter tuning or default values? An empirical investigation in search-based software engineering (2013) Empirical Softw. Eng, 18 (3), pp. 594-623; Panichella, A., Kifetew, F., Tonella, P., Automated test case generation as a many-objective optimisation problem with dynamic selection of the targets (2017) IEEE Trans. Softw. Eng; Panichella, A., Kifetew, F.M., Tonella, P., Reformulating branch coverage as a many-objective optimization problem (2015) Proc. IEEE 8th Int. Conf. Softw. Testing Verification Validation, pp. 1-10; Durillo, J.J., Nebro, A.J., JMetal: A Java framework for multiobjective optimization (2011) Advances Eng. Softw, 42, pp. 760-771. , http://www.sciencedirect.com/science/article/pii/S0965997811001219; Baker, R.D., (1995) Modern Permutation Test Software, , Randomization Tests, E. G. Edgington, Marcel Decker; Mainka, C., Somorovsky, J., Schwenk, J., Penetration testing tool for web services security (2012) Proc. IEEE 8th World Congr. Serv, pp. 163-170. , Jun; Chunlei, W., Li, L., Qiang, L., Automatic fuzz testing of web service vulnerability (2014) Proc. Int. Conf. Inf. Commun. Technol, pp. 1-6. , May; Oliveira, R., Laranjeiro, N., Vieira, M., WSFAggressor: An extensible web service framework attacking tool (2012) Proc. Ind. Track 13th ACM/IFIP/USENIX Int. Middleware Conf, pp. 21-26; Chen, J., Li, Q., Mao, C., Towey, D., Zhan, Y., Wang, H., A web services vulnerability testing approach based on combinatorial mutation and soap message mutation (2014) Service Oriented Comput. Appl, 8, pp. 1-13. , http://link.springer.com/article/10.1007/s11761-013-0139-1; Kieyzun, A., Guo, P.J., Jayaraman, K., Ernst, M.D., Automatic creation of SQL injection and cross-site scripting attacks (2009) Proc. IEEE 31st Int. Conf. Softw. Eng., May, pp. 199-209; Bau, J., Bursztein, E., Gupta, D., Mitchell, J., State of the art: Automated black-box web application vulnerability testing (2010) Proc. IEEE Symp. Secur. Privacy, pp. 332-345. , May; Appelt, D., Nguyen, C.D., Briand, L., Behind an application firewall, are we safe from SQL injection attacks? (2015) Proc. IEEE 8th Int. Conf. Softw. Testing Verification Validation, pp. 1-10. , Apr; Gallagher, T., (2008) Automated Detection of Cross Site Scripting Vulnerabilities, , https://www.google.com/patents/US7343626, U.S. Patent 7 343 626, Mar; Junjin, M., An approach for SQL injection vulnerability detection (2009) Proc. 6th Int. Conf. Inf. Technol.: New Generations, pp. 1411-1414. , Apr; Rosa, T., Santin, A., Malucelli, A., Mitigating XML injection 0-day attacks through strategy-based detection systems (2013) IEEE Secur. Privacy, 11 (4), pp. 46-53. , Jul; (2016) Testing for XML Injection. [N.d.], , https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTGINPVAL-008), Accessed on: Apr. 26; Fraser, G., Arcuri, A., A large-scale evaluation of automated unit test generation using EvoSuite (2014) ACM Trans. Softw. Eng. Methodology, 24 (2); Harman, M., The current state and future of search based software engineering (2007) Proc. Future Softw. Eng, pp. 342-357. , http://dx.doi.org/10.1109/FOSE.2007.29; McMinn, P., Search-based software test data generation: A survey (2004) Softw. Testing Verification Rel, 14 (2), pp. 105-156. , http://dx.doi.org/10.1002/stvr.v14:2, Jun; Harman, M., McMinn, P., A theoretical and empirical study of search-based testing: Local, global, and hybrid search (2010) IEEE Trans. Softw. Eng, 36 (2), pp. 226-247. , Mar; Harman, M., McMinn, P., A theoretical &empirical analysis of evolutionary testing and hill climbing for structural test data generation (2007) Proc. Int. Symp. Softw. Testing Anal, pp. 73-83. , http://doi.acm.org/10.1145/1273463.1273475; Afzal, W., Torkar, R., Feldt, R., A systematic review of searchbased testing for non-functional system properties (2009) Inf. Softw. Technol, 51 (6), pp. 957-976. , http://dx.doi.org/10.1016/j.infsof.2008.12.005, Jun; Turpe, S., Search-based application security testing: Towards a structured search space (2011) Proc. IEEE 4th Int. Conf. Softw. Testing Verification Validation Workshops, pp. 198-201. , Mar; Avancini, A., Ceccato, M., Security testing of web applications: A search-based approach for cross-site scripting vulnerabilities (2011) Proc. 11th IEEE Int. Working Conf. Source Code Anal. Manipulation, pp. 85-94. , Sep; Thome, J., Gorla, A., Zeller, A., Search-based security testing of web applications (2014) Proc. 7th Int. Workshop Search-Based Softw. Testing, pp. 5-14. , http://doi.acm.org/10.1145/2593833.2593835; Del Grosso, C., Antoniol, G., Merlo, E., Galinier, P., Detecting buffer overflow via automatic test input data generation (2008) Comput. Operations Res, 35 (10), pp. 3125-3143. , http://dx.doi.org/10.1016/j.cor.2007.01.013, Oct; Rawat, S., Mounier, L., Offset-aware mutation based fuzzing for buffer overflow vulnerabilities: Few preliminary results (2011) Proc. IEEE 4th Int. Conf. Softw. Testing Verification Validation Workshops, pp. 531-533. , Mar; Arcuri, A., Briand, L., A hitchiker's guide to statistical tests for assessing randomized algorithms in software engineering (2014) Softw. Testing Verification Rel, 24 (3), pp. 219-250","Jan, S.; Interdisciplinary Centre for Security, Esch-sur-Alzette 4365, Luxembourg; email: jan@svv.lu",,,"Institute of Electrical and Electronics Engineers Inc.",,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85037651663
"Ji M.","57208027795;","UIChecker: An Automatic Detection Platform for Android GUI Errors",2019,"Proceedings of the IEEE International Conference on Software Engineering and Service Sciences, ICSESS","2018-November",, 8663923,"957","961",,,"10.1109/ICSESS.2018.8663923","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063610547&doi=10.1109%2fICSESS.2018.8663923&partnerID=40&md5=bc0dadd77d7c415feb4fa07501254be2","School of Electronic Information and Electrical Engineering, Shanghai Jiao Tong University Shanghai, Shanghai, 200240, China","Ji, M., School of Electronic Information and Electrical Engineering, Shanghai Jiao Tong University Shanghai, Shanghai, 200240, China","At present, Android automated GUI testing has been widely used in mobile application testing. Automated GUI test input generation technology and tools are hot topics for practitioners, but errors in some test screenshots generated by automated test input tools still need to be reviewed manually. In this paper, we creatively proposed an automatic detection platform for GUI errors, detecting the GUI errors of mobile related and image-related widget error classification model through machine learning, which detects the error of widgets. On all experimental App test sets, the accuracy of the text-related widget error classification model reached an average of 98.06%, and the accuracy of image-related widgets error classification model achieved an average of 95.44%, which greatly reduced the time cost of reviewing GUI errors manually. In addition, we analyze the relative positional relationship between the widgets, and use the Wilson score sorting algorithm to analyze the symbiosis and interdependence between the widgets, and finally generate the assertion tables, thus more complex GUI errors can be detected. © 2018 IEEE.","assertions; automated GUI testing; automated traversal tool; GUI error detection; machine learning","Automatic test pattern generation; Automation; Classification (of information); Error detection; Graphical user interfaces; Image classification; Learning systems; Machine learning; Text processing; assertions; Automatic Detection; Error classification; Generation technologies; GUI testing; Mobile application testing; Positional relationship; Sorting algorithm; Android (operating system)",,,,,,"Supported by the National Natura l Science Foundation of China",,"Liu, P., Zhang, X., Pistoia, M., Zheng, Y., Marques, M., Zeng, L., Automatic text input generation for mobile testing (2017) Proceedings of the 39th International Conference on Software Engineering., pp. 643-653; Moran, K., Li, B., Bernal-Cardenas, C., Jelf, D., Poshyvanyk, D., Moran, K., Automated reporting of GUI design violations for mobile apps (2018) Proceedings of the 40th International Conference on Software Engineering., 1, pp. 65-175; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android Applications (2012) Proceedings of the 27th IEEE!ACM International Conference on Automated Software Engineering., pp. 258-261; Baek, Y.-M., Bae, D.-H., Automated model-based Android GUI testing using multi-level GUI comparison criteria (2016) Proceedings of the 31st IEEE!ACM International Conference on Automated Software Engineering., pp. 238-249; Xie, Q., Memon, A.M., Using a pilot study to derive a gui model for automated testing (2018) ACM Trans. on Software Engineering and Methodology, 18 (2), pp. 71-77. , 35; Amalfitano, D., Fasolino, A.R., Tramontana, P., A GUI crawlingbased technique for android mobile application testing (2011) Proceedings of the 4th IEEE International Conference on Software Testing, Verification and Validation Workshops., pp. 252-261; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based GUI testing techniques: An empirical study (2014) Journal of Systems and Software, 97, pp. 15-46; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Imparato, G., A toolset for GUI testing of android applications (2012) Proceedings of the 28th IEEE International Conference on Software Maintenance., pp. 650-653; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (e) (2015) Proceedin Gs of the 30th IEEE!ACM International Conference on Automated Software Engineering., pp. 429-440; http://developer.android.com/intl/ko/tools/help!monkey.htrnI, GoogleDevelopers, UI!Application exerciser monkey; Hu, G., Yuan, X., Tang, Y., Yang, J., Efficiently, effectively detecting mobile app bugs with appdoctor (2014) Proceedings of the 9th European Conference on Computer Systems.; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobi le Systems, Applications, and Services., p. 204217; https:l!github.com!zhangzha04444/Maxim","Ji, M.; School of Electronic Information and Electrical Engineering, China; email: jimc55l2@sjtu.edu.cn","Wenzheng L.Babu M.S.P.","IEEE Beijing Section;The Institute of Electrical and Electronics Engineers","IEEE Computer Society","9th IEEE International Conference on Software Engineering and Service Science, ICSESS 2018","23 November 2018 through 25 November 2018",,146017,23270586,9781538665640,,,"English","Proc.IEEE Int. Conf. Software Eng. Serv. Sci., ICSESS",Conference Paper,"Final","",Scopus,2-s2.0-85063610547
"Neethidevan V., Chandrasekaran G.","57208593909;24372227300;","Web automation using selenium web driver python",2019,"International Journal of Recent Technology and Engineering","7","6",,"845","847",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065227418&partnerID=40&md5=3242da14d1dd51b45eccbfc23175cea4","MCA Department, Mepco Schlenk Engg. College, Sivakasi, Tamil Nadu, India","Neethidevan, V., MCA Department, Mepco Schlenk Engg. College, Sivakasi, Tamil Nadu, India; Chandrasekaran, G., MCA Department, Mepco Schlenk Engg. College, Sivakasi, Tamil Nadu, India","Software companies are more committed to produce more quality software systems with lower costs. Software tested by a separate testing team, more quality is in built. Earlier manual testing was done and now a days due to more complexity in the software to be developed, there is a need for automation of testing. Using automated testing tools like Selenium, GUI testing and Cross Browser testing and Web automation is done more effectively. There is a nned for more skills from the test engineers to perform more effective testing. In this paper we performed Web Automation testing using Selenium web driver Python. The web based application is tested with Selenium web driver with Python code. Cross Browser testing is done with the various leading browsers to check performance of applications as expected. © BEIESP.","Cross browser testing; Functional testing; GUI testing; Selenium testing tool; Web automation",,,,,,,,,"Neethidevan, V., Chandrasekaran, G., Database Testing using Selenium Web Driver-A Case Study (2018) International Journal of Pure and Applied Mathematics, 118 (8), pp. 559-566; Chandrasekaran, G., Neethidevan, V., (2018) Software Testing Using Automated Tools, , M/s Vandana publications, Lucknow; Choudhary, S.R., (2011) Detecting Cross-Browser Issues in Web Applications, , ICSE ’11,May 21-28, Waikiki, Honolulu, HI, USA; Ganov, S., Killmar, C., Khurshid, S., Test Generation for Graphical User Interfaces Based on Symbolic Execution; Qureshi, I.A., Nadeem, A., GUI Testing Techniques: A Survey (2013) International Journal of Future Computer and Communication, 2 (2). , April; Isabellaretna, E., STUDY PAPER ON TEST CASE GENERATION FOR GUI BASED TESTING (2012) International Journal of Software Engineering & Applications (IJSEA), 3 (1). , January; Vatankhah, N., Wei, K., Letchmunan, S., Ishan Banerjee, A., Bao Nguyen, A., Vahid Garousib, C., Memona, A., Graphical user interface (GUI) testing: Systematic mappingand repository (2013) Information and Software Technology, 55, pp. 1679-1694; Jovic, M., Hauswirth, M., Performance Testing of GUI Applications; Saini, R., (2013) Graphical User Interface Design Essentials & Process, 3 (9). , September; Sumanchhillar, R.S., (2014) A Review: GUI Testing, IJCSMC, 3 (5), pp. 875-878. , May; Patidar, R., Sharma, A., Dave, R., (2017) Survey on Manual and Automation Testing Strategies and Tools for a Software Application, 7 (4). , April; Yuan, X., Cohen, M.B., Memon, A.M., Member, IEEE, GUI Interaction Testing: Incorporating Event Context; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Automated GUI Testing Validation Guided by Annotated Use Cases, , Departamento de Ingeniería de la Información y lasComunicacionesDepartamento de Ingeniería y Tecnología de Computadores University of Murcia, 30.071 Murcia, Spain; University of Alabama, A Comparison of GUI and VUI Testing; Mohan Doss Gandhi, G., Pillai, A.S., Challenges in GUI Test Automation (2014) International Journal of Computer Theory and Engineering, 6 (2). , April; Isabellaretna, E., Study Paper On Test Case Generation Forgui Based Testing (2012) International Journal of Software Engineering & Applications (IJSEA), 3 (1). , January; Chang, T.-H., Yeh, T., Miller, R.C., GUI Testing Using Computer Vision, UMIACS & HCIL University of Maryland; Mesbah, A., Prasad, M.R., (2011) Automated Cross-Browser Compatibility Testing, , ICSE’11, May 21-28, Waikiki, Honolulu, HI, USA; http://www.appperfect.com/services/web-testing/cross-browser-testing.php; https://afourtech.com/cross-browser-testing-tools/",,,,"Blue Eyes Intelligence Engineering and Sciences Publication",,,,,22773878,,,,"English","Int. J. Recent Technol. Eng.",Article,"Final","",Scopus,2-s2.0-85065227418
"Coppola R., Morisio M., Torchiano M.","57191261885;6701428565;6602571197;","Mobile GUI Testing Fragility: A Study on Open-Source Android Applications",2019,"IEEE Transactions on Reliability","68","1", 8477182,"67","90",,9,"10.1109/TR.2018.2869227","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054372646&doi=10.1109%2fTR.2018.2869227&partnerID=40&md5=98595f962167bf470715b130aa43c52c","Department of Computer Engineering and Automatics, Politecnico di Torino, Torino, 10129, Italy","Coppola, R., Department of Computer Engineering and Automatics, Politecnico di Torino, Torino, 10129, Italy; Morisio, M., Department of Computer Engineering and Automatics, Politecnico di Torino, Torino, 10129, Italy; Torchiano, M., Department of Computer Engineering and Automatics, Politecnico di Torino, Torino, 10129, Italy","Android applications do not seem to be tested as thoroughly as desktop ones. In particular, graphical user interface (GUI) testing appears generally limited. Like web-based applications, mobile apps suffer from GUI test fragility, i.e., GUI test classes failing or needing updates due to even minor modifications in the GUI or in the application under test. The objective of our study is to estimate the adoption of GUI testing frameworks among Android open-source applications, the quantity of modifications needed to keep test classes up to date, and their amount due to GUI test fragility. We introduce a set of 21 metrics to measure the adoption of testing tools and the evolution of test classes and test methods, and to estimate the fragility of test suites. We computed our metrics for six GUI testing frameworks, none of which achieved a significant adoption among Android projects hosted on GitHub. When present, GUI test methods associated with the considered tools are modified often, and a relevant portion (70% on average) of those modifications is induced by GUI-related fragilities. On average, for the projects considered, more than 7% of the total modified lines of code between consecutive releases belong to test classes developed with the analyzed testing frameworks. The measured percentage was higher on average than the one required by other generic test code, based on the JUnit testing framework. Fragility of GUI tests constitutes a relevant concern, probably an obstacle for developers to adopt test automation. This first evaluation of the fragility of Android scripted GUI testing can constitute a benchmark for developers and testers leveraging the analyzed test tools and the basis for the definition of a taxonomy of fragility causes and guidelines to mitigate the issue. © 2018 IEEE.","Mobile computing; software engineering; software maintenance; software metrics; software testing","Android (operating system); Anthropomorphic robots; Computer software maintenance; Graphical user interfaces; Measurement; Mobile computing; Open source software; Open systems; Software engineering; Testing; Tools; Android applications; Androids; Application under tests; Graphical user interfaces (GUI); Humanoid robot; Open source application; Software metrics; Web-based applications; Software testing",,,,,"Tim and Karen Hixon Foundation

Telecom Italia","Manuscript received August 1, 2017; revised March 15, 2018 and June 21, 2018; accepted September 1, 2018. Date of publication October 1, 2018; date of current version February 26, 2019. This work was supported by a fellowship from Telecom Italia (TIM). Associate Editor: S. Ghosh. (Corresponding author: Riccardo Coppola.) The authors are with the Department of Computer Engineering and Automatics, Politecnico di Torino, 10129 Torino, Italy (e-mail:, riccardo.coppola@ polito.it; maurizio.morisio@polito.it; marco.torchiano@polito.it).",,"Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) Proc. Int. Conf. Softw. Test. Verif. Validation, pp. 33-44; Khalid, H., Shihab, E., Nagappan, M., Hassan, A.E., What do mobile app users complain about? (2015) IEEE Softw., 32 (3), pp. 70-77. , May/Jun; Wasserman, A.I., Software engineering issues for mobile application development (2010) Proc. FSE/SDPWorkshop Future Softw. Eng. Res., pp. 397-400; Alégroth, E., Feldt, R., On the long-term use of visual GUI testing in industrial practice: A case study (2017) Empir. Softw. Eng., 22 (6), pp. 2937-2971; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) Proc. IEEE 8th Int. Conf. Softw. Test. Verif. Validation, pp. 1-10; Linares-Vásquez, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) Proc. IEEE Int. Conf. Softw. Maint. Evol., pp. 613-622; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Proc. 7th Int. Workshop Autom. Softw. Test, pp. 29-35; Coppola, R., Raffero, E., Torchiano, M., Automated mobile UI test fragility: An exploratory assessment study on android (2016) Proc. 2nd Int. Workshop User Interface Test Autom., pp. 11-20; Kirubakaran, B., Karthikeyani, V., Mobile application testing - Challenges and solution approach through automation (2013) Proc. IEEE Int. Conf. Pattern Recognit. Inform. Mobile Eng., pp. 79-84; Amalfitano, D., Fasolino, A.R., Tramontana, P., Robbins, B., Testing android mobile applications: Challenges, strategies, and approaches (2013) Advances in Computers, 89, pp. 1-52. , New York, NY, USA: Elsevier; Gao, J., Bai, X., Tsai, W.-T., Uehara, T., Mobile application testing: A tutorial (2014) Computer, 47 (2), pp. 46-55; Kaur, A., Review of mobile applications testing with automated techniques (2015) Int. J. Adv. Res. Comput. Commun. Eng., 4 (10), pp. 503-507; Linares-Vásquez, M., Vendome, C., Luo, Q., Poshyvanyk, D., How developers detect and fix performance bottlenecks in android apps (2015) Proc. IEEE Int. Conf. Softw. Maint. Evol., pp. 352-361; Kropp, M., Morales, P., Automated GUI testing on the android platform (2010) Proc. 22nd IFIP ICTSS, , Natal, Brazil, Nov. 08-10; Linares-Vásquez, M., Enabling testing of android apps (2015) Proc. IEEE/ACM 37th IEEE Int. Conf. Softw. Eng., 2, pp. 763-765; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proc. 9th Joint Meeting Found. Softw. Eng., pp. 224-234; Zhauniarovich, Y., Philippov, A., Gadyatskaya, O., Crispo, B., Massacci, F., Towards black box testing of android apps (2015) Proc. IEEE 10th Int. Conf. Availability Rel. Secur., pp. 501-510; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Softw., 32 (5), pp. 53-59. , Sep./Oct; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proc. 27th IEEE/ACM Int. Conf. Autom. Softw. Eng., pp. 258-261; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) Proc. Int. Conf. Fundam. Approaches Softw. Eng., pp. 250-265; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote UI testing on android (2012) Proc. 11th Int. Conf. Mobile Ubiquitous Multimedia; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for android (2013) Proc. IEEE 35th Int. Conf. Softw. Eng., pp. 72-81; Liu, C.-H., Lu, C.-Y., Cheng, S.-J., Chang, K.-Y., Hsiao, Y.-C., Chu, W.-M., Capture-replay testing for android applications (2014) Proc. IEEE Int. Symp. Comput. Consum. Control, pp. 1129-1132; Alégroth, E., Feldt, R., Ryrholm, L., Visual GUI testing in practice: Challenges, problems and limitations (2015) Empirical Softw. Eng., 20 (3), pp. 694-744; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) ACM Sigplan Notices, 48 (10), pp. 623-640; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proc. Int. Symp. Softw. Testing Anal., pp. 67-77; Singh, S., Gadgil, R., Chudgor, A., Automated testing of mobile applications using scripting technique: A study on appium (2014) Int. J. Current Eng. Technol., 4 (5), pp. 3627-3630; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) Proc. IEEE 20th Work. Conf. Reverse Eng., pp. 272-281; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. DOM-based web locators: An empirical study (2014) Proc. Int. Conf. Web Eng., pp. 322-340; Yusifoǧlu, V.G., Amannejad, Y., Can, A.B., Software test-code engineering: Asystematic mapping (2015) Inf. Softw. Technol., 58, pp. 123-147; Tang, X., Wang, S., Mao, K., Will this bug-fixing change break regression testing? (2015) Proc. IEEE ACM/IEEE Int. Symp. Empirical Softw. Eng. Meas., pp. 1-10; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing (2017) Proc. IEEE Int. Conf. Softw. Maint. Evol., pp. 399-410; Knych, T.W., Baliga, A., Android application development and testability (2014) Proc. 1st Int. Conf. Mobile Softw. Eng. Syst., pp. 37-40; Tang, H., Wu, G., Wei, J., Zhong, H., Generating test cases to expose concurrency bugs in android applications (2016) Proc. 31st IEEE/ACM Int. Conf. Autom. Softw. Eng., pp. 648-653; Fazzini, M., Freitas, E.N.D.A., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, and running platform independent android tests (2017) Proc. IEEE Int. Conf. Softw. Test. Verif. Validation, pp. 149-160; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Poshyvanyk, D., Fusion: A tool for facilitating and augmenting android bug reporting (2016) Proc. IEEE/ACM Int. Conf. Softw. Eng. Companion, pp. 609-612; Tan, M., Cheng, P., Research and implementation of automated testing framework based on android (2016) Inf. Technol., 5, p. 35; Neto, N.M.L., Vilain, P., Mello, R.D.S., Segen: Generation of test cases for selenium and selendroid (2016) Proc. 18th Int. Conf. Inf. Integr. Web-Based Appl. Serv., pp. 433-442; Hans, M., (2015) Appium Essentials., , Birmingham, U.K.: Packt; Shah, G., Shah, P., Muchhala, R., Software testing automation using appium (2014) Int. J. Current Eng. Technol., 4 (5), pp. 3528-3531; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of android applications (2012) Proc. 28th IEEE Int. Conf. Softw. Maint., pp. 650-653; Milano, D.T., (2011) Android Application Testing Guide., , Birmingham, U.K.: Packt; Mirzaei, N., Malek, S., Pǎsǎreanu, C.S., Esfahani, N., Mahmood, R., Testing android apps through symbolic execution (2012) ACMSIGSOFT Softw. Eng. Notes, 37 (6), pp. 1-5; Sadeh, B., Ørbekk, K., Eide, M.M., Gjerde, N.C., Tønnesland, T.A., Gopalakrishnan, S., Towards unit testing of user interface code for android mobile applications (2011) Proc. Int. Conf. Softw. Eng. Comput. Syst., pp. 163-175; Allevato, A., Edwards, S.H., Robolift: Engaging cs2 students with testable, automatically evaluated android applications (2012) Proc. 43rd ACM Tech. Symp. Comput. Sci. Educ., pp. 547-552; Zadgaonkar, H., (2013) Robotium Automated Testing for Android., , Birmingham, U.K.: Packt; Grgurina, R., Brestovac, G., Grbac, T.G., Development environment for android application development: An experience report (2011) Proc. IEEE 34th Int. Conv. MIPRO, pp. 1693-1698; Amalfitano, D., Fasolino, A.R., Tramontana, P., A GUI crawlingbased technique for android mobile application testing (2011) Proc. IEEE 4th Int. Conf. Softw. Test. Verif. Validation Workshops, pp. 252-261; Das, T., Di Penta, M., Malavolta, I., A quantitative and qualitative investigation of performance-related commits in android apps (2016) Proc. IEEE Int. Conf. Softw. Maint. Evol., pp. 443-447; Pinto, L.S., Sinha, S., Orso, A., Understanding myths and realities of test-suite evolution (2012) Proc. ACM SIGSOFT 20th Int. Symp. Found. Softw. Eng., p. 33; Feldt, R., Do system test cases grow old? (2014) Proc. IEEE 7nth Int. Conf. Softw. Test. Verif. Validation, pp. 343-352; Shihab, E., Kamei, Y., Adams, B., Hassan, A.E., Is lines of code a good measure of effort in effort-aware models? (2013) Inf. Softw. Technol., 55 (11), pp. 1981-1993; Bell, J., Legunsen, O., Hilton, M., Eloussi, L., Yung, T., Marinov, D., Deflaker: Automatically detecting flaky tests (2018) Proc. 40th Int. Conf. Softw. Eng., pp. 433-444","Coppola, R.; Department of Computer Engineering and Automatics, Italy; email: riccardo.coppola@polito.it",,,"Institute of Electrical and Electronics Engineers Inc.",,,,,00189529,,IEERA,,"English","IEEE Trans Reliab",Article,"Final","",Scopus,2-s2.0-85054372646
"Luna E., Ariss O.E.","57205527004;57204467859;","Edroid: A mutation tool for android apps",2019,"Proceedings - 2018 6th International Conference in Software Engineering Research and Innovation, CONISOFT 2018",,, 8645883,"99","108",,4,"10.1109/CONISOFT.2018.8645883","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063129865&doi=10.1109%2fCONISOFT.2018.8645883&partnerID=40&md5=c92fbb8efef6166ea97b725626539b40","Department of Computer Science, Pennsylvania State University, Harrisburg, PA, United States; Department of Computer Science, Texas A and M University-Commerce, Commerce, TX, United States","Luna, E., Department of Computer Science, Pennsylvania State University, Harrisburg, PA, United States; Ariss, O.E., Department of Computer Science, Texas A and M University-Commerce, Commerce, TX, United States","Android applications have experienced an outstanding growth in recent years with a projected figure of 378 billion in the number of application downloads by 2020. As a result, verification and validation of Android apps and their graphical user interface through testing is crucial for quality assurance. One way to assess quality assurance is through the use of mutation testing. Mutation testing modifies the code of the System Under Test in small ways in order to produce faulty versions of the program called mutants and compare them to the original version. However, the cost of mutation testing can be expensive and time consuming. We propose a graphical user-friendly Android mutation tool called Edroid whose primary purpose is to mutate Android's main components such as activities, services, content providers and broadcast receivers using the source code of XML files. We introduce fourteen Android mutation operators, where ten of them are new, that are derived from operators used in different fields such as mutation testing for Graphical User Interface and XML schema. We evaluate Edroid on five real world Android applications using testing methodologies such as random testing and black box testing. Results from these experiments demonstrate that Edroid facilitates the generation of mutants. In addition and equally important, the set of proposed mutation operators are effective in revealing errors that improve the quality of a given test suite. © 2018 IEEE.","fault-based testing; mobile application testing; mutation testing; software testing; verification validation","Android (operating system); Application programs; Engineering research; Graphical user interfaces; Quality assurance; Signal receivers; Software testing; Verification; XML; Android applications; Broadcast receivers; Fault-based testing; Mobile application testing; Mutation operators; Mutation testing; Testing methodology; Verification-and-validation; Black-box testing",,,,,,,,"Lipton, R., (1971) Fault Diagnosis of Computer Programs, , Student Report, Carnegie Mellon University; Maldonado, J.C., Delamaro, M.E., Fabbri, S.C., Da Silva Simao, A., Sugeta, T., Vincenzi, A.M.R., Masiero, P.C., Proteum A family of tools to support specification and program testing based on mutation (2001) Mutation Testing for the New Century; Konrad, H., Mutpy 0.4.0 Mutation Testing Tool for Python 3.x, , https://pypi.python.org/pypi/MutPy/0.4.0, last access Feb 2017; Schirp, M., (2012) Mutation Testing Tool for Ruby, , https://github.com/mbj/mutant, Online Last access Feb 2017; Ma, Y.-S., Offutt, A.J., Kwon, Y.-R., MuJava: An automated class mutation system (2005) Software Testing Verification and Reliability, 15 (2), pp. 97-133. , June; (2016) Outpacing Download Growth, , https://www.ovum.com/pressreleases/ovum-apprevenue-to-double-by-2020-outpacing-download-growth/, Ovum: App Revenue to Double by 2020 Last access September 2016; (2017) Agile Methodology in Mobile Application Development, , https://project-management.com/agile-methodology-in-mobileapplication-development/, last access February 2017; Google Play Stats, , http://www.appbrain.com/stats, last access September 2016; Testing Support Library, , https://developer.android.com/topic/libraries/testing-support-library/index.html, Last access December 2016; Ma, Y.-S., Offutt, J., (2005) Description of MuJava's Method-level Mutation Operators, , https://cs.gmu.edu/offutt/mujava/mutopsMethod.pdf, November; Deng, L., Mirzaei, N., Ammann, P., Offutt, J., Mutation operators for testing android apps (2017) Information and Software Technology, 81, pp. 154-168. , January; Avancini, A., Ceccato, M., Security testing of the communication among Android applications (2013) Automation of Software Test (AST 2013 8th International Workshop On, San Francisco, CA, pp. 57-63; Bing Li, J., Miller, J., Testing the semantics of W3C XML schema (2005) 29th Annual International Computer Software and Applications Conference (COMPSAC'05, 2, pp. 443-448; Franzotte, L., Vergilio, S.R., Applying mutation testing in XML Schemas (2006) SEKE, pp. 511-516; Alegroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual GUI testing: An empirical study (2015) 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), Graz, pp. 1-10; Oliveira, R.A.P., Alégroth, E., Gao, Z., Memon, A., Definition and evaluation of mutation operators for GUI-level mutation analysis (2015) Software Testing, Verification and Validation Workshops (ICSTW 2015 IEEE Eighth International Conference On, Graz, pp. 1-10; Alsmadi, I.M., Using Mutation to Enhance GUI Testing Coverage,"" in (2013) IEEE Software, 30 (1), pp. 67-73. , Jan.-Feb; Android Developers Guide, , https://developer.android.com/studio/test/espresso-test-recorder.html, last access February 2016; JUnit, , http://junit.org/junit5/, Last access Februrary 2017; Robotium, , https://github.com/RobotiumTech/robotium, last access February 2017; Acree, A.T., Budd, T.A., Demillo, R.A., Lipton, R.J., Sayward, F.G., (1979) Mutation Analysis, , Technical report GIT-ICS-79/08, School of Information and Computer Science, Georgia Institute of Technology, Atlanta GA September; Andre, D.M.S., (1979) Pilot Mutation System (PIMS) User's Manual. Technical Report GIT-ICS-79/04 Georgia Institute of Technology, , April; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Projects Overview, , https://developer.android.com/studio/projects/index.html, Last access February 2017; (2017) Android App Manifest, , https://developer.android.com/guide/topics/manifest/manifestintro.html, Last access February 2017; (2017) Android-UI Layouts, , https://www.tutorialspoint.com/android/androiduserinterfacelayouts.html, Last access February; Calculator for Android App, , https://github.com/CMDann/Simple-Android-Calculator, Last access December 2016; (2016) Forecastie Weather App, , https://github.com/martykan/forecastie, Last access December; (2016) Antenna Pod App, , https://github.com/AntennaPod/AntennaPod, Last access December; Alarm Klock App, , https://github.com/kraigsandroid/kraigsandroid/tree/master/android/alarmclock, Last access December 2016; Tipster App, , https://github.com/IanDarwin/Android-Cookbook-Examples/tree/master/Tipster, Last access December 2016; Moran, K., Tufano, M., Bernal-Cárdenas, C., Linares-Vásquez, M., Bavota, G., Vendome, C., Dipenta, M., Poshyvanyk, D., MDroid+: A Mutation testing framework for android (2018) Proceedings of the 40th IEEE/ACM International Conference on Software Engineering (ICSE'18), , Formal Research Demonstrations Track, Gothenburg, Sweden, May 27-June 3; Linares-Vásquez, M., Bavota, G., Tufano, M., Moran, K., Di Penta, M., Vendome, C., Bernal-Cárdenas, C., Poshyvanyk, D., Enabling mutation testing for android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pp. 233-244. , http://doi.acm.org/10.1145/3106237.3106275, Ser. ESEC/FSE 2017. New York, NY, USA ACM",,"Juarez-Ramirez R.Fernandez y Fernandez C.Gonzalez H.G.P.Rios B.L.F.Jimenez S.Cisneros J.A.Garcia C.A.G.Reyes S.V.",,"Institute of Electrical and Electronics Engineers Inc.","6th International Conference in Software Engineering Research and Innovation, CONISOFT 2018","24 October 2018 through 26 October 2018",,145502,,9781538665770,,,"English","Proc. - Int. Conf. Softw. Eng. Res. Innov., CONISOFT",Conference Paper,"Final","",Scopus,2-s2.0-85063129865
"Narayana M., Raghu Ram Reddy N., Hyndavi Reddy N.","57197608792;57211082826;57211082857;","High speed script execution for GUI Automation using Computer Vision",2019,"International Journal of Electrical and Computer Engineering","9","1",,"231","236",,,"10.11591/ijece.v9i1.pp231-236","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072608440&doi=10.11591%2fijece.v9i1.pp231-236&partnerID=40&md5=e8712b9f479df1fd0e50b32e2b01016d","Department of Electronics and Communication Engineering, Vardhaman College of Engineering, Hyderabad, India; Department of Electronics and Communication, Jayaprakash Narayan College of Engineering, India; Department of Computer Science Engineering, Jayaprakesh Narayan College of Engineering, India","Narayana, M., Department of Electronics and Communication Engineering, Vardhaman College of Engineering, Hyderabad, India; Raghu Ram Reddy, N., Department of Electronics and Communication, Jayaprakash Narayan College of Engineering, India, Department of Computer Science Engineering, Jayaprakesh Narayan College of Engineering, India; Hyndavi Reddy, N., Department of Electronics and Communication Engineering, Vardhaman College of Engineering, Hyderabad, India","Software testing by using open source tool like Selenium windows applications cannot be automated, citrix based applications, flash websites and games. Computer vision based automation tools can be used to automate these kinds of applications. These automation tools works based on screenshots of GUI objects like button, radio button, text box, images, dropdowns etc. In this paper a prototype of automation tool has been developed which can execute the automation scripts much faster than existing tools like Sikuli, which takes much time to run the Automation scripts. The execution time can be reduced by using this proposed tool. Copyright © 2019 Institute of Advanced Engineering and Science.","Automation Computer vision GUI",,,,,,,,,"Rajya Lakshmi, D., Suguna Mallika, S., A review on web application testing and its current research directions (2017) International Journal of Electrical and Computer Engineering, 7, pp. 2132-2141. , August; Leshed, G., Haber, E.M., Matthews, T., Lau, T., Coscripter: Automating & sharing how-to knowledge in the enterprise (2008) Conference on Human Factors in Computing Systems, pp. 1719-1728; Inderjeet, S., Bindia, T., Comparative analysis of open source automated software testing tools: Selenium, sikuli and watir (2014) International Journal of Information & Computation Technology, 4, pp. 1507-1518; Sharma, M., Angmo, R., Web based Automation Testing and Tools (2014) International Journal of Computer Science and Information Technologies, 5, pp. 908-912; Bolin, M., Webber, M., Rha, P., Wilson, T., Miller, R.C., Automation and customization of rendered web pages (2014) Symposium on User Interface Software Technology, pp. 163-172; Tsung-Hsiang, C., Tom, Y., Robert, C.M., GUI testing using computer vision (2010) CHI 10th Conference on Human Factors in Computing Systems, pp. 1535-1544; Hyunjun, J., Sukhoon, L., Doo-Kwon, B., An Image Comparing-based GUI Software Testing Automation System (2012) World Congress in Computer Science, Computer Engineering, and Applied Computing; Tom, Y., Tsung-Hsiang, C., Robert, C.M., Sikuli: Using GUI screenshots for search and automation (2009) The 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192; Jeffrey, S.L.M., User interface computation as a contextualized approach for introductory computing instruction (2013) The 9th Annual International ACM Conference on International Computing Education Research, pp. 179-180; Dea-Kwang, K., Lee-Sub, L., Reverse Engineering from Exploratory Testing to Specification-based Testing (2014) International Journal of Software Engineering and Its Applications, 8, pp. 197-208; Gharavi-Alkhansari, M., A Fast Globally Optimal Algorithm for Template Matching Using Low-resolution Pruning (2001) IEEE Trans. Image Process., 10, pp. 526-533. , Apr; Maurizio, L., Andrea, S., Filippo, R., Paolo, T., Automated Generation of Visual Web Tests from DOM-based Web Tests (2015) ACM/SIGAPP Symposium on Applied Computing, , April; Andriychenko, V., Ying-Dar, L., National, C.T., (2011) Automatic Functionality and Stability Testing Through GUI of Handheld Devices, , CiteSeerx; Gogna, N., Study of browser based automated test tools watir and selenium (2014) International Journal of Information and Education Technology, 4, pp. 336-339. , August; Rajithkumar, B.K., Mohana, H.S., Template matching method for recognition of stone inscripted Kannada characters of different time frames based on correlation analysis (2014) International Journal of Electrical and Computer Engineering, 4, pp. 719-729. , October; Zhang, Q., Gao, H., Kang, Z., Fast Template Matching with Partial Skipping Using Sub-template (2012) Audio Language and Image Processing (ICALIP) 2012 International Conference, pp. 889-892; Ouyang, W., Tombari, F., Mattoccia, S., Stefano, L.D., Cham, W.K., Performance evaluation of full search equivalent pattern matching algorithms (2012) Pattern Analysis and Machine Intelligence IEEE Transactions, 34, pp. 127-143; Tsung-Hsiang, C., Using graphical representation of user interfaces as visual references (2011) The 24th Annual ACM Symposium Adjunct on User Interface Software and Technology, pp. 27-30","Raghu Ram Reddy, N.; Department of Electronics and Communication, India; email: raghutripler@gmail.com",,,"Institute of Advanced Engineering and Science",,,,,20888708,,,,"English","Int. J. Electr. Comput. Eng.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-85072608440
"Liu C.-H.","7409787147;","A compatibility testing platform for android multimedia applications",2019,"Multimedia Tools and Applications","78","4",,"4885","4904",,1,"10.1007/s11042-018-6268-y","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049556617&doi=10.1007%2fs11042-018-6268-y&partnerID=40&md5=fc7a70925c66f2730bb0ac2c6b69d7a7","Department of Computer Science and Information Engineering, National Taipei University of Technology, 1, Sec. 3, Chung-Hsiao E. Rd, Taipei, 106, Taiwan","Liu, C.-H., Department of Computer Science and Information Engineering, National Taipei University of Technology, 1, Sec. 3, Chung-Hsiao E. Rd, Taipei, 106, Taiwan","Along with the widespread use of smartphones, Android has become one of the major platforms for multimedia applications (apps). However, due to the fast evolution of Android operating system and the fragmentation of Android devices, it becomes important for an Android multimedia app to be tested on different devices to ensure that the app is compatible with and run well on any of the devices so as to provide consistent user experiences. This paper presents a cloud testing platform (CTP) that allows Android multimedia apps to be tested automatically against a scalable number of physical devices in parallel. Particularly, CTP provides five types of testing to ensure the compatibility of apps from different perspectives, including GUI testing, acceptance testing, stress testing, crash testing, and installation/uninstallation testing. Further, to facilitate identifying the bugs of apps, in addition to test results, CTP also provides the video, screenshots, and performance data corresponding to the tests. Moreover, CTP can also generate a GUI state diagram that can be used to analyze app’s behavior and is helpful for crash diagnosis and debugging. The case study shows that CTP can be effective in ensuring the compatibility of Android multimedia apps while saving test time and effort. © 2018, Springer Science+Business Media, LLC, part of Springer Nature.","Android compatibility testing; Android testing; Multimedia app testing; Software testing","Android (operating system); Application programs; Graphical user interfaces; Program diagnostics; Software testing; Acceptance testing; Android devices; Multimedia applications; Performance data; Physical devices; Stress Testing; Testing platforms; User experience; Acceptance tests",,,,,"Ministry of Science and Technology, Taiwan, MOST: 105-2221-E-027-086","This work was supported in part by the Ministry of Science and Technology, Taiwan, under the grant No. MOST 105-2221-E-027-086.","Acknowledgements This work was supported in part by the Ministry of Science and Technology, Taiwan, under the grant No. MOST 105-2221-E-027-086.","(2017), http://www.appqualityalliance.org/, Online, Available, Accessed: April; (2017) Appium, , http://appium.io/, Accessed: Nov; (2017) AWS Device Farm, , https://aws.amazon.com/tw/device-farm/, Accessed Mar; (2017), http://bitbar.com/, Online, Available, Accessed Mar; (2017), https://www.oracle.com/corporate/acquisitions/cloudmonkey/index.html; (2017), https://www.docker.com, [Online]. Available, Accessed Mar; (2018), https://f-droid.org/, Online, Available, Accessed: Apr; (2017) Firebase Test Lab for Android, , https://firebase.google.com/docs/test-lab, [Online]. Available, Accessed Mar; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Design Patterns: Elements of Reusable Object-Oriented Software, , Addison Wesley; Huang, J.-F., AppACTS: Mobile app automated compatibility testing service (2014) Proc 2Nd IEEE Int Conf Mobile Cloud Comput, Serv Eng (Mobilecloud), Oxford, pp. 85-90; (2017), https://www.instagram.com/, Online, Available, Accessed: Nov; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote UI testing on android (2012) Proc 11Th Int Conf Mobile Ubiquitous Multimed (MUM’12), , New York, NY; (2017), https://kmplayer.en.softonic.com, [Online]. Available, Accessed: Nov; Liu, C.-H., A cloud platform for compatibility testing of android multimedia applications (2017) Lecture Notes in Electrical Engineering (LNEE) Series for the 6Th International Conference on Frontier Computing – Theory, Technologies, and Applications (FC 2017), , To appear in, Osaka, Japan, July 12–14; Liu, C.-H., Chen, W.-K., Chen, P.-H., Li, Y.-W., Design and implementation of a video recording Service for Android Testing on cloud testing platform (2015) Proc 11Th Taiwan Conf Soft Eng (TCSE), pp. 10-11. , Chiayi, Taiwan; Liu, C.-H., Chen, W.-K., Chen, Y.-C., An android app crash testing tool for cloud testing platform (2017) Proceedings of the 2017 Taiwan Academic Network Conference (TANET), pp. 737-742. , Taichung, Taiwan; Ma, X., Wang, N., Xie, P., Zhou, J., Zhang, X., Fang, C., An automated testing platform for mobile applications (2016) Proc 2016 IEEE Int Conf Softw Qual, Reliab Sec Companion (QRS-C), pp. 159-162. , Vienna; (2017), http://www.mixerbox.com/page/featuredPlaylists, Accessed: Nov; (2017) Number of Apps Available in Leading App Stores as of March 2017, Statista, , https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/, Online, Available, Accessed: Mar; (2017), https://www.openstack.org, [Online]. Available, Accessed Mar; Prathibhan, C.M., Malini, A., Venkatesh, N., Sundarakantham, K., An automated testing framework for testing android mobile applications in the cloud (2014) Proc 2014 IEEE Int Conf Adv Commun, Contrl Comput Technol, Ramanathapuram, pp. 1216-1219. , India; (2017), https://www.rabbitmq.com, [Online]. Available, Accessed: Mar; (2017) Robot Framework, , http://robotframework.org/, Online, Available, Accessed: Nov; https://github.com/RobotiumTech/robotium, [Online]. Available, [Accessed: Apr. 2018]; Rojas, I.K.V., Meireles, S., Dias-Neto, A.C., Cloud-based mobile app testing framework: Architecture, implementation and execution (2016) Proc 1St Braz Sym Syst Auto Softw Test (SAST), , New York; (2017) Sauce Labs Mobile Testing, , https://saucelabs.com/enterprise#mobile-testing, Online, Available, Accessed Nov; (2017) Sji-Android-Screen-Capture, , https://github.com/sankaryg/sji-android-screen-capture, Online, Available, Accessed: Nov; (2018) Sound Recorder, , https://f-droid.org/en/packages/com.danielkim.soundrecorder, Accessed: Apr; (2017) Ui/Application Exerciser Monkey, , https://developer.android.com/studio/test/monkey.html, [Online]. Available, Accessed: Nov; (2018), https://developer.android.com/training/testing/ui-automator, Accessed: Apr; Villanes, I.K., Costa, E.A.B., Dias-Neto, A.C., Automated mobile testing as a service (AM-TaaS) (2015) Proc 11Th IEEE World Congress Serv, pp. 79-86. , New York City, NY; Wei, L., Liu, Y., Cheung, S.C., Taming android fragmentation: Characterizing and detecting compatibility issues for android apps (2016) Proc 31St IEEE/ACM Int Conf Auto Software Eng (ASE), Singapore, pp. 226-237; (2017), http://xamarin.com/, Online, Available, Accessed Mar; Zhang, T., Gao, J., Cheng, J., Uehara, T., Compatibility testing service for mobile applications (2015) Proc 9Th IEEE Sym Serv-Oriented Syst Eng, pp. 179-186. , San Francisco Bay, CA","Liu, C.-H.; Department of Computer Science and Information Engineering, 1, Sec. 3, Chung-Hsiao E. Rd, Taiwan; email: cliu@ntut.edu.tw",,,"Springer New York LLC",,,,,13807501,,MTAPF,,"English","Multimedia Tools Appl",Article,"Final","",Scopus,2-s2.0-85049556617
"Aho P., Vos T.E.J., Ahonen S., Piirainen T., Moilanen P., Ricos F.P.","35188652400;8980537100;57219548349;57219547989;57219553721;57219549886;","Continuous Piloting of an Open Source Test Automation Tool in an Industrial Environment",2019,"Actas de las 24th Jornadas de Ingenieria del Software y Bases de Datos, JISBD 2019",,,,"","",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85093861329&partnerID=40&md5=36a8576b3a1b6213fa31a02626f302d3","Open Universiteit, Netherlands; Ponsse Group, Kajaani, Finland; Universitat Politcnica de València, Spain","Aho, P., Open Universiteit, Netherlands; Vos, T.E.J., Open Universiteit, Netherlands, Universitat Politcnica de València, Spain; Ahonen, S., Ponsse Group, Kajaani, Finland; Piirainen, T., Ponsse Group, Kajaani, Finland; Moilanen, P., Ponsse Group, Kajaani, Finland; Ricos, F.P., Universitat Politcnica de València, Spain","Piloting an academic test automation tool in an industrial environment provides valuable feedback on practical applicability of the tool, but often requires a significant collaboration effort and an iterative process of feedback, development, and evaluation. In this paper, we propose an approach for continuous delivery of TESTAR open source test automation tool into an industrial continuous integration (CI) environment for piloting and evaluation. © Actas de las 24th Jornadas de Ingenieria del Software y Bases de Datos, JISBD 2019. All rights reserved.","Continuous delivery; Continuous integration; GUI testing","Automation; Collaboration efforts; Continuous integrations; Industrial environments; Iterative process; Open sources; Test automation tool; Open source software",,,,,,"This work has been funded through the ITEA3 TESTOMAT Project and EU H2020 DECODER project (www.testomatproject.eu, www.decoder-project.eu).",,"Alegroth, E., Karlsson, A., Radway, A., Continuous Integration and Visual GUI Testing: Benefits and Drawbacks in Industrial Practice (2018) Proc. 2018 IEEE 11th ICST, , 9-13 Apr Vaesteroas, Sweden; Vos, T.E.J, Kruse, P., Condori-Fernandez, N., Bauersfeld, S., Wegener, J., TESTAR: Tool Support for Test Automation at the User Interface Level (2015) Int. Journal of Information System Modeling and Design, IJISMD 2015, 6 (3), pp. 46-83. , vol; Esparcia-Alczar, A., Almenar, F., Vos, T., Rueda, U., Using genetic programming to evolve action selection rules in traversal-based automated software testing: results obtained with the TESTAR tool (2018) Memetic Computing, 10 (3), pp. 257-265; Esparcia-Alcazar, A., Almenar, F., Martinez, M., Rueda, U., Vos, T., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) Proc. 6th META2016, , Marrakech, Morocco; Lowell, C., Stell-Smith, J., Successful Automation of GUI Driven Acceptance Testing (2003) Int. Conf. on Extreme Programming and Agile Processes in Software Engineering (XP 2003), LNCS, 2675, pp. 331-333. , Springer; Xie, Q., Memon, A., Model-Based Testing of Community-Driven Open-Source GUI Applications (2006) 22nd IEEE Int. Conf. on Software Maintenance (ICSM 2006), , 24-27 Sep Philadelphia, PA, USA",,"Perez Benedi J.",,"Sistedes","24th Jornadas de Ingenieria del Software y Bases de Datos, JISBD 2019 - 24th Conference on Software Engineering and Data Bases, JISBD 2019","2 September 2019 through 4 September 2019",,159521,,,,,"English","Actas Jornadas Ing. Softw. Bases Datos, JISBD",Conference Paper,"Final","",Scopus,2-s2.0-85093861329
"Novella L., Tufo M., Fiengo G.","57204814393;23570286800;23004338900;","Automatic test set generation for event-driven systems in the absence of specifications combining testing with model inference",2019,"Information Technology and Control","48","2",,"316","334",,,"10.5755/j01.itc.48.2.21725","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073272018&doi=10.5755%2fj01.itc.48.2.21725&partnerID=40&md5=78cd79ed7adeb24d965749267310f17f","Università degli Studi del Sannio, Department of Engineering, Piazza Roma 21, Benevento, 82100, Italy","Novella, L., Università degli Studi del Sannio, Department of Engineering, Piazza Roma 21, Benevento, 82100, Italy; Tufo, M., Università degli Studi del Sannio, Department of Engineering, Piazza Roma 21, Benevento, 82100, Italy; Fiengo, G., Università degli Studi del Sannio, Department of Engineering, Piazza Roma 21, Benevento, 82100, Italy","The growing dependency of human activities on software technologies is leading to the need for designing more and more accurate testing techniques to ensure the quality and reliability of software components. A recent literature review of software testing methodologies reveals that several new approaches, which differ in the way test inputs are generated to efficiently explore systems behaviour, have been proposed. This paper is concerned with the challenge of automatically generating test input sets for Event-Driven Systems (EDS) for which neither source code nor specifications are available, therefore we propose an innovative fully automatic testing with model learning technique. It basically involves active learning to automatically infer a behavioural model of the System Under Test (SUT) using tests as queries, generates further tests based on the learned model to systematically explore unseen parts of the subject system, and makes use of passive learning to refine the current model hypothesis as soon as an inconsistency is found with the observed behaviour. Our passive learning algorithm uses the basic steps of Evidence-Driven State Merging (EDSM) and introduces an effective heuristic for choosing the pair of states to merge to obtain the target machine. Finally, the effectiveness of the proposed testing technique is demonstrated within the context of event-based functional testing of Android Graphical User Interface (GUI) applications and compared with that of existing baseline approaches. © 2019, Kauno Technologijos Universitetas. All rights reserved.","Android GUI testing; Automata; Event-based testing; Model learning; Model-based exploration",,,,,,,,,"Aarts, F., Kuppens, H., Tretmans, J., Vaandrager, F., Verwer, S., Learning and Testing the Bounded Retransmission Protocol (2012) Proceedings of the Eleventh International Conference on Grammatical Inference, 21, pp. 4-18; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., Fasolino, A.R., A General Framework for Comparing Automatic Testing Techniques of Android Mobile Apps (2017) Journal of Systems and Software, 125, pp. 322-343. , https://doi.org/10.1016/j.jss.2016.12.017; Amalfitano, D., Amatucci, N., Fasolino, A.R., Tramontana, P., Kowalczyk, E., Memon, A.M., Exploiting the Saturation Effect in Automatic Random Testing of Android Applications (2015) 2nd ACM International Conference on Mobile Software Engineering and Systems, pp. 33-43. , https://doi.org/10.1109/MobileSoft.2015.11; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of Android applications (2012) 28th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653. , https://doi.org/10.1109/ICSM.2012.6405345; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI Ripping for Automated Testing of Android Applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , https://doi.org/10.1145/2351676.2351717; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated Model-Based Testing of Mobile Apps (2015) IEEE Software, 32 (5), pp. 53-59. , https://doi.org/10.1109/MS.2014.55; Azim, T., Neamtiu, I., Targeted and Depth-first Exploration for Systematic Testing of Android Apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages &#38. Applications, pp. 641-660. , http://doi.acm.org/10.1145/2509136.2509549; Cao, Y., Wu, G., Chen, W., Wei, J., CrawlDroid: Effective Model-based GUI Testing of Android Apps (2018) Proceedings of the Tenth Asia-Pacific Symposium on Internetware, 19 (6), pp. 1-19. , https://doi.org/10.1145/3275219.3275238; Choi, W., Necula, G., Sen, K., Guided GUI Testing of Android Apps with Minimal Restart and Approximate Learning (2013) SIGPLAN Not, pp. 623-640. , https://doi.org/10.1145/2544173.2509552; Choudhary, S.R., Gorla, A., Orso, A., Automated Test Input Generation for Android: Are We There Yet? (E) (2015) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , https://doi.org/10.1109/ASE.2015.89; Coppola, R., Morisio, M., Torchiano, M., Mobile GUI Testing Fragility: A Study on Open-Source Android Applications (2018) IEEE Transactions on Reliability, pp. 1-24. , https://doi.org/10.1109/TR.2018.2869227; de la Higuera, C., (2010) Grammatical Inference: Learning Automata and Grammars, , https://doi.org/10.1017/CBO9781139194655, Cambridge University Press; Demšar, J., Statistical Comparisons of Classifiers over Multiple Data Sets (2006) Journal of Machine Learning Research, 7, pp. 1-30; Dupont, P., Miclet, L., Vidal, E., What is the Search Space of the Regular Inference? (1994) Grammatical Inference and Applications, pp. 25-37. , https://doi.org/10.1007/3-540-58473-0_134, Springer Berlin Heidelberg; Dupont, P., Lambeau, B., Damas, C., van Lamsweerde, A., The QSM Algorithm and Its Application to Software Behavior Model Induction (2008) Applied Artificial Intelligence, 22 (1-2), pp. 77-115. , https://doi.org/10.1080/08839510701853200; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U., Vos, T.E.J., (2016) Q-Learning Strategies for Action Selection in the TESTAR Automated Testing Tool, pp. 130-137. , 6th International Conference on Metaheuristics and Nature Inspired Computing (META 2016); Feng, L., Lundmark, S., Meinke, K., Niu, F., Sindhu, M.A., Wong, P.Y.H., (2013) Case Studies in Learning-Based Testing, pp. 164-179. , https://doi.org/10.1007/978-3-642-41707-8_11, Testing Software and Systems, Springer Berlin Heidelberg; Fraser, G., Walkinshaw, N., Assessing and Generating Test Sets in Terms of Behavioural Adequacy (2015) Software Testing, Verification and Reliability, John Wiley and Sons Ltd, 25 (8), pp. 749-780. , https://doi.org/10.1002/stvr.1575; Gold, E.M., Language Identification in the Limit (1967) Information and Control, 10 (5), pp. 447-474. , https://doi.org/10.1016/S0019-9958(67)91165-5; Hu, C., Neamtiu, I., Automating GUI Testing for Android Applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test, pp. 77-83. , https://doi.org/10.1145/1982595.1982612, ACM; Kong, P., Li, L., Gao, J., Liu, K., Bissyandé, T.F., Klein, J., Automated Testing of Android Apps: A Systematic Literature Review (2018) IEEE Transactions on Reliability, pp. 1-22. , https://doi.org/10.1109/TR.2018.2865733; Lam, P., Bodden, E., Hendren, L., (2011) Technische Universität Darmstadt, , The Soot Framework for Java Program Analysis: a Retrospective; Lambeau, B., Damas, C., Dupont, P., State-Merging DFA Induction Algorithms with Mandatory Merge Constraints (2008) Grammatical Inference: Algorithms and Applications: 9th International Colloquium, pp. 139-153. , https://doi.org/10.1007/978-3-540-88009-7_11, ICGI 2008 Saint-Malo, France, September 22-24, 2008 Proceedings,Springer Berlin Heidelberg; Lang, K.J., Pearlmutter, B.A., Price, R.A., (1998) Results of the Abbadingo one DFA Learning Competition and a New Evidence-Driven State Merging Algorithm, pp. 1-12. , https://doi.org/10.1007/BFb0054059, Grammatical Inference: 4th International Colloquium, ICGI-98 Ames, Iowa, USA, July 12-14, 1998 Proceedings, Springer Berlin Heidelberg; Li, Y., Yang, Z., Guo, Y., Chen, X., DroidBot: A Lightweight UI-Guided Test Input Generator for Android (2017) Proceedings of the 39th International Conference on Software Engineering Companion (ICSE-C’17), pp. 23-26. , https://doi.org/10.1109/ICSE-C.2017.8, IEEE Press; Liu, C., A Compatibility Testing Platform for Android Multimedia Applications (2018) Multimedia Tools and Applications, , https://doi.org/10.1007/s11042-018-6268-y; Liu, Z., Gao, X., Long, X., Adaptive Random Testing of Mobile Application (2010) 2nd International Conference on Computer Engineering and Technology, 2, pp. 297-301; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An Input Generation System for Android Apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013), pp. 224-234. , https://doi.org/10.1145/2491411.2491450, ACM; Meiliana, S.I., Alianto, R., Daniel, S., Comparison Analysis of Android GUI Testing Frameworks by Using an Experimental Study (2018) Procedia Computer Science, 135, pp. 736-748. , https://doi.org/10.1016/j.procs.2018.08.211; Meinke, K., Sindhu, M.A., Incremental Learning-Based Testing for Reactive Systems (2011) Tests and Proofs, Springer Berlin Heidelberg, pp. 134-151. , https://doi.org/10.1007/978-3-642-21768-5_11; Morgado, I.C., Paiva, A.C.R., (2015) The iMPAcT Tool: Testing UI Patterns on Mobile Applications, pp. 876-881. , https://doi.org/10.1109/ASE.2015.96, 30th IEEE/ACM International Conference on Automated Software Engineering (ASE); Muangsiri, W., Takada, S., (2017) Random GUI Testing of Android Application Using Behavioral Model, pp. 266-271. , https://doi.org/10.18293/SEKE2017-099, The 29th International Conference on Software Engineering and Knowledge Engineering, Wyndham Pittsburgh University Center, Pittsburgh, PA, USA, July 5-7; Novella, L., Tufo, M., Fiengo, G., Improving Test Suites via a Novel Testing with Model Learning Approach (2018) IEEE 27th International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises (WETICE), , https://doi.org/10.1109/WETICE.2018.00051; Packevičius, Š., Barisas, D., Ušaniov, A., Guogis, E., Bareiša, E., Text Semantics and Layout Defects Detection in Android Apps Using Dynamic Execution and Screenshot Analysis (2018) Information and Software Technologies, pp. 279-292. , https://doi.org/10.1007/978-3-319-99972-2_22, Springer International Publishing; http://developer.android.com/tools/help/monkey.html; Utting, M., Pretschner, A., Legeard, B., A Taxonomy of Model-based Testing Approaches (2012) Software Testing, Verification and Reliability, John Wiley and Sons Ltd, 22 (5), pp. 297-312. , https://doi.org/10.1002/stvr.456; Walkinshaw, N., Bogdanov, K., Derrick, J., Paris, J., Increasing Functional Coverage by Inductive Testing: A Case Study (2010) Testing Software and Systems, Springer Berlin Heidelberg, pp. 126-141. , https://doi.org/10.1007/978-3-642-16573-3_10; Walkinshaw, N., Lambeau, B., Damas, C., Bogdanov, K., Dupont, P., STAMINA: A Competition to Encourage the Development and Assessment of Software Model Inference Techniques (2013) Empirical Software Engineering, Kluwer Academic Publishers, 18 (4), pp. 791-824. , https://doi.org/10.1007/s10664-012-9210-3; Walkinshaw, N., Taylor, R., Derrick, J., Inferring Extended Finite State Machine Models from Software Executions (2016) Empirical Software Engineering, 21 (3), pp. 811-853. , https://doi.org/10.1007/s10664-015-9367-7; Wang, P., Liang, B., You, W., Li, J., Shi, W., Automatic Android GUI Traversal with High Coverage (2014) Fourth International Conference on Communication Systems and Network Technologies, pp. 1161-1166. , https://doi.org/10.1109/CSNT.2014.236; Wetzlmaier, T., Ramler, R., Putschögl, W., A Framework for Monkey GUI Testing (2016) IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 416-423. , https://doi.org/10.1109/ICST.2016.51; Weyuker, E.J., Assessing Test Data Adequacy Through Program Inference (1983) ACM Transactions on Programming Languages and Systems, 5 (4), pp. 641-655. , https://doi.org/10.1145/69575.357231; Yang, W., Prasad, M.R., Xie, T., A Grey-Box Approach for Automated GUI-Model Generation of Mobile Applications (2013) Fundamental Approaches to Software Engineering, pp. 250-265. , https://doi.org/10.1007/978-3-642-37057-1_19, Springer Berlin Heidelberg; Zhauniarovich, Y., Philippov, A., Gadyatskaya, O., Crispo, B., Massacci, F., (2015) Towards Black Box Testing of Android Apps, pp. 501-510. , https://doi.org/10.1109/ARES.2015.70, 10th International Conference on Availability, Reliability and Security","Novella, L.; Università degli Studi del Sannio, Piazza Roma 21, Italy; email: luigi.novella@unisannio.it",,,"Kauno Technologijos Universitetas",,,,,1392124X,,,,"English","Inf. Technol. Control",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-85073272018
"Huber S., Demetz L.","57211238284;55071035100;","Performance analysis of mobile cross-platform development approaches based on typical UI interactions",2019,"ICSOFT 2019 - Proceedings of the 14th International Conference on Software Technologies",,,,"40","48",,2,"10.5220/0007838000400048","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073119572&doi=10.5220%2f0007838000400048&partnerID=40&md5=cc082ea45c6dd213d1c4be22aa60f60c","University of Applied Sciences Kufstein, Andreas Hofer-Straße 7, Kufstein, 6330, Austria","Huber, S., University of Applied Sciences Kufstein, Andreas Hofer-Straße 7, Kufstein, 6330, Austria; Demetz, L., University of Applied Sciences Kufstein, Andreas Hofer-Straße 7, Kufstein, 6330, Austria","The market for mobile apps is projected to generate revenues of nearly $ 190 billion by 2020. Besides native development approaches, in which developers are required to maintain a unique code base for each mobile platform they want to support, mobile cross-platform development (MCPD) approaches can be used to develop mobile apps. MCPD approaches allow building and deploying mobile apps for several mobile platforms from one single code base. The goal of this paper is to analyze the performance of MCPD approaches based on UI interactions. For this, we developed three mobile apps, one native and two developed using MCPD approaches. Using an automated test, we measured CPU usage and memory consumption of these apps when executing one selected UI interaction, that is, swiping through a virtual scrollable list. The results indicate that the CPU usage of the two apps developed using MCPD approaches is about twice as high compared to the native app, the memory consumption is even substantially higher than in the native app. This papers confirms results of previous studies and extends the body of knowledge by testing UI interactions. Copyright © 2019 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.","Android; Ionic/Cordova; Mobile cross-platform development; Performance analysis; React native","Android; Cross platform development; Ionic/Cordova; Performance analysis; React native; Drilling platforms",,,,,,,,"Ajayi, O.O., Omotayo, A.A., Orogun, A.O., Omomule, T.G., Orimoloye, S.M., Performance evaluation of native and hybrid android applications (2018) Performance Evaluation, 7 (16); Andrade, P.R.B., Albuquerque, A., Frota, O.F., Silveira, R.V., Da Silva, F.A., Cross platform app: A comparative study (2015) International Journal of Computer Science and Information Technology, 7 (1), pp. 33-40; Biørn-Hansen, A., Grønli, T.-M., Ghinea, G., A survey and taxonomy of core concepts and research challenges in cross-platform mobile development (2018) ACM Computing Surveys (CSUR), 51 (5), p. 108; Ciman, M., Gaggi, O., An empirical analysis of energy consumption of cross-platform frameworks for mobile development (2017) Pervasive and Mobile Computing, 39, pp. 214-230; Ciman, M., Gaggi, O., An empirical analysis of energy consumption of cross-platform frameworks for mobile development (2017) Pervasive and Mobile Computing, 39, pp. 214-230; Dalmasso, I., Datta, S.K., Bonnet, C., Nikaein, N., Survey, comparison and evaluation of cross platform mobile application development tools (2013) 2013 9th International Wireless Communications and Mobile Computing Conference (IWCMC); Dhillon, S., Mahmoud, Q.H., An evaluation framework for cross-platform mobile application development tools (2015) Software: Practice and Experience, 45 (10), pp. 1331-1357; El-Kassas, W.S., Abdullah, B.A., Yousef, A.H., Wahba, A.M., Taxonomy of cross-platform mobile applications development approaches (2017) Ain Shams Engineering Journal, 8 (2), pp. 163-190; (2019) FlatList, , https://facebook.github.io/react-native/docs/flatlist.html, [Online; accessed 11-February-2019]; (2019) Monkeyrunner, , https://developer.android.com/studio/test/monkeyrunner, Google [Online; accessed 11-February-2019]; (2019) RecyclerView, , https://developer.android.com/reference/android/support/v7/widget/RecyclerView, Google [Online; accessed 11-February-2019]; Heitkötter, H., Majchrzak, T.A., Cross-platform development of business apps with md2 (2013) Design Science at the Intersection of Physical and Virtual Design, pp. 405-411. , vom Brocke, J., Hekkala, R., Ram, S., and Rossi, M., editors Berlin, Heidelberg. Springer Berlin Heidelberg; Henry, W., Fabian, F., (2009) Man Page for Vmstat, , https://www.unix.com/man-page/linux/8/vmstat, [Online; accessed 11-February-2019]; (2019) Ion-virtual-list - Ionic Documentation, , https://ionicframework.com/docs/api/virtual-scroll, [Online; accessed 11-February-2019]; Latif, M., Lakhrissi, Y., Nfaoui, E.H., Es-Sbai, N., Cross platform approach for mobile application development: A survey (2016) 2016 International Conference on Information Technology for Organizations Development (IT4OD); Majchrzak, T.A., Biørn-Hansen, A., Grønli, T.-M., Comprehensive analysis of innovative crossplatform app development frameworks (2017) Proceedings of the 50th Hawaii International Conference on System Sciences, , Hawaii International Conference on System Sciences; Mercado, I.T., Munaiah, N., Meneely, A., The impact of cross-platform development approaches for mobile applications from the user's perspective (2016) Proceedings of the International Workshop on App Market Analytics, pp. 43-49; (2018) Global Smartphone Sales by Operating System from 2009 to 2017 (in Millions), , https://www.statista.com/statistics/263445/global-smartphone-sales-by-operating-system-since-2009, [Online; accessed 11-February-2019]; (2019) Worldwide Mobile App Revenues in 2015, 2016 and 2020 (in Billion U.S. Dollars), , https://www.statista.com/statistics/269025/worldwide-mobile-app-revenue-forecast, [Online; accessed 11-February-2019]; Vallerio, K.S., Zhong, L., Jha, N.K., Energy-efficient graphical user interface design (2006) IEEE Transactions on Mobile Computing, 5 (7), pp. 846-859; Willocx, M., Vossaert, J., Naessens, V., A quantitative assessment of performance in mobile app development tools (2015) 2015 IEEE International Conference on Mobile Services, pp. 454-461; Willocx, M., Vossaert, J., Naessens, V., Comparing performance parameters of mobile app development strategies (2016) Mobile Software Engineering and Systems (MOBILESoft), 2016 IEEE/ACM International Conference on, pp. 38-47; Xanthopoulos, S., Xinogalos, S., A comparative analysis of cross-platform development approaches for mobile applications (2013) Proceedings of the 6th Balkan Conference in Informatics on - BCI '13, , ACM Press",,"van Sinderen M.Maciaszek L.Maciaszek L.","Institute for Systems and Technologies of Information, Control and Communication (INSTICC)","SciTePress","14th International Conference on Software Technologies, ICSOFT 2019","26 July 2019 through 28 July 2019",,151484,,9789897583797,,,"English","ICSOFT - Proc. Int. Conf. Softw. Technol.",Conference Paper,"Final","",Scopus,2-s2.0-85073119572
"Almeida S., Paiva A.C.R., Restivo A.","57211160485;7102683763;26531800800;","Mutation-Based Web Test Case Generation",2019,"Communications in Computer and Information Science","1010",,,"339","346",,1,"10.1007/978-3-030-29238-6_25","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072832265&doi=10.1007%2f978-3-030-29238-6_25&partnerID=40&md5=1f4d5cbceb02e105e4b47d1c8e46eaac","Faculty of Engineering, University of Porto, Porto, Portugal; INESC TEC, Porto, Portugal","Almeida, S., Faculty of Engineering, University of Porto, Porto, Portugal; Paiva, A.C.R., Faculty of Engineering, University of Porto, Porto, Portugal, INESC TEC, Porto, Portugal; Restivo, A., Faculty of Engineering, University of Porto, Porto, Portugal","Regression testing is of paramount importance to ensure that the quality of software does not suffer when code changes are implemented. However, having a large set of tests is mostly done by hand and is time-consuming. Regression tests are written to test functionality that is already implemented and thus are a prime target for automatic test generation. Mutation testing is a technique that evaluates the quality of tests by applying simple changes to source code and checking if any test detects those changes. This paper presents an approach focused on GUI Testing that takes the idea behind mutation testing and applies it, not to the source code, but the actual tests. Generated tests are then analyzed, and those that generate different outcomes are chosen. The set of initial test cases is obtained from the interactions of the actual users of the service under analysis. In the end, an evaluation of the approach is presented. © Springer Nature Switzerland AG 2019.","Mutation testing; Software testing; Test case generation; Web testing","Codes (symbols); Quality control; Automatic test generation; Code changes; Mutation testing; Quality of softwares; Regression testing; Regression tests; Test case generation; Web testing; Software testing",,,,,,,,"Barbosa, A., Paiva, A.C.R., Campos, J.C., Test case generation from mutated task models (2011) Proceedings of the 3Rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS 2011), pp. 175-184. , https://doi.org/10.1145/1996461.1996516.http://portal.acm.org/citation.cfm?doid=1996461.1996516; Garcia, J.E., Paiva, A.C.R., Manage software requirements specification using web analytics data (2018) Worldcist 2018. AISC, 746, pp. 257-266. , https://doi.org/10.1007/978-3-319-77712-225, Rocha, Á., Adeli, H., Reis, L.P., Costanzo, S. (eds.), vol., pp., Springer, Cham; Highway, B.A., Model base testing: A review (2017) Int. J. Adv. Sci. Res., 2 (3), pp. 44-51; Koroglu, Y., Sen, A., TCM: Test case mutation to improve crash detection in Android (2018) FASE 2018. LNCS, 10802, pp. 264-280. , https://doi.org/10.1007/978-3-319-89363-115, Russo, A., Schürr, A. (eds.), pp., Springer, Cham; Liu, C.H., Lu, C.Y., Cheng, S.J., Chang, K.Y., Hsiao, Y.C., (2014) Capture-Replay Testing for Android Applications, , https://doi.org/10.1109/IS3C.2014.293; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pp. 599-609. , https://doi.org/10.1145/2635868.2635896, pp., ACM, New York; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proceedings of the 25Th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 94-105. , https://doi.org/10.1145/2931037.2931054, pp., ACM, New York; Moreira, R.M., Paiva, A.C., Nabuco, M., Memon, A., Pattern-based GUI testing: Bridging the gap between design and quality assurance (2017) Softw. Test. Verif. Reliab., 27 (3). , https://doi.org/10.1002/stvr.1629; Silva, P., Paiva, A.C.R., Garcia, J.E., Restivo, A., Automatic test case generation from usage information (2018) 11Th International Conference on the Quality of Information and Communications Technology (QUATIC)","Paiva, A.C.R.; Faculty of Engineering, Portugal; email: apaiva@fe.up.pt","Piattini M.Rupino da Cunha P.Garcia Rodriguez de Guzman I.Perez-Castillo R.",,"Springer Verlag","12th International Conference on the Quality of Information and Communications Technology, QUATIC 2019","11 September 2019 through 13 September 2019",,231459,18650929,9783030292379,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85072832265
"Yang C.-Z., Lai C.-J., Lu P., You Z.-J.","7407029126;57210746849;57204390536;57204393889;","LAD: A layout anomaly detector for android applications",2019,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2019-July",,,"557","562",,1,"10.18293/SEKE2019-186","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071396207&doi=10.18293%2fSEKE2019-186&partnerID=40&md5=27ee9ac16bee502cc67267422dec906b","Department of Computer Science and Engineering, Yuan Ze University, Chungli, Taiwan","Yang, C.-Z., Department of Computer Science and Engineering, Yuan Ze University, Chungli, Taiwan; Lai, C.-J., Department of Computer Science and Engineering, Yuan Ze University, Chungli, Taiwan; Lu, P., Department of Computer Science and Engineering, Yuan Ze University, Chungli, Taiwan; You, Z.-J., Department of Computer Science and Engineering, Yuan Ze University, Chungli, Taiwan","In recent years, Android has become one of the most popular mobile operating systems. Software testing of Android applications becomes a very important issue. In the past research, many studies focus on functional testing. Recently, some studies start to discuss the layout anomaly issue. However, these schemes investigate few types of layout anomalies. Moreover, there may exist underlying platform constraints. In this paper, a detection tool LAD (Layout Anomaly Detector) is proposed. LAD considers the anomaly types studied in the previous work with a newly proposed anomaly type for scale maladaptation of components and text. LAD also supports testing scripts. We have conducted empirical experiments with four real apps. The experimental results show that LAD can effectively detect the layout anomalies of these apps. © 2019 Knowledge Systems Institute Graduate School. All rights reserved.","Android; Automatic testing; GUI layout testing; Layout anomaly","Application programs; Automatic testing; Knowledge engineering; Software testing; Android; Android applications; Anomaly detector; Detection tools; Empirical experiments; Functional testing; Layout anomaly; Mobile operating systems; Android (operating system)",,,,,"Ministry of Science and Technology, Taiwan, MOST: MOST 107-2221-E-155-012","ACKNOWLEDGEMENT This work was supported in part by Ministry of Science and Technology, Taiwan under grant MOST 107-2221-E-155-012. The authors would also like to express many thanks to the anonymous reviewers for their precious suggestions.",,"Android Apps on Google Play, , https://www.appbrain.com/stats/number-of-android-apps, last accessed on March 1, 2019; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test (AST '11), pp. 77-83; Wen, H.-L., Lin, C.-H., Hsieh, T.-H., Yang, C.-Z., PATS: A parallel GUI testing framework for android applications (2015) Proceedings of the 2015 IEEE 39th Annual Computer Software and Applications Conference (COMPSAC 2015), pp. 210-215; (2019) Galen Framework, , http://galenframework.com/, last accessed on March 1, 2019; Zaiats, D., (2019) ITArray Automotion Framework, , https://automotion.itarray.net/, last accessed on March 1, 2019; Shih, Y.-A., Chang, Y.-P., Yang, C.-Z., An automated detection framework for testing visual GUI layouts of android applications (2017) Proceedings of the 7th International Workshop on Computer Science and Engineering (WCSE 2017), pp. 544-548; Hasselknippe, K.F., Li, J., A novel tool for automatic GUI layout testing (2017) Proceedings of the 24th Asia-Pacific Software Engineering Conference (APSEC 2017), pp. 695-700; (2014) Android Fragmentation Visualized (August 2014), , https://opensignal.com/reports/2014/android-fragmentation/, last accessed on December 20, 2017; (2019) Fusetools - We Make Apps Easy, , https://www.fusetools.com, last accessed on March 1, 2019; Chng, E., Ngo, D.C.L., Screen design: A dynamic symmetry grid based approach (2003) Displays, 24, pp. 125-135; Song, H., Liu, H., Chen, D., An automatic GUI adjustment method for mobile computing (2011) Proceedings of the 2011 IEEE International Conference on Computer Science and Automation Engineering (CSAE 2011), pp. 206-210; Hallé, S., Bergeron, N., Guerin, F., Breton, G.L., Beroual, O., Declarative layout constraints for testing web applications (2016) Journal of Logical and Algebraic Methods in Programming, 85 (5), pp. 737-758; (2019) Applitools Eyes, , https://applitools.com/, last accessed on March 1, 2019; Cryer, J., (2019) PhantomCSS, , https://github.com/HuddleEng/PhantomCSS, last accessed on March 1, 2019; (2019) Human Interface Guidelines - Adaptivity and Layout, , https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/, last accessed on March 1, 2019; Zea, R., (2015) Mastering Responsive Web Design with HTML5 and CSS3, , Packt Publishing Ltd; Kahn, P., Lenk, K., Design: Principles of typography for user interface design (1998) Interactions, 5 (6), pp. 15-29; Tennant, D.B., (2011) 16 Pixels Font Size: For Body Copy. Anything Less is a Costly Mistake, , https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/; Liu, C., Wang, C., Dai, R., Text detection in images based on unsupervised classification of edge-based features (2005) Proceedings of the 2005 8th International Conference on Document Analysis and Recognition (ICDAR '05), pp. 610-614",,,"Knowledge Systems Institute Graduate School;KSI Research Inc.","Knowledge Systems Institute Graduate School","31st International Conference on Software Engineering and Knowledge Engineering, SEKE 2019","10 July 2019 through 12 July 2019",,150462,23259000,1891706489,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85071396207
"Vuong T., Takada S.","57206670577;7202611302;","Semantic analysis for deep Q-network in android GUI testing",2019,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2019-July",,,"123","128",,3,"10.18293/SEKE2019-080","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071395982&doi=10.18293%2fSEKE2019-080&partnerID=40&md5=f136ae7bda5ac4d1346b3482b3c8c5a6","Dept. of Information and Computer Science, Keio University, Yokohama, Japan","Vuong, T., Dept. of Information and Computer Science, Keio University, Yokohama, Japan; Takada, S., Dept. of Information and Computer Science, Keio University, Yokohama, Japan","Since the big boom of smartphone and consequently of mobile applications, developers nowadays have many tools to help them create applications easier and faster. However, efficient automated testing tools are still missing, especially for GUI testing. We propose an automated GUI testing tool for Android applications using Deep Q-Network and semantic analysis of the GUI. We identify the semantic meanings of GUI elements and use them as an input to a neural network, which through training, approximates the behavioral model of the application under test. The neural network is trained using the Q-Learning algorithm of Reinforcement Learning. It guides the testing tool to explore more often functionalities that can only be accessed through a specific sequence of actions. The tool does not require access to the source code of the application under test. It obtains higher code coverage and is better at fault detection in comparison to state-of-the-art testing tools. © 2019 Knowledge Systems Institute Graduate School. All rights reserved.","Automated android testing; Deep Q-network; GUI testing; Reinforcement learning","Automation; Fault detection; Graphical user interfaces; Knowledge engineering; Learning algorithms; Machine learning; Reinforcement learning; Semantic Web; Semantics; Android applications; Application under tests; Automated testing tools; GUI testing; Mobile applications; Q-learning algorithms; Semantic analysis; Specific sequences; Android (operating system)",,,,,,,,"Google's Announcement, , https://twitter.com/Google/status/864890655906070529; Total Apps on Google Play, , https://www.statista.com/statistics/266210/number-of-available-applications-in-the-google-play-store/; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) Proc. Of ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24; Vuong, T.A.T., Takada, S., A reinforcement learning based approach to automated testing of android applications (2018) Proc. Of A-TEST 2018, pp. 31-37; Mnih, Human-level control through deep reinforcement learning (2005) Nature, 518, pp. 529-533; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proc. Of MobiSys 2014, pp. 204-217; Azim, T., Neamtiu, I., A3E - Targeted and depth-first exploration for systematic testing of android apps (2013) Proc. Of OOPSLA 2013, pp. 641-660; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of android apps (2014) Proc. Of FSE 2014, pp. 599-609; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proc. Of FSE 2012; Android Monkey, , https://developer.android.com/studio/test/monkey.html; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? Proc. Of ASE 2015, pp. 429-440; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proc. Of ESEC/FSE 2013, pp. 224-234; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) Proc. Of 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, pp. 81-90; Esparcia-Alcazar, A.I., Almenar, F., Martinez, U.R.M., Vos, T.E.J., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) Proc. Of META 2016, pp. 174-180; Koroglu, Y., QBE: QLearning-based exploration of android applications Proc. Of ICST 2018, pp. 105-115; Adamo, D., Md Khan, K., Koppula, S., Bryce, R., Reinforcement learning for android GUI testing (2018) Proc. Of A-TEST 2018, pp. 2-8; Sutton, R.S., Barto, A.G., (1998) Reinforcement Learning an Introduction, , MIT Press, Cambridge, MA; Arulkumaran, K., Deisenroth, M.P., Brundage, M., Bharath, A.A., Deep reinforcement learning: A brief survey (2017) IEEE Signal Processing Magazine, 34, pp. 26-38; Bellman, R., On the theory of dynamic programming (1952) PNAS, 38 (8), pp. 716-719; Watkins, C.J.C.H., Dayan, P., Technical note: Q-learning (1992) Machine Learning, 8 (3-4), pp. 279-292. , May 1992; Liu, T.F., Craft, M., Situ, J., Yumer, E., Mech, R., Kumar, R., Learning design semantics for mobile apps (2018) Proc. Of UIST 2018, pp. 569-579; UI Automator for Python, , https://github.com/xiaocong/uiautomator; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proc. Of ASE 2012, pp. 258-261",,,"Knowledge Systems Institute Graduate School;KSI Research Inc.","Knowledge Systems Institute Graduate School","31st International Conference on Software Engineering and Knowledge Engineering, SEKE 2019","10 July 2019 through 12 July 2019",,150462,23259000,1891706489,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85071395982
"Yousaf N., Azam F., Butt W.H., Anwar M.W., Rashid M.","57202787503;9639414800;26665905200;56677318200;22735181000;","Automated Model-Based Test Case Generation for Web User Interfaces (WUI) From Interaction Flow Modeling Language (IFML) Models",2019,"IEEE Access","7",, 8718593,"67331","67354",,7,"10.1109/ACCESS.2019.2917674","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067176144&doi=10.1109%2fACCESS.2019.2917674&partnerID=40&md5=5a0bd5dfb6b3f2b7fa4a5d18d3898e85","Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, National University of Sciences and Technology, Islamabad, Pakistan; Computer Engineering Department, Umm Al-Qura University, Mecca, Saudi Arabia","Yousaf, N., Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, National University of Sciences and Technology, Islamabad, Pakistan; Azam, F., Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, National University of Sciences and Technology, Islamabad, Pakistan; Butt, W.H., Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, National University of Sciences and Technology, Islamabad, Pakistan; Anwar, M.W., Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, National University of Sciences and Technology, Islamabad, Pakistan; Rashid, M., Computer Engineering Department, Umm Al-Qura University, Mecca, Saudi Arabia","Since the emergence of web 2.0, the architecture of web applications has been transformed significantly and its complexity has grown enormously. In such web applications, the user interface (UI) is an important ingredient and with the increased complexity, its testing is getting increasingly complex and cost/time-consuming process. Recently introduced, interaction flow modeling language (IFML) is an object management group (OMG) standard. IFML is gaining popularity for developing web applications, primarily, because of its excellent features for modeling UI elements, their content, and their interaction capturing capabilities. However, despite its superior UI modeling features, its UI testing is accomplished through traditional time-consuming techniques, which are employed after implementing the UI code. Hence, to overcome these limitations, this paper introduces a novel model-based testing approach for IFML UI elements. The proposed approach provides complete navigation testing using formal models. Moreover, the approach transforms the IFML models to all necessary UI testing artifacts by generating state transition matrix plus detailed UI test case document. As a part of a research, model-based user interface test case (MBUITC) generator tool is implemented to automatically generate navigation model for formal verification, test case document, and transition matrices from IFML models. The applicability of the proposed approach is validated through two benchmark case studies. The results have shown that the proposed approach provides test cases at the early stages of development, i.e., specification and analysis, which eventually helps in building a right product at the right time at a comparatively lower cost. © 2013 IEEE.","Formal verification; IFML; MBT; model-based testing; UI; web applications; WUI","Air navigation; Cost benefit analysis; Flow control; Formal verification; Model checking; Modeling languages; Testing; IFML; Model based testing; Model-based testing approaches; Model-based user interfaces; Object management groups; State transition Matrix; Time consuming techniques; WEB application; User interfaces",,,,,,,,"Suhag, V., Bhatia, R., Model based test cases generation for Web applications (2014) Int. J. Comput. Appl., 92 (3), pp. 23-31. , Apr; Saleh, E.M., Salem, O.A.S., A model-driven engineering transitionbased GUI testing technique (2015) Proc. Int. Conf. Comput. Sci. Comput. Intell. (CSCI), pp. 108-113. , Las Vegas, NV, USA, Dec; Anwar, M.W., Rashid, M., Azam, F., Kashif, M., Model-based design verification for embedded systems through SVOCL: An OCL extension for system verilog (2017) Des. Automat. Embedded Syst., 21 (1), pp. 1-36. , Mar; Jácome, S., Lara, J.D., Controlling meta-model extensibility in modeldriven engineering (2018) IEEE Access, 6, pp. 19923-19939; Roubi, S., Erramdani, M., Mbarki, S., Extending graphical part of the interaction flow modeling language to generate rich Internet graphical user interfaces (2016) Proc. 4th Int. Conf. Model-Driven Eng. Softw. Develop. (MODELSWARD), pp. 161-167. , Rome, Italy, Feb; Laaz, N., Mbarki, S., Integrating IFML models and owl ontologies to derive UIs Web-Apps (2016) Proc. Int. Conf. Inf. Technol. Org. Develop. (ITOD), pp. 1-6. , Fez, Morocco, Mar./Apr; Frajták, K., Bureš, M., Jelínek, I., Transformation of IFML schemas to automated tests (2015) Proc. Conf. Res. Adapt. Convergent Syst., pp. 509-511. , Prague, Czech, Oct; Frajták, K., Bureš, M., Jelínek, I., Using the interaction flow modelling language for generation of automated front-end tests (2015) Proc. Federated Conf. Comput. Sci. Inf. Syst. (ACSIS), 6, pp. 117-122; Brambilla, M., Mauri, A., Franzago, M., Muccini, H., A model-based method for seamless web and mobile experience (2016) Proc. 1st Int. Workshop Mobile Develop., pp. 33-40. , Amsterdam, Netherlands, Oct; Bernaschina, C., Brambilla, M., Koka, T., Mauri, A., Umuhoza, E., Integrating modeling languages and Web logs for enhanced user behavior analytics (2017) Proc. 26th Int. Conf. World Wide Web Companion, pp. 171-175. , Apr; Acerbis, R., Bongio, A., Butti, S., Brambilla, M., Model-driven development of cross-platform mobile applications with webratio and IFML (2015) Proc. 2nd ACM Int. Conf. Mobile Softw. Eng. Syst., pp. 170-171. , Florence, Italy, May; Acerbis, R., Bongio, A., Brambilla, M., Butti, S., Model-driven development based on omg's IFML with webratio web and mobile platform (2015) Proc. Int. Conf. Web Eng., pp. 605-608. , Jun; Roubi, S., Erramdani, M., Mbarki, S., A model driven approach to generate graphical user interfaces for rich Internet applications using interaction flow modeling language (2015) Proc. ISDA, pp. 272-276. , Marrakech, Morocco, Dec; Brambilla, M., Mauri, A., Umuhoza, E., Extending the interaction flow modeling language (IFML) for model driven development of mobile applications front end (2014) Mobile Web Information Systems, pp. 176-191. , (Lecture Notes in Computer Science). Cham, Switzerland: Springer; Nieto, V., Castro, V., Lopez, F., Ferro, R., Gonzalez, C., Model driven architecture software and interaction flow modelling language for tourism data acquisition in Colombia (2016) Communications in Computer and InforMation Science, 657, pp. 368-379; Umuhoza, E., Brambilla, M., Model driven development approaches for mobile applications: A survey (2016) Mobile Web and Intelligent Information Systems, 9847, pp. 93-107. , (Lecture Notes in Computer Science), Cham, Switzerland: Springer; Rhazali, Y., Hadi, Y., Mouloudi, A., A model transformation in MDA from CIM to PIM represented by Web models through SoaML and IFML (2016) Proc. 4th Int. Colloq. Inf. Sci. Technol. (CiSt), pp. 116-121. , Tangier, Morocco, Oct; Laaz, N., Mbarki, S., Combining ontologies and IFML models regarding the GUIs of rich Internet applications (2016) Proc. Int. Conf. Artif. Intell., Methodol., Syst., Appl., pp. 226-236. , Aug; Umuhoza, E., Ed-Douibi, H., Brambilla, M., Cabot, J., Cabot, J., Automatic code generation for cross-platform, multi-device mobile apps: Some reflections from an industrial experience (2015) Proc. 3rd Int. Workshop Mobile Develop. Lifecycle, pp. 37-44. , Pittsburgh, PA, USA, Oct; Salini, A., Malavolta, I., Rossi, F., Leveraging web analytics for automatically generating mobile navigation models (2016) Proc. Int. Conf. Mobile Services, pp. 103-110. , San Francisco, CA, USA, Jul; Bernaschina, C., Comai, S., Fraternali, P., IFMLEdit. Org: Model driven rapid prototyping of mobile apps (2017) Proc. 4th Int. Conf. Mobile Softw. Eng. Syst., pp. 207-208. , Buenos Aires, Argentina, May; Bernaschina, C., Comai, S., Fraternali, P., IFMLEdit.org: Model driven rapid prototyping of mobile apps (2017) Proc. IEEE/ACM 4th Int. Conf. Mobile Softw. Eng. Syst. (MOBILESoft), , https://ieeexplore.ieee.org/document/7972808, Buenos Aires, Argentina, May. [Online]; Bernaschina, C., Comai, S., Fraternali, P., Online model editing, simulation and code generation for web and mobile applications (2017) Proc. IEEE/ACM 9th Int. Workshop Modelling Softw. Eng. (MiSE), pp. 33-39. , Buenos Aires, Argentina, May; Punnoose, R.J., Armstrong, R.C., Wong, M.H., Mayo, J.R., (2014) Survey of Existing Tools for Formal Verification, , Sandia Nat. Lab., Livermore, CA, USA, Tech. Rep. SAND2014-20533, 551829, Dec; Basit-Ur-Rahim, M.A., Arif, F., Ahmad, J., Modeling of real-time embedded systems using SysML and its verification using UPPAAL and DiVinE (2014) Proc. 5th IEEE Int. Conf. Softw. Eng. Service Sci. (ICSESS), pp. 132-136. , Beiing, China, Jun; Bowen, J., Reeves, S., Generating obligations, assertions and tests from UI models (2017) Proc. Hum.-Comput. Interact. (EICS), 1 (1), p. 5. , Jun; Gupta, P., Surve, P., Model based approach to assist test case creation, execution, and maintenance for test automation (2011) Proc. 1st Int. Workshop End-to-End Test Script Eng. (ETSE), pp. 1-7. , Toronto, Ontario, Canada, Jul; Costa, S.L.D., Neto, V.V.G., Oliveira, J.L.D., A user interface stereotype to build web portals (2014) Proc. 9th Latin Amer. Web Congr., pp. 10-18. , Ouro Preto, Brazil, Oct; Amjad, A., Azam, F., Anwar, M.W., Butt, W.H., Rashid, M., Event-driven process chain for modeling and verification of business requirements-A systematic literature review (2018) IEEE Access, 6, pp. 9027-9048; Bernaschina, C., Comai, S., Fraternali, P., Formal semantics of OMG's interaction flow modeling language (IFML) for mobile and richclient application model driven development (2018) J. Syst. Softw., 137, pp. 239-260. , Mar; Rodriguez-Echeverria, R., Preciado, J.C., Sierra, J., Conejero, J.M., Sanchez-Figueroa, F., AutoCRUD: Automatic generation of CRUD specifications in interaction flow modelling language (2018) Sci. Comput. Program., 168, pp. 165-168. , Dec; (2018) Open Source MBUITC Generator Tool, , http://ceme.nust.edu.pk/ISEGROUP/MBUITC/index.html, Accessed: Feb. [Online]","Anwar, M.W.; Department of Computer and Software Engineering, Pakistan; email: waseemanwar@ceme.nust.edu.pk",,,"Institute of Electrical and Electronics Engineers Inc.",,,,,21693536,,,,"English","IEEE Access",Article,"Final","All Open Access, Gold",Scopus,2-s2.0-85067176144
"Coppola R., Morisio M., Torchiano M., Ardito L.","57191261885;6701428565;6602571197;36184897700;","Scripted GUI testing of Android open-source apps: evolution of test code and fragility causes",2019,"Empirical Software Engineering",,,,"","",,7,"10.1007/s10664-019-09722-9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066101585&doi=10.1007%2fs10664-019-09722-9&partnerID=40&md5=c1634cb41d4b6c1ea9d5aea07c52e872","Department of Computer and Automation Engineering, Politecnico di Torino, Corso Duca degli Abruzzi, 24, Torino, Italy","Coppola, R., Department of Computer and Automation Engineering, Politecnico di Torino, Corso Duca degli Abruzzi, 24, Torino, Italy; Morisio, M., Department of Computer and Automation Engineering, Politecnico di Torino, Corso Duca degli Abruzzi, 24, Torino, Italy; Torchiano, M., Department of Computer and Automation Engineering, Politecnico di Torino, Corso Duca degli Abruzzi, 24, Torino, Italy; Ardito, L., Department of Computer and Automation Engineering, Politecnico di Torino, Corso Duca degli Abruzzi, 24, Torino, Italy","Evidence from empirical studies suggests that mobile applications are not thoroughly tested as their desktop counterparts. In particular, GUI testing is generally limited. Like web-based applications, mobile apps suffer from GUI testing fragility, i.e., GUI test classes failing or needing interventions because of modifications in the AUT or in its GUI arrangement and definition. The objective of our study is to examine the diffusion of test classes created with a set of popular GUI Automation Frameworks for Android apps, the amount of changes required to keep test classes up to date, and the amount of code churn in existing test suites, along with the underlying modifications in the AUT that caused such modifications. We defined 12 metrics to characterize the evolution of test classes and test methods, and a taxonomy of 28 possible causes for changes to test code. To perform our experiments, we selected six widely used open-source GUI Automation Frameworks for Android apps. We evaluated the diffusion of the tools by mining the GitHub repositories featuring them, and computed our set of metrics on the projects. Applying the Grounded Theory technique, we then manually analyzed diff files of test classes written with the selected tools, to build from the ground up a taxonomy of causes for modifications of test code. We found that none of the considered GUI automation frameworks achieved a major diffusion among open-source Android projects available on GitHub. For projects featuring tests created with the selected frameworks, we found that test suites had to be modified often – specifically, about 8% of developers’ modified LOCs belonged to test code and that a relevant portion (around 50% on average) of those modifications were induced by modifications in GUI definition and arrangement. Test code written with GUI automation fromeworks proved to need significant interventions during the lifespan of a typical Android open-source project. This can be seen as an obstacle for developers to adopt this kind of test automation. The evaluations and measurements of the maintainance needed by test code wrtitten with GUI automation frameworks, and the taxonomy of modification causes, can serve as a benchmark for developers, and the basis for the formulation of actionable guidelines and the development of automated tools to help mitigating the issue. © 2019, Springer Science+Business Media, LLC, part of Springer Nature.","Automated software testing; GUI testing; Mobile development; Software evolution; Software maintenance","Android (operating system); Automation; Codes (symbols); Computer software maintenance; Diffusion; Graphical user interfaces; Open source software; Open systems; Taxonomies; Testing; Automated software testing; Empirical studies; GUI testing; Mobile applications; Mobile development; Open source projects; Software Evolution; Web-based applications; Software testing",,,,,,,,"Alégroth, E., Feldt, R., Ryrholm, L., Visual gui testing in practice: challenges, problemsand limitations (2015) Empir Softw Eng, 20 (3), pp. 694-744; Amalfitano, D., Fasolino, A.R., Tramontana, P., de Carmine, S., Imparato, G., A toolset for gui testing of android applications (2012) 2012 28Th IEEE International Conference on Software Maintenance (ICSM). IEEE, pp. 650-653; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: automated model-based testing of mobile apps (2015) IEEE software, 32 (5), pp. 53-59; Charmaz, K., (2014) Constructing Grounded Theory, , Sage; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) Acm Sigplan Notices, 48, pp. 623-640. , ACM; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet?(e) (2015) 2015 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , IEEE; Coppola, R., Raffero, E., Torchiano, M., Automated mobile ui test fragility: An exploratory assessment study on android (2016) Proceedings of the 2Nd International Workshop on User Interface Test Automation, pp. 11-20. , ACM; Coppola, R., Morisio, M., Torchiano, M., Scripted gui testing of android apps: A study on diffusion, evolution and fragility (2017) Proceedings of the 13Th International Conference on Predictive Models and Data Analytics in Software Engineering. ACM, pp. 22-32; Coppola, R., Morisio, M., Torchiano, M., Maintenance of android widget-based gui testing: A taxonomy of test case modification causes (2018) Proceedings of the 1St IEEE Workshop on Next Level of Test Automation 2018, , IEEE; Coppola, R., Morisio, M., Torchiano, M., Mobile gui testing fragility: a study on open-source android applications (2018) IEEE Trans Reliab, 68 (1), pp. 67-90. , (, b; Corbin, J.M., Strauss, A., Grounded theory research: procedures, canons, and evaluative criteria (1990) Qual Sociol, 13 (1), pp. 3-21; Cruz, L., Abreu, R., Lo, D., (2018) To the Attention of Mobile Software Developers: Guess What, Test Your App!; Gao, J., Bai, X., Tsai, W.T., Uehara, T., Mobile application testing: a tutorial (2014) Computer, 47 (2), pp. 46-55; Gao, Z., Chen, Z., Zou, Y., Memon, A.M., Sitar: Gui test script repair (2016) IEEE Transactions on Software Engineering, 42 (2), pp. 170-186; Garousi, V., Felderer, M., Developing, verifying, and maintaining high-quality automated test scripts (2016) IEEE Softw, 33 (3), pp. 68-75; Glaser, B.G., Strauss, A.L., Strutzel, E., The discovery of grounded theory; strategies for qualitative research (1968) Nurs Res, 17 (4), p. 364; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for android (2013) 2013 35Th International Conference on Software Engineering (ICSE). IEEE, pp. 72-81; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the 31St International Conference on Software Engineering, pp. 408-418. , IEEE Computer Society; Grgurina, R., Brestovac, G., Grbac, T.G., Development environment for android application development: An experience report (2011) 2011 Proceedings of the 34Th International Convention on MIPRO, pp. 1693-1698. , IEEE; Islam, M.R., Numeric rating of apps on google play store by sentiment analysis on user reviews (2014) 2014 International Conference on Electrical Engineering and Information Communication Technology, pp. 1-4. , https://doi.org/10.1109/ICEEICT.2014.6919058; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 67-77. , ACM; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote ui testing on android (2012) Proceedings of the 11Th International Conference on Mobile and Ubiquitous Multimedia, p. 28. , ACM; Kaur, A., Review of mobile applications testing with automated techniques (2015) Int J Adv Res Comput Commun Eng, 4 (10), pp. 503-507; Knych, T.W., Baliga, A., Android application development and testability (2014) Proceedings of the 1St International Conference on Mobile Software Engineering and Systems, pp. 37-40. , ACM; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 2015 IEEE 8Th International Conference on Software Testing, Verification and Validation (ICST), pp. 1-10. , IEEE; Kropp, M., Morales, P., Automated gui testing on the android platform (2010) Proceedings of the 22Nd IFIP International Conference on Testing Software and Systems: Short Papers, pp. 67-72; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) 2013 20Th Working Conference on Reverse Engineering (WCRE). IEEE, pp. 272-281; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. Dom-based web locators: An empirical study (2014) International Conference on Web Engineering, pp. 322-340. , Springer; Linares-Vásquez, M., Enabling testing of android apps (2015) 2015 IEEE/ACM 37Th IEEE International Conference on Software Engineering (ICSE), 2, pp. 763-765. , IEEE; Linares-Vasquez, M., Vendome, C., Luo, Q., Poshyvanyk, D., How developers detect and fix performance bottlenecks in android apps (2015) 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 352-361. , IEEE; Linares-Vásquez, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, pp. 613-622; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 399-410. , IEEE; Liu, C.H., Lu, C.Y., Cheng, S.J., Chang, K.Y., Hsiao, Y.C., Chu, W.M., Capture-replay testing for android applications (2014) 2014 International Symposium on Computer, Consumer and Control (Is3c), pp. 1129-1132. , IEEE; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9Th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , ACM; Memon, A.M., Automatically repairing event sequence-based gui test suites for regression testing (2008) ACM Trans Softw Eng Methodol (TOSEM), 18 (2), p. 4; Milano, D.T., (2011) Android application testing guide, , Packt Publishing Ltd, Birmingham; Mirzaei, N., Malek, S., Păsăreanu, C.S., Esfahani, N., Mahmood, R., Testing android apps through symbolic execution (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), pp. 1-5; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Crashscope: A practical tool for automated testing of android applications (2017) 2017 IEEE/ACM 39Th International Conference on Software Engineering Companion (ICSE-C), pp. 15-18. , IEEE; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Proceedings of the 7Th International Workshop on Automation of Software Test, pp. 29-35. , IEEE Press; Pinto, L.S., Sinha, S., Orso, A., Understanding myths and realities of test-suite evolution (2012) Proceedings of the ACM SIGSOFT 20Th International Symposium on the Foundations of Software Engineering, p. 33. , ACM; Ralph, P., Toward methodological guidelines for process theories and taxonomies in software engineering (2018) IEEE Trans Softw Eng, , https://ieeexplore.ieee.org/abstract/document/8267085; Scott, T.J., Kuksenok, K., Perry, D., Brooks, M., Anicello, O., Aragon, C., Adapting grounded theory to construct a taxonomy of affect in collaborative online chat (2012) Proceedings of the 30Th ACM International Conference on Design of Communication, pp. 197-204. , ACM; Sedano, T., Ralph, P., Péraire, C., Software development waste (2017) Proceedings of the 39Th International Conference on Software Engineering, pp. 130-140. , IEEE Press; Shah, G., Shah, P., Muchhala, R., Software testing automation using appium (2014) International Journal of Current Engineering and Technology, 4 (5), pp. 3528-3531; Singh, S., Gadgil, R., Chudgor, A., Automated testing of mobile applications using scripting technique: a study on appium (2014) International Journal of Current Engineering and Technology (IJCET), 4 (5), pp. 3627-3630; Stol, K.J., Ralph, P., Fitzgerald, B., Grounded theory in software engineering research: A critical review and guidelines (2016) 2016 IEEE/ACM 38Th International Conference on Software Engineering (ICSE), pp. 120-131. , IEEE; Strauss, A., Corbin, J., (1998) Basics of Qualitative Research. Techniques and Procedures for Developing Grounded Theory, , Thousand Oaks, CA, Sage; Tan, M., Cheng, P., Research and implementation of automated testing framework based on android (2016) Inf Technol, 5, p. 035; Tang, X., Wang, S., Mao, K., Will this bug-fixing change break regression testing? (2015) 2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), pp. 1-10. , IEEE; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , Springer; Yusifoğlu, V.G., Amannejad, Y., Can, A.B., Software test-code engineering: a systematic mapping (2015) Inf Softw Technol, 58, pp. 123-147; Zadgaonkar, H., (2013) Robotium automated testing for android, , Packt Publishing Ltd, Birmingham; Zhauniarovich, Y., Philippov, A., Gadyatskaya, O., Crispo, B., Massacci, F., Towards black box testing of android apps (2015) 2015 10Th International Conference on Availability, Reliability and Security (ARES). IEEE, pp. 501-510","Coppola, R.; Department of Computer and Automation Engineering, Corso Duca degli Abruzzi, 24, Italy; email: riccardo.coppola@polito.it",,,"Springer New York LLC",,,,,13823256,,ESENF,,"English","Empir Software Eng",Article,"Article in Press","",Scopus,2-s2.0-85066101585
"Nguyen H.P., Le H.A., Truong N.T.","57209589665;55613720900;12753859100;","jFAT: An automation framework for web application testing",2019,"Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST","266",,,"48","57",,,"10.1007/978-3-030-06152-4_5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059686934&doi=10.1007%2f978-3-030-06152-4_5&partnerID=40&md5=6326cf6d30c0e277a4414b264bf7c1e5","VNU - University of Engineering and Technology, 144 Xuan Thuy, Cau Giay, Ha Noi, Viet Nam; VMU - Vietnam Maritime University, 484 Lach Tray, Le Chan, Hai Phong, Viet Nam; Hanoi University of Mining and Geology, 18 Pho Vien, Bac Tu Liem, Hanoi, Viet Nam","Nguyen, H.P., VNU - University of Engineering and Technology, 144 Xuan Thuy, Cau Giay, Ha Noi, Viet Nam, VMU - Vietnam Maritime University, 484 Lach Tray, Le Chan, Hai Phong, Viet Nam; Le, H.A., Hanoi University of Mining and Geology, 18 Pho Vien, Bac Tu Liem, Hanoi, Viet Nam; Truong, N.T., VNU - University of Engineering and Technology, 144 Xuan Thuy, Cau Giay, Ha Noi, Viet Nam","Web technologies have developed rapidly because web application is currently leading the trends of software development. A web-based application is a program that is accessed over a network connection, rather than existing within a device’s memory, hence detecting its failures is different from other software systems. Many approaches and tools have been proposed for web testing, however, introducing new frameworks is still an emerging topic in this field. This paper proposes an automation framework running in Java platform for web testing, called jFAT, which integrates with Selenium and TestNG. The paper also illustrates the use of framework with the Bank application case study. © ICST Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2019.","Automation testing; POM; Web applications","Automation; Software design; User interfaces; Automation testing; Emerging topics; Network connection; Software systems; WEB application; Web application testing; Web technologies; Web-based applications; Application programs",,,,,"QG.16.32","Acknowledgments. This work has been supported by VNU University of Engineering and Technology under Project QG.16.32.",,"https://www.guru99.com; https://www.seleniumhq.org; https://www.tutorialspoint.com/qtp/; https://www.automation-consultants.com/products/ibm-products/rational-functional-tester/; https://www.microfocus.com/products/silk-portfolio/silk-tes; Fei, W., Wencai, D., A test automation framework based on web (2012) IEEE/ACIS 11Th International Conference on Computer and Information Science, ICIS, , IEEE; Hower, R., (2006) Software QA and Testing Resource Center, , www.softwareqatest.com; Huang, C.-H., Chen, H.Y., A tool to support automated testing for web application scenario (2006) IEEE International Conference on Systems, Man and Cybernetics, SMC 2006, 3, pp. 2179-2184. , IEEE; Lucca, G.A.D., Fasolino, A.R., Faralli, F., Carlini, U.D., Testing web applications (2002) International Conference on Software Maintenance, Proceedings, pp. 310-319; Romano, B.L., Software testing for web-applications non-functional requirements (2009) 2009 Sixth International Conference on Information Technology: New Generations, pp. 1674-1675. , IEEE; Suresh, T., Saurabh, S., Nimit, S., Satish, C., Automating test automation (2012) 34Th International Conference on Software Engineering (ICSE), ICSE, IEEE","Nguyen, H.P.; VMU - Vietnam Maritime University, 484 Lach Tray, Le Chan, Viet Nam; email: phucnh@vimaru.edu.vn","Cong Vinh P.Alagar V.",,"Springer Verlag","7th EAI International Conference on Context-Aware Systems and Applications, ICCASA 2018 and 4th EAI International Conference on Nature of Computation and Communication, ICTCC 2018","22 November 2018 through 23 November 2018",,222519,18678211,9783030061517,,,"English","Lect. Notes Inst. Comput. Sci. Soc. Informatics Telecommun. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85059686934
"Chen T., Song T., He S., Liang A.","57219017892;55240606800;57194451520;25227625600;","A GUI-based automated test system for android applications",2019,"Advances in Intelligent Systems and Computing","760",,,"517","524",,,"10.1007/978-981-13-0344-9_44","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052912035&doi=10.1007%2f978-981-13-0344-9_44&partnerID=40&md5=50e6534ef7f1a9af5b6b31eb5bd180e5","School of Software, Shanghai Jiao Tong University, Shanghai, China","Chen, T., School of Software, Shanghai Jiao Tong University, Shanghai, China; Song, T., School of Software, Shanghai Jiao Tong University, Shanghai, China; He, S., School of Software, Shanghai Jiao Tong University, Shanghai, China; Liang, A., School of Software, Shanghai Jiao Tong University, Shanghai, China","Android application testing has always been a serious problem for mobile developers. To support developers, this paper presents GATS, a GUI-based automated test system for Android apps. This tool uses finite-state machine to learn a model of the app during testing, then uses the learned model to generate user inputs or system event to visit the rest states of the app, and then uses the result of the input to refine the model. The goal of the tool is to trigger crashes. When a crash is happened, GATS will generate a crash report containing screenshot, logcat info with stack trace crash, reproduction steps, and so on. We evaluate GATS on ten Android applications from the top list of several app markets with Monkey, a fuzzing tool from Android platform, and Dynodroid, a previous research. Our result shows that our system has less running time and more bugs found. © Springer Nature Singapore Pte Ltd. 2019.","Android testing; Finite-state machine; GUI testing; Test automation","Automation; Finite automata; Graphical user interfaces; Program debugging; Android applications; Android apps; Android platforms; Automated test systems; GUI testing; Running time; Test Automation; User input; Android (operating system)",,,,,,,,"Google Play Wiki, , https://en.wikipedia.org/wiki/Google_Play; Monkeyrunner, , http://developer.android.com/tools/help/monkeyrunner_concepts.html; Hierarchy Viewer, , http://developer.android.com/tools/help/hierarchy-viewer.html; Robotium, , http://code.google.com/p/robotium/; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9Thjoint Meeting on Foundations of Software Engineering, Ser. ESEC/FSE2013, pp. 224-234. , New York, NY, USA, ACM; Sasnauskas, R., Regehr, J., Intent Fuzzer: Crafting intents of death (2014) Proceedings of the 2014 Joint International Workshop on Dynamic Analysis (WODA) and Software and System Performancetesting, Debugging, and Analytics (PERTEA), Ser. WODA + PERTEA2014, pp. 1-5. , New York, NY, USA, ACM; Amalfitano, D., Fasolino, A.R., Tramontana, P., de Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27Th IEEE/ACM Internationalconference on Automated Software Engineering, Ser. ASE 2012, pp. 258-261. , New York, NY, USA, ACM; Choi, W., Necula, G., Sen, K., Guided GUI testing of android appswith minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Orientedprogramming Systems Languages & Applications, Ser. OOPSLA’13, pp. 623-640. , ACM, New York, NY, USA; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobileapps (2014) Proceedings of the 12Th Annual International Conference on Mobile Systems, Applications, and Services, Ser. Mobisys ’14, pp. 204-217. , ACM, New York, NY, USA; Android Monkey, , http://developer.android.com/guide/developing/tools/monkey.html","Chen, T.; School of Software, China; email: jordan13game@sjtu.edu.cn","Bhatia S.K.Trivedi M.C.Tiwari S.Mishra K.K.",,"Springer Verlag","2nd International Conference on Computer, Communication and Computational Sciences, IC4S 2017","11 October 2017 through 12 October 2017",,217109,21945357,9789811303432,,,"English","Adv. Intell. Sys. Comput.",Conference Paper,"Final","",Scopus,2-s2.0-85052912035
"Amalfitano D., Riccio V., Amatucci N., Simone V.D., Fasolino A.R.","25926238800;57214054052;55843621200;24353584400;7006159957;","Combining Automated GUI Exploration of Android apps with Capture and Replay through Machine Learning",2019,"Information and Software Technology","105",,,"95","116",,9,"10.1016/j.infsof.2018.08.007","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052757430&doi=10.1016%2fj.infsof.2018.08.007&partnerID=40&md5=34979a02786b8166299bc7cc1d229df8","Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, 80125, Italy","Amalfitano, D., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, 80125, Italy; Riccio, V., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, 80125, Italy; Amatucci, N., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, 80125, Italy; Simone, V.D., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, 80125, Italy; Fasolino, A.R., Department of Electrical Engineering and Information Technologies, University of Naples Federico II, Via Claudio 21, Naples, 80125, Italy","Context: Automated GUI Exploration Techniques have been widely adopted in the context of mobile apps for supporting critical engineering tasks such as reverse engineering, testing, and network traffic signature generation. Although several techniques have been proposed in the literature, most of them fail to guarantee the exploration of relevant parts of the applications when GUIs require to be exercised with particular and complex input event sequences. We refer to these GUIs as Gate GUIs and to the sequences required to effectively exercise them as Unlocking GUI Input Event Sequences. Objective: In this paper, we aim at proposing a GUI exploration approach that exploits the human involvement in the automated process to solve the limitations introduced by Gate GUIs, without requiring the preliminary configuration of the technique or the user involvement for the entire duration of the exploration process. Method: We propose juGULAR, a Hybrid GUI Exploration Technique combining Automated GUI Exploration with Capture and Replay. Our approach is able to automatically detect Gate GUIs during the app exploration by exploiting a Machine Learning approach and to unlock them by leveraging input event sequences provided by the user. We implement juGULAR in a modular software architecture that targets the Android mobile platform. We evaluate the performance of juGULAR by an experiment involving 14 real Android apps. Results: The experiment shows that the hybridization introduced by juGULAR allows to improve the exploration capabilities in terms of Covered Activities, Covered Lines of Code, and generated Network Traffic Bytes at a reasonable manual intervention cost. The experimental results also prove that juGULAR is able to outperform the state-of-the-practice tool Monkey. Conclusion: We conclude that the combination of Automated GUI Exploration approaches with Capture and Replay techniques is promising to achieve a thorough app exploration. Machine Learning approaches aid to pragmatically integrate these two techniques. © 2018","Android; Automated GUI Exploration; Automated input generation; Capture and Replay; Dynamic analysis; Machine Learning","Artificial intelligence; Automation; Dynamic analysis; E-learning; Graphical user interfaces; Learning systems; Real time systems; Reverse engineering; Android; Automated input generation; Capture and Replay; Exploration techniques; Machine learning approaches; Modular software architectures; Signature generation; State of the practice; Android (operating system)",,,,,,,,"Muccini, H., Francesco, A.D., Esposito, P., Software testing of mobile applications: challenges and future research directions (2012) Automation of Software Test (AST), 2012 7th International Workshop on, pp. 29-35. , http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6228987, IEEE Zurich, Switzerland; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (E) (2015) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), ASE ’15, pp. 429-440. , https://doi.org/10.1109/ASE.2015.89, IEEE Computer Society Washington, DC, USA; Memon, A., Banerjee, I., Nguyen, B.N., Robbins, B., The first decade of GUI ripping:extensions, applications, and broader impacts (2013) 2013 20th Working Conference on Reverse Engineering (WCRE), pp. 11-20; Chen, Y., You, W., Lee, Y., Chen, K., Wang, X., Zou, W., Mass discovery of android traffic imprints through instantiated partial execution (2017) Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS ’17, pp. 815-828. , http://doi.acm.org/10.1145/3133956.3134009, ACM New York, NY, USA; Su, X., Zhang, D., Li, W., Wang, X., AndroGenerator: an automated and configurable android app network traffic generation system (2015) Secur. Commun. Netw., 8 (18), pp. 4273-4288. , https://doi.org/10.1002/sec.1341, sec.1341; Karami, M., Elsabagh, M., Najafiborazjani, P., Stavrou, A., Behavioral analysis of android applications using automated instrumentation (2013) 2013 IEEE Seventh International Conference on Software Security and Reliability Companion, pp. 182-187; Dutia, S.N., Oh, T.H., Oh, Y.H., Developing automated input generator for android mobile device to evaluate malware behavior (2015) Proceedings of the 4th Annual ACM Conference on Research in Information Technology, RIIT ’15, p. 43. , http://doi.acm.org/10.1145/2808062.2808065, ACM New York, NY, USA; Eler, M.M., Rojas, J.M., Ge, Y., Fraser, G., Automated accessibility testing of mobile apps (2018) 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST), Vol. 00, pp. 116-126. , doi.ieeecomputersociety.org/10.1109/ICST.2018.00021; Banerjee, A., Chong, L.K., Chattopadhyay, S., Roychoudhury, A., Detecting energy bugs and hotspots in mobile apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pp. 588-598. , http://doi.acm.org/10.1145/2635868.2635871, ACM New York, NY, USA; Deng, X., Kameda, T., Papadimitriou, C., How to learn an unknown environment. I: the rectilinear case (1998) J. ACM, 45 (2), pp. 215-245. , http://doi.acm.org/10.1145/274787.274788; Fraigniaud, P., Ilcinkas, D., Peer, G., Pelc, A., Peleg, D., Graph exploration by a finite automaton (2005) Theor. Comput. Sci., 345 (2), pp. 331-344. , http://www.sciencedirect.com/science/article/pii/S0304397505003993, Mathematical Foundations of Computer Science 2004; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., Fasolino, A.R., A general framework for comparing automatic testing techniques of android mobile apps (2017) J. Syst. Softw., 125, pp. 322-343. , https://doi.org/10.1016/j.jss.2016.12.017; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: an input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 224-234. , http://doi.acm.org/10.1145/2491411.2491450, ACM New York, NY, USA; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 258-261. , http://doi.acm.org/10.1145/2351676.2351717, ACM New York, NY, USA; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: are we really there yet in an industrial case? (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pp. 987-992. , http://doi.acm.org/10.1145/2950290.2983958, ACM New York, NY, USA; Ermuth, M., Pradel, M., Monkey see, monkey do: effective generation of GUItests with inferred macro events (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 82-93. , http://doi.acm.org/10.1145/2931037.2931053, ACM New York, NY, USA; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 33-44; Mao, K., Harman, M., Jia, Y., Sapienz: multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 94-105. , http://doi.acm.org/10.1145/2931037.2931054, ACM New York, NY, USA; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA ’13, pp. 623-640. , http://doi.acm.org/10.1145/2509136.2509552, ACM New York, NY, USA; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., PUMA: programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, MobiSys ’14, pp. 204-217. , http://doi.acm.org/10.1145/2594368.2594390, ACM New York, NY, USA; Hu, G., Yuan, X., Tang, Y., Yang, J., Efficiently, effectively detecting mobile app bugs with appdoctor (2014) Proceedings of the Ninth European Conference on Computer Systems, EuroSys ’14, pp. 181-18:15. , http://doi.acm.org/10.1145/2592798.2592813, ACM New York, NY, USA; Dai, S., Tongaonkar, A., Wang, X., Nucci, A., Song, D., NetworkProfiler: towards automatic fingerprinting of android apps (2013) 2013 Proceedings IEEE INFOCOM, pp. 809-817; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: timing- and touch-sensitive record and replay for android (2013) Proceedings of the 2013 International Conference on Software Engineering, ICSE ’13, pp. 72-81. , http://dl.acm.org/citation.cfm?id=2486788.2486799, IEEE Press Piscataway, NJ, USA; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pp. 599-609. , http://doi.acm.org/10.1145/2635868.2635896, ACM New York, NY, USA; Liu, P., Zhang, X., Pistoia, M., Zheng, Y., Marques, M., Zeng, L., Automatic text input generation for mobile testing (2017) 2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE), pp. 643-653; Utting, M., Pretschner, A., Legeard, B., A taxonomy of model-based testing approaches (2012) Softw. Test. Verif. Reliab., 22 (5), pp. 297-312. , https://doi.org/10.1002/stvr.456; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) SIGPLAN Not., 48 (10), pp. 641-660. , http://doi.acm.org/10.1145/2544173.2509549; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: automated model-based testing of mobile apps (2015) IEEE Softw., 32 (5), pp. 53-59; Amalfitano, D., Riccio, V., Paiva, A.C.R., Fasolino, A.R., Why does the orientation change mess up my android application? From GUI failures to code faults (2017) Softw. Test. Verif. Reliab., , e1654n/aE1654 stvr.1654; Seng, K., Ang, L.M., Ooi, C., A combined rule-based and machine learning audio-visual emotion recognition approach (2016) IEEE Trans. Affect Comput., PP (99), p. 1; Di Lucca, G.A., Fasolino, A.R., Tramontana, P., Web pages classification using concept analysis (2007) 2007 IEEE International Conference on Software Maintenance, pp. 385-394; Manning, C.D., Raghavan, P., Schütze, H., Introduction to Information Retrieval (2008), Cambridge University Press New York, NY, USA; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: an innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105. , https://doi.org/10.1007/s10515-013-0128-9; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: systematic mapping and repository (2013) Inf. Softw. Technol., 55 (10), pp. 1679-1694. , http://www.sciencedirect.com/science/article/pii/S0950584913000669; Panichella, S., Sorbo, A.D., Guzman, E., Visaggio, C.A., Canfora, G., Gall, H.C., ARdoc: app reviews development oriented classifier (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pp. 1023-1027. , http://doi.acm.org/10.1145/2950290.2983938, ACM New York, NY, USA; Galar, M., Fernandez, A., Barrenechea, E., Bustince, H., Herrera, F., An overview of ensemble methods for binary classifiers in multi-class problems: experimental study on one-vs-one and one-vs-all schemes (2011) Pattern Recognit., 44 (8), pp. 1761-1776. , http://www.sciencedirect.com/science/article/pii/S0031320311000458; Garcia-Pedrajas, N., Ortiz-Boyer, D., An empirical study of binary classifier fusion methods for multiclass classification (2011) Inf. Fusion, 12 (2), pp. 111-130. , http://www.sciencedirect.com/science/article/pii/S1566253510000734; Han, J., Kamber, M., Pei, J., Data mining (2011) Concepts and Techniques, , 3rd Ed. Morgan Kaufmann Publishers Inc. San Francisco, CA, USA; Belli, F., Beyazit, M., Memon, A., Testing is an event-centric activity (2012) Software Security and Reliability Companion (SERE-C), 2012 IEEE Sixth International Conference on, pp. 198-206; Adamo, D., Nurmuradov, D., Piparia, S., Bryce, R., Combinatorial-based event sequence testing of android applications (2018) Inf. Softw. Technol., 99, pp. 98-117. , http://www.sciencedirect.com/science/article/pii/S0950584918300429; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: timing- and touch-sensitive record and replay for android (2013) 2013 35th International Conference on Software Engineering (ICSE), pp. 72-81; Mao, K., Harman, M., Jia, Y., Crowd intelligence enhances automated mobile testing (2017) Proceedings of the 2017 32th IEEE/ACM International Conference on Automated Software Engineering (ASE), IEEE, pp. 16-26; Linares-Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable GUI-based execution scenarios (2015) 2015 IEEE/ACM 12th Working Conference on Mining Software Repositories, pp. 111-122; Taylor, V.F., Spolaor, R., Conti, M., Martinovic, I., AppScanner: automatic fingerprinting of smartphone apps from encrypted network traffic (2016) 2016 IEEE European Symposium on Security and Privacy (EuroS P), pp. 439-454; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Experimentation in Software Engineering (2012), https://doi.org/10.1007/978-3-642-29044-2, Springer","Fasolino, A.R.; Department of Electrical Engineering and Information Technologies, Via Claudio 21, Italy; email: annarita.fasolino@unina.it",,,"Elsevier B.V.",,,,,09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-85052757430
"Inoue U.","57213687759;","GUI testing for introductory object-oriented programming exercises",2019,"Studies in Computational Intelligence","787",,,"1","13",,1,"10.1007/978-3-319-96806-3_1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051804410&doi=10.1007%2f978-3-319-96806-3_1&partnerID=40&md5=65c96e3b8a44a7a2533f121d681833f9","Department of Communication and Information Engineering, Tokyo Denki University, Tokyo, Japan","Inoue, U., Department of Communication and Information Engineering, Tokyo Denki University, Tokyo, Japan","Automated testing is necessary in large classrooms where many students learn a programming language. This paper presents a method to test and score student programs with graphical user interfaces written in JavaFX. The method is based on scripts that analyzes the structure of programs under test and simulates user’s interactions. We implemented several utility methods to write the testing scripts easy. No additional software library is required to run the scripts. Preliminary evaluation results are shown on the developing and executing of scripts for real exercises in our introductory programming classrooms. © Springer International Publishing AG, part of Springer Nature 2019.","Automated scoring; GUI testing; Java application; JavaFX; Programming education",,,,,,,,,"Ruiz, A., Price, Y.W., Test-driven GUI development with TestNG and Abbot (2007) IEEE Softw, 24 (3), pp. 51-57; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software. Autom. Softw (2014) Eng. (Springer), 21 (1), pp. 65-105; Mlynarski, M., Güldali, B., Weißleder, S., Engels, G., Model-based testing: Achievements and future challenges (2012) Adv. Comput. (Elsevier), 86 (1-39); Adamoli, A., Zaparanuks, D., Jovic, M., Automated GUI performance testing (2011) Softw. Qual. J. (Springer), 19 (4), pp. 801-839; Schildt, H., (2015) Introducing Javafx 8 Programming, , McGraw-Hill; Ihantola, P., Ahoniemi, T., Karavirta, V., Seppälä, O., Review of recent systems for automatic assessment of programming assignments (2010) Proceedings of the 10Th Koli Calling International Conference on Computing Education Research, pp. 86-93; Gray, G.R., Higgins, C.A., An introspective approach to marking graphical user interfaces (2006) ACM SIGCSE Bull, 38 (3), pp. 43-47; Thornton, M., Edwards, S.H., Tan, R.P., Pérez-Quiñones, M., Supporting student-written tests of GUI programs (2008) ACM SIGCSE Bull, 40 (1), pp. 537-541; Ahmadzadeh, M., Janghorban, M., Jamasb, B., JavaMarker extended: An Eclipse plugin to mark Java GUI programs (2011) Int. J. Comput. Appl., 29 (10), pp. 47-51; Snyder, J., Edwards, S.H., Pérez-Quiñones, M.A., LIFT: Taking GUI unit testing to new heights (2011) Proceedings of the 42Nd ACM Technical Symposium on Computer Science Education, pp. 643-648; Kruk, G., Alves, O., Molinari, L., Roux, E., Best practices for efficient development of JavaFX applications (2017) Proceedings of the 16Th International Conference on Accelerator and Large Experimental Control Systems, pp. 1078-1083; Klammer, C., Ramler, R., Stummer, H., Harnessing automated test case generators for GUI testing in industry (2016) Proceedings of the 42Th Euromicro Conference on Software Engineering and Advanced Applications, pp. 227-234; Akahane, Y., Kitaya, H., Inoue, U., Design and evaluation of automated scoring Java programming assignments (2015) Proceedings of the 16Th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, pp. 1-6","Inoue, U.; Department of Communication and Information Engineering, Japan; email: inoueu@mail.dendai.ac.jp","Lee R.","","Springer Verlag","5th ACIS International Conference on Computational Science/Intelligence and Applied Informatics, CSII 2018","10 July 2018 through 12 July 2018",,216779,1860949X,9783319968056,,,"English","Stud. Comput. Intell.",Conference Paper,"Final","",Scopus,2-s2.0-85051804410
"Ha L., Kang S., Lee J., Han Y.","57203457289;23389562900;57215648896;55489206600;","Automatic generation of GUI test inputs using user configurations",2019,"Studies in Computational Intelligence","786",,,"103","116",,1,"10.1007/978-3-319-96803-2_9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051757675&doi=10.1007%2f978-3-319-96803-2_9&partnerID=40&md5=1fc942e16255cb597535862b6e4418ac","Korea Advanced Institute of Science and Technology, Daejeon, South Korea; Chonbuk National University, Jeonju, South Korea","Ha, L., Korea Advanced Institute of Science and Technology, Daejeon, South Korea; Kang, S., Korea Advanced Institute of Science and Technology, Daejeon, South Korea; Lee, J., Chonbuk National University, Jeonju, South Korea; Han, Y., Korea Advanced Institute of Science and Technology, Daejeon, South Korea","GUI testing validates the functionality of a software-intensive system by exercising its GUI. Although much research on automatic generation of GUI test inputs has been conducted to reduce the cost of GUI testing, the current GUI test input generation techniques can miss testing the behavior of the system which is dependent on the user configuration, which may leave undetected the defects that appear only under a certain user configuration. In order to completely test the behavior of a system for all possible user configurations, this paper proposes a method that automatically generate GUI test inputs under all possible user configurations. Since testing all possible user configurations is infeasible for nontrivial systems, the method is designed such that the user can sample user configurations. Thus, the proposed method generates GUI test inputs for the behavior of the system dependent on user configurations in addition to the test inputs generated by the existing technique that does not consider user configurations. We implement our method as an automated tool for the Android framework and evaluate it with on five open-source Android apps. The evaluation results show that our method can indeed achieve additional code coverage while preserving code coverage achieved by the existing technique. © Springer International Publishing AG, part of Springer Nature 2019.","GUI testing; Software configuration; Test input generation",,,,,,"IITP-2018-2013-0-00717

Ministry of Education, MOE: 2017R1D1A3B03028609

National Research Foundation of Korea, NRF

Ministry of Science ICT and Future Planning, MSIP

Institute for Information and Communications Technology Promotion, IITP","Acknowledgements This research was supported by the MSIT (Ministry of Science and ICT), Korea, under the ITRC (Information Technology Research Center) support program (IITP-2018-2013-0-00717) supervised by the IITP (Institute for Information and communications Technology Promotion) and by Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education (2017R1D1A3B03028609).","This research was supported by the MSIT (Ministry of Science and ICT), Korea, under the ITRC (Information Technology Research Center) support program (IITP-2018- 2013-0-00717) supervised by the IITP (Institute for Information and communications Technology Promotion) and by Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education (2017R1D1A3B03028609).","Ammann, P., Offutt, J., (2008) Introduction to Software Testing, , 1st edn. Cambridge University Press; Myers, B.A., Rosson, M.B., Survey on user interface programming (1992) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 195-202. , ACM; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) ACM SIG-SOFT Software Engineering Notes, 26 (5), pp. 256-267; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) ACM SIG-SOFT Software Engineering Notes, 6, pp. 30-39. , ACM; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Inf. Softw. Technol., 55 (10), pp. 1679-1694; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for Android: Are we really there yet in an industrial case? Proceedings of the 2016 24Th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 987-992; Baek, Y.-M., Bae, D.-H., Automated model-based Android GUI testing using multi-level GUI comparison criteria (2016) 2016 31St IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 238-249. , IEEE; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of Android apps (2017) Proceedings of the 2017 11Th Joint Meeting on Foundations of Software Engineering, pp. 245-256. , ACM; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25Th International Symposium on Software Testing and Analysis, pp. 94-105. , ACM; Memon, A., Porter, A., Yilmaz, C., Nagarajan, A., Schmidt, D., Natarajan, B., Skoll: Distributed continuous quality assurance (2004) Proceedings 26Th International Conference on Software Engineering, pp. 459-468. , ICSE 2004, IEEE; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE, 260p; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 2015 IEEE 8Th International Conference on Software Testing, Verification and Validation (ICST), 2015, pp. 1-10; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet?(E) (2015) 2015 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , IEEE; Moran, K., Linares-Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) ICST 2016; Qu, X., Cohen, M.B., Rothermel, G., Configuration-aware regression testing: An empirical study of sampling and prioritization (2008) Proceedings of the 2008 International Symposium on Software Testing and Analysis, pp. 75-86. , ACM; Song, C., Porter, A., Foster, J.S., ITree: Efficiently discovering high-coverage configurations using interaction trees (2014) IEEE Trans. Softw. Eng., 40 (3), pp. 251-265; Qu, X., Acharya, M., Robinson, B., Impact analysis of configuration changes for test case selection (2011) 2011 IEEE 22Nd International Symposium on Software Reliability Engineering (ISSRE), pp. 140-149. , IEEE; Jin, D., Qu, X., Cohen, M.B., Robinson, B., Configurations everywhere: Implications for testing and debugging in practice (2014) Companion Proceedings of the 36Th International Conference on Software Engineering, pp. 215-224. , ACM; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based GUI testing techniques: An empirical study (2014) J. Syst. Softw., 97, pp. 15-46; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. Softw. Eng., 37 (4), pp. 559-574; Rabkin, A., Katz, R., Static extraction of program configuration options (2011) Proceedings of the 33Rd International Conference on Software Engineering, pp. 131-140. , ACM; Cohen, M.B., Snyder, J., Rothermel, G., Testing across configurations: Implications for combinatorial testing (2006) ACM SIGSOFT Software Engineering Notes, 31 (6), pp. 1-9; Reisner, E., Song, C., Ma, K.-K., Foster, J.S., Porter, A., Using symbolic evaluation to understand behavior in configurable software systems (2010) Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering, 1, pp. 445-454. , ACM; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (T) (2015) 2015 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 658-668. , IEEE; Amalfitano, D., Fasolino, A.R., Tramontana, P., de Carmine, S., Imparato, G., A toolset for GUI testing of Android applications (2012) 2012 28Th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653. , IEEE; A Free Java Code Coverage Tool, , http://emma.sourceforge.net; http://web.cse.ohio-state.edu/presto/software/gator/; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105","Ha, L.; Korea Advanced Institute of Science and TechnologySouth Korea; email: betown@kaist.ac.kr",,,"Springer Verlag",,,,,1860949X,,,,"English","Stud. Comput. Intell.",Book Chapter,"Final","",Scopus,2-s2.0-85051757675
"Vajak D., Grbic R., Vranjes M., Stefanovic D.","57195352305;26666721100;24470141900;55132951800;","Environment for Automated Functional Testing of Mobile Applications",2018,"Proceedings of International Conference on Smart Systems and Technologies 2018, SST 2018",,, 8564626,"125","130",,,"10.1109/SST.2018.8564626","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060480155&doi=10.1109%2fSST.2018.8564626&partnerID=40&md5=046c1606832d78f00b93c44690d98174","Faculty of Electrical Engineering, Computer Science and Information Technology, Osijek, Croatia; RT-RK Institute for Computer Based Systems, Novi Sad, Serbia","Vajak, D., Faculty of Electrical Engineering, Computer Science and Information Technology, Osijek, Croatia; Grbic, R., Faculty of Electrical Engineering, Computer Science and Information Technology, Osijek, Croatia; Vranjes, M., Faculty of Electrical Engineering, Computer Science and Information Technology, Osijek, Croatia; Stefanovic, D., RT-RK Institute for Computer Based Systems, Novi Sad, Serbia","In today's world, software applications are written and released in large amounts. To ensure proper functionality, all these applications need to be tested for bugs and problems, which traditionally requires manpower. In the field of mobile application testing, various automated solutions already exist, but they don't offer a unified way of testing on different systems, and test scrips are often complex. This paper proposes a testing environment based on open source tools as a solution to these problems. The environment allows functional testing of both iOS and Android applications which have a graphical user interface, while making use of custom written libraries to simplify the workflow and reduce the required amount of written code. © 2018 IEEE.","Android; Appium; automated functional testing; iOS; mobile applications","Android (operating system); Application programs; Automation; Graphical user interfaces; iOS (operating system); Mobile computing; Open source software; Android; Android applications; Appium; Automated functional testing; Mobile application testing; Mobile applications; Software applications; Testing environment; Program debugging",,,,,,,,"https://medium.com/intuz/top-10-automated-testing-tools-for-mobileapps-8d9380e1757f, Top 10 Automated Testing Tools for Mobile Apps Accessed: 22-Mar-2018]; http://calaba.sh, [Accessed: 22-Mar-2018]; http://appium.io, [Accessed: 22-Mar-2018]; http://www.seleniumhq.org, [Accessed: 22-Mar-2018]; https://github.com/appium/appium-desktop, [Accessed: 22-Mar-2018]; http://testingwithfrank.github.io, [Accessed: 22-Mar-2018]; https://github.com/robotiumtech/robotium, [Accessed: 22-Mar-2018]; https://github.com/appium/pythonclient, Appium Python Client Accessed: 22-Mar-2018]; https://developer.apple.com/support/certificates, Apple Certificates [Accessed: 22-Mar-2018]; https://developer.apple.com/xcode, [Accessed: 22-Mar-2018]; https://developer.android.com/studio/index.html, [Accessed: 22-Mar-2018]; https://brew.sh, Homebrew [Accessed: 22-Mar-2018]; https://www.python.org/downloads/windows, [Accessed: 22-Mar-2018]; http://offcornerdev.com/bundleid.html, [Accessed: 22-Mar-2018]; https://www.deezer.com/en, [Accessed: 22-Mar-2018]; https://www.dropbox.com, [Accessed: 22-Mar-2018]; https://www.qt.io, [Accessed: 20-Aug-2018]",,"Galic I.Drlje S.R.Zagar D.Martinovic G.",,"Institute of Electrical and Electronics Engineers Inc.","3rd International Conference on Smart Systems and Technologies, SST 2018","10 October 2018 through 12 October 2018",,143493,,9781538671894,,,"English","Proc. Int. Conf. Smart Syst. Technol,, SST",Conference Paper,"Final","",Scopus,2-s2.0-85060480155
"Morgado I.C., Paiva A.C.R.","55321167400;7102683763;","Mobile GUI testing",2018,"Software Quality Journal","26","4",,"1553","1570",,6,"10.1007/s11219-017-9387-1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028757031&doi=10.1007%2fs11219-017-9387-1&partnerID=40&md5=20268593dd149411daf871abf9995d63","Faculdade de Engenharia da Universidade do Porto; INESC TEC, Porto, Portugal","Morgado, I.C., Faculdade de Engenharia da Universidade do Porto; INESC TEC, Porto, Portugal; Paiva, A.C.R., Faculdade de Engenharia da Universidade do Porto; INESC TEC, Porto, Portugal","This paper presents a tool (iMPAcT) that automates testing of mobile applications based on the presence of recurring behaviour, UI Patterns. It combines reverse engineering, pattern matching and testing. The reverse engineering process is responsible for crawling the application, i.e. analysing the state of the application and interacting with it by firing events. The pattern matching tries to identify the presence of UI patterns based on a catalogue of patterns. When a UI Pattern from the catalogue is detected, a test strategy is applied (testing). These test strategies are called UI Test Patterns. These three phases work in an iterative way: the patterns are identified and tested between firing of events, i.e. the process alternates between exploring the application and testing the UI Patterns. The process is dynamic and fully automatic not requiring any previous knowledge about the application under test. This paper presents the results of an experiment studying the reliability of the results obtained by iMPAcT. The experiment involved 25 applications found on Google Play Store and concludes that iMPAcT is successful in identifying failures in the tested patterns and that the degree of certainty of an identified failure being an actual failure is high. © 2017, Springer Science+Business Media, LLC.","Android; Case study; Mobile testing; Reverse engineering; UI patterns","Pattern matching; Reverse engineering; Android; Application under tests; Degree of certainty; Mobile applications; Mobile testing; Reverse engineering process; Test strategies; Ui patterns; Safety engineering",,,,,,,,"Alexander, C.W., Ishikawa, S., Silverstein, M., Jacobson, M., (1977) A Pattern Language: Towns, Buildings, Construction (Center for Environmental Structure), , 1st edn., Oxford University Press, Oxford; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B., Memon, A., MobiGUITAR: Automated Model-Based Testing of Mobile Apps (2015) IEEE Software, 32 (5), pp. 53-59. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6786194; Android, G., (2015) Android Navigation Drawer, , http://goo.gl/nnJOoj; Android, G., (2015) Up and Running with Material Design; Avancini, A., Ceccato, M., Security testing of the communication among android applications (2013) In Automation of Software Test (AST), 2013 8Th International Workshop On, IEEE Press, pp. 57-63. , https://doi.org/10.1109/IWAST.2013.6595792, San Francisco, California; Batyuk, L., Herpich, M., Camtepe, S.A., Raddatz, K., Schmidt, A.D., Albayrak, S., Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications (2011) In Malicious and Unwanted Software (MALWARE), 2011 6Th International Conference On, IEEE, pp. 66-72. , https://doi.org/10.1109/MALWARE.2011.6112328, Fajardo, Puerto Rico; Coimbra Morgado, I., Paiva, A.C.R., Test patterns for android mobile applications (2015) In 20Th European Conference on Pattern Languages of Programs (Europlop 2015), , http://dl.acm.org/citation.cfm?id=2855354, Irsee, Germany; Coimbra Morgado, I., Paiva, A.C.R., Testing approach for mobile applications through reverse engineering of UI patterns (2015) Sixth International Workshop on Testing Techniques for Event Based Software; Coimbra Morgado, I., Paiva, A.C.R., The iMPAcT Tool: Testing UI patterns on mobile applications (2015) 30Th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015), , http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=7372083, Lincoln, NE, USA; Coimbra Morgado, I., Paiva, A.C.R., Impact of execution modes on finding android failures (2016) Procedia Computer Science, 83, pp. 284-291. , http://www.sciencedirect.com/science/article/pii/S1877050916301508; Dar, M.A., Parvez, J., Enhancing security of android & IOS by implementing need-based security (NBS) (2014) 2014 International Conference on Control, Instrumentation, Communication and Computational Technologies (ICCICCT), IEEE, Kanyakumari, India, pp. 728-733. , https://doi.org/10.1109/ICCICCT.2014.6993055; Fowler, M., (1997) Analysis Patterns - Reusable Object Models, , Addison-Wesley, Boston; Franke, D., Kowalewski, S., Weise, C., Prakobkosol, N., Testing conformance of life cycle dependent properties of mobile applications (2012) In 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, IEEE, pp. 241-250. , http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=6200126, Montreal, QC, Canada, https://doi.org/10.1109/ICST.2012.104; Gorla, A., Tavecchia, I., Gross, F., Zeller, A., Checking app behavior against app descriptions (2014) In Proceedings of the 36Th International Conference on Software Engineering (ICSE 2014), pp. 1025-1035. , ACM Press, Hyderabad, India; Ingraham, N., (2013) Apple Announces 1 Million Apps in the App Store, More than 1 Billion Songs Played on Itunes Radio, , https://goo.gl/MYwnYo; (2011) ISO/IEC 25010:2011 - Systems and Software Engineering — Systems and Software Quality Requirements and Evaluation (Square) — System and Software Quality Models, , https://www.iso.org/standard/35733.html, Tech. rep; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) In 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), IEEE, pp. 33-44. , https://doi.org/10.1109/ICST.2016.34, Chicago, IL, USA, http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7515457; Moreira, R.M.L.M., Paiva, A.C., Nabuco, M., Memon, A., Pattern-based GUI testing: Bridging the gap between design and quality assurance (2017) Software Testing, Verification and Reliability, 27 (3); Morgado, I.C., (2017) Automated pattern-based testing of mobile applications, , PhD thesis. Faculty of Engineering of the University of Porto, Porto; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Automation of Software Test (AST), 2012 7Th International Workshop On, IEEE, pp. 29-35. , https://doi.org/10.1109/IWAST.2012.6228987, Zurich, Switzerland; Nguyen, C.D., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA 2012), pp. 100-110. , https://doi.org/10.1145/2338965.2336765, ACM Press, Minneapolis, MN, USA; Ravitch, T., Creswick, E.R., Tomb, A., Foltzer, A., Elliott, T., Casburn, L., Multi-App Security Analysis with FUSE: Statically Detecting Android App Collusion (2014) Proceedings of the 4Th Program Protection and Reverse Engineering Workshop (PPREW-4), pp. 1-4. , https://doi.org/10.1145/2689702.2689705, ACM, New Orleans, LA, USA; Zhu, H., Ye, X., Zhang, X., Shen, K., A context-aware approach for dynamic GUI testing of android applications (2015) 2015 IEEE 39Th Annual Computer Software and Applications Conference (COMPSAC), IEEE, 2, pp. 248-253. , https://doi.org/10.1109/COMPSAC.2015.77, TaiChung, Taiwan","Paiva, A.C.R.; Faculdade de Engenharia da Universidade do Porto; INESC TECPortugal; email: apaiva@fe.up.pt",,,"Springer New York LLC",,,,,09639314,,,,"English","Softw. Qual. J.",Article,"Final","",Scopus,2-s2.0-85028757031
"Linan S., Bello-Jimenez L., Arevalo M., Linares-Vasquez M.","57205021139;57205022092;57205023476;54684418100;","Automated extraction of augmented models for android apps",2018,"Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018",,, 8530063,"549","553",,2,"10.1109/ICSME.2018.00065","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058285313&doi=10.1109%2fICSME.2018.00065&partnerID=40&md5=9b463ccc71dbaf367747ebe9621158ef","Systems and Computing Engineering Department, Universidad de Los Andes, Bogotá, Colombia","Linan, S., Systems and Computing Engineering Department, Universidad de Los Andes, Bogotá, Colombia; Bello-Jimenez, L., Systems and Computing Engineering Department, Universidad de Los Andes, Bogotá, Colombia; Arevalo, M., Systems and Computing Engineering Department, Universidad de Los Andes, Bogotá, Colombia; Linares-Vasquez, M., Systems and Computing Engineering Department, Universidad de Los Andes, Bogotá, Colombia","Mobile software development involves significant challenges to developers such as device fragmentation (i.e., enormous hardware and software diversity), event-driven programming (i.e., programming based on user interactions, sensor readings and other events where the program must react) and continuous evolving platforms (i.e., fast changing mobile frameworks and technologies). This can lead programmers to error-prone code, because of the multiple combinations of external variables that must be taken into account in an app development process. Thus, testing is an underlying necessity in mobile applications to deliver high quality apps. However, defining tests suites for app development is a difficult task that requires a lot of effort, because it must consider all the possible states of an app, its context (e.g., device in which is running, sensors, touch gestures, screen proportions, connectivity), and a large combination of mobile devices and operating systems. Previous efforts have been done to extract models that support automated testing. However, as of today there is not a single model that synthesizes different aspects in mobile apps such as domain, usage, context and GUI-related information. These aspects represent complementary information that can be mixed into a single and enriched model. In this paper, we propose a multi-model representation that combines information extracted statically and dynamically from Android apps. Our approach allows practitioners to automatically extract augmented models that combine different types of information, and could help them during comprehension and testing tasks. © 2018 IEEE.","Android testing; Augmented Model; gui model; Mobile software development; Mobile testing; Model testing; Multi Model; Multi model testing; Software modeling","Computer software maintenance; Graphical user interfaces; Software design; Software testing; Touch screens; Automated extraction; Event-driven programming; Hardware and software; Mobile testing; Model testing; Multi model; Multi-model representation; Software model; Android (operating system)",,,,,,,,"Sharma, R., Soni, P., Shah, K., Panchal, B., Health care application for android smartphones using internet of things (iot) (2016) INDIACom16, pp. 1430-1433; Casillo, M., Colace, F., Pascale, F., Lemma, S., Lombardi, M., Contextaware computing for improving the touristic experience: A pervasive app for the amalfi coast (2017) M&N17, pp. 1-6; Google Sensors-Android Developers, , https://developer.android.com/guide/topics/sensors/sensors\_overview; Casillo, M., Colace, F., Pascale, F., Lemma, S., Lombardi, M., Connectivity-Android Developers, , https://developer.android.com/guide/topics/connectivity/; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) ESEM13, pp. 15-24; Linares-Vasquez, M., Bernal-Cardenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) ICSME17; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) ICST15; Linares-Vasquez, M., Moran, K., Poshyvanyk, D., Continuous, evolutionary and large-scale: A new perspective for automated mobile app testing (2017) ICSME17; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) Journal of Systems and Software, 117, pp. 334-356; Linares-Vasquez, M., White, M., Bernal-Cardenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable gui-based execution scenarios (2015) MSR15; Gu, T., Cao, C., Liu, T., Sun, C., Deng, J., Ma, X., Lö, J., Aimdroid: Activity-insulated multi-level automated testing for android applications (2017) ICSME17, pp. 103-114; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Memon, A.M., Using gui ripping for automated testing of android applications (2012) ASE12; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) ISSTA16; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Langhammer, M., Shahbazian, A., Medvidovic, N., Reussner, R.H., Automated extraction of rich software models from limited system information (2016) WICSA16, pp. 99-108; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) ICST16; Liang, C.-J.M., Chandra, R., Zhao, F., Lane, N.D., Brouwers, N., Zhang, L., Karlsson, B.F., Tang, J., Caiipa: Automated large-scale mobile app testing through contextual fuzzing (2014) MobiCom14; Adamsen, C.Q., Mezzetti, G., Møller, A., Systematic execution of android test suites in adverse conditions (2015) ISSTA15; Google Android Debug Bridge (Adb) | Android Developers, , https://developer.android.com/studio/command-line/adb; Adamsen, C.Q., Mezzetti, G., Møller, A., Intent-Android Developers, , https://developer.android.com/reference/android/content/Intent; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (t) (2015) ASE15, pp. 658-668; Yang, S., Yan, D., Wu, H., Wang, Y., Rountev, A., Static control-flow analysis of user-driven callbacks in android applications (2015) ICSE15; Köhle, J., Car Report, , https://bitbucket.org/frigus02/car-report; Thuryn1@gmail.com Your Local Weather, , https://f-droid.org/en/packages/org.thosp.yourlocalweather/; Baker, A., Tasks, , https://github.com/tasks/tasks; Tools, S.M., Simple Calendar, , https://github.com/SimpleMobileTools/Simple-Calendar",,,"IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","34th IEEE International Conference on Software Maintenance and Evolution, ICSME 2018","23 September 2018 through 29 September 2018",,142437,,9781538678701,,,"English","Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME",Conference Paper,"Final","",Scopus,2-s2.0-85058285313
"Adamo D., Khan M.K., Koppula S., Bryce R.","57201129573;57206657903;57206670472;12645168200;","Reinforcement learning for android GUI testing",2018,"A-TEST 2018 - Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, Co-located with FSE 2018",,,,"2","8",,8,"10.1145/3278186.3278187","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061768575&doi=10.1145%2f3278186.3278187&partnerID=40&md5=c3bc0fd04f2dbd66a51a0d7968236392","Ultimate Software Group, Inc., Weston, FL  33326, United States; University of North Texas, Denton, TX  76207, United States","Adamo, D., Ultimate Software Group, Inc., Weston, FL  33326, United States; Khan, M.K., University of North Texas, Denton, TX  76207, United States; Koppula, S., University of North Texas, Denton, TX  76207, United States; Bryce, R., University of North Texas, Denton, TX  76207, United States","This paper presents a reinforcement learning approach to automated GUI testing of Android apps. We use a test generation algorithm based on Q-learning to systematically select events and explore the GUI of an application under test without requiring a preexisting abstract model. We empirically evaluate the algorithm on eight Android applications and find that the proposed approach generates test suites that achieve between 3.31% to 18.83% better block-level code coverage than random test generation. © 2018 Association for Computing Machinery..","Android; GUI testing; Mobile application testing; Q-learning","Android (operating system); Graphical user interfaces; Machine learning; Software testing; Testing; Android; Application under tests; GUI testing; Mobile application testing; Q-learning; Random test generation; Reinforcement learning approach; Test generation algorithm; Reinforcement learning",,,,,,,,"Adamo, D., Bryce, R., King, T.M., Randomized event sequence generation strategies for automated testing of android apps (2018) Information Technology - New Generations, pp. 571-578. , Shahram Latifi (Ed.). Springer International Publishing, Cham; Adamo, D., Nurmuradov, D., Piparia, S., Bryce, R., Combinatorial-based event sequence testing of Android applications (2018) Information and Software Technology, 99 (2018), pp. 98-117; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of The 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), pp. 258-261. , ACM, New York, NY, USA; Arcuri, A., Briand, L., A practical guide for using statistical tests to assess randomized algorithms in software engineering (2011) 2011 33rd International Conference on Software Engineering (ICSE), pp. 1-10; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based GUI testing techniques: An empirical study (2014) Journal of Systems and Software, 97, pp. 15-46; Baek, Y.-M., Bae, D.-H., Automated model-based Android GUI testing using multi-level GUI comparison criteria (2016) Proceedings of The 31st IEEE/ACM International Conference on Automated Software Engineering (ASE 2016), pp. 238-249. , ACM, New York, NY, USA; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR; what about more sophisticated action specification and selection? (2014) CEUR Workshop Proceedings, 1354, pp. 60-78; Carino, S., (2016) Dynamically Testing Graphical User Interfaces, , Ph.D. Dissertation. The University of Western Ontario, London, ON, CA; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of The 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA’13), pp. 623-640. , ACM, New York, NY, USA; Espada, A.R., Del Mar Gallardo, M., Salmerón, A., Merino, P., Using model checking to generate test cases for android applications (2015) Tenth Workshop on Model-Based Testing (MBT 2015), pp. 7-21; (2018) Appium: Mobile App Automation Made Awesome, , http://appium.io/, Accessed: 2018-07-02; Gu, T., Cao, C., Liu, T., Sun, C., Deng, J., Ma, X., Lu, J., Aimdroid: Activity-insulated multi-level automated testing for Android applications (2017) 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 103-114; Haoyin, L.V., Automatic android application GUI testing – A random walk approach (2017) International Conference on Wireless Communications, Signal Processing and Networking (WiSPNET), pp. 72-76; Harty, J., Katara, M., Takala, T., Experiences of system-level model-based GUI testing of an android application (2011) 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation(ICST), pp. 377-386; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proceedings of The 6th International Workshop on Automation of Software Test (AST 2011), pp. 77-83. , ACM, New York, NY, USA; (2017) Smartphone OS Market Share, 2017 Q1, , https://www.idc.com/promo/smartphone-market-share/os, Accessed: 2018-02-21; Kochhar, P.S., Ferdian, T., Nagappan, N., Zimmer-Mann, T., Lo, D., Understanding the test automation culture of App developers (2015) IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), pp. 1-10. , IEEE; (2018) F-Droid - Free and Open Source Android App Repository, , https://f-droid.org/, Accessed: 2018-02-10; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of The 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013), pp. 224-234. , ACM, New York, NY, USA; Mariani, L., Pezzé, M., Riganelli, O., Santoro, M., Automatic testing of GUI-based applications (2014) Software Testing, Verification and Reliability, 24 (5), pp. 341-366. , 2014; (2018) Android UI/Application Exerciser Monkey, , https://developer.android.com/studio/test/monkey.html, Accessed: 2018-07-02; (2018) UIAutomator, , https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html, Accessed: 2018-07-02; Roubtsov, V., (2005) Emma, , http://emma.sourceforge.net/, Accessed: 2018-03-12; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of Android apps (2017) Proceedings of The 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017), pp. 245-256. , ACM, New York, NY, USA; Sutton, R.S., Barto, A.G., (1998) Reinforcement Learning: An Introduction, , MIT press; Van Otterlo, M., Wiering, M., Reinforcement learning and Markov decision processes (2012) Reinforcement Learning: State-of-The-Art, pp. 3-42. , Marco Wiering and Martijn van Otterlo (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg; Ye, H., Cheng, S., Zhang, L., Jiang, F., Droidfuzzer: Fuzzing the android apps with intent-filter tag (2013) Proceedings of International Conference on Advances in Mobile Computing and Multimedia (MoMM’13), pp. 68-74. , ACM, New York, NY, USA; Zhauniarovich, Y., Philippov, A., Gadyatskaya, O., Crispo, B., Massacci, F., Towards black box testing of android apps (2015) 2015 10th International Conference on Availability, Reliability and Security, pp. 501-510. , IEEE",,"Prasetya W.Vos T.E.J.Vos T.E.J.Sinem G.","ACM SIGSOFT","Association for Computing Machinery, Inc","9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, A-TEST 2018, co-located the 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2018","5 November 2018",,144660,,9781450360531,,,"English","A-TEST - Proc. ACM SIGSOFT Int. Workshop Autom. TEST Case Des., Sel., Eval., Co-located FSE",Conference Paper,"Final","",Scopus,2-s2.0-85061768575
"Stocco A., Yandrapally R., Mesbah A.","36882807000;56880381600;17345931800;","Vista: Web test repair using computer vision",2018,"ESEC/FSE 2018 - Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering",,,,"876","879",,3,"10.1145/3236024.3264592","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058316084&doi=10.1145%2f3236024.3264592&partnerID=40&md5=dc7a4b0e401a69783fdc612fc1e6d426","University of British Columbia, Vancouver, BC, Canada","Stocco, A., University of British Columbia, Vancouver, BC, Canada; Yandrapally, R., University of British Columbia, Vancouver, BC, Canada; Mesbah, A., University of British Columbia, Vancouver, BC, Canada","Repairing broken web element locators represents the major maintenance cost of web test cases. To detect possible repairs, testers typically inspect the tests' interactions with the application under test through the GUI. Existing automated test repair techniques focus instead on the code and ignore visual aspects of the application. In this demo paper, we give an overview of Vista, a novel test repair technique that leverages computer vision and local crawling to automatically suggest and apply repairs to broken web tests. © 2018 Association for Computing Machinery.","computer vision; image analysis; test repair; web testing","Image analysis; Repair; Software engineering; Application under tests; Automated test; Maintenance cost; Test case; Test repair; Visual aspects; Web testing; Computer vision",,,,,,,,"Roy Choudhary, S., Zhao, D., Versee, H., Orso, A., WATER:web application test repair (2011) Proceedings of 1st InternationalWorkshop on End-to-End Test Script Engineering (ETSE '11), pp. 24-29. , ACM; Hammoudi, M., Rothermel, G., Stocco, A., WATERFALL: An incremental approach for repairing record-replay tests ofweb applications (2016) Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE '16), pp. 751-762. , ACM; Hammoudi, M., Rothermel, G., Tonella, P., Why do record/replay tests of web applications break? (2016) Proceedings of 9th International Conference on Software Testing, Verification and Validation (ICST '16); Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Approaches and tools for automated end-to-end web testing (2016) Advances in Computers, 101, pp. 193-237. , 2016; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Using multi-locators to increase the robustness of web test cases (2015) Proceedings of 8th IEEE International Conference on Software Testing, Verification and Validation (ICST '15), pp. 1-10. , IEEE; Leotta, M., Stocco, A., Ricca, F., Tonella, P., ROBULA+: An algorithm for generating robust xpath locators for web testing (2016) Journal of Software: Evolution and Process, 28, pp. 177-204. , 2016; Leotta, M., Stocco, A., Ricca, F., Tonella, P., PESTO: Automated migration of DOM-based web tests towards the visual approach (2018) Software Testing, Verification and Reliability, 28 (4). , 2018; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Transactions on the Web, 6 (1), pp. 3:1-3:30. , 2012; Stocco, A., Leotta, M., Ricca, F., Tonella, P., PESTO: A tool for migrating DOM-based to visual web tests (2014) Proceedings of 14th International Working Conference on Source Code Analysis and Manipulation (SCAM '14), pp. 65-70. , IEEE Computer Society; Stocco, A., Yandrapally, R., Mesbah, A., Visual web test repair (2018) Proceedings of the 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE '18), , ACM","Stocco, A.; University of British ColumbiaCanada; email: astocco@ece.ubc.ca","Garci A.Pasareanu C.S.Leavens G.T.","ACM SIGSOFT","Association for Computing Machinery, Inc","26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2018","4 November 2018 through 9 November 2018",,142072,,9781450355735,,,"English","ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85058316084
"Stocco A., Yandrapally R., Mesbah A.","36882807000;56880381600;17345931800;","Visual web test repair",2018,"ESEC/FSE 2018 - Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering",,,,"503","514",,18,"10.1145/3236024.3236063","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056493229&doi=10.1145%2f3236024.3236063&partnerID=40&md5=06e7f09d206ced230163214f9830a93c","University of British Columbia, Vancouver, BC, Canada","Stocco, A., University of British Columbia, Vancouver, BC, Canada; Yandrapally, R., University of British Columbia, Vancouver, BC, Canada; Mesbah, A., University of British Columbia, Vancouver, BC, Canada","Web tests are prone to break frequently as the application under test evolves, causing much maintenance effort in practice. To detect the root causes of a test breakage, developers typically inspect the test's interactions with the application through the GUI. Existing automated test repair techniques focus instead on the code and entirely ignore visual aspects of the application. We propose a test repair technique that is informed by a visual analysis of the application. Our approach captures relevant visual information from tests execution and analyzes them through a fast image processing pipeline to visually validate test cases as they re-executed for regression purposes. Then, it reports the occurrences of breakages and potential fixes to the testers. Our approach is also equipped with a local crawling mechanism to handle non-trivial breakage scenarios such as the ones that require to repair the test's workflow. We implemented our approach in a tool called Vista. Our empirical evaluation on 2,672 test cases spanning 86 releases of four web applications shows that Vista is able to repair, on average, 81% of the breakages, a 41% increment with respect to existing techniques. © 2018 Association for Computing Machinery.","computer vision; image analysis; test repair; web testing","Computer vision; Image analysis; Software engineering; Application under tests; Empirical evaluations; Fast image processing; Maintenance efforts; Test repair; Visual analysis; Visual information; Web testing; Repair",,,,,,,,"Alégroth, E., Nass, M., Olsson, H.H., Jautomate: A tool for system- and acceptance-test automation (2013) Proceedings of IEEE 6th International Conference on Software Testing, Verification and Validation (ICST '13), pp. 439-446; (2018) Applitools. Visual App Testing and Monitoring, , https://applitools.com/, Applitools. (2018). Accessed: 2017-08-01; Bajaj, K., Pattabiraman, K., Mesbah, A., Synthesizing web element locators (2015) Proceedings of 30th IEEE/ACM International Conference on Automated Software Engineering (ASE '15), pp. 331-341. , IEEE Computer Society; Bajammal, M., Mazinanian, D., Mesbah, A., Generating reusable web components from mockups (2018) Proceedings of 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE '18), , IEEE Computer Society; Bajammal, M., Mesbah, A., Web canvas testing through visual inference (2018) Proceedings of 11th International Conference on Software Testing, Verification and Validation (ICST '18), pp. 193-203. , IEEE Computer Society; Robert, V., Binder, Testing object-oriented software: A survey (1996) Software Testing, Verification and Reliability, 6 (3-4), pp. 125-252. , 1996; Briechle, K., Hanebeck, U.D., Template matching using fast normalized cross correlation (2001) Optical Pattern Recognition XII, 4387, pp. 95-103. , International Society for Optics and Photonics; Brunelli, R., (2009) Template Matching Techniques in Computer Vision: Theory and Practice, , Wiley Publishing; Burel, G., Carel, D., Detection and localization of faces on digital images (1994) Pattern Recognition Letters, 15 (10), pp. 963-967. , 1994; Chang, T., Yeh, T., Miller, R.C., Gui testing using computer vision (2010) Proceedings of 28th ACM Conference on Human Factors in Computing Systems (CHI '10), pp. 1535-1544. , ACM; Roy Choudhary, S., Zhao, D., Versee, H., Orso, A., Water:web application test repair (2011) Proceedings of 1st InternationalWorkshop on End-to-End Test Script Engineering (ETSE '11), pp. 24-29. , ACM; Christophe, L., Stevens, R., De Roover, C., De Meuter, W., Prevalence and maintenance of automated functional tests forweb applications (2014) Proceedings of 30th International Conference on Software Maintenance and Evolution (ICSME '14), pp. 141-150. , IEEE; (2018) Counts Blank Lines, Comment Lines, and Physical Lines of Source Code in Many Programming Languages, , https://github.com/AlDanial/cloc, Cloc. (2018); Daniel, B., Dig, D., Gvero, T., Jagannath, V., Jiaa, J., Mitchell, D., Nogiec, J., Marinov, D., Reassert: A tool for repairing broken unit tests (2011) Proceedings of 33rd International Conference on Software Engineering (ICSE '11), pp. 1010-1012. , ACM; Daniel, B., Gvero, T., Marinov, D., On test repair using symbolic execution (2010) Proceedings of 19th International Symposium on Software Testing and Analysis (ISSTA '10), pp. 207-218. , ACM; Daniel, B., Jagannath, V., Dig, D., Marinov, D., Reassert: Suggesting repairs for broken unit tests (2009) Proceedings of 2009 IEEE/ACM International Conference on Automated Software Engineering (ASE '09), pp. 433-444. , IEEE Computer Society; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezzè, M., Automated gui refactoring and test script repair (2011) Proceedings of First International Workshop on End-to-End Test Script Engineering (ETSE '11), pp. 38-41. , ACM; Feng, Y., Jones, J.A., Chen, Z., Fang, C., Multiobjective test report prioritization using image understanding (2016) Proceedings of 31st IEEE/ACM International Conference on Automated Software Engineering (ASE '16), pp. 202-213. , ACM; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley Longman Publishing Co., Inc; Gao, Z., Chen, Z., Zou, Y., Memon, A.M., SITAR: Gui test script repair (2016) IEEE Transactions on Software Engineering, 42 (2), pp. 170-186. , feb 2016; Gao, Z., Fang, C., Memon, A.M., Pushing the limits on automation in gui regression testing (2015) Proceedings of IEEE 26th International Symposium on Software Reliability Engineering (ISSRE '15), pp. 565-575; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving guidirected test scripts (2009) Proceedings of 31st International Conference on Software Engineering (ICSE '09), pp. 408-418. , IEEE Computer Society; Hammoudi, M., Rothermel, G., Stocco, A., Waterfall: An incremental approach for repairing record-replay tests ofweb applications (2016) Proceedings of 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE '16), pp. 751-762. , ACM; Hammoudi, M., Rothermel, G., Tonella, P., Why do record/replay tests of web applications break? (2016) Proceedings of 9th International Conference on Software Testing, Verification and Validation (ICST '16), pp. 180-190. , IEEE; Huang, S., Cohen, M.B., Memon, A.M., Repairing gui test suites using a genetic algorithm (2010) Proceedings of 3rd International Conference on Software Testing, Verification and Validation (ICST '10), pp. 245-254. , IEEE Computer Society; Issa, A., Sillito, J., Garousi, V., Visual testing of graphical user interfaces: An exploratory study towards systematic definitions and approaches (2012) Proceedings of IEEE 14th International Symposium on Web Systems Evolution (WSE '12), pp. 11-15. , IEEE Computer Society; Furkan Kiraç, M., Aktemur, B., Sözer, H., Visor: A fast image processing pipeline with scaling and translation invariance for test oracle automation of visual output systems (2018) Journal of Systems and Software, 136, pp. 266-277. , 2018; Lelli, V., Blouin, A., Baudry, B., Classifying and qualifying gui defects (2015) Proceedings of 8th IEEE International Conference on Software Testing, Verification and Validation (ICST '15), pp. 1-10; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. dom-based web locators: An empirical study (2014) Proceedings of 14th International Conference on Web Engineering (ICWE '14), 8541, pp. 322-340. , Springer; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Approaches and tools for automated end-to-end web testing (2016) Advances in Computers, 101, pp. 193-237. , 2016; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Reducing web test cases aging by means of robust xpath locators (2014) Proceedings of 25th International Symposium on Software Reliability Engineering Workshops (ISSREW '14), pp. 449-454. , IEEE Computer Society; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Automated migration of dom-based to visual web tests (2015) Proceedings of 30th Symposium on Applied Computing (SAC '15), pp. 775-782. , ACM; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Using multi-locators to increase the robustness of web test cases (2015) Proceedings of 8th IEEE International Conference on Software Testing, Verification and Validation (ICST '15), pp. 1-10. , IEEE; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Robula+: An algorithm for generating robust xpath locators for web testing (2016) Journal of Software: Evolution and Process, 28, pp. 177-204. , 2016; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Pesto: Automated migration of dom-based web tests towards the visual approach (2018) Software Testing, Verification and Reliability, 28 (4). , 2018; Lowe, D.G., Object recognition from local scale-invariant features (1999) Proceedings of 7th IEEE International Conference on Computer Vision, 2, pp. 1150-1157; David, G., Lowe, Distinctive image features from scale-invariant keypoints (2004) International Journal of Computer Vision, 60 (2), pp. 91-110. , 01 Nov 2004; Mahajan, S., Halfond, W.G.J., Detection and localization of HTML presentation failures using computer vision-based techniques (2015) Proceedings of 8th IEEE International Conference on Software Testing, Verification and Validation (ICST '15), pp. 1-10; Malisiewicz, T., Gupta, A., Efros, A.A., Ensemble of exemplar-svms for object detection and beyond (2011) Proceedings of 2011 International Conference on Computer Vision (ICCV '11), pp. 89-96. , IEEE Computer Society; Atif, M., Memon, Automatically repairing event sequence-based gui test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodologies, 18 (2), p. 36. , (nov 2008), Article 4; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Transactions on the Web, 6 (1), pp. 3:1-3:30. , 2012; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Transactions on Software Engineering, 38 (1), pp. 35-53. , 2012; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105. , 2014; (2018) Open Source Computer Vision Library, , https://opencv.org, OpenCV. (2018); Ramler, R., Wolfmaier, K., Economic perspectives in test automation: Balancing automated and manual testing with opportunity cost (2006) Proceedings of 1st International Workshop on Automation of Software Test (AST '06), pp. 85-91. , ACM; Ramler, R., Ziebermayr, T., What you see is what you test - Augmenting software testing with computer vision (2017) Proceedings of 10th IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2017), pp. 398-400; Rosten, E., Drummond, T., Fusing points and lines for high performance tracking (2005) IEEE International Conference on Computer Vision, 2, pp. 1508-1511; Rosten, E., Porter, R., Drummond, T., Faster and better: A machine learning approach to corner detection (2010) IEEE Transaction on Pattern Analysis and Machine Intelligence, 32, pp. 105-119. , 2010; Roy Choudhary, S., Prasad, M.R., Orso, A., X-pert: Accurate identification of cross-browser issues in web applications (2013) Proceedings of 2013 International Conference on Software Engineering (ICSE '13), pp. 702-711. , IEEE Press; Roy Choudhary, S., Versee, H., Orso, A., Webdiff: Automated identification of cross-browser issues in web applications (2010) Proceedings of 2010 IEEE International Conference on Software Maintenance (ICSM '10), pp. 1-10. , IEEE Computer Society; Stocco, A., Leotta, M., Ricca, F., Tonella, P., Pesto: A tool for migrating dom-based to visual web tests (2014) Proceedings of 14th International Working Conference on Source Code Analysis and Manipulation (SCAM '14), pp. 65-70. , IEEE Computer Society; Stocco, A., Leotta, M., Ricca, F., Tonella, P., Why creating web page objects manually if it can be done automatically? (2015) Proceedings of 10th IEEE/ACM International Workshop on Automation of Software Test (AST '15), pp. 70-74. , IEEE/ACM; Stocco, A., Leotta, M., Ricca, F., Tonella, P., Automatic page object generation with apogen (2016) Proceedings of 16th International Conference on Web Engineering (ICWE '16 - Demo Track), pp. 533-537. , Springer; Stocco, A., Leotta, M., Ricca, F., Tonella, P., Clustering-aided page object generation forweb testing (2016) Proceedings of 16th International Conference on Web Engineering (ICWE '16), pp. 132-151. , Springer; Stocco, A., Leotta, M., Ricca, F., Tonella, P., Apogen: Automatic page object generator for web testing (2017) Software Quality Journal, 25 (3), pp. 1007-1039. , Sept. 2017; Stocco, A., Yandrapally, R., Mesbah, A., Web test repair using computer vision (2018) Proceedings of 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2018 - Demonstration Track), , ACM; Tonella, P., Ricca, F., Marchetto, A., Recent advances in web testing (2014) Advances in Computers, 93, pp. 1-51. , 2014; (2018) Web Test Repair Using Computer Vision, , https://github.com/saltlab/vista, Vista. (2018); Yandrapally, R., Thummalapenta, S., Sinha, S., Chandra, S., Robust test automation using contextual clues (2014) Proceedings of 2014 International Symposium on Software Testing and Analysis (ISSTA '14), pp. 304-314. , ACM; Zhang, S., Lü, H., Ernst, M.D., Automatically repairing broken workflows for evolving gui applications (2013) Proceedings of 2013 International Symposium on Software Testing and Analysis (ISSTA '13), pp. 45-55. , ACM","Stocco, A.; University of British ColumbiaCanada; email: astocco@ece.ubc.ca","Garci A.Pasareanu C.S.Leavens G.T.","ACM SIGSOFT","Association for Computing Machinery, Inc","26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2018","4 November 2018 through 9 November 2018",,142072,,9781450355735,,,"English","ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85056493229
"Novella L., Tufo M., Fiengo G.","57204814393;23570286800;23004338900;","Improving test suites via a novel testing with model learning approach",2018,"Proceedings - 2018 IEEE 27th International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises, WETICE 2018",,, 8495941,"235","240",,1,"10.1109/WETICE.2018.00051","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057335006&doi=10.1109%2fWETICE.2018.00051&partnerID=40&md5=bcbdc21954197d2b1481ea2d86b5c7cf","Department of Engineering, Universita Degli Studi Del Sannio, Benevento, Italy","Novella, L., Department of Engineering, Universita Degli Studi Del Sannio, Benevento, Italy; Tufo, M., Department of Engineering, Universita Degli Studi Del Sannio, Benevento, Italy; Fiengo, G., Department of Engineering, Universita Degli Studi Del Sannio, Benevento, Italy","The integrity and reliability of reactive systems are very important and, in order to ensure them, an intensive testing procedure is required. This paper is concerned with the challenge of automatically producing test sets for black-box systems and proposes a testing with model learning technique to achieve functional coverage in the absence of specifications. The testing technique probes the system behaviour with tests, uses the test results to learn a behavioural model of the SUT, generates further tests on the learned model and refines it via inductive learning. The proposed inductive learning algorithm is based on Evidence Driven State Merging and introduces a novel heuristic approach according to the order in which state pairs are chosen for merging that drastically reduces the number of required merge operations. The effectiveness of the proposed testing technique is measured in terms of achieved functional coverage and test depth considering as a case study the event-based functional testing of an Android Application through its Graphical User Interface (GUI). © 2018 IEEE.","Active Learning; Functional Coverage; Inductive Testing; Model Based Exploration; Model Inference","Graphical user interfaces; Heuristic methods; Learning algorithms; Learning systems; Merging; Testing; Active Learning; Android applications; Evidence driven state merging; Functional coverage; Functional testing; Graphical user interfaces (GUI); Model inference; Model-based OPC; Black-box testing",,,,,,,,"Meinke, K., Sindhu, M.A., Incremental learning-based testing for reactive systems (2011) Tests and Proofs, pp. 134-151. , Springer Berlin Heidelberg; Aarts, F., Kuppens, H., Tretmans, J., Vaandrager, F., Ver-Wer, S., Learning and testing the bounded retransmission proto-col (2012) Proceedings of the Eleventh International Conference on Grammatical Inference, 21, pp. 4-18. , PMLR, 05-08 Sep; Walkinshaw, N., Bogdanov, K., Derrick, J., Paris, J., In-creasing functional coverage by inductive testing: A case study (2010) Testing Software and Systems, pp. 126-141. , Springer Berlin Heidelberg; Raffelt, H., Merten, M., Steffen, B., Margaria, T., Dynamic testing via automata learning (2009) International Journal on Software Tools for Technology Transfer, 11 (4), p. 307. , Oct; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) SIGPLAN Not., 48 (10), pp. 623-640. , Oct; Meinke, K., Walkinshaw, N., Model-based testing and model inference (2012) Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change, pp. 440-443. , Springer Berlin Heidelberg; Lang, K.J., Pearlmutter, B.A., Price, R.A., (1998) Results of the Abbadingo One DFA Learning Competition and a New Evidence-driven State Merging Algorithm, pp. 1-12. , Springer Berlin Heidelberg; Walkinshaw, N., Taylor, R., Derrick, J., Inferring extended finite state machine models from software executions (2016) Em-pirical Software Engineering, 21 (3), pp. 811-853. , Jun; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , San Francisco, CA, USA: Morgan Kaufmann Publishers Inc; Angluin, D., Learning regular sets from queries and coun-terexamples (1987) Inf. Comput., 75 (2), pp. 87-106. , November; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., Fasolino, A.R., A general framework for comparing automatic testing techniques of android mobile apps (2017) Journal of Systems and Software, 125, pp. 322-343; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback-directed random test generation (2007) 29th International Conference on Software Engineering (ICSE'07), pp. 75-84. , May; Lambeau, B., Damas, C., Dupont, P., (2008) State-Merging DFA Induction Algorithms with Mandatory Merge Constraints, pp. 139-153. , Springer Berlin Heidelberg; De La Higuera, C., (2010) Grammatical Inference: Learning Automata and Grammars, , Cambridge University Press; Abadi, A., Feldman, Y.A., Shagin, K., A screen-oriented representation for mobile applications (2013) Conference on Systems, Programming, & Applications: Software for Humanity, Ser. SPLASH '13, pp. 79-80. , ACM",,,,"Institute of Electrical and Electronics Engineers Inc.","27th IEEE International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises, WETICE 2018","27 June 2018 through 29 June 2018",,141261,,9781538669167,,,"English","Proc. - IEEE Int. Conf. Enabling Technol.: Infrastruct. Collab. Enterp., WETICE",Conference Paper,"Final","",Scopus,2-s2.0-85057335006
"Ali A., Maghawry H.A., Badr N.","57189384435;56436737800;6602448188;","Automated parallel GUI testing as a service for mobile applications",2018,"Journal of Software: Evolution and Process","30","10", e1963,"","",,2,"10.1002/smr.1963","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055214444&doi=10.1002%2fsmr.1963&partnerID=40&md5=1f3a8eb8333bd8b6169f8b78bb1c336c","Department of Information Systems, Ain Shams University, Cairo, Egypt","Ali, A., Department of Information Systems, Ain Shams University, Cairo, Egypt; Maghawry, H.A., Department of Information Systems, Ain Shams University, Cairo, Egypt; Badr, N., Department of Information Systems, Ain Shams University, Cairo, Egypt","Recently, testing mobile applications is gaining much attention due to the widespread of smartphones and the tremendous number of mobile applications development. It is essential to test mobile applications before being released for the public use. Graphical user interface (GUI) testing is a type of mobile applications testing conducted to ensure the proper functionality of the GUI components. Typically, GUI testing requires a lot of effort and time whether manual or automatic. Cloud computing is an emerging technology that can be used in the software engineering field to overcome the defects of the traditional testing approaches by using cloud computing resources. As a result, testing-as-a-service is introduced as a service model that conducts all testing activities in a fully automated manner. In this paper, a system for mobile applications GUI testing based on testing-as-a-service architecture is proposed. The proposed system performs all testing activities including automatic test case generation and simultaneous test execution on multiple virtual nodes for testing Android-based applications. The proposed system reduces testing time and meets fast time-to market constraint of mobile applications. Moreover, the proposed system architecture addresses many issues such as maximizing resource utilization, continuous monitoring to ensure system reliability, and applying fault-tolerance approach to handle occurrence of any failure. Copyright © 2018 John Wiley & Sons, Ltd.","Appium; cloud computing; GUI testing; mobile application testing; TaaS","Cloud computing; Computer architecture; Fault tolerance; Graphical user interfaces; Mobile computing; Appium; Automatic test-case generations; Emerging technologies; Graphical user interfaces (GUI); GUI testing; Mobile application testing; Mobile applications development; TaaS; Software testing",,,,,,,,"Gao, J., Bai, X., Tsai, W.-T., Uehara, T., Mobile application testing: a tutorial (2014) Computer, 47 (2), pp. 46-55; https://www.alliedmarketresearch.com/mobile-application-market; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., (2015) Understanding the test automation culture of app developers, pp. 1-10. , in software testing, verification and validation (ICST), 2015 IEEE 8th international conference on, IEEE; Flora, H.K., Wang, X., Chande, S.V., An investigation into mobile application development processes: Challenges and best practices (2014) Int J Mod Educ Comput. Sci, 6 (6), p. 1; Nagappan, M., Shihab, E., (2016) Future trends in software engineering research for mobile apps, 5, pp. 21-32. , in software analysis, evolutionreengineering (SANER), 2016 IEEE 23rd international conference on, IEEE; Kirubakaran, B., Karthikeyani, V., (2013) Mobile application testing—challenges and solution approach through automation, pp. 79-84. , Pattern Recognition, Informatics and Mobile Engineering (PRIME), 2013 International Conference on, IEEE; Linares-Vásquez, M., Moran, K., Poshyvanyk, D., (2017) Continuous, evolutionary and large-scale: a new perspective for automated mobile app testing, pp. 399-410. , Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference on, IEEE; Mell, P., Grance, T., (2011) The NIST definition of cloud, , Comput Secur; Buyya, R., Yeo, C.S., Venugopal, S., Broberg, J., Brandic, I., Cloud computing and emerging IT platforms: vision, hype, and reality for delivering computing as the 5th utility (2009) Future Generation Computer Systems, 25 (6), pp. 599-616; Parveen, T., Tilley, S., (2010) When to migrate software testing to the cloud?, pp. 424-427. , in software testing, verificationvalidation workshops (ICSTW), 2010 third international conference on, IEEE; Tilley, S., Parveen, T., (2012) SMART-T: migrating testing to the cloud, pp. 19-35. , Software Testing in the Cloud, Springer Berlin Heidelberg; Zhenlong, P., Zhonghui, O.Y., Youlan, H., (2012) The application and development of software testing in cloud computing environment, pp. 450-454. , In Computer Science & Service System (CSSS), 2012 International Conference on, IEEE; Priyadharshini, V., Malathi, A., (2014) Survey on software testing techniques in cloud computing, , CoRR, abs/1402.1925; Riungu, L.M., Taipale, O., Smolander, K., (2010) Research issues for software testing in the cloud, pp. 557-564. , Cloud Computing Technology and Science (CloudCom), 2010 IEEE Second International Conference on, IEEE; Katherine, A.V., Alagarsamy, K., Software testing in cloud platform: a survey (2012) International Journal of Computer Applications, 46 (6), pp. 21-25; Harikrishna, P., Amuthan, A., (2016) A survey of testing as a service in cloud computing, pp. 1-5. , in computer communication and informatics (ICCCI), 2016 international conference on, IEEE; Gao, J., Bai, X., Tsai, W.-T., Uehara, T., (2013) Testing as a service (TaaS) on clouds, pp. 212-223. , in service oriented system engineering (SOSE), 2013 IEEE 7th international symposium on, IEEE; Wang, W., Zhang, X., Chen, T., Wu, X., Li, X., (2012) Cloud computing based software testing framework design and implementation, , Advances in Computer, Communication, Control and Automation, 785-790; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2011) A gui crawling-based technique for android mobile application testing, pp. 252-261. , Software Testing, Verification and Validation Workshops (ICSTW), 2011 IEEE Fourth International Conference on, IEEE; Berenbach, B., Paulish, D., Kazmeier, J., Rudorfer, A., (2009) Software and systems requirements engineering: in practice, , McGraw-Hill, Inc; Wasnik, C., Lingam, C., Software Testing and Software Development Lifecycles (2013) Int J Comput Distrib Sys, 2 (3); Rumbaugh, J., Jacobson, I., Booch, G., (1999) The Unified Modelling Language User Guide, , Reading MA, Addison-Weslley; Chen, M., Mishra, P., Kalita, D., Coverage-driven automatic test generation for UML activity diagrams (2008) Proceedings of the 18th ACM Great Lakes symposium on VLSI, pp. 139-142. , ACM; (2014) Sales of feature phones for the first time in 2013; Murugesan, L., Balasubramanian, P., (2014) Cloud based mobile application testing, pp. 287-289. , in computer and information science (ICIS), 2014 IEEE/ACIS 13th international conference on, IEEE; Gao, J., Tsai, W.-T., Paul, R., Bai, X., Uehara, T., (2014) Mobile testing-as-a-service (MTaaS)—infrastructures, issues, solutions and needs, pp. 158-167. , in high assurance systems engineering (HASE), 2014 IEEE 15th international symposium on, IEEE; Kaur, K., Kaur, A., (2016) Cloud era in mobile application testing, pp. 1057-1060. , in computing for sustainable global development (INDIACom), 2016 3rd international conference on, IEEE; Tao, C., Gao, J., Li, B., (2015) Cloud-based infrastructure for mobile testing as a service, pp. 133-140. , In Advanced Cloud and Big Data, 2015 Third International Conference on, IEEE; Zhang, S., Pi, B., (2015) Mobile functional test on TaaS environment, pp. 315-320. , in service-oriented system engineering (SOSE), 2015 IEEE symposium on, IEEE; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., (2012) A whitebox approach for automated security testing of android applications on the cloud, pp. 22-28. , in automation of software test (AST), 2012 7th international workshop on, IEEE; Zhang, T., Gao, J., Cheng, J., Uehara, T., (2015) Compatibility testing service for mobile applications, pp. 179-186. , in service-oriented system engineering (SOSE), 2015 IEEE symposium on, IEEE; Grønli, T.-M., Ghinea, G., Meeting quality standards for mobile application development in businesses: a framework for cross-platform testing (2016) IEEE, pp. 5711-5720. , in system sciences (HICSS), 2016 49th Hawaii International Conference on; Starov, O., Vilkomir, S., (2013) Integrated TaaS platform for mobile development: architecture solutions, pp. 1-7. , in automation of software test (AST), 2013 8th international workshop on, IEEE; Versluis, G., Creating and running tests with xamarin test cloud (2017) Xamarin Continuous Integration and Delivery, pp. 71-91. , Berkeley, CA, Apress; http://tools.perfectomobile.com/; Li, A., Qin, Z., Chen, M., Liu, J., (2014) ADAutomation: an activity diagram based automated GUI testing framework for smartphone applications, pp. 68-77. , in software security and reliability, 2014 eighth international conference on, IEEE; Anbunathan, R., Basu, A., Automatic test generation from UML sequence diagrams for android mobiles (2016) International Journal of Applied Engineering Research, 11 (7), pp. 4961-4979; Ali, A., Badr, N., (2015) Performance testing as a service for web applications, pp. 356-361. , in intelligent computing and information systems (ICICIS), 2015 IEEE seventh international conference on, IEEE; Zheng, Y., Cai, L., Huang, S., Wang, Z., (2014) VM scheduling strategies based on artificial intelligence in cloud testing, pp. 1-7. , Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD), 2014 15th IEEE/ACIS International Conference on, IEEE; Liu, C.-H., Chen, S.-L., (2016) Evaluation of cloud testing strategies based on task decomposition and allocation for improving test efficiency, pp. 1-4. , Applied System Innovation (ICASI), 2016 International Conference on, IEEE; (2013) Visual paradigm for UML-UML tool for software application Development; Janicki, M., Katara, M., Pääkkönen, T., Obstacles and opportunities in deploying model-based GUI testing of mobile software: a survey (2012) Software Testing, Verification and Reliability, 22 (5), pp. 313-341; Cartaxo, E.G., Neto, F.G.O., Machado, P.D.L., (2007) Test case generation by means of UML sequence diagrams and labeled transition systems, pp. 1292-1297. , In Systems, Man and Cybernetics, 2007. ISIC. IEEE International Conference on, IEEE; Berenbach, B., Paulish, D., Kazmeier, J., Rudorfer, A., Software & systems requirements engineering: in practice. McGraw-Hill (2009) Inc.; Gudmundsson, V., Lindvall, M., Aceto, L., Bergthorsson, J., Ganesan, D., (2016) Model-based testing of mobile systems--an empirical study on QuizUp android app, , Preprint; Sipser, M., (2006) Introduction to the Theory of Computation. Vol. 2, , Boston, Thomson course Dent Tech; Heineman, G.T., Pollice, G., Selkow, S., (2016) Algorithms in a nutshell: a practical guide, , O'Reilly Media, Inc; Hirschberg, D.S., Algorithms for the longest common subsequence problem (1977) Journal of the ACM (JACM), 24 (4), pp. 664-675; APPIUM, , http//appium.io/index.html? lang=en; Singh, S., Gadgil, R., Chudgor, A., Automated testing of mobile applications using scripting technique: a study on Appium (2014) International Journal of Current Engineering and Technology (IJCET), 4 (5), pp. 3627-3630; http://appium.io/index.html?lang=en; http://robotium.com; http://calaba.sh/; Rosenblum, M., Vmwares virtual platform (1999) Proceedings of hot chips, 1999, pp. 185-196; https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html; Agrawal, S., Chaudhuri, S., Kollar, L., Marathe, A., Narasayya, V., Syamala, M., Database tuning advisor for microsoft sql server 2005 (2005) Proceedings of the 2005 ACM SIGMOD international conference on Management of data, pp. 930-932. , ACM; MonkeyRunner, , http//developer.android.com/tools/help/monkeyrunner_concepts.html; https://apkpure.com/simple-notepad/org.mightyfrog.android.simplenotepad; https://apkpure.com/clock/com.google.android.deskclock","Ali, A.; Department of Information Systems, Egypt; email: amira.aly92@live.com",,,"John Wiley and Sons Ltd",,,,,20477481,,,,"English","J. Softw. Evol. Process",Article,"Final","",Scopus,2-s2.0-85055214444
"Hu J., Wei L., Liu Y., Cheung S.-C., Huang H.","56241329100;57191361065;55540648000;7202472792;57204236982;","A tale of two cities: How webview induces bugs to android applications",2018,"ASE 2018 - Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering",,,,"702","713",,7,"10.1145/3238147.3238180","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056516458&doi=10.1145%2f3238147.3238180&partnerID=40&md5=037d25235535ec66e571014f0f95cf25","Hong Kong University of Science and Technology, Hong Kong, Hong Kong; Southern University of Science and Technology, Shenzhen, China; Southern University of Science and Technology, United States","Hu, J., Hong Kong University of Science and Technology, Hong Kong, Hong Kong; Wei, L., Hong Kong University of Science and Technology, Hong Kong, Hong Kong, Southern University of Science and Technology, United States; Liu, Y., Southern University of Science and Technology, Shenzhen, China, Southern University of Science and Technology, United States; Cheung, S.-C., Hong Kong University of Science and Technology, Hong Kong, Hong Kong, Southern University of Science and Technology, United States; Huang, H., Hong Kong University of Science and Technology, Hong Kong, Hong Kong","WebView is a widely used Android component that augments a native app with web browser capabilities. It eases the interactions between an app's native code and web code. However, the interaction mechanism of WebView induces new types of bugs in Android apps. Understanding the characteristics and manifestation of these WebView-induced bugs (ωBugs for short) facilitates the correct usages of WebViews in Android apps. This motivates us to conduct the first empirical study on ωBugs based on those found in popular open-source Android apps. Our study identified the major root causes and consequences of ωBugs and made interesting observations that can be leveraged for detecting and diagnosing ωBugs. Based on the empirical study, we further propose an automated testing technique ωDroid to effectively expose ωBugs in Android apps. In our experiments, ωDroid successfully discovered 30 unique and previously-unknown ωBugs when applied to 146 open-source Android apps. We reported the 30 ωBugs to the corresponding app developers. Out of these 30 ωBugs, 14 were confirmed and 7 of them were fixed. This shows that ωDroid can effectively detect ωBugs that are of the developers' concern. © 2018 Association for Computing Machinery.","Android system WebView; Empirical study; GUI testing","Automation; Open source software; Program debugging; Testing; Android applications; Android apps; Automated testing; Empirical studies; GUI testing; Interaction mechanisms; Open sources; Webview; Android (operating system)",,,,,"16202917","The authors thank ASE 2018 reviewers and HKUST CASTLE group members for their constructive feedback. This work is supported by the Hong Kong RGC/GRF grant 16202917, MSRA collaborative research fund, Hong Kong PhD Fellowship Scheme, and the Nvidia academic program. The authors also would like to thank the Southern University of Science and Technology for the generous support on the research and travel.",,"(2009) WebKit GTK on (Electronic) Paper, , https://people.collabora.com/~bari/slides/webkit-irex-fosdem-2009.pdf; https://github.com/uberspot/2048-android, 2018. 2048; (2018) Aard Dictionary, , https://github.com/aarddict/android/; (2018) Activity Lifecycle, , https://developer.android.com/guide/components/activities/activity-lifecycle.html; (2018) Android Dashboards, , https://developer.android.com/about/dashboards/index.html; (2018) Android Lollipop, , https://developer.android.com/about/versions/lollipop.html; (2018) Android Monkey, , https://developer.android.com/studio/test/monkey.html; (2018) AnkiDroid, , https://github.com/ankidroid/Anki-Android/; (2018) AntennaPod, , https://github.com/AntennaPod/AntennaPod/; (2018) arXiv Mobile, , https://github.com/jdeslip/arxiv-mobile; (2018) Barcode Scanner, , https://github.com/zxing/zxing; (2018) Budget Watch, , https://github.com/brarcher/budget-watch; (2018) Building Web Apps in WebView, , https://developer.android.com/guide/webapps/webview.html; (2018) Cherry, , https://github.com/gsantner/cherrymusic-android; (2018) Crossword, , https://github.com/billthefarmer/crossword; (2018) Dandelion, , https://github.com/Diaspora-for-Android/dandelion; (2018) Diary, , https://github.com/billthefarmer/diary; (2018) Drinks, , https://github.com/amasciul/Drinks; (2018) EteSync, , https://github.com/etesync/android; (2018) F-Droid, , https://f-droid.org/en/; (2018) Forecastie, , https://github.com/martykan/forecastie; (2018) ForRunners, , https://github.com/brvier/ForRunners; (2018) Freifunk Auto Connect, , https://github.com/WIStudent/FreifunkAutoConnectApp; (2018) Gadgetbridge, , https://github.com/Freeyourgadget/Gadgetbridge/; (2018) Gift Card Guard, , https://github.com/brarcher/gift-card-guard; GitHub, , https://github.com, 2018; (2018) Google Play, , https://play.google.com/store/apps; (2018) Hybrid Apps More Vulnerable, , https://www.mobileworldlive.com/apps/focus-apps/hybrid-apps-more-vulnerable-security-specialist-says/; (2018) Kimai, , https://github.com/gsantner/kimai-android; (2018) LinCal, , https://github.com/felixwiemuth/LinCal; (2018) Migrating to WebView in Android 4.4, , https://developer.android.com/guide/webapps/migrating.html; (2018) MTG Familiar, , https://github.com/AEFeinstein/mtg-familiar; Web or Hybrid Apps? What'S The Difference?, , https://www.mobiloud.com/blog/native-web-or-hybrid-apps/, 2018; (2018) Nextcloud News Reader, , https://github.com/nextcloud/news-android/; (2018) OCReader, , https://github.com/schaal/ocreader/; (2018) OpenVPN for Android, , https://github.com/schwabe/ics-openvpn; (2018) Padland, , https://github.com/mikifus/padland; (2018) PocketHub, , https://github.com/pockethub/PocketHub/; (2018) Polar Clock, , https://github.com/beriain/PolarClock; (2018) RasPi Check, , https://github.com/eidottermihi/rpicheck; (2018) Reddinator, , https://github.com/micwallace/reddinator; (2018) RedReader, , https://github.com/QuantumBadger/RedReader/; (2018) Remove: Top Frame Navigations to Data URLs, , https://bugs.chromium.org/p/chromium/issues/detail?id=684011&desc=2; (2018) Rental Calc, , https://github.com/brarcher/rental-calc; (2018) Save For Offline, , https://github.com/JonasCz/save-for-offline; (2018) Serval Mesh, , https://github.com/servalproject/batphone; (2018), https://github.com/SteamGifts/SteamGifts, sg; (2018) Shortyz, , https://github.com/kebernet/shortyz; (2018) Slide, , https://github.com/ccrama/Slide/; (2018) SMS Backup+, , https://github.com/jberkel/sms-backup-plus; (2018) Snapcast, , https://github.com/badaix/snapcast; (2018) Stack Overflow, , https://stackoverflow.com; (2018) State of Application Development: 2017 Research Report, , https://www.outsystems.com/1/state-app-development-trends/; (2018) Termux, , https://github.com/termux/termux-app; (2018), https://home.cse.ust.hk/~jhuao/wDroid.html, Website; (2018) Twidere, , https://github.com/TwidereProject/Twidere-Android; (2018) UiAutomation, , https://developer.android.com/reference/android/app/UiAutomation.html; (2018) Vanilla Music, , https://github.com/vanilla-music/vanilla; (2018) Vespucci, , https://github.com/MarcusWolschon/osmeditor4android; (2018) Web Opac, , https://github.com/opacapp/opacclient; (2018) WebSettings, , https://developer.android.com/reference/android/webkit/WebSettings.html; (2018) WebView, , https://developer.android.com/reference/android/webkit/WebView.html; (2018) Wikipedia-Issue Tracker, , https://phabricator.wikimedia.org; (2018), https://github.com/wordpress-mobile/WordPress-Android/; Adamsen, C.Q., Mezzetti, G., Møller, A., Systematic execution of android test suites in adverse conditions (2015) Proceedings of The 2015 International Symposium on Software Testing and Analysis (ISSTA 2015), pp. 83-93. , ACM; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Proceedings of The 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA 2013), 48, pp. 641-660. , ACM; Baek, Y.-M., Bae, D.-H., Automated model-based android gui testing using multi-level gui comparison criteria (2016) Proceedings of The 31st IEEE/ACM International Conference on Automated Software Engineering (ASE 2016), pp. 238-249. , ACM; Chin, E., Wagner, D., Bifocals: Analyzing webview vulnerabilities in android applications (2013) International Workshop on Information Security Applications, pp. 138-159. , Springer; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) Proceedings of The 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA 2013), 48, pp. 623-640. , ACM; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015), pp. 429-440. , IEEE; Fan, L., Su, T., Chen, S., Meng, G., Liu, Y., Xu, L., Pu, G., Su, Z., Large-scale analysis of framework-specific exceptions in android apps (2018) 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE 2018); Fazzini, M., Orso, A., Automated cross-platform inconsistency detection for mobile apps (2017) Proceedings of The 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE 2017), pp. 308-318. , IEEE; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of The 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys 2014), pp. 204-217. , ACM; Huang, H., Wei, L., Liu, Y., Cheung, S.-C., Understanding and detecting callback compatibility issues for android applications (2018) 2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE 2018), , ACM; Jabbarvand, R., Malek, S., ΜDroid: An energy-aware mutation testing framework for Android (2017) Proceedings of The 2017 11th Joint Meeting on Foundations of Software Engineering (FSE 2017), pp. 208-219. , ACM; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of The 2013 International Symposium on Software Testing and Analysis (ISSTA 2013), pp. 67-77. , ACM; Lee, S., Dolby, J., Ryu, S., Hybridroid: Static analysis framework for Android hybrid applications (2016) 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE 2016), pp. 250-261. , IEEE; Li, T., Wang, X., Zha, M., Chen, K., Wang, X., Xing, L., Bai, X., Han, X., Unleashing the walking dead: Understanding cross-app remote infections on mobile webviews (2017) Proceedings of The 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS 2017), pp. 829-844. , ACM; Liu, Y., Xu, C., Cheung, S.-C., Characterizing and detecting performance bugs for smartphone applications (2014) Proceedings of The 36th International Conference on Software Engineering (ICSE 2014), pp. 1013-1024. , ACM; Liu, Y., Xu, C., Cheung, S.-C., Terragni, V., Understanding and detecting wake lock misuses for android applications (2016) Proceedings of The 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016), pp. 396-409. , ACM; Luo, T., Hao, H., Du, W., Wang, Y., Yin, H., Attacks on webView in the android system (2011) Proceedings of The 27th Annual Computer Security Applications Conference (ACSAC 2011), pp. 343-352. , ACM; Luo, T., Jin, X., Ananthanarayanan, A., Du, W., Touch-jacking attacks on web in android, ios, and windows phone (2012) International Symposium on Foundations and Practice of Security, pp. 227-243. , Springer; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of The 2013 9th Joint Meeting on Foundations of Software Engineering (FSE 2013), pp. 224-234. , ACM; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of The 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2014), pp. 599-609. , ACM; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proceedings of The 25th International Symposium on Software Testing and Analysis (ISSTA 2016), pp. 94-105. , ACM; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) ACM SIGSOFT Software Engineering Notes, 25, pp. 30-39. , ACM; Mutchler, P., Doupé, A., Mitchell, J., Kruegel, C., Vigna, G., A large-scale study of mobile web app security (2015) Proceedings of The Mobile Security Technologies Workshop (MoST 2015); Ocariza, F., Bajaj, K., Pattabiraman, K., Mesbah, A., An empirical study of client-side JavaScript bugs (2013) 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM 2013), pp. 55-64. , IEEE; Ocariza, F.S., Jr., Pattabiraman, K., Zorn, B., JavaScript errors in the wild: An empirical study (2011) 2011 IEEE 22nd International Symposium on Software Reliability Engineering (ISSRE 2011), pp. 100-109. , IEEE; Palomba, F., Salza, P., Ciurumelea, A., Panichella, S., Gall, H., Ferrucci, F., De Lucia, A., Recommending and localizing change requests for mobile apps based on user reviews (2017) Proceedings of The 39th International Conference on Software Engineering (ICSE 2017), pp. 106-117. , IEEE; Rizzo, C., Cavallaro, L., Kinder, J., (2017) BabelView: Evaluating The Impact of Code Injection Attacks in Mobile Webviews, , arXiv preprint 2017; Selakovic, M., Pradel, M., Performance issues and optimizations in javascript: An empirical study (2016) Proceedings of The 38th International Conference on Software Engineering (ICSE 2016), pp. 61-72. , ACM; Sexton, J., Chudnov, A., Naumann, D.A., Spartan Jester: End-to-end information flow control for hybrid Android applications (2017) 2017 IEEE Security and Privacy Workshops (SPW 2017), pp. 157-162. , IEEE; Shan, Z., Azim, T., Neamtiu, I., Finding resume and restart errors in android applications (2016) Proceedings of The 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2016), 51, pp. 864-880. , ACM; Song, W., Huang, Q., Huang, J., Understanding Javascript vulnerabilities in large real-world android applications (2018) IEEE Transactions on Dependable and Secure Computing, , 2018; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of Android apps (2017) Proceedings of The 2017 11th Joint Meeting on Foundations of Software Engineering (FSE 2017), pp. 245-256. , ACM; Thomas, D.R., Beresford, A.R., Coudray, T., Sutcliffe, T., Taylor, A., The lifetime of Android API vulnerabilities: Case study on the JavaScript-to-Java interface (2015) Cambridge International Workshop on Security Protocols, pp. 126-138. , Springer; Wei, L., Liu, Y., Cheung, S.-C., Taming Android fragmentation: Characterizing and detecting compatibility issues for Android apps (2016) Proceedings of The 31st IEEE/ACM International Conference on Automated Software Engineering (ASE 2016), pp. 226-237. , ACM; Wei, L., Liu, Y., Cheung, S.-C., OASis: Prioritizing static analysis warnings for Android apps based on app user reviews (2017) Proceedings of The 2017 11th Joint Meeting on Foundations of Software Engineering (FSE 2017), pp. 672-682. , ACM; Zaeem, R.N., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) 2014 IEEE Seventh International Conference on Software Testing, Verification and Validation (ICST 2014), pp. 183-192. , IEEE","Cheung, S.-C.; Hong Kong University of Science and TechnologyHong Kong; email: scc@cse.ust.hk","Kastner C.Huchard M.Fraser G.","Berger Levrault;et al.;Huawei;Inria;Mobioos;Toyota InfoTechnology Center","Association for Computing Machinery, Inc","33rd IEEE/ACM International Conference on Automated Software Engineering, ASE 2018","3 September 2018 through 7 September 2018",,140337,,9781450359375,,,"English","ASE - Proc. ACM/IEEE Int. Conf. Autom. Soft. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-85056516458
"Esparcia-Alcázar A.I., Almenar F., Vos T.E.J., Rueda U.","6506045663;56703382600;8980537100;6507265119;","Using genetic programming to evolve action selection rules in traversal-based automated software testing: results obtained with the TESTAR tool",2018,"Memetic Computing","10","3",,"257","265",,7,"10.1007/s12293-018-0263-8","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048276094&doi=10.1007%2fs12293-018-0263-8&partnerID=40&md5=aac698c2c6ca6d50924e17a8f1042531","Department of Systems Engineering and Control, Universitat Politècnica de València, Valencia, Spain; Software Production Methods Research Centre, Universitat Politècnica de València, Valencia, Spain; Open Universiteit, Heerlen, Netherlands; Etra I+D, Valencia, Spain","Esparcia-Alcázar, A.I., Department of Systems Engineering and Control, Universitat Politècnica de València, Valencia, Spain, Software Production Methods Research Centre, Universitat Politècnica de València, Valencia, Spain; Almenar, F., Software Production Methods Research Centre, Universitat Politècnica de València, Valencia, Spain, Etra I+D, Valencia, Spain; Vos, T.E.J., Software Production Methods Research Centre, Universitat Politècnica de València, Valencia, Spain, Open Universiteit, Heerlen, Netherlands; Rueda, U., Software Production Methods Research Centre, Universitat Politècnica de València, Valencia, Spain","Traversal-based automated software testing involves testing an application via its graphical user interface (GUI) and thereby taking the user’s point of view and executing actions in a human-like manner. These actions are decided on the fly, as the software under test (SUT) is being run, as opposed to being set up in the form of a sequence prior to the testing, a sequence that is then used to exercise the SUT. In practice, random choice is commonly used to decide which action to execute at each state (a procedure commonly referred to as monkey testing), but a number of alternative mechanisms have also been proposed in the literature. Here we propose using genetic programming (GP) to evolve such an action selection strategy, defined as a list of IF-THEN rules. Genetic programming has proved to be suited for evolving all sorts of programs, and rules in particular, provided adequate primitives (functions and terminals) are defined. These primitives must aim to extract the most relevant information from the SUT and the dynamics of the testing process. We introduce a number of such primitives suited to the problem at hand and evaluate their usefulness based on various metrics. We carry out experiments and compare the results with those obtained by random selection and also by Q-learning, a reinforcement learning technique. Three applications are used as Software Under Test (SUT) in the experiments. The analysis shows the potential of GP to evolve action selection strategies. © 2018, Springer-Verlag GmbH Germany, part of Springer Nature.","Action selection for testing; Automated software testing via the GUI; Genetic programming; Testing metrics","Application programs; Automation; Genetic algorithms; Genetic programming; Graphical user interfaces; Reinforcement learning; Action selection; Automated software testing; Graphical user interfaces (GUI); If-then rules; Random selection; Reinforcement learning techniques; Testing metrics; Testing process; Software testing",,,,,,,,"Aho, P., Menz, N., Rty, T., Dynamic reverse engineering of GUI models for testing (2013) Proceedings of 2013 International Conference on Control, Decision and Information Technologies (CoDIT’13); Aho, P., Oliveira, R., Algroth, E., Vos, T., Evolution of automated testing of software systems through graphical user interface (2016) Procs. of the 1St International Conference on Advances in Computation, Communications and Services, 2016, pp. 16-21. , ACCSE, Valencia; Alegroth, E., Feldt, R., Ryrholm, L., Visual GUI testing in practice: challenges, problems and limitations (2014) Empir Softw Eng, 20, pp. 694-744; Barr, E.T., Harman, M., McMinn, P., Shahbaz, M., Yoo, S., The oracle problem in software testing: a survey (2015) IEEE Trans Softw Eng, 41 (5), pp. 507-525; Bauersfeld, S., Vos, T.E.J., A reinforcement learning approach to automated GUI robustness testing (2012) Fast Abstracts of the 4Th Symposium on Search-Based Software Engineering (SSBSE 2012), pp. 7-12; Bauersfeld, S., de Rojas, A., Vos, T., Evaluating rogue user testing in industry: An experience report (2014) 2014 IEEE Eighth International Conference on Research Challenges in Information Science (RCIS), pp. 1-10. , https://doi.org/10.1109/RCIS.2014.6861051; Bauersfeld, S., Vos, T.E.J., Condori-Fernández, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2014, p. 4. , Torino, Italy, September 18–19, 2014; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a GUI (2011) Search Based Software Engineering: Third International Symposium, SSBSE 2011, 2011, pp. 173-187. , Cohen MB, Ó Cinnéide M, Szeged, Hungary, September 10-12, Proceedings. Springer Berlin Heidelberg, Berlin, Heidelberg; Brameier, M.F., Banzhaf, W., (2010) Linear genetic programming, , 1, Springer, New York; Chaudhary, N., Sangwan, O., Metrics for event driven software (2016) Int J Adv Comput Sci Appl, 7 (1), pp. 85-89; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U., Vos, T.E., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) Proceedings of META 2016 6Th International Conference on Metaheuristics and Nature Inspired Computing, pp. 174-180; Esparcia-Alcázar, A.I., Almenar, F., Rueda, U., Vos, T.E.J., Evolving rules for action selection in automated testing via genetic programming–a first approach (2017) Applications of Evolutionary Computation: 20Th European Conference, Evoapplications 2017, pp. 82-95. , https://doi.org/10.1007/978-3-319-55792-2_6, Squillero G, Sim K, Amsterdam, The Netherlands, April 19–21, 2017, Proceedings, part II. Springer; Esparcia-Alcázar, A.I., Moravec, J., Fitness approximation for bot evolution in genetic programming (2013) Soft Comput, 17 (8), pp. 1479-1487; He, W., Zhao, R., Zhu, Q., Integrating evolutionary testing with reinforcement learning for automated test generation of object-oriented software (2015) Chin J Electron, 24 (1), pp. 38-45; Koza, J.R., (1992) Genetic programming: on the programming of computers by means of natural selection, , MIT Press, Cambridge; Lehman, J., Stanley, K.O., Novelty search and the problem with objectives (2011) Genetic programming theory and practice IX, genetic and evolutionary computation, pp. 37-56. , Riolo R, Vladislavleva E, Moore JH, (eds), Springer, New York; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of ESEC/FSE 2001, pp. 256-267; Rueda, U., Vos, T.E.J., Almenar, F., Martínez, M.O., Esparcia-Alcázar, A.I., TESTAR: From academic prototype towards an industry-ready tool for automated testing at the user interface level (2015) Actas De Las XX Jornadas De Ingeniería Del Software Y Bases De Datos, 2015, pp. 236-245. , Canos JH, Gonzalez Harbour M, JISBD; Seesing, A., Gross, H.G., A genetic programming approach to automated test generation for object-oriented software (2006) Int Trans Syst Sci Appl, 1 (2), pp. 127-134; Vos, T.E., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TESTAR: tool support for test automation at the user interface level (2015) Int J Inf Syst Model Des, 6 (3), pp. 46-83; Wappler, S., Wegener, J., Evolutionary unit testing of object-oriented software using strongly-typed genetic programming (2006) Proceedings of the 8Th Annual Conference on Genetic and Evolutionary Computation, GECCO’06, pp. 1925-1932. , https://doi.org/10.1145/1143997.1144317, ACM, New York, NY, USA; Watkins, C., (1989) Learning from Delayed Rewards, , Ph.D. Thesis. Cambridge University","Esparcia-Alcázar, A.I.; Department of Systems Engineering and Control, Spain; email: aesparcia@ieee.org",,,"Springer Verlag",,,,,18659284,,,,"English","Memetic Comput.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85048276094
"Wongkampoo S., Kiattisin S.","57203898901;25655027300;","Atom-Task Precondition Technique to Optimize Large Scale GUI Testing Time based on Parallel Scheduling Algorithm",2018,"ICSEC 2017 - 21st International Computer Science and Engineering Conference 2017, Proceeding",,, 8443913,"229","232",,2,"10.1109/ICSEC.2017.8443913","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053449389&doi=10.1109%2fICSEC.2017.8443913&partnerID=40&md5=d63689c7fa020ee5273d48833bad1a52","Information Technology Management, Faculty of Engineering, Mahidol University, Nakhon Pathom, Thailand","Wongkampoo, S., Information Technology Management, Faculty of Engineering, Mahidol University, Nakhon Pathom, Thailand; Kiattisin, S., Information Technology Management, Faculty of Engineering, Mahidol University, Nakhon Pathom, Thailand","The modern software development mostly aims to reduce a development time. The product time to market must be fast for quick gathering feedback from the user. DevOps brings the continuous practice to improve software development process on both continuous integration and continuous delivery. In continuous processes, software testing is the most time-consuming part which significant for overall process especially graphic user interface or GUI. Several techniques can reduce GUI testing time such as a distributed testing which is help UI testing running in parallel on a distributed machine. By running distributed GUI testing initially without experience or knowledge from an expert lead to the un-optimized speed of running test or even the future problem such as an unpredictable number of worker, the bottleneck of the worker node. This paper has purpose the Atom-Task precondition technique, the technique for filtering the test before running the parallel testing process to optimize the testing time and avoiding worker bottleneck problem and also remain an ability to scale the worker process for desired testing time with predictable resource for large-scale testing in the distributed environment. © 2017 IEEE.","Automated Testing; Continuous Integration; DevOps; Distributed Testing; Parallel Testing; Selenium; WebDriver","Ability testing; Graphical user interfaces; Scheduling algorithms; Selenium; Software design; Automated testing; Continuous integrations; DevOps; Distributed testing; Parallel testing; WebDriver; Integration testing",,,,,,,,"Feitelson, D., Frachtenberg, E., Beck, K., (2013) Development and Deployment at Facebook, 17 (4), pp. 8-17. , July; Henderson, F., (2017) Software Engineering at Google, , arXiv preprint; (2017) InfoQ, , https://www.infoq.com/presentations/Developmentat-Google, Development at the Speed and Scale of Google Retrieved 12 June 2017, from; Wilsenach, R., (2015) Bliki: DevOpsCulture. Martinfowler.com, , https://martinfowler.com/bliki/DevOpsCulture.html, Retrieved 12 June 2017, from; Fowler, M., (2013) ContinuousDelivery. Martinfowler.com, , https://martinfowler.com/bliki/ContinuousDelivery.html, Retrieved 12 June 2017, from; Fowler, M., (2006) Continuous Integration. Martinfowler.com, , https://martinfowler.com/articles/continuousIntegration.html, Retrieved 12 June 2017, from; (2014) ThoughtWorks, , https://www.thoughtworks.com/insights/blog/casecontinuous-delivery, The Case for Continuous Delivery Retrieved 12 June 2017, from; (2017) Google Testing Blog, , https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-endtests.html, Just Say No to More End-to-End Tests Retrieved 12 June 2017, from; Wen, H.L., PATS: A parallel GUI testing framework for android applications (2015) 2015 IEEE 39th Annual Computer Software and Applications Conference; Yao, Y., Wang, X., A distributed, cross-platform automation testing framework for GUI-driven applications (2012) Proceedings of 2012 2nd International Conference on Computer Science and Network Technology; Fowler, M., (2012) Bliki: TestPyramid. Martinfowler.com. Retrieved 28 August 2017, , https://martinfowler.com/bliki/TestPyramid.html; Shahin, M., Continuous integration, delivery and deployment: A systematic review on approaches, tools, challenges and Practices (2017) IEEE Access, 5, pp. 3909-3943; Delgado, S., Parallel testing techniques for optimizing test program execution and reducing test time (2008) 2008 IEEE Autotestcon; Altaf, I., Survey on selenium tool in software testing (2015) 2015 International Conference on Green Computing and Internet of Things (ICGCIoT); (2017) Docs.seleniumhq.org, , http://docs.seleniumhq.org/docs/07_selenium_grid.jsp, Selenium-Grid - Selenium Documentation Retrieved 12 June 2017, from",,,,"Institute of Electrical and Electronics Engineers Inc.","21st International Computer Science and Engineering Conference, ICSEC 2017","15 November 2017 through 18 November 2017",,138947,,9781538607879,,,"English","ICSEC - Int. Comput. Sci. Eng. Conf. , Proceeding",Conference Paper,"Final","",Scopus,2-s2.0-85053449389
"Pezzè M., Rondena P., Zuddas D.","35581208100;57205661185;56538926400;","Automatic GUI testing of desktop applications: An empirical assessment of the state of the art",2018,"Companion Proceedings for the ISSTA/ECOOP 2018 Workshops",,,,"54","62",,3,"10.1145/3236454.3236489","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061013851&doi=10.1145%2f3236454.3236489&partnerID=40&md5=6e51365cd5574e42390f9b18e4a21fa2","University of Milano-Bicocca, USI Universit della Svizzera Italiana, Italy; University of Milano-Bicocca, Italy; USI Universit della Svizzera Italiana, Italy","Pezzè, M., University of Milano-Bicocca, USI Universit della Svizzera Italiana, Italy; Rondena, P., University of Milano-Bicocca, Italy; Zuddas, D., USI Universit della Svizzera Italiana, Italy","Testing software applications interacting with their graphical user interface, in short GUI testing, is both important, since it can reveal subtle and annoying bugs, and expensive, due to myriads of possible GUI interactions. Recent attempts to automate GUI testing have produced several techniques that address the problem from different perspectives, sometimes focusing only on some specific platforms, such as Android or Web, and sometimes targeting only some aspects of GUI testing, like test case generation or execution. Although GUI test case generation techniques for desktop applications were the first to be investigated, this area is still actively researched and its state of the art is continuously expanding. In this paper we comparatively evaluate the state-of-The-Art for automatic GUI test cases generation for desktop applications, by presenting a set of experimental results obtained with the main GUI testing tools for desktop applications available. The paper overviews the state of the art in GUI testing, discusses differences, similarities and complementarities among the different techniques, experimentally compares strengths and weaknesses, and pinpoints the open problems that deserve further investigation. © 2018 ACM.","automatic test case generation; empirical comparison; GUI testing","Application programs; Graphical user interfaces; Program debugging; Automatic gui testing; Automatic test-case generations; Desktop applications; Empirical - comparisons; Empirical assessment; GUI testing; Test case generation; Test cases generation; Software testing",,,,,,,,"Arlt, S., Podelski, A., Bertolini, C., Schaf, M., Banerjee, I., Memon, A.M., Lightweight static analysis for GUI testing (2012) Proceedings of the International Symposium on Software Reliability Engineering (ISSRE 12), pp. 301-310. , IEEE Computer Society; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694. , 2013; Bauersfeld, S., Vos Tanja, E.J., User interface level testing with TESTAR; What about more sophisticated action specification and selection? (2014) Seminar Series on Advanced Techniques and Tools for Software Evolution (SATToSE 14), pp. 60-78. , Springer; Benwestgarth, , https://sourceforge.net/projects/crosswordsage/, Accessed 2018-04-30. Crossword Sage; Buddi, , http://buddi.digitalcave.ca, Accessed 2018-04-30 The Digital Cave; Cheng, L., Chang, J., Yang, Z., Wang, C., GUICat: GUI testing as a service (2016) Proceedings of the International Conference on Automated Software Engineering (ASE 16), pp. 858-863. , ACM; Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Proceedings of the International Conference on Automated Software Engineering (ASE 16), pp. 429-440. , IEEE Computer Society; Cobertura, , http://cobertura.github.io/cobertura/, Accessed 2018-04-30 Cobertura; Ganov, S., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing GUI applications (2009) Formal Methods and Software Engineering, pp. 69-87. , Springer; Gross, F., Fraser, G., Zeller, A., Search-based system testing:high coverage, no false alarms (2012) Proceedings of the International Symposium on Software Testing and Analysis ISSTA 12, pp. 67-77. , ACM; IBM, , http://www-03.ibm.com/software/products/en/functional, Accessed 2018-04-30 Rational Functional Tester; Jiri Kovalsky, , http://rachota.sourceforge.net/en/index.html, Accessed 2018-04-30 Rachota; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) Proceedings of the International Conference on Software Testing, Verification and Validation ICST 12, pp. 81-90. , IEEE Computer Society; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Automatic testing of GUI-based applications (2014) Software Testing, Verification and Reliability, 24 (5), pp. 341-366. , 2014; Mariani, L., Pezzè, M., Zuddas, D., Recent advances in automatic black-box testing (2015) Advances in Computers, , Elsevier; Mariani, L., Pezzè, M., Zuddas, D., Augusto: Exploiting popular functionalities for the generation of semantic gui Tests with Oracles (2018) Proceedings of the International Conference on Software Engineering (ICSE 18), , to appear; Memon, A.M., Banerjee, I., Nagarajan, A., Gui ripping:reverse engineering of graphical user interfaces for testing (2003) Proceedings of the Working Conference on Reverse Engineering (WCRE 03, pp. 260-269. , IEEE Computer Society; Microsoft, , https://msdn.microsoft.com/en-us/library/ee620411.aspx, Accessed 2018-04-30 Spec Explorer; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR:An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105. , 2014; Nguyen, C.D., Marchetto, A., Tonella, P., Automated oracles: An empirical study on cost and effectiveness (2013) Proceedings of the European Software Engineering Conference Held Jointly with the ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE 13), pp. 136-146. , ACM; SeleniumHQ, , https://www.seleniumhq.org, Accessed 2018-04-30 Selenium; Adrian Smith, , http://upm.sourceforge.net/index.html, Accessed 2018-04-30 Universal Password Manager; Tricentis, , https://www.tricentis.com/software-Testing-Tools/, Accessed 2018-04-30 Tosca; Vos Tanja, E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) International Journal of Information System Modeling and Design, 6 (3), pp. 46-83. , 2015; Yuan, X., Cohen, M.B., Memon, A.M., GUI Interaction Testing:Incorporating Event Context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574. , 2011",,,"ACM Special Interest Group on Programming Languages (SIGPLAN);ACM Special Interest Group on Software Engineering (SIGSOFT)","Association for Computing Machinery, Inc","2018 International Symposium on Software Testing and Analysis, ISSTA 2018","16 July 2018 through 21 July 2018",,143972,,9781450359399,,,"English","Companion Proc. ISSTA/ECOOP Workshops",Conference Paper,"Final","",Scopus,2-s2.0-85061013851
"Ardito L., Coppola R., Torchiano M., Alégroth E.","36184897700;57191261885;6602571197;55843479600;","Towards automated translation between generations of GUI-based tests for mobile devices",2018,"Companion Proceedings for the ISSTA/ECOOP 2018 Workshops",,,,"46","53",,5,"10.1145/3236454.3236488","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060987331&doi=10.1145%2f3236454.3236488&partnerID=40&md5=4aa93951de321d7afe45083cf00e2916","Politecnico di Torino Turin, Italy; Blekinge Institute of Technology Karlskrona, Sweden","Ardito, L., Politecnico di Torino Turin, Italy; Coppola, R., Politecnico di Torino Turin, Italy; Torchiano, M., Politecnico di Torino Turin, Italy; Alégroth, E., Blekinge Institute of Technology Karlskrona, Sweden","Market demands for faster delivery and higher software quality are progressively becoming more stringent. A key hindrance for software companies to meet such demands is how to test the software due to to the intrinsic costs of development, maintenance and evolution of testware. Especially since testware should be defined, and aligned, with all layers of system under test (SUT), including all graphical user interface (GUI) abstraction levels. These levels can be tested with different generations of GUI-based test approaches, where 2 nd generation, or Layout-based, tests leverage GUI properties and 3 rd generation, or Visual, tests make use of image recognition. The two approaches provide different benefits and drawbacks and are seldom used together because of the aforementioned costs, despite growing academic evidence of the complementary benefits. In this work we propose the proof of concept of a novel two-step translation approach for Android GUI testing that we aim to implement, where a translator first creates a technology independent script with actions and elements of the GUI, and then translates it to a script with the syntax chosen by the user. The approach enables users to translate Layout-based to Visual scripts and vice versa, to gain the benefits (e.g. robustness, speed and ability to emulate the user) of both generations, whilst minimizing the drawbacks (e.g. development and maintenance costs). We outline our approach from a technical perspective, discuss some of the key challenges with the realization of our approach, evaluate the feasibility and the advantages provided by our approach on an open-source Android application, and discuss the potential industrial impact of this work. © 2018 ACM.",,"Android (operating system); Computer software selection and evaluation; Costs; Graphical user interfaces; Image recognition; Open source software; Testing; Abstraction level; Android applications; Automated translation; Graphical user interfaces (GUI); Proof of concept; Software Quality; System under test; Technology independent; Software testing",,,,,,,,"Alégroth, E., Feldt, R., On the long-Term use of visual gui testing in industrial practice: A case study (2017) Empirical Software Engineering, 22 (6), pp. 2937-2971. , 2017; Alégroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual gui testing:An empirical study (2015) Software Testing, Verification and Validation (ICST) 2015 IEEE 8th International Conference on, pp. 1-10. , IEEE; Alégroth, E., Nass, M., Olsson, H.H., JAutomate: A tool for system-And acceptance-Test automation (2013) Software Testing, Verification and Validation (Icst) 2013 Ieee Sixth International Conference on, pp. 439-446. , IEEE; Anjum, H., Imran Babar, M., Jehanzeb, M., Khan, M., Chaudhry, S., Sultana, S., Shahid, Z., Nazir Bhatti, S., A comparative analysis of quality assurance of mobile applications using Automated Testing Tools (2017) International Journal of Advanced Computer Science and APPLICATIONS, 8 (7), pp. 249-255. , 2017; Coppola, R., Morisio, M., Torchiano, M., Scripted gui testing of android apps: A study on diffusion, evolution and Fragility (2017) Proceedings of the 13th International Conference on Predictive Models and Data Analytics in Software Engineering, pp. 22-32. , ACM; Coppola, R., Raffero, E., Torchiano, M., Automated mobile ui test fragility: An exploratory assessment study on android (2016) Proceedings of the 2nd International Workshop on User Interface Test Automation, pp. 11-20. , ACM; Fazzini, M., De A Freitas, E.N., Roy Choudhary, S., Orso, A., Barista: A technique for recording, encoding, and running platform independent android tests (2017) Software Testing, Verification and Validation (ICST 2017) IEEE International Conference on, pp. 149-160. , IEEE; Itkonen, J., Rautiainen, K., Exploratory testing: A multiple case study (2005) Empirical Software Engineering 2005 2005 International Symposium on, p. 10. , IEEE; Knych, T.W., Baliga, A., Android application development and testability (2014) Proceedings of the 1st International Conference on Mobile Software Engineering and Systems, pp. 37-40. , ACM; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), pp. 1-10. , https://doi.org/10.1109/ICST.2015.7102609; Kropp, M., Morales, P., Automated GUI testing on the Android platform (2010) Testing Software and Systems, 2010, p. 67; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. DOM-based web locators: An empirical study (2014) International Conference on Web Engineering, pp. 322-340. , Springer; Linares-Vásquez, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., How do developers test android applications? (2017) Software Maintenance and Evolution (ICSME) 2017 IEEE International Conference on, pp. 613-622. , IEEE; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology (TOSEM, 18 (2), p. 4. , 2008; Stahl, D., Bosch, J., Modeling continuous integration practice differences in industry software development (2014) Journal of Systems and Software, 87, pp. 48-59. , 2014; Yeh, T., Chang, T., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192. , ACM; Zhang, S., Lö, H., Ernst, M.D., Automatically repairing broken workflows for evolving GUI applications (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 45-55. , ACM",,,"ACM Special Interest Group on Programming Languages (SIGPLAN);ACM Special Interest Group on Software Engineering (SIGSOFT)","Association for Computing Machinery, Inc","2018 International Symposium on Software Testing and Analysis, ISSTA 2018","16 July 2018 through 21 July 2018",,143972,,9781450359399,,,"English","Companion Proc. ISSTA/ECOOP Workshops",Conference Paper,"Final","",Scopus,2-s2.0-85060987331
"Riccio V., Amalfitano D., Fasolino A.R.","57214054052;25926238800;7006159957;","Is this the lifecycle we really want?: An automated black-box testing approach for Android activities",2018,"Companion Proceedings for the ISSTA/ECOOP 2018 Workshops",,,,"68","77",,4,"10.1145/3236454.3236490","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060981509&doi=10.1145%2f3236454.3236490&partnerID=40&md5=fd330b6ee5f5adcd741e70027a21cf2d","University of Naples Federico II, Naples, Italy","Riccio, V., University of Naples Federico II, Naples, Italy; Amalfitano, D., University of Naples Federico II, Naples, Italy; Fasolino, A.R., University of Naples Federico II, Naples, Italy","Android is today the world's most popular mobile operating system and the demand for quality to Android mobile apps has grown together with their spread. Testing is a well-known approach for assuring the quality of software applications but Android apps have several peculiarities compared to traditional software applications that have to be taken into account by testers. Several studies have pointed out that mobile apps suffer from issues that can be attributed to Activity lifecycle mishandling, e.g. crashes, hangs, waste of system resources. Therefore the lifecycle of the Activities composing an app should be properly considered by testing approaches. In this paper we propose ALARic, a fully automated Black-Box Event-based testing technique that explores an application under test for detecting issues tied to the Android Activity lifecycle. ALARic has been implemented in a tool. We conducted an experiment involving 15 real Android apps that showed the effectiveness of ALARic in finding GUI failures and crashes tied to the Activity lifecycle. In the study, ALARic proved to be more effective in detecting crashes than Monkey, the state-of-The practice automated Android testing tool. © 2018 ACM.",,"Application programs; Automation; Black-box testing; Life cycle; Android activities; Application under tests; Mobile operating systems; Quality of softwares; Software applications; State of the practice; System resources; Testing technique; Android (operating system)",,,,,,,,"Quist Adamsen, C., Mezzetti, G., Møller, A., Systematic Execution of Android Test Suites in Adverse Conditions (2015) Proceedings of the 2015 International Symposium on Software Testing and Analysis (ISSTA 2015), pp. 83-93. , http://doi.acm.org/10.1145/2771783.2771786, ACM, Baltimore, MD, USA; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., Rita Fasolino, A., A general framework for comparing automatic testing techniques of Android mobile apps (2017) Journal of Systems and Software, 125, pp. 322-343. , 2017; Amalfitano, D., Rita Fasolino, A., Tramontana, P., Robbins, B., Testing android mobile applications: Challenges, strategies, and approaches (2013) Advances in Computers, 89 (2013), pp. 1-52; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , Sept 2015; Amalfitano, D., Riccio, V., Paiva, R.A.C., Rita Fasolino, A., Why does the orientation change mess up my Android application? from GUI failures to code faults (2018) Softw. Test., Verif. Reliab, 2018 (28), p. 1; Belli, F., Beyazit, M., Memon, A., Testing is an event-centric activity (2012) Software Security and Reliability Companion (SERE-C 2012), pp. 198-206. , IEEE Sixth International Conference on; Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we There Yet? (E) (2015) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE) (ASE 15), pp. 429-440. , IEEE Computer Society, Washington DC, USA; Franke, D., Kowalewski, S., Weise, C., Prakobkosol, N., Testing conformance of life cycle dependent properties of mobile applications (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, pp. 241-250; Hu, G., Yuan, X., Tang, Y., Yang, J., Efficiently, effectively detecting mobile app bugs with appdoctor (2014) Proceedings of the Ninth European Conference on Computer Systems (EuroSys 14, p. 15. , ACM, New York, NY, USA, Article 18; Jun, M., Sheng, L., Shengtao, Y., Xianping, T., Jian, L., Leakdaf: An automated tool for detecting leaked activities and fragments of Android Applications (2017) 2017 IEEE 41st Annual Computer Software and Applications Conference (COMPSAC, 1, pp. 23-32; Lelli, V., Blouin, A., Baudry, B., Classifying and Qualifying GUI Defects (2015) 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST, pp. 1-10; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE, pp. 599-609. , ACM, New York, NY, USA2014; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis (ISSTA, pp. 94-105. , 2016. ACM, New York, NY, USA; Méndez-Porras, A., Méndez-Marín, G., Tablada-Rojas, A., Nieto Hidalgo, M., Manuel García-Chamizo, J., Jenkins, M., Martínez, A., A distributed bug analyzer based on user-interaction features for mobile apps (2017) Journal of Ambient Intelligence and Humanized Computing, 8 (4), pp. 579-591. , 2017. 01 Aug; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application Crashes (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 33-44; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Automation of Software Test (AST) 2012 7th International Workshop on, pp. 29-35. , IEEE, Zurich, Switzerland; Shan, Z., Azim, T., Neamtiu, I., Finding resume and restart errors in android applications (2016) SIGPLAN Not, 51 (10), pp. 864-880. , Oct 2016; (2016) Number of Smartphone Users Worldwide from 2014 to 2019 (In Millions, , https://www.statista.com/statistics/330695/number-of-smartphone-users-worldwide/, Statista; (2017) Global Market Share Held by the Leading Smartphone Operating Systems in Sales to End Users from 1st Quarter 2009 to 1st Quarter 2017, , https://www.statista.com/statistics/266136/global-market-share-held-by-smartphone-operating-systems/, Statista; Per Runeson, C., Hst, M., Ohlsson, M.C., Regnell, B., Wessln, A., (2012) Experimentation in Software Engineering, , Springer Publishing Company, Incorporated; Nokhbeh Zaeem, R., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile Apps (2014) Proceedings of the 2014 IEEE International Conference on Software Testing, Verification, and Validation (ICST 14), pp. 183-192. , IEEE Computer Society, Washington DC, USA; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) J. Syst. Softw, 117, pp. 334-356. , C July; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Are we really there yet in an Industrial Case? Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016), pp. 987-992. , 2016. ACM, New York, NY, USA; Zheng, H., Li, D., Liang, B., Zeng, X., Zheng, W., Deng, Y., Lam, W., Xie, T., Automated test input generation for android: Towards getting there in an Industrial Case (2017) Proceedings of the 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP 17, pp. 253-262. , IEEE Press, Piscataway, NJ, USA",,,"ACM Special Interest Group on Programming Languages (SIGPLAN);ACM Special Interest Group on Software Engineering (SIGSOFT)","Association for Computing Machinery, Inc","2018 International Symposium on Software Testing and Analysis, ISSTA 2018","16 July 2018 through 21 July 2018",,143972,,9781450359399,,,"English","Companion Proc. ISSTA/ECOOP Workshops",Conference Paper,"Final","",Scopus,2-s2.0-85060981509
"Coppola R., Morisio M., Torchiano M.","57191261885;6701428565;6602571197;","Maintenance of android widget-based GUI testing: A taxonomy of test case modification causes",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018",,,,"151","158",,4,"10.1109/ICSTW.2018.00044","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050963952&doi=10.1109%2fICSTW.2018.00044&partnerID=40&md5=f18ff82046660602d9f7542da7de4020","Department of Computer and Automation Engineering, Politecnico di Torino, Turin, Italy","Coppola, R., Department of Computer and Automation Engineering, Politecnico di Torino, Turin, Italy; Morisio, M., Department of Computer and Automation Engineering, Politecnico di Torino, Turin, Italy; Torchiano, M., Department of Computer and Automation Engineering, Politecnico di Torino, Turin, Italy","Automated GUI testing is a fundamental part of the V&V process of every software, but - especially for fast evolving applications - is linked to relevant maintenance costs. Android (and mobile, in general) apps are also particularly prone to fragility, i.e. even minor modifications in the graphical user interface may induce relevant adaptation effort on test code. Based on a preliminary exploration about the evolution and fragility of test suites that we made on a set of nearly 20 thousand Android open-source projects hosted on GitHub, we performed a deeper inspection about the causes underlying the modifications in test classes and methods. We manually examined a set of 423 projects featuring the Espresso automated GUI testing tool, and 945 diff files containing modifications in test methods. We derived a set of 27 different causes of modifications, that we grouped into nine different macro-categories, two related to modifications performed just in code and application logic, and seven pertaining modifications in the GUI functioning and appearance, and hence related to our definition of GUI testing fragility. Based on the set of projects we inspected, we conclude that modifications related to changes in the GUI occured in 55% of modified test methods, a higher frequency than the ones related to changes in test logic only (35%) and to adaptations to modified application logic (27%). The described taxonomy can serve as a basis for further research, aimed at giving guidelines to developers to avoid fragility, and reduce the maintenance costs for automated test suites for Android applications. © 2018 IEEE.","Automated Software Testing; GUI Testing; Mobile Development; Software Evolution; Software Maintenance","Android (operating system); Application programs; Automation; Computer circuits; Computer software maintenance; Costs; Graphical user interfaces; Macros; Open source software; Taxonomies; Testing; Verification; Android applications; Application logic; Automated software testing; GUI testing; Higher frequencies; Mobile Development; Open source projects; Software Evolution; Software testing",,,,,"Tim and Karen Hixon Foundation","Acknowledgment. This work was supported by a fellowship from TIM.",,"Kochhar, P.S., Understanding the test automation culture of app developers (2015) Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference On. IEEE; Coppola, R., Raffero, E., Torchiano, M., Automated mobile ui test fragility: An exploratory assessment study on android (2016) Proceedings of the 2nd International Workshop on User Interface Test Automation. ACM; Coppola, R., Morisio, M., Torchiano, M., Evolution and fragilities in scripted GUI testing of android applications (2017) Proceedings of the 3rd International Workshop on User Interface Test Automation. ACM; Coppola, R., Morisio, M., Torchiano, M., Scripted ui testing of android apps: A study on diffusion, evolution and fragility (2017) Proceedings of the 13th International Conference on Predictive Models and Data Analytics in Software Engineering. ACM; Kropp, M., Morales, P., (2010) Automated GUI Testing on the Android Platform, p. 67. , Testing Software and Systems; Wen, H.-L., Pats: A parallel gui testing framework for android applications (2015) Computer Software and Applications Conference (COMPSAC), 2015 IEEE 39th Annual, 2. , IEEE; Algroth, E., Feldt, R., Kolstrm, P., Maintenance of automated test suites in industry: An empirical study on Visual GUI Testing (2016) Information and Software Technology, 73, pp. 66-80; Moran, K., Crashscope: A practical tool for automated testing of android applications (2017) Proceedings of the 39th International Conference on Software Engineering Companion. IEEE Press; Zhauniarovich, Y., Towards black box testing of Android apps (2015) Availability, Reliability and Security (ARES), 2015 10th International Conference On. IEEE; Liu, C.-H., Capture-replay testing for android applications (2014) Computer, Consumer and Control (IS3C), 2014 International Symposium On. IEEE; Shah, G., Shah, P., Muchhala, R., Software testing automation using appium (2014) International Journal of Current Engineering and Technology, 4 (5), pp. 3528-3531; Zadgaonkar, H., (2013) Robotium Automated Testing for Android, , Packt Publishing Ltd; Amalfitano, D., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) FASE, 13; Anureet, K., Review of mobile applications testing with automated techniques (2015) Interface, 4, p. 10. , (2015); Knych, T.W., Baliga, A., Android application development and testability (2014) Proceedings of the 1st International Conference on Mobile Software Engineering and Systems. ACM; Alegroth, E., Steiner, M., Martini, A., Exploring the presence of technical debt in industrial gui-based testware: A case study (2016) Software Testing, Verification and Validation Workshops (ICSTW), 2016 IEEE Ninth International Conference On. IEEE; Leotta, M., Visual vs. DOM-based web locators: An empirical study (2014) International Conference on Web Engineering, , Springer, Cham; Yusifolu, V.G., Amannejad, Y., Can, A.B., Software test-code engineering: A systematic mapping (2015) Information and Software Technology, 58, pp. 123-147; Ralph, P., Toward methodological guidelines for process theories and taxonomies in software engineering (2018) IEEE Transactions on Software Engineering",,,"","Institute of Electrical and Electronics Engineers Inc.","11th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018","9 April 2018 through 13 April 2018",,138044,,9781538663523,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-85050963952
"Iyama M., Kirinuki H., Tanno H., Kurabayashi T.","57195327579;56875466800;47062091000;57195324874;","Automatically generating test scripts for GUI Testing",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018",,,,"146","150",,1,"10.1109/ICSTW.2018.00043","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050960675&doi=10.1109%2fICSTW.2018.00043&partnerID=40&md5=139073de2a4e1761ff9acc023836d874","NTT Laboratories, Tokyo, Japan","Iyama, M., NTT Laboratories, Tokyo, Japan; Kirinuki, H., NTT Laboratories, Tokyo, Japan; Tanno, H., NTT Laboratories, Tokyo, Japan; Kurabayashi, T., NTT Laboratories, Tokyo, Japan","In recent years, there has been strong demand for applications to correspond to changes in customer needs and in hardware and software within a short period of time and be released while ensuring a certain level of quality because the speed of change with respect to applications is fast. To release applications within a short period of time, it is important to automate software testing, which occupies a lot of man-hours in development. However, development teams have very little experience introducing test automation tools because it takes a lot of time to make the test scripts necessary for test automation. In this paper, we propose a method for automatically generating test scripts by using static analysis and dynamic analysis on application source code and executable files. As the result of an evaluation experiment, it is shown that the proposed method can reduce the number of man-hours by about 61% compared with the conventional method of creating test scripts manually. © 2018 IEEE.","GUI testing; Software testing; Test automation; Test scripts generation","Application programs; Automatic test pattern generation; Automation; Graphical user interfaces; Static analysis; Verification; Conventional methods; Development teams; Evaluation experiments; GUI testing; Hardware and software; Test Automation; Test automation tool; Test scripts; Software testing",,,,,,,,"Selenium WebDriver, , http://www.seleniumhq.org/projects/webdriver/; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) 2013 20th Working Conference on Reverse Engineering (WCRE), pp. 272-281; Selenium IDE, , http://www.seleniumhq.org/projects/ide/; Tanno, H., Zhang, X., Test script generation based on design documents for web application testing (2015) 2015 IEEE 39th Annual Computer Software and Applications Conference, Taichung, pp. 672-673; StateMatrix, , https://ja.osdn.net/projects/testools/; Test-Case Coverage Analysis of State-Based Automata for Fuel-Cell Systems in Commercial Aircraft, , https://www.sts.tuhh.de/pw-and-m-theses/2014/lehma14.pdf; TQCAssist, , http://www.xupper.com/lineup/option/tqcassist.html; Dallmeier, V., Pohl, B., Burger, M., Mirold, M., Zeller, A., WebMate: Web application test generation in the real world (2014) 2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops, pp. 413-418; Spring Framework, , https://projects.spring.io/spring-framework/; A Sample Spring-based Application, , https://github.com/spring-projects/spring-petclinic",,,"","Institute of Electrical and Electronics Engineers Inc.","11th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018","9 April 2018 through 13 April 2018",,138044,,9781538663523,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-85050960675
"Aho P., Vos T.","35188652400;8980537100;","Challenges in automated testing through graphical user interface",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018",,,,"118","121",,4,"10.1109/ICSTW.2018.00038","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050956634&doi=10.1109%2fICSTW.2018.00038&partnerID=40&md5=b1770072b09e5f661e77eb3e64875ea9","Open Universiteit, Heerlen, Netherlands; Universitat Politecnica de Valencia, Spain; Open Universiteit, Netherlands","Aho, P., Open Universiteit, Heerlen, Netherlands; Vos, T., Universitat Politecnica de Valencia, Spain, Open Universiteit, Netherlands","The widespread use of iterative and incremental processes and continuous integration practices in software development has shortened the development cycles, drastically limiting the time for testing and quality assurance of each release. At the same time the software systems are getting ever more complex, systems of systems with multitude of platforms and devices to support. In practice, unit testing is widely automated but system level testing is more difficult to automate, especially if the system includes graphical user interfaces (GUI) for the end users. This paper describes the challenges of automating the system level testing through GUI in the modern, agile software development environment, and envisions possible future solutions for some of the challenges. © 2018 IEEE.","GUI testing; Model extraction; Test automation","Automation; Graphical user interfaces; Quality assurance; Software design; Verification; Agile software development; Continuous integrations; Graphical user interfaces (GUI); GUI testing; Incremental process; Model extraction; System level testing; Test Automation; Integration testing",,,,,"Rijksdienst voor Ondernemend Nederland, RVO.nl","ACKNOWLEDGMENT This work has been funded by the Netherlands Enterprise Agency through ITEA3 / TESTOMAT project (www.testomatproject.eu).",,"National transportation safety board, railroad accident brief 1603 (2017) Undesired Train Acceleration and Deceleration, , https://www.ntsb.gov/investigations/AccidentReports/Reports/RAB1603.pdf, 4 April; Matthews-King, A., Magazine, P., (2016) GPS Told to Review Patients at Risk As IT Error Miscalculates CV Score in Thousands, , http://www.pulsetoday.co.uk/your-practice/practice-topics/it/gps-told-toreview-patients-at-risk-as-it-error-miscalculates-cv-score-inthousands/20031807.article, 11 May; (2017) Software Fail Watch: 2016 in Review, , https://www.tricentis.com/resource-assets/software-fail-watch-2016/; Barr, E., Harman, M., McMinn, P., Shahbaz, M., Yoo, S., The oracle problem in software testing: A survey (2015) IEEE Transactions on Software Engineering, 41 (5). , (May) , IEEE Computer Society; Memon, A., GUI testing: Pitfalls and process (2002) Computer, 35 (8), pp. 87-88. , Aug IEEE Computer Society; Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated Java GUI modeling for model-based testing purposes (2011) Proc. 8th Int. Conf. on Information Technology : New Generations (ITNG2011), pp. 268-273. , 11-13 Apr, Las Vegas, Nevada, USA; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications (2005) Proc. 21st IEEE Int. Conf. on Software Maintenance (ICSM'05), pp. 473-482. , 25-30 Sep, Budapest, Hungary; Mesbah, A., Deursen, A.V., Invariant-based automatic testing of AJAX user interfaces (2009) Proc. 31st Int. Conf. on Software Engineering (ICSE'09), pp. 210-220. , 16-24 May, Vancouver, Canada; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proc. 12th Int. Symposium on Software Reliability Engineering (ISSRE'01), pp. 34-43. , 27-30 Nov, Hong Kong, China; Yang, X., (2011) Graphic User Interface Modelling and Testing Automation, , PhD thesis, School of Engineering and Science, Victoria University, Melbourne, Australia, May; Yuan, X., Cohen, M., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. on Software Engineering, 37 (4), pp. 559-574. , (Jul-Aug) IEEE Computer Society; Strecker, J., Memon, A.M., Relationships between test suites, faults, and fault detection in GUI testing (2008) Proc. 1st Int. Conf. on Software Testing, Verification, and Validation (ICST), pp. 12-21. , 9-11 Apr, Lillehammer, Norway; Rapise, A Commerecial Test Automation Tool by Inflectra, , https://www.inflectra.com/Rapise/; Squish, A Commerecial Test Automation Tool by Froglogic, , https://www.froglogic.com/squish/; Ranorex, A Commerecial GUI Test Automation Tool, , https://www.ranorex.com/; AutoIt, A Freeware GUI Automation Tool, , https://www.autoitscript.com/site/autoit/; Selenium, H.Q., A Free Tool for Automating Web GUI Testing, , http://www.seleniumhq.org/projects/; Eggplant Fuctional, A Commercial Tool by TestPlant, , https://www.testplant.com/products/eggplant-functional/; EyeStudio and EyeAutomate, A Free Visual Script Editor and Runner Tool, , http://eyeautomate.com/eyestudio.html, http://eyeautomate.com/eyeautomate.html; Alegroth, E., Feldt, R., Kolström, P., Maintenance of automated test suites in industry: An empirical study on visual gui testing (2016) Information and Software Technology, 73, pp. 66-80; Aho, P., Kanstrén, T., Räty, T., Röning, J., Automated extraction of GUI models for testing (2014) Advances in Computers, 95, pp. 49-112. , Burlington: Academic Press; Gao, Z., Chen, Z., Zou, Y., Memon, A., SITAR: GUI test script repair (2016) IEEE Transactions on Software Engineering, 42 (2). , (Feb), IEEE Computer Society; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezze, M., Automated gui refactoring and test script repair (2011) Proc. 1st Int. Workshop on End-to-End Test Script Engineering, pp. 38-41. , 17 July, Toronto, Canada; Silva, J.L., Campos, J.C., Paiva, A.C.R., Model-based user interface testing with spec explorer and concurtasktrees (2007) Proc. 2nd Int. Workshop on Formal Methods for Interactive Systems (FMIS 2007), pp. 77-93. , 4 Sep, Lancaster, UK; Chinnapongse, V., Lee, I., Sokolsky, O., Wang, S., Jones, P., Model-based testing of GUI-driven applications (2009) Proc. 7th Int. Workshop on Software Technolgies for Embedded and Ubiquitous Systems (SEUS 2009), , 16-18 Nov, Newport Beach, CA, USA; Bertolino, A., Polini, A., Inverardi, P., Muccini, H., Towards anti-model-based testing (2004) Proc. Int. Conf. on Dependable Systems and Networks (DSN2004), pp. 124-125. , 28 Jun, Florence, Italy; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proc. 10th Working Conf. on Reverse Engineering (WCRE'03), pp. 260-269. , 13-16 Nov, Victoria, Canada; Miao, Y., Yang, X., An FSM based GUI test automation model (2010) Proc. 2010 11th Int. Conf. on Control, Automation, Robotics &Vision (ICARCV), pp. 120-126. , 7-10 Dec, Singapore; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) Proc. 2013 IEEE Sixth Int. Conf. on Software Testing, Verification and Validation Workshops (ICSTW), pp. 126-133. , 18-22 Mar, Luxembourg; Memon, A.M., Banerjee, I., Nguyen, B., Robbins, B., The first decade of gui ripping: Extensions, applications, and broader impacts (2013) Proc. 20th Working Conf. on Reverse Engineering (WCRE), pp. 11-20. , 14-17 Oct, Koblenz, Germany; Aho, P., Menz, N., Räty, T., Dynamic reverse engineering of GUI models for testing (2013) Proc. 2013 Int. Conf. on Control, Decision and Information Technologies (CoDIT'13), pp. 441-447. , 6-8 May, Hammamet, Tunisia; Böhme, M., Paul, S., A probabilistic analysis of the efficiency of automated software testing (2016) IEEE TSE, 42 (4), pp. 345-360; Vos, T., Kruse, P., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TESTAR: Tool support for test automation at the user interface level (2015) Int. Journal of Information System Modeling and Design (IJISMD), 6 (3), pp. 46-83. , July-September; TESTAR, An Open Source Tool for Automated GUI Testing, , https://testar.org; Aho, P., Suarez, M., Kanstren, T., Memon, A.M., Murphy tools: Utilizing extracted GUI models for industrial software testing (2014) Testing: Academic &Industrial Conference-Practice and Research Techniques (TAIC PART), , 4 Apr, Cleveland, OH, USA; Murphy, An Open Source Tool for Automated GUI Testing, , https://github.com/F-Secure/murphy; Esparcia-Alcazar, A., Almenar, F., Martinez, M., Rueda, U., Vos, T., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) Proc. 6TH Int. Conf. on Metaheuristics and Nature Inspired Computing (META'2016), , Marrakech, Morocco; Esparcia-Alcázar, A., Almenar, F., Rueda, U., Vos, T., Evolving rules for action selection in automated testing via genetic programming-A first approach (2017) Proc. European Conf. on the Applications of Evolutionary Computation, pp. 82-95. , Springer; Latiu, G., Creţ, O., Vǎcariu, L., EvoGUITest-A graphical user interface testing gramework based on evolutionary algorithms (2013) Proc. 5th Int. Joint Conf. on Computational Intelligence, 1, pp. 75-82. , ECTA, (IJCCI); Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) Proc. Int. Conf. on Software Engineering (ICSE 2005), , 15-21 May, Saint Louis, MO, USA",,,"","Institute of Electrical and Electronics Engineers Inc.","11th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018","9 April 2018 through 13 April 2018",,138044,,9781538663523,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-85050956634
"Behrang F., Orso A.","55789905000;6603901617;","Test migration for efficient large-scale assessment of mobile app coding assignments",2018,"ISSTA 2018 - Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"164","175",,6,"10.1145/3213846.3213854","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051542581&doi=10.1145%2f3213846.3213854&partnerID=40&md5=1272e8d6d86e7507b6d180be65ce01ca","Georgia Tech, Atlanta, GA, United States","Behrang, F., Georgia Tech, Atlanta, GA, United States; Orso, A., Georgia Tech, Atlanta, GA, United States","In recent years, there has been a growing interest in making education widely accessible using Internet technologies. Whether it is Massive Open Online Courses (MOOCs) or simply college courses offered to a large student population using an online platform, both education-focused companies and universities, often in collaboration with one another, have been investing massively in online education. The fact that hundreds, and more often thousands, of students take these online courses raises scalability challenges in assessing student assignments. In this paper, in particular, we present a technique (GUITestMigrator) that addresses the challenge of assessing mobile app coding assignments. Given a set of apps that implement the same specification, but can have completely different user interfaces, instructors normally have to manually run and check each app to make sure it behaves correctly and according to the specification. GUITestMigrator, conversely, allows for developing tests for one of these apps and automatically migrating these tests to the other apps, thus dramatically reducing the burden on the instructor. We implemented GUITestMigrator for Android apps and evaluated it on three sets of apps developed over three different semesters by students of an online graduate-level software engineering course. Our initial results show that our approach is promising and motivates further research in this direction. The paper also discusses possible applications of this approach for test evolution and test migration for real-world apps. © 2018 Association for Computing Machinery.","Automated assessment; Mobile apps; Test migration","Curricula; Software testing; Specifications; Students; Testing; User interfaces; Automated assessment; Internet technology; Massive open online course; Mobile apps; On-line education; Software engineering course; Student assignments; Student populations; E-learning",,,,,"CCF-1161821, CCF-1563991","This work was partially supported by NSF under awards CCF-1161821 and CCF-1563991.",,"(2018) Android Studio, , https://developer.Android.com/studio/; (2018), https://www.class-central.com/universities, Class Central Universities; (2018), https://google.github.io/Android-testing-support-library/, Espresso; (2018), https://www.gradescope.com, Gradescope; (2018), https://sites.google.com/view/testmigration/, GUI Test Migration; (2018), https://learntocodewith.me/reviews/mobile-app-courses/, Mobile App Courses; (2018), https://developer.Android.com/training/testing/ui-automator/, UI Automator; (2018) Vocareum, , https://www.vocareum.com; (2018) XML Path Language, , https://www.w3.org/TR/xpath-30/; Ala-Mutka, K., A survey of automated assessment approaches for programming assignments (2005) Computer Science Education, 15, pp. 83-102. , 06 2005; Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), pp. 258-261. , ACM, New York, NY, USA; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering (FSE '12), p. 11. , ACM, New York, NY, USA, Article 59; Arifi, S.M., Abdellah, I.N., Zahi, A., Benabbou, R., Automatic program assessment using static and dynamic analysis (2015) 2015 Third World Conference on Complex Systems (WCCS)., pp. 1-6. , IEEE, Washington, DC, USA; Behrang, F., Orso, A., Poster: Automated test migration for mobile apps (2018) Proceedings of the 40th International Conference on Software Engineering Companion (ICSE '18)., pp. 384-385. , ACM, New York, NY, USA; Cheang, B., Kurnia, A., Lim, A., Oon, W.-C., On automated grading of programming assignments in an academic institution (2003) Comput. Educ., 41 (2), pp. 121-131. , Sept. 2003; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) SIGPLAN Not., 48 (10), pp. 623-640. , Oct. 2013; Choudhary, S.R., Zhao, D., Versee, H., Orso, A., WATER: Web application test repair (2011) Proceedings of the First International Workshop on End-to-End Test Script Engineering (ETSE '11)., pp. 24-29. , ACM, New York, NY, USA; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezzè, M., Automated GUI refactoring and test script repair (2011) Proceedings of the First International Workshop on End-to-End Test Script Engineering (ETSE '11)., pp. 38-41. , ACM, New York, NY, USA; Denny, P., Luxton-Reilly, A., Tempero, E., Hendrickx, J., CodeWrite: Supporting student-driven practice of Java (2011) Proceedings of the 42Nd ACM Technical Symposium on Computer Science Education (SIGCSE '11)., pp. 471-476. , ACM, New York, NY, USA; Dig, D., Johnson, R., Automated upgrading of component-based applications (2006) Companion to the 21st ACM SIGPLAN Symposium on Objectoriented Programming Systems, Languages, and Applications (OOPSLA '06)., pp. 675-676. , ACM, New York, NY, USA; Edwards, S.H., Perez-Quinones, M.A., Web-CAT: Automatically grading programming assignments (2008) Proceedings of the 13th Annual Conference on Innovation and Technology in Computer Science Education (ITiCSE '08)., p. 328. , ACM, New York, NY, USA; Fu, C., Grechanik, M., Xie, Q., Inferring types of references to GUI objects in test scripts (2009) 2009 International Conference on Software Testing Verification and Validation., pp. 1-10. , IEEE, New York, NY, USA; Gao, Z., Chen, Z., Zou, Y., Memon, A.M., SITAR: GUI test script repair (2016) IEEE Transactions on Software Engineering, 42 (2), pp. 170-186. , Feb 2016; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI directed test scripts (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE '09)., pp. 408-418. , IEEE Computer Society, Washington, DC, USA; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys '14)., pp. 204-217. , ACM, New York, NY, USA; Hollingsworth, J., Automatic graders for programming classes (1960) Commun. ACM, 3 (10), pp. 528-529. , Oct 1960; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation (ICST '10)., pp. 245-254. , IEEE Computer Society, Washington, DC, USA; Ihantola, P., Ahoniemi, T., Karavirta, V., Seppälä, O., Review of recent systems for automatic assessment of programming assignments (2010) Proceedings of the 10th Koli Calling International Conference on Computing Education Research (Koli Calling '10)., pp. 86-93. , ACM, New York, NY, USA; Jordan, K., Initial trends in enrolment and completion of massive open online courses (2014) International Review of Research in Open and Distance Learning, 15 (1), pp. 133-160. , February 2014; Juniwal, G., Donzai, A., Jensen, J.C., Seshia, S.A., CPSGrader: Synthesizing temporal logic testers for auto-grading an embedded systems laboratory (2014) 2014 International Conference on Embedded Software (EMSOFT)., pp. 1-10. , IEEE, New York, NY, USA; Lan, A.S., Vats, D., Waters, A.E., Baraniuk, R.G., Mathematical language processing: Automatic grading and feedback for open response mathematical questions (2015) Proceedings of the Second (2015) ACM Conference on Learning @ Scale (L@S '15), pp. 167-176. , ACM, New York, NY, USA; Li, H., Ho, B.-J., Balaji, B., Xin, Y., Martin, P., Srivastava, M.B., (2017) EmbedInsight: Automated Grading of Embedded Systems Assignments, pp. 1-10. , CoRR abs/1703.04514, 2017; Li, P., Wohlstadter, E., View-based maintenance of graphical user interfaces (2008) Proceedings of the 7th International Conference on Aspect-oriented Software Development (AOSD '08)., pp. 156-167. , ACM, New York, NY, USA; Li, S., Xiao, X., Bassett, B., Xie, T., Tillmann, N., Measuring code behavioral similarity for programming and software engineering education (2016) Proceedings of the 38th International Conference on Software Engineering Companion (ICSE '16)., pp. 501-510. , ACM, New York, NY, USA; Li, X., Chang, N., Wang, Y., Huang, H., Pei, Y., Wang, L., Li, X., ATOM: Automatic maintenance of GUI test scripts for evolving mobile applications (2017) 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 161-171. , IEEE, New York, NY, USA; Lucia, A.D., Francese, R., Scanniello, G., Tortora, G., Vitiello, N., A strategy and an eclipse based environment for the migration of legacy systems to multi-tierweb-based architectures (2006) 2006 22nd IEEE International Conference on Software Maintenance, pp. 438-447. , IEEE, New York, NY, USA; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013)., pp. 224-234. , ACM, New York, NY, USA; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2014), pp. 599-609. , ACM, New York, NY, USA; Mao, K., Harman, M., Jia, Y., Crowd intelligence enhances automated mobile testing (2017) 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 16-26. , ACM, New York, NY, USA; Mariani, L., Pezzai, M., Zuddas, D., Augusto: Exploiting popular functionalities for the generation of semantic GUI tests with oracles (2018) Proceedings of the 40th International Conference on Software Engineering (ICSE '18)., pp. 280-290. , ACM, New York, NY, USA; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), p. 36. , Article 4, Nov. 2008; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) SIGSOFT Softw. Eng. Notes, 28 (5), pp. 118-127. , Sept. 2003; Miller, G.A., WordNet: A lexical database for English (1995) Commun. ACM, 38 (11), pp. 39-41. , Nov. 1995; Omari, A., Shoham, S., Yahav, E., Cross-supervised synthesis of web-crawlers (2016) Proceedings of the 38th International Conference on Software Engineering (ICSE '16)., pp. 368-379. , ACM, New York, NY, USA; Omari, A., Shoham, S., Yahav, E., Synthesis of forgiving data extractors (2017) Proceedings of the Tenth ACM International Conference on Web Search and Data Mining (WSDM '17), pp. 385-394. , ACM, New York, NY, USA; Rau, A., Hotzkow, J., Zeller, A., Poster: Efficient GUI test generation by learning from tests of other apps (2018) Proceedings of the 40th International Conference on Software Engineering Companion (ICSE '18)., pp. 370-371. , ACM, New York, NY, USA; Shah, D., (2017) Class Central Providers, , https://www.class-central.com/report/mooc-providers-list/; Shen, H.T., Ooi, B.C., Tan, K.-L., Giving meanings to WWW images (2000) Proceedings of the Eighth ACM International Conference on Multimedia (MULTIMEDIA '00), pp. 39-47. , ACM, New York, NY, USA; Sherman, M., Bassil, S., Lipman, D., Tuck, N., Martin, F., Impact of auto-grading on an introductory computing course (2013) J. Comput. Sci. Coll., 28 (6), pp. 69-75. , June 2013; Singh, R., Gulwani, S., Solar-Lezama, A., Automated feedback generation for introductory programming assignments (2013) Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '13), pp. 15-26. , ACM, New York, NY, USA; Slimani, T., Description and evaluation of semantic similarity measures approaches (2013) International Journal of Computer Applications, 80 (10), pp. 25-33. , 2013; Staiger, S., Static analysis of programs with graphical user interface (2007) 11th European Conference on Software Maintenance and Reengineering (CSMR'07)., pp. 252-264. , IEEE, New York, NY, USA; Wang, H., Chang, C., Li, T., Assessing creative problem-solving with automated text grading (2008) Computers and Education, 51 (4), pp. 1450-1466. , 2008; Wu, Z., Palmer, M., Verbs semantics and lexical selection (1994) Proceedings of the 32Nd Annual Meeting on Association for Computational Linguistics (ACL '94), pp. 133-138. , Association for Computational Linguistics, Stroudsburg, PA, USA; Yang, S., (2015) Static Analyses of GUI Behavior in Android Applications, , Ph.D. Dissertation. The Ohio State University; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering (FASE'13), pp. 250-265. , Springer-Verlag, Berlin, Heidelberg; Zhang, S., Lü, H., Ernst, M.D., Automatically repairing broken workflows for evolving GUI applications (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis (ISSTA 2013)., pp. 45-55. , ACM, New York, NY, USA",,"Bodden E.Tip F.","ACM SIGSOFT;AWS;et al.;Facebook;Google;vmware","Association for Computing Machinery, Inc","27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018","16 July 2018 through 21 July 2018",,138042,,9781450356992,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85051542581
"Cao C., Ge H., Gu T., Deng J., Yu P., Lu J.","7401501786;57196116244;55613697500;57200273128;55223076700;56949295700;","Accelerating Automated Android GUI Exploration with Widgets Grouping",2018,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC","2018-December",, 8719468,"268","277",,,"10.1109/APSEC.2018.00041","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066796042&doi=10.1109%2fAPSEC.2018.00041&partnerID=40&md5=b6cd9ee4a7e86ce3f064cb9f051d6967","Department of Computer Science and Technology, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China","Cao, C., Department of Computer Science and Technology, Nanjing University, Nanjing, China, State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; Ge, H., Department of Computer Science and Technology, Nanjing University, Nanjing, China, State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; Gu, T., Department of Computer Science and Technology, Nanjing University, Nanjing, China, State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; Deng, J., Department of Computer Science and Technology, Nanjing University, Nanjing, China, State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; Yu, P., Department of Computer Science and Technology, Nanjing University, Nanjing, China, State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; Lu, J., Department of Computer Science and Technology, Nanjing University, Nanjing, China, State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China","Ensuring the quality of mobile applications (apps) needs to explore the GUI thoroughly. In practice, exhaustively exploring every GUI widget is unscalable on large real-world apps since it usually suffers from the problem of widgets explosion. To mitigate the problem, many existing testing tools usually detect and group homogeneous widgets heuristicly with different level of model abstraction since these widgets behave the same. However, no heuristic always works well. Heterogeneous widgets with divergent behaviors can be mistakenly grouped, which largely limits the testing effectiveness. This paper proposes a technique to effective GUI testing of Android apps with dynamic feedback-directed widgets grouping. Initially, we group the widgets according to the structure of the GUI. During testing, we observe behaviors of widgets in a group and regroup improperly-grouped widgets dynamically. Then, we apply a feedback-directed strategy to effectively accelerate the GUI exploration. The proposed technique is implemented as a practical tool for Android apps, named WGDroid. We evaluated WGDroid on 17 widely-used Android apps and compared it with the state-of-the-art GUI testing tools, i.e., AimDroid, SAPIENZ, and Monkey on both emulators and real devices. WGDroid outperformed the three tools in all testing coverages and also detected the most unique crashes. In particular, WGDroid discovered 208 more activities on 12 large benchmark apps on real devices and 11 more activities on another 5 benchmark apps on emulators, than the best of the other tools. These results show that WGDroid can significantly accelerate the GUI exploration. © 2018 IEEE.","Feedback directed Strategy; GUI Exploration; Widgets Grouping","Graphical user interfaces; Divergent behaviors; Dynamic feedback; Feedback directed; Mobile applications; Model abstraction; State of the art; Testing effectiveness; Widgets Grouping; Android (operating system)",,,,,"2018YFB1004805

61690204","ACKNOWLEDGMENT This work was supported by the National Key R&D Program of China (Grant No. 2018YFB1004805), National Natural Science Foundation (Grant No. 61690204), and the Collaborative Innovation Center of Novel Software Technology and Industrialization.",,"Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) Proceedings of 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24; https://developer.android.com/studio/test/monkey.html, Ui/application exerciser monkey, accessed: 2018-04-01; Gu, T., Cao, C., Liu, T., Sun, C., Deng, J., Ma, X., Lü, J., AimDroid: Activity-Insulated multi-level automated testing for Android applications (2017) Proceedings of the 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME 2017, pp. 103-114; Su, T., Meng, G., Chen, Y., Wu, K., Yang, W., Yao, Y., Pu, G., Su, Z., Guided, stochastic model-based GUI testing of android apps (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017, pp. 245-256; Song, W., Qian, X., Huang, J., Ehbdroid: Beyond gui testing for android applications (2017) Proceedings of the 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE 2017, pp. 27-37; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis (ISSTA 2016, pp. 94-105; Mao, K., Harman, M., Jia, Y., Crowd intelligence enhances automated mobile testing (2017) Automated Software Engineering (ASE), 2017 32nd IEEE/ACM International Conference on, IEEE, pp. 16-26; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Arewe really there yet in an industrial case (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 987-992; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013, pp. 224-234; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2014, pp. 599-609; Baek, Y.-M., Bae, D.-H., Automated model-based android gui testing using multi-level gui comparison criteria (2016) Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, pp. 238-249; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) ACM SIGPLAN Notices, 48 (10), pp. 623-640. , ACM; Su, T., FSMdroid: Guided gui testing of android apps (2016) Proceedings of the 38th International Conference on Software Engineering Companion, pp. 689-691; https://developer.android.com/reference/android/app/Activity.html, accessed: 2018-04-01 Activity; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) International Conference on Fundamental Approaches to Software Engineering (FASE 2013). Springer, pp. 250-265; Clarke, E., Grumberg, O., Jha, S., Lu, Y., Veith, H., Counterexample-guided abstraction refinement (2000) Proceedings of the 12th International Conference Computer Aided Verification (CAV 2000), pp. 154-169; https://www.w3.org/TR/xpath/, Xml path language (xpath, accessed: 2017-01-02; https://developer.android.com/about/dashboards/index.html, Android dashboard accessed: 2018-04-01 2018; https://developer.android.com/topic/libraries/testing-support-library/index.html#uia-viewer, UI automator vieweraccessed: 2018-04-01; https://developer.android.com/guide/components/activities/tasks-and-back-stack.html, Tasks and back stack, accessed: 2018-04-01; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in gui testing of android applications (2016) Proceedings of the 38th International Conference on Software Engineering, pp. 559-570; Fan, L., Su, T., Chen, S., Meng, G., Liu, Y., Xu, L., Pu, G., Su, Z., Large-scale analysis of framework-specific exceptions in android apps (2018) Proceedings of the 40th International Conference on Software Engineering (ICSE 2018, pp. 408-419; Li, Q., Jiang, Y., Gu, T., Xu, C., Ma, J., Ma, X., Lu, J., Effectively manifesting concurrency bugs in android apps (2016) Proceedings of the 2016 23rd Asia-Pacific Software Engineering Conference (APSEC 2016, pp. 209-216; Fan, L., Su, T., Chen, S., Meng, G., Liu, Y., Xu, L., Pu, G., Efficiently manifesting asynchronous programming errors in android apps (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE 2018, pp. 486-497; Wei, L., Liu, Y., Cheung, S., Taming android fragmentation: Characterizing and detecting compatibility issues for android apps (2016) Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE 2016, pp. 226-237; Moran, K., Linares-Vásquez, M., Bernal-Ćardenas, C., Vendome, C., Poshyvanyk, D., CrashScope: A practical tool for automated testing of android applications (2017) Proceedings of the 39th International Conference on Software Engineering Companion (ICSE-C 2017, pp. 15-18; Moran, K., Linares-Vásquez, M., Bernal-Ćardenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST 2016, pp. 33-44; Clapp, L., Bastani, O., Anand, S., Aiken, A., Minimizing GUI event traces (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016), pp. 422-434; Clarke, E., Grumberg, O., Jha, S., Lu, Y., Veith, H., Counterexampleguided abstraction refinement for symbolic model checking (2003) Journal of the ACM, 50 (5), pp. 752-794. , Sep; Zhang, X., Mangal, R., Grigore, R., Naik, M., Yang, H., On abstraction refinement for program analyses in datalog (2014) Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2014), pp. 239-248; Wang, K., Xu, G., Su, Z., Liu, Y.D., GraphQ: Graph query processing with abstraction refinement: Scalable and programmable analytics over very large graphs on a single pc (2015) Proceedings of the 2015 USENIX Conference on Usenix Annual Technical Conference (ATC 2015), pp. 387-401; Wang, X., Dillig, I., Singh, R., Program synthesis using abstraction refinement Proceedings of the 45th ACM SIGPLAN Symposium on Principles of Programming Languages (POPL 2018), p. 2018. , p. To appear",,,"The Special Interest Group on Software Engineering, Information Processing Society of Japan (IPSJ/SIG-SE)","IEEE Computer Society","25th Asia-Pacific Software Engineering Conference, APSEC 2018","4 December 2018 through 7 December 2018",,148344,15301362,9781728119700,,,"English","Proc. Asia Pac. Softw. Eng. Conf. APSEC",Conference Paper,"Final","",Scopus,2-s2.0-85066796042
"Hori A., Takada S., Kurabayashi T., Tanno H.","57189371762;7202611302;57195324874;47062091000;","Image-Based Approach to Determining Regression Test Results of Dynamic Web Applications",2018,"International Journal of Software Engineering and Knowledge Engineering","28","7",,"1001","1025",,,"10.1142/S0218194018500286","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051058294&doi=10.1142%2fS0218194018500286&partnerID=40&md5=1c33da55d3a87767af2c1257e5d5ddf4","Department of Information and Computer Science, Keio University, Yokohama, Japan; Software Innovation Center, NTT Corporation, Tokyo, Japan","Hori, A., Department of Information and Computer Science, Keio University, Yokohama, Japan; Takada, S., Department of Information and Computer Science, Keio University, Yokohama, Japan; Kurabayashi, T., Software Innovation Center, NTT Corporation, Tokyo, Japan; Tanno, H., Software Innovation Center, NTT Corporation, Tokyo, Japan","Much work has been done on automating regression testing for applications. But most of them focus on test execution. Little work has been done on automatically determining if a test case passes or fails. This decision is often made by comparing the results of executing test cases on a base version of the application and post-modification version of the application. If the two results match, the test case passes, otherwise fails. However, to the best of our knowledge, there is no regression testing method for automatically deciding pass/fail of dynamic Web applications which use JavaScript or CSS. We propose a method that automatically decides if a dynamic Web application passes a regression test case. The basic idea is to obtain a screenshot each time the GUI of the Web application (i.e. Web page) changes its state, and then compare each corresponding screenshot to see if they match. The evaluation results showed that the accuracy rate of our approach is high and our approach can be considered as fast enough for practical use. © 2018 World Scientific Publishing Company.","CSS; JavaScript; regression test; Web application testing","High level languages; Regression analysis; Software testing; Websites; Dynamic web applications; Evaluation results; Javascript; Post-modification; Regression testing; Regression tests; WEB application; Web application testing; Testing",,,,,,,,"Richards, G., Lebresne, S., Burg, B., Vitek, J., An analysis of the dynamic behavior of JavaScript programs (2010) Proc. 31st ACM SIGPLAN Conf. Programming Language Design and Implementation, pp. 1-12; Womack, J.P., Jones, D.T., Roos, D., (1990) The Machine That Changed the World, , Harper Perennial; Williams, L., Cockburn, A., Agile software development: It's about feedback and change (2003) Computer, 36 (6), pp. 39-43; W3C Document Object Model, , http://www.w3.org/DOM; Memon, A., Banerjee, I., Nagarajan, A., What test oracle should i use for effective GUI testing? (2003) Proc. 18th IEEE Int. Conf. Automated Software Engineering, pp. 164-173; Shahamiri, S.R., Kadir, W.M.N.W., Mohd-Hashim, S.Z., A comparative study on automated software test oracle methods (2009) 4th Int. Conf. Software Engineering Advances, pp. 140-145; Barr, E.T., Harman, M., McMinn, P., Shahbaz, M., Yoo, S., The oracle problem in software testing: A survey (2015) IEEE Trans. Softw. Eng., 41 (5), pp. 507-525; Automated visual testing j applitools Automated Visual Testing, , https://applitools.com/; https://diff.io/, MPCM Technologies LLC diff.io; Galen Framework J Automated Testing of Responsive Design, , http://galenframework.com/, Galen Framework; Automated Website Testing and Monitoring -Ghost Inspector, , https://ghostinspector.com/, Ghost Inspector Inc; Visual regression testing framework Comparing Screenshots from Multiple Builds, , http://yahoo.github.io/kobold/; PhantomCSS: Visual/CSS Regression Testing with PhantomJS, , https://github.com/Huddle/PhantomCSS/, James Cryer and the Huddle development team; Screenster -visual UI Test Automation, , http://www.creamtec.com/products/screenster/, AgileEngine LLC; Jansen, T., Siteeffect - The Alternative to Manual Testing, , http://siteeffect.io/; SUCCSS: The CSS Regression Testing Tool, , http://succss.ifzenelse.net/, DigitalOcean; Wraith -A Responsive Screenshot Comparison Tool, , https://github.com/BBCNews/wraith/, Wraith; Selay, E., Zhou, Z.Q., Zou, J., Adaptive random testing for image comparison in regression web testing (2014) Proc. 2014 Int. Conf. Digital Lmage Computing: Techniques and Applications, pp. 1-7; Hori, A., Takada, S., Tanno, H., Oinuma, M., An oracle based on image comparison for regression testing of web applications (2015) Proc. 27th Int. Conf. Software Engineering and Knowledge Engineering, pp. 639-645; Stocco, A., Leotta, M., Ricca, F., Tonella, P., PESTO: A tool for migrating DOM-based to visual web tests (2014) Proc. 14th IEEE Int. Working Conf. Source Code Analysis and Manipulation, pp. 65-70; Mirshokraie, S., Mesbah, A., JSART: JavaScript assertion-based regression testing (2012) Proc. 12th Int. Conf. Web Engineering, pp. 238-252; Roest, D., Mesbah, A., Deursen, A.V., Regression testing Ajax applications: Coping with dynamism (2010) Proc. 3rd Int. Conf. Software Testing, Verification and Validation, pp. 127-136; Mirshokraie, S., Mesbah, A., Pattabiraman, K., JSEFT: Automated Javascript unit test generation (2015) Proc. IEEE 8th Int. Conf. Software Testing, Verification and Validation, pp. 1-10; Fowler, M., Beck, K., Roberts, D., Gamma, E., (1999) Refactoring: Improving the Design of Existing Code, , Addison-Wesley Professional; Garrido, A., Rossi, G., Distante, D., Refactoring for usability in web applications (2011) IEEE Softw., 28 (3), pp. 60-67; Choudhary, S., Versee, H., Orso, A., A cross-browser web application testing tool (2010) Proc. 26th IEEE Int. Conf. Software Maintenance, pp. 1-6; Selenium -Web Browser Automation, , http://www.seleniumhq.org/; OpenCV Library, , http://opencv.org/, OpenCV team; http://redis.io/, Redislabs; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 31-330; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. Software Eng., 37 (5), pp. 649-678; https://github.com/arun-babu/mutate.py/, Arun-babu mutate.py; Binder, R.V., (2000) Testing Object-Oriented Systems, , Addison-Wesley, Boston",,,,"World Scientific Publishing Co. Pte Ltd",,,,,02181940,,ISEKE,,"English","Int. J. Software Engineer. Knowledge Engineer.",Article,"Final","",Scopus,2-s2.0-85051058294
"Mateen A., Abbas K.","42262245300;57210090185;","Optimization of model based functional test case generation for android applications",2018,"IEEE International Conference on Power, Control, Signals and Instrumentation Engineering, ICPCSI 2017",,,,"90","95",,,"10.1109/ICPCSI.2017.8391869","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050076648&doi=10.1109%2fICPCSI.2017.8391869&partnerID=40&md5=055d302c12c358a99ea0474b5bfdbaa3","Department of Computer Science, University of Agriculture Faisalabad, Faisalabad, Pakistan","Mateen, A., Department of Computer Science, University of Agriculture Faisalabad, Faisalabad, Pakistan; Abbas, K., Department of Computer Science, University of Agriculture Faisalabad, Faisalabad, Pakistan","The importance of mobile applications is gaining momentum because nowadays mobile application are using more frequently for personal and business purposes. Due to this reason, the development of mobile applications is also increasing day by day, so developers of mobile applications are frequently developing and deploying the mobile applications in the short interval of time. For assuring the functionality of the mobile application, we adopt a GUI based testing technique known as model based testing. In the model based testing, the functionality of the existing applications is tested by the external behavior of the system so basically this technique comes in the area of black-box testing. By leveraging the recent research, it is identified that the model based testing in the context of mobile applications testing; are facing problems such as large number of generated test cases and inadequate testing coverage of the application. The newly proposed technique is for generating the minimal functional test cases with the maximum coverage of the application. The proposed technique facilitates the developers/testers to test the functionality of the mobile application in short interval of time by consuming less effort. © 2017 IEEE.","event coverage; Event Flow Graph; functional test case generation; mobiGUITAR; Model based testing","Android (operating system); Flow graphs; Mobile computing; Model checking; Power control; Testing; event coverage; Event-flow graph; Functional test; mobiGUITAR; Model based testing; Black-box testing",,,,,,,,"Muccini, H., Drancesco, A., Esposito, P., Software testing of mobile applications:Challenges and future research direction (2012) Conf. Automation of Software Test, 7th Int. Workshop, Zurich, pp. 26-35; Karthikeyani, V., Kirubakaran, B., Mobile application testing-challenges and solution approach through automation (2013) Int. Conf. on Pattern Recognition, Inform. And Mobile Engineering, Zurich, pp. 79-84; Mohamed, I., Android vs ios security:A comparative study (2015) 12th Int. Conf. on Inform. Technology-New Generations, pp. 725-730; The Statistic Portal, , accessed (07-02-2017); Aho, P., Automated extraction of gui models for testing Advances in Computers, 1st Ed. The Netherlands, 2015, Ch2, 95 (7), pp. 259-289; Systa, T., (2000) Static and Dynamic Reverse Engineering Techniques for Java Software System, , Ph.D. dissertation, Dept. of Computer and Information Sciences, Univ. of Tampere, Finland; Utting, M., Legeard, B., Model based testing Practical Model-Based Testing:A Tools Approach 6th Ed, 8, pp. 283-303. , San Francisco, CA, USA, 2007, ch; Cleva Farto, G., Endo, A., Evaluating the model-based testing approach in the context of mobile applications (2015) J. of Electronic Notes in Theoretical Computer Science, 314 (2), pp. 3-21. , Jun; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based gui testing of an android application (2011) Proc. of the 4th IEEE International Conf. on Software Testing, Verification and Validation (ICST '11), pp. 377-386. , IEEE Computer Society, Washington, DC, USA; Amalfitano, D., Reverse engineering finite state machines from rich internet applications (2010) 15th Working Conf. on Reverse Engineering, pp. 571-574; Memon, A., Gui ripping:Reverse engineering of graphical user interfaces for testing (2003) Proc. of the 10th Working Conf. on Reverse Engineering (WCRE), Maryland, USA, pp. 260-269; Hackner, D., Memon, A.M., Test case generator for GUITAR (2008) Proc. Companion of the 30th Int. Conf. on Software Engineering (ICSE Companion '08), pp. 959-960. , Leipzig, Germany, 10-18 May; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) J. of IEEE Trans. Softw. Eng., Piscataway, NJ, 31 (10), pp. 884-896; Memon, A.M., Soffa, M.L., Coverage criteria for GUI testing (2001) Proc. 8th European Software Eng. Conf. (ESEC)/ACM SIGSOFT Int. Symposium on Foundations of Software Engineering (FSE-9), Vienna, Austria, pp. 256-267; Al-Qershi, F., Android vs iOS:The Security Battle (2014) Conf. of Computer Applications and Inform. Systems (WCCAIS, pp. 1-8; Bourque, P., Fairlay, R.E., Guide to the software engineering body of knowledge (swebok(r)) (2014) IEEE Computer Society, Ver 3.0, , January 17; Amalfitano, D., Using gui ripping for automated testing of android applications (2012) 15th Working Conf. on Reverse Engineering, Maryland, USA, pp. 258-261; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2012) J. of IEEE Trans. Softw. Eng, 36 (1), pp. 81-95; Memon, A.M., Nagarajan, A., Automating regression testing for evolving GUI software (2005) J. Softw. Maint. e Res. Pract., John Wiley, 17 (1), pp. 27-64; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) J. of ACM Trans. Softw. Eng. Methodol, New York, 18 (7); Brooks, P., Memon, A.M., Introducing a test suite similarity metric for event sequence based test cases (2009) Proc. 23rd IEEE Int. Conf. on Software Maintenance (ICSM'09), pp. 243-252. , 20-26 Sep 2009 Edmonton, Canada; Bryce, R.C., Memon, A.M., Developing a single model and test prioritization strategies for event driven software (2011) J. of IEEE Trans. Softw. Eng, 37 (1), pp. 48-64",,,"","Institute of Electrical and Electronics Engineers Inc.","2017 IEEE International Conference on Power, Control, Signals and Instrumentation Engineering, ICPCSI 2017","21 September 2017 through 22 September 2017",,137381,,9781538608135,,,"English","IEEE Int. Conf. Power, Control, Signals Instrum. Eng., ICPCSI",Conference Paper,"Final","",Scopus,2-s2.0-85050076648
"Liu C.-H., Chen W.-K., Ho S.-H.","7409787147;9735579700;57204427574;","NFS: An Algorithm for Avoiding Restarts to Improve the Efficiency of Crawling Android Applications",2018,"Proceedings - International Computer Software and Applications Conference","2",, 8377832,"69","74",,1,"10.1109/COMPSAC.2018.10205","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055507171&doi=10.1109%2fCOMPSAC.2018.10205&partnerID=40&md5=534ee2aec9acfb7dc1e51e43fdd48d4d","Dept. of Computer Science and Info. Eng, National Taipei Univ. of Tech., Taipei, Taiwan","Liu, C.-H., Dept. of Computer Science and Info. Eng, National Taipei Univ. of Tech., Taipei, Taiwan; Chen, W.-K., Dept. of Computer Science and Info. Eng, National Taipei Univ. of Tech., Taipei, Taiwan; Ho, S.-H., Dept. of Computer Science and Info. Eng, National Taipei Univ. of Tech., Taipei, Taiwan","Crawlers have been used in different aspects for testing Android apps automatically, such as crash testing and test inputs generation. However, the efficiency of crawlers can be a concern as it often takes hours or even days to fully explore a non-trivial app. This paper presents a crawling algorithm called NFS (Nearest unvisited event First Search) that can reduce the number of app restarts in order to improve crawling efficiency. Moreover, NFS can also achieve satisfactory code coverage and generate a GUI state graph for the app under exploration automatically. The experimental results show that in average NFS can be more efficient and can also obtain better code coverage than traditional crawling algorithms. © 2018 IEEE.","Android crawler; Android testing; Crawling efficiency; GUI testing; Test input generation","Application programs; Crashworthiness; Efficiency; Graphical user interfaces; Software testing; Android applications; Android apps; Android crawler; Code coverage; Crash testing; GUI testing; Satisfactory codes; Test inputs; Android (operating system)",,,,,"Ministry of Science and Technology, Taiwan, MOST","ACKNOWLEDGMENT This work was supported in part by the Ministry of Science and Technology, Taiwan, under the grant No. MOST 106-2221-E-027-008.",,"Number of Available Applications in the Google Play Store from December 2009 to December 2017, , https://www.statista.com/statistics/266210/number-of-availableapplications-in-the-google-play-store/, [Accessed April 5, 2018]; https://developer.android.com/studio/test/monkey.html, UI/Application Exerciser Monkey. [Accessed April 5, 2018]; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , Sept. 03-07; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the Joint Meeting on Foundations of Software Engineering, pp. 224-234; Zhu, H., Ye, X., Zhang, X., Shen, K., A context-aware approach for dynamic GUI testing of android applications (2015) Proceedings of the 39th IEEE Annual Computer Software and Applications Conference (COMPSAC), pp. 248-253. , Taichung, Taiwan; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA'13), pp. 623-640. , Oct. 29-31; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR-Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , Sept.-Oct; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , March 16-24, Rome, Italy; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA'13), pp. 641-660. , New York; Wang, P., Liang, B., You, W., Li, J., Shi, W., Automatic Android GUI traversal with high coverage (2014) Proceedings of the Fourth International Conference on Communication System and Network Technologies (CSNT), pp. 1161-1166. , April; https://google.github.io/androidtesting-support-library/docs/uiautomator/, [Accessed April 5, 2018]; https://f-droid.org/, [Accessed April 5, 2018]",,"Demartini C.Reisman S.Liu L.Tovar E.Takakura H.Yang J.-J.Lung C.-H.Ahamed S.I.Hasan K.Conte T.Nakamura M.Zhang Z.Akiyama T.Claycomb W.Cimato S.",,"IEEE Computer Society","42nd IEEE Computer Software and Applications Conference, COMPSAC 2018","23 July 2018 through 27 July 2018",,140235,07303157,9781538626665,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-85055507171
"Rau A., Hotzkow J., Zeller A.","56022232200;57195264609;7007015864;","Efficient GUI test generation by learning from tests of other apps",2018,"Proceedings - International Conference on Software Engineering",,,,"370","371",,7,"10.1145/3183440.3195014","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049684333&doi=10.1145%2f3183440.3195014&partnerID=40&md5=316802c2deb8d28e5e42055378faab27","Saarland University, Saarbrücken, Germany","Rau, A., Saarland University, Saarbrücken, Germany; Hotzkow, J., Saarland University, Saarbrücken, Germany; Zeller, A., Saarland University, Saarbrücken, Germany","Generating GUI tests for complex Web applications is hard. There is lots of functionality to explore: The eBay home page, for instance, sports more than 2,000 individual GUI elements that a crawler has to trigger in order to discover the core functionality. We show how to leverage tests of other applications to guide test generation for a new application: Given a test for payments on Amazon, for instance, we can guide test generation on eBay towards payment functionality, exploiting the semantic similarity between UI elements across both applications. Evaluated on three domains, our approach allows to discover ""deep"" functionality in a few steps, which otherwise would require thousands to millions of crawling interactions. © 2018 Authors.",,"Graphical user interfaces; Semantics; Software engineering; Core functionality; New applications; Semantic similarity; Test generations; WEB application; Testing",,,,,,,,"Elgin Akpinar, M., Yesilada, Y., Vision based page segmentation algorithm: Extended and perceived success (2013) Revised Selected Papers of the ICWE 2013 InternationalWorkshops on Current Trends InWeb Engineering-Volume 8295, pp. 238-252. , Springer-Verlag New York, Inc., New York, NY, USA; Islam, A., Inkpen, D., Semantic text similarity using corpusbased word similarity and string similarity (2008) ACM Transactions on Knowledge Discovery from Data 2008, 2 (2), pp. 1-25. , https://doi.org/10.1145/1376815.1376819; Manning, C.D., Raghavan, P., Schötze, H., (2008) Introduction to Information Retrieval, pp. 161-163. , Cambridge University Press, New York, NY, USA; Mikolov, T., Chen, K., Corrado, G., Dean, J., (2013) Google Newsvectors-Negative300bingz-Efficient Estimation of Word Representations in Vector Space 2013, , https://code.google.com/archive/p/, word2vec/",,,"ACM Special Interest Group on Software Engineering (SIGSOFT);Computer Society (IEEE-CS)","IEEE Computer Society","40th ACM/IEEE International Conference on Software Engineering, ICSE 2018","27 May 2018 through 3 June 2018",,137351,02705257,9781450356633,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85049684333
"Behrang F., Orso A.","55789905000;6603901617;","Poster: Automated test migration for mobile apps",2018,"Proceedings - International Conference on Software Engineering",,,,"384","385",,10,"10.1145/3183440.3195019","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049670732&doi=10.1145%2f3183440.3195019&partnerID=40&md5=a96f4e2bf33e912d94f3a9b09d9e3955","College of Computing, Georgia Tech, Atlanta, GA, United States","Behrang, F., College of Computing, Georgia Tech, Atlanta, GA, United States; Orso, A., College of Computing, Georgia Tech, Atlanta, GA, United States","The use of mobile apps is increasingly widespread, and much effort is put into testing these apps to make sure they behave as intended. To reduce this effort, and thus the cost of mobile app testing, we propose AppTestMigrator, a technique that allows for migrating test cases between apps with similar features. The intuition behind AppTestMigrator is that many apps share similarities in their functionality, and these similarities often result in conceptually similar user interfaces (through which that functionality is accessed). Typical examples of this situation are apps in the same category, apps developed based on the same specification, and different versions of the same app. In all these cases, the burden of writing test cases can be reduced by migrating test cases written for an app to another, similar app. Given a test case for an app (source app) and a second app (target app), AppTestMigrator attempts to automatically transform the sequence of events in the test for the source app to events that can be consumed by the target app. We implemented AppTestMigrator for Android mobile apps and evaluated our approach on four randomly selected shopping list apps from the Google Play Store. Our initial results are promising and motivate further research in this direction. © 2018 Authors.",,"Software engineering; User interfaces; Automated test; Google plays; Mobile app; Mobile apps; Sequence of events; Shopping lists; Test case; Testing",,,,,"National Science Foundation, NSF: 1548856, CCF-1161821","National Science Foundation under grants CCF-1161821 and 1548856.",,"(2018) Espresso 2018, , https://developer.android.com/training/testing/espresso/; Mikolov, T., Chen, K., Corrado, G., Dean, J., Efficient estimation of word representations in vector space (2013) CoRR abs/1301.3781 2013; Miller, G.A., Wordnet: A lexical database for english (1995) Commun ACM, 38 (11), pp. 39-41. , Nov, 1995",,,"ACM Special Interest Group on Software Engineering (SIGSOFT);Computer Society (IEEE-CS)","IEEE Computer Society","40th ACM/IEEE International Conference on Software Engineering, ICSE 2018","27 May 2018 through 3 June 2018",,137351,02705257,9781450356633,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85049670732
"Eler M.M., Rojas J.M., Ge Y., Fraser G.","36671155600;35103141400;57195630195;9247521200;","Automated Accessibility Testing of Mobile Apps",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018",,,,"116","126",,18,"10.1109/ICST.2018.00021","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048412466&doi=10.1109%2fICST.2018.00021&partnerID=40&md5=773e14628e7a8f0753fc3fc575703879","University of Sao Paulo, Brazil; University of Leicester, United Kingdom; University of Sheffield, United Kingdom; University of Passau, Germany","Eler, M.M., University of Sao Paulo, Brazil; Rojas, J.M., University of Leicester, United Kingdom; Ge, Y., University of Sheffield, United Kingdom; Fraser, G., University of Passau, Germany","It is important to make mobile apps accessible, so as not to exclude users with common disabilities such as blindness, low vision, or color blindness. Even when developers are aware of these accessibility needs, the lack of tool support makes the development and assessment of accessible apps challenging. Some accessibility properties can be checked statically, but user interface widgets are often created dynamically and are not amenable to static checking. Some accessibility checking frameworks analyze accessibility properties at runtime, but have to rely on existing thorough test suites. In this paper, we introduce the idea of using automated test generation to explore the accessibility of mobile apps. We present the MATE tool (Mobile Accessibility Testing), which automatically explores apps while applying different checks for accessibility issues related to visual impairment. For each issue, MATE generates a detailed report that supports the developer in fixing the issue. Experiments on a sample of 73 apps demonstrate that MATE detects more basic accessibility problems than static analysis, and many additional types of accessibility problems that cannot be detected statically at all. Comparison with existing accessibility testing frameworks demonstrates that the independence of an existing test suite leads to the identification of many more accessibility problems. Even when enabling Android's assistive features like contrast enhancement, MATE can still find many accessibility issues. © 2018 IEEE.","accessibility; automated testing; mobile apps; software testing; test generation","Automation; Color vision; Eye protection; Static analysis; User interfaces; Verification; accessibility; Accessibility problems; Automated test generations; Automated testing; Contrast Enhancement; Mobile accessibilities; Mobile apps; Test generations; Software testing",,,,,,,,"Adams, D., Kurniawan, S., A blind-friendly photography application for smartphones (2014) SIGACCESS Access. Comput., pp. 12-15. , Jan; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) IEEE/ACM Int. Conference On Automated Software Engineering (ASE, pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Robbins, B., Chapter 1-testing android mobile applications: Challenges, strategies, approaches (2013) Advances in Computers, 89, pp. 1-52. , Elsevier; (2016) Use Accessibility Features On Your IPhone, IPad, IPod Touch, , https://support.apple.com/en-eg/HT204390, Apple; (2016) Apple. VoiceOver, , http://www.apple.com/uk/accessibility/iphone/vision/; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) ACM. SIGPLAN Notices, 48 (10), pp. 641-660; Baek, Y.-M., Bae, D.-H., Automated model-based android GUI testing using multi-level GUI comparison criteria (2016) IEEE/ACM Int. Conference On Automated Software Engineering (ASE, pp. 238-249. , ACM; Banerjee, A., Chong, L.K., Chattopadhyay, S., Roychoudhury, A., Detecting energy bugs and hotspots in mobile apps (2014) ACM Symposium On the Foundations of Software Engineering (FSE, pp. 588-598; Billi, M., Burzagli, L., Catarci, T., Santucci, G., Bertini, E., Gabbanini, F., Palchetti, E., A unified methodology for the evaluation of accessibility and usability of mobile applications (2010) Universal Access in the Information Society, 9 (4), pp. 337-356; Brajnik, G., Web accessibility testing: When the method is the culprit (2006) Int. Conference On Computers for Handicapped Persons (ICCHP, pp. 156-163. , Springer; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) ACM SIGPLAN Notices, 48 (10), pp. 623-640; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet (e (2015) IEEE/ACM Int. Conference On Automated Software Engineering (ASE, pp. 429-440; Consortium, W.W.W., Web Accessibility Initiative (WAI, , https://www.w3.org/WAI/mobile/, Last accessed February 2017; Gemou, M., Montalva Colomer, J.B., Cabrera-Umpierrez, M.F., Delos Rios, S., Arredondo, M.T., Bekiaris, E., Validation of toolkits for developing third-generation android accessible mobile applications (2016) Universal Access in the Information Society, 15 (1), pp. 101-127; Gibler, C., Crussell, J., Erickson, J., Android, H.C., Leaks: Automatically detecting potential privacy leaks in Android applications on a large scale (2012) Int. Conference On Trust and Trustworthy Computing (TRUST, pp. 291-307. , Springer Berlin Heidelberg; Accessibility Testing Framework, , https://github.com/google/Accessibility-Test-Framework-for-Android, Google; https://google.github.io/android-testing-support-library/docs/espresso/index.html, Google. Espresso; Robolectric, , http://robolectric.org/, Google; (2016) Android Lint, , https://developer.android.com/studio/write/lint.html, Google; (2016) IOS UI Automation Test Framework, , https://github.com/google/EarlGrey, Google. EarlGrey; (2016) Get Started with Accessibility Scanner, , https://support.google.com/accessibility/android/answer/6376570, Google Nov; (2016) Google TalkBack, , https://play.google.com/store/apps/detailsid=com.google.android.marvin.talkback, Google; (2016) Making Apps More Accessible, , https://developer.android.com/guide/topics/ui/accessibility/apps.html, Google Feb; (2017) Testing You App's Accessibility, , https://developer.android.com/training/accessibility/testing.html, Google Jan; (2017) Ui Automator, , https://developer.android.com/training/testing/ui-automator.html, Google Sept; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference On Mobile Systems, Applications, pp. 204-217. , Services, MobiSys '14 New York, NY, USA ACM; (2017) Gradle Build Tool, , https://gradle.org, G. Inc; (2016) Keep It Functional-A N Ios Functional Testing Framework, , https://github.com/kif-framework/KIF, KIF. KIF; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) IEEE Int. Conference On Software Testing Verification and Validation (ICST, pp. 1-10. , IEEE; Lee, K., Flinn, J., Giuli, T., Noble, B., Amc, C.P., Verifying user interface properties for vehicular applications (2013) Proceeding of the 11th Annual International Conference On Mobile Systems, Applications, Services, MobiSys '13, pp. 1-12. , New York, NY, USA ACM; Limited, F.-D., (2017) F-Croid Catalogue of Free and Open Source Android Apps, , https://f-droid.org/; Liu, Y., Xu, C., Cheung, S.-C., Characterizing and detecting performance bugs for smartphone applications (2014) ACM/IEEE Int. Conference On Software Engineering (ICSE, pp. 1013-1024; MacHiry, A., Tahiliani, R., Naik Dynodroid, M., An input generation system for android apps (2013) ACM Symposium On the Foundations of Software Engineering (FSE, pp. 224-234. , ACM; Mahmood, R., Mirzaei, N., Malek Evodroid, S., Segmented evolutionary testing of android apps (2014) ACM Symposium On the Foundations of Software Engineering (FSE, pp. 599-609. , ACM; Malý, I., Bittner, J., Slavík, P., Using annotated task models for accessibility evaluation (2012) Int. Conference On Computers Helping People with Special Needs (ICCHP, pp. 315-322. , Springer Berlin Heidelberg; Mankoff, J., Fait, H., Tran, T., Is your web page accessible: A comparative study of methods for assessing web page accessibility for the blind (2005) SIGCHI Conference On Human Factors in Computing Systems (CHI, pp. 41-50. , ACM; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) ACM Int. Symposium On Software Testing and Analysis (ISSTA, pp. 94-105; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Int. Workshop On Automation of Software Test (AST, pp. 29-35. , IEEE Press; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., An innovative tool for automated testing of GUI-driven software (2014) Automated Software Eng, 21 (1), pp. 65-105. , GUITAR; Otsu, N., A threshold selection method from gray-level histograms (1979) IEEE Transactions On Systems, Man and Cybernetics, 9 (1), pp. 62-66; Main Report-world Report On Disability, , World Bank; Yesilada, Y., Brajnik, G., Harper, S., Barriers common to mobile and disabled web users (2011) Interact. Comput., 23 (5), pp. 525-542; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) Journal of Systems and Software (JSS, 117, pp. 334-356",,,"","Institute of Electrical and Electronics Engineers Inc.","11th IEEE International Conference on Software Testing, Verification and Validation, ICST 2018","9 April 2018 through 13 April 2018",,136754,,9781538650127,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85048412466
"Alegroth E., Karlsson A., Radway A.","55843479600;57202456003;57202448363;","Continuous Integration and Visual GUI Testing: Benefits and Drawbacks in Industrial Practice",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018",,,,"172","181",,5,"10.1109/ICST.2018.00026","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048401529&doi=10.1109%2fICST.2018.00026&partnerID=40&md5=677f3a6d15b46c0cdd3de05989dc701d","Dept. of Software Engineering, Blekinge Institute of Technology, Karlskrona, SE-37179, Sweden; Cilbuper IT, Johan Willins gata 6, Gothenburg, 41664, Sweden; Techship Krokslatts Fabriker, Molndal, 43137, Sweden","Alegroth, E., Dept. of Software Engineering, Blekinge Institute of Technology, Karlskrona, SE-37179, Sweden; Karlsson, A., Cilbuper IT, Johan Willins gata 6, Gothenburg, 41664, Sweden; Radway, A., Techship Krokslatts Fabriker, Molndal, 43137, Sweden","Continuous integration (CI) is growing in industrial popularity, spurred on by market trends towards faster delivery and higher quality software. A key facilitator of CI is automated testing that should be executed, automatically, on several levels of system abstraction. However, many systems lack the interfaces required for automated testing. Others lack test automation coverage of the system under test's (SUT) graphical user interface (GUI) as it is shown to the user. One technique that shows promise to solve these challenges is Visual GUI Testing (VGT), which uses image recognition to stimulate and assert the SUT's behavior. Research has presented the technique's applicability and feasibility in industry but only limited support, from an academic setting, that the technique is applicable in a CI environment. In this paper we presents a study from an industrial design research study with the objective to help bridge the gap in knowledge regarding VGT's applicability in a CI environment in industry. Results, acquired from interviews, observations and quantitative analysis of 17.567 test executions, collected over 16 weeks, show that VGT provides similar benefits to other automated test techniques for CI. However, several significant drawbacks, such as high costs, are also identified. The study concludes that, although VGT is applicable in an industrial CI environment, its severe challenges require more research and development before the technique becomes efficient in practice. © 2018 IEEE.","Continuous Integration; Design Research; Empirical; Industrial Study; Visual GUI Testing","Automation; Behavioral research; Graphical user interfaces; Image recognition; Industrial research; Integration; Product design; Research and development management; Verification; Continuous integrations; Design research; Empirical; Industrial Study; Visual gui testing; Integration testing",,,,,,,,"Stahl, D., Bosch, J., Modeling continuous integration practice differences in industry software development (2014) Journal of Systems and Software, 87, pp. 48-59; Meyer, M., Continuous integration and its tools (2014) IEEE Software, 31 (3), pp. 14-16; Miller, A., A hundred days of continuous integration (2008) Agile 2008. AGILE'08. Conference IEEE, pp. 289-293; Shore, J., Fail fast [software debugging] (2004) IEEE Software, 21 (5), pp. 21-25; Fowler, M., Foemmel, M., Continuous integration (2006) Thought-Works, p. 122. , http://www.thoughtworks.com/ContinuousIntegration.pdf; Olan, M., Unit testing: Test early, test often (2003) Journal of Computing Sciences in Colleges, 19 (2), pp. 319-328; Miller, R., Collins, C.T., Acceptance testing (2001) Proc. XPUniverse, 238; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference On Software Engineering ACM, pp. 571-579; Horowitz, E., Singhera, Z., (1993) Graphical User Interface Testing, 4 (8). , Technical eport Us C-C S-93-5; Duvall, P.M., Matyas, S., Glover, A., (2007) Continuous Integration: Improving Software Quality and Reducing Risk, , Pearson Education; Elbaum, S., Rothermel, G., Penix, J., Techniques for improving regression testing in continuous integration development environments (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium On Foundations of Software Engineering. ACM, pp. 235-245; Stahl, D., Bosch, J., Experienced benefits of continuous integration in industry software product development: A case study (2013) The 12th Iasted International Conference On Software Engineering, pp. 736-743. , innsbruck, Austria, 2013; Olsson, H.H., Alahyari, H., Bosch, J., Climbing the"" stairway to heaven""-a mulitiple-case study exploring barriers in the transition from agile development towards continuous deployment of software (2012) Software Engineering and Advanced Applications (SEAA 2012 38th EUROMICRO Conference On IEEE, pp. 392-399; Stahl, D., Bosch, J., Automated software integration flows in industry: A multiple-case study (2014) Companion Proceedings of the 36th International Conference On Software Engineering ACM, pp. 54-63; Debbiche, A., Dienér, M., Svensson, R.B., Challenges when adopting continuous integration: A case study (2014) International Conference On Product-Focused Software Process Improvement, pp. 17-32. , Springer; Alégroth, E., (2015) Visual GUI Testing Automating High-level Software Testing in Industrial Practice, , Chalmers University of Technology; Alégroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual gui testing: An empirical study (2015) 2015 IEEE 8th International Conference On Software Testing, Verification and Validation (ICST). IEEE, pp. 1-10; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. Dom-based web locators: An empirical study (2014) Web Engineering, 8541, pp. 322-340. , ser. Lecture Notes in Computer Science Springer; Garousi, V., Afzal, W., Caglar, A., Işk, I.B., Baydan, B., Caylak, S., Boyraz, A.Z., Herkiloglu, K., Comparing automated visual gui testing tools: An industrial case study (2017) Proceedings of International Workshop On Automated Software Testing (A-TEST; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using gui screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium On User Interface Software and Technology ACM, pp. 183-192; Alégroth, E., Feldt, R., Olsson, H., J automate: A tool for systemand acceptance-test automation (2012) ICST; Alegroth, E., Feldt, R., Olsson, H.H., Transitioning manual system test suites to automated testing: An industrial case study (2013) Software Testing, Verification and Validation (ICST 2013 IEEE Sixth International Conference On. IEEE, pp. 56-65; Muhamad, F.P.B., Sarno, R., Ahmadiyah, A.S., Rochimah, S., Visual gui testing in continuous integration environment (2016) Information & Communication Technology and Systems (ICTS), 2016 International Conference On IEEE, pp. 214-219; Lu, J., Yang, Z., Qian, J., Implementation of continuous integration and automated testing in software development of smart grid scheduling support system (2014) Power System Technology (POWERCON), 2014 International Conference On IEEE, pp. 2441-2446; Nilsson, A., Bosch, J., Berger, C., Visualizing testing activities to support continuous integration: A multiple case study (2014) International Conference On Agile Software Development, pp. 171-186. , Springer; Fitzgerald, B., Stol, K.-J., Continuous software engineering and beyond: Trends and challenges (2014) Proceedings of the 1st International Workshop On Rapid Continuous Software Engineering ACM, pp. 1-9; Bosch, J., (2014) Continuous Software Engineering, , Springer; Alégroth, E., Feldt, R., Ryrholm, L., Visual gui testing in practice: Challenges, problemsand limitations (2014) Empirical Software Engineering, pp. 1-51; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Software Engineering, 14 (2), pp. 131-164; Collins, A., Joseph, D., Bielaczyc, K., Design research: Theoretical and methodological issues (2004) The Journal of the Learning Sciences, 13 (1), pp. 15-42; Goldkuhl, G., Action research vs. Design research: Using practice research as a lens for comparison and integration (2013) The 2nd International SIG Prag Workshop On IT Artefact Design & Workpractice Improvement (ADWI-2013), , 5 June 2013, Tilburg, the Netherlands; Holmes, A., Kellogg, M., Automating functional tests using selenium (2006) Agile Conference 2006 IEEE, p. 6; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Hembrink, J., Stenberg, P., Continuous integration with jenkins (2013) Coaching of Programming Teams (EDA 270), , Faculty of Engineering, Lund University, LTH; Vander Linden, F., Family evaluation framework-overview & introduction (2005) Philips Medical Systems, Version, 1; Börjesson, E., Feldt, R., Automated system testing using visual gui testing tools: A comparative study in industry (2012) 2012 IEEE Fifth International Conference On Software Testing, Verification and Validation. IEEE, pp. 350-359; Seaman, C.B., Qualitative methods in empirical studies of software engineering (1999) IEEE Transactions On Software Engineering, 25 (4), pp. 557-572; Fayard, A.-L., Weeks, J., Photocopiers and water-coolers: The affordances of informal interaction (2007) Organization Studies, 28 (5), pp. 605-634; Palat, J., Introducing vagrant (2012) Linux Journal, (220), p. 2. , 2012; Alégroth, E., Feldt, R., On the long-term use of visual gui testing in industrial practice: A case study (2017) Empirical Software Engineering, pp. 1-35; Alégroth, E., Feldt, R., Kolström, P., Maintenance of automated test suites in industry: An empirical study on visual gui testing (2016) Information and Software Technology, 73, pp. 66-80; Alégroth, E., Steiner, M., Martini, A., Exploring the presence of technical debt in industrial gui-based testware: A case study (2016) 2016 IEEE Ninth International Conference On Software Testing, Verification and Validation Workshops (ICSTW). IEEE, pp. 257-262; Alégroth, E., Feldt, R., Industrial application of visual gui testing: Lessons learned (2014) Continuous Software Engineering, pp. 127-140. , Springer",,,"","Institute of Electrical and Electronics Engineers Inc.","11th IEEE International Conference on Software Testing, Verification and Validation, ICST 2018","9 April 2018 through 13 April 2018",,136754,,9781538650127,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85048401529
"Koroglu Y., Sen A., Muslu O., Mete Y., Ulker C., Tanriverdi T., Donmez Y.","57189759429;36467092300;57190739657;57202453394;57202457218;57202451819;57192061897;","QBE: QLearning-Based Exploration of Android Applications",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018",,,,"105","115",,20,"10.1109/ICST.2018.00020","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045671429&doi=10.1109%2fICST.2018.00020&partnerID=40&md5=b2d1c143deb7d09425cdea971a276b0a","Department of Computer Engineering, Bogazici University, Istanbul, Turkey; Netas Telecommunications, Istanbul, Turkey","Koroglu, Y., Department of Computer Engineering, Bogazici University, Istanbul, Turkey; Sen, A., Department of Computer Engineering, Bogazici University, Istanbul, Turkey; Muslu, O., Netas Telecommunications, Istanbul, Turkey; Mete, Y., Netas Telecommunications, Istanbul, Turkey; Ulker, C., Netas Telecommunications, Istanbul, Turkey; Tanriverdi, T., Netas Telecommunications, Istanbul, Turkey; Donmez, Y., Netas Telecommunications, Istanbul, Turkey","Android applications are used extensively around the world. Many of these applications contain potential crashes. Black-box testing of Android applications has been studied over the last decade to detect these crashes. In this paper, we propose QLearning-Based Exploration (QBE), a fully automated black-box testing methodology, which explores GUI actions using a well-known reinforcement learning technique called QLearning. QBE performs automata learning to obtain a model of the AUT, and generates replayable test suites. Specifically, QBE learns from a set of existing applications the kinds of actions that are most useful in order to reach a particular objective such as detecting crashes or increasing activity coverage. To the best of our knowledge, ours is the first machine learning based approach in Android GUI Testing. We conduct experiments on a test set of 100 AUTs obtained from the commonly used F-Droid benchmarks to show the effectiveness of QBE. We show that QBE performs better than all compared black-box tools in terms of activity coverage and number of distinct detected crashes. We make QBE and our experimental data available online. © 2018 IEEE.","Android; Automata Learning; Reinforcement Learning; Test Generation","Android (operating system); Automata theory; Graphical user interfaces; Learning algorithms; Reinforcement learning; Verification; Android; Android applications; Automata Learning; Fully automated; GUI testing; Reinforcement learning techniques; Test generations; Test suites; Black-box testing",,,,,"13662","IX. ACKNOWLEDGEMENT This research was supported in part by Bogazici University Research Fund 13662.",,"Chaffey, D., (2017) Statistics On Consumer Mobile Usage and Adoption to Inform Your Mobile Marketing Strategy Mobile Site Design and App Development, , http://www.smartinsights.com/mobile-marketing/mobilemarketing-Analytics/mobile-marketing-statistics/; Zein, S., Salleh, N., Grundy, J., A systematic mapping study of mobile application testing techniques (2016) J. Syst. Softw., 117, pp. 334-356; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) 12th Annual International Conference On Mobile Systems, Applications, Services (MobiSys, pp. 204-217; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) ACM SIGPLAN International Conference On Object Oriented Programming Systems Languages and Applications (OOPSLA, pp. 641-660; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) ACM SIGPLAN International Conference On Object Oriented Programming Systems Languages and Applications (OOPSLA, pp. 623-640; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) 25th International Symposium On Software Testing and Analysis (ISSTA, pp. 94-105; Moran, K., Vásquez, M.L., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) IEEE International Conference On Software Testing, Verification and Validation (ICST, pp. 33-44; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) 9th Joint Meeting On Foundations of Software Engineering (ESEC/FSE, pp. 224-234; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Android UI/application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html; Watkins, C.J.C.H., (1989) Learning from Delayed Rewards, , https://www.cs.rhul.ac.uk/home/chrisw/thesis.html, Ph.D. dissertation King's College, Cambridge; Gultnieks, C., (2010) F-Droid Benchmarks, , https://f-droid.org/; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Auto Black Test: Automatic black-box testing of interactive applications (2012) IEEE Fifth International Conference On Software Testing, Verification and Validation (ICST; Carino, S., Andrews, J.H., Dynamically testing GUIs using ant colony optimization (2015) 30th IEEE/ACM International Conference On Automated Software Engineering (ASE, pp. 135-148; Hu, Y., Neamtiu, I., VALERA: An effective and efficient recordand-replay tool for android (2016) International Conference On Mobile Software Engineering and Systems (MOBILESoft; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timingand touch-sensitive record and replay for android (2013) International Conference On Software Engineering (ICSE; Fazzini, M., Freitas, E.N.D.A., Choudhary, S.R., Orso, A., Barista: A technique for recording, encoding, running platform independent android tests (2017) IEEE International Conference On Software Testing, Verification and Validation (ICST; Alpaydin, E., (2010) Introduction to Machine Learning, 2nd Ed, , The MIT Press; (2017) Andro Frame GitHub Page, , https://github.com/yavuzkoroglu/androframerelease; The Android Emulator, , https://developer.android.com/studio/run/emulator.html; ELLA: A Tool for Binary Instrumentation of Android Apps, , https://github.com/saswatanand/ella; Jeon, J., Micinski, K.K., Vaughan, J.A., Fogel, A., Reddy, N., Foster, J.S., Millstein, T., Dr. Android and Mr. Hide: Fine-grained permissions in android applications second (2012) ACM Workshop On Security and Privacy in Smartphones and Mobile Devices (SPSM; Zheng, H., Li, D., Liang, B., Zeng, X., Zheng, W., Deng, Y., Lam, W., Xie, T., Automated test input generation for android: Towards getting there in an industrial case (2017) 39th International Conference On Software Engineering: Software Engineering in Practice Track (ICSE-SEIP; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet (2015) 30th IEEE/ACM International Conference On Automated Software Engineering, pp. 429-440. , ser. ASE",,,"","Institute of Electrical and Electronics Engineers Inc.","11th IEEE International Conference on Software Testing, Verification and Validation, ICST 2018","9 April 2018 through 13 April 2018",,136754,,9781538650127,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85045671429
"Arnatovich Y.L., Wang L., Ngo N.M., Soh C.","56748057600;56881778600;57200523433;57187858600;","Mobolic: An automated approach to exercising mobile application GUIs using symbiosis of online testing technique and customated input generation",2018,"Software - Practice and Experience","48","5",,"1107","1142",,3,"10.1002/spe.2564","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041495358&doi=10.1002%2fspe.2564&partnerID=40&md5=8081df6e9a64fc857b4ed12b651d396a","School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore; Global Outreach and Extended Education, Arizona State University, Ho Chi Minh City, United States","Arnatovich, Y.L., School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore; Wang, L., School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore; Ngo, N.M., Global Outreach and Extended Education, Arizona State University, Ho Chi Minh City, United States; Soh, C., School of Electrical and Electronic Engineering, Nanyang Technological University, Singapore","The increasingly prevalent use of mobile devices has raised the popularity of mobile applications. Therefore, automated testing of mobile applications has become an extremely important task. However, it is still a challenge to automatically generate tests with high coverage for mobile applications due to their specific nontrivial structure and the highly interactive nature of graphical user interfaces (GUIs). In this paper, we propose a novel automated GUI testing technique for mobile applications, namely, Mobolic. In this approach, tests with high coverage are automatically generated and executed by combining the online testing technique and customated input generation. Employing the online testing technique, Mobolic systematically explores the app GUI without falling in a loop. It generates relevant events “on the fly” that are followed by an immediate execution. In addition, involving the customated input generation, Mobolic automatically generates relevant user inputs such as user-predefined, concrete, or random ones. We implemented Mobolic and evaluated its performance on 10 real-world open-source Android applications. Our experimental results show the effectiveness and efficiency of Mobolic in terms of achieved code coverage and overall exercising time. Copyright © 2018 John Wiley & Sons, Ltd.","event-driven FSM; model checking; model-based testing; symbolic execution; systematic GUI exploration; textual input generation","Automatic test pattern generation; Automation; Mobile computing; Mobile devices; Model checking; Android applications; Automatically generated; Effectiveness and efficiencies; Event-driven; Graphical user interface (GUIs); Model based testing; Symbolic execution; Textual input generation; Graphical user interfaces",,,,,,,,"Gianazza, A., Maggi, F., Fattori, A., Cavallaro, L., Zanero, S., (2014) Puppetdroid: A User-Centric UI Exerciser for Automatic Dynamic Analysis of Similar Android Applications; Hu, C., Neamtiu, I., Automating GUI testing for Android applications Proceedings Proceedings of the 6th International Workshop on Automation of Software Test, , Honolulu, HI; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: an innovative tool for automated testing of GUI-driven software (2014) Autom Softw Eng, 21 (1), pp. 65-105; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases Proceedings Proceedings of the 29th International Conference on Software Engineering (ICSE'07), , Washington, DC; Yang, W., Chen, Z., Gao, Z., Zou, Y., Xu, X., GUI testing assisted by human knowledge: random vs. functional (2014) J Syst Softw, 89, pp. 76-86.; Gutiérrez, J., Escalona, M., Mejías, M., A model-driven approach for functional test case generation (2015) J Syst Softw, 109, pp. 214-228; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: automated model-based testing of mobile apps (2015) IEEE Softw, 32 (5), pp. 53-59; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, , Cary, NC; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps Proceedings Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, , Saint Petersburg, Russia; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps Proceedings Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and Applications, , Indianapolis, IN; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning Proceedings Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and Applications, , Indianapolis, IN; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications Proceedings Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, , Essen, Germany; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications Proceedings Proceedings of the 25th International Symposium on Software Testing and Analysis;, Saarbrü, , cken, Germany; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? Proceedings 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), , Lincoln, NE; Amalfitano, D., Amatucci, N., Memon, A.M., Tramontana, P., Fasolino, A.R., A general framework for comparing automatic testing techniques of Android mobile apps (2017) J Syst Softw, 125, pp. 322-343; Utting, M., Pretschner, A., Legeard, B., A taxonomy of model-based testing approaches (2012) Softw Test Verification Reliab, 22 (5), pp. 297-312; Larsen, K.G., Mikucionis, M., Nielsen, B., (2005) Online Testing of Real-Time Systems Using Uppaal, pp. 79-94. , Berlin, Germany, Springer Berlin Heidelberg; Linehan, M.H., Semantics in model-driven business design Proceedings Proceedings of the 2nd International Semantic Web Policy Workshop, , Yorktown Heights, NY; Lee, J., Model-driven business transformation and the semantic web (2005) Commun ACM, 48 (12), pp. 75-77; Gamboa, M.A., Syriani, E., Automating activities in MDE tools Proceedings 2016 4th International Conference on Model-Driven Engineering and Software Development (MODELSWARD), , Rome, Italy; Klein, J., Levinson, H., Marchetti, J., (2015) Model-driven engineering: automatic code generation and beyond [Technical report], , Pittsburgh, PA, Software Engineering Institute at Carnegie Mellon University; Arnatovich, Y.L., Ngo, M.N., Kuan, T.H.B., Soh, C., Achieving high code coverage in Android UI testing via automated widget exercising Proceedings 2016 23rd Asia-Pacific Software Engineering Conference (APSEC), , Hamilton, New Zealand; Potdar, G.P., Thool, R., Comparison of various heuristic search techniques for finding shortest path (2014) Int J Artif Intell Appl, 5 (4), p. 63; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation Proceedings Proceedings of the 2013 International Symposium on Software Testing and Analysis, , Lugano, Switzerland; Nguyen, C.D., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation Proceedings Proceedings of the Combining International Symposium on Software Testing and Analysis, , Minneapolis, MN; Yang, W., Prasad, M.R., Xie, T., Grey-box approach for automated GUI-model generation of mobile applications (2013) Fundamental Approaches to Software Engineering, pp. 250-265. , Rome, Italy, Springer; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps Proceedings Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, , Hong Kong, China; Cadar, C., Ganesh, V., Pawlowski, P.M., Dill, D.L., Engler, D.R., EXE: automatically generating inputs of death (2008) ACM Trans Inf Syst Secur, 12 (2), pp. 1-38; Inkumsah, K., Xie, T., Evacon: A framework for integrating evolutionary and concolic testing for object-oriented programs Proceedings Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering (ASE'07), , New York, NY; Anand, S., (2012) Techniques to Facilitate Symbolic Execution of Real-World Programs [PhD thesis], , Atlanta, GA, Georgia Institute of Technology; Siddiqui, J.H., Khurshid, S., Parsym: Parallel symbolic execution Proceedings 2010 2nd International Conference on Software Technology and Engineering, , San Juan, Puerto Rico; Staats, M., Pasareanu, C., Parallel symbolic execution for structural test generation Proceedings Proceedings of the 19th International Symposium on Software Testing and Analysis, , Trento, Italy; Scholz, B., Zhang, C., Cifuentes, C., (2008) User-input dependence analysis via graph reachability [Technical report], , Mountain View, CA; Elish, K.O., Yao, D., Ryder, B.G., User-centric dependence analysis for identifying malicious mobile apps Proceedings Workshop on Mobile Security Technologies, , San Francisco, CA; Wei, F., Roy, S., Ou, X., Amandroid: A precise and general inter-component data flow analysis framework for security vetting of android apps Proceedings Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, , Scottsdale, AZ; Hao, S., Li, D., Halfond, W.G., Govindan, R., SIF: A selective instrumentation framework for mobile applications Proceedings Proceedings of the 11th Annual International Conference on Mobile Systems, ApplicationsServices (MobiSys'13), , Taipei, Taiwan; (2017) Symbolic Math Toolbox, , https://www.mathworks.com/help/symbolic, Accessed January;; Runeson, P., Host, M., Rainer, A., Regnell, B., (2012) Case Study Research in Software Engineering: Guidelines and Examples, , Hoboken, NJ, John Wiley & Sons; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslén, A., (2012) Experimentation in Software Engineering, , Berlin, Germany, Springer Science & Business Media; Feldt, R., Magazinius, A., (2010) Validity threats in empirical software engineering research-an initial survey, , SEKE;; Wright, H.K., Kim, M., Perry, D.E., Validity concerns in software engineering research Proceedings Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research (FoSER'10), , Santa Fe, NM; Poole, D.L., Mackworth, A.K., (2010) Artificial Intelligence: Foundations of Computational Agents, , Cambridge, UK, Cambridge University Press; Li, G., Lu, K., Zhang, Y., Lu, X., Zhang, W., Mixing concrete and symbolic execution to improve the performance of dynamic test generation Proceedings 2009 3rd International Conference on New Technologies, Mobility and Security, , Cairo, Egypt; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing Proceedings Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'05), , Chicago, IL; De Moura, L., Bjørner, N., Z3: An efficient SMT solver Proceedings 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, , Hungary, Budapest; De Moura, L., Bjørner, N., Satisfiability modulo theories: An appetizer Proceedings 12th Brazilian Symposium on Formal Methods, , Gramado, Brazil; Chipounov, V., Kuznetsov, V., Candea, G., S2E: A platform for in-vivo multi-path analysis of software systems Proceedings Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, , Newport Beach, CA; Hamlet, R., (1994) Random testing, , Encyclopedia of software Engineering;; Zhang, J., Cheung, S.C., Automated test case generation for the stress testing of multimedia systems (2002) Softw Pract Exp, 32 (15), pp. 1411-1435; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback-directed random test generation Proceedings Proceedings of the 29th International Conference on Software Engineering, , Minneapolis, MN; Chen, T.Y., Leung, H., Mak, I., Adaptive Random Testing (2004) Advances in computer science-ASIAN. Higher-Level Decision Making, pp. 320-329. , Chiang Mai, Thailand, Springer; Liu, H., Xie, X., Yang, J., Lu, Y., Chen, T.Y., Adaptive random testing through test profiles (2011) Softw Pract Exp, 41 (10), pp. 1131-1154; Pacheco, C., Ernst, M.D., Randoop: Feedback-directed random testing for Java Proceedings Companion to the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications Companion, , Montreal, Canada; Artzi, S., Dolby, J., Jensen, S.H., Moller, A., Tip, F., A framework for automated testing of JavaScript web applications Proceedings 2011 33rd International Conference on Software Engineering (ICSE), , Honolulu, HI; Nyman, N., (2000) Using monkey test tools, , Software Testing & Quality Engineering Magazine; Hofer, B., Peischl, B., Wotawa, F., GUI savvy end-to-end testing with smart monkeys Proceedings 2009 ICSE Workshop on Automation of Software Test, , Vancouver, Canada; Brummayer, R., Lonsing, F., Biere, A., (2010) Automated Testing and Debugging of SAT and QBF Solvers, pp. 44-57. , Berlin, Germany, Springer Berlin Heidelberg; Mehlitz, P., Tkachuk, O., Ujma, M., JPF-AWT: Model checking GUI applications Proceedings Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering, , Lawrence, KS; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences Proceedings Proceedings of the 11th International Symposium on Software Reliability Engineering, , San Jose, CA; Marback, A., Do, H., He, K., Kondamarri, S., Xu, D., A threat model-based approach to security testing (2013) Softw Pract Exp, 43 (2), pp. 241-258; Walton, G.H., Poore, J.H., Generating transition probabilities to support model-based software testing (2000) Softw Pract Exp, 30 (10), pp. 1095-1106; Liu, P., Zhang, X., Pistoia, M., Zheng, Y., Marques, M., Zeng, L., Automatic text input generation for mobile testing Proceedings Proceedings of the 39th International Conference on Software Engineering (ICSE'17), , Buenos Aires, Argentina; Amalfitano, D., Fasolino, A.R., Tramontana, P., GUI crawling-based technique for Android mobile application testing Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops, , Berlin, Germany; Cadar, C., Godefroid, P., Khurshid, S., Symbolic execution for software testing in practice: Preliminary assessment Proceedings Proceedings of the 33rd International Conference on Software Engineering, , Honolulu, HI; Mirzaei, N., Malek, S., Păsăreanu, C.S., Esfahani, N., Mahmood, R., Testing Android apps through symbolic execution (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), pp. 1-5; Godboley, S., Mohapatra, D.P., Das, A., Mall, R., An improved distributed concolic testing approach (2017) Softw Pract Exp, 47 (2), pp. 311-342","Wang, L.; School of Electrical and Electronic Engineering, Singapore; email: elpwang@ntu.edu.sg",,,"John Wiley and Sons Ltd",,,,,00380644,,SPEXB,,"English","Software Pract Exper",Article,"Final","",Scopus,2-s2.0-85041495358
"Song F., Xu Z., Xu F.","57202867179;55613796500;56401380100;","An XPath-based approach to reusing test scripts for android applications",2018,"Proceedings - 2017 14th Web Information Systems and Applications Conference, WISA 2017","2018-January",,,"143","148",,1,"10.1109/WISA.2017.49","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049623024&doi=10.1109%2fWISA.2017.49&partnerID=40&md5=22f2cf66e22534c89035351782fbd196","School of Information and Electrical Engineering, Jiangsu Open University, Nanjing, 210017, China; College of Computer and Information, Hohai University, Nanjing, 210098, China; CBDS Practice, IBM Global Delivery (Dalian) Co., Ltd., Dalian, 116044, China","Song, F., School of Information and Electrical Engineering, Jiangsu Open University, Nanjing, 210017, China; Xu, Z., College of Computer and Information, Hohai University, Nanjing, 210098, China; Xu, F., CBDS Practice, IBM Global Delivery (Dalian) Co., Ltd., Dalian, 116044, China","The version of an Android application (app) is updated frequently and rewriting test scripts for each version update is laborious and expensive, so reusing existing test scripts is a better choice. Although the app's business logic is relatively stable during the process of app version evolution, user interface (UI) control changes in the new version tend to cause the original test scripts to fail, which is the main problem in test script reuse. In this paper we address this problem by developing an XPath-based approach to reusing test scripts for Android apps in the case of changes in the locations, names, or property values of UI controls in the app. In our approach, the test scripts use XPath expressions to locate the UI controls. The approach first identifies failed test scripts and no longer valid XPath expressions by executing the original test scripts on the new version of the app. Next, it uses the invalid XPath expressions to find the difference between the two DOMs corresponding to a view in the changed page in the new version and a view in the original page in the previous version, respectively. Finally, it uses the DOM difference to repair the XPath expressions, thereby achieving the reuse of test scripts. We have implemented a prototype of the approach based on Robotium and used it to conduct experiments on two real-world Android apps. The results show that our approach can achieve a higher script reuse percent than Robotium. © 2017 IEEE.","Android apps; Automated test framework; Robotium; Test script reuse; User interface controls; XPath","Information systems; Information use; Testing; User interfaces; Android apps; Automated test; Robotium; Test scripts; User interface control; XPath; Android (operating system)",,,,,,,,"Memon, A.M., Automatically repairing event sequence-based gui test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2), pp. 41-436. , November Article No. 4; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proc. of IEEE 31st International Conference on Software Engineering, ICSE 2009, pp. 408-418. , 16-24 May 2009, IEEE; Gao, Z., Chen, Z., Zou, Y., Memon, A.M., Sitar: Gui test script repair (2016) IEEE Transactions on Software Engineering, 42 (2), pp. 170-186. , Feb; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezzé, M., Automated gui refactoring and test script repair (2011) Proceedings of the First International Workshop on End-to-End Test Script Engineering, pp. 38-41. , July; Wang, S., Wang, X., Sun, J., Web application test scripts based on xpath path (2017) Application Research of Computers, 34 (5), pp. 1393-1396. , May [In Chinese]; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Robula+: An algorithm for generating robust xpath locators for web testing (2016) Journal of Software: Evolution and Process, 28 (3), pp. 177-204. , March; Pajunen, T., Takala, T., Katara, M., Model-based testing with a general purpose keyword-driven test automation framework (2011) Proc. of 2011 Fourth International Conference on Software Testing, pp. 242-251. , 21-25 March 2011, ICST Workshops; Liu, Z., Chen, Q., Jiang, X., A maintainability spreadsheet-driven regression test automation framework (2013) Proc. of 2013 IEEE 16th International Conference on Computational Science and Engineering (CSE, pp. 1181-1184. , 3-5 December 2013, IEEE; Liu, Z., Chen, Q., Cai, L., Research on gui-based automation test technology driven by separated definition data (2014) International Journal of Control and Automation, 7 (6), pp. 421-432. , June; Poulin, J.S., Caruso, J.M., A reuse metrics and return on investment model (1993) Proceedings Advances in Software Reuse, Selected Papers from the 2nd International Workshop on Software Reusability, pp. 152-166. , 24-26 March 1993, IEEE; Cláudio, J., Pires, C., Eduardo, M., De Almeida, S., Romero De Lemos Meira, S., A comparative study on software reuse metrics and economic models from a traceability perspective (2005) Proc. of the 2005 IEEE International Conference on Information Reuse and Integration, IRI-2005, pp. 72-77. , 15-17 August 2005, IEEE; Frakes, W., Terry, C., Software reuse: Metrics and models (1996) ACM Computing Surveys, 28 (2), pp. 415-435. , June",,,"CCF Technical Committee of Information System;China Computer Federation;Guangxi University of Science and Technology;IEEE Reliability Society","Institute of Electrical and Electronics Engineers Inc.","14th Web Information Systems and Applications Conference, WISA 2017","11 November 2017 through 12 November 2017",,135787,,9781538648063,,,"English","Proc. - Web Inf. Syst. Appl. Conf., WISA",Conference Paper,"Final","",Scopus,2-s2.0-85049623024
"Haoyin L.V.","57201885235;","Automatic android application GUI testing-A random walk approach",2018,"Proceedings of the 2017 International Conference on Wireless Communications, Signal Processing and Networking, WiSPNET 2017","2018-January",,,"72","76",,8,"10.1109/WiSPNET.8299722","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046373589&doi=10.1109%2fWiSPNET.8299722&partnerID=40&md5=25d69700f62128292460c5336792f69b","School of Information Engineering, Longdong University, Gansu, China","Haoyin, L.V., School of Information Engineering, Longdong University, Gansu, China","Android is one of the most popular operating system for smart phone and tablets. The fast growing of applications in the market with complex functionalities makes the testing of them a demanding task. Random testing is an effective measure to help testers to expose the bugs within the application. However, the built-in Monkey tool is still too primitive to expose bugs effectively. In this paper, we propose our improved monkeytesting tool, which improves the fault-detection capability of the monkey tool significantly with a series of optimizations. The empirical study shows that our improved monkey tool is more effective than the monkey on real-life Android applications. © 2017 IEEE.","Android; Random testing; Random walk; Test case generation","Fault detection; Program debugging; Random processes; Signal processing; Smartphones; Wireless telecommunication systems; Android; Android applications; Detection capability; Effective measures; Empirical studies; Random testing; Random Walk; Test case generation; Android (operating system)",,,,,,,,"Aravind MacHiry, Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2012) FSE'13: ACM Symposium on Foundations of Software Engineering; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T.H., Adaptive random testing: The ART of test case diversity (2009) Journal of Systems and Software; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, ser. MobiSys'14. New York, NY, USA, pp. 204-217. , ACM; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) IEEE Computer Engineering and Technology, pp. 297-301; Memon, A., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, ser. WCRE 03. Washington, DC, USA, p. 260. , IEEE Computer Society; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR - A tool for automated model-based testing of mobile apps (2014) IEEE Software, (99), p. NN; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, ser. OOPSLA '13. New York, NY, USA: ACM, pp. 623-640; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test, ser. AST ', 11, pp. 77-83. , New York, NY, USA: ACM; Liu, Y., Xu, C., Cheung, S., (2012) Verifying Android Applications using Java Pathfinder, , The Hong Kong University of Science and Technology, Tech. Rep",,,"Conf - Global Academic Conference Platform;et al.;IEEE;IEEE Communications Society (ComSoc);iNserb;SSN","Institute of Electrical and Electronics Engineers Inc.","2nd IEEE International Conference on Wireless Communications, Signal Processing and Networking, WiSPNET 2017","22 March 2017 through 24 March 2017",,134757,,9781509044412,,,"English","Proc. Int. Conf. Wirel. Commun., Signal Process. Networking, WiSPNET",Conference Paper,"Final","",Scopus,2-s2.0-85046373589
"Din F., Zamli K.Z.","56070700100;8701576800;","Fuzzy adaptive teaching learning-based optimization strategy for GUI functional test cases generation",2018,"ACM International Conference Proceeding Series",,,,"92","96",,6,"10.1145/3185089.3185148","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048508251&doi=10.1145%2f3185089.3185148&partnerID=40&md5=431e8dd6c9eb6fd45d45a9c9c68d1bdb","Faculty of Computer Systems and Software Engineering, Universiti Malaysia Pahang, Gambang, Kuantan, Pahang, 26300, Malaysia; Department of Computer Science and IT, University of Malakand, KPK, Pakistan","Din, F., Faculty of Computer Systems and Software Engineering, Universiti Malaysia Pahang, Gambang, Kuantan, Pahang, 26300, Malaysia, Department of Computer Science and IT, University of Malakand, KPK, Pakistan; Zamli, K.Z., Faculty of Computer Systems and Software Engineering, Universiti Malaysia Pahang, Gambang, Kuantan, Pahang, 26300, Malaysia","Graphical User Interface (GUI) visualizes computer programs for the purpose of facilitating interaction between users and various computing devices. Today’s computers, smart phones and even small devices such as watches are equipped with GUIs. Unlike command based interaction, GUI uses images, labels, push buttons, radio buttons, etc. for the effective communication of users with a software system. GUI testing is a critical part of software testing as it is the door to the actual functionality of software. For the quality assurance, GUI functional testing of a software validates proper interaction between the interface and the user without considering any coding details. In this paper, a strategy based on fuzzy Adaptive Teaching Learning-based Optimization (ATLBO) algorithm, a variant of the basic Teaching Learning-based Optimization (TLBO) algorithm, for GUI functional testing is proposed. ATLBO utilizes Event-Interaction Graph (EIG) for the generation of quality test cases. The proposed strategy has produced competitive experimental results against the basic TLBO and other test case generation algorithms. © 2018 Association for Computing Machinery.","GUI functional testing; Mamdani fuzzy inference system; Model-based testing; Teaching learning-based optimization","Application programs; Fasteners; Fuzzy inference; Graphical user interfaces; Model checking; Quality assurance; Smartphones; Effective communication; Functional testing; Graphical user interfaces (GUI); Interaction graphs; Mamdani fuzzy inferences; Model based testing; Teaching-learning-based optimizations; Test case generation; Software testing",,,,,,,,"Yang, W., Chen, Z., Gao, Z., Zou, Y., Xu, X., GUI testing assisted by human knowledge: Random vs. Functional (2014) J. Syst. and Softw., 89, pp. 76-86. , 2014; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. Softw. Eng., 34 (4), pp. 559-574. , 2011; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Trans. Softw. Eng., 37 (1), pp. 48-64. , 2011; Memon, A.M., GUI testing: Pitfalls and process (2002) Computer, 35 (8), pp. 87-88. , 2002; Timaná-Peña, J.A., Cobos-Lozada, C.A., Torres-Jimenez, J., Metaheuristic algorithms for building covering arrays: A review (2016) Revista Facultad De Ingeniería, 25 (43), pp. 31-45. , 2016; Garvin, B., Coehn, M., Dwyer, M., Evaluating improvements to a meta-heuristic search for constrained interaction testing (2011) Empirical Sofw. Eng., 16, pp. 61-102. , 2011; Ahmed, B.S., Zamli, K.Z., Lim, C.P., Application of Particle Swarm Optimization to uniform and variable strength covering array construction (2012) Applied Soft Comput, 12 (4), pp. 1330-1347. , 2012; Alsewari, A.R.A., Zamli, K.Z., Design and implementation of a Harmony Search based variable strength t-way testing strategy with constraints support (2012) Infor. Softw. Tech., 54 (6), pp. 553-568. , 2012; Alsewari, A.R.A., Zamli, K.Z., A Harmony Search based pairwise sampling strategy for combinatorial testing (2012) Inter. J. Phys. Sci., 7 (7), pp. 1062-1072. , 2012; Zamli, K.Z., Din, F., Kendall, G., Ahmed, B.S., An experimental study of hyper-heuristic selection and acceptance mechanism for combinatorial t-way test suite generation (2017) Infor. Sci., 399, pp. 121-153. , 2017; Din, F., Alsewari, A.R.A., Zamli, K.Z., A parameter free Choice Function based hyper-heuristic strategy for pairwise test generation (2017) Proceedings of The IEEE International Conference on Software Quality, Reliability and Security Companion, , Prague, Czech Republic; Zamli, K.Z., Alkazemi, B.Y., Kendall, G., A Tabu search hyper-heuristic strategy for t-way test suite generation (2016) Applied Soft Comput, 44, pp. 57-74. , 2016; Rao, R.V., (2016) Teaching-Learning-Based Optimization and Its Engineering Applications, , Springer-Verlag, London; Zamli, K.Z., Din, F., Baharom, S., Ahmed, B.S., Fuzzy adaptive Teaching Learning-based Optimization strategy for the problem of generating mixed strength t-way test suites (2017) Eng. Appl. Artif. Intell., 59, pp. 35-50. , 2017; Li, P., Huynh, T., Reformat, M., Miller, J., A practical approach to testing GUI systems (2007) Empirical Softw. Eng., 12 (4), pp. 331-357. , 2007; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896. , 2005; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of The 29th International Conference on Software Engineering, , Washington, DC, USA; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol. (TOSEM)., 18 (2), pp. 1-36. , 2008; Ahmed, B.S., Sahib, M.A., Potrus, M.Y., Generating combinatorial test cases using Simplified Swarm Optimization (SSO) algorithm for automated GUI functional testing (2014) Eng. Sci. Tech., An Inter. J., 17 (4), pp. 218-226. , 2014; Ahmed, B.S., Zamli, K.Z., A variable-strength interaction test suites generation strategy using Particle Swarm Optimization (2011) J. Syst. Softw., 84 (12), pp. 2171-2185. , 2011; Lei, Y., Kacker, R., Kuhn, D.R., Okun, V., Lawrence, J., IPOG: A General Strategy for T-Way Software Testing (2007) Proceedings of The 14th Annual IEEE International Conference and Workshops on The Engineering of Computer-Based Systems (ECBS2007), , Tucson, AZ; Arshem, J., (2009) Test Vector Generator Tool (TVG), , http://sourceforge.net/projects/tvg, last accessed March 2017; Czerwonka, J., Pairwise testing in the real world: Practical extensions to test case generators (2006) Proceedings of 24th Pacific Northwest Software Quality Conference, , Portland, Oregon, USA",,,"University of Tokyo","Association for Computing Machinery","7th International Conference on Software and Computer Applications, ICSCA 2018","8 February 2018 through 10 February 2018",,136540,,9781450354141,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85048508251
"Usman A., Ibrahim N., Salihu I.A.","57202460880;56036883900;57077031600;","Test case generation from android mobile applications focusing on context events",2018,"ACM International Conference Proceeding Series",,,,"25","30",,6,"10.1145/3185089.3185099","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048491207&doi=10.1145%2f3185089.3185099&partnerID=40&md5=2fe86657ac92af7188d501eb0e5e8c42","Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, (UTHM), Batu Pahat, Johor, Malaysia","Usman, A., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, (UTHM), Batu Pahat, Johor, Malaysia; Ibrahim, N., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, (UTHM), Batu Pahat, Johor, Malaysia; Salihu, I.A., Faculty of Computer Science and Information Technology, Universiti Tun Hussein Onn Malaysia, (UTHM), Batu Pahat, Johor, Malaysia","Nowadays mobile apps are developed to address more critical areas of people’s daily computing needs, which bring concern on the applications’ quality. Today’s Mobile apps processed not only the traditional GUI events but also accept and react to constantly varying context events which may have an impact on the application’s behaviour. To build high quality and more reliable applications, there is a need for effective testing techniques to test apps before release. Most of recent testing technique focuses on GUI events only making it difficult to identify other defects in the changes that can be inclined by the context in which an application runs. This paper proposed an approach for testing mobile apps considering the two sets of events: GUI events which we identified through static analysis of bytecode and context events obtained from analysis of manifest.xml file. Results from the experimental evaluation indicated that our approach is effective in identifying and testing context events. © 2018 Association for Computing Machinery.","Android; Android permissions; Context event; GUI event; Mobile application; Software testing; Test case generation","Application programs; Graphical user interfaces; Mobile computing; Software testing; Static analysis; Testing; Android; Android permissions; Context event; Mobile applications; Test case generation; Android (operating system)",,,,,,,,"Chan, P.P.K., Wen-Kai, S., Static detection of Android malware by using permissions and API calls (2014) 2014 International Conference on Machine Learning and Cybernetics; Choi, S., API Tracing Tool for Android-Based Mobile Devices (2015) International Journal of Information and Education Technology, 5 (6), p. 460; Dehlinger, J., Dixon, J., Mobile application software engineering: Challenges and research directions (2011) Workshop on Mobile Software Engineering; Song, K., Generating various contexts from permissions for testing Android applications (2015) International Conference on Software Engineering and Knowledge Engineering, SEKE, , Pittsburgh, United States; Felt, A.P., Android permissions demystified (2011) Proceedings of The 18th ACM Conference on Computer and Communications Security, , ACM; Amalfitano, D., Considering context events in event-based testing of mobile applications (2013) Software Testing, Verification and Validation Workshops (ICSTW), 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops, , Luxembourg: IEEE; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Automation of Software Test (AST), 2012 7th International Workshop on, , IEEE; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (ICSTW), 2011 IEEE Fourth International Conference on, , IEEE; Nguyen, B.N., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) Computer Engineering and Technology (ICCET), 2010 2nd International Conference on, , IEEE; Morgado, I.C., Paiva, A.C., Faria, J.P., Automated pattern-based testing of mobile applications (2014) Quality of Information and Communications Technology (QUATIC), 2014 9th International Conference on The Quality of Information and Communications Technology, , Guimaraes, Portugal: IEEE; Méndez-Porras, A., Quesada-López, C., Jenkins, M., Automated testing of mobile applications: A systematic map and review (2015) XVIII Ibero-American Conference on Software Engineering, , Lima-Peru; Griebe, T., Gruhn, V., A model-based approach to test automation for context-aware mobile applications (2014) Proceedings of The 29th Annual ACM Symposium on Applied Computing, , ACM; Adamsen, C.Q., Mezzetti, G., Møller, A., Systematic execution of android test suites in adverse conditions (2015) Proceedings of The 2015 International Symposium on Software Testing and Analysis, , ACM; Amalfitano, D., Using GUI ripping for automated testing of Android applications (2012) Proceedings of The 27th IEEE/ACM International Conference on Automated Software Engineering, , ACM; Salihu, I.A., Ibrahim, R., Systematic Exploration of Android Apps' Events for Automated Testing (2016) Proceedings of The 14th International Conference on Advances in Mobile Computing and Multi Media, , ACM; Mirzaei, N., Reducing combinatorics in GUI testing of android applications (2016) Proceedings of The 38th International Conference on Software Engineering, , ACM; Amalfitano, D., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Hu, C., Neamtiu, I., Automating GUI testing for Android applications (2011) Proceedings of The 6th International Workshop on Automation of Software Test, , ACM; Yu, S., Takada, S., External event-based test cases for mobile application (2015) Proceedings of The Eighth International Conference on Computer Science & Software Engineering, , ACM; Liu, C.H., Capture-replay testing for Android applications (2014) Computer, Consumer and Control (IS3C), 2014 International Symposium on, , IEEE; Salihu, I.A., Ibrahim, R., Mustapha, A., A Hybrid Approach for Reverse Engineering GUI Model from Android Apps for Automated Testing (2017) Journal of Telecommunication, Electronic and Computer Engineering (JTEC), 9 (3-3), pp. 45-49; Chen, T.Y., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83 (1), pp. 60-66; Majchrzak, T.A., Schulte, M., Context-dependent testing of applications for mobile devices (2015) Open Journal of Web Technologies (OJWT), 2 (1), pp. 27-39; Yu, S., Takada, S., Mobile application test case generation focusing on external events (2016) Proceedings of The 1st International Workshop on Mobile Development, , ACM; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of The 2013 9th Joint Meeting on Foundations of Software Engineering, , ACM; Vieira, V., Holl, K., Hassel, M., A context simulator as testing support for mobile apps (2015) Proceedings of The 30th Annual ACM Symposium on Applied Computing, , ACM; Wei, X., Permission evolution in the android ecosystem (2012) Proceedings of The 28th Annual Computer Security Applications Conference, , ACM; Android Permissions, , https://developer.android.com/guide/topics/manifest/manifest-intro.html; Johnson, R., Analysis of android applications' permissions (2012) Software Security and Reliability Companion (SERE-C), 2012 IEEE Sixth International Conference on, , IEEE; Zhang, Y., Vetting undesirable behaviors in android apps with permission use analysis (2013) Proceedings of The 2013 ACM SIGSAC Conference on Computer & Communications Security, , ACM; Chan, P.P., Song, W.-K., Static detection of Android malware by using permissions and API calls (2014) Machine Learning and Cybernetics (ICMLC), 2014 International Conference on, , IEEE; GATOR: Program Analysis Toolkit For Android, , http://web.cse.ohio-state.edu/presto/software/gator",,,"University of Tokyo","Association for Computing Machinery","7th International Conference on Software and Computer Applications, ICSCA 2018","8 February 2018 through 10 February 2018",,136540,,9781450354141,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85048491207
"Mariani L., Pezze M., Zuddas D.","8965048200;35581208100;56538926400;","Augusto: Exploiting popular functionalities for the generation of semantic GUI tests with oracles",2018,"Proceedings - International Conference on Software Engineering","2018-January",, 3180162,"280","290",,14,"10.1145/3180155.3180162","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051470893&doi=10.1145%2f3180155.3180162&partnerID=40&md5=40f8c47adb2c1c60955b3648aecc9cfe","University of Milano-Bicocca, Italy; USI Universita della Svizzera Italiana, Switzerland","Mariani, L., University of Milano-Bicocca, Italy; Pezze, M., University of Milano-Bicocca, Italy, USI Universita della Svizzera Italiana, Switzerland; Zuddas, D., USI Universita della Svizzera Italiana, Switzerland","Testing software applications by interacting with their graphical user interface (GUI) is an expensive and complex process. Current automatic test case generation techniques implement explorative approaches that, although producing useful test cases, have a limited capability of covering semantically relevant interactions, thus frequently missing important testing scenarios. These techniques typically interact with the available widgets following the structure of the GUI, without any guess about the functions that are executed. In this paper we propose Augusto, a test case generation technique that exploits a built-in knowledge of the semantics associated with popular and well-known functionalities, such as CRUD operations, to automatically generate effective test cases with automated functional oracles. Empirical results indicate that Augusto can reveal faults that cannot be revealed with state of the art techniques. © 2018 Copyright held by the owner/author(s).","Automatic test case generation; GUI testing; Oracles; Semantics","Application programs; Graphical user interfaces; Semantics; Automatic test-case generations; Complex Processes; Graphical user interfaces (GUI); GUI testing; Oracles; State-of-the-art techniques; Test case generation; Testing software; Software testing",,,,,"Horizon 2020 Framework Programme, H2020

European Research Council, ERC: 646867

Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF: 200021_162409","This work is supported by the Swiss National Science Foundation with the project “ASysT: Automatic System Testing” (grant n. 200021_162409) and by the H2020 ""Learn"" project funded under the ERC Consolidator Grant 2014 program (ERC Grant Agreement n. 646867).",,"Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the International Conference on Automated Software Engineering (ASE '12), pp. 258-261. , ACM; Anand, S., Burke, E.K., Yueh Chen, T., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., McMinn, P., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86 (8), pp. 1978-2001. , 2013; Aquino, A., Bianchi, F.A., Chen, M., Denaro, G., Pezze, M., Reusing constraint proofs in program analysis (2015) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA '15), pp. 305-315. , ACM; Aquino, A., Denaro, G., Pezze, M., Heuristically matching solution spaces of arithmetic formulas to efficiently reuse solutions (2017) Proceedings of the International Conference on Software Engineering (ICSE '17), pp. 427-437. , IEEE Computer Society; Arlt, S., Podelski, A., Bertolini, C., Schaf, M., Banerjee, I., Memon, A.M., Lightweight static analysis for GUI testing (2012) Proceedings of the International Symposium on Software Reliability Engineering (ISSRE '12), pp. 301-310. , IEEE Computer Society; Barr, E.T., Harman, M., McMinn, P., Shahbaz, M., Yoo, S., The oracle problem in software testing: A survey (2015) IEEE Transactions on Software Engineering, 41 (5), pp. 507-525. , 2015; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from GUIs (2012) Proceedings of the International Conference on Fundamental Approaches to Software Engineering (FASE '12), pp. 347-361. , Springer; Bennett, R., Patternry, , http://patternry.com/patterns/, (Accessed: 2017-08-12); Bennett, R., TimeTracker, , https://sourceforge.net/projects/ttracker/, (Accessed: 2017-08-12); Bizer, C., Heath, T., Berners-Lee, T., Linked data - The story so far (2009) International Journal on Semantic Web and Information Systems, 5 (3), pp. 1-22. , 2009; Bozkurt, M., Harman, M., Automatically generating realistic test input from web services (2011) Proceedings of the International Symposium on Service Oriented System Engineering (SOSE '11), pp. 13-24. , IEEE Computer Society; Brambilla, M., Fraternali, P., (2014) Interaction Flow Modeling Language: Model-driven UI Engineering of Web and Mobile Apps with IFML, , Morgan Kaufmann; The Digital Cave, , http://buddi.digitalcave.ca, Buddi, (Accessed: 2017-08-12); Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet?(E) (2015) Proceedings of the International Conference on Automated Software Engineering (ASE '16), pp. 429-440. , IEEE Computer Society; Stephen, A., Cook, The complexity of theorem-proving procedures (1971) Proceedings of the Annual ACM Symposium on Theory of Computing (STOC '71), pp. 151-158. , ACM; Yesterday's Authentication Bug, , https://blogs.dropbox.com/dropbox/2011/06/yesterdays-authentication-bug/, Dropbox, (Accessed: 2017-08-12); Ermuth, M., Pradel, M., Monkey see, monkey do: Effective generation of GUI tests with inferred macro events (2016) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA '16), pp. 82-93. , ACM; Ganov, S., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing GUI applications (2009) Formal Methods and Software Engineering, pp. 69-87. , Springer; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA '12), pp. 67-77. , ACM; Hayhurst, K.J., Veerhusen, D.S., A practical approach to modified condition/decision coverage (2001) 20th DASC. 20th Digital Avionics Systems Conference, , NASA Langley Technical Report Server, 1B2/1-1B2/10 vol.1; https://igniterealtime.org/projects/spark, Igniterealtime. Spark, (Accessed: 2017-08-12); Jackson, D., Alloy: A lightweight object modelling notation (2002) ACM Transactions on Software Engineering and Methodology, 11 (2), pp. 256-290. , 2002; https://issues.jenkins-ci.org/browse/JENKINS-25012?jql=issuetype, Jenkins. ISSUE 25012, (Accessed: 2017-08-12); Joriwal, H., OnlineShopping, , https://github.com/himalayjor/OnlineShoppingGUI/tree/master/OnlineShopping, (Accessed: 2017-08-12); Abdul Khalek, S., Yang, G., Zhang, L., Marinov, D., Khurshid, S., Testera: A tool for testing Java programs using alloy specifications (2011) Proceedings of the International Conference on Automated Software Engineering (ASE '11), pp. 608-611. , IEEE Computer Society; Kovalsky, J., http://rachota.sourceforge.net/en/index.html, (Accessed: 2017-08-12); Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA '16), pp. 94-105. , ACM; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) Proceedings of the International Conference on Software Testing, Verification and Validation (ICST '12), pp. 81-90. , IEEE Computer Society; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Automatic testing of gui-based applications (2014) Software Testing, Verification and Reliability, 24 (5), pp. 341-366. , 2014; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Link: Exploiting the web of data to generate test inputs (2014) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA '14), pp. 373-384. , ACM; Mariani, L., Pezze, M., Zuddas, D., Recent advances in automatic black-box testing (2015) Advances in Computers, , Elsevier; Memon, A.M., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the Working Conference on Reverse Engineering (WCRE '03), pp. 260-269. , IEEE Computer Society; Memon, A.M., Banerjee, I., Nguyen, B., Robbins, B., The first decade of GUI ripping: Extensions, applications, and broader impacts (2013) Proceedings of the Working Conference on Reverse Engineering (WCRE '13), pp. 11-20. , IEEE Computer Society; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , 2005; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling ajax by inferring user interface state changes (2008) Proceedings of the International Conference on Web Engineering (ICWE '08), pp. 122-134. , ACM; Moreira, M.L.M., Paiva, A.C., Memon, A., A pattern-based approach for GUI modeling and testing (2013) Proceedings of the International Symposium on Software Reliability Engineering (ISSRE '13), pp. 288-297. , IEEE Computer Society; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105. , 2014; Shahbaz, M., McMinn, P., Stevenson, M., Automated discovery of valid test strings from the web using dynamic regular expressions collation and natural language processing (2012) Proceedings of the International Conference on Quality Software (QSIC '12), pp. 79-88. , IEEE Computer Society; http://upm.sourceforge.net/index.html, Adrian Smith. Universal Password Manager, (Accessed: 2017-08-12); Tidwell, J., (2010) Designing Interfaces: Patterns for Effective Interaction Design, , ""O'Reilly Media, Inc.""; Vacondio, A., PDFsam, , https://sourceforge.net/projects/pdfsam/, (Accessed: 2017-08-12); Van Welie, M., Pattern Library, , http://www.welie.com/patterns/index.php, (Accessed: 2017-08-12); Yuan, X., Cohen, M.B., Memon, A.M., Gui interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574. , 2011; Nokhbeh Zaeem, R., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) Proceedings of the International Conference on Software Testing, Verification and Validation (ICST '14), pp. 183-192. , IEEE Computer Society","Mariani, L.; University of Milano-BicoccaItaly; email: mariani@disco.it",,,"IEEE Computer Society","40th International Conference on Software Engineering, ICSE 2018","27 May 2018 through 3 June 2018",,137142,02705257,,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-85051470893
"Fuchs A.","57195071203;","Automated test case generation for java EE based web applications",2018,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10889 LNCS",,,"167","176",,,"10.1007/978-3-319-92994-1_10","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048839898&doi=10.1007%2f978-3-319-92994-1_10&partnerID=40&md5=72add21b7d1b8e528e05a9056fdfab4d","Department of Information Systems, University of Münster, Leonardo-Campus 3, Münster, 48149, Germany","Fuchs, A., Department of Information Systems, University of Münster, Leonardo-Campus 3, Münster, 48149, Germany","Automated testing is important for validating the behavior of programs with complex user interfaces, such as web applications. In the enterprise context, web applications are popular client-server programs that provide rendered web pages as a user front-end, and the business logic is typically implemented on the server-side. In this paper, we present an approach to automatically generate test cases for component-based user interfaces for web applications built on the Java EE platform. We generate a sequence of user actions to navigate through the web application. For each supported user action, we gather constraints from the view template describing the web page (e.g. a button must be enabled in order to be clicked by a user), as well as constraints that are introduced while executing a server-side component. We have implemented our approach in a tool to determine its practical use in an experiment. © Springer International Publishing AG, part of Springer Nature 2018.","Automated test case generation; Java enterprise edition; Symbolic execution; Web applications","Application programs; Automation; Testing; User interfaces; Websites; Automated test case generation; Automated testing; Business logic; Component based; Java enterprise edition; Practical use; Symbolic execution; WEB application; Java programming language",,,,,,,,"Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., Bertolino, A., An orchestrated survey of methodologies for automated software test case generation (2013) J. Syst. Softw., 86 (8), pp. 1978-2001; Arcuri, A., Fraser, G., Java enterprise edition support in search-based JUnit test generation (2016) SSBSE 2016. LNCS, 9962, pp. 3-17. , https://doi.org/10.1007/978-3-319-47106-81, Sarro, F., Deb, K. (eds.), Springer, Cham; Diakopoulos, N., Cass, S., Interactive: The top programming languages 2016 (2016) IEEE Spectr, , http://spectrum.ieee.org/static/interactive-the-top-programminglanguages-2016; Comprehensive open-source Java persistence solution addressing relational, XML, and database web services (2018) The Eclipse Foundation, , http://www.eclipse.org/eclipselink/; Fuchs, A., WWU WebApp GitHub Repository (2018) WWU Münster, , https://github.com/wwu-pi/webapp; Fuchs, A., Kuchen, H., Unit testing of database-driven Java enterprise edition applications (2017) TAP 2017. LNCS, 10375, pp. 59-76. , https://doi.org/10.1007/978-3-319-61467-04, Gabmeyer, S., Johnsen, E.B. (eds.), Springer, Cham; Fuchs, A., Kuchen, H., Test-case generation for web-service clients (2018) Proceedings of the Symposium on Applied Computing, , ACM, accepted; Your relational data (2018) Objectively. Redhat, , http://hibernate.org/orm/; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 67-77. , ACM; JUnit 5 (2018) Junit Team, , https://junit.org/junit5/; Mirshokraie, S., Effective test generation and adequacy assessment for JavaScript-based web applications (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 453-456. , ACM; Myers, G.J., Sandler, C., Badgett, T., (2011) The Art of Software Testing, , Wiley, Hoboken; Parr, T., The Definitive ANTLR 4 Reference (2013) Pragmatic Bookshelf, Raleigh; Prud’Homme, C., Fages, J.G., Lorca, X., Choco Documentation (2016) TASC, INRIA Rennes, LINA CNRS UMR 6241, COSLING S.A.S, , http://www.chocosolver.org; Selenium-Web Browser Automation (2018) Selenium, , https://www.seleniumhq.org/","Fuchs, A.; Department of Information Systems, Leonardo-Campus 3, Germany; email: andreas.fuchs@wi.uni-muenster.de","Wolff B.Dubois C.","","Springer Verlag","12th International Conference on Tests and Proofs, TAP 2018 Held as Part of STAF 2018","27 June 2018 through 29 June 2018",,214679,03029743,9783319929934,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85048839898
"Adamo D., Bryce R., King T.M.","57201129573;12645168200;16241488800;","Randomized event sequence generation strategies for automated testing of android apps",2018,"Advances in Intelligent Systems and Computing","558",,,"571","578",,1,"10.1007/978-3-319-54978-1_72","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048326726&doi=10.1007%2f978-3-319-54978-1_72&partnerID=40&md5=e32803ce344a329f2abce51567126946","University of North Texas, 3940 North Elm Street, Denton, TX  76205, United States; Ultimate Software Group, Inc., 2250 North Commerce Parkway, Weston, FL  33326, United States","Adamo, D., University of North Texas, 3940 North Elm Street, Denton, TX  76205, United States; Bryce, R., University of North Texas, 3940 North Elm Street, Denton, TX  76205, United States; King, T.M., Ultimate Software Group, Inc., 2250 North Commerce Parkway, Weston, FL  33326, United States","Mobile apps are often tested with automatically generated sequences of Graphical User Interface (GUI) events. Dynamic GUI testing algorithms construct event sequences by selecting and executing events from GUI states at runtime. The event selection strategy used in a dynamic GUI testing algorithm may directly influence the quality of the test suites it produces. Existing algorithms use a uniform probability distribution to randomly select events from each GUI state and they are often not directly applicable to mobile apps. In this paper, we develop a randomized algorithm to dynamically construct test suites with event sequences for Android apps. We develop two frequency-based event selection strategies as alternatives to uniform random event selection. Our event selection algorithms construct event sequences by dynamically altering event selection probabilities based on the prior selection frequency of events in each GUI state. We compare the frequency-based strategies to uniform random selection across nine Android apps. The results of our experiments show that the frequency-based event selection strategies tend to produce test suites that achieve better code coverage and fault detection than test suites constructed with uniform random event selection. © Springer International Publishing AG 2018.","Android; Automated testing; GUI testing; Mobile apps","Fault detection; Graphical user interfaces; Probability distributions; Real time systems; Android; Automated testing; Automatically generated; Graphical user interfaces (GUI); GUI testing; Mobile apps; Random selection; Randomized Algorithms; Android (operating system)",,,,,,"Acknowledgements This work is supported in part by Ultimate Software Group, Inc. Any opinions, findings, and conclusions expressed herein are the authors’ and do not reflect those of the sponsors.",,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Software, 558, pp. 53-59; Arcuri, A., Briand, L., Adaptive random testing: An illusion of effectiveness? (2011) Proceedings of the 2011 International Symposium on Software Testing and Analysis, pp. 265-275. , New York: ACM; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based GUI testing techniques: An empirical study (2014) Journal of Systems and Software, 97, pp. 15-46; Carino, S., (2016) Dynamically Testing Graphical User Interfaces, , Ph.D. dissertation, The University of Western Ontario; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83 (1), pp. 60-66; (2014) By 2017, the App Market Will Be a $77 Billion Industry (Infographic), , https://www.entrepreneur.com/article/236832, (Accessed 10-25-2016); Hamming, R.W., Error detecting and error correcting codes (1950) Bell System Technical Journal, 29 (2), pp. 147-160; (2016) Smartphone OS Market Share, 2016 Q2, , http://www.idc.com/prodserv/smartphone-os-market-share.jsp, (Accessed 10-25-2016); Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) 2015 I.E. 8Th International Conference on Software Testing, Verification and Validation (ICST), pp. 1-10. , Graz: IEEE; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) 2010 2Nd International Conference on Computer Engineering and Technology, 2, pp. 297-301. , Piscataway: IEEE; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9Th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , New York: ACM; Mann, H.B., Whitney, D.R., On a test of whether one of two random variables is stochastically larger than the other (1947) The Annals of Mathematical Statistics, 181, pp. 50-60; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-158; Mohamad, I.B., Usman, D., Standardization and its effects on k-means clustering algorithm (2013) Research Journal of Applied Sciences, Engineering and Technology, 6 (17), pp. 3299-3303; (2013) Users have Low Tolerance for Buggy Apps Only 16% Will Try a failing App More than Twice, , https://techcrunch.com/2013/03/12/users-have-low-tolerance-for-buggy-apps-only-16-will-try-a-failing-app-more-than-twice/, (Accessed 10-25-2016); Zaeem, R.N., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) 2014 I.E. Seventh International Conference on Software Testing, Verification and Validation, pp. 183-192. , Los Alamitos: IEEE; Zhauniarovich, Y., Philippov, A., Gadyatskaya, O., Crispo, B., Massacci, F., Towards black box testing of android apps (2015) 2015 10Th International Conference on Availability, Reliability and Security (ARES), pp. 501-510. , Piscataway: IEEE","Adamo, D.; University of North Texas, 3940 North Elm Street, United States; email: DavidAdamo@my.unt.edu","Latifi S.","","Springer Verlag","14th International Conference on Information Technology - New Generations, ITNG 2017","10 April 2017 through 12 April 2017",,195369,21945357,9783319549774,,,"English","Adv. Intell. Sys. Comput.",Conference Paper,"Final","",Scopus,2-s2.0-85048326726
"Rau A., Hotzkow J., Zeller A.","56022232200;57195264609;7007015864;","Transferring tests across web applications",2018,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10845 LNCS",,,"50","64",,4,"10.1007/978-3-319-91662-0_4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047966425&doi=10.1007%2f978-3-319-91662-0_4&partnerID=40&md5=4dba508860f20c7e039def59ea1dd1c0","Center for IT Security, Privacy, and Accountability, Saarland Informatics Campus, Saarbrücken, Germany","Rau, A., Center for IT Security, Privacy, and Accountability, Saarland Informatics Campus, Saarbrücken, Germany; Hotzkow, J., Center for IT Security, Privacy, and Accountability, Saarland Informatics Campus, Saarbrücken, Germany; Zeller, A., Center for IT Security, Privacy, and Accountability, Saarland Informatics Campus, Saarbrücken, Germany","When manually testing Web applications, humans can go with vague, yet general instructions, such as “add the product to shopping cart and proceed to checkout”. Can we teach a robot to follow such instructions as well? We show how to leverage tests of other applications to guide test generation for new applications in the same domain: Given a test for payments on Amazon, we guide test generation on eBay towards payment functionality, exploiting the semantic similarity between UI elements across both applications. Evaluated on twelve Web apps in three domains, our approach allows for discovering deep functionality in a few minutes, where an undirected crawler would require days or weeks to accomplish the same task. © Springer International Publishing AG, part of Springer Nature 2018.","Model analysis; Natural language processing; Testing","Natural language processing systems; Semantics; Model analysis; New applications; Semantic similarity; Shopping carts; Test generations; WEB application; Web apps; Testing",,,,,"Deutsche Forschungsgemeinschaft, DFG: SFB 1223","Acknowledgments. This work has been partially funded by the German Research Foundation (DFG) via the collaborative research center “Methods and Tools for Understanding and Controlling Privacy” (SFB 1223), Project A3.",,"Akpınar, M.E., Ye Silada, Y., Vision based page segmentation algorithm: Extended and perceived success (2013) ICWE 2013. LNCS, 8295, pp. 238-252. , https://doi.org/10.1007/978-3-319-04244-222, Sheng, Q.Z., Kjeldskov, J. (eds.), Springer, Cham; (2017) Alexa Top 500 Web Pages, , http://www.alexa.com/topsites/category/Top, Accessed 04 Aug 2017; Dallmeier, V., Burger, M., Orth, T., Zeller, A., WebMate: Generating test cases for Web 2.0 (2013) SWQD 2013. LNBIP, 133, pp. 55-69. , https://doi.org/10.1007/978-3-642-35702-25, Winkler, D., Biffl, S., Bergsmann, J. (eds.), Springer, Heidelberg; David, B., (2012) Selenium 2 Testing Tools: Beginner’s Guide, , Packt Publishing, Birmingham; Islam, A., Inkpen, D., Semantic text similarity using corpus-based word similarity and string similarity (2008) ACM Trans. Knowl. Disc. Data, 2 (2), pp. 1-25. , http://www.site.uottawa.ca/; Jivani, A.G., A comparative study of stemming algorithms (2011) Int. J. Comput. Tech. Appl, 2 (6), pp. 1930-1938; Karpathy, A., Fei-Fei, L., Deep visual-semantic alignments for generating image descriptions (2015) The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), June; Lin, J., Wang, F., Using semantic similarity for input topic identification in crawling-based web application testing (2016) Corr Abs/1608, p. 06549. , http://arxiv.org/abs/1608.06549; Lin, J.W., Wang, F., Chu, P., Using semantic similarity in crawling-based web application testing (2017) 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 138-148. , IEEE; Manning, C.D., Raghavan, P., Schütze, H., (2008) Introduction to Information Retrieval, , Cambridge University Press, New York; McCallum, A.K., (2002) Mallet: A Machine Learning for Language Toolkit, , http://www.cs.umass.edu/mccallum/mallet; Mesbah, A., van Deursen, A., Roest, D., Invariant-based automatic testing of modern Web applications (2012) IEEE Trans. Softw. Eng., 38 (1), pp. 35-53. , http://dl.acm.org/citation.cfm?id=1555037ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5728834; Mesbah, A., van Deursen, A., Lenselink, S., Crawling Ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 1-30. , http://dl.acm.org/citation.cfm?doid=2109205.2109208crawljax.com/publications/; Mikolov, T., Chen, K., Corrado, G., Dean, J., (2013) GoogleNews-vectors-negative300.Bin.gz-efficient estimation of word representations in vector space, , https://code.google.com/archive/p/word2vec/; Minnen, G., Carroll, J., Pearce, D., Applied morphological processing of English (2001) Nat. Lang. Eng., 7 (3), pp. 207-223; Rau, A., Topic-driven testing (2017) 2017 IEEE/ACM 39Th International Conference on Software Engineering Companion (ICSE-C), pp. 409-412. , IEEE; Roy Choudhary, S., Prasad, M.R., Orso, A., Cross-platform feature matching for Web applications (2014) ISSTA, pp. 82-92. , http://dl.acm.org/citation.cfm?id=2610384.2610409; Schur, M., Roth, A., Zeller, A., Mining behavior models from enterprise Web applications (2013) Proceedings of the 2013 9Th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 422-432. , http://doi.acm.org/10.1145/2491411.2491426, ACM, New York; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing Web applications (2007) The 18Th IEEE International Symposium on Software Reliability, ISSRE 2007, pp. 117-126. , IEEE; Thummalapenta, S., Devaki, P., Sinha, S., Chandra, S., Gnanasundaram, S., Nagaraj, D.D., Sathishkumar, S., Efficient and change-resilient test automation: An industrial case study (2013) Proceedings of the 2013 International Conference on Software Engineering, ICSE 2013, pp. 1002-1011. , http://dl.acm.org/citation.cfm?id=2486788.2486926, IEEE Press, Piscataway; Thummalapenta, S., Sinha, S., Singhania, N., Chandra, S., Automating test automation (2012) Proceedings of the 34Th International Conference on Software Engineering, ICSE 2012, pp. 881-891. , http://dl.acm.org/citation.cfm?id=2337223.2337327, IEEE Press, Piscataway","Rau, A.; Center for IT Security, Germany; email: andreas.rau@cispa.saarland","Mikkonen T.Klamma R.Hernandez J.","","Springer Verlag","18th International Conference on Web Engineering, ICWE 2018","5 June 2018 through 8 June 2018",,213769,03029743,9783319916613,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85047966425
"Mozgovoy M., Pyshkin E.","13008832600;36574097400;","Unity application testing automation with appium and image recognition",2018,"Communications in Computer and Information Science","779",,,"139","150",,5,"10.1007/978-3-319-71734-0_12","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040253749&doi=10.1007%2f978-3-319-71734-0_12&partnerID=40&md5=68f73ea93827bd30643411c72767678a","Tsuruga, Ikki-Machi, Aizu-Wakamatsu, Fukushima  965-8580, Japan","Mozgovoy, M., Tsuruga, Ikki-Machi, Aizu-Wakamatsu, Fukushima  965-8580, Japan; Pyshkin, E., Tsuruga, Ikki-Machi, Aizu-Wakamatsu, Fukushima  965-8580, Japan","This work is dedicated to the problem of integrating simple functional tests (smoke tests) into the automated continuous integration pipeline. While functional testing is typically performed manually by the QA staff members, there is a large number of scenarios that can be automated, and readily available instruments, such as Appium and Calabash, designed for this task. Automated smoke testing is especially challenging for the applications with nonstandard GUI, such as games made with Unity. The only viable option in this case is to analyze screen content as a flat image and identify GUI elements with pattern matching algorithms. This approach is not novel, but its practical applicability and limitations are rarely discussed. We consider a case study of a mobile tennis game project, developed in Unity and covered with a suite of Appium-supported functional tests. We show how image matching capabilities of OpenCV library can be used in Appium tests to build a reliable automated QA pipeline. © Springer International Publishing AG 2018.","Appium; Automation; Computer game; GUI; Non-native; OpenCV; Smoke test; Testing; Unity","Computer games; Graphical user interfaces; Image recognition; Instrument testing; Pattern matching; Pipelines; Smoke; Testing; Appium; Non-native; OpenCV; Smoke test; Unity; Automation",,,,,,,,"Project Homepage, , http://appium.io, Accessed 1 Nov 2016; Automating User Interface Tests, , https://developer.android.com/training/testing/ui-testing/index.html, Accessed 1 Nov 2016; Project Homepage, , http://calaba.sh, Accessed 1 Nov 2016 4; Project Homepage, , https://jemmy.java.net/, Accessed 20 Nov 2016; Microsoft Ui Automation, , https://msdn.microsoft.com/en-us/library/windows/desktop/ee684009.aspx, Accessed 1 Nov 2016; Restful Web Services Tutorial, , https://www.tutorialspoint.com/restful/index.htm, Accessed 4 Feb 2017; Project Homepage, , http://worldoftennis.com/, Accessed 20 Nov 2016; Beck, K., (2002) Test Driven Development: By Example, , Addison-Wesley Longman Publishing Co., Inc., Boston; Bradski, G., Kaehler, A., (2008) Learning Opencv: Computer Vision with the Opencv Library, , O’Reilly Media Inc., Sebastopol; Dalheimer, M., (2002) Programming with Qt: Writing Portable GUI Applications on Unix and Win 32, 2Nd Edn., , O’Reilly Media, Sebastopol; Duvall, P., Matyas, S., Glover, A., (2007) Continuous Integration: Improving Software Quality and Reducing Risk, , Addison-Wesley Professional, Boston; Fielding, R.T., (2000) Architectural Styles and the Design of Network-Based Software Architectures, , Ph.D. thesis, University of California, Irvine; Hans, M., Appium Essentials (2015) PACKT, , https://www.packtpub.com/application-development/appium-essentials/; Helppi, V.V., (2016) Using Opencv and Akaze for Mobile App and Game Testing, , http://bitbar.com/using-opencv-and-akaze-for-mobile-app-and-game-testing, January, Accessed 2 Nov 2016; Kazmierczak, S., Appium with Image Recognition, February 2016, , https://medium.com/SimonKaz/appium-with-image-recognition-17a92abaa23d#.oez2f6_hnh, Accessed: 2 Nov 2016; Mahalingam, M., (2014) Learning Continuous Integration with Teamcity., , Packt Publishing Ltd., Birmingham; McConnell, S., Daily build and smoke test (1996) IEEE Softw, 13 (4), p. 144; Meszaros, G., (2007) Xunit Test Patterns: Refactoring Test Code, , Pearson Education, Boston; Mozgovoy, M., Purgina, M., Umarov, I., Believable self-learning ai for world of tennis (2016) Proceedings of the IEEE Conference on Computational Intelligence in Games (CIG 2016), pp. 247-253. , IEEE, September; North, D., Behavior modification: The evolution of behavior-driven development (2006) Better Software, 8 (3); Umarov, I., Mozgovoy, M., Creating believable and effective AI agents for games and simulations: Reviews and case study (2014) Contemporary Advancements in Information Technology Development in Dynamic Environments, pp. 33-57; Van Veenendaal, E., Standard glossary of terms used in software testing (2010) International Software Testing Qualifications Board, pp. 1-51","Pyshkin, E.Japan; email: pyshe@u-aizu.ac.jp","Zakharov V.Itsykson V.Scedrov A.","","Springer Verlag","4th International Conference on Tools and Methods of Program Analysis, TMPA 2017","3 March 2017 through 4 March 2017",,209349,18650929,9783319717333,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85040253749
"Ramler R., Buchgeher G., Klammer C.","23095597800;25924743400;24823007200;","Adapting automated test generation to GUI testing of industry applications",2018,"Information and Software Technology","93",,,"248","263",,10,"10.1016/j.infsof.2017.07.005","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023171298&doi=10.1016%2fj.infsof.2017.07.005&partnerID=40&md5=4c0cae1e2fcdc119bbd61e4ee7b81ebb","Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria","Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Buchgeher, G., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Klammer, C., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria","Context Automated test generation promises to improve the effectiveness of software testing and to reduce the involved manual effort. While automated test generation has been successfully applied for code-level API testing, it has not found widespread adoption in practice for testing of graphical user interfaces. Tools for test generation do not support GUI testing out-of-the-box but require dedicated extensions. Objective This paper explores the applicability of automated test generation for testing GUIs of industry applications. We propose a test adapter approach to bridge the gap between automated test generation tools and industry applications. Method A multiple case study was conducted in which automated test generation with test adapters has been applied at the unit, integration, and system test level in three industry projects from two different companies. Results Automated test generation via test adapters could be applied at all test levels. It has led to an increase of coverage as well as the detection of new defects that were not found by preceding testing activities in the projects. While test adapters can easily be implemented at the unit test level, their complexity and the corresponding effort for providing adapter implementations rises at higher test levels. Conclusion Test adapters can be used for applying automated test generation for testing GUIs of industry applications. They bridge the gap between automated test generation tools and industry applications. The development of test adapters requires no tool-specific knowledge and can be performed by members of the development team. © 2017 Elsevier B.V.",,"Application programming interfaces (API); Automation; Graphical user interfaces; Automated test generations; Development teams; GUI testing; Industry applications; Multiple-case study; Specific knowledge; Test generations; Three industries; Software testing",,,,,"Bundesministerium für Wissenschaft, Forschung und Wirtschaft, BMWFW

Österreichische Forschungsförderungsgesellschaft, FFG: FFG 844597

Bundesministerium für Verkehr, Innovation und Technologie, BMVIT","(a) Extensions to ATG tools: The first solution is to extend an ATG tool in order to work with a particular framework. This solution is supported by most tools via tool-specific extension mechanisms. These tool-specific extensions then contain SUT-specific knowledge. Examples of such extensions are mechanisms for initializing and managing dependencies, setup routines, the provision of custom test data, as well as custom contracts to check SUT-specific properties.","The research reported in this paper has been supported by the Austrian Research Promotion Agency [grant number FFG 844597], the Austrian Ministry for Transport, Innovation and Technology, the Federal Ministry of Science, Research and Economy, and the Province of Upper Austria in the frame of the COMET center SCCH.","Albert, E., Gómez-Zamalloa, M., Puebla, G., PET: a partial evaluation-based test case generation tool for Java bytecode (2010) Proceedings of the 2010 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, pp. 25-28. , https://doi.org/10.1145/1706356.1706363, ACM; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of Android applications (2012) Proceedings of the 28th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653. , https://doi.org/10.1109/ICSM.2012.6405345, IEEE; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., McMinn, P., An orchestrated survey of methodologies for automated software test case generation (2013) J. Syst. Softw., 86 (8), pp. 1978-2001. , https://doi.org/10.1016/j.jss.2013.02.061; Arcuri, A., Iqbal, M.Z., Briand, L., Random testing: Theoretical results and practical implications (2012) IEEE Trans. Softw. Eng., 38 (2), pp. 258-277. , https://doi.org/10.1109/TSE.2011.121; Arts, T., Hughes, J., Norell, U., Svensson, H., Testing AUTOSAR software with QuickCheck (2015) Proceedings of the Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 1-4. , https://doi.org/10.1109/ICSTW.2015.7107466, IEEE; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: systematic mapping and repository (2013) Inf. Softw. Technol., 55 (10), pp. 1679-1694. , https://doi.org/10.1016/j.infsof.2013.03.004; Boshernitsan, M., Doong, R., Savoia, A., From daikon to agitator: lessons and challenges in building a commercial tool for developer testing (2006) Proceedings of the 2006 International Symposium on Software Testing and Analysis, pp. 169-180. , https://doi.org/10.1145/1146238.1146258, ACM; Braione, P., Denaro, G., Mattavelli, A., Vivanti, M., Muhammad, A., An industrial case study of the effectiveness of test generators (2012) Proceedings of the 7th International Workshop on Automation of Software Test (AST), pp. 50-56. , https://doi.org/10.1109/IWAST.2012.6228990, IEEE; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: are we there yet? (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , https://doi.org/10.1109/ASE.2015.89, IEEE; Csallner, C., Smaragdakis, Y., JCrasher: an automatic robustness tester for Java (2004) Software, 34 (11), pp. 1025-1050. , https://doi.org/10.1002/spe.602; Easterbrook, S., Singer, J., Storey, M.-A., Damian, D., Selecting empirical methods for software engineering research (2008) Guide to Advanced Empirical Software Engineering, pp. 285-311. , https://doi.org/10.1007/978-1-84800-044-5_11, F. Shull J. Singer D.I.K. Sjøberg Springer London; Fodeh, Adventures with test monkeys (2012) Experiences of Test Automation: Case Studies of Software Test Automation, pp. 447-460. , D. Graham M. Fewster Addison-Wesley Professional 978-0321754066, 0321754069; Forrester, J.E., Miller, B.P., An empirical study of the robustness of Windows NT applications using random testing (2000) Proceedings of the 4th USENIX Windows System Symposium, Seattle, pp. 59-68; Fraser, G., Arcuri, A., EvoSuite: automatic test suite generation for object-oriented software (2011) Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, ACM, pp. 416-419. , https://doi.org/10.1145/2025113.2025179; Galeotti, J.P., Fraser, G., Arcuri, A., Improving search-based test suite generation with dynamic symbolic execution (2013) Proceedings of the 24th International Symposium on Software Reliability Engineering (ISSRE), IEEE, pp. 360-369. , https://doi.org/10.1109/ISSRE.2013.6698889; Galler, S.J., Aichernig, B.K., Survey on test data generation tools (2014) Int. J. Softw. Tools Technol. Trans., 16 (6), pp. 727-751. , https://doi.org/10.1007/s10009-013-0272-3; Vlissides, R.H., Johnson, R., Gamma, E., (1995) Design Patterns: Elements of Reusable Object-Oriented Software, , 978-0201633610, 0201633612; Godefroid, P., Klarlund, N., Sen, K., DART: directed automated random testing (2005) Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 213-223. , https://doi.org/10.1145/1065010.1065036; Karimi, Z., Baraani-Dastjerdi, A., Ghasem-Aghaee, N., Wagner, S., Links between the personalities, styles and performance in computer programming (2016) J. Syst. Softw., 111, pp. 228-241. , https://doi.org/10.1016/j.jss.2015.09.011; Klammer, C., Ramler, R., Stummer, H., Harnessing automated test case generators for GUI testing in industry (2016) Proceedings of the 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), pp. 227-234. , https://doi.org/10.1109/SEAA.2016.60, IEEE; Ma, L., Artho, C., Zhang, C., Sato, H., Gmeiner, J., Ramler, R., GRT: an automated test generator using orchestrated program analysis (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 842-847. , https://doi.org/10.1109/ASE.2015.102, IEEE; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: an input generation system for android apps (2013) Proceedings of the 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , https://doi.org/10.1145/2491411.2491450, ACM; McMinn, P., Search-based software testing: past, present and future (2011) Proceedings of the Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 153-163. , https://doi.org/10.1109/ICSTW.2011.100, IEEE; Memon, A.M., GUI testing: pitfalls and process (2002) IEEE Comput., 35 (8), pp. 87-88. , https://doi.org/10.1109/MC.2002.1023795; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: an innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105. , https://doi.org/10.1007/s10515-013-0128-9; Nyman, Using monkey test tools: how to find bugs cost-effectively through random testing (2000) Software Testing & Quality Engineering Magazine, pp. 18-21. , January/February; Pacheco, C., Ernst, M.D., Randoop: feedback-directed random testing for Java (2007) Companion Proceedings of the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications, pp. 815-816. , https://doi.org/10.1145/1297846.1297902, ACM; Păsăreanu, C.S., Visser, W., Bushnell, D., Geldenhuys, J., Mehlitz, P., Rungta, N., Symbolic PathFinder: integrating symbolic execution with model checking for Java bytecode analysis (2013) Autom. Softw. Eng., 20 (3), pp. 391-425. , https://doi.org/10.1007/s10515-013-0122-2; Prasetya, T3i: a tool for generating and querying test suites for java (2015) Proceedings of the 10th Joint Meeting on Foundations of Software Engineering, pp. 950-953. , https://doi.org/10.1145/2786805.2803182, ACM; (2010), https://doi.org/10.1109/IEEESTD.2010.5733835, ISO/IEC/IEEE, Systems and software engineering-vocabulary. ISO/IEC/IEEE Std. 24765:2010 (E), IEEE Computer Society; Ramler, R., Winkler, D., Schmidt, M., Random test case generation and manual unit testing: substitute or complement in retrofitting tests for legacy code? (2012) Proceedings of the 38th Euromicro Conference on Software Engineering and Advanced Applications, pp. 286-293. , https://doi.org/10.1109/SEAA.2012.42, IEEE; Robinson, B., Ernst, M.D., Perkins, J.H., Augustine, V., Li, N., Scaling up automated test generation: automatically generating maintainable regression unit tests for programs (2011) Proceedings of the 26th IEEE/ACM International Conference on Automated Software Engineering, pp. 23-32. , https://doi.org/10.1109/ASE.2011.6100059, IEEE; Runeson, P., Host, M., Rainer, A., Regnell, B., Case Study Research in Software Engineering: Guidelines and Examples (2012), https://doi.org/10.1002/9781118181034, John Wiley & Sons; Schulze, C., Ganesan, D., Lindvall, M., Cleaveland, R., Goldman, D., Assessing model-based testing: an empirical study conducted in industry (2014) Companion Proceedings of the 36th International Conference on Software Engineering, pp. 135-144. , https://doi.org/10.1145/2591062.2591180, ACM; Shamshiri, S., Just, R., Rojas, J.M., Fraser, G., McMinn, P., Arcuri, A., Do automatically generated unit tests find real faults? An empirical study of effectiveness and challenges (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 201-211. , https://doi.org/10.1109/ASE.2015.86, IEEE; Edwards, S.H., Sitaraman, M., Weide, B.W., Hollingsworth, E., Contract-checking wrappers for C++ classes (2004) IEEE Trans. Softw. Eng., 30 (11), pp. 794-810. , https://doi.org/10.1109/TSE.2004.80; Tillmann, de Halleux, J., Pex - white box test generation for.NET (2008) Proceedings of the International Conference on Tests and Proofs (TAP), 4966, pp. 134-153. , https://doi.org/10.1007/978-3-540-79124-9_10, Springer; Utting, M., Legeard, B., Practical Model-Based Testing: A Tools Approach (2010), Morgan Kaufmann 978-0123725011, 0123725011; Vos, T.E., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des., 6 (3), pp. 46-83. , https://doi.org/10.4018/IJISMD.2015070103; Wang, S., Offutt, J., Comparison of unit-level automated test generation tools (2009) Proceedings of the International Conference on Software Testing, Verification and Validation Workshops, 2009. ICSTW’09, pp. 210-219. , https://doi.org/10.1109/ICSTW.2009.36, IEEE; Wetzlmaier, T., Ramler, R., A framework for monkey GUI testing (2016) Proceedings of the IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 416-423. , https://doi.org/10.1109/ICST.2016.51; Wetzlmaier, T., Winterer, M., Test automation for multi-touch user interfaces of industrial applications (2015) Proceedings of the Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 1-3. , https://doi.org/10.1109/ICSTW.2015.7107468; Yang, Q., Li, J.J., Weiss, D.M., A survey of coverage-based testing tools (2009) Comput. J., 52 (5), pp. 589-597. , https://doi.org/10.1093/comjnl/bxm021","Ramler, R.; Software Competence Center Hagenberg GmbH, Softwarepark 21, Austria; email: rudolf.ramler@scch.at",,,"Elsevier B.V.",,,,,09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-85023171298
"Silva T.R., Hak J.-L., Winckler M.","57189006999;57190388129;22735652100;","A Formal Ontology for Describing Interactive Behaviors and Supporting Automated Testing on User Interfaces",2017,"International Journal of Semantic Computing","11","4",,"513","539",,5,"10.1142/S1793351X17400219","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066014112&doi=10.1142%2fS1793351X17400219&partnerID=40&md5=5c039cefe9adf8ea8636e6af22580b0a","ICS-IRIT, Université Paul Sabatier, Toulouse, France; SPARKS Team, I3S Université Nice Sophia Antipolis, France","Silva, T.R., ICS-IRIT, Université Paul Sabatier, Toulouse, France; Hak, J.-L., ICS-IRIT, Université Paul Sabatier, Toulouse, France; Winckler, M., SPARKS Team, I3S Université Nice Sophia Antipolis, France","Nowadays many software development frameworks implement Behavior-Driven Development (BDD) as a mean of automating the test of interactive systems under construction. Automated testing helps to simulate user's actions on the User Interface and therefore check if the system behaves properly and in accordance to scenarios that describe functional requirements. However, tools supporting BDD run tests on implemented User Interfaces and are a suitable alternative for assessing functional requirements in later phases of the development process. However, even when BDD tests can be written in early phases of the development process they can hardly be used with specifications of User Interfaces such as prototypes. To address this problem, this paper proposes to raise the abstraction level of both system interactive behaviors and User Interfaces by means of a formal ontology that is aimed at supporting test automation using BDD. The paper presents an ontology and an ontology-based approach for automating the test of functional requirements of interactive systems. We demonstrate the feasibility of this ontology-based approach to assess functional requirements in prototypes and full-fledge applications through an illustrative case study of e-commerce applications for buying flight tickets. © 2017 World Scientific Publishing Company.","automated requirements assessment; Behavior-Driven Development (BDD); ontological modeling; prototyping; testing of interactive systems; user interfaces","Automation; Behavioral research; Boolean functions; Ontology; Software design; Software prototyping; Software testing; Testing; automated requirements assessment; Behavior-Driven Development (BDD); E-Commerce applications; Functional requirement; Interactive behavior; Interactive system; Ontological modeling; Software development framework; User interfaces",,,,,,,,"Chelimsky, D., Astels, D., Helmkamp, B., North, D., Dennis, Z., Hellesoy, A., (2010) The RSpec Book: Behaviour Driven Development with Rspec, Cucumber, and Friends, , Pragmatic Bookshelf; Pugh, K., (2010) Lean-Agile Acceptance Test-Driven-Development, , Pearson Education; Adzic, G., (2011) Speciffication by Example: How Successful Teams Deliver the Right Software, , Manning Publications; Cohn, M., (2004) User Stories Applied: For Agile Software Development, , Addison-Wesley Professional; Guarino, N., Oberle, D., Staab, S., What is an ontology? (2009) Handbook on Ontologies, pp. 1-17. , Springer; Calvary, G., Coutaz, J., Thevenin, D., Limbourg, Q., Bouillon, L., Vanderdonckt, J., A unifying reference framework for multi-target user interfaces (2003) Interacting with Computers, 15 (3), pp. 289-308; Limbourg, Q., Vanderdonckt, J., Michotte, B., Bouillon, L., Lopez-Jaquero, V., USIXML: A language supporting multi-path development of user interfaces (2004) EHCI/DS-VIS; Winckler, M., Vanderdonckt, J., Stanciulescu, A., Trindade, F., Cascading dialog modeling with UsiXML (2008) International Workshop on Design, Speciffication, and Veri Ffication of Interactive Systems, pp. 121-135; Winckler, M., Palanque, P., StateWebCharts: A formal description technique dedicated to navigation modelling of web applications (2003) Design Speciffication and Veriffi-cation of Interactive Systems, pp. 61-67; Pullmann, J., (2016) MBUI Glossary W3C, Fraunhofer FIT, , https://www.w3.org/TR/mbui-glossary/; Barnett, J., (2016) State Chart XML (SCXML): State Machine Notation for Control Abstraction, W3C, , http://www.w3.org/TR/scxml/; North, D., (2016) What's in A Story?, , http://dannorth.net/whats-in-a-story/; Hak, J.-L., Winckler, M., Navarre, D., PANDA: Prototyping using annotation and decision analysis (2016) Proceedings of the 8th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 171-176; Fowler, M., (2016) PageObject, , http://martinfowler.com/bliki/PageObject.html",,,,"World Scientific Publishing Co. Pte Ltd",,,,,1793351X,,,,"English","Int. J. Semantic Computing",Article,"Final","All Open Access, Green",Scopus,2-s2.0-85066014112
"Muangsiri W., Takada S.","57195680092;7202611302;","Random GUI Testing of Android Application Using Behavioral Model",2017,"International Journal of Software Engineering and Knowledge Engineering","27","9-10",,"1603","1612",,1,"10.1142/S0218194017400149","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041190538&doi=10.1142%2fS0218194017400149&partnerID=40&md5=b1f99c92325390b726caed5c11df18e5","Department of Information and Computer Science, Keio University, Yokohama, Japan","Muangsiri, W., Department of Information and Computer Science, Keio University, Yokohama, Japan; Takada, S., Department of Information and Computer Science, Keio University, Yokohama, Japan","Automated GUI testing based on behavioral model is one of the most efficient testing approaches. By mining user usage, test scenarios can be generated based on statistical models such as Markov chain. However, these works require static analysis before starting the exploration which requires too much prerequisites and time. To address these challenges, we propose a behavioral-based GUI testing approach for mobile applications that achieves faster and higher coverage. The proposed approach does not conduct static analysis. It creates a behavioral model from usage logs by applying a statistical model. The events within the behavioral model are mapped to GUI components in a GUI tree. Finally, it updates the model dynamically to increase the probability of an event that rarely or never occurs when users use the application. The proposed approach was evaluated on four open-source Android applications, and compared with the state-of-the-art tools and manual testing. The main evaluation criteria are code coverage and ability to find errors. The proposed approach performed better than the current state-of-the-art automated testing tools in most aspects. © 2017 World Scientific Publishing Company.","android; behavioral model; GUI testing; testing automation; Testing tools","Automation; Behavioral research; Graphical user interfaces; Markov processes; Static analysis; android; Behavioral model; GUI testing; Testing automation; Testing tools; Android (operating system)",,,,,"Japan Society for the Promotion of Science, JSPS: 15K00104",,,"Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Proc. 2015 30th IEEE/ACM Int. Conf. Automated Software Engineering, pp. 429-440; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) ACM/IEEE Int. Symp. Empirical Software Engineering and Measurement, pp. 15-24; UI/Application Exerciser Monkey-Android Developers, , http://developer.android.com/tools/help/monkey.html; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proc. 27th IEEE/ACM Int. Conf. Automated Software Engineering, pp. 258-261; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proc. 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proc. Twenty-second IEEE/ACM Int. Conf. Automated Software Engineering, pp. 333-342; San Miguel, J.L., Takada, S., GUI and usage model-based test case generation for android applications with change analysis (2016) 1st Int. Workshop on Mobile Development, pp. 43-44; Linares-Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable gui-based execution scenarios (2015) Proc. 12th Working Conf. Mining Software Repositories, pp. 111-122; Gómez, M., Rouvoy, R., Adams, B., Seinturier, L., Reproducing context-sensitive crashes of mobile apps using crowdsourced monitoring (2016) Proc. Int. Conf. Mobile Software Engineering and Systems, pp. 88-99; Heafield, K., KenLM Language Model Toolkit, , http://kheafield.com/code/kenlm/; Chen, S.F., Goodman, J., An empirical study of smoothing techniques for language modeling (1999) Comput. Speech Lang., 13 (4), pp. 359-394; Ning, H., AnyMemo, , https://anymemo.org; Agarwal, R., World Clock Android App, , https://github.com/rahulaga/WorldClock; Senselesssolutions, Weight Chart, , https://github.com/bluezoot/weight-chart; Puig, F.C., LearnMusicNotes, , https://github.com/FerCa/LearnMusicNotes; EMMA: A Free Java Code Coverage Tool, , http://emma.sourceforge.net; https://developer.android.com/reference/android/graphics/Canvas.html",,,,"World Scientific Publishing Co. Pte Ltd",,,,,02181940,,ISEKE,,"English","Int. J. Software Engineer. Knowledge Engineer.",Conference Paper,"Final","",Scopus,2-s2.0-85041190538
"Alégroth E., Feldt R.","55843479600;24476388300;","On the long-term use of visual gui testing in industrial practice: a case study",2017,"Empirical Software Engineering","22","6",,"2937","2971",,13,"10.1007/s10664-016-9497-6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010807231&doi=10.1007%2fs10664-016-9497-6&partnerID=40&md5=b8b9e3627afc6441c5c0b34dfdd9db5a","Department of Computer Science and Engineering, Blekinge Institute of Technology, Karlskrona, SE-371 79, Sweden; Department of Computer Science and Engineering, Chalmers University of Technology, Gothenburg, SE-412 96, Sweden","Alégroth, E., Department of Computer Science and Engineering, Blekinge Institute of Technology, Karlskrona, SE-371 79, Sweden; Feldt, R., Department of Computer Science and Engineering, Chalmers University of Technology, Gothenburg, SE-412 96, Sweden","Visual GUI Testing (VGT) is a tool-driven technique for automated GUI-based testing that uses image recognition to interact with and assert the correctness of the behavior of a system through its GUI as it is shown to the user. The technique’s applicability, e.g. defect-finding ability, and feasibility, e.g. time to positive return on investment, have been shown through empirical studies in industrial practice. However, there is a lack of studies that evaluate the usefulness and challenges associated with VGT when used long-term (years) in industrial practice. This paper evaluates how VGT was adopted, applied and why it was abandoned at the music streaming application development company, Spotify, after several years of use. A qualitative study with two workshops and five well chosen employees is performed at the company, supported by a survey, which is analyzed with a grounded theory approach to answer the study’s three research questions. The interviews provide insights into the challenges, problems and limitations, but also benefits, that Spotify experienced during the adoption and use of VGT. However, due to the technique’s drawbacks, VGT has been abandoned for a new technique/framework, simply called the Test interface. The Test interface is considered more robust and flexible for Spotify’s needs but has several drawbacks, including that it does not test the actual GUI as shown to the user like VGT does. From the study’s results it is concluded that VGT can be used long-term in industrial practice but it requires organizational change as well as engineering best practices to be beneficial. Through synthesis of the study’s results, and results from previous work, a set of guidelines are presented that aim to aid practitioners to adopt and use VGT in industrial practice. However, due to the abandonment of the technique, future research is required to analyze in what types of projects the technique is, and is not, long-term viable. To this end, we also present Spotify’s Test interface solution for automated GUI-based testing and conclude that it has its own benefits and drawbacks. © 2017, The Author(s).","Automated testing; Case study; Guidelines; Industrial; Visual GUI testing","Automation; Image recognition; Industrial management; Automated testing; Engineering best practice; Grounded theory approach; Guidelines; Industrial; Industrial practices; Organizational change; Visual gui testing; Graphical user interfaces",,,,,,,,"Alégroth, E., (2013) On the industrial applicability of visual gui testing. Tech. rep., Department of Computer Science and Engineering Software Engineering (Chalmers), , Chalmers University of Technology, Goteborg; Alégroth, E., Feldt, R., Olsson, H., Transitioning manual system test suites to automated testing: An industrial case study (2013) Proceedings of the 6t h IEEE International Conference on Software Testing, Verification and Validation (ICST 2013), Luxembourg, pp. 56-65. , a, In; Alégroth, E., Nass, M., Olsson, H., JAutomate: A Tool for System-and Acceptance-test Automation (2013) Verification and Validation (ICST), 2013 IEEE Sixth International Conference on Software Testing. IEEE, pp. 439-446. , b, In; Alégroth, E., Feldt, R., Ryrholm, L., Visual gui testing in practice: challenges, problems and limitations (2014) Empir Softw Eng, pp. 1-51; Alégroth, E., Gao, Z., Oliveira, R., Memon, A., (2015) Conceptualization and evaluation of component-based testing unified with visual gui testing: an empirical study. In: Proceedings of the 8t h IEEE International Conference on Software Testing, Verification and Validation (ICST 2015), Graz; Alégroth, E., Feldt, R., Kolström, P., Maintenance of automated test suites in industry: An empirical study on visual gui testing (2016) Inf Softw Technol, 73, pp. 66-80; Alégroth, E., Steiner, M., Martini, A., Exploring the presence of technical debt in industrial gui-based testware: A case study (2016) 2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW). IEEE, pp. 257-262. , b, In; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of the 27th international conference on Software engineering, pp. 571-579. , In:, ACM; Borjesson, E., Feldt, R., Automated system testing using visual gui testing tools: A comparative study in industry (2012) Verification and Validation (ICST), 2012 IEEE Fifth International Conference on Software Testing. IEEE, pp. 350-359; Carver, J., The use of grounded theory in empirical software engineering (2007) Empirical Software Engineering Issues Critical Assessment and Future Directions, p. 42. , In: Springer; Finsterwalder, M., (2001) Automating acceptance tests for GUI applications in an extreme programming environment. In: Proceedings of the 2nd International Conference on eXtreme Programming and Flexible Processes in Software Engineering, pp 114–117; Glaser, B.G., Strauss, A.L., (2009) The discovery of grounded theory: Strategies for qualitative research, , Transaction Publishers; Grechanik, M., Xie, Q., Fu, C., (2009) Creating GUI testing tools using accessibility technologies. In: Verification and Validation Workshops, 2009. ICSTW ’09 International Conference on Software Testing. IEEE, pp 243–250; Grechanik, M., Xie, Q., ICSE 2009. IEEE 31st International Conference on Software Engineering. IEEE (2009) 408–418, , Fu C (2009b) Maintaining and evolving GUI-directed test scripts. In; Hellmann, T., Moazzen, E., Sharma, A., Akbar, M.Z., Sillito, J., Maurer, F., (2014) et al, , An exploratory study of automated gui testing, Goals, issues, and best practices; Höfer, A., Tichy, W.F., Status of empirical research in software engineering (2007) Empirical Software Engineering Issues, pp. 10-19. , Springer, Critical Assessment and Future Directions; Holmes, A., Kellogg, M., (2006) Automating functional tests using selenium, pp. 270-275; Isaacson, C., (2004) Web site development software. US Patent App. 10/844,095; Itkonen, J., Rautiainen, K., (2005), 10. , Exploratory testing: a multiple case study. In: 2005 International Symposium on Empirical Software Engineering 2005; Karhu, K., Repo, T., Taipale, O., Smolander, K., (2009) Empirical observations on software testing automation. In: ICST’09 International Conference on Software Testing Verification and Validation, 2009. IEEE, pp 201–209; Kendall, C., Kerr, L.R., Gondim, R.C., Werneck, G.L., Macena, R.H.M., Pontes, M.K., Johnston, L.G., McFarland, W., An empirical comparison of respondent-driven sampling, time location sampling, and snowball sampling for behavioral surveillance in men who have sex with men, fortaleza, Brazil (2008) AIDS Behav, 12 (1), pp. 97-104; Kniberg, H., Ivarsson, A., (2012) Scaling agile @ spotify. online], UCVOF, ucvox files wordpress com/2012/11/113617905-scaling-Agile-spotify-11 pdf; Lalwani, T., Garg, M., Burmaan, C., Arora, A., (2013) UFT/QTP Interview Unplugged: And I Thought I Knew UFT!, , KnowledgeInbox, 2nd edn; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. programmable web testing: An empirical assessment during test case evolution (2013) 2013 20th Working Conference on Reverse Engineering (WCRE). IEEE, pp. 272-281; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., (2014) Visual vs. dom-based web locators: An empirical study. In: Web Engineering, Lecture Notes in Computer Science, vol 8541. Springer, pp 322–340; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Chapter five-approaches and tools for automated end-to-end web testing (2016) Adv Comput, 101, pp. 193-237; Marchenko, A., Abrahamsson, P., Ihme, T., Long-term effects of test-driven development a case study (2009) Agile Processes in Software Engineering and Extreme Programming. Springer, pp. 13-22; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: an innovative tool for automated testing of gui-driven software (2014) Autom Softw Eng, 21 (1), pp. 65-105; Nilsson, N.J., (1980) Principles of artificial intelligence, , Tioga Publishing; Olan, M., Unit testing: test early, test often (2003) J Comput Sci Coll, 19 (2), pp. 319-328; Olsson, H.H., Alahyari, H., Bosch, J., Climbing the stairway to heaven–a mulitiple-case study exploring barriers in the transition from agile development towards continuous deployment of software (2012) 2012 38th EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA). IEEE, pp. 392-399; Olsson, N., Karl, K., (2015) Graphwalker: The open source model-based testing tool, , http://graphwalker.org/index; Patel, C., Patel, A., Patel, D., Optical character recognition by open source ocr tool tesseract: A case study (2012) Int J Comput Appl, 55 (10); Rafi, D., Moses, K., Petersen, K., Mantyla, M., Benefits and limitations of automated software testing: Systematic literature review and practitioner survey (2012) 2012 7th International Workshop on Automation of Software Test (AST), pp. 36-42. , In; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empir Softw Eng, 14 (2), pp. 131-164; Runeson, P., Höst, M., Rainer, A., Regnell, B., (2012) Case study research in software engineering: Guidelines and examples, , John Wiley & Sons; Saldaña, J., (2012) The coding manual for qualitative researchers. 14, Sage; (2016) Shazam, , http://www.shazam.com/, Shazam; Sjösten-Andersson, E., Pareto, L., (2006) Costs and Benefits of Structure-aware Capture/Replay toolss. SERPS’06 p 3; (2013) TestPlant, , http://www.testplant.com/, eggPlant; Vizulis, V., Diebelis, E., (2012) Self-Testing Approach and Testing Tools. Datorzinātne un informācijas tehnolog̀ijas p 27; Weinstein, M., (2002) Tams analyzer for macintosh os x: The native open source, macintosh qualitative research tool, , http://tamsys.sourceforge.net/; Wohlin, C., Aurum, A., Towards a decision-making structure for selecting a research design in empirical software engineering (2014) Empir Softw Eng, pp. 1-29; Yeh, T., Chang, T., Miller, R., Sikuli: using GUI screenshots for search and automation (2009) Proceedings of the 22nd annual ACM symposium on User interface software and technology, pp. 183-192. , In:, ACM; (2016) yEd Graph Editor: High-quality diagrams made easy, , https://www.yworks.com/products/yed, yworks","Alégroth, E.; Department of Computer Science and Engineering, Sweden; email: emil.alegroth@bth.se",,,"Springer New York LLC",,,,,13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","All Open Access, Hybrid Gold, Green",Scopus,2-s2.0-85010807231
"Luo M., Starov O., Honarmand N., Nikiforakis N.","57200512622;55842820700;21833922600;36190021100;","Hindsight: Understanding the evolution of ui vulnerabilities in mobile browsers",2017,"Proceedings of the ACM Conference on Computer and Communications Security",,,,"149","162",,14,"10.1145/3133956.3133987","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041431061&doi=10.1145%2f3133956.3133987&partnerID=40&md5=38c49221a2947680805b2e1c4569c629","Stony Brook University, United States","Luo, M., Stony Brook University, United States; Starov, O., Stony Brook University, United States; Honarmand, N., Stony Brook University, United States; Nikiforakis, N., Stony Brook University, United States","Much of recent research on mobile security has focused on malicious applications. Although mobile devices have powerful browsers that are commonly used by users and are vulnerable to at least as many attacks as their desktop counterparts, mobile web security has not received the attention that it deserves from the community. In particular, there is no longitudinal study that investigates the evolution of mobile browser vulnerabilities over the diverse set of browsers that are available out there. In this paper, we undertake the. rst such study, focusing on UI vulnerabilities among mobile browsers. We investigate and quantify vulnerabilities to 27 UI-related attacks-compiled from previous work and augmented with new variations of our own-across 128 browser families and 2,324 individual browser versions spanning a period of more than 5 years. In the process, we collect an extensive dataset of browser versions, old and new, from multiple sources. We also design and implement a browser-agnostic testing framework, called Hindsight, to automatically expose browsers to attacks and evaluate their vulnerabilities. We use Hindsight to conduct the tens of thousands of individual attacks that were needed for this study. We discover that 98.6% of the tested browsers are vulnerable to at least one of our attacks and that the average mobile web browser is becoming less secure with each passing year. Overall, our. ndings support the conclusion that mobile web security has been ignored by the community and must receive more attention. © 2017 author(s).","Hindsight; Mobile Browser Security; Phishing Attacks; User Interface; Vulnerability Testing","Data privacy; Security of data; Design and implements; Hindsight; Individual attacks; Longitudinal study; Mobile Browsers; Mobile Web browsers; Phishing attacks; Vulnerability testing; User interfaces",,,,,"1405641

National Science Foundation, NSF: CNS-1527086, CNS-1617593

Office of Naval Research, ONR: N00014-17-1-2541

National Science Foundation, NSF","This work was supported by the O.ce of Naval Research (ONR) under grant N00014-17-1-2541 and by the National Science Foundation (NSF) under grants CNS-1617593 and CNS-1527086. Some of our experiments were conducted with equipment purchased through NSF CISE Research Infrastructure Grant No. 1405641.",,"(2009) Ad Blocker and Anti-tracker, , https://adguard.com/en/welcome.html, AdGuard 2009-2017; Amrutkar, C., Singh, K., Verma, A., Traynor, P., (2011) On the Disparity of Display Security in Mobile and TraditionalWeb Browsers, , Technical Report. Georgia Institute of Technology; Amrutkar, C., Singh, K., Verma, A., Traynor, P., VulnerableMe: Measuring systemic weaknesses in mobile browser security (2012) International Conference On Information Systems Security, pp. 16-34. , Springer; Amrutkar, C., Traynor, P., Van Oorschot, P.C., Measuring SSL indicators on mobile browsers: Extended life, or end of the road (2012) International Conference On Information Security, pp. 86-103. , Springer; Amrutkar, C., Traynor, P., Oorschot, P.C.V., An empirical evaluation of security indicators in mobile Web browsers (2015) IEEE Transactions On Mobile Computing, 14 (5), pp. 889-903. , (2015); Amrutkar, C.V., (2014) Towards Secure Web Browsing On Mobile Devices, , Ph.D. Dissertation. Georgia Institute of Technology; Bahajji, Z.A., Illyes, G., (2014) Google Webmaster Blog: HTTPS As A Ranking Signal, , https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html, (2014); (2010) URL Display of Title Instead of the URL Enables Phishing Attacks Via URL Spoong, , https://bugzilla.mozilla.org/showbug.cgiid=605206, Bugzilla@Mozilla (2010); Chen, P., Nikiforakis, N., Huygens, C., Desmet, L., A Dangerous Mix: Large-scale analysis of mixed-content websites (2013) Proceedings of the 16th Information Security Conference (ISC); Chin, E., Wagner, D., Bifocals: Analyzing webview vulnerabilities in android applications (2013) International Workshop On Information Security Applications., pp. 138-159. , Springer; (2014) CVE-2014-6041 : The Android WebView in Android before 4.4 Allows Remote Attackers to Bypass the Same Origin Policy Via A Crafted Attributes, , http://www.cvedetails.com/cve/CVE-2014-6041, CVE (2014); Dolanjski, P., Vyas, T., (2017) Mozilla Security Blog: Communicating the Dangers of Non-Secure HTTP, , https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http, (2017); (2017) Tesseract Open Source OCR Engine, , https://github.com/tesseract-ocr/tesseract, Google. (2017); Felt, A.P., Reeder, R.W., Ainslie, A., Harris, H., Walker, M., Thompson, C., Embre Acer, M., Consolvo, S., Rethinking connection security indicators (2016) Twelfth Symposium On Usable Privacy and Security (SOUPS); Felt, A.P., Wagner, D., Phishing on mobile devices (2011) Proceedings of the Web 2.0 Security and Privacy Workshop; Fu, A.Y., Deng, X., Wenyin, L., Little, G., The methodology and an application to ght against unicode attacks (2006) Proceedings of the Second Symposium On Usable Privacy and Security ACM, pp. 91-101; (2017) CM Browser-Adblock Download, , https://play.google.com/store/apps/detailsid=com.ksmobile.cb, Google Play store (2017); (2017) Dolphin-Best Web Browser, , https://play.google.com/store/apps/detailsid=mobi.mgeek.TunnyBrowser, Google Play store (2017); (2017) Google Play Store: Fastest Mini Browser, , https://play.google.com/store/apps/detailsid=com.mmbox.browser, Google Play store (2017); (2017) Google Play Store: Ghostery Privacy Browser, , https://play.google.com/store/apps/detailsid=com.ghostery.android.ghostery, Google Play store (2017); (2017) Opera Mini-fast Web Browser, , https://play.google.com/store/apps/detailsid=com.opera.mini.native, Google Play store (2017); (2017) UC Browser-Fast Download, , https://play.google.com/store/apps/detailsid=com.UCMobile.intl, Google Play store (2017); Hothersall-Thomas, C., Maeis, S., Novakovic, C., Browser-Audit: Automated testing of browser security features (2015) Proceedings of the International Symposium On Software Testing and Analysis (ISSTA); Kersey, J., (2013) Chrome for Android Update, , http://googlechromereleases.blogspot.com/2013/11/chrome-for-android-update.html, (2013); (2017) Let's Encrypt-Free SSL/TLS Certicates, , https://letsencrypt.org, (2017); Luo, T., Hao, H., Du, W., Wang, Y., Yin, H., Attacks on webview in the android system (2011) Proceedings of the 27th Annual Computer Security Applications Conference ACM, pp. 343-352; Luo, T., Jin, X., Ananthanarayanan, A., Du, W., Touchjacking attacks on web in android, ios, and windows phone (2013) Foundations and Practice of Security, pp. 227-243. , Springer; Marlinspike, M., (2009) More Tricks for Defeating SSL in Practice, , Black Hat USA (2009); Neugschwandtner, M., Lindorfer, M., Platzer, C., A view to a kill: Webview exploitation (2013) LEET; Niu, Y., Hsu, F., Chen, H., IPhish: Phishing vulnerabilities on consumer electronics (2008) Proceedings of the Usability, Psychology, and Security Workshop (UPSEC); (2017) Cloud Vision API Documentation, , https://cloud.google.com/vision/docs, Google Cloud Platform (2017); Rydstedt, G., Gourdin, B., Bursztein, E., Boneh, D., Framing attacks on smart phones and dumb routers: Tap-jacking and geo-localization attacks (2010) Proceedings of the 4th USENIX Workshop On Oensive Technologies (WOOT), pp. 1-8. , USENIX Association; Schechter, E., (2016) Google Security Blog: Moving Towards A More Secure Web, , https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html, (2016); (2017) Selenium Webdriver, , http://www.seleniumhq.org/projects/webdriver, Selenium (2017); Singh, K., Moshchuk, A., Wang, H.J., Lee, W., On the incoherencies in web browser access control policies (2010) Security and Privacy (SP) 2010 IEEE Symposium On. IEEE, pp. 463-478; Sivakorn, S., Polakis, J., Keromytis, A.D., The cracked cookie Jar: HTTP cookie hijacking and the exposure of private information (2016) Proceedings of the 37th IEEE Symposium On Security and Privacy (S&P '16); Sunshine, J., Egelman, S., Almuhimedi, H., Atri, N., Faith Cranor, L., Crying Wolf: An empirical study of SSL warning eectiveness (2009) USENIX Security Symposium., pp. 399-416; (2010) Web Security Context: User Interface Guidelines, , https://www.w3.org/TR/wsc-ui, W3C (2010); Zheng, X., Jiang, J., Liang, J., Duan, H., Chen, S., Wan, T., Weaver, N., Cookies lack integrity: Real-World implications (2015) 24th USENIX Security Symposium (USENIX Security 15); Zhou, Y., Evans, D., Why aren't HTTP-only cookies more widely deployed (2010) Proceedings of 4th Web 2, , (2010)",,,"ACM SIGSAC","Association for Computing Machinery","24th ACM SIGSAC Conference on Computer and Communications Security, CCS 2017","30 October 2017 through 3 November 2017",,131467,15437221,9781450349468,,,"English","Proc ACM Conf Computer Commun Secur",Conference Paper,"Final","",Scopus,2-s2.0-85041431061
"Cao C., Meng C., Ge H., Yu P., Ma X.","7401501786;57196116861;57196116244;55223076700;7404550517;","Xdroid: Testing Android Apps with Dependency Injection",2017,"Proceedings - International Computer Software and Applications Conference","1",, 8029611,"214","223",,2,"10.1109/COMPSAC.2017.268","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85031902191&doi=10.1109%2fCOMPSAC.2017.268&partnerID=40&md5=a18f0c2e81344e9d2164d29bff570a7e","State Key Lab for Novel Software Technology, Nanjing University, Nanjing, China; Dept. of Computer Science and Technology, Nanjing University, Nanjing, China","Cao, C., State Key Lab for Novel Software Technology, Nanjing University, Nanjing, China, Dept. of Computer Science and Technology, Nanjing University, Nanjing, China; Meng, C., State Key Lab for Novel Software Technology, Nanjing University, Nanjing, China, Dept. of Computer Science and Technology, Nanjing University, Nanjing, China; Ge, H., State Key Lab for Novel Software Technology, Nanjing University, Nanjing, China, Dept. of Computer Science and Technology, Nanjing University, Nanjing, China; Yu, P., State Key Lab for Novel Software Technology, Nanjing University, Nanjing, China, Dept. of Computer Science and Technology, Nanjing University, Nanjing, China; Ma, X., State Key Lab for Novel Software Technology, Nanjing University, Nanjing, China, Dept. of Computer Science and Technology, Nanjing University, Nanjing, China","The applications ('apps') running on Android need to be adequately tested to avoid faults. Researchers have developed a number of test input generation tools for automated app testing and tried to improve test coverage to detect as many faults as possible. However, existing testing tools achieve very low coverage for some specific apps because they highly depend on external factors to run properly such as business logic, content providers and so on. In this paper, we present Xdroid to catch when and what kind of dependencies apps require and inject them correspondingly in a lightweight way. Working with a built-in tool Xmonkey which generates GUI events directly on Android devices, Xdroid implements an effective testing engine to get a high coverage. We evaluate Xdroid with diverse Android apps and demonstrate that it outperforms Monkey for 17%, Sapienz for 22% in coverage and meanwhile reveals more bugs than manual testing. Overall, it combines the benefits of both manual testing and random testing to improve test coverage and detect bugs effectively. © 2017 IEEE.",,"Application programs; Computer software; Business logic; Content providers; Dependency injection; Effective testing; External factors; Generation tools; Manual testing; Random testing; Android (operating system)",,,,,"61472117, 61690204

National High-tech Research and Development Program: 2015AA01A203","VIII. ACKNOWLEDGMENT This work was supported in part by High-Tech Research and Development Program of China under Grant No.2015AA01A203, National Natural Science Foundation (Grant Nos. 61690204, 61472117) of China, and the Collaborative Innovation Center of Novel Software Technology and Industrialization.",,"(2015), https://opensignal.com/reports/2015/08/android-fragmentation/, Android fragmentation visualized [Online]. Available:; Shauvik Roy Choudhary, A.G., Orso, A., Automated test input generation for android: Are we there yet Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering. ACM, 2015, pp. 429-440; (2016), http://repo.xposed.info/, rovo89, Xposed module repository [Online]. Available:; (2016), developer.android.com/intl/zh-cn/tools/help/monkey.html, Ui/application exerciser monkey [Online]. Available; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proc. of ISSTA'16, pp. 94-105; Inc, T., (2017) Wechat, , http://www.wechat.com/en/, [Online]. Available:; (2017), http://airunlock.qtlin.tw/, pinetum, Airunlock [Online]. Available:; Vance, K., (2010) Nectarine Client for Android Devices, , https://github.com/cknave/nectroid, [Online]. Available:; (2016), https://developer.android.com/guide/topics/permissions/index.html, Android permissions [Online]. Available:; Lorenzo Gomez, I.N., Azim, T., Reran: Timing-A nd touch-sensitive record and replay for android (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 72-81. , ACM; (2016), https://github.com/fr3ts0n/AndrOBD/wiki, fr3ts0n, Androbd [Online]. Available:; Aravind MacHiry, R.T., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , ACM; (2016), https://source.android.com/, Android open source project [Online]. Available:; (2016), https://developer.android.com/reference/packages.html, Android api reference [Online]. Available:; (2016), https://developer.android.com/reference/android/content/SharedPreferences.html, Sharedpreferences [Online]. Available:; (2016), https://developer.android.com/reference/android/app/Instrumentation.html, Android instrumentation [Online]. Available:; (2016), https://developer.android.com/about/dashboards/index.html, Platform versions [Online]. Available:; (2016), https://play.google.com/store/apps/top, Top charts android apps on google play [Online]. Available:; (2016), https://f-droid.org/, Free and open source android app repository [Online]. Available:; (2006), http://emma.sourceforge.net/, Emma: A free Java code coverage tool [Online]. Available:; Domenico Amalfitano, A.R.F., Tramontana, P., Using gui ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 258-261; Yang, W.X.T., Prasad, M.R., A grey-box approach for automated guimodel generation of mobile applications (2013) FASE 2013: Fundamental Approaches to Software Engineering, pp. 250-265. , Springer; Tanzirul Azim, I.N., Targeted and depth-first exploration for systematic testing of android apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications. ACM, pp. 641-660; Wontae Choi, K.S., Necula, G., Guided gui testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications. ACM, pp. 623-640; Riyadh Mahmood, S.M., Mirzaei, N., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineerings. ACM, pp. 599-609; Saswat Anand, M.J.H., Naik, M., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering. ACM, pp. 591-5911; Xiujiang Li, Y.J., Liu, Y., User guided automation for testing mobile apps 21st Asia-Pacific Software Engineering Conference, 1, p. 2014. , IEEE; Chen, N., Kim, S., Puzzle-based automatic testing: Bringing humans into the loop by solving puzzles (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 140-149; Nikolai Tillmann, J.D.H., Xie, T., Teaching and learning programming and software engineering via interactive gaming (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 1117-1126. , ACM",,"Demartini C.Conte T.Nakamura M.Lung C.-H.Zhang Z.Hasan K.Reisman S.Liu L.Claycomb W.Takakura H.Yang J.-J.Tovar E.Cimato S.Ahamed S.I.Akiyama T.","Associazione Italiana per l'Informatica (AICA);IEEE;IEEE Big Data Initiative;IEEE Computer Society","IEEE Computer Society","41st IEEE Annual Computer Software and Applications Conference, COMPSAC 2017","4 July 2017 through 8 July 2017",,130854,07303157,9781538603673,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-85031902191
"Wetzlmaier T., Ramler R.","56595126700;23095597800;","Hybrid monkey testing: Enhancing automated GUI tests with random test generation",2017,"A-TEST 2017 - Proceedings of the 8th ACM SIGSOFT International Workshop on Automated Software Testing, Co-located with FSE 2017",,,,"5","10",,5,"10.1145/3121245.3121247","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052872109&doi=10.1145%2f3121245.3121247&partnerID=40&md5=a78250a3682c8c2eda902ad015a06f53","Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria","Wetzlmaier, T., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria","Many software projects maintain automated GUI tests that are repeatedly executed for regression testing. Every test run executes exactly the same fixed sequence of steps confirming that the currently tested version shows precisely the same behavior as the last version. The confirmatory approach implemented by these tests limits their ability to find new defects. We therefore propose to combine existing automated regression tests with random test generation. Random test generation creates a rich variety of test steps that interact with the system under test in new, unexpected ways. Enhancing existing test cases with random test steps allows revealing new, hidden defects with little extra effort. In this paper we describe our implementation of a hybrid approach that enhances existing GUI test cases with additional, randomly generated interactions. We conducted an experiment using a mature, widely-used open source application. On average the added random interactions increased the number of visited application windows per test by 23.6% and code coverage by 12.9%. Running the enhanced tests revealed three new defects. © 2017 Association for Computing Machinery.","GUI testing; Random test generation; Software test automation","Automation; Defects; Graphical user interfaces; Open source software; GUI testing; Open source application; Random test generation; Regression testing; Regression tests; Software project; Software test automation; System under test; Software testing",,,,,"Bundesministerium für Wissenschaft, Forschung und Wirtschaft, BMWFW: FFG 844597

Österreichische Forschungsförderungsgesellschaft, FFG

Bundesministerium für Verkehr, Innovation und Technologie, BMVIT","The research reported in this paper has been supported by the Austrian Research Promotion Agency, the Austrian Ministry for Transport, Innovation and Technology, the Federal Ministry of Science, Research and Economy, and the Province of Upper Austria in the frame of the COMET center SCCH (FFG 844597).",,"Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) Proceedings of The 27th International Conference on Software Engineering (ICSE’05), pp. 571-579. , IEEE; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., McMinn, P., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86 (8), pp. 1978-2001; Vos, T.E., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) International Journal of Information System Modeling and Design (IJISMD), 6 (3), pp. 46-83; Hofer, B., Peischl, B., Wotawa, F., GUI savvy end-to-end testing with smart monkeys (2009) Proceedings of The 2009 ICSE Workshop on Automation of Software Test (AST), pp. 130-137. , IEEE; Wetzlmaier, T., Ramler, R., Putschögl, W., A framework for monkey GUI testing (2016) Proceedings of The 2016 IEEE International Conference on Software Testing, Verification and Validation (ICST), pp. 416-423. , IEEE; Nyman, N., Using monkey test tools: How to find bugs cost-effectively through random testing (2000) Software Testing & Quality Engineering Magazine (STQE), pp. 18-21. , January/February 2000; Fodeh, J., Adventures with test monkeys (2012) Experiences of Test Automation: Case Studies of Software Test Automation, pp. 447-460. , D. Graham and M. Fewster (Eds.). Addison-Wesley Professional; Forrester, J.E., Miller, B.P., An empirical study of the robustness of Windows NT applications using random testing (2000) Proceedings of The 4th USENIX Windows System Symposium - Volume 4 (WSS’00), pp. 59-68. , Seattle, Washington, USENIX Association; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Proceedings of The 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , IEEE; Chen, T.Y., Kuo, F.C., Merkel, R.G., Tse, T.H., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83 (1), pp. 60-66",,"Eldh S.Prasetya W.Vos T.E.J.","ACM SIGSOFT","Association for Computing Machinery, Inc","8th ACM SIGSOFT International Workshop on Automated Software Testing, A-TEST 2017, co-located with the International ESEC/FSE Conference, FSE 2017","4 September 2017 through 5 September 2017",,138675,,9781450351553,,,"English","A-TEST - Proc. ACM SIGSOFT Int. Workshop Autom. Softw. Test., Co-located FSE",Conference Paper,"Final","",Scopus,2-s2.0-85052872109
"Su T., Meng G., Chen Y., Wu K., Yang W., Yao Y., Pu G., Liu Y., Su Z.","55749546700;56747189200;8929240400;57020369800;57195998506;57193236249;9534351100;56911879800;7402248744;","Guided, stochastic model-based GUI testing of android apps",2017,"Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering","Part F130154",,,"245","256",,98,"10.1145/3106237.3106298","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030779618&doi=10.1145%2f3106237.3106298&partnerID=40&md5=7a2d6a5ba182d3171507844c88219a61","School of Computer Science and Software Engineering, East China Normal University, China; School of Computer Engineering, Nanyang Technological University, Singapore, Singapore; Department of Computer Science and Engineering, Shanghai Jiao Tong University, China; Department of Computer Science, University of California, Davis, United States","Su, T., School of Computer Science and Software Engineering, East China Normal University, China, School of Computer Engineering, Nanyang Technological University, Singapore, Singapore; Meng, G., School of Computer Engineering, Nanyang Technological University, Singapore, Singapore; Chen, Y., Department of Computer Science and Engineering, Shanghai Jiao Tong University, China; Wu, K., School of Computer Science and Software Engineering, East China Normal University, China; Yang, W., School of Computer Science and Software Engineering, East China Normal University, China; Yao, Y., School of Computer Science and Software Engineering, East China Normal University, China; Pu, G., School of Computer Science and Software Engineering, East China Normal University, China; Liu, Y., School of Computer Engineering, Nanyang Technological University, Singapore, Singapore; Su, Z., Department of Computer Science, University of California, Davis, United States","Mobile apps are ubiquitous, operate in complex environments and are developed under the time-to-market pressure. Ensuring their correctness and reliability thus becomes an important challenge. This paper introduces Stoat, a novel guided approach to perform stochastic model-based testing on Android apps. Stoat operates in two phases: (1) Given an app as input, it uses dynamic analysis enhanced by a weighted UI exploration strategy and static analysis to reverse engineer a stochastic model of the app's GUI interactions; and (2) it adapts Gibbs sampling to iteratively mutate/refine the stochastic model and guides test generation from the mutated models toward achieving high code and model coverage and exhibiting diverse sequences. During testing, system-level events are randomly injected to further enhance the testing effectiveness. Stoat was evaluated on 93 open-source apps. The results show (1) the models produced by Stoat cover 17~31% more code than those by existing modeling tools; (2) Stoat detects 3X more unique crashes than two state-of-the-art testing tools, Monkey and Sapienz. Furthermore, Stoat tested 1661 most popular Google Play apps, and detected 2110 previously unknown and unique crashes. So far, 43 developers have responded that they are investigating our reports. 20 of reported crashes have been confirmed, and 8 already fixed. © 2017 Association for Computing Machinery.","GUI testing; Mobile apps; Model-based testing","Android (operating system); Graphical user interfaces; Model checking; Open source software; Software engineering; Static analysis; Stochastic systems; Complex environments; Exploration strategies; GUI testing; Mobile apps; Model based testing; Mutated models; Test generations; Testing effectiveness; Stochastic models",,,,,"M4061759.020

ZF1213

1319187, 1528133, 1618158

Google

National Natural Science Foundation of China: 61572197, 61632005

Ministry of Science and Technology of the People's Republic of China: 2015BAG19B02

Science and Technology Commission of Shanghai Municipality, STCSM: 16DZ1100600, 61572312","We would like to thank the anonymous reviewers for their valuable feedback. Ting Su is partially supported by NSFC Grants 61572197 and 61632005, Geguang Pu by MOST NKTSP Project 2015BAG19B02 and STCSM Project No.16DZ1100600, Yuting Chen by NSFC Grant 61572312, Ke Wu by Shanghai Collaborative Innovation Center of Trustworthy Software for Internet of Things (ZF1213), and Zhen-dong Su by the United States NSF Grants 1319187, 1528133, and 1618158, and a Google Faculty Research Award. This work is also partially supported by the NTU Research Grant M4061759.020.",,"Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) IEEE/ACM International Conference on Automated Software Engineering, ASE'12, pp. 258-261. , Essen, Germany, September 3-7, 2012; Amalfitano, D., Rita Fasolino, A., Tramontana, P., Dzung Ta, B., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , http://dx.doi.org/10.1109/MS.2014.55, 2015; Anand, S., (2017) ELLA, , https://github.com/saswatanand/ella, (2017). Retrieved 2017-2-18 from; Anand, S., Naik, M., Jean Harrold, M., Yang, H., Automated concolic testing of smartphone apps (2012) 20th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE-20), SIGSOFT/FSE'12, p. 59. , Cary, NC, USA - November 11 - 16, 2012; Andrieu, C., De Freitas, N., Doucet, A., Jordan, M.I., An introduction to mcmc for machine learning (2003) Machine Learning, 50 (1), pp. 5-43. , 2003; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA 2013, Part of SPLASH 2013, pp. 641-660. , Indianapolis, IN, USA, October 26-31, 2013; Min Baek, Y., Bae, D., Automated model-based Android GUI testing using multi-level GUI comparison criteria (2016) Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016, pp. 238-249. , Singapore, September 3-7, 2016; Bartel, A., Klein, J., Monperrus, M., Le Traon, Y., Dexpler: Converting android dalvik bytecode to jimple for static analysis with soot (2012) ACM Sigplan International Workshop on the State of the Art in Java Program Analysis; Bielik, P., Raychev, V., Vechev, M.T., Scalable race detection for android applications (2015) Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, pp. 332-348. , OOPSLA 2015, part of SPLASH 2015, Pittsburgh, PA, USA, October 25-30, 2015; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE 2007), pp. 333-342. , November 5-9, 2007, Atlanta, Georgia, USA; Chen, K., Liu, P., Zhang, Y., Achieving accuracy and scalability simultaneously in detecting application clones on android markets (2014) 36th International Conference on Software Engineering, ICSE, pp. 175-186; Chen, Y., Su, T., Sun, C., Su, Z., Zhao, J., Coverage-directed differential testing of jvm implementations (2016) Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation; Chen, Y., Su, Z., Guided differential testing of certificate validation in SSL/TLS implementations (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, pp. 793-804. , Bergamo, Italy, August 30 - September 4, 2015; Chib, S., Greenberg, E., (1995) Understanding the Metropolis- Hastings Algorithm, , 1995; Choi, W., Necula, G.C., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA 2013, Part of SPLASH 2013, pp. 623-640. , Indianapolis, IN, USA, October 26-31, 2013; Roy Choudhary, S., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (E) (2015) 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, pp. 429-440. , http://dx.doi.org/10.1109/ASE.2015.89, Lincoln, NE, USA, November 9-13, 2015; Dalal, S.R., Jain, A., Karunanithi, N., Leaton, J.M., Lott, C.M., Patton, G.C., Horowitz, B.M., Model-based testing in practice (1999) Proceedings of the 21st International Conference on Software Engineering (ICSE '99), pp. 285-294. , ACM, New York, NY, USA; De Cleva Farto, G., Takeshi Endo, A., Evaluating the modelbased testing approach in the context of mobile applications (2015) Electronic Notes in Theoretical Computer Science, 314 (2015), pp. 3-21; (2017) Android GUITAR, , http://sourceforge.net/apps/mediawiki/guitar/index.php?title=Android_GUITAR, Android GUITAR Developers. (2017). Retrieved 2017- 2-18 from; (2017) Bites, , https://code.google.com/archive/p/bites-android/, Bites Developers. (2017). Retrieved 2017- 2-18 from; Mileage, 2017. , https://github.com/evancharlton/android-mileage, Mileage Developers. (2017). Retrieved 2017-2-18 from; (2017) Soot, , https://github.com/Sable/soot, Soot Developers. (2017). Retrieved 2017- 2-18 from; Dias Neto, A.C., Subramanyan, R., Vieira, M., Travassos, G.H., A survey on model-based testing approaches: A systematic review (2007) Proceedings of the 1st ACM International Workshop on Empirical Assessment of Software Engineering Languages and Technologies: Held in Conjunction with the 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE), 2007, pp. 31-36. , ACM; Su, T., (2017) Stoat, , https://tingsu.github.io/files/stoat.html, (2017). Retrieved 2017-2-18 from; Gilks, W.R., Richardson, S., Spiegelhalter, D., (1995) Markov Chain Monte Carlo in Practice, , http://books.google.com/books?id=TRXrMWY_i2IC, Taylor & Francis; (2017) Android Logcat, , https://developer.android.com/studio/command-line/logcat.html, Google (2017). Retrieved 2017-2-18 from; (2017) Android UI Automator, , http://developer.android.com/tools/help/uiautomator/index.html, Google. (2017). Retrieved 2017-2-18 from; (2017), http://developer.android.com/tools/help/monkey.html, Google. (2017). Retrieved 2017- 2-18 from; (2017) AppBrain, , http://www.appbrain.com/stats/, (2017). Retrieved 2017-2-18 from; (2017) F-Droid, , https://f-droid.org/, (2017). Retrieved 2017-2-18 from; Gudmundsson, V., Lindvall, M., Aceto, L., Bergthorsson, J., Ganesan, D., Model-based testing of mobile systems - An empirical study on quizup android app (2016) Proceedings First Workshop on Preand Post-Deployment Verification Techniques, pp. 16-30. , PrePost@IFM 2016, Reykjavík, Iceland, 4th June 2016; Hao, S., Liu, B., Nath, S., Halfond, J.W.G., Govindan, R., Puma: Programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys '14), pp. 204-217. , http://dx.doi.org/10.1145/2594368.2594390, ACM, New York, NY, USA; He, X., (2017) Python Wrapper of Android UIAutomator Test Tool, , https://github.com/xiaocong/uiautomator, (2017). Retrieved 2017-2-18 from; Hierons, R.M., Merayo, M.G., Mutation testing from probabilistic and stochastic finite state machines (2009) Journal of Systems and Software, 82 (11), pp. 1804-1818. , 2009; Hu, G., Yuan, X., Tang, Y., Yang, J., Efficiently, effectively detecting mobile app bugs with appdoctor (2014) Ninth Eurosys Conference 2014, EuroSys 2014, pp. 1801-1815. , Amsterdam, The Netherlands, April 13-16, 2014; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) International Symposium on Software Testing and Analysis, ISSTA '13, pp. 67-77. , Lugano, Switzerland, July 15-20, 2013; Le, V., Sun, C., Su, Z., Finding deep compiler bugs via guided stochastic program mutation (2015) Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2015, Part of SLASH 2015, pp. 386-399. , Pittsburgh, PA, USA, October 25-30, 2015; Liu, P., Zhang, X., Pistoia, M., Zheng, Y., Marques, M., Zeng, L., Automatic text input generation for mobile testing (2017) Proceedings of the 39th International Conference on Software Engineering (ICSE '17), pp. 643-653. , IEEE Press, Piscataway, NJ, USA; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE'13, pp. 224-234. , Saint Petersburg, Russian Federation, August 18-26, 2013; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, (FSE-22), pp. 599-609. , Hong Kong, China, November 16 - 22, 2014; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA 2016, pp. 94-105. , Saarbrücken, Germany, July 18-20, 2016; Memon, A.M., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) 10th Working Conference on Reverse Engineering, WCRE 2003, pp. 260-269. , Victoria, Canada, November 13-16, 2003; Memon, A.M., Lou Soffa, M., Pollack, M.E., Coverage criteria for gui testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering 2001, pp. 256-267. , Vienna, Austria, September 10-14, 2001; Meng, G., Xue, Y., Mahinthan, C., Narayanan, A., Liu, Y., Zhang, J., Chen, T., Mystique: Evolving android malware for auditing anti-malware tools (2016) Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security (Asia CCS '16), pp. 365-376. , ACM, New York, NY, USA; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in gui testing of android applications (2016) Proceedings of the 38th International Conference on Software Engineering (ICSE '16), pp. 559-570. , ACM, New York, NY, USA; Mirzaei, N., Malek, S., Pasareanu, C.S., Esfahani, N., Mahmood, R., Testing Android apps through symbolic execution (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), pp. 1-5. , 2012; Moran, K., Linares Vásquez, M., Bernal-Cárdenas, C., Vendome, C., Poshyvanyk, D., Automatically discovering, reporting and reproducing android application crashes (2016) 2016 IEEE International Conference on Software Testing, Verification and Validation, pp. 33-44. , ICST 2016, Chicago, IL, USA, April 11-15, 2016; Nguyen, C.D., Marchetto, A., Tonella, P., Combining modelbased and combinatorial testing for effective test case generation (2012) International Symposium on Software Testing and Analysis, ISSTA 2012, pp. 100-110. , Minneapolis, MN, USA, July 15-20, 2012; Nikolik, B., Test diversity (2006) Information & Software Technology, 48 (11), pp. 1083-1094. , 2006; Pradel, M., Schuh, P., Necula, G.C., Sen, K., Event- Break: Analyzing the responsiveness of user interfaces through performanceguided test generation (2014) Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA 2014, Part of SPLASH 2014, pp. 33-47. , Portland, OR, USA, October 20-24, 2014; Prowell, S.J., Using markov chain usage models to test complex systems (2005) 38th Hawaii International Conference on System Sciences (HICSS-38 2005), CD-ROM/Abstracts Proceedings, , 3-6 January 2005, Big Island, HI, USA; Roubtsov, V., (2017) EMMA, , http://emma.sourceforge.net/, (2017). Retrieved 2017-2-18 from; Schkufza, E., Sharma, R., Aiken, A., Stochastic superoptimization (2013) Architectural Support for Programming Languages and Operating Systems, ASPLOS '13, pp. 305-316. , Houston, TX, USA - March 16 - 20, 2013; Shafique, M., Labiche, Y., (2010) A Systematic Review of Model Based Testing Tool Support, , Carleton University, Canada, Tech. Rep. Technical Report SCE-10-04 (2010); Su, T., Fsmdroid: Guided gui testing of android apps (2016) Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, pp. 689-691. , Austin, TX, USA, May 14-22, 2016 - Companion Volume; Su, T., Wu, K., Miao, W., Pu, G., He, J., Chen, Y., Su, Z., A survey on data-flow testing (2017) ACM Comput. Surv, 50 (1), 35p. , Article 5 (March 2017; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based gui testing of an android application (2011) Fourth IEEE International Conference on Software Testing, Verification and Validation, ICST 2011, pp. 377-386. , Berlin, Germany, March 21-25, 2011; (2017) Androguard, , https://github.com/androguard/androguard, (2017). Retrieved 2017-2-18 from; (2017) TextEdit, , https://github.com/paulmach/Text-Edit-for-Android, TextEdit Developers. (2017). Retrieved 2017-2-18 from; Van der Merwe, H., Merwe Der BVan, B., Visser, W., Verifying android applications using Java pathfinder (2012) SIGSOFT Softw. Eng. Notes, 37 (6), pp. 1-5. , Nov. 2012; Linares Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable gui-based execution scenarios (2015) 12th IEEE/ACMWorking Conference on Mining Software Repositories, MSR 2015, pp. 111-122. , Florence, Italy, May 16-17, 2015; Whittaker, J.A., Thomason, M.G., A markov chain model for statistical software testing (1994) IEEE Trans. Software Eng, 20 (10), pp. 812-824. , 1994; (2017) Cosine Similarity, , https://en.wikipedia.org/wiki/Cosine_similarity, (2017). Retrieved 2017-2-18 from; (2017) Gibbs Sampling, , https://en.wikipedia.org/wiki/Gibbs_sampling, (2017). Retrieved 2017-2-18 from; (2017) Metropolis-Hastings Algorithm, , https://en.wikipedia.org/wiki/Metropolis-Hastings_algorithm, (2017). Retrieved 2017- 2-18 from; Xie, Q., Memon, A.M., Studying the Characteristics of a ""Good"" GUI Test Suite (2006) 17th International Symposium on Software Reliability Engineering (ISSRE 2006), pp. 159-168. , http://dx.doi.org/10.1109/ISSRE.2006.45, 7-10 November 2006, Raleigh, North Carolina, USA; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) Fundamental Approaches to Software Engineering - 16th International Conference, FASE 2013, Held As Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, pp. 250-265. , Rome, Italy, March 16-24, 2013. Proceedings; Zhou, B., Okamura, H., Dohi, T., Markov chain monte carlo random testing (2010) Advances in Computer Science and Information Technology, AST/UCMA/ISA/ACN 2010 Conferences, pp. 447-456. , Miyazaki, Japan, June 23-25, 2010. Joint Proceedings; Zhou, B., Okamura, H., Dohi, T., Application of markov chain monte carlo random testing to test case prioritization in regression testing (2012) IEICE Transactions, 95 D (9), pp. 2219-2226. , 2012; Zhou, B., Okamura, H., Dohi, T., Enhancing performance of random testing through markov chain monte carlo methods (2013) IEEE Trans. Computers, 62 (1), pp. 186-192. , 2013; Zhu, H., Hall, P.A.V., May, J.H.R., Software unit test coverage and adequacy (1997) ACM Comput. Surv, 29 (4), pp. 366-427. , Dec. 1997","Pu, G.; School of Computer Science and Software Engineering, China; email: ggpu@sei.ecnu.edu.cn","Zisman A.Bodden E.Schafer W.van Deursen A.","Special Interest Group on Software Engineering (ACM SIGSOFT)","Association for Computing Machinery","11th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2017","4 September 2017 through 8 September 2017",,130154,,9781450351058,,,"English","Proc ACM SIGSOFT Symp Found Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-85030779618
"Jiang B., Zhang Y., Chan W.K., Zhang Z.","56727207300;57211360393;55471383000;55721906300;","Which factor impacts GUI traversal-based test case generation technique most? A controlled experiment on android applications",2017,"Proceedings - 2017 IEEE International Conference on Software Quality, Reliability and Security, QRS 2017",,, 8009905,"21","31",,1,"10.1109/QRS.2017.12","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029449498&doi=10.1109%2fQRS.2017.12&partnerID=40&md5=a0539d2c8e1608f4b61193c150490664","School of Computer Science and Engineering, Beihang University, Beijing, China; Department of Computer Science, City University of Hong Kong, Hong Kong, Hong Kong; State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China","Jiang, B., School of Computer Science and Engineering, Beihang University, Beijing, China; Zhang, Y., School of Computer Science and Engineering, Beihang University, Beijing, China; Chan, W.K., Department of Computer Science, City University of Hong Kong, Hong Kong, Hong Kong; Zhang, Z., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China","There are many research works on automated GUI traversal-based test case generation techniques for Android application. However, the effect of different factors used in a GUI traversal algorithm has not been systematically explored. In this work, we report a controlled experiment on 33 real-world applications to expose their real failures to systematically study three major factors that are commonly observed in testing tools for this class of applications. They include the notion of GUI state equivalence, the state search (or exploration) strategy, and the amount of time to wait between two input events. Our experimental results clearly show that different notions of GUI state equivalences have significantly different effects on failure detection rate and code coverage, randomized search is comparable to systematic search, and different choices of waiting time strategies do not make significant differences in terms of testing effectiveness. We also report other interesting results in this paper. © 2017 IEEE.","Android applications; Automatic testing; GUI traversal; Test case generation","Automatic testing; Computer software selection and evaluation; Graphical user interfaces; Software reliability; Android applications; Controlled experiment; Different effects; State equivalences; Systematic searches; Test case generation; Testing effectiveness; Traversal algorithms; Android (operating system)",,,,,"MJ-Y-2012-07

11200015, 11201114, 11214116

National Natural Science Foundation of China, NSFC: 61379045

State Key Laboratory of Computer Science, SKLCS: SYSKF1608","† Correspondence Author * This research is supported in part by the Key Research Fund of the MIIT of China (project no. MJ-Y-2012-07), the Research Grants Council of HKSAR (project nos. 11201114, 11200015, 11214116), an open project from the State Key Laboratory of Computer Science (project no. SYSKF1608), and the National Natural Science Foundation of China (project no. 61379045).",,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar-A tool for automated model-based testing of mobile apps (2014) IEEE Software, 32 (5), p. 1. , vol. PP 99; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering (FSE2012, pp. 591-5911. , NY, USA: ACM; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA2013, 2013, pp. 641-660. , New York, NY, USA: ACM; Au, K.W.Y., Zhou, Y.F., Huang, Z., Lie, D., P. Scout: Analyzing the android permission specification (2012) Proceedings of ACM Conference on Computer and Communications Security (CCS2012, pp. 217-228; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA2013, 2013, pp. 623-640. , New York, NY, USA: ACM; Crussell, J., Gibler, C., Chen, H., Attack of the clones: Detectingcloned applications on android markets (2012) Proceedings of European Symposium on Research in Computer Security ( ESORICS2012), 81(13):2454-2456; Egele, M., Kruegel, C., Kirda, E., Vigna, G., Pios: Detectingprivacy leaks in ios applications (2011) Proceedings of National Down Syndrome Society (NDSS2011; Enck, W., Gilbert, P., Chun, B.-G., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N., Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones (2010) Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation (OSDI2010), 2010, pp. 1-6. , Berkeley, CA, USA; Gaudel, M.C., Testing can be formal, too (1995) Tapsoft '95: Theory and Practice of Software Development, Lecture Notes in Computer Science Number 915, pp. 82-96. , P.D. Mosses M. Nielsen, M.I. Schwartzbach (Eds, Springer-Verlag, Heidelberg; Gorla, A., Tavecchia, I., Gross, F., Zeller, A., Checking app behavior against app descriptions (2014) Proceedings of the 36th International Conference on Software Engineering (ICSE2014, 2014, pp. 1025-1035. , New York, NY, USA ACM, June; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable ui-Automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services ( MobiSys2014, 2014, pp. 204-217. , New York, NY, USA ACM; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test (AST 2011, pp. 77-83. , New York, NY, USA ACM; Hu, C., Neamtiu, I., (2013) Testing of Android Apps in Proceedings of ACM Object-Oriented Programming, Systems, Languages & Applications (OOPSLA2013; Kechagia, M., Mitropoulos, D., Spinellis, D., Charting the api minefield using software telemetry data (2014) Empirical Software Engineering (ESE2014, pp. 1-46; Li, X., Jiang, Y., Liu, Y., Xu, C., Ma, X., Lu, J., User guided automation for testing mobile apps (2014) Proceedings of the 21st Asia-Pacific Software Engineering Conference (APSEC 2014, pp. 27-34. , Jeju, Korea, Dec; Li, Z., Harman, M., Hierons, R.M., Search algorithms for regression test case prioritization, in (2007) IEEE Transactions on Software Engineering, 33 (4), pp. 225-237; Liu, B., Nath, S., Govindan, R., Liu, J., Decaf: Detecting and characterizing ad fraud in mobile apps (2014) Proceedings of the National Spatial Data Infrastructure (NSDI2014, pp. 57-70; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013, 2013, pp. 224-234. , New York, NY, USA ACM; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for android applications (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis (ISSTA2016, pp. 94-105. , ACM, New York, NY, USA; Mathur, A.P., (2008) Foundations of Software Testing, , Pearson Education India; Memon, A., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE2003), 2003, p. 260. , Washington, DC, USA IEEE Computer Society; Myers, G.J., Sandler, C., Badgett, T., (2011) The Art of Software Testing, pp. 7-8. , John Wiley & Sons; Octeau, D., Jha, S., McDaniel, P., Retargeting android applications to Java bytecode (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering (FSE2012, 2012, pp. 61-611. , New York, NY, USA: ACM; Rakesh, R., Rabins, P., Chandra, M.S., Review of search based techniques in software testing (2012) International Journal of Computer Applications (IJCA2012, 51 (6), pp. 42-45; Shauvik, R.C., Alessandra, G., Alessandro, Oo., Automated test input generation for android: Are we there yet? (2015) Proceedings of 30th IEEE/ ACM International Conference on Automated Software Engineering (ASE2015, pp. 429-440. , Lincoln, Nebraska, USA; Yang, K., Zhuge, J., Wang, Y., Zhou, L., Duan, H., 2014 Intentfuzzer: Detecting capability leaks of android applications (2014) Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security (Asia CCS2014), pp. 531-536. , ACM, NY, USA; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) Software Engineering (TSE2002 IEEE Transactions on, 28 (2), pp. 183-200; Android, , http://www.android.com, last access on Jan 2017; Android Uiautomator, , http://developer.android.com/tools/help/uiautomator/index.html; The Number of Applications in Google Play, , https://www.appbrain.com/stats/number-of-Android-Apps, AppBrain; Emma, , http://emma.sourceforge.net/; (2015) Gartner, , http://www.199it.com/archives/408226.html, , last access on November28; Monkeyrunner, , http://www.androiddoc.com/tools/help/monkeyrunner-concepts.html; Robotium, , https://github.com/RobotiumTech/robotium; Software Testing Research Survey Bibliography, , http://web.engr.illinois.edu/~taoxie/testingresearchsurvey.htm; The Monkey UI Android Testing Tool, , http://developer.android.com/tools/help/monkey.html","Zhang, Y.; School of Computer Science and Engineering, China; email: zhangyaoyue@buaa.edu.cn",,"","Institute of Electrical and Electronics Engineers Inc.","17th IEEE International Conference on Software Quality, Reliability and Security, QRS 2017","25 July 2017 through 29 July 2017",,129990,,9781538605929,,,"English","Proc. - IEEE Int. Conf. Softw. Qual., Reliab. Secur., QRS",Conference Paper,"Final","",Scopus,2-s2.0-85029449498
"Yan J., Yan J., Wu T., Zhang J.","56415455000;57191229706;55371260300;57219348144;","Widget-sensitive and back-stack-aware GUI exploration for testing android apps",2017,"Proceedings - 2017 IEEE International Conference on Software Quality, Reliability and Security, QRS 2017",,, 8009907,"42","53",,7,"10.1109/QRS.2017.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029407423&doi=10.1109%2fQRS.2017.14&partnerID=40&md5=dfedd01ef0e1b4f4c4a3f3ad29dfb1fd","State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China; Technology Center of Software Engineering, Institute of Software, Chinese Academy of Sciences, China; University of Chinese, Academy of Sciences, China","Yan, J., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, Technology Center of Software Engineering, Institute of Software, Chinese Academy of Sciences, China, University of Chinese, Academy of Sciences, China; Yan, J., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, University of Chinese, Academy of Sciences, China; Wu, T., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, University of Chinese, Academy of Sciences, China; Zhang, J., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, China, University of Chinese, Academy of Sciences, China","GUI exploration is a widely adopted technique to test GUI programs, which traverses the elements of screens during the user interaction and simultaneously constructs the GUI model to describe window transitions. Specific to Android apps, an elaborate GUI model should take Android characteristics into consideration. We propose a GUI exploration approach that dynamically acquires the information of these characteristics, such as the status of widgets and arrangement of the back stack. We attach this information to the window transition graph and form a new model called LATTE (LAbeled Transition graph with sTack and widgEt). To balance the accuracy and size of model, we introduce a metric 'state similarity' to merge similar states. We perform experiments on 20 real-world apps to test them and construct their LATTE models. The investigation indicates that our systematic exploration approach with regard to the Android characteristics covers more program behaviors, and the generated model can be reused to direct the further testing. © 2017 IEEE.","Android Application; Dynamic Modeling; GUI Exploration; Test Generation","Computer software selection and evaluation; Dynamic models; Graphical user interfaces; Software reliability; Software testing; Android applications; Android apps; Labeled transitions; Program behavior; Systematic exploration; Test generations; Transition graphs; User interaction; Android (operating system)",,,,,"2014CB340701

National Natural Science Foundation of China, NSFC: 61672505","The authors would like to thank the anonymous reviewers for their helpful comments and suggestions. This work is supported by National Natural Science Foundation of China (Grant No. 61672505) and the National Key Basic Research (973) Program of China (Grant No. 2014CB340701) as well as the CAS/SAFEA International Partnership Program for Creative Research Teams.",,"ActivityInstrumentationTestCase2, , http://developer.Android.com/reference/Android/test/ActivityInstrumentationTestCase2.html, Android developers; Back Stack, , http://developer.Android.com/guide/components/tasks-And-back-stack.html, Android developers; Launch Mode, , http://developer.Android.com/guide/topics/manifest/activity-element.html#lmode, Android developers; Android Developers. Ui/Application Exerciser Monkey, , http://developer.Android.com/tools/help/monkey.html; Apktool, , ibotpeaches.github.io/Apktool/; Emma, , http://emma.sourceforge.net; F-Droid, , https://f-droid.org; Robotium, , http://code.google.com/p/robotium/, Google code; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) ICST, 2011, pp. 252-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Memon, A.M., Using gui ripping for automated testing of android applications (2012) ASE, 2012, pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) SIGSOFT/FSE, 2012, p. 59; Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Traon, Y.L., McDaniel, P., Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-Aware taint analysis for android apps (2014) PLDI, 2014, p. 29; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) OOPSLA 2013, Part of SPLASH 2013, pp. 641-660; Baek, Y.M., Bae, D., Automated model-based android gui testing using multi-level gui comparison criteria (2016) ASE, 2016, pp. 238-249; Choi, W., Necula, G.C., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) OOPSLA 2013, Part of SPLASH 2013, pp. 623-640; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) ASE 2015, pp. 429-440; Galindo, J.A., Turner, H.A., Benavides, D., White, J., Testing variability-intensive systems using automated analysis: An application to android (2016) Software Quality Journal, 24 (2), pp. 365-405; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., Puma: Programmable ui-Automation for large-scale dynamic analysis of mobile apps (2014) MobiSys, 2014, pp. 204-217; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) AST 2011, pp. 77-83; Jensen, C.S., Prasad, M.R., Møller, A., (2013) Automated Testing with Targeted Event Sequence Generation, 2013, pp. 67-77; Li, L., Bartel, A., Bissyandé, T.F., Klein, J., Traon, Y.L., Arzt, S., Rasthofer, S., Mc-Daniel, P., Iccta: Detecting inter-component privacy leaks in android apps (2015) ICSE 2015, pp. 280-291; Li, X., Jiang, Y., Liu, Y., Xu, C., Ma, X., Lu, J., User guided automation for testing mobile apps (2014) APSEC 2014, pp. 27-34; Liu, J., Wu, T., Deng, X., Yan, J., Zhang, J., Insdal: A safe and extensible instrumentation tool on dalvik bytecode for android applications (2017) SANER 2017, pp. 502-506; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) ESEC/FSE 2013, pp. 224-234; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., A whitebox approach for automated security testing of android applications on the cloud (2012) AST 2012, pp. 22-28; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in gui testing of android applications (2016) ICSE 2016, pp. 559-570; Song, F., Touili, T., Model-checking for android malware detection (2014) APLAS 2014, pp. 216-235; Wu, T., Liu, J., Xu, Z., Guo, C., Zhang, Y., Yan, J., Zhang, J., Light-weight, inter-procedural and callbackaware resource leak detection for android apps (2016) IEEE Trans. Software Eng, 42 (11), pp. 1054-1076; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (2015) ASE 2015, pp. 658-668; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) ETAPS 2013, pp. 250-265; Zeng, X., Li, D., Zheng, W., Xia, F., Deng, Y., Lam, W., Yang, W., Xie, T., Automated test input generation for android: Are we really there yet in an industrial case? (2016) FSE 2016, pp. 987-992; Zhu, H., Ye, X., Zhang, X., Shen, K., A contextaware approach for dynamic gui testing of android applications (2015) COMPSAC 2015, pp. 248-253","Yan, J.; State Key Laboratory of Computer Science, China; email: yanjun@ios.ac.cn",,"","Institute of Electrical and Electronics Engineers Inc.","17th IEEE International Conference on Software Quality, Reliability and Security, QRS 2017","25 July 2017 through 29 July 2017",,129990,,9781538605929,,,"English","Proc. - IEEE Int. Conf. Softw. Qual., Reliab. Secur., QRS",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85029407423
"Klammer C., Ramler R.","24823007200;23095597800;","A Journey from Manual Testing to Automated Test Generation in an Industry Project",2017,"Proceedings - 2017 IEEE International Conference on Software Quality, Reliability and Security Companion, QRS-C 2017",,, 8004387,"591","592",,7,"10.1109/QRS-C.2017.108","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034416846&doi=10.1109%2fQRS-C.2017.108&partnerID=40&md5=1040405643cbb1daab3a1690d1fdaa9a","Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria","Klammer, C., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria","Test automation is essential in fast-paced agile de-velopment environments. The main goal is to speed up test execu-tion cycles and to reduce the effort involved in running tests manually. We took test automation one step further and applied test generation to a GUI-based application developed in a large industry project. The paper describes the transition from manual exploratory testing to automated GUI test generation. Key les-sons to be learned are: (1) the test automation pyramid proposed for agile development tends to underestimate the need for high-level GUI testing, (2) automated test generation does not reduce test effort but shifts it to writing test adapters and checks, and (3) the effort for analyzing results produced by generated tests limits the practical application of automated test generation. The report describes the successful application of test generation in a real-world industry project, but it also highlights several open issues to be addressed by future research on test automation. © 2017 IEEE.","GUI testing; industry experience report; test automation; test case generation; user interface testing","Automation; C (programming language); Computer software selection and evaluation; Graphical user interfaces; Software reliability; Software testing; Testing; User interfaces; GUI testing; Industry experience; Interface testings; Test Automation; Test case generation; Automatic test pattern generation",,,,,,"ACKNOWLEDGMENT This work has been funded in the frame of the COMET center SCCH (FFG #844597).",,"Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Improving test suites maintainability with the page object pattern: An industrial case study (2013) 6th International Conf. on Software Testing, Verification and Validation Workshops (ICSTW), IEEE; https://randoop.github.io/randoop/; Klammer, C., Ramler, R., Stummer, H., Harnessing automated test case generators for gui testing in industry (2016) 42th Euromicro Conf. on Software Engineering and Advanced Applications (SEAA), IEEE; Cohn, M., Succeeding with agile: Software development using Scrum (2010) Pearson Education",,,"IEEE Reliability Society","Institute of Electrical and Electronics Engineers Inc.","2017 IEEE International Conference on Software Quality, Reliability and Security Companion, QRS-C 2017","25 July 2017 through 29 July 2017",,129875,,9781538620724,,,"English","Proc. - IEEE Int. Conf. Softw. Qual., Reliab. Secur. Companion, QRS-C",Conference Paper,"Final","",Scopus,2-s2.0-85034416846
"Nurmuradov D., Bryce R.","57192655211;12645168200;","Caret-HM: Recording and replaying android user sessions with heat map generation using UI state clustering",2017,"ISSTA 2017 - Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis",,,,"400","403",,1,"10.1145/3092703.3098231","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026682079&doi=10.1145%2f3092703.3098231&partnerID=40&md5=8f28f03a9280edcaeccba80ea1fe1569","University of North Texas, Denton, TX  76201, United States","Nurmuradov, D., University of North Texas, Denton, TX  76201, United States; Bryce, R., University of North Texas, Denton, TX  76201, United States","The Caret-HM framework allows Android developers to record and replay user sessions and convert them into heatmaps. One advantage of our framework over existing solutions is that it allows developers to control the environment while simplifying the recording process by giving users access to their applications via a web browser. The heatmap generation using Android user sessions and clustering UI states is a unique feature of our framework. Heat maps allow developers to identify the usage of application features for testing and guiding business decisions. We provide a qualitative comparison to the existing solutions. © 2017 Association for Computing Machinery.","Android; Heat Map; Mobile; User Sessions; Web-based Android Emulator","Electronic document exchange; Software testing; Android; Heat maps; Mobile; User sessions; Web based; Android (operating system)",,,,,,,,"(2017) Gartner Says Worldwide Sales of Smartphones Grew 7 Percent in the Fourth Quarter of 2016, , http://www.gartner.com/newsroom/id/3609817, Gartner Inc., 2017, [Accessed: Mar. 26, 2017]; (2017) Smartphone OS Market Share, 2016, 2015, , http://www.idc.com/promo/smartphone-market-share/os, International Data Corporation, (2017), [Accessed: Mar. 26, 2017]; (2017) Google Play Store: Number of Apps. 2009-2017, , http://www.statista.com/statistics/266210/number-of-available-applications-in-the-google-play-store/, Statista GmbH, (2017), [Accessed: Mar. 26, 2017]; Wasserman, A.I., Software engineering issues for mobile application development (2010) FSE/SDP Workshop on Future of Software Engineering Research, pp. 397-400. , ACM; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) FSE, pp. 224-234. , ACM; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of Android apps (2014) FSE, pp. 599-609. , ACM; Mao, K., Harman, M., Jia, Y., Sapienz: Multi-objective automated testing for Android applications (2016) ISSTA, pp. 94-105. , ACM; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for Android (2013) ICSE, pp. 72-81. , IEEE; Liu, C., Lu, C., Cheng, S., Chang, K., Hsiao, Y., Chu, W., Capture-replay testing for Android applications (2014) IS3C, pp. 1129-1132. , IEEE; Hu, Y., Azim, T., Neamtiu, I., Versatile yet lightweight record-and-replay for Android (2015) OOPSLA, pp. 349-366. , ACM; Halpern, M., Zhu, Y., Peri, R., Janapa Reddi, V., Mosaic: Cross-platform user-interaction record and replay for the fragmented Android ecosystem (2015) ISPASS, pp. 215-224. , IEEE; Linares-Vasquez, M., White, M., Bernal-Cardenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable gui-based execution scenarios (2015) MSR, pp. 111-122. , IEEE Press; Qin, Z., Tang, Y., Novak, E., Li, Q., Mobiplay: A remote execution based record-and-replay tool for mobile applications (2016) ICSE, pp. 571-582. , ACM; Levandowsky, M., Winter, D., Distance between sets (1971) Nature, 234 (5323), pp. 34-35. , 1971; Murtagh, F., Contreras, P., Algorithms for hierarchical clustering: An overview (2012) Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery, 2 (1), pp. 86-97. , 2012; Nurmuradov, D., Bryce, R., Do, H., Multilevel coarse-to-fine-grained prioritization for GUI and web applications (2016) International Workshop on Automating Test Case Design, Selection, and Evaluation, pp. 1-7. , ACM",,"Sen K.Bultan T.","ACM SIGSOFT;AppFolio;et al.;Google;Microsoft;Stinger Ghaffarian Technologies (SGT)","Association for Computing Machinery, Inc","26th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2017","10 July 2017 through 14 July 2017",,128773,,9781450350761,,,"English","ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.",Conference Paper,"Final","",Scopus,2-s2.0-85026682079
"Vos T.E.J., Aho P.","8980537100;35188652400;","Searching for the best test",2017,"Proceedings - 2017 IEEE/ACM 10th International Workshop on Search-Based Software Testing, SBST 2017",,, 7967912,"3","4",,1,"10.1109/SBST.2017.11","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027444581&doi=10.1109%2fSBST.2017.11&partnerID=40&md5=181802fd59cc0f91af5d046fe1be8ac9","Open Universiteit, Heerlen, Netherlands; VTT Technical Research Centre of Finland, Oulu, Finland","Vos, T.E.J., Open Universiteit, Heerlen, Netherlands; Aho, P., VTT Technical Research Centre of Finland, Oulu, Finland","Random testing has been controversial throughout the history. In the early 70s opinions about random testing were divided: Girard and Rault (1973) call it a valuable test case generation scheme [11]. This is confirmed by Thayer, Lipow and Nelson (1978) in their book on software reliability [21] they say it is the necessary final step in the testing activities. However, Glenford Myers (1979) in his seminal work on the art of Software Testing [18] denominates random testing as probably the poorest testing method. © 2017 IEEE.","Graphical user interface testing; Machine learning; Random testing; Search-based testing; Software test automation","Graphical user interfaces; Learning systems; Software reliability; Testing; User interfaces; Random testing; Search-based testing; Software test automation; Test case generation; Testing method; Software testing",,,,,,,,"Almenar, F., Esparcia-Alcázar, A.I., Martínez, M., Rueda, U., Automated testing of web applications with TESTAR-lessons learned testing the odoo tool (2016) Search Based Software Engineering-8th International Symposium, SSBSE 2016, pp. 218-223. , Raleigh, NC, USA, October 8-10, 2016, Proceedings; Arcuri, A., Briand, L., Adaptive random testing: An illusion of effectiveness? (2011) International Symposium on Software Testing and Analysis, ISSTA, pp. 265-275. , NY, USA, ACM; Arcuri, A., Iqbal, M.Z., Briand, L., Random testing: Theoretical results and practical implications (2012) IEEE TSE, 38 (2), pp. 258-277; Bauersfeld, S., De Rojas, A., Vos, T., Evaluating rogue user testing in industry: An experience report (2014) Research Challenges in Information Science (RCIS), 2014 IEEE Eighth International Conference on, pp. 1-10. , May; Bauersfeld, S., Vos, T., A reinforcement learning approach to automated gui robustness testing (2012) Fast Abstracts of the 4th Symposium on Search-Based Software Engineering (SSBSE), pp. 7-12. , IEEE; Bauersfeld, S., Vos, T.E.J., Condori-Fernández, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM '14, p. 4. , Torino, Italy, September 18-19, 2014; Böhme, M., Paul, S., A probabilistic analysis of the efficiency of automated software testing (2016) IEEE TSE, 42 (4), pp. 345-360; Chen, T.Y., Yu, Y.T., On the relationship between partition and random testing (1994) IEEE Trans. Softw. Eng., 20 (12), pp. 977-980. , Dec; Duran, J.W., Ntafos, S.C., An evaluation of random testing (1984) IEEE TSE, SE-10 (4), pp. 438-444. , July; Esparcia-Alcazar, A., Almenar, F., Martinez, M., Rueda, U., Vos, T., Q-learning strategies for action selection in the testar automated testing too (2016) 6th International Conferenrence on Metaheuristics and Nature Inspired Computing (META 2016), pp. 130-137; Girard, E., Rault, J.C., (1973) A Programming Technique for Software Reliability; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving guidirected test scripts (2009) Proceedings of the 31st International Conference on Software Engineering, ICSE '09, pp. 408-418. , Washington, DC, USA. IEEE Computer Society; Groote, J.F., Van Der Hofstad, R., Raffelsieper, M., On the random structure of behavioural transition systems (2016) Science of Computer Programming, 128, pp. 51-67; Gutjahr, W.J., Partition testing vs. Random testing: The influence of uncertainty (1999) IEEE Trans. Softw. Eng., 25 (5), pp. 661-674. , Sept; Hamlet, D., Taylor, R., Partition testing does not inspire confidence (1988) 1988. Proceedings. Second Workshop on Software Testing, Verification, and Analysis, pp. 206-215. , Jul; Kaner, C., (2002) Avoiding Shelfware: A Managers View of Automated Gui Testing, , http://www.kaner.com/pdfs/shelfwar.pdf; Koza, J.R., (1992) Genetic Programming: On the Programming of Computers by Means of Natural Selection, , MIT Press, Cambridge; Myers, G.J., (1979) Art of Software Testing, , John Wiley & Sons, Inc., New York, NY, USA; Singhera, Z.U., Horowitz, E., Shah, A.A., A graphical user interface (gui) testing methodology (2008) IJITWE, 3 (2), pp. 1-18; Staats, M., Whalen, M.W., Heimdahl, M.P., Programs, tests, and oracles: The foundations of testing revisited (2011) Proceedings of the 33rd International Conference on Software Engineering, ICSE '11, pp. 391-400. , New York, NY, USA. ACM; Thayer, T.A., Lipow, M., Nelson, E.C., (1978) Software Reliability, , North-Holland Pub. Co, Amsterdam; Tsoukalas, M.Z., Duran, J.W., Ntafos, S.C., On some reliability estimation problems in random and partition testing (1993) IEEE Trans. Softw. Eng., 19 (7), pp. 687-697. , July; Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TESTAR: Tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des., 6 (3), pp. 46-83. , July; Weyuker, E.J., Jeng, B., Analyzing partition testing strategies (1991) IEEE TSE, 17 (7), pp. 703-711. , Jul; Weyuker, E.J., Ostrand, T.J., Theories of program testing and the application of revealing subdomains (1980) IEEE TSE, SE-6 (3), pp. 236-246. , May",,,"","Institute of Electrical and Electronics Engineers Inc.","10th IEEE/ACM International Workshop on Search-Based Software Testing, SBST 2017","22 May 2017 through 23 May 2017",,129083,,9781538627891,,,"English","Proc. - IEEE/ACM Int. Workshop Search-Based Softw. Test., SBST",Conference Paper,"Final","",Scopus,2-s2.0-85027444581
"Rauf A., Ramzan M.","57194106980;24721962000;","Parallel testing and coverage analysis for context-free applications",2017,"Cluster Computing","21","1",,"729","739",,2,"10.1007/s10586-017-1000-7","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054609009&doi=10.1007%2fs10586-017-1000-7&partnerID=40&md5=cb07c06b207e55a7a95b468175f2da0b","Department of Computer Science, College of Computer & Information Sciences, Al-Imam Mohammad Ibn Saud Islamic University (IMSIU), Riyadh, Saudi Arabia; Department of Computer Science, College of Computer Science, Saudi Electronic University, Riyadh, Saudi Arabia","Rauf, A., Department of Computer Science, College of Computer & Information Sciences, Al-Imam Mohammad Ibn Saud Islamic University (IMSIU), Riyadh, Saudi Arabia; Ramzan, M., Department of Computer Science, College of Computer Science, Saudi Electronic University, Riyadh, Saudi Arabia","Software testing being one of the major phases of the software development life cycle is critical in delivering reliable software products. Traditional manual GUI testing has severe limitations like insufficient test coverage, labor intensiveness, complexity involved and cost ineffectiveness. “How much testing is enough or sufficient?” still remains a challenging question. Coverage analysis helps to guide the test engineers regarding test coverage and is used extensively to determine the effectiveness of selected testing methodology. The problems mentioned above related to manual GUI testing prompted the need for automation of GUI testing and coverage analysis. With the rapid emergence of GUI based context free applications, automated testing tools seems less effective. Recently, it has been learnt that concurrent and distributed machines based cluster can be used to reduce the required effort to test GUI in context of time. Proposed system use two different evolutionary algorithms concurrently to gain multiple objectives, based on the fitness functions of maximization of GUI test path coverage (measured as the number of events in an event sequence tested by a particular test case) and simultaneously minimizing the number of test cases. For coverage analysis, two of the very well-known multi objective algorithms; NSGA II and MOPSO from evolutionary domain have been employed. Experiments results of coverage analysis show that accuracy to the tune of 85% was achieved in MOPSO and NSGA II. This high level of accuracy is an indicator of usefulness of proposed fitness function. Both algorithms execute more than 90% of test paths. © Springer Science+Business Media New York 2017.","Context free applications testing; Coverage analysis; GUI testing; NSGA-II; Parallel testing; Test automation","Automation; Computer aided software engineering; Evolutionary algorithms; Graphical user interfaces; Life cycle; Multiobjective optimization; Software design; Testing; Context-free; Coverage analysis; GUI testing; NSGA-II; Parallel testing; Test Automation; Software testing",,,,,,,,"Ng, S.P., Murnane, T., Reed, K., Grant, D., Chen, T.Y., A preliminary survey on software testing practices in Australia (2004) Proceedings, 2004, pp. 116-125; Emer, M.C.F.P., Vergilio, S.R., Selection and evaluation of test data based on genetic programming (2003) Softw. Qual. J, 11 (2), pp. 167-186; Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) Companion of the 30Th International Conference on Software Engineering, , ACM, New York; http://www.apple.com/downloads/macosx/development_tools/impromptu.html, Accessed 8 March 2015; Rauf, A., Aleisa, E.A., PSO based automated test coverage analysis of event driven systems (2015) Intell. Autom. Soft Comput, 21 (4), pp. 491-502; Rauf, A., Evolutionary based automated coverage analysis for GUI testing (2010) International Conference on Contemporary Computing, , Springer, Berlin; Coello, C.A.C., Evolutionary multi-objective optimization: A historical view of the field (2006) IEEE Comput. Intell. Mag, 1 (1), pp. 28-36; Wegener, J., Testing real-time systems using genetic algorithms (1997) Softw. Qual. J, 6 (2), pp. 127-135; Korel, B., Automated software test data generation (1990) IEEE Trans. Softw. Eng, 16 (8), pp. 870-879; McMinn, P., The species per path approach to search based test data generation (2006) Proceedings of the 2006 International Symposium on Software Testing and Analysis, , ACM, New York; Tonella, P., Evolutionary testing of classes (2004) ACM SIGSOFT Software Engineering Notes, 29, 4p. , ACM, New York; Pargas, R.P., Harrold, M.J., Peck, R.R., Test-data generation using genetic algorithms (1999) Softw. Test.Verif.Reliab., 9 (4), pp. 263-282; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, , ACM, New York; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the 11Th International Symposium on Software Reliability Engineering, 2000, , ISSRE 2000. IEEE, New York; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng, 31 (10), pp. 884-896; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) Ieeetrans. Softw. Eng, 27 (2), pp. 144-155; Memon, A.M., An event-flowmodel of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab, 17 (3), pp. 137-158; Windisch, A., Wappler, S., Wegener, J., Applying particle swarm optimization to software testing (2007) Proceedings of the 9Th Annual Conference on Genetic and Evolutionary Computation, , ACM, New York; Hla, K.H.S., Choi, Y.S., Park, J.S., Applying particle swarm optimization to prioritizing test cases for embedded real time software retesting (2008) IEEE 8Th International Conference on Computer and Information Technology Workshops, 2008, , CIT Workshops 2008. IEEE, New York; Singla, T., Kumar, A., Garhwal, S., Reducing mutation testing endeavor using the similar conditions for the same mutation operators occurs at different locations (2014) Appl. Math, 8 (5), pp. 2389-2393; Lu, Y., Development of an improved GUI automation test system based on event-flow graph (2008) 2008 International Conference on Computer Science and Software Engineering, 2. , IEEE, New York; Lakhotia, K., Harman, M., McMinn, P., Amulti-objective approach to search-based test data generation (2007) Proceedings of the 9Th Annual Conference on Genetic and Evolutionary Computation, , ACM, New York; Yoo, S., Harman, M., Pareto efficient multi-objective test case selection (2007) Proceedings of the 2007 International Symposium on Software Testing and Analysis, , ACM, New York; Langdon, W.B., Harman, M., Jia, Y., Multi objective higher order mutation testing with genetic programming (2009) Testing: Academic and Industrial Conference-Practice and Research Techniques, 2009. TAIC PART’09, , IEEE, New York; Rauf, A., Automated GUI test coverage analysis using GA (2010) 2010 Seventh International Conference on Information Technology: New Generations (ITNG), , IEEE, New York; http://www.mofunzone.com/online_games/armada_assault.shtml, Accessed 13 June 2017; Coello, C.A.C., Lamont, G.B., (2004) Applications of Multi-Objective Evolutionary Algorithms, , World Scientific, Singapore; Coello, C.A.C., Theoretical and numerical constraint-handling techniques used with evolutionary algorithms: A survey of the state of the art (2002) Comput. Methods Appl.Mech. Eng, 191 (11), pp. 1245-1287; David, A.V.V., Multiobjective Evolutionary Algorithms: Classifications, Analyses, and New Innovations, , PhD dissertation, Air Force Institute of Technology, Wright Patterson AFB, OH. Advisor(s) Gary B. Lamont. AAI9928483","Rauf, A.; Department of Computer Science, Saudi Arabia; email: armuhammad@imamu.edu.sa",,,"Springer New York LLC",,,,,13867857,,,,"English","Cluster Comput.",Article,"Final","",Scopus,2-s2.0-85054609009
"Hsu C., Lee S., Shieh S.W.","55844447600;57191494375;35616689300;","Adaptive Gestures for GUI Testing on Smartphones",2017,"IEEE Software",,,,"","",,,"10.1109/MS.2017.265095033","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023640195&doi=10.1109%2fMS.2017.265095033&partnerID=40&md5=87912d4ad8478ad8c20d433949b893b7",,"Hsu, C.; Lee, S.; Shieh, S.W.","Is the variety of smartphones really a blessing to users? How can software developers ensure the quality of their products within only 18 weeks of development? Is it possible to test a large number of device models within a short time period? Conventional methods extract the coordinates of touch events, and cannot easily adapt to different device models. In this paper, we propose a fast, automated, adaptive gesture testing method for a wide variety of smartphones. IEEE","Androids; D Software/Software Engineering; D.2 Software Engineering; D.2.14 Human Factors in Software Design; D.2.14.a User interfaces; D.2.5 Testing and Debugging; Graphical user interfaces; Humanoid robots; Mobile communication; Smart phones; Software testing","Anthropomorphic robots; Graphical user interfaces; Program debugging; Smartphones; Software design; Software engineering; Testing; User interfaces; Androids; D.2.5 Testing and Debugging; Human factors in software design; Humanoid robot; Mobile communications; Software/software engineering; Software testing",,,,,,,,,,,,"IEEE Computer Society",,,,,07407459,,IESOE,,"English","IEEE Software",Article in Press,"Article in Press","",Scopus,2-s2.0-85023640195
"Lin J.-W., Wang F., Chu P.","56129702700;12040862500;57194547083;","Using Semantic Similarity in Crawling-Based Web Application Testing",2017,"Proceedings - 10th IEEE International Conference on Software Testing, Verification and Validation, ICST 2017",,, 7927970,"138","148",,5,"10.1109/ICST.2017.20","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020718394&doi=10.1109%2fICST.2017.20&partnerID=40&md5=7b56e2407cdaba1323165482d7919afa","Dept. of Informatics, University of California, Irvine, United States; Dept. of Electrical Engineering, National Taiwan University, Taiwan; QNAP Inc., Taiwan","Lin, J.-W., Dept. of Informatics, University of California, Irvine, United States; Wang, F., Dept. of Electrical Engineering, National Taiwan University, Taiwan; Chu, P., QNAP Inc., Taiwan","To automatically test web applications, crawling-based techniques are usually adopted to mine the behavior models, explore the state spaces or detect the violated invariants of the applications. However, their broad use is limited by the required manual configurations for input value selection, GUI state comparison and clickable detection. In existing crawlers, the configurations are usually string-matching based rules looking for tags or attributes of DOM elements, and often application-specific. Moreover, in input topic identification, it can be difficult to determine which rule suggests a better match when several rules match an input field to more than one topic. This paper presents a natural-language approach based on semantic similarity to address the above issues. The proposed approach represents DOM elements as vectors in a vector space formed by the words used in the elements. The topics of encountered input fields during crawling can then be inferred by their similarities with ones in a labeled corpus. Semantic similarity can also be applied to suggest if a GUI state is newly discovered and a DOM element is clickable under an unsupervised learning paradigm. We evaluated the proposed approach in input topic identification with 100 real-world forms and GUI state comparison with real data from industry. Our evaluation shows that the proposed approach has comparable or better performance to the conventional techniques. Experiments in input topic identification also show that the accuracy of the rule-based approach can be improved by up to 22% when integrated with our approach. © 2017 IEEE.","GUI testing; Semantic similarity; Web application testing","Graphical user interfaces; Natural language processing systems; Semantics; Software testing; Vector spaces; Verification; Web crawler; Application specific; Automatically test; Conventional techniques; GUI testing; Rule-based approach; Semantic similarity; Topic identification; Web application testing; Semantic Web",,,,,,,,"Fard, A.M., Mesbah, A., Feedback-directed exploration of web applications to derive test models (2013) 2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE), pp. 278-287; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 224-234. , New York, NY, USA; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications. Pdf (2008) 2008 1st International Conference on Software Testing, Verification, and Validation, pp. 121-130; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) 10th Working Conference on Reverse Engineering, 2003. WCRE 2003. Proceedings, pp. 260-269; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Transactions on Software Engineering, 38 (1), pp. 35-53. , Jan; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 31-330. , Mar; Milani Fard, A., Mirzaaghaei, M., Mesbah, A., Leveraging existing tests in automated test generation for web applications (2014) Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, pp. 67-78. , New York, NY, USA; Singhal, A., Modern information retrieval: A brief overview (2007) IEEE Data Eng. Bull, 24 (4), pp. 35-43. , 192001; BeautifulSoup, , https://pypi.python.org/pypi/beautifulsoup4; Manning, C.D., Raghavan, P., Schütze, H., (2008) Introduction to Information Retrieval, , New York, NY, USA: Cambridge University Press; Duda, C., Frey, G., Kossmann, D., Matter, R., Zhou, C., AJAX crawl: Making AJAX applications searchable (2009) IEEE 25th International Conference on Data Engineering, 2009. ICDE '09, pp. 78-89; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , New York, NY, USA; Andrzejewski, D., Mulhern, A., Liblit, B., Zhu, X., Statistical debugging using latent topic models (2007) Proceedings of the 18th European Conference on Machine Learning, pp. 6-17. , Berlin, Heidelberg; Blei, D.M., Ng, A.Y., Jordan, M.I., Latent dirichlet allocation (2003) J. Mach. Learn. Res, 3, pp. 993-1022. , Mar; Keller, G., Warrack, B., (2003) Statistics for Management and Economics, , 6th ed. Pacific Grove, CA: Thomson/Brooks/Cole; (1999) HTML 4. 01 Specification, , http://www.w3.org/TR/html4/, Dec; Maletic, J.I., Marcus, A., Using latent semantic analysis to identify similarities in source code to support program understanding 12th IEEE International Conference on Tools with Artificial Intelligence, 2000 ( ICTAI 2000), pp. 46-53; Benedikt, M., Freire, J., Godefroid, P., VeriWeb: Automatically testing dynamic web sites (2002) International World Wide Web Conference (WWW), pp. 654-668. , Honolulu, HI; Schur, M., Roth, A., Zeller, A., Mining behavior models from enterprise web applications (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pp. 422-432. , New York, NY, USA; Alshahwan, N., Harman, M., Marchetto, A., Tiella, R., Tonella, P., Crawlability metrics for web applications (2012) Verification and Validation 2012 IEEE Fifth International Conference on Software Testing, pp. 151-160; DiGiuseppe, N., Jones, J.A., Concept-based failure clustering (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, pp. 291-294. , New York, NY, USA; DiGiuseppe, N., Jones, J.A., Semantic fault diagnosis: Automatic natural-language fault descriptions (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, pp. 231-234. , New York, NY, USA; Uek, R., Sojka, P., Software framework for topic modelling with large corpora (2010) Proceedings of the LREC 2010 Workshop on New Challenges for NLP Frameworks, pp. 45-50. , Valletta, Malta; Choudhary, S., Dincturk, M.E., Bochmann, G.V., Jourdan, G.-V., Onut, I.-V., Ionescu, P., Solving some modeling challenges when testing rich internet applications for security (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST), pp. 850-857; Friedberg, S.H., Insel, A.J., Spence, L.E., (2002) Linear Algebra, , 4th Edition, 4th edition. Upper Saddle River, N. J: Pearson; Lukins, S.K., Kraft, N.A., Etzkorn, L.H., Bug localization using latent Dirichlet allocation (2010) Information and Software Technology, 52 (9), pp. 972-990. , Sep; Choudhary, S.R., Prasad, M.R., Orso, A., CrossCheck: Combining crawling and differencing to better detect cross-browser incompatibilities in web applications (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST), pp. 171-180; Raghavan, S., Garcia-Molina, H., Crawling the hidden web (2001) Proceedings of the 27th International Conference on Very Large Data Bases, pp. 129-138. , San Francisco, CA, USA; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing web applications (2007) The 18th IEEE International Symposium on Software Reliability, 2007. ISSRE '07, pp. 117-126; Thummalapenta, S., Lakshmi, K.V., Sinha, S., Sinha, N., Chandra, S., Guided test generation for web applications (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 162-171. , Piscataway, NJ, USA; Selenium HQ, , http://seleniumhq.org/; UI/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html; Dallmeier, V., Pohl, B., Burger, M., Mirold, M., Zeller, A., WebMate: Web application test generation in the real world (2014) 2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 413-418; Garousi, V., Mesbah, A., Betin-Can, A., Mirshokraie, S., A systematic mapping study of web application testing (2013) Information and Software Technology, 55 (8), pp. 1374-1396. , Aug",,,"Aster;et al.;IEEE;IEEE Computer Society;Japan Software Testing Qualifications Board (JSTQB);Waseda University","Institute of Electrical and Electronics Engineers Inc.","10th IEEE International Conference on Software Testing, Verification and Validation, ICST 2017","13 March 2017 through 17 March 2017",,127845,,9781509060313,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85020718394
"Ramler R., Hoschek R.","23095597800;57197758953;","How to Test in Sixteen Languages? Automation Support for Localization Testing",2017,"Proceedings - 10th IEEE International Conference on Software Testing, Verification and Validation, ICST 2017",,, 7928013,"542","543",,3,"10.1109/ICST.2017.63","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020717781&doi=10.1109%2fICST.2017.63&partnerID=40&md5=9c6dfe3a43dbf438f60c6308a8b414dc","Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; OMICRON Electronics GmbH, Oberes Ried 1, Klaus, A-6833, Austria","Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Hoschek, R., OMICRON Electronics GmbH, Oberes Ried 1, Klaus, A-6833, Austria","Developing for a global market requires the internationalization of software products and their localization to different countries, regions, and cultures. Localization testing verifies that the localized software variants work, look and feel as expected. Localization testing is a perfect candidate for automation. It has a high potential to reduce the manual effort in testing of multiple language variants and to speed-up release cycles. However, localization testing is rarely investigated in scientific work. There are only a few reports on automation approaches for localization testing providing very little empirical results or practical advice. In this paper we describe the approach we applied for automated testing of the different localized variants of a large industrial software system, we report on the various bugs found, and we discuss our experiences and lessons learned. © 2017 IEEE.","Global software development; GUI testing; I18n; Internationalization; L10n; Localization","Automation; International trade; Program debugging; Software design; Verification; Global software development; GUI testing; I18n; Internationalization; L10n; Localization; Software testing",,,,,,,,"Kano, N., (2002) Developing International Software, , Microsoft Corp, 2nd Ed., Microsoft Press; Archana, J., Chermapandan, S.R., Palanivel, S., Automation framework for localizability testing of internationalized software (2013) Proc. of International Conference on Human Computer Interactions (ICHCI), IEEE Computer Society, pp. 1-6; Martinez, M., Esparcia, A.I., Rueda, U., Vos, T., Ortega, C., Automated localisation testing in industry with test (2016) Proc. of IFIP International Conference on Testing Software and Systems (ICTSS), pp. 241-248. , Springer LNCS 9976; Alameer, A., Mahajan, S., Halfond, W.G.J., Detecting and localizing internationalization presentation failures in web applications (2016) Proc. of International Conference on Software Testing, Verification and Validation (ICST), IEEE Computer Society, pp. 202-212; Awwad, A.A., Slany, W., Automated bi-directional languages localization testing for android apps with rich GUI Mobile Information Systems, 2016 (27), pp. 1-13. , Jan",,,"Aster;et al.;IEEE;IEEE Computer Society;Japan Software Testing Qualifications Board (JSTQB);Waseda University","Institute of Electrical and Electronics Engineers Inc.","10th IEEE International Conference on Software Testing, Verification and Validation, ICST 2017","13 March 2017 through 17 March 2017",,127845,,9781509060313,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-85020717781
"Moreira R.M.L.M., Paiva A.C., Nabuco M., Memon A.","25925193000;7102683763;55933421700;35599876500;","Pattern-based GUI testing: Bridging the gap between design and quality assurance",2017,"Software Testing Verification and Reliability","27","3", e1629,"","",,16,"10.1002/stvr.1629","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85014200245&doi=10.1002%2fstvr.1629&partnerID=40&md5=3dc037212567eb4ca3132e7a8700ad9c","INESC TEC and Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Department of Computer Science, University of Maryland, College Park, MD, United States","Moreira, R.M.L.M., INESC TEC and Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Paiva, A.C., INESC TEC and Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Nabuco, M., INESC TEC and Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Memon, A., Department of Computer Science, University of Maryland, College Park, MD, United States","Software systems with a graphical user interface (GUI) front end are typically designed using user interface (UI) Patterns, which describe generic solutions (with multiple possible implementations) for recurrent GUI design problems. However, existing testing techniques do not take advantage of this fact to test GUIs more efficiently. In this paper, we present a new pattern-based GUI testing (PBGT) approach that formalizes the notion of UI Test Patterns, which are generic test strategies to test UI patterns over their different implementations. The PBGT approach is evaluated via 2 case studies. The first study involves 2 fielded Web application subjects; findings show that PBGT is both practical and useful, as testing teams were able to find real bugs in a reasonable time interval. The second study allows deeper analysis by studying software subjects seeded with artificial faults; the findings show that PBGT is more effective than a manual model-based test case generation approach. Copyright © 2017 John Wiley & Sons, Ltd.","GUI testing; model-based GUI testing; pattern-based GUI testing; UI test patterns","Model checking; Program debugging; Quality assurance; Software testing; Testing; User interfaces; Generic solutions; Graphical user interfaces (GUI); GUI testing; Model-based test; Software systems; Test strategies; Testing technique; WEB application; Graphical user interfaces",,,,,,,,"Nyman, N., Using Monkey Test Tools (2000) Software Test. Qual. Eng. Mag., 2000-1, pp. 18-21; (2015), http://www.seleniumhq.org/projects/ide/, Accessed February 2015; Nedyalkova, S., Bernardino, J., Open source capture and replay tools comparison (2013) Proceedings of the International C* Conference on Computer Science and Software Engineering, pp. 117-119. , C3S2E '13, ACM, New York, NY, USA; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.M., Guitar: an innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105; Reza, H., Endapally, S., Grant, E., (2007) A model-based approach for testing gui using hierarchical predicate transition nets, pp. 366-370. , in, Information Technology, 2007. ITNG '07. Fourth International Conference on,, Las Vegas; Moreira, R., Paiva, A., Memon, A., (2013) A pattern-based approach for gui modeling and testing, pp. 288-297. , in, Software Reliability Engineering (ISSRE), 2013 IEEE 24th International Symposium on,, Pasadena, CA, USA; (2015) Model-based testing, , http://mit.bme.hu/~micskeiz/pages/modelbased_testing.html, Accessed December 2015; Moreira, R.M.L.M., Paiva, A.C.R., A GUI Modeling DSL for Pattern-Based GUI Testing - PARADIGM (2014) 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE), pp. 1-10. , LA Maciaszek, J Filipe, (eds.),, SciTePress, Lisbon, Portugal; Moreira, R.M.L.M., Paiva, A.C.R., Towards a pattern language for model-based gui testing (2014) Proceedings of the 19th European Conference on Pattern Languages of Programs, pp. 26:1-26:8. , EuroPLoP '14, ACM, New York, NY, USA; Nabuco, M., Paiva, A.C.R., Model-based test case generation for web applications (2014) Computational Science and its Applications ICCSA 2014, 8584, pp. 248-262. , B Murgante, S Misra, A. Rocha, C Torre, J Rocha, M Falco, D Taniar, B Apduhan, O Gervasi, (eds.),, Lecture Notes in Computer Science, Springer International Publishing, Guimaraes, Portugal; Arlt, S., Bertolini, C., Pahl, S., Schäf, M., Trends in Model-based GUI Testing (2012) Adv. Comput., 86, pp. 183-222; Li, K., Wu, M., (2006) Effective GUI Testing Automation: Developing an Automated GUI Testing Tool, , Wiley, Hoboken, NJ; Mussa, M., Ouchani, S., Alsammane, W., Hamou-Lhadj, A., (2009) A survey of model-driven testing techniques, pp. 167-172. , in, Quality Software, 2009. QSIC '09. 9th International Conference on,, Jeju; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann Publishers Inc., San Francisco, CA, USA; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage Criteria for GUI Testing (2001) In Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , ACM Press, Vienna, Austria; Kervinen, A., Maunumaa, M., Paakkönen, T., Katara, M., Model-based testing through a GUI (2006) In Proceedings of the 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005), number 3997 in Lecture Notes in Computer Science, pp. 16-31; Shehady, R., Siewiorek, D., (1997) A method to automate user interface testing using variable finite state machines, pp. 80-88. , in, Fault-Tolerant Computing, 1997. FTCS-27. Digest of Papers., Twenty-Seventh Annual International Symposium on,, Seattle, WA, USA; Miao, Y., Yang, X., (2010) An fsm based gui test automation model, pp. 120-126. , in, Control Automation Robotics Vision (ICARCV), 2010 11th International Conference on,, Singapore; Reza, H., Ogaard, K., Malge, A., A model Based Testing Technique to Test Web Applications Using Statecharts (2008) Proceedings of the Fifth International Conference on Information Technology: New Generations, pp. 183-188. , ITNG '08, IEEE Computer Society, Washington, DC, USA; (2013) Spec# - Microsoft Research, , http://research.microsoft.com/en-us/projects/specsharp/, [Accessed January, 2013]; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-Based Testing of Object-Oriented Reactive Systems with Spec Explorer (2008) Formal methods and testing, pp. 39-76. , RM Hierons, JP Bowen, M Harman, (eds.),, Lecture Notes in Computer Science, Springer, Berlin, April 21; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M., (2005) A Model-to-Implementation Mapping Tool for Automated Model-Based GUI Testing, pp. 450-464. , in, Manchester, UK; Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for gui modelling and testing - VAN4GUIM, pp. 104-111. , in, ICSOFT 2008 - Proceedings of the Third International Conference on Software and data Technologies, Volume SE/MUSE/GSDCA,, Porto, Portugal, August July 5; Elsaka, E., Moustafa, W., Nguyen, B., Memon, A., (2010) Using methods and measures from network analysis for gui testing, pp. 240-246. , in, Software Testing, VerificationValidation Workshops (ICSTW), 2010 Third International Conference on,, Paris; (2016) Welie.com - patterns in interaction design, , http://www.welie.com/patterns/index.php, Accessed March 2016; Cunha, M., Paiva, A.C.R., Ferreira, H., Abreu, R., Pettool: A pattern-based gui testing tool (2010) Software Technology and Engineering (ICSTE), 2010 2nd International Conference on, 1, pp. V1-202–V1–206; (2014) Cocoa bindings programming topics: Creating a master-detail interface, , https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaBindings/Tasks/masterdetail.html, Accessed April 2014; Moreira, R.M.L.M., Paiva, A.C.R., (2015) A novel approach using alloy in domain-specific language engineering, pp. 157-164. , in, Proceedings of the 3th International Conference on Model-Driven Engineering and Software Development - Modelsward,, Angers, Loire Valley, France; Jackson, D., (2011) Software Abstractions: Logic, Language, and Analysis, , 2nd Revised edition, MIT Press, London, England; Moreira, R.M.L.M., Paiva, A.C.R., Pbgt tool: An integrated modeling and testing environment for pattern-based gui testing (2014) Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, pp. 863-866. , ASE '14, ACM, New York, NY, USA; Steinberg, D., Budinsky, F., Paternostro, M., Merks, E., (2009) EMF: Eclipse Modeling Framework, , 2nd ed., Addison-Wesley Professional, Salt Lake City, Utah, USA; (2014) Selenium webdriver, , http://docs.seleniumhq.org/projects/webdriver/, Accessed March 2014; (2014) Sikuli script - home, , http://www.sikuli.org/, [Accessed April, 2014]; Young, M., Pezze, M., (2005) Software Testing and Analysis: Process, Principles and Techniques, , John Wiley & Sons, New York, USA; Tidwell, J., (2011) Designing Interfaces, , O'Reilly, Sebastopol, CA; (2012) Yahoo! Design Pattern Library, , http://developer.yahoo.com/ypatterns, [Accessed December, 2013]; (2009) Patternry Open - A Free Front-End Resource − Patternry, , http://patternry.com/patterns/, [Accessed January, 2014]; Toxboe, A., (2013) Design patterns, , http://ui-patterns.com/patterns/, [Accessed January, 2014]; van Welie, M., (2008) Interaction Design Pattern Library, , http://www.welie.com/patterns, [Accessed January, 2014]; (2008) Pattern Browser, , http://patternbrowser.org/code/pattern/pattern.php, [Accessed January, 2014]; Alexander, C., Ishikawa, S., Silverstein, M., (1977) A Pattern Language: Towns, Buildings, Construction, , Oxford University Press, Oxford; Gamma, E., Helm, R., Johnson, R., Vlissides, J.M., (1994) Design patterns: Elements of reusable object-oriented software, , 1st ed., Addison-Wesley Professional, Salt Lake City, Utah, USA; Martin, R.C., (2003) Agile Software Development: Principles, Patterns, and Practices, , Prentice Hall PTR, Upper Saddle River, New Jersey, USA; Meszaros, G., Doble, J., (1996) A Pattern Language for Pattern Writing, pp. 1-33. , in, The 3rd Pattern Languages of Programming Conference,, Monticello, Illinois; (2014) T distribution calculator, , http://stattrek.com/online-calculator/t-distribution.aspx, [Accessed March, 2014]; Raszka, R., (2011) Pttrns - Mobile User Interface Patterns, , http://pttrns.com/, [Accessed January, 2014]; (2014) Welcome to Facebook - Log In, Sign Up or Learn More, , http://www.facebook.com, [Accessed January, 2014]; (2014) mobile.de - Germany's Biggest Vehicle Marketplace Online. Search, Buy and Sell Used and New Vehicles, , http://www.mobile.de, [Accessed November, 2013]; (2014) Formula 1, motogp, gp2, gp3, f3 and indycar news, photos and much more at gpupdate.net, , http://www.gpupdate.net/en/search/, [Accessed March, 2014]; (2014) Telerik Mobile App Development Platform,.NET UI Controls, Web, Mobile, Desktop Development Tools, , www.telerik.com, [Accessed January, 2014]; Ostrand, T.J., Balcer, M.J., The category-partition method for specifying and generating fuctional tests (1988) Commun. ACM, 31 (6), pp. 676-686; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., Mcminn, P., An orchestrated survey of methodologies for automated software test case generation (2013) J. Syst. Softw., 86 (8), pp. 1978-2001; Yin, R.K., (2009) Case Study Research: Design and Methods, 5. , Sage, Thousand Oaks, CA, USA; Hung, S., Australian charts portal, , http://australian-charts.com, [Accessed November, 2013]; (2015) PBGT - Pattern Based GUI Testing wiki, , http://paginas.fe.up.pt/~apaiva/pbgtwiki/doku.php, [Accessed March, 2015]; Ma, Y.-S., Offutt, J., Kwon, Y.R., MuJava: an automated class mutation system (2005) Software Test. Verification Reliab., 15 (2), pp. 97-133; Madeyski, L., Orzeszyna, W., Torkar, R., Jozala, M., Overcoming the equivalent mutant problem: A systematic literature review and a comparative experiment of second order mutation (2014) IEEE Trans. Softw. Eng., 40 (1), pp. 23-42; (2014) Flash Player | Adobe Flash Player | Overview, , http://www.adobe.com/products/flashplayer.html, [Accessed January, 2014]; (2014) Microsoft Silverlight, , http://www.microsoft.com/silverlight/, [Accessed February, 2014]; Vilela, L., Paiva, A., (2014) Paradigm-cov: A multimensional test coverage analysis tool, pp. 1-7. , in, Information Systems and Technologies (CISTI), 2014 9th Iberian Conference on,, Barcelona; Costa, P., Paiva, A., Nabuco, M., (2014) Pattern based gui testing for mobile applications, pp. 66-74. , in, Quality of Information and Communications Technology (QUATIC), 2014 9th International Conference on the,, Guimaraes","Moreira, R.M.L.M.; INESC TEC and Department of Informatics Engineering, Portugal; email: pro08007@fe.up.pt",,,"John Wiley and Sons Ltd",,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Article,"Final","",Scopus,2-s2.0-85014200245
"Dias F., Paiva A.C.R.","57194029777;7102683763;","Pattern-Based Usability Testing",2017,"Proceedings - 10th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2017",,, 7899082,"366","371",,5,"10.1109/ICSTW.2017.65","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018423852&doi=10.1109%2fICSTW.2017.65&partnerID=40&md5=bac75746b4bcf38beed468726a38656f","FEUP, INESC TEC, Portugal","Dias, F., FEUP, INESC TEC, Portugal; Paiva, A.C.R., FEUP, INESC TEC, Portugal","Usability is a critical aspect of software systems because poor user experience can lead users to choose other software. One way to improve usability is through testing. But, usability testing is a challenge because, most of the times, it can not be accomplished without the presence of real users, which is complex and requires a lot of effort. However, there are some aspects and usability guidelines that can be tested automatically. This paper presents a test approach that defines generic test strategies (test patterns) to test usability guidelines (or best practices). It is an extension to previous work on testing functional aspects of web applications through the GUI (PBGT - Pattern Based GUI Testing). The main goal of this work is to be the first step in extending PBGT's PARADIGM language with usability testing patterns, so that it is possible to build test models from which usability tests can be generated and automatically executed over a website. This paper presents a new usability test pattern, called 'Reachability Test Pattern', which is validated in a case study performed over an academic software system available on the web. © 2017 IEEE.","GUI Testing; Pattern-Based Usability Testing; Software Testing; Test Patterns; Usability Testing","Automatic test pattern generation; Computer software; Graphical user interfaces; Testing; Usability engineering; Verification; Functional aspects; GUI testing; Reachability tests; Software systems; Test Pattern; Usability guidelines; Usability testing; Usability tests; Software testing",,,,,,,,"Moreira, L.R.M., Paiva, R.A.C., PBGT Tool: An integrated modeling and testing environment for pattern-based gui testing (2014) 29th IEEE/ACM International Conference on Automated Software Engineering (ASE 2014), , September 15-19, Västerås, Sweden; Moreira, R., Paiva, R.A.C., Memon, A., Pattern-based gui testing (2013) ISSRE-The 24th IEEE International Sympo-sium on Software Reliability Engineering, pp. 288-297; Moreira, M.L.R.M., Paiva, R.A.C., Towards a pattern language for model-based gui testing (2014) Proceedings of the 19th European Conference on Pattern Languages of Programs (EuroPLoP 2014), , Kloster Irsee in Bavaria, Germany, 9-13 July; Moreira, M.L.R.M., Paiva, R.A.C., A gui modeling DSL for pattern-based gui testing-paradigm (2014) 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE, pp. 28-30. , April, Lisbon, Portugal; Monteiro, T., Paiva, R.A.C., Pattern based gui testing modeling environment (2013) Fourth International Workshop on TESTing Techniques & Experimentation Benchmarks for Event-Driven Software-TESTBEDS, Co-located with the Sixth IEEE International Conference on Software Testing Verification and Validation, , March 18; Speicher, M., (2014) Ensuring Web Interface Quality Through Usability-Based Split Testing. Web Engineering: 14th International Conference, pp. 93-110. , ICWE 2014, Toulouse, France, July 1-4, 2014. Proceedings. S. Casteleyn, G. Rossi and M.Winckler. Cham, Springer International Publishing; https://www.iso.org/obp/ui/#iso:std:iso:9241:-210:ed-1:v1:enTermsandDefinitions.2.13, International Organization for Standardization (2010). ISO 9241-210: Ergonomics of Human-system Interaction-Part 210: Human-centered Design for Interactive Systems; Atterer, R., Wnuk, M., Schmidt, A., Knowing the users every move-user activity tracking for website usability evaluation and implicit interaction (2006) Proc. WWW; (2016), m-pathy.//www.m-pathy.com/cms, onlineonDecember; Carta, T., Patern'O, F., De Santana, V.F., (2011) Web Usability Probe: A Tool for Supporting Remote Usability Evaluation of Web Sites, 6949, pp. 349-357. , Campos, P., Graham, N., Jorge, J., Nunes, N., Palanque, P., Winckler, M. (eds.) INTERACT 2011, Part IV. LNCS,Springer, Heidelberg; (2016), WebTango: Automating Web Site Evaluation, http//webtango.Berkeley.edu, online on December; (2016), www.eyetracking.com/About-Us/What-Is-Eye-Tracking, onlineonDecember Eyetracking; (2016), www.crazyegg.com/overview, onlineonDecember Crazyegg:; (2016), Attrakdiff De/ //attrakdiff.On December O; (2016), https://www.optimizely.com/abtesting/, onlineonDecember; Nebeling, M., Speicher, M., Norrie, M.C., W3touch: Metrics-based web page adaptation for touch (2013) Proc. CHI; Cassino, R., Tucci, M., Vitiello, G., Rita francese empirical validation of an automatic usability evaluation method (2015) Journal of Visual Languages & Computing, 28, pp. 1-22. , June; http//webstandards.hhs.gov/guidelines, onlineonDecember2016 Usability Guidelines; http//sigarra.up.pt/up/en, onlineonDecember2016 Sigarra","Paiva, A.C.R.; FEUP, Portugal; email: apaiva@fe.up.pt",,"Aster;et al.;IEEE;IEEE Computer Society;Japan Software Testing Qualifications Board (JSTQB);Waseda University","Institute of Electrical and Electronics Engineers Inc.","10th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2017","13 March 2017 through 17 March 2017",,127387,,9781509066766,,,"English","Proc.- IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85018423852
"Paiva A.C.R., Vilela L.","7102683763;56340692300;","Multidimensional test coverage analysis: PARADIGM-COV tool",2017,"Cluster Computing","20","1",,"633","649",,4,"10.1007/s10586-017-0728-4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009485587&doi=10.1007%2fs10586-017-0728-4&partnerID=40&md5=522325d2ce16a8f48ba9ff5c5a1ab636","INESC TEC and Faculty of Engineering, University of Porto, Porto, Portugal","Paiva, A.C.R., INESC TEC and Faculty of Engineering, University of Porto, Porto, Portugal; Vilela, L., INESC TEC and Faculty of Engineering, University of Porto, Porto, Portugal","Currently, software tends to assume increasingly critical roles in our society so assuring its quality becomes ever more crucial. There are several tools and processes of software testing to help increase quality in virtually any type of software. One example is the so called model-based testing (MBT) tools, that generate test cases from models. Pattern Based Graphical User Interface Testing (PBGT) is an example of a MBT new methodology that aims at systematizing and automating the Graphical User Interface (GUI) testing process. It is supported by a Tool (PBGT Tool) which provides an integrated modeling and testing environment for crafting test models based on User Interface Test Patterns (UITP) using a GUI modeling Domain Specific Language (DSL) called PARADIGM. Most of the MBT tools have a configuration phase, where test input data is provided manually by the tester, which influences the quality of the test suite generated. By adding coverage analysis to MBT tools, it is possible to give feedback and help the tester to define the configuration data needed to achieve the most valuable test suite as possible and, ultimately, contribute for increasing the quality of the software. This paper presents a multidimensional test coverage analysis approach and tool (PARADIGM-COV), developed in the context of the PBGT project, that produces coverage information both over the PARADIGM model elements and during test case execution (to identify the parts of the model that were actually exercised). It also presents a case study illustrating the benefits of having multidimensional analysis and assessing the overall test coverage approach. © 2017, Springer Science+Business Media New York.","GUI testing; Model-based testing; Software testing; Test coverage analysis","Computer programming languages; Graphical user interfaces; Model checking; Modeling languages; Problem oriented languages; Quality control; User interfaces; Coverage analysis; Graphical user interfaces (GUI); GUI testing; Integrated modeling; Model based testing; Multi-dimensional analysis; Test coverage; Testing environment; Software testing",,,,,,,,"Weyuker, E.J., Axiomatizing software test data adequacy (1986) IEEE Trans. Softw. Eng., 12, pp. 1128-1138; El-Far, I.K., Whittaker, J.A., Model-based software testing (2002) Encyclopedia of Software Engineering, , Marciniak JJ, (ed), Wiley, New York; Eslamimehr, M.M., (2008) The survey of model based testing and industrial tools, , Master’s Thesis: Linköping University; Vilela, L., Paiva, A.C.R., PARADIGM-COV—a multimensional test coverage analysis tool (2014) CISTI 2014—9 Conferencia Ibrica de Sistemas y Tecnologas de Informacin, Barcelona, 18–21 Junio; Moreira, R.M.L.M., Paiva, A.C.R., A GUI modeling DSL for Pattern-Based GUI Testing PARADIGM (2014) Proceedings of the 8th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE), , Maciaszek LA, Filipe J, (eds), SciTePress, Lisbon; Batchu, R., Dandass, Y.S., Skjellum, A., Beddhu, M., MPI/FT: a model-based approach to low-overhead fault tolerant message-passing middleware (2004) Clust. Comput., 7 (4), pp. 303-315; Stankovski, V., Petcu, D., Developing a model driven approach for engineering applications based on mOSAIC (2014) Clust. Comput., 17 (1), pp. 101-110; Stobie, K., Model based testing in practice at Microsoft (2005) Electron. Notes Theor. Comput. Sci., 111, pp. 5-12; Grieskamp, W., Kicillof, N., Stobie, K., Braberman, V., Model-based quality assurance of protocol documentation: tools and methodology (2011) Softw. Test. Verif. Reliab., 21, pp. 55-71; Pretschner, A., Model-based testing (2005) Proceedings of 27th International Conference on Software Engineering, 2005 (ICSE 2005), pp. 722-723; Weißleder, S., Simulated satisfaction of coverage criteria on UML state machines (2010) Third International Conference on Software Testing, Verification and Validation (ICST), pp. 117-126; Coverage Simulator., , http://covsim.sourceforge.net/, Weißleder, S.: Accessed Oct 2016; Weißleder, S., Rogenhofer, T., Simulated restriction of coverage criteria on UML state machines (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 34-38; Weißleder, S., Test models and coverage criteria for automatic model-based test generation with UML state machines. PhD Thesis (2010) Humboldt-University Berlin; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-based testing of object-oriented reactive systems with spec explorer (2008) Formal Methods and Testing, p. 3976. , Hierons RM, Bowen JP, Harman M, (eds), Springer, Berlin; Shafique, M., Labiche, Y., (2010) A systematic review of model based testing tool support. Technical Report SCE-10-04. Department of Systems and Computer Engineering, , Carleton University, Ottawa; Huima, A., Implementing conformiq Qtronic (2007) Testing of Software and Communicating Systems, p. 112. , Petrenko A, Veanes M, Tretmans J, Grieskamp W, (eds), Springer, Berlin; Andrade, F.R., Faria, J.P., Paiva, A.C.R., Test generation from bounded algebraic specifications using alloy (2011) ICSOFT (2), pp. 192-200; Andrade, F.R., Faria, J.P., Lopes, A., Paiva, A.C.R., Specification-driven unit test generation for Java Generic Classes (2012) Integrated Formal Methods, pp. 296-311. , Derrick J, Gnesi S, Latella D, Treharne H, (eds), Springer, Berlin; IBM: Safety-related software development using a model-based testing workflow., , http://www.ibm.com/developerworks/rational/library/safety-related-software-development/index.html, Accessed Oct 2016; Moreira, R., Paiva, A.C.R., Memon, A., A pattern-based approach for GUI modelling and testing (2013) The 24th IEEE International Symposium on Software Reliability Engineering—ISSRE; Sacramento, C., Paiva, A.C.R., Web application model generation through reverse engineering and UI pattern inferring (2014) Proceedings of the 9th International Conference on the Quality of Information and Communications Technology—QUATIC, Guimares, Portugal, pp. 23-26; Nabuco, M., Paiva, A.C.R., Model-based test case generation for web applications (2014) 14th International Conference Computational Science and Its Applications—ICCSA 2014, pp. 248-262; Paiva, A.C.R., Faria, J., Tillmann, N., Vidal, R., A model-to-implementation mapping tool for automated model-based GUI testing (2005) 7th International Conference on Formal Engineering Methods—ICFEM, pp. 1-4","Paiva, A.C.R.; INESC TEC and Faculty of Engineering, Portugal; email: apaiva@fe.up.pt",,,"Springer New York LLC",,,,,13867857,,,,"English","Cluster Comput.",Article,"Final","",Scopus,2-s2.0-85009485587
"Yu Z., Xiao P., Wu Y., Liu B., Wu L.","36440645800;57203821329;55707376600;56188695500;55978341400;","A Novel Automated GUI Testing Echnology Based on Image Recognition",2017,"Proceedings - 18th IEEE International Conference on High Performance Computing and Communications, 14th IEEE International Conference on Smart City and 2nd IEEE International Conference on Data Science and Systems, HPCC/SmartCity/DSS 2016",,, 7828372,"144","149",,1,"10.1109/HPCC-SmartCity-DSS.2016.0031","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013645460&doi=10.1109%2fHPCC-SmartCity-DSS.2016.0031&partnerID=40&md5=a86ac9ae3a59e1b1ceff3c125a32018a","School of Reliability and System Engineering, Beihang University, Beijing, China; China Institute of Marine Technology and Economy, Beijing, China","Yu, Z., School of Reliability and System Engineering, Beihang University, Beijing, China; Xiao, P., School of Reliability and System Engineering, Beihang University, Beijing, China; Wu, Y., School of Reliability and System Engineering, Beihang University, Beijing, China; Liu, B., School of Reliability and System Engineering, Beihang University, Beijing, China; Wu, L., China Institute of Marine Technology and Economy, Beijing, China","Graphical user interface (GUI) is an important feature of current software, and testing for GUI is considered as the most efficient method to guarantee the quality of GUI. It is consensus that in industry and academia automated GUI testing approach and tool have been a great help in reducing time and cost in testing, especially regression testing. However, almost all existing automated GUI testing approaches are code intrusive, and strongly dependent on platform or system environment, which leads to the lack of general applicability of GUI testing tools. And most of these tools can only be used in specific software or software platforms. To deal with the challenge, this paper proposes a novel automated GUI testing based on image recognition, which is a non-intrusive and general GUI testing approach. A platform called Auto GUI Testing Platform (AGTP) based on our approach is developed. And a case study is proposed to demonstrate the validity and practicability of AGTP. © 2016 IEEE.","Automated GUI testing; Graphical user interface; Image recognition","Automation; Image recognition; Smart city; Software testing; User interfaces; Graphical user interfaces (GUI); GUI testing; Important features; Non-intrusive; Regression testing; Software platforms; System environment; Graphical user interfaces",,,,,,,,"Bauersfeld, S., Vos, T.E.J., GUITest: A Java library for fully automated GUI robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 330-333; Conroy, K.M., Grechanik, M., Hellige, M., Liongosari, E.S., Automatic test generation from gui applications for testing web services (2007) IEEE International Conference on Software Maintenance, pp. 345-354; Jaaskelainen, A., Katara, M., Kervinen, A., Maunumaa, M., Automatic GUI test generation for smartphone applications-an evaluation (2009) International Conference on Software Engineering-companion Volume, pp. 112-122; Li, P., Huynh, T., Reformat, M., Miller, J., A practical approach to testing GUI systems (2007) Empirical Software Engineering, 12, pp. 331-357; Mateo Navarro, P.L., Ruiz, D.S., Perez, G.M., A lightweight framework for dynamic GUI data verification based on scripts (2016) Software Testing Verification & Reliability, 26, pp. 95-118; Mirzaaghaei, M., Mesbah, A., DOM-based test adequacy criteria for web applications (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 71-81; Li, K., Wu, M., (2005) Effective GUI Test Automation : Developing An Automated GUI Testing Tool: SYBEX; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) International Conference on Mobile Systems, Applications, and Services, pp. 204-217; Chang, T.H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Sigchi Conference on Human Factors in Computing Systems, pp. 1535-1544; Bao, N.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21, pp. 65-105; Hartmann, J., Vieira, M., Foster, H., Ruder, A., A UML-based approach to system testing (2005) Innovations in Systems & Software Engineering, 1, pp. 12-24; Wu, Y., Chen, M.H., Offutt, J., UML-Based integration testing for component-based software (2003) COTS-Based Software Systems, Second International Conference, pp. 251-260; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification & Reliability, 17, pp. 137-157; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27, pp. 144-155; Pargas, R.P., Harrold, M.J., Peck, R.R., Testdata generation using genetic algorithms (2000) Software Testing Verification & Reliability, 9, pp. 263-282",,"Yang L.T.Chen J.","IEEE;IEEE Computer Society;IEEE Technical Committee on Scalable Computing (TCSC)","Institute of Electrical and Electronics Engineers Inc.","18th IEEE International Conference on High Performance Computing and Communications, 14th IEEE International Conference on Smart City and 2nd IEEE International Conference on Data Science and Systems, HPCC/SmartCity/DSS 2016","12 December 2016 through 14 December 2016",,126106,,9781509042968,,,"English","Proc. - IEEE Int. Conf. High Perform. Comput. Commun., IEEE Int. Conf. Smart City IEEE Int. Conf. Data Sci. Syst., HPCC/SmartCity/DSS",Conference Paper,"Final","",Scopus,2-s2.0-85013645460
"Subramanian S., Singleton T., Ariss O.E.","57217588073;57193350499;24829151700;","Class coverage GUI testing for Android applications",2017,"2016 International Conference on System Reliability and Science, ICSRS 2016 - Proceedings",,, 7815843,"84","89",,,"10.1109/ICSRS.2016.7815843","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013158337&doi=10.1109%2fICSRS.2016.7815843&partnerID=40&md5=35db49529e6487c0943181b2c70e744f","Dept of Computer Science and Mathematical Sciences, Pennsylvania State University, Harrisburg, PA, United States","Subramanian, S., Dept of Computer Science and Mathematical Sciences, Pennsylvania State University, Harrisburg, PA, United States; Singleton, T., Dept of Computer Science and Mathematical Sciences, Pennsylvania State University, Harrisburg, PA, United States; Ariss, O.E., Dept of Computer Science and Mathematical Sciences, Pennsylvania State University, Harrisburg, PA, United States","Mobile devices such as smartphones and tablets have become an integral part of a person's life. These portable devices opened up a new software market for mobile application development resulting in various applications from healthcare, banking till entertainment. Therefore, there is a need for mobile applications to be reliable and maintainable. In this paper we introduce an equivalent class based technique for testing the graphical user interface of Android applications. This technique is a specification based approach, in which test cases are generated based on the functionalities and the graphical user interface specification. For each possible user interface event a set of test cases are generated using equivalence class partitioning approach. Once the test cases are generated for the given application, the app is executed based on the generated test cases and results are compared with the other testing techniques. From the obtained results we can infer that our approach detects more bugs than other previous work. In addition, this approach helps in the generation of test cases at an early in the app development life cycle. © 2016 IEEE.","Android; Equivalence class partitioning; GUI testing; Specification based approach","Application programs; Equivalence classes; Graphical user interfaces; Life cycle; Mobile computing; Mobile devices; Mobile telecommunication systems; Reliability; Specifications; Testing; User interfaces; Android; Android applications; Equivalent class; GUI testing; Mobile application development; Mobile applications; Software markets; Testing technique; Android (operating system)",,,,,,,,"Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) 6th Int. Work. Autom. Softw. Test (AST 2011), pp. 77-83. , no. Section 4; https://www.netmarketshare.com/operating-system-marketshare.aspx?qprid=8&qpcustomd=1, Operating system market share; https://developer.android.com/training/index.html, Getting Started | Android Developers."" [Online]; Maji, A.K., Hao, K., Sultana, S., Bagchi, S., Characterizing failures in mobile OSes: A case study with android and symbian (2010) Proc.-Int. Symp. Softw. Reliab. Eng. ISSRE, pp. 249-258; Aidas Kasperavičius IFM-0/2, ""Equivalence Partitioning; Mahmood, R., Mirzaei, N., Malek, S., EvoDroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering-FSE, 2014, pp. 599-609; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Ase, pp. 429-440; Dallmeier, V., Burger, M., Orth, T., Zeller, A., WebMate: Generating test cases for web 2.0 (2013) Lect. Notes Bus. Inf. Process, 133, pp. 55-69. , LNBIP; Choudhary, S.R., Prasad, M.R., Orso, A., X-PERT: Accurate identification of cross-browser issues in web applications (2013) Proc.-Int. Conf. Softw. Eng., pp. 702-711; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 1-30; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Ase, pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGUITAR: Automated model-based testing of mobile apps (2015) IEEE Softw, 32 (5), pp. 53-59. , Sep; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Oopsla, pp. 641-660; Chen, J., Subramaniam, S., Specification-based testing for guibased applications (2002) Softw. Qual. J, 10 (3), pp. 205-224; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing 10th Working Conference on Reverse Engineering, 2003. WCRE 2003. Proceedings., pp. 260-269; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Softw. Reliab. Eng. 2000. ISSRE 2000. Proceedings. 11th Int. Symp., pp. 110-121; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines Proceedings of IEEE 27th International Symposium on Fault Tolerant Computing, pp. 80-88; Mirzaei, N., Garcia, J., Bagheri, H., Sadeghi, A., Malek, S., Reducing combinatorics in GUI testing of android applications (2016) Proc. 38th Int. Conf. Softw. Eng.-ICSE '16, pp. 559-570; Qin, Z., Tang, Y., Novak, E., Li, Q., MobiPlay (2016) Proceedings of the 38th International Conference on Software Engineering-ICSE '16, pp. 571-582; Gomez, L., Millstein, T., (2013) RERAN: Timing-And Touch-Sensitive Record and Replay for Android, pp. 72-81; Halpern, M., Zhu, Y., Peri, R., Reddi, V.J., Mosaic: Crossplatform user-interaction record and replay for the fragmented android ecosystem (2015) 2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS), pp. 215-224; Tappenden, A.F., Miller, J., Random testing (2009) IEEE Trans. Reliab, 58 (4), pp. 619-633; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proc. 2013 9th Jt. Meet. Found. Softw. Eng.-ESEC/FSE, 2013, p. 224; https://developer.android.com/studio/test/monkey.html, UI/Application Exerciser Monkey | Android Studio; Ziade, H., Ayoubi, R., Velazco, R., A survey on fault injection techniques (2004) Int. Arab J. Inf. Technol, 1 (2), pp. 171-186; https://developer.android.com/studio/command-line/logcat.html, logcat Command-line Tool | Android Studio; https://f-droid.org/, F-Droid-Free and Open Source Android App Repository",,,"","Institute of Electrical and Electronics Engineers Inc.","2016 International Conference on System Reliability and Science, ICSRS 2016","15 November 2016 through 18 November 2016",,125950,,9781509032778,,,"English","Int. Conf. Syst. Reliab. Sci., ICSRS - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-85013158337
"Ramler R., Hoschek R.","23095597800;57197758953;","Process and tool support for internationalization and localization testing in software product development",2017,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10611 LNCS",,,"385","393",,1,"10.1007/978-3-319-69926-4_27","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034585690&doi=10.1007%2f978-3-319-69926-4_27&partnerID=40&md5=585f6b3b861de0826d4d12ebcdb5b4ee","Software Analytics and Evolution, Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, 4232, Austria; OMICRON Electronics GmbH, Oberes Ried 1, Klaus, 6833, Austria","Ramler, R., Software Analytics and Evolution, Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, 4232, Austria; Hoschek, R., OMICRON Electronics GmbH, Oberes Ried 1, Klaus, 6833, Austria","Software globalization is an inevitable step for many companies. Developing for a global market requires the internationalization of software products and their localization to different countries, regions, and cultures. Internationalization and localization testing verifies that localized variants of the software product work, look and feel as expected. The highly repetitive task of testing of multiple language variants makes localization testing a perfect candidate for automation with a high potential to reduce the involved human effort and to speed-up release cycles. However, there is surprisingly little support for localization testing by existing test automation tools. Furthermore, there are only few empirical results or practical insights available as the topic is rarely addressed in the scientific literature. In this paper we describe the process and tools applied for automated testing of the different localized variants of a large commercial software product, we report on the issues detected with automated localization tests, and we discuss our experiences and lessons learned. © Springer International Publishing AG 2017.","GUI testing; I18N; Internationalization; Internationalization testing; L10N; Localization; Localization testing; Multilingual software","Automation; International trade; Process engineering; GUI testing; I18N; Internationalization; L10N; Localization; Software testing",,,,,"Bundesministerium für Wissenschaft, Forschung und Wirtschaft, BMWFW: FFG 844597

Österreichische Forschungsförderungsgesellschaft, FFG

Bundesministerium für Verkehr, Innovation und Technologie, BMVIT","Acknowledgments. This research has been supported by the Austrian Research Promotion Agency, the Austrian Ministry for Transport, Innovation and Technology, the Federal Ministry of Science, Research and Economy, and the Province of Upper Austria in the frame of the COMET center SCCH (FFG 844597).",,"Alameer, A., Halfond, W.G.J., An empirical study of internationalization failures in the web (2016) International Conference on Software Maintenance and Evolution (ICSME). IEEE; Kano, N., (2002) Developing International Software, , 2nd edn. Microsoft Press, Amsterdam; Ressin, M., Abdelnour-Nocera, J., Smith, A., Defects and agility: Localization issues in agile development projects (2011) XP 2011. LNBIP, 77, pp. 316-317. , Sillitti, A., Hazzan, O., Bache, E., Albaladejo, X. (eds.), Springer, Heidelberg; Corp, M., (2012) Microsoft Manual of Style, , 4th edn. Microsoft Press, Amsterdam; Ramler, R., Hoschek, R., How to test in sixteen languages? Automation support for localization testing (2017) 10Th International Conference on Software Testing, Verification and Validation (ICST). IEEE Computer Society; Archana, J., Chermapandan, S.R., Palanivel, S., Automation framework for localizability testing of internationalized software (2013) International Conference on Human Computer Interactions (ICHCI). IEEE Computer Society; Martinez, M., Esparcia, A.I., Rueda, U., Vos, T.E.J., Ortega, C., Automated localisation testing in industry with test* (2016) ICTSS 2016. LNCS, 9976, pp. 241-248. , Wotawa, F., Nica, M., Kushik, N. (eds.), Springer, Cham; Zaraket, F., Masri, W., Adam, M., Hammoud, D., Hamzeh, R., GUICOP: Specification-based GUI testing (2012) 5Th International Conference on Software Testing, Verification and Validation (ICST). IEEE Computer Society; Alameer, A., Mahajan, S., Halfond, W.G.J., Detecting and localizing internationalization presentation failures in web applications (2016) International Conference on Software Testing, Verification and Validation (ICST), pp. 202-212. , IEEE Computer Society; Awwad, A.A., Slany, W., Automated bi-directional languages localization testing for android apps with rich GUI (2016) Mob. Inf. Syst., 2016 (27), pp. 1-13","Ramler, R.; Software Analytics and Evolution, Softwarepark 21, Austria; email: rudolf.ramler@scch.at","Turhan B.Winkler D.Sarro F.Kalinowski M.Mendez Fernandez D.Felderer M.","The Economic Chamber of Tyrol;The Province of the Tyrol;The University of Innsbruck","Springer Verlag","18th International Conference on Product-Focused Software Process Improvement, PROFES 2017","29 November 2017 through 1 December 2017",,204559,03029743,9783319699257,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85034585690
"Pinto M., Gonçalves M., Masci P., Campos J.C.","57213491627;57214302261;55633702700;7201617369;","TOM: A model-based GUI testing framework",2017,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10487 LNCS",,,"155","161",,,"10.1007/978-3-319-68034-7_9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030681750&doi=10.1007%2f978-3-319-68034-7_9&partnerID=40&md5=2c92e0b8fe0e455b1ad547d48a862bf8","HASLab, INESC TEC, Braga, Portugal; Dep. Informática, Universidade do Minho, Braga, Portugal","Pinto, M., HASLab, INESC TEC, Braga, Portugal, Dep. Informática, Universidade do Minho, Braga, Portugal; Gonçalves, M., HASLab, INESC TEC, Braga, Portugal, Dep. Informática, Universidade do Minho, Braga, Portugal; Masci, P., HASLab, INESC TEC, Braga, Portugal, Dep. Informática, Universidade do Minho, Braga, Portugal; Campos, J.C., HASLab, INESC TEC, Braga, Portugal, Dep. Informática, Universidade do Minho, Braga, Portugal","Applying model-based testing to interactive systems enables the systematic testing of the system by automatically simulating user actions on the user interface. It reduces the cost of (expensive) user testing by identifying implementations errors without the involvement of human users, but raises a number of specific challenges, such as how to achieve good coverage of the actual use of the system during the testing process. This paper describes TOM, a model-based testing framework that uses a combination of tools and mutation testing techniques to maximize testing of user interface behaviors. © 2017, Springer International Publishing AG.","Model-based testing; Tool support; User interfaces","Behavioral research; Computer software; Model checking; Testing; Interactive system; Interface behavior; Model based testing; Model-based OPC; Mutation testing; Systematic testing; Testing process; Tool support; User interfaces",,,,,"Fundação para a Ciência e a Tecnologia, FCT

Instituto Nacional de Ciência e Tecnologia para Excitotoxicidade e Neuroproteção, INCT-EN: POCI-01-0145-FEDER-016826

European Regional Development Fund, FEDER

Programa Operacional Temático Factores de Competitividade, POFC","Acknowledgements. Work financed by the ERDF (European Regional Development Fund) through the COMPETE 2020 Programme, and by National Funds through the Portuguese funding agency, FCT - Funda¸cão para a Ciência e a Tecnologia, within project POCI-01-0145-FEDER-016826.",,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., MobiGU-ITAR: Automated model-based testing of mobile apps (2015) IEEE Softw, 32 (5), pp. 53-59; Barboni, E., Ladry, J.-F., Navarre, D., Palanque, P., Winckler, M., Beyond modelling: An integrated environment supporting co-execution of tasks and systems models (2010) Proceedings of EICS 2010, pp. 165-174. , ACM; Barbosa, A., Paiva, A.C., Campos, J.C., Test case generation from mutated task models (2011) Proceedings of EICS 2011, pp. 175-184. , ACM; Campos, J.C., Harrison, M.D., Interaction engineering using the IVY tool (2009) Proceedings of EICS 2009, pp. 35-44. , ACM, New York; Campos, J.C., Fayollas, C., Martinie, C., Navarre, D., Palanque, P., Pinto, M., Systematic automation of scenario-based testing of user interfaces (2016) Proceedings of EICS 2016, pp. 138-148. , ACM; Gimblett, A., Thimbleby, H., User interface model discovery: Towards a generic approach (2010) Proceedings of EICS 2010, pp. 145-154. , ACM; ISO 9241–11: Ergonomic requirements for office work with visual display terminals (VDTs) - part 11: Guidance on usability (1998) International Organization for Standardization, 1998 (2), p. 28; Jackson, D., Abstractions, S., (2006) Logic, Language, and Analysis, , The MIT Press, Cambridge; Lelli, V., Blouin, A., Baudry, B., Coulon, F., On model-based testing advanced GUIs (2015) Proceedings of 2015 IEEE 8Th International Conference on Software Testing, Verification and Validation Workshops (ICSTW), 11Th Workshop on Advances in Model Based Testing (A-MOST). IEEE; Masci, P., Oladimeji, P., Zhang, Y., Jones, P., Curzon, P., Thimbleby, H., PVSio-web 2.0: Joining PVS to HCI (2015) CAV 2015. LNCS, 9206, pp. 470-478. , Kroening, D., Păsăreanu, C.S. (eds.), Springer, Cham; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, University of Pittsburgh; Moreira, R., Paiva, A.C., PBGT Tool: An integrated modeling and testing environment for pattern-based GUI testing (2014) Proceedings of ASE 2014, pp. 863-866. , ACM; Morgado, I.C., Paiva, A.C., The iMPAcT tool: Testing ui patterns on mobile applications (2015) In: Proceedings of ASE, 2015, pp. 876-881; Nguyen, B., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105; Paiva, A.C., (2007) Automated Specification-Based Testing of Graphical User Interfaces, , Ph.D. thesis, Engineering Faculty of Porto University, Department of Electrical and Computer Engineering; Reason, J., (1990) Human Error, , Cambridge University Press, New York; Silva, J.L., Campos, J.C., Paiva, A.C., Model-based user interface testing with Spec Explorer and ConcurTaskTrees (2008) Electron. Notes Theoret. Comput. Sci., 208, pp. 77-93; Utting, M., Legeard, B., Testing, P.M.-B., (2007) A Tools Approach, , Morgan Kaufmann Publishers Inc., Burlington; (2015) State Chart XML (SCXML): State Machine Notation for Control Abstraction, , W3C Recommendation, September","Campos, J.C.; Dep. Informática, Portugal; email: jose.campos@di.uminho.pt","Lumpe M.Proenca P.","","Springer Verlag","14th International Conference on Formal Aspects of Component Software, FACS 2017","10 October 2017 through 13 October 2017",,199339,03029743,9783319680330,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-85030681750
"Hsu C.-W., Lee S.-H., Winston Shieh S.","55844447600;57191494375;35616689300;","Adaptive Virtual Gestures for GUI Testing on Smartphones",2017,"IEEE Software","34","5", 8048624,"22","29",,,"10.1109/MS.2017.3641115","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030550161&doi=10.1109%2fMS.2017.3641115&partnerID=40&md5=a63182e6b1834dd5ad82644aeee57546","National Chiao Tung University, Taiwan; Chunghwa Telecom, Taiwan","Hsu, C.-W., National Chiao Tung University, Taiwan; Lee, S.-H., Chunghwa Telecom, Taiwan; Winston Shieh, S., National Chiao Tung University, Taiwan","Software testing is vital for software developers to launch mobile applications running on various software developer's kit versions and device models. Conventional in-depth testing isn't optimal for mobile apps because they're updated frequently in response to bugs and security concerns. Also, the wide variety of smartphones might diminish app quality owing to insufficient testing. To complement in-depth testing, a proposed breadth-first approach employs fast, automated GUI testing for adaptive virtual gestures on various mobile devices. © 1984-2012 IEEE.","automated GUI testing; GUI testing; mobile application; software development; software engineering; software testing","Application programs; Graphical user interfaces; Mobile computing; Mobile devices; Mobile telecommunication systems; Smartphones; Software design; Software engineering; Breadth-first approach; Device models; GUI testing; In-depth testing; Mobile applications; Mobile apps; Software developer; Software testing",,,,,"National Chiao Tung University, NCTU","Ministry of Justice Investigation Bureau, Chunghwa Telecomm, the Taiwan Information Security Center at National Chiao Tung University, and Taiwan’s Ministry of Education partly supported this research.",,"Williams, R., (2015) Apple IOS: A Brief History, , www.telegraph.co.uk/technology/apple/11068420/Apple-iOS-a-brief-history.html, Telegraph, 17 Sept; Rice, K., (2013) How Long Does It Take to Build A Mobile App?, , www.kinvey.com/blog/2086/how-long-does-it-take-to-build-a-mobile-app, Kinvey, 8 Jan; Amalfitano, D., Using GUI ripping for automated testing of android applications (2012) Proc. 27th Int'l Conf. Automated Software Eng. (ASE 12), pp. 258-261; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proc. 6th Int'l Workshop Automation of Software Test (AST 11), pp. 77-83; Gabbert, E., (2015) When to Use Manual Vs. Automated Software Testing Tools, , searchsoftwarequality.techtarget.com/feature/When-to-use-manual-vs-automated-software-testing-tools, TechTarget; Gomez, L., RERAN: Timingand touch-sensitive record and replay for android (2013) Proc. 35th Int'l Conf. Software Eng. (ICSE 13), pp. 72-81; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proc. 22nd Ann. ACM Symp. User Interface Software and Technology (UIST 09), pp. 183-192",,,,"IEEE Computer Society",,,,,07407459,,IESOE,,"English","IEEE Software",Article,"Final","",Scopus,2-s2.0-85030550161
"Meniar C., Opalvens F., Hallé S.","57195714532;57195721930;16315846500;","Runtime verification of user interface guidelines in mobile devices",2017,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10548 LNCS",,,"410","415",,,"10.1007/978-3-319-67531-2_27","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029601465&doi=10.1007%2f978-3-319-67531-2_27&partnerID=40&md5=6129bd86056f08a1d0d01401d8236dc4","Laboratoire d’informatique formelle, Université du Québec à Chicoutimi, Chicoutimi, Canada; Université de Strasbourg, Strasbourg, France","Meniar, C., Laboratoire d’informatique formelle, Université du Québec à Chicoutimi, Chicoutimi, Canada; Opalvens, F., Laboratoire d’informatique formelle, Université du Québec à Chicoutimi, Chicoutimi, Canada, Université de Strasbourg, Strasbourg, France; Hallé, S., Laboratoire d’informatique formelle, Université du Québec à Chicoutimi, Chicoutimi, Canada","The design of the user interface of a modern application needs to follow a set of guidelines, codified in a document published by the maintainers of a particular operating system. These guidelines are intended to ensure a minimum level of quality and consistency across applications. Unfortunately, checking compliance with respect to these guidelines is left to the application developer, and is generally done by manual testing. In this paper, we present a methodology, based on runtime verification, for the automated testing of user interface guidelines of Android applications. © Springer International Publishing AG 2017.",,"Compliance control; Android applications; Application developers; Automated testing; Manual testing; Modern applications; Run-time verification; User interface guidelines; User interfaces",,,,,,,,"(2017), https://developer.android.com/develop/quality-guidelines/core-app-quality.html, Accessed 5 May 2017; (2017), https://developer.android.com/guide/practices/uiguidelines/index.html; (2017), https://developer.apple.com/ios/human-interface-guidelines/, Accessed 7 May 2017; Chircop, L., Colombo, C., Pace, G.J., Device-centric monitoring for mobile device management (2016) Proceedings of the 13Th International Workshop on Formal Engineering Approaches to Software Components and Architectures, FESCA@ETAPS 2016. EPTCS, Eindhoven, the Netherlands, 3Rd April 2016, 205, pp. 31-44. , Kofron, J., Tumova, J., Buhnova, B. (eds.); Daian, P., Falcone, Y., Meredith, P., Şerbănuţă, T.F., Shiriashi, S., Iwai, A., Rosu, G., RV-android: Efficient parametric android runtime verification, a brief tutorial (2015) RV 2015. LNCS, 9333, pp. 342-357. , Bartocci, E., Majumdar, R. (eds.), Springer, Cham; Hallé, S., Bergeron, N., Guérin, F., Le Breton, G., Beroual, O., Declarative layout constraints for testing web applications (2016) J. Log. Algebr. Meth. Program., 855, pp. 737-758; Hallé, S., Villemaire, R., Runtime enforcement of web service message contracts with data (2012) IEEE Trans. Serv. Comput., 5 (2), pp. 192-206; (1992) The Windows Interface: An Application Design Guide, , Microsoft Press, Redmond; (2017), https://developer.gnome.org/hig/stable/, Accessed 7 May 2017","Hallé, S.; Laboratoire d’informatique formelle, Canada; email: shalle@acm.org","Lahiri S.Reger G.","","Springer Verlag","17th International Conference on Runtime Verification, RV 2017","13 September 2017 through 16 September 2017",,197919,03029743,9783319675305,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85029601465
"Muangsiri W., Takada S.","57195680092;7202611302;","Random GUI testing of android application using behavioral model",2017,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE",,,,"266","271",,2,"10.18293/SEKE2017-099","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029515830&doi=10.18293%2fSEKE2017-099&partnerID=40&md5=e2ee99e2c4d5f5b413c26bda563591d8","Dept. of Information and Computer Science, Keio University, Yokohama, Japan","Muangsiri, W., Dept. of Information and Computer Science, Keio University, Yokohama, Japan; Takada, S., Dept. of Information and Computer Science, Keio University, Yokohama, Japan","Automated GUI testing based on behavioral model is one of the most efficient testing approaches. By mining user usage, test scenarios can be generated based on statistical models such as Markov chain. However, these works require static analysis before starting the exploration which requires too much prerequisites and time. In this work, we propose a behavioralbased GUI testing approach for mobile applications that achieves faster and higher coverage. Our approach does not conduct static analysis. It creates a behavioral model from usage logs by applying a statistical model. The events within the behavioral model is mapped to GUI components in a GUI tree. Finally, it updates the model dynamically to increase the probability of an event that rarely or never occurs when users use the application. We evaluated our approach on three open-source Android applications, and compared it with other approaches. Our approach showed the effectiveness of our tool.","Android; Behavioral model; GUI testing; Testing automation; Testing tools","Behavioral research; Graphical user interfaces; Knowledge engineering; Markov processes; Open source software; Software engineering; Static analysis; Android; Behavioral model; GUI testing; Testing automation; Testing tools; Android (operating system)",,,,,"Japan Society for the Promotion of Science, JSPS: JP15K00104","ACKNOWLEDGEMENT This work was supported by JSPS KAKENHI JP15K00104.",,"Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 429-440. , IEEE Computer Society; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24; UI/Application Exerciser Monkey - Android Developers, , http://developer.android.com/tools/help/monkey.html, Online; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Memon, A.M., Using gui ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , ACM; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) 9th Joint Meeting on Foundations of Software Engineering, p. 224; Brooks, P.A., Memon, A.M., Automated gui testing guided by usage profiles (2007) Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering, pp. 333-342. , New York, NY, USA: ACM; San Miguel, J.L., Takada, S., Gui and usage model-based test case generation for android applications with change analysis (2016) Proceedings of the 1st International Workshop on Mobile Development, pp. 43-44. , ACM; Linares-Vásquez, M., White, M., Bernal-Ćardenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable gui-based execution scenarios (2015) Proceedings of the 12th Working Conference on Mining Software Repositories, Ser. MSR '15, pp. 111-122. , Piscataway, NJ, USA: IEEE Press; Ǵomez, M., Rouvoy, R., Adams, B., Seinturier, L., Reproducing context-sensitive crashes of mobile apps using crowdsourced monitoring (2016) Proceedings of the International Conference on Mobile Software Engineering and Systems, pp. 88-99. , ACM; Heafield, K., KenLM Language Model Toolkit, , http://kheafield.com/code/kenlm/, Online; Chen, S.F., Goodman, J., An empirical study of smoothing techniques for language modeling (1999) Computer Speech Language, 13 (4), pp. 359-394; Ning, H., AnyMemo, , https://anymemo.org, Online; Agarwal, R., World Clock Android App, , https://github.com/rahulaga/WorldClock; Senselesssolutions. Weight Chart, , https://github.com/bluezoot/weight-chart, Online; EMMA: A Free Java Code Coverage Tool, , http://emma.sourceforge.net, Online; Canvas, , https://developer.android.com/reference/android/graphics/Canvas.html, Online; Dashboards - Android Developers, , https://developer.android.com/about/dashboards/index.html, Online; Amalfitano, D., Amatucci, N., Fasolino, A.R., Tramontana, P., Kowalczyk, E., Memon, A.M., Exploiting the saturation effect in automatic random testing of android applications (2015) Proceedings of the Second ACM International Conference on Mobile Software Engineering and Systems, Ser. MOBILESoft '15, pp. 33-43. , Piscataway, NJ, USA: IEEE Press",,,"Knowledge Systems Institute;KSI Research Inc.","Knowledge Systems Institute Graduate School","29th International Conference on Software Engineering and Knowledge Engineering, SEKE 2017","5 July 2017 through 7 July 2017",,130220,23259000,1891706411,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-85029515830
"Chen J., Wu H., Zhang W.","57193408365;57195413004;57196272564;","A grey-box approach to getting GUI test model",2017,"2017 7th International Workshop on Computer Science and Engineering, WCSE 2017",,,,"254","261",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027836457&partnerID=40&md5=7ffd3135b2e55c0a49d2d15135479d73","BJUT Faculty of Information Technology, Beijing University of Technology, Beijing, 100124, China; Network and Educational Technology, Anyang Normal University, Anyang, 455000, China","Chen, J., BJUT Faculty of Information Technology, Beijing University of Technology, Beijing, 100124, China; Wu, H., Network and Educational Technology, Anyang Normal University, Anyang, 455000, China; Zhang, W., BJUT Faculty of Information Technology, Beijing University of Technology, Beijing, 100124, China","Graphic User Interfaces(GUI) is an important component of modern software, and incorrect implementation of GUI will reduce the usability and reliability of the overall software application. Testing is an effective way to discover defects and increase the quality of GUI. Generation of test cases is an important phase of GUI testing, and it can be achieved in manual or automatic approach. Due to the high complexity of GUI, it is impractical to generate test cases manually. So, it is a reasonable way to generate test cases from a GUI model automatically. What is the GUI model and how to create the model are still difficult tasks. In this paper, we redefine the event, propose an event handler graph(EHG) model which is considered as a GUI model, and put forward a grey-box approach which combines the dynamic method and static analysis of source code to create a GUI model automatically. The GUI model can be used as a basis for generating test cases automatically subsequently.","Grey-box; GUI model; GUI testing","Application programs; Automatic test pattern generation; Software reliability; Static analysis; User interfaces; Automatic approaches; Dynamic method; Event-handlers; Graphic user interface (GUI); Grey-box; GUI testing; High complexity; Software applications; Graphical user interfaces",,,,,,,,"White, L., Almezen, H., Alzeidi, N., User-based testing of gui sequences and their interactions (2001) Software Reliability Engineering, 2001, pp. 54-63. , ISSRE 2001. Proceedings. 12th International Symposium on, nov; White, L., Almezen, H., Generating test cases for gui responsibilities using complete interaction sequences (2000) Software Reliability Engineering, pp. 110-121; Chen, J., Subramaniam, S., A gui environment to manipulate fsms tor testing gui-based applications in Java (2001) System Sciences, 2001, p. 10. , Proceedings of the 34th Annual Hawaii International Conference on, jan; Chen, J., Subramaniam, S., Specificationbased testing for gui-based applications (2002) Software Quality Journal, 10, pp. 205-224; Memon, A.M., An event-flow model of gui-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157. , http://dx.doi.org/10.1002/stvr.364; Memon, A., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, p. 260. , http://dl.acm.org/citation.cfm?id=950792.951350, ser. WCRE '03. Washington, DC, USA: IEEE Computer Society; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267. , ser. ESEC/FSE-9. New York, NY, USA: ACM; Memon, A., Banerjee, I., Nagarajan, A., What test oracle should i use for effective gui testing? (2003) Automated Software Engineering, 2003, pp. 164-173. , Proceedings. 18th IEEE International Conference on, oct; Memon, A.M., Automatically repairing event sequencebased gui test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 41-436. , Nov; Huang, S., Cohen, M., Memon, A., Repairing gui test suites using a genetic algorithm (2010) Software Testing, Verification and Validation (ICST), 2010 Third International Conference On, pp. 245-254. , april; Xie, Q., Memon, A., Model-based testing of communitydriven open-source gui applications (2006) Software Maintenance, 2006, pp. 145-154. , ICSM '06. 22nd IEEE International Conference on, sept; Xie, Q., Memon, A.M., Studying the characteristics of a ""good"" gui test suite (2006) Software Reliability Engineering, 2006, pp. 159-168. , ISSRE '06. 17th International Symposium on, nov; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of gui testing using a modeldriven approach (2006) Proceedings of the 2006 International Workshop on Automation of Software Test, pp. 9-14. , ser. AST '06. New York, NY, USA: ACM; Ganov, S.R., Killmar, C., Khurshid, S., Perry, D.E., Test generation for graphical user interfaces based on symbolic execution (2008) Proceedings of the 3rd International Workshop on Automation of Software Test, pp. 33-40. , http://doi.acm.org/10.1145/1370042.1370050, ser. AST '08. New York, NY, USA: ACM; Ganov, S., Kilmar, C., Khurshid, S., Perry, D., (2009) Barad C a Gui Testing Framework Based on Symbolic Execution; Ganov, S., Killmar, C., Khurshid, S., Perry, D., Event listener analysis and symbolic execution for testing gui applications (2009) Formal Methods and Software Engineering, 5885, pp. 69-87. , ser. Lecture Notes in Computer Science, K. Breitman and A. Cavalcanti, Eds. Springer Berlin / Heidelberg; Zhao, L., Cai, K.-Y., Event handler-based coverage for gui testing (2010) Quality Software (QSIC), 2010 10th International Conference On, pp. 326-331. , july; Paiva, A., Faria, J., Tillmann, N., Vidal, R., A modelto-implementation mapping tool for automated modelbased gui testing (2005) Formal Methods and Software Engineering, 3785, pp. 450-464. , ser. Lecture Notes in Computer Science, K.-K. Lau and R. Banach, Eds. Springer Berlin / Heidelberg; Paiva, A., Faria, J., Mendes, P., Reverse engineered formal models for gui testing (2008) Formal Methods for Industrial Critical Systems, 4916, pp. 218-233. , ser. Lecture Notes in Computer Science, S. Leue and P. Merino, Eds. Springer Berlin / Heidelberg; Naik, K., Tripathy, F., (2008) Software Testing and Quality Assurance, , A John Wiley and Sons, Inc; (2009) Ui Automation Overview, , http://msdn.microsoft.com/enus/library/ms747327.aspx; (2011) Microsoft Roslyn Ctp, , Nov","Chen, J.; BJUT Faculty of Information Technology, China; email: juncheng@bjut.edu.cn",,"Bauman Moscow State Technical University;China Agricultural University;Science and Engineering Institute (SCIEI);Tokyo University of Science","International Workshop on Computer Science and Engineering (WCSE)","2017 7th International Workshop on Computer Science and Engineering, WCSE 2017","25 June 2017 through 27 June 2017",,129214,,9789811136719,,,"English","Int. Workshop Comput. Sci. Eng., WCSE",Conference Paper,"Final","",Scopus,2-s2.0-85027836457
"Menninghaus M., Wilke F., Schleutker J.-P., Pulvermüller E.","55799100200;57195107941;57195103803;55887873300;","Search based GUI test generation in Java comparing code-based and EFG-based optimization goals",2017,"ENASE 2017 - Proceedings of the 12th International Conference on Evaluation of Novel Approaches to Software Engineering",,,,"179","186",,,"10.5220/0006277801790186","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85025445546&doi=10.5220%2f0006277801790186&partnerID=40&md5=4acdf610942fcf9e061510f4bc5cf336","Institute of Computer Science, University of Osnabruck, Wachsbleiche 27, Osnabrück, 49090, Germany","Menninghaus, M., Institute of Computer Science, University of Osnabruck, Wachsbleiche 27, Osnabrück, 49090, Germany; Wilke, F., Institute of Computer Science, University of Osnabruck, Wachsbleiche 27, Osnabrück, 49090, Germany; Schleutker, J.-P., Institute of Computer Science, University of Osnabruck, Wachsbleiche 27, Osnabrück, 49090, Germany; Pulvermüller, E., Institute of Computer Science, University of Osnabruck, Wachsbleiche 27, Osnabrück, 49090, Germany","Modern software systems often communicate with their users by graphical user interfaces (GUI). While the underlying business logic may be fully covered by unit tests, the GUI mostly is not. Despite the widespread use of capture and replay tools, which leave the test generation of GUI tests to the user, recent research also focuses on automated GUI test generation. From the numerous approaches, which include symbolic execution, modelbased generation, and random testing, search based test data generation seems to be the most promising. In this paper, we create GUI tests using hill climbing, simulated annealing and several genetic algorithms which deal differently with the sequence length and use multi or single objective algorithms. These different test data generators are compared in terms of runtime and coverage. All approaches are also compared using different optimization goals which are a high coverage of the event flow graph (EFG) of the GUIs and a high coverage of the underlying source code. The evaluation shows that the genetic algorithms outperform hill climbing and simulated annealing in terms of coverage, and that targeting a high EFG coverage causes the best runtime performance. © 2017 by SCITEPRESS - Science and Technology Publications, Lda. All Rights Reserved.","Genetic algorithms; GUI testing; Search based software engineering; Test automation; Test generation","Flow graphs; Genetic algorithms; Graphical user interfaces; Java programming language; Simulated annealing; Testing; Graphical user interfaces (GUI); GUI testing; Optimization goals; Run-time performance; Search-based software engineering; Search-based test data generations; Test Automation; Test generations; Software testing",,,,,,,,"Aburas, A., Groce, A., A method dependence relations guided genetic algorithm (2016) International Symposium on Search Based Software Engineering, pp. 267-273. , Springer International Publishing; Arcuri, A., A Theoretical and empirical analysis of the role of test sequence length in software testing for structural coverage (2012) IEEE Transactions on Software Engineering, 38 (3), pp. 497-519; Baresi, L., Lanzi, P.L., Miraz, M., TestFul: An evolutionary test approach for Java (2010) Third International Conference on Software Testing, Verification and Validation, pp. 185-194. , IEEE; Barr, E.T., Harman, M., McMinn, P., Shahbaz, M., Yoo, S., The oracle problem in software testing: A survey (2015) IEEE Transactions on Software Engineering, 41 (5), pp. 507-525; Cadar, C., Dunbar, D., Engler, D.R., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) 8th USENIX Conference on Operating Systems, pp. 209-224; Carino, S., (2016) Dynamically Testing Graphical User Interfaces, , PhD thesis; Chee, Y.M., Colbourn, C.J., Horsley, D., Zhou, J., Sequence covering arrays (2013) SIAM Journal on Discrete Mathematics, 27 (4), pp. 1844-1861; Chen, M., Qiu, X., Xu, W., Wang, L., Zhao, J., Li, X., UML activity diagram-based automatic test case generation for Java programs (2009) The Computer Journal, 52 (5), pp. 545-556; Corne, D.W., Jerram, N.R., Knowles, J.D., Oates, M.J., PESA-II: Region-based selection in evolutionary multiobjective optimization (2001) Proceedings of the Genetic and Evolutionary Computation Conference; Csallner, C., Smaragdakis, Y., JCrasher: An automatic robustness tester for Java (2004) Software: Practice and Experience, 34 (11), pp. 1025-1050; Dan, H., Harman, M., Krinke, J., Li, L., Marginean, A., Pidgin crasher: Searching for minimised crashing GUI event sequences (2014) SSBSE 2014 - Symposium on Search -Based Software Engineering; Deb, K., Agrawal, S., Pratap, A., Meyarivan, T., A fast elitist non-dominated sorting genetic algorithm for multi-objective optimization: NSGA-II (2000) International Conference on Parallel Problem Solving from Nature, pp. 849-858. , Springer Berlin Heidelberg; Fraser, G., Arcuri, A., It is not the length that matters, it is how you control it (2011) 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST), pp. 150-159. , IEEE; Ganov, S.R., Killmar, C., Khurshid, S., Perry, D.E., Test generation for graphical user interfaces based on symbolic execution (2008) Proceedings of the 3rd International Workshop on Automation of Software Test, pp. 33-40. , ACM; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) ACM SIGPLAN Notices, 40 (6), pp. 213-223; Goldberg, D.E., Deb, K., (1991) A Comparative Analysis of Selection Schemes Used in Genetic Algorithms, pp. 69-93. , Foundations of Genetic Algorithms; Gross, F., Fraser, G., Zeller, A., EXSYST: Search-based GUI testing (2012) ICSE Proceedings of Th International Conference on Software Engineering, pp. 1423-1426. , IEEE Press; Harman, M., Mansouri, S.A., Zhang, Y., Search-based software engineering: Trends, techniques and applications (2012) ACM Computing Surveys (CSUR), 45 (1); Harman, M., McMinn, P., De Souza, J.T., Yoo, S., Search based software engineering: Techniques, taxonomy, tutorial (2012) Empirical Software Engineering and Verification, pp. 1-59. , Springer Berlin Heidelberg; Ingber, L., Rosen, B., Genetic algorithms and very fast simulated reannealing: A comparison (1992) Mathematical and Computer Modelling, 16 (11), pp. 87-100; Khurshid, S., Visser, W., Pašareanu, C.S., Khurshid, S., Test input generation with Java pathfinder (2004) ACM SIGSOFT Software Engineering Notes, 29 (4), pp. 97-107; Korel, B., Automated software test data generation (1990) IEEE Transactions on Software Engineering, 16 (8), pp. 870-879; Laumanns, M., Thiele, L., Zitzler, E., SPEA2: Improving the strength Pareto evolutionary algorithm (2001) Eurogen, 3242 (103), pp. 95-100; McMinn, P., Search-based software testing: Past, present and future (2011) 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 153-163. , IEEE; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17, pp. 137-157; Menninghaus, M., Pulvermuller, E., Towards using code coverage metrics for performance comparison on the implementation level (2016) The 7th ACM/SPEC, pp. 101-104. , ACM; Mitchell, M., Holland, J.H., Forrest, S., (1993) When Will a Genetic Algorithm Outperform Hill Climbing?, , Ann Arbor; Myers, B., Hudson, S.E., Pausch, R., Past, present, and future of user interface software tools (2000) ACM Transactions on Computer-Human Interaction (TOCHI), 7 (1), pp. 3-28; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Pacheco, C., Lahiri, S.K., Ernst, M.D., Feedback-directed random test generation (2007) Proceedings of the 29th International Conference on Software Engineering; Russell, S.J., Norvig, P., Canny, J.F., Malik, J.M., Edwards, D.D., (2003) Artificial Intelligence: A Modern Approach, 2. , Prentice hall Upper Saddle River; Sen, K., Agha, G., CUTE and jCUTE: Concolic unit testing and explicit path model-checking tools (2006) International Conference on Computer Aided Verification, pp. 419-423. , Springer Berlin Heidelberg; Soffa, M.L., Pollack, M.E., Memon, A.M., Coverage criteria for GUI testing (2001) ACM SIGSOFT Software Engineering Notes, 26 (5), pp. 256-267; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a model-driven approach (2006) Proceedings of the 2006 International Workshop on Automation of Software Test, pp. 9-14. , ACM; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 97 (4), pp. 559-574; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Transactions on Software Engineering, 36 (1), pp. 81-95; Zitzler, E., Deb, K., Thiele, L., Comparison of multiobjective evolutionary algorithms: Empirical results (2006) Evolutionary Computation, 8 (2), pp. 173-195",,"Damiani E.Spanoudakis G.Maciaszek L.Maciaszek L.","Institute for Systems and Technologies of Information, Control and Communication (INSTICC)","SciTePress","12th International Conference on Evaluation of Novel Approaches to Software Engineering, ENASE 2017","28 April 2017 through 29 April 2017",,128063,,9789897582509,,,"English","ENASE - Proc. Int. Conf. Eval. Novel Approaches Softw. Eng.",Conference Paper,"Final","All Open Access, Hybrid Gold",Scopus,2-s2.0-85025445546
"Navarro P.L.M., Ruiz D.S., Perez G.M.","36521389600;57197985146;7203067256;","OHT: Open and cross-platform GUI testing",2017,"Journal of Intelligent and Fuzzy Systems","32","5",,"3231","3243",,,"10.3233/JIFS-169267","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018716767&doi=10.3233%2fJIFS-169267&partnerID=40&md5=150568d94296818017ee3f15ff2ccc26","Cátedra SAES Laboratories, University of Murcia, Murcia, 30.071, Spain; Department of Computer Engineering, University of Murcia, Murcia, Spain; Department of Information Engineering, University of Murcia, Murcia, Spain","Navarro, P.L.M., Cátedra SAES Laboratories, University of Murcia, Murcia, 30.071, Spain; Ruiz, D.S., Department of Computer Engineering, University of Murcia, Murcia, Spain; Perez, G.M., Department of Information Engineering, University of Murcia, Murcia, Spain","GUI testing is essential to provide validity and quality of system response, but applying it to a development is not straightforward: it is time consuming, requires specialized personnel, and involves complex activities that sometimes are implemented manually. GUI testing tools help supporting these processes. However, integrating them into software projects may be troublesome, mainly due to the diversity of GUI platforms and operating systems in use. This work presents the design and implementation of Open HMI Tester (OHT), an application framework for the automation of testing processes based on GUI introspection. It is cross-platform, and provides an adaptable design aimed at supporting major event-based GUI platforms. It can also be integrated into ongoing and legacy developments using dynamic library preloading. OHT provides a robust and extensible basis to implement GUI testing tools. A capture and replay approach has been implemented as proof of concept. Introspection is used to capture essential GUI and interaction data. It is used also to simulate real human interaction in order to increase robustness and tolerance to changes between testing iterations. OHT is being actively developed by the Open-source Community and, as shown in this paper, it is ready to be used in current software projects. © 2017 - IOS Press and the authors. All rights reserved.","application frameworks; capture and replay; cross-platform; Graphical User Interfaces; GUI testing; open-source","Open source software; Open systems; Personnel testing; User interfaces; Application frameworks; capture and replay; Cross-platform; GUI testing; Open sources; Graphical user interfaces",,,,,,,,"(2016), http://www.seleniumhq.org/, Selenium HQ: Browser Automation,accessed July; Testona: Test Design Using the Classification Tree Method, , http://www.testona.net/, accessed July 2016]; Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated Java GUI Modeling for model-based testing purposes (2011) ITNG, IEEE Computer Society, pp. 268-273; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Memon, A.M., Using gui ripping for automated testing of android applications (2012) ASE, pp. 258-261. , In M. Goedicke, T. Menzies and M. Saeki, editors, ACM; Caswell, M., Aravamudhan, V., Wilson, K., (2004), Introduction to jfcUnit. Retrieved August, 4; Chang, T.-H., Yeh, T., Miller, R.C., GUI Testing Using ComputerVision (2010) CHI, pp. 1535-1544. , In E.D. Mynatt, D. Schoner,G. Fitzpatrick, S.E. Hudson,W.Keith Edwards and T. Rodden, editors, , ACM; Choi, W., Necula, G.C., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) OOPSLA, ACM, pp. 623-640. , In A.L. Hosking, P.Th. Eugster and C.V. Lopes, editors; Ariss, O., Xu, D., Dandey, S., Vender, B., McClean, P.E., Slator, B.M., A systematic capture and replay strategy for testing complex gui based Java applications (2010) ITNG, IEEE Computer Society, pp. 1038-1043. , In S. Latifi, editor; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009) ICSE, IEEE, pp. 408-418; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) ISSTA, ACM, pp. 67-77. , In M.P.E. Heimdahl and Zhendong Su, editors; Horng, S.-J., Su, M.-Y., Tsai, J.-G., A Dynamic Backdoor Detection System Based on Dynamic Link Libraries (2008) International Journal of Business and Systems Research, 2 (3), pp. 244-257; Husted, T., Massol, V., (2004) JUnit in Action, , Manning Publications; Karam, M.R., Dascalu, S.M., Hazimé, R.H., Challenges and opportunities for improving code-based testing of graphical user interfaces (2006) Journal of Computational Methods in Sciences and Engineering, 6 (5-6), pp. 379-388; König, D., (2012) Java Magazin, 2, pp. 32-38. , JavaFX (Second edition; Kruse, P.M., Nasarek, J., Fernandez, N.C., Systematic testing of web applications with the classification tree method XVII Iberoamerican Conference on Software Engineering (CIbSE 2014, p. 2014; Leon, D., Podgurski, A., White, L.J., Multivariate visualization in observation-based testing (2000) ICSE, ACM, pp. 116-125. , In C. Ghezzi, M. Jazayeri and A.L. Wolf, editors; Liu, C.-H., Lu, C.-Y., Cheng, S.-J., Chang, K.-Y., Hsiao, Y.-C., Chu, W.-M., Capturereplay testing for android applications (2014) Computer, Consumer and Control (IS3C), 2014 International Symposium on, pp. 1129-1132; Navarro, P.L.M., Hillmann, S., Möller, S., Ruiz, D.S., Pérez, G.M., Run-time model based framework for automatic evaluation of multimodal interfaces (2014) Journal on Multimodal User Interfaces, 8 (4), pp. 399-427; Navarro, P.L.M., Pérez, G.M., Ruiz, D.S., A context-aware interaction model for the analysis of users QoE in mobile environments (2014) International Journal of Human-Computer Interaction, 30 (12), pp. 946-964; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., A proposal for automatic testing of guis based on annotated use cases. Adv. Software engineering (2010) Special Issue on Software Test Automation; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Open HMI tester: An open and cross-platform architecture for GUI testing and certification (2010) International Journal of Computer Systems Science and Engineering (IJCSSE), Special Issue on Open Source Certification, 25 (4), pp. 283-296; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., A lightweight framework for dynamic gui data verification based on scripts (2016) Softw Test, Verif Reliab, 26 (2), pp. 95-118; Memon, A., GUItesting: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 87-88; Memon, A., An event-flow model of GUI-based applications for testing (2007) Software TestingVerification and Reliability, 17 (3), pp. 137-157; Memon, A., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE, IEEE Computer Society, pp. 260-269. , In A.V. Deursen, E. Stroulia and M.-A.D. Storey, editors; Memon, A.M., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing ""Nightly/daily Builds"" ofGUIApplications (2003) ICSM, IEEE Computer Society, pp. 410-419; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) ESEC/SIGSOFT FSE, pp. 256-267; Mingsong, C., Xiaokang, Q., Xuandong, L., Automatic test case generation for UML activity diagrams Java (2006) AST '06: Proceedings of the 2006 International Workshop on Automation of Software Test, pp. 2-8. , New York, NY, USA, ACM; (2012), Nokia Corporation. Qt: Cross-platform application and UI framework; Orso, A., Kennedy, B., Selective capture and replay of program executions (2005) ACM SIGSOFT Software Engineering Notes, 30 (4), pp. 1-7; Paiva, A.C.R., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for GUI testing (2007) Electr Notes Theor Comput Sci, 190 (2), pp. 99-111; http://www.robotium.org/[Online;accessedJuly2016], Renas Reda. Robotium: User scenario testing for Android; Steven, J., Chandra, P., Fleck, B., Podgurski, A., Jrapture: A capture/replay tool for observation-based testing (2000) ISSTA, pp. 158-167; http://www.gtk.org, The GTK+ Team. The GIMP Toolkit (GTK), version 2.x. Accessed July 2016]; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of gui testing using amodel-driven approach (2006) AST, pp. 9-14. , In H. Zhu, J.R. Horgan, S.-C. Cheung and J.J. Li, editors, , ACM; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) IEEE Transactions on SMC Associate Editors, pp. 110-123; White, L., Almezen, H., Alzeidi, N., User-Based testing of GUI sequences and their interactions. (2001) IEEE | 12th International Symposium on Software Reliability Engineering (ISSRE'01, pp. 54-65; Xie, Q., Memon, A.M., Studing the fault-detection effectiveness of GUI test cases for rapidly envolving software (2005) IEEE Computer Society; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans Softw Eng Methodol, 16 (1); Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications. in V. Cortellessa and D. Varró, editors (2013) FASE, Volume 7793 of Lecture Notes in Computer Science, pp. 250-265. , Springer; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli, Using GUI screenshots for search and automation (2009) UIST, pp. 183-192. , In A.D. Wilson and F. Guimbretiére, editors, ACM; Yuan, X., Memon, A.M., Using gui run-time state as feedback to generate test cases (2007) ICSE, IEEE Computer Society, pp. 396-405","Navarro, P.L.M.; Cátedra SAES Laboratories, Spain; email: pedromateo@um.es",,,"IOS Press",,,,,10641246,,,,"English","J. Intelligent Fuzzy Syst.",Article,"Final","",Scopus,2-s2.0-85018716767
"Esparcia-Alcázar A.I., Almenar F., Rueda U., Vos T.E.J.","6506045663;56703382600;6507265119;8980537100;","Evolving rules for action selection in automated testing via genetic programming - A first approach",2017,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","10200 LNCS",,,"82","95",,3,"10.1007/978-3-319-55792-2_6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85017523760&doi=10.1007%2f978-3-319-55792-2_6&partnerID=40&md5=1ec5170ab9dde9291e5b841aaa603465","Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de Vera s/n, Valencia, 46022, Spain","Esparcia-Alcázar, A.I., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de Vera s/n, Valencia, 46022, Spain; Almenar, F., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de Vera s/n, Valencia, 46022, Spain; Rueda, U., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de Vera s/n, Valencia, 46022, Spain; Vos, T.E.J., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de Vera s/n, Valencia, 46022, Spain","Tools that perform automated software testing via the user interface rely on an action selection mechanism that at each step of the testing process decides what to do next. This mechanism is often based on random choice, a practice commonly referred to as monkey testing. In this work we evaluate a first approach to genetic programming (GP) for action selection that involves evolving IF-THEN-ELSE rules; we carry out experiments and compare the results with those obtained by random selection and also by Q-learning, a reinforcement learning technique. Three applications are used as Software Under Test (SUT) in the experiments, two of which are proprietary desktop applications and the other one an open source web-based application. Statistical analysis is used to compare the three action selection techniques on the three SUTs; for this, a number of metrics are used that are valid even under the assumption that access to the source code is not available and testing is only possible via the GUI. Even at this preliminary stage, the analysis shows the potential of GP to evolve action selection mechanisms. © Springer International Publishing AG 2017.","Action selection for testing; Automated testing via the GUI; Genetic programming; Testing metrics","Application programs; Automation; Evolutionary algorithms; Genetic algorithms; Genetic programming; Graphical user interfaces; Open source software; Open systems; Reinforcement learning; User interfaces; Action selection; Action selection mechanism; Automated software testing; Automated testing; Desktop applications; Reinforcement learning techniques; Testing metrics; Web-based applications; Software testing",,,,,,,,"Aho, P., Menz, N., Rty, T., Dynamic reverse engineering of GUI models for testing (2013) Proceedings of the 2013 International Conference on Control, Decision and Information Technologies (Codit 2013); Aho, P., Oliveira, R., Algroth, E., Vos, T., Evolution of automated testing of software systems through graphical user interface (2016) International Conference on Advances in Computation, Communications and Services, , Valencia; Alegroth, E., Feldt, R., Ryrholm, L., Visual GUI testing in practice: Challenges, problems and limitations (2014) Empirical Softw. Eng, 20, pp. 694-744; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR: What about more sophisticated action specification and selection? (2014) Post-Proceedings of the Seventh Seminar on Advanced Techniques and Tools for Software Evolution, Sat-Tose 2014, pp. 60-78. , http://ceur-ws.org/Vol-1354/paper-06.pdf, L’Aquila, Italy, 9-11 July 2014; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a GUI (2011) SSBSE 2011. LNCS, 6956, pp. 173-187. , Cohen, M.B., Ó Cinnéide, M, Springer, Heidelberg; Chaudhary, N., Sangwan, O., Metrics for event driven software (2016) Int. J. Adv. Comput. Sci. Appl. (IJACSA), 7 (1), pp. 85-89; Esparcia-Alcázar, A.I., Almenar, F., Martínez, M., Rueda, U., Vos, T.E., Q-learning strategies for action selection in the TESTAR automated testing tool (2016) Proceedings of META 2016 6Th International Conference on Metaheuristics and Nature Inspired Computing, pp. 174-180; Koza, J.R., (1992) Genetic Programming: On the Programming of Computers by means of Natural Selection, , http://mitpress.mit.edu/books/genetic-programming, MIT Press, Cambridge; Lehman, J., Stanley, K.O., Novelty search and the problem with objectives (2011) Genetic Programming Theory and Practice IX. Genetic and Evolutionary Computation, pp. 37-56. , Riolo, R., Vladislavleva, E., Moore, J.H. (eds.), Springer, New York; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of ESEC/FSE 2001, pp. 256-267; Seesing, A., Gross, H.G., A genetic programming approach to automated test generation for object-oriented software (2006) Int. Trans. Syst. Sci. Appl, 1 (2), pp. 127-134; Wappler, S., Wegener, J., Evolutionary unit testing of object-oriented software using strongly-typed genetic programming (2006) Proceedings of the 8Th Annual Conference on Genetic and Evolutionary Computation, GECCO 2006, pp. 1925-1932. , http://doi.acm.org/10.1145/1143997.1144317, ACM, New York; Watkins, C., (1989) Learning from Delayed Rewards, , Ph.D. thesis, Cambridge University","Esparcia-Alcázar, A.I.; Research Center on Software Production Methods (PROS), Camino de Vera s/n, Spain; email: aesparcia@pros.upv.es","Hidalgo J.I.Kaufmann P.Nguyen T.T.Bacardit J.Cagnoni S.Divina F.Ascheid G.Mavrovouniotis M.de Vega F.F.Brabazon A.Haasdijk E.Heinerman J.Cotta C.Zhang M.D Andreagiovanni F.Kampouridis M.Mora Garcia A.M.Esparcia-Alcazar A.I.Coler M.Iacca G.Tonda A.Squillero G.Sim K.Urquhart N.Glette K.Hu T.Burrelli P.Schaefer R.Silva S.Tarantino E.","","Springer Verlag","20th European Conference on the Applications of Evolutionary Computation, EvoApplications 2017","19 April 2017 through 21 April 2017",,190619,03029743,9783319557915,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85017523760
"Robbins B.","36784707800;","Characterizing Software Test Case Behavior With Regression Models",2017,"Advances in Computers","105",,,"115","176",,,"10.1016/bs.adcom.2016.12.002","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009986078&doi=10.1016%2fbs.adcom.2016.12.002&partnerID=40&md5=cae74593c6080e4636d74ddcc2e00091","Siemens PLM Software, Huntsville, AL, United States","Robbins, B., Siemens PLM Software, Huntsville, AL, United States","Testing modern software applications, such as those built on an event-driven paradigm, requires effective consideration of context. Model-based testing (MBT) approaches have been presented as an effective way to consider context, but effective MBT requires a high level of automation. Fully automated approaches too often lead to issues that threaten the very claims that MBT offers, such as generating test cases which are not fully executable and generating very large suites of test cases. In this chapter, I describe a new class of models for automated MBT workflows: predictive regression models. I compare these models with those in a state-of-the-art automated MBT workflow. I also describe a modern infrastructure to execute large MBT suites, to counter the seed suite required to construct predictive regression models, and to further enable effective MBT approaches in general. I conclude with a summary of recent research that effectively applied a regression model for test case feasibility as a filter for automatically generated test cases. © 2017 Elsevier Inc.","Container; Continuous integration; GUI testing; Model-based testing; Software testing",,,,,,,,,"Robbins, B., (2016), binary classifier for feasibility applied to automatically generated test cases of event-driven software, PhD thesis, University of Maryland, College Park; IEEE Standard 1044-2009 (Revision of IEEE Standard 1044-1993) (2010), pp. 1-23; Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., Using static analysis to find bugs (2008) IEEE Softw., 25 (5), pp. 22-29; Basili, V.R., Green, S., Laitenberger, O., Lanubile, F., Shull, F., Srumgrd, S., Zelkowitz, M.V., The empirical investigation of perspective-based reading (1996) Empir. Softw. Eng., (2), pp. 133-164; Beck, K., Test Driven Development: By Example (2002), Addison-Wesley Longman Publishing Co., Inc. Boston, MA ISBN 0321146530; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: an innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21, p. 65105; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) 29th International Conference on Software Engineering—ICSE 2007, pp. 396-405; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Trans. Softw. Eng., 36, pp. 81-95; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Inf. Softw. Technol., 52 (5), pp. 559-575. , http://www.sciencedirect.com/science/article/B6V0B-4XVRYKT-1/2/3c6205164e33758ee1ed58bb3a3eee6d; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) ASE’07: Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering, Atlanta, Georgia, USA, pp. 333-342. , ACM New York, NY ISBN 978-1-59593-882-4; McMaster, S., Memon, A., Call-stack coverage for GUI test suite reduction (2008) IEEE Trans. Softw. Eng., 34, pp. 99-115; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Trans. Softw. Eng., SE-4 (3), pp. 178-187; Clarke, J.M., Automated test generation from a behavioral model (1998), http://www.qualityweek.com/QWCD/QWE1998CD.pdf, Proceedings of 2nd International Software Quality Week Europe (SQWE), Brussels, Belgium, November Accessed from; Bernhard, P.J., A reduced test suite for protocol conformance testing (1994) ACM Trans. Softw. Eng. Methodol., 3 (3), pp. 201-220; Rapps, S., Weyuker, E.J., Data flow analysis techniques for test data selection (1982) ICSE’82 Proceedings of the 6th International Conference on Software Engineering, Tokyo, Japan, pp. 272-278. , http://dl.acm.org/citation.cfm?id=800254.807769, IEEE Computer Society Press Los Alamitos, CA; Frankl, P.G., Weyuker, E.J., An applicable family of data flow testing criteria (1988) IEEE Trans. Softw. Eng., 14 (10), pp. 1483-1498. , (special Section on Software Testing); Fujiwara, S., von ochmann, G., Khendek, F., Amalou, M., Ghedamsi, A., Test selection based on finite state models (1991) IEEE Trans. Softw. Eng., 17 (6), pp. 591-603; Ural, H., Yang, B., A test sequence selection method for protocol testing (1991) IEEE Trans. Commun., 39 (4), pp. 514-523; Cheng, K.T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) DAC’93 Proceedings of the 30th International Design Automation Conference, Dallas, Texas, USA, pp. 86-91. , ACM New York, NY ISBN 0-89791-577-1; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS’97), pp. 80-88. , IEEE Press Washington, Brussels, Tokyo ISBN 0-8186-7831-3; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) ISSRE’01: Proceedings of the 12th International Symposium on Software Reliability Engineering, p. 54. , IEEE Computer Society Washington, DC ISBN 0-7695-1306-9; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) J. Softw. Test. Verif. Reliab., 17, pp. 137-157; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) ESEC/FSE-9 Proceedings of the 8th European Software Engineering Conference Held Jointly With 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 26, pp. 256-267. , ACM New York, NY (SIGSOFT Softw. Eng. Notes); Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: reverse engineering of graphical user interfaces for testing (2003) WCRE 2003 Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: incorporating event context (2011) IEEE Trans. Softw. Eng., 37 (4), pp. 559-574; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: systematic mapping and repository (2013) Inf. Softw. Technol., 55, pp. 1679-1694; Memon, A., Banerjee, I., Hashmi, N., Nagarajan, A., DART: a framework for regression testing “nightly/daily builds” of GUI applications (2003) ICSM ’03 Proceedings of the International Conference on Software Maintenance, p. 410. , IEEE Computer Society Washington, DC ISBN 0-7695-1905-9; Richardson, D.J., Leif Aha, S., OMalley, T.O., Specification-based test oracles for reactive systems (1992) Proceedings of the 14th International Conference on Software Engineering, pp. 105-118; Richardson, D.J., TAOS: testing with analysis and Oracle support (1994) Proceedings of the 1994 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), August 17–19, Seattle, Washington, USA, pp. 138-153. , T. Ostrand ACM Press New York, NY ISBN 0-89791-683-2; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , ACM New York, NY; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1), p. 4; Memon, A., Banerjee, I., Nguyen, B.N., Robbins, B., The first decade of GUI ripping: extensions, applications, and broader impacts (2013) 20th Working Conference on Reverse Engineering (WCRE), pp. 11-20; Nelder, J.A., Wedderburn, R.W.M., Generalized linear models (1972) J. R. Stat. Soc. A, 135 (3), pp. 370-384. , http://www.jstor.org/stable/2344614; Tibshirani, R., Regression shrinkage and selection via the lasso (1996) J. R. Stat. Soc. B Methodol., 58 (1), pp. 267-288. , http://www.jstor.org/stable/2346178; Friedman, J., Hastie, T., Tibshirani, R., Regularization paths for generalized linear models via coordinate descent (2010) J. Stat. Softw., 33 (1), pp. 1-22. , http://www.jstatsoft.org/v33/i01/; Merkel, D., Docker: lightweight Linux containers for consistent development and deployment (2014) Linux J., 2014 (239), pp. 76-91. , http://dl.acm.org/citation.cfm?id=2600239.2600241; Gao, Z., Liang, Y., Cohen, M.B., Memon, A.M., Wang, Z., Making system user interactive tests repeatable: when and what should we control? (2015) ICSE ’15 Proceedings of the 37th International Conference on Software Engineering—Volume 1, Florence, Italy, pp. 55-65. , http://dl.acm.org/citation.cfm?id=2818754.2818764, IEEE Press Piscataway, NJ ISBN 978-1-4799-1934-5; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18, pp. 1-36; Nguyen, B.N., Memon, A., An observe-model-exercise* paradigm to test event-driven systems with undetermined input spaces (2014) IEEE Trans. Softw. Eng., 99 (PrePrints), p. 1. , http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=06714448; Huang, S., Cohen, M., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) ICST 2010: Proceedings of the 3rd IEEE International Conference on Software Testing, Verification and Validation, , IEEE Computer Society Washington, DC; Gao, Z., Chen, Z., Zou, Y., Memon, A., SITAR: GUI test script repair (2015) IEEE Trans. Softw. Eng., 42, pp. 170-186; Yuan, X., Memon, A.M., Alternating GUI test generation and execution (2008) Proceedings of the Testing: Academic & Industrial Conference—Practice and Research Techniques, pp. 23-32. , H. van Vliet IEEE Computer Society Washington, DC ISBN 978-0-7695-3383-4; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based GUI testing techniques (2014) J. Syst. Softw., 97 (100), pp. 15-46; Jurafsky, D., Martin, J., Speech and Language Processing: An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition (2009), second ed. Pearson Prentice Hall Upper Saddle River, NJ",,,,"Academic Press Inc.",,,,,00652458,,,,"English","Adv. Comput.",Book Chapter,"Final","",Scopus,2-s2.0-85009986078
"Qi X.-F., Wang Z.-Y., Mao J.-Q., Wang P.","16205786800;16644193000;57192874476;56182131700;","Automated Testing of Web Applications Using Combinatorial Strategies",2017,"Journal of Computer Science and Technology","32","1",,"199","210",,5,"10.1007/s11390-017-1699-x","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85008481749&doi=10.1007%2fs11390-017-1699-x&partnerID=40&md5=39cbd13c677370f9e76c901e63654b20","School of Computer Science and Engineering, Southeast University, Nanjing, 211189, China; Key Laboratory of Computer Network and Information Integration, Ministry of Education, Nanjing, 211189, China; School of Computer Science and Technology, Nanjing University of Posts and Telecommunications, Nanjing, 210023, China","Qi, X.-F., School of Computer Science and Engineering, Southeast University, Nanjing, 211189, China, Key Laboratory of Computer Network and Information Integration, Ministry of Education, Nanjing, 211189, China; Wang, Z.-Y., School of Computer Science and Technology, Nanjing University of Posts and Telecommunications, Nanjing, 210023, China; Mao, J.-Q., School of Computer Science and Engineering, Southeast University, Nanjing, 211189, China; Wang, P., School of Computer Science and Engineering, Southeast University, Nanjing, 211189, China","Recently, testing techniques based on dynamic exploration, which try to automatically exercise every possible user interface element, have been extensively used to facilitate fully testing web applications. Most of such testing tools are however not effective in reaching dynamic pages induced by form interactions due to their emphasis on handling client-side scripting. In this paper, we present a combinatorial strategy to achieve a full form test and build an automated test model. We propose an algorithm called pairwise testing with constraints (PTC) to implement the strategy. Our PTC algorithm uses pairwise coverage and handles the issues of semantic constraints and illegal values. We have implemented a prototype tool ComjaxTest and conducted an empirical study on five web applications. Experimental results indicate that our PTC algorithm generates less form test cases while achieving a higher coverage of dynamic pages than the general pairwise testing algorithm. Additionally, our ComjaxTest generates a relatively complete test model and then detects more faults in a reasonable amount of time, as compared with other existing tools based on dynamic exploration. © 2017, Springer Science+Business Media New York.","automated testing; combinatorial testing; web application","Automation; Java programming language; Semantics; Testing; Automated testing; Combinatorial strategies; Combinatorial testing; Interface elements; Pair-wise Testing; Semantic constraints; Testing technique; WEB application; User interfaces",,,,,,,,"Mesbah, A., Advances in testing JavaScript-based web applications (2015) Advances in Computers, 97, pp. 201-235; Crawling AJAX-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans, , Mesbah A, Deursen A V, Lenselink S. 6(1):3:1-3:29; Mesbah, A., Deursen, A.V., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Trans. Softw. Engin., 38 (1), pp. 35-53; Roest, D., Mesbah, A., Deursen, A.V., Regression testing, A.J.A.X., applications: Coping with dynamism. In Proc. the 3rd Int. Conf. Software Testing (2010) Verification, and Validation, pp. 127-136; Wang, W., Lei, Y., Sampath, S., A combinatorial approach to building navigation graphs for dynamic Web applications. In Proc. the 25th (2009) Int. Conf. Software Maintenance, pp. 211-220; Kuhn, D.R., Reilly, M.J., An investigation of the applicability of design of experiments to software testing (2002) In Proc. the 27th Annual NASA Goddard Software Engineering Workshop, pp. 91-95; Kuhn, D.R., Wallce, D.R., Gallo, A.M., (2004) Software fault Eng., 30 (6), pp. 418-421; Nie, C., Leung, H., (2011) A survey of combinatorial testing. ACM Computing Surveys, , 43(2): 11:1-11:29; Ostrand, T.J., Balcer, M.J., The category-partition method for specifying and generating fuctional tests (1988) Communications of the ACM, 31 (6), pp. 676-686; Bryce, R.C., Colbourn, C.J., Prioritized interaction testing for pair-wise coverage with seeding and constraints (2006) Information and Software Technology, 48 (10), pp. 960-970; Benedikt, M., Freire, J., Godefroid, P., VeriWeb: Automatically testing dynamic Web sites. In Proc. the 11th (2002) Int. Conf. World Wide Web, pp. 654-668; Madhavan, J., Ko, D., Kot, L., Google’s deep-web crawl (2008) Proceedings of the VLDB Endowment, 1 (2), pp. 1241-1252; Cai, R., Yang, J.M., Lai W et al. iRobot: An intelligent crawler for web forums. In Proc. the 17th (2008) Int. Conf. World Wide Web, pp. 447-456; Ricca, F., Tonella, P., Proc. the 23rd Int. Conf. Software Engineering Analysis and testing of web applications, , May 2001, pp.25-34; Fard, A.M., Mesbah A. Feedback-directed exploration of web applications to derive test models. In Proc. the 24th (2013) Int. Symp. Software Reliability Engineering, pp. 278-287; MirzaAghaei, M., Mesbah A. DOM-based test adequacy criteria for web applications. In Proc (2014) Int. Symp. Software Testing and Analysis, pp. 71-81; Zou, Y., Chen, Z., Zheng, Y., Virtual DOM coverage for effective testing of dynamic web application. In Proc (2014) Int. Symp. Software Testing and Analysis, pp. 60-70","Qi, X.-F.; School of Computer Science and Engineering, China; email: xfqi@seu.edu.cn",,,"Springer New York LLC",,,,,10009000,,JCTEE,,"English","J Comput Sci Technol",Article,"Final","",Scopus,2-s2.0-85008481749
"Tao C., Gao J.","36086787600;7404475003;","Building a Model-Based GUI Test Automation System for Mobile Applications",2016,"International Journal of Software Engineering and Knowledge Engineering","26","9-10",,"1605","1615",,3,"10.1142/S0218194016710042","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013324766&doi=10.1142%2fS0218194016710042&partnerID=40&md5=18c256f130aaf93de8a0bca52b49d271","Department of Software Engineering, Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, China; Department of Computer Engineering, San Jose State University, San Jose, CA, United States; Taiyuan University of Technology, Taiyuan, Shanxi, China","Tao, C., Department of Software Engineering, Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, China; Gao, J., Department of Computer Engineering, San Jose State University, San Jose, CA, United States, Taiyuan University of Technology, Taiyuan, Shanxi, China","With the rapid advance of mobile computing technology and wireless networking, there is a significant increase of mobile applications (apps). This brings new business requirements and demands in mobile software testing, and causes new issues and challenges in mobile test automation. Existing mobile application testing approaches mostly concentrate on GUI-based testing, load and performance testing without considering large-scale concurrent mobile app test automation, and model-based test coverage analysis. In this paper, a mobile hierarchical GUI model is proposed to present mobile operation scenario flows and gesture features in a hierarchical manner, in order to facilitate test dependency analysis in test automation. Mobile app test coverage analysis is performed based on GUI ripping models. The paper also presents a developed system that provides a test automation solution using GUI models. Finally, the paper reports a case study to indicate the feasibility and effectiveness of the proposed approach. © 2016 World Scientific Publishing Company.","Mobile application GUI testing; model-based test automation; test coverage analysis","Automation; Graphical user interfaces; Load testing; Mobile computing; Mobile telecommunication systems; Model checking; Testing; Business requirement; GUI testing; Issues and challenges; Mobile application testing; Mobile applications; Mobile computing technology; Model-based test; Test coverage; Software testing",,,,,,,,"Muccini, H., Francesco, A.D., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Proc. Int. Workshop Automatic Software Test Automation, pp. 29-35; Gao, J., Mobile application testing: A tutorial (2013) Computer, 47 (2), pp. 46-55; Mahmood, R., A white box approach for automated security testing of Android applications on the cloud (2012) Proc. Int. Workshop on Automation of Software Test, pp. 22-28; Bo, J., MobileTest: A tool supporting automatic black box test for software on smart mobile devices (2007) Proc. Int. Workshop on Automation of Software Test, pp. 8-14; Huang, Y., Lu, L., Apply ant colony to event-flow model for graphical user interface test case generation (2012) IET Softw., 6 (1), pp. 50-60; Memon, A.M., Cohen, M.B., Automated testing of GUI applications: Models, tools, and controlling flakiness (2013) Proc. Int. Conf. Software Engineering, pp. 1479-1480; Li, A., Qin, Z., Chen, M., Liu, J., ADAutomation: An activity diagram based automated GUI testing framework for smartphone applications (2014) Proc. Int. Conf. Software Security and Reliability, pp. 68-77; Amalfitano, D., Fasolino, A.R., Tramontana, P., A GUI crawling-based technique for Android mobile application testing (2011) Proc. Int. Conf. Software Testing, Verification and Validation Workshop, pp. 252-261; Memon, A.M., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse engineering of graphical user interfaces for testing (2013) Proc. Working Conf. on Reverse Engineering, pp. 260-269; Memon, A.M., Banerjee, I., Nguyen, B.N., Robbins, B., The first decade of GUI ripping: Extensions, applications, and broader impacts (2013) Proc. Working Conf. on Reverse Engineering, pp. 11-20; Amalfitano, D., Using GUI ripping for automated testing of Android applications (2012) Proc. IEEE/ACM Int. Conf. on Automated Software Engineering, pp. 258-261; (2014) White Paper, , http://www.keynote.com/resources/whitepapers/testing-strategies-tactics-for-mobile-applications, Keynote Systems Testing strategies and tactics for mobile applications; Siemens, C., (2014) The Search of Mobile App Test Automation, , http://engineering.zillow.com/the-search-for-mobile-app-test-automation/; An, S., Automated concolic testing of smart phone apps (2012) Proc. ACM SIG-SOFT Int. Symp. Foundations of Software Engineering, pp. 1-11; Satoh, I., A testing framework for mobile computing software (2012) IEEE Trans. Softw. Eng., 29 (12), pp. 1112-1121; Song, H., An integrated test automation framework for testing on heterogeneous mobile platforms (2011) Proc. ACIS Int. Symp. Software and Network Engineering, pp. 141-145; Hargassner, W., A script-based test-bed for mobile software frameworks (2008) Proc. Int. Conf. Software Testing, Verification, and Validation, pp. 448-457; Johnson, D.B., Efficient algorithms for shortest paths in sparse networks (1977) J. ACM, 24 (1), pp. 1-13","Gao, J.; Department of Computer Engineering, United States; email: jerry.gao@sjsu.edu",,,"World Scientific Publishing Co. Pte Ltd",,,,,02181940,,ISEKE,,"English","Int. J. Software Engineer. Knowledge Engineer.",Conference Paper,"Final","",Scopus,2-s2.0-85013324766
"Salihu I.A., Ibrahim R.","57077031600;23388898900;","Systematic exploration of android apps' events for automated testing",2016,"ACM International Conference Proceeding Series",,,,"50","54",,5,"10.1145/3007120.3011072","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015106455&doi=10.1145%2f3007120.3011072&partnerID=40&md5=7fa7a721cb29cf21f943a7c6fd18c9b5","Universiti Tun Hussein Onn Malaysia (UTHM), 86400 Parit Raja, Batu Pahat, Johor, Malaysia","Salihu, I.A., Universiti Tun Hussein Onn Malaysia (UTHM), 86400 Parit Raja, Batu Pahat, Johor, Malaysia; Ibrahim, R., Universiti Tun Hussein Onn Malaysia (UTHM), 86400 Parit Raja, Batu Pahat, Johor, Malaysia","The popularity of mobile devices is ever increasing which led to rapid increase in the development of mobile applications. GUI testing has been an effective means of validating Android apps. However, it still suffers a strong challenge about how to explore event sequence in the GUIs. This paper proposes a hybrid approach for systematic exploration of mobile apps which exploit the capabilities of both static and dynamic approaches while trying to improve app's state exploration. Our approach is based static analysis on app's bytecode to extract events supported by an app. The generated events are used to dynamically explore an app at run-time. The experimental results show that our approach can explore significant number of app's state for the generation of high quality test case.","Android app; Code coverage; Dynamic analysis; GUI testing; Hybrid testing; Static analysis; Systematic exploration; Test case generation","Dynamic analysis; Graphical user interfaces; Mobile computing; Static analysis; Code coverage; GUI testing; Hybrid testing; Systematic exploration; Test case generation; Android (operating system)",,,,,"Universiti Tun Hussein Onn Malaysia, UTHM

Universiti Tun Hussein Onn Malaysia, UTHM","We would like to acknowledge the support from UTHM in undertaking the research, under the Graduate Research Incentive Grants (GIPS), Vote U308, Universiti Tun Hussein Onn Malaysia (UTHM)",,"(2016) Atif Memon. Android GUITAR, , https://sourceforge.net/projects/guitar/, September; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), , IEEE; Amalfitano, D., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 258-261. , Essen, Germany; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications. ACM; Bhattacharya, P., An empirical analysis of bug reports and bug fixing in open source android apps (2013) Software Maintenance and Reengineering (CSMR), 2013 17th European Conference On. IEEE; Coimbra Morgado, I., Paiva, A.C., Pascoal Faria, J., Dynamic reverse engineering of graphical user interfaces (2012) International Journal on Advances in Software, 5 (3-4), pp. 224-236; (2016) An Open Source Java Code Coverage Tool, , http://emma.sourceforge.net/, September; Enck, W., TaintDroid: An information-flow tracking system for realtime privacy monitoring on smartphones (2014) ACM Transactions on Computer Systems (TOCS), 32 (2), p. 5; Fuchs, A.P., Chaudhuri, A., Foster, J.S., (2009) Scandroid: Automated Security Certification of Android Applications, 2 (3). , http://www.cs.umd.edu/avik/projects/scandroidascaa, Manuscript, Univ. of Maryland; Gartner, I., (2016) Mobile Apps Will Be A Vehicle for Cognizant Computing, , http://www.gartner.com/newsroom/id/2654115, September; (2016) Program Analysis Toolkit for Android, , http://web.cse.ohio-state.edu/presto/software/gator/, September; (2016), http://code.google.com/p/robotium, GoogleCode, Robotium. September; Hu, C., Neamtiu, I., Automating GUI testing for Android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test. ACM; Islam, R., Islam, R., Mazumder, T., Mobile application and its global impact (2010) International Journal of Engineering & Technology (IJEST); Kull, A., Automatic GUi model generation: State of the art (2012) IEEE 23rd International Symposium on in Software Reliability Engineering Workshops (ISSREW); Linares-Vásquez, M., Enabling testing of android apps (2015) Proceedings of the 37th International Conference on Software Engineering, 2. , IEEE Press; Minelli, R., Lanza, M., Software analytics for mobile applications-insights & lessons learned (2013) Software Maintenance and Reengineering (CSMR), 2013 17th European Conference on Software Maintenance and Reengineering; (2016) UI Application Exerciser, , http://developer.android.com/guide/developing/tools/monkey.html, September; Nayebi, F., Desharnais, J.-M., Abran, A., The state of the art of mobile application usability evaluation (2012) CCECE; Nguyen, B., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Rountev, A., Yan, D., Static reference analysis for gui objects in android software (2014) Proceedings of Annual IEEE/ACM International Symposium on Code Generation and Optimization, pp. 143-153. , ACM: Orlando, FL, USA; Salva, S., Zafimiharisoa, S.R., Model reverse-engineering of mobile applications with exploration strategies (2014) Proceedings of the 9th International Conference on Software Engineering Advances (ICSEA), , October 12-16, 2014, Nice, France; Silva, C.E., Campos, J.C., Combining static and dynamic analysis for the reverse engineering of web applications (2013) Proceedings of the 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 107-112. , ACM: London, United Kingdom; Yang, S., Static control-flow analysis of user-driven callbacks in Android applications (2015) International Conference on Software Engineering (ICSE); Yang, S., Static window transition graphs for android (T) (2015) Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 658-668. , IEEE Computer Society; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) Fundamental Approaches to Software Engineering, pp. 250-265. , Springer",,"Abdulrazak B.Steinbauer M.Khalil I.Pardede E.Anderst-Kotsis G.","International Organization of Information Integration and Web-based Applications and Services (@WAS)","Association for Computing Machinery","14th International Conference on Advances in Mobile Computing and Multimedia, MoMM 2016","28 November 2016 through 30 November 2016",,126323,,9781450348065,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-85015106455
"Saddler J., Cohen M.B.","57192652492;8719004300;","EventFlowSlicer: Goal based test generation for graphical user interfaces",2016,"A-TEST 2016 - Proceedings of the 7th International Workshop on Automating Test Case Design, Selection, and Evaluation, co-located with FSE 2016",,,,"8","15",,1,"10.1145/2994291.2994293","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85007037748&doi=10.1145%2f2994291.2994293&partnerID=40&md5=709daccea08bf139c9efb4f7c1b64a25","Department of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE  68588-0115, United States","Saddler, J., Department of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE  68588-0115, United States; Cohen, M.B., Department of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE  68588-0115, United States","Automated test generation techniques for graphical user interfaces include model-based approaches that generate tests from a graph or state machine model, capture-replay methods that require the user to demonstrate each test case, and pattern-based approaches that provide templates for abstract test cases. There has been little work, however, in automated goal-based testing, where the goal is a realistic user task, a function, or an abstract behavior. Recent work in human performance regression testing has shown that there is a need for generating multiple test cases that execute the same user task in different ways, however that work does not have an efficient way to generate tests and only a single type of goal has been considered. In this paper we expand the notion of goal based interface testing to generate tests for a variety of goals. We develop a direct test generation technique, EventFlowSlicer, that is more efficient than that used in human performance regression testing, reducing run times by 92.5% on average for test suites between 9 to 26 steps and 63.1% across all test suites. Our evaluation shows that the number of tests generated is non-trivial more than can be easily captured manually. On average EventFlowSlicer generated 38 test cases per suite, and as many as 200 test cases which all achieve the same goal for a specified task. © 2016 ACM.","Goal-based testing; Graphical user interfaces; Software test generation","Graphical user interfaces; Interface states; Testing; User interfaces; Automated test generations; Capture-replay; Human performance; Interface testings; Model based approach; Regression testing; State machine models; Test generations; Software testing",,,,,"National Science Foundation, NSF: 1161767, CCF- 1161767, CNS-1205472","This work was supported in part by NSF grants CCF- 1161767 and CNS-1205472.",,"Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated Java gui modeling for model-based testing purposes (2011) 2011 Eighth International Conference on Information Technology: New Generations, pp. 268-273. , IEEE, Apr; Arlt, S., Podelski, A., Banerjee, I., Memon, A.M., Schaf, M., Lightweight static analysis for GUI testing (2012) IEEE International Symposium on Software Reliability Engineering; Bae, G., Rothermel, G., Bae, D.-H., On the relative strengths of model-based and dynamic event extraction-based gui testing techniques: An empirical study (2012) 2012 IEEE 23rd International Symposium on Software Reliability Engineering, pp. 181-190. , Nov; Bauersfeld, S., Vos, T.E.J., GUITest: A Java library for fully automated GUI robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 330-333. , New York, NY, USA. ACM; Carino, S., Andrews, J.H., Dynamically testing GUIs using ant colony optimization (T) (2015) Automated Software Engineering (ASE), IEEE/ACM International Conference on, pp. 138-148. , IEEE, Nov; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage no false alarms (2012) Proceedings of the International Symposium on Software Testing and Analysis, pp. 67-77. , 2012; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) IEEE International Conference on Software Testing, Verification and Validation, pp. 81-90. , Apr; Memon, A.M., An event-ow model of GUI-based applications for testing (2007) Journal of Software Testing, Verification and Reliability, 17, pp. 137-157; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) Software Engineering IEEE Transactions on, 31 (10), pp. 884-896. , Oct; Moreira, R.M.L.M., Paiva, A.C.R., PBGT tool: An integrated modeling and testing environment for pattern-based gui testing (2014) Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE '14, pp. 863-866. , New York, NY, USA. ACM; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for GUI modeling and testing (2013) Proceedings of the 24th Annual International Symposium on Software Reliability Engineering (ISSRE 2013); Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of GUI-driven software (2013) Automated Software Engineering: An International Journal, 21, pp. 65-105; Swearngin, A., Cohen, M., John, B., Bellamy, R., Easing the generation of predictive human performance models from legacy systems (2012) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI, pp. 2489-2498; Swearngin, A., Cohen, M.B., John, B.E., Bellamy, R.K., Human performance regression testing (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 152-161; Vos, T.E., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des., 6 (3), pp. 46-83. , July; Yuan, X., Cohen, M., Memon, A., GUI interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574",,"Eldh S.Prasetya W.Vos T.","ACM SIGSOFT","Association for Computing Machinery, Inc","7th International Workshop on Automating Test Case Design, Selection, and Evaluation, A-TEST 2016","18 November 2016",,124940,,9781450344012,,,"English","A-TEST - Proc. Int. Workshop Autom. Test Case Des., Sel., Evaluation, co-located FSE",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85007037748
"Zeng X., Li D., Zheng W., Xia F., Deng Y., Lam W., Yang W., Xie T.","57192096637;57192106713;12243732200;57192098319;57192106631;56879749600;55607069500;55574210063;","Automated test input generation for android: Are we really there yet in an industrial case?",2016,"Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering","13-18-November-2016",,,"987","992",,39,"10.1145/2950290.2983958","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84997503425&doi=10.1145%2f2950290.2983958&partnerID=40&md5=a99781ea8ca5bab9fe3272bc1a99cb66","Tencent, Inc, China; University of Illinois at Urbana-Champaign, United States","Zeng, X., Tencent, Inc, China; Li, D., University of Illinois at Urbana-Champaign, United States; Zheng, W., Tencent, Inc, China; Xia, F., Tencent, Inc, China; Deng, Y., Tencent, Inc, China; Lam, W., University of Illinois at Urbana-Champaign, United States; Yang, W., University of Illinois at Urbana-Champaign, United States; Xie, T., University of Illinois at Urbana-Champaign, United States","Given the ever increasing number of research tools to auto-matically generate inputs to test Android applications (or simply apps), researchers recently asked the question \Are we there yet?"" (in terms of the practicality of the tools). By conducting an empirical study of the various tools, the researchers found that Monkey (the most widely used tool of this category in industrial settings) outperformed all of the research tools in the study. In this paper, we present two significant extensions of that study. First, we conduct the fist industrial case study of applying Monkey against WeChat, a popular messenger app with over 762 million monthly active users, and report the empirical findings on Monkey's limitations in an industrial setting. Second, we de-velop a new approach to address major limitations of Mon-key and accomplish substantial code-coverage improvements over Monkey. We conclude the paper with empirical insights for future enhancements to both Monkey and our approach. ©.2016 ACM.","Android; Code coverage; GUI testing; Test generation","Industrial research; Software engineering; Software testing; Android; Android applications; Code coverage; Empirical findings; GUI testing; Industrial case study; Industrial settings; Test generations; Android (operating system)",,,,,"National Science Foundation, NSF: 1434582, 1513939, 1564274",,,"Android 64k Method Limit, , https://developer.android.com/studio/build/multidex.html; Emma: A Free Java Code-coverage Tool, , http://emma.sourceforge.net/; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps FSE'12, pp. 599-609; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps OOPSLA'13, pp. 641-660; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning OOPSLA'13, pp. 623-640; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? ASE'15, pp. 429-440; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps FSE'13, pp. 224-234; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of Android apps FSE'14, pp. 599-609; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for Android FSE'12, pp. 658-668; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications FASE'13, pp. 250-265",,"Su Z.Zimmermann T.Cleland-Huang J.","Special Interest Group on Software Engineering (ACM SIGSOFT)","Association for Computing Machinery","24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016","13 November 2016 through 18 November 2016",,124602,,9781450342186,,,"English","Proc ACM SIGSOFT Symp Found Software Eng",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84997503425
"Clapp L., Bastani O., Anand S., Aiken A.","57189892878;56786340300;23088115900;57203049517;","Minimizing GUI event traces",2016,"Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering","13-18-November-2016",,,"422","434",,22,"10.1145/2950290.2950342","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84997107169&doi=10.1145%2f2950290.2950342&partnerID=40&md5=ef20f97e827c46908931cfc5b9382fc0","Stanford University, Stanford, CA, United States","Clapp, L., Stanford University, Stanford, CA, United States; Bastani, O., Stanford University, Stanford, CA, United States; Anand, S., Stanford University, Stanford, CA, United States; Aiken, A., Stanford University, Stanford, CA, United States","GUI input generation tools for Android apps, such as Android's Monkey, are useful for automatically producing test inputs, but these tests are generally orders of magnitude larger than necessary, making them difficult for humans to understand. We present a technique for minimizing the output of such tools. Our technique accounts for the nondeterministic behavior of mobile apps, producing small event traces that reach a desired activity with high probability. We propose a variant of delta debugging, augmented to handle non-determinism, to solve the problem of trace minimization. We evaluate our algorithm on two sets of commercial and open-source Android applications, showing that we can minimize large event traces reaching a particular application activity, producing traces that are, on average, less than 2% the size of the original traces. © 2016 ACM.","Android; Delta Debugging; Testing; Trace Minimization","Graphical user interfaces; Open source software; Software engineering; Testing; Android; Android applications; Delta debugging; Generation tools; High probability; Nondeterministic behavior; Orders of magnitude; Trace minimization; Android (operating system)",,,,,,"Amazon Web Services (AWS)",,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Memon, A.M., Using gui ripping for automated testing of android applications (2012) IEEE/ACM International Conference on Auto-mated Software Engineering, ASE12, Essen, Germany, September 3-7 2012, pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated modelbased testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) 20th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE-20), SIGSOFT/FSE12, Cary, NC, USA-November 11-16 2012, p. 59; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA 2013, Part of SPLASH 2013, pp. 641-660. , Indianapolis, IN, USA, October 26-31 2013; Bhoraskar, R., Han, S., Jeon, J., Azim, T., Chen, S., Jung, J., Nath, S., Wetherall, D., Brahmastra: Driving apps to test the security of third-party components (2014) Proceedings of the 23rd USENIX Secu-rity Symposium, San Diego, CA, USA, August 20-22 2014, pp. 1021-1036; Burger, M., Zeller, A., Minimizing reproduction of software failures (2011) Proceedings of the 20th Interna-Tional Symposium on Software Testing and Analysis, ISSTA 2011, Toronto, ON, Canada, July 17-21 2011, pp. 221-231; Cheung, T.L., Okamoto, K.F.M., III, Liu, X., Akella, V., Markov decision process (MDP) framework for optimizing software on mobile phones (2009) Proceed-ings of the 9th ACM & IEEE International Confer-ence on Embedded Software, EMSOFT 2009, Grenoble, France, October 12-16, 2009, pp. 11-20; Choi, J., Zeller, A., Isolating failure-inducing thread schedules (2002) Proceedings of the 11th International Sym-posium on Software Testing and Analysis, ISSTA 2002, Rome, Italy, July 22-24, 2002, pp. 210-220; Choi, W., Necula, G.C., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Program-ming Systems Languages & Applications, OOPSLA 2013, Part of SPLASH 2013, pp. 623-640. , Indianapolis, IN, USA, October 26-31 2013; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? in (2015) 30th IEEE/ACM International Conference on Auto-mated Software Engineering, ASE 2015, Lincoln, NE, USA, November 9-13 2015, pp. 429-440; Gomez, L., Neamtiu, I., Azim, T., Millstein, T.D., RERAN: Timing-And touch-sensitive record and replay for Android (2013) 35th International Conference on Soft-ware Engineering, ICSE 13, San Francisco, CA, USA, May 18-26 2013, pp. 72-81; https://developer.android.com/training/testing/uitesting/espresso-Testing.html, Google Espresso; https://developer.android.com/tools/help/monkey.html, Google UI/Application exerciser monkey; Halpern, M., Zhu, Y., Peri, R., Reddi, V.J., Mosaic: Cross-platform user-interaction record and replay for the fragmented Android ecosystem (2015) 2015 IEEE International Symposium on Performance Analysis of Systems and Software, ISPASS 2015, Philadelphia, PA, USA, March 29-31 2015, pp. 215-224; Hao, S., Liu, B., Nath, S., Halfond, W.G.J., Govindan, R., PUMA: Programmable ui-Automation for large-scale dynamic analysis of mobile apps (2014) The 12th Annual International Conference on Mobile Sys-Tems, Applications, and Services, MobiSys14, pp. 204-217. , Bretton Woods, NH, USA, June 16-19 2014; Hu, Y., Azim, T., Neamtiu, I., Versatile yet lightweight record-And-replay for Android (2015) Pro-ceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, pp. 349-366. , Systems, Languages, and Applications, OOPSLA 2015, part of SLASH 2015, Pittsburgh, PA, USA, October 25-30 2015; Kaelbling, L.P., Littman, M.L., Moore, A.W., Reinforcement learning: A survey (1996) J. Artif. Intell. Res. (JAIR), 4, pp. 237-285; Lee, K., Flinn, J., Giuli, T.J., Noble, B., Peplin, C., AMC: Verifying user interface properties for vehicular applications (2013) The 11th Annual International Con-ference on Mobile Systems, Applications, and Services, MobiSys13, Taipei, Taiwan, June 25-28 2013, pp. 1-12; Liu, B., Nath, S., Govindan, R., Liu, J., DECAF: Detecting and characterizing ad fraud in mobile apps (2014) Proceedings of the 11th USENIX Symposium on Networked Systems Design and Implementation, pp. 57-70. , NSDI 2014, Seattle, WA, USA, April 2-4 2014; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Joint Meeting of the European Software Engineering Confer-ence and the ACM SIGSOFT Symposium on the Foun-dations of Software Engineering, ESEC/FSE13, Saint Petersburg, Russian Federation, pp. 224-234. , August 18-26 2013; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of Android apps (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, (FSE-22), Hong Kong, China, pp. 599-609. , November 16-22 2014; Misherghi, G., Su, Z., HDD: Hierarchical delta debugging (2006) 28th International Conference on Software Engineering (ICSE 2006), pp. 142-151. , Shanghai, China, May 20-28, 2006; Nath, S., Lin, F.X., Ravindranath, L., Padhye, J., Smartads: Bringing contextual ads to mobile apps (2013) The 11th Annual International Conference on Mo-bile Systems, Applications, and Services, MobiSys13, Taipei, Taiwan, June 25-28 2013, pp. 111-124; Rastogi, V., Chen, Y., Enck, W., Appsplayground: Automatic security analysis of smartphone applications (2013) Third ACM Conference on Data and Application Se-curity and Privacy, CODASPY13, San Antonio, TX, USA, February 18-20 2013, pp. 209-220; Ravindranath, L., Nath, S., Padhye, J., Balakrishnan, H., Automatic and scalable fault detection for mobile applications (2014) The 12th Annual International Con-ference on Mobile Systems, Applications, and Services, MobiSys14, pp. 190-203. , Bretton Woods, NH, USA, June 16-19 2014; Robotium Robotium, , https://github.com/robotiumtech/robotium; Sasnauskas, R., Regehr, J., Intent fuzzer: Crafting intents of death (2014) Proceedings of the 2014 Joint In-Ternational Workshop on Dynamic Analysis (WODA) and Software and System Performance Testing, De-bugging, and Analytics (PERTEA), pp. 1-5. , WODA+PERTEA 2014, San Jose, CA, USA, July 22 2014; Scott, C., Panda, A., Brajkovic, V., Necula, G., Krishnamurthy, A., Shenker, S., Minimizing faulty executions of distributed systems (2016) 13th USENIX Sym-posium on Networked Systems Design and Implementa-Tion (NSDI) 16, pp. 291-309. , Santa Clara, CA USENIX Association; Scott, C., Wundsam, A., Raghavan, B., Panda, A., Or, A., Lai, J., Huang, E., Shenker, S., Troubleshooting blackbox SDN control software with minimal causal sequences (2014) ACM SIGCOMM 2014 Con-ference, SIGCOMM14, Chicago, IL, USA, August 17-22 2014, pp. 395-406; Selendroid Selendroid, , http://selendroid.io/; Sutton, R.S., Barto, A.G., (1998) Reinforcement Learning: An Introduction, 28. , MIT press; Wilcoxon, F., Individual comparisons by ranking methods (1945) Biometrics Bulletin, 1 (6), pp. 80-83; Xamarin Calabash, , http://calaba.sh/; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) Fundamental Approaches to Software Engineering-16th International Conference, FASE 2013, Held As Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, Rome, Italy, March 16-24, 2013. Proceedings, pp. 250-265; Ye, H., Cheng, S., Zhang, L., Jiang, F., Droidfuzzer: Fuzzing the Android apps with intent-filter tag (2013) The 11th International Conference on Advances in Mobile Computing & Multimedia, MoMM 13, Vienna, Aus-Tria, December 2-4 2013, p. 68; Zeller Yesterday, A., My program worked today, it does not why? (1999) Software Engineering-ESEC/FSE99, 7th European Software Engineering Conference, Held Jointly with the 7th ACM SIGSOFT Symposium on the Foundations of Software Engineering, Toulouse, France September 1999, pp. 253-267; Zeller, A., Isolating cause-effect chains from computer programs (2002) Proceedings of the Tenth ACM SIGSOFT Symposium on Foundations of Software Engineering 2002, pp. 1-10. , Charleston, South Carolina, USA, November 18-22, 2002; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Trans. Software Eng, 28 (2), pp. 183-200",,"Su Z.Zimmermann T.Cleland-Huang J.","Special Interest Group on Software Engineering (ACM SIGSOFT)","Association for Computing Machinery","24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016","13 November 2016 through 18 November 2016",,124602,,9781450342186,,,"English","Proc ACM SIGSOFT Symp Found Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-84997107169
"Miguel J.L.S., Takada S.","57192077497;7202611302;","GUI and usage model-based test case generation for android applications with change analysis",2016,"Mobile! 2016 - Proceedings of the 1st International Workshop on Mobile Development, co-located with SPLASH 2016",,,,"43","44",,5,"10.1145/3001854.3001865","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84997017971&doi=10.1145%2f3001854.3001865&partnerID=40&md5=859ed231d31a1344f4b7d0c0fc2078e4","Keio University, Yokohama, Japan","Miguel, J.L.S., Keio University, Yokohama, Japan; Takada, S., Keio University, Yokohama, Japan","This paper presents an approach to model-based test case generation for Android GUI testing. Our approach aims to formulate a technique that can achieve better code coverage by incorporating manual testing methods. Our approach was evaluated using three applications based on the statement coverage achieved. © 2016 ACM.","Android; GUI; Testing","Graphical user interfaces; Model checking; Testing; Android; Android applications; Change analysis; Code coverage; Manual testing; Model-based test; Statement coverage; Usage modeling; Android (operating system)",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proc. of ASE, 2012, pp. 258-261; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proc. of OOPSLA, 2013, pp. 623-640; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (2015) Proc. of ASE, 2015, pp. 429-440; Linares-Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable GUI-based execution scenarios (2015) Proc. of MSR, 2015, pp. 111-122; San Miguel, J.L., Takada, S., (2015) Generating Test Cases for Android Applications through GUI Modeling, Usage Modeling, and Change Analysis, pp. 146-147. , C3S2E15; San Miguel, J.L., Takada, S., Generating test cases for GUI-based android applications by modeling and change analysis (2016) 75th IPSJ, p. 2; Yang, S., Zhang, H., Wu, H., Wang, Y., Yan, D., Rountev, A., Static window transition graphs for android (2015) Proc. of ASE, 2015, pp. 658-668",,"Flynn L.Sillitti A.","ACM SIGPLAN","Association for Computing Machinery, Inc","1st International Workshop on Mobile Development, Mobile! 2016","31 October 2016",,124457,,9781450346436,,,"English","Mob.! - Proc. Int. Workshop Mob. Dev., co-located SPLASH",Conference Paper,"Final","",Scopus,2-s2.0-84997017971
"Klammer C., Ramler R., Stummer H.","24823007200;23095597800;57194550840;","Harnessing Automated Test Case Generators for GUI Testing in Industry",2016,"Proceedings - 42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016",,, 7592801,"227","234",,9,"10.1109/SEAA.2016.60","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020725383&doi=10.1109%2fSEAA.2016.60&partnerID=40&md5=f6e4f01b781d143af0cf25eb859b925a","Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; KEBA AG, Gewerbepark Urfahr 14-16, Linz, A-4041, Austria","Klammer, C., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Stummer, H., KEBA AG, Gewerbepark Urfahr 14-16, Linz, A-4041, Austria","Modern graphical user interfaces (GUIs) are highly dynamic and support multi-touch interactions and screen gestures besides conventional inputs via mouse and keyboard. Hence, the flexibility of modern GUIs enables countless usage scenarios and combinations including all kind of interactions. From the viewpoint of testing, this flexibility results in a combinatorial explosion of possible interaction sequences. It dramatically raises the required time and effort involved in GUI testing, which brings manual exploration as well as conventional regression testing approaches to its limits. Automated test generation (ATG) has been proposed as a solution to reduce the effort for manually designing test cases and to speed-up test execution cycles. In this paper we describe how we successfully harnessed a state-of-the-art ATG tool (Randoop) developed for code-based API testing to generate GUI test cases. The key is an adapter that transforms API calls to GUI events. The approach is the result of a research transfer project with the goal to apply ATG for testing of human machine interfaces used to control industrial machinery. In this project the ATG tool was used to generate unit test cases for custom GUI controls and system tests for exploring navigation scenarios. It helped to increase the test coverage and was able reveal new defects in the implementation of the GUI controls as well as in the GUI application. © 2016 IEEE.","GUI testing; Industry experience report; Test automation; Test case generation; User interface testing","Application programs; Automation; Industrial research; Machinery; Software engineering; Software testing; Touch screens; User interfaces; GUI testing; Industry experience; Interface testings; Test Automation; Test case generation; Graphical user interfaces",,,,,,,,"Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., McMinn, P., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86 (8), pp. 1978-2001; Arts, T., Hughes, J., Norell, U., Svensson, H., Testing AUTOSAR software with QuickCheck (2015) 8th Int. Conf. on Software Testing, Verification and Validation Workshops (ICSTW), , April; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694. , Oct; Fodeh, J., Adventures with test monkeys (2012) Experiences of Test Automation: Case Studies of Software Test Automation, , D. Graham and M. Fewster, Eds. Addison-Wesley Professional; Forrester, J.E., Miller, B.P., An empirical study of the robustness of Windows NT applications using random testing (2000) 4th USENIX Windows Systems Symposium, 4. , WSS; Fraser, G., Arcuri, A., EvoSuite: Automatic test suite generation for object-oriented software (2011) 19th Symposium and 13th European Conf on Foundations of Software Engineering (ESEC/FSE); Galler, S.J., Aichernig, B.K., Survey on test data generation tools (2014) International Journal on Software Tools Technology Transfer (STTT), 16 (6), pp. 727-751. , Nov; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Design Patterns: Elements of Reusable Object-oriented Software, , Addison-Wesley; Gorschek, T., Wohlin, C., Carre, P., Larsson, S., A model for technology transfer in practice (2006) IEEE Software, 23 (6), pp. 88-95. , Nov.-Dec; Lettner, D., Angerer, F., Prähofer, H., Grünbacher, P., A case study on software ecosystem characteristics in industrial automation software (2014) Int. Conf. on Software and System Process (ICSSP); Ma, L., Artho, C., Zhang, C., Sato, H., Gmeiner, J., Ramler, R., GRT: An automated test generator using orchestrated program analysis (2015) 30th Int. Conf. on Automated Software Engineering (ASE), , Nov; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105. , March; Nyman, N., Using monkey test tools (2000) Software Testing and Quality Engineering, 29 (2), pp. 18-23. , January; Pacheco, C., Ernst, M.D., Randoop: Feedback-directed random testing for Java (2007) Companion to the 22nd Conf. on Object-Oriented Programming Systems and Applications (OOPSLA); Pacheco, C., Lahiri, S.K., Ball, T., Finding errors in. net with feedback-directed random testing (2008) Int. Symposium on Software Testing and Analysis (ISSTA); Ramler, R., Winkler, D., Schmidt, M., Random test case generation and manual unit testing: Substitute or complement in retrofitting tests for legacy code (2012) 38th Euromicro Conf. on Software Engineering and Advanced Applications (SEAA); Robinson, B., Ernst, M.D., Perkins, J.H., Augustine, V., Li, N., Scaling up automated test generation: Automatically generating maintainable regression unit tests for programs (2011) 26th Int. Conf. on Automated Software Engineering (ASE); Schulze, C., Ganesan, D., Lindvall, M., Cleaveland, R., Goldman, D., Assessing model-based testing: An empirical study conducted in industry (2014) 36th Int. Conf. on Software Engineering (ICSE); Tan, R.P., Edwards, S.H., An assertion checking wrapper design for Java (2003) Specification and Verification of Component-Based Systems Workshop (SAVCBS), , September; Tillmann, N., De Halleux, J., Pex: White box test generation for. NET (2008) 2nd Int. Conf. on Tests and Proofs (TAP), LNCS 4966; Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TESTAR: Tool support for test automation at the user interface level (2015) Int. Journal of Information System Modeling and Design, 6 (3), pp. 46-83. , July; Wetzlmaier, T., Ramler, R., Putschlögl, W., A framework for monkey GUI testing (2016) 9th Int. Conf. on Software Testing, Verification and Validation (ICST), , April",,,"Austrian Airlines;University of Cyprus","Institute of Electrical and Electronics Engineers Inc.","42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016","31 August 2016 through 2 September 2016",,124363,,9781509028191,,,"English","Proc. - Euromicro Conf. Softw. Eng. Adv. Appl., SEAA",Conference Paper,"Final","",Scopus,2-s2.0-85020725383
"Sun C., Zhang Z., Jiang B., Chan W.K.","57191955349;55721906300;56727207300;55471383000;","Facilitating Monkey Test by Detecting Operable Regions in Rendered GUI of Mobile Game Apps",2016,"Proceedings - 2016 IEEE International Conference on Software Quality, Reliability and Security, QRS 2016",,, 7589809,"298","306",,3,"10.1109/QRS.2016.41","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84995380105&doi=10.1109%2fQRS.2016.41&partnerID=40&md5=d23a84612e2f9ab3be5152c28546e7db","State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China; School of Computer Science and Engineering, Beihang University, Beijing, China; Department of Computer Science, City University of Hong Kong, Hong Kong","Sun, C., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China; Zhang, Z., State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China; Jiang, B., School of Computer Science and Engineering, Beihang University, Beijing, China; Chan, W.K., Department of Computer Science, City University of Hong Kong, Hong Kong","Graphical User Interface (GUI) is a component of many software applications. Many mobile game applications in particular have to provide excellent user experiences using graphical engines to render GUI screens. On a rendered GUI screen such as a treasury map, no GUI widget is embodied in it and the operable GUI regions, each of which is a region that triggers actions when certain events acting on these regions, may only be implicitly determinable. Traditional testing tools like monkey test do not effectively generate effective event sequences over such operable GUI regions. Our insight is that operable regions in a rendered GUI screen of many mobile game applications are given with visible hints to catch user attentions. In this paper, we propose Smart Monkey, which uses the fundamental features of a screen, including color, intensity, and texture, as visual signals to detect operable GUI region candidates, and iteratively identifies and confirms the real operable GUI regions by launching GUI events to the region. We have implemented Smart Monkey as a testing tool for Android apps and conducted case studies on real-world applications to compare it with a peer technique. The empirical results show that it effective in identifying such operable regions and thus able to generate functional event sequences more efficiently. © 2016 IEEE.","game testing; monkey test; rendered GUI","Application programs; Computer software selection and evaluation; Iterative methods; Real time systems; Rendering (computer graphics); Software reliability; User interfaces; Event sequence; Fundamental features; Game testing; Graphical user interfaces (GUI); Software applications; User attention; User experience; Visual signals; Graphical user interfaces",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (ICSTW 2011) 2011 IEEE Fourth International Conference, pp. 252-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., A toolset for GUI testing of Android applications (2012) Software Maintenance (ICSM), 2012 28th IEEE International Conference, pp. 650-653; Android Developer Website, , http://cs.szpt.edu.cn/android/tools/help/monkeyrunner_concepts.html, Monkeyrunner; The Tool Android Monkey, , http://cs.szpt.edu.cn/android/tools/help/monkey.html, Android Developer Website; Uiautomator, , http://wear.techbrood.com/tools/help/uiautomator/, Android Developer Website; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) ACM SIGPLAN Notices, 48 (10), pp. 641-660; Bay, H., Tuytelaars, T., Van Gool, L., Surf Speeded up robust features (2006) Computer Vision, ECCV; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proceedings of the Twentysecond IEEE/ACM International Conference on Automated Software Engineering, pp. 333-342; Chang, T.H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 1535-1544; Cheng, M., Mitra, N.J., Huang, X., Torr, P.H., Hu, S., Global contrast based salient region detection (2015) IEEE Transactions on Pattern Analysis and Machine Intelligence, 37 (3), pp. 569-582; Cheng, M.M., Zhang, Z., Lin, W.Y., Torr, P., BING Binarized normed gradients for objectness estimation at 300fps (2014) Proceedings of 2014 IEEE Conference on Computer Vision and Pattern Recognition, CVPR, 2007, pp. 3286-3293; Cocosplay, , http://play.cocos.com, Cocos Play; (2014) Jolt Awards, , Dr.Dobbs.com. The Best Testing Tools, Retrieved June 2014; Robotium, , http://code.google.com/p/robotium, Github Inc; Hao, S., Liu, B., Nath, S., Halfond, W., Govindan, R., PUMA: Programmable UI-Automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys '14), pp. 204-217. , ACM, New York, NY, USA; Hou, X., Zhang, L., Saliency detection: A spectral residual approach (2007) Proceedings of 2007 IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2007, pp. 1-8; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proceedings of Third IEEE International Conference on Software Testing, Verification and Validation, ICST 2010, pp. 245-254; Junit, , http://junit.org, Junit4; Opengl, , https://www.opengl.org, Khronos Group; Lin, Y.D., Chu, E.T., Yu, S.C., Lai, Y.C., Improving the accuracy of automated GUI testing for embedded systems (2014) IEEE Software, 31 (1), pp. 39-45; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., A whitebox approach for automated security testing of Android applications on the cloud Proceedings of 7th International Workshop on Automation of Software Test, AST 2012, pp. 22-28; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings. 10th Working Conference on WCRE, pp. 260-269; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Mirzaei, N., Malek, S., Psreanu, C.S., Esfahani, N., Mahmood, R., Testing android apps through symbolic execution (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), pp. 1-5; The Python Language, , https://www.python.org, Python software foundation; Rauf, A., Anwar, S., Jaffer, M.A., Automated GUI test coverage analysis using GA Proceedings of Seventh IEEE International Conference on Information Technology: New Generations, ITNG 2010, pp. 1057-1062; Appiunm, , https://saucelabs.com/appium, Sauce Labs; The Apache Software Foundation, , http://maven.apache.org, Maven; Unity Technologies Unity3d, , http://unity3d.com; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a modeldriven approach Proceedings of the 2006 ACM International Workshop on Automation of Software Test, pp. 9-14; Wikimedia Foundation Inc, , https://en.wikipedia.org/wiki/Computer_Vision, computer vision; Xie, Y., Lu, H., Yang, M.H., Bayesian saliency via low and mid-level cues (2013) Image Processing IEEE Transactions, 22 (5), pp. 1689-1698; Yeh, T., Chang, T.H., Miller, R.C., Sikuli using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192; Zhai, Y., Shah, M., Visual attention detection in video sequences using spatiotemporal cues (2006) Proceedings of the 14th Annual ACM International Conference on Multimedia, pp. 815-824",,,"IEEE Reliability Society;Microsoft;SBA Research;UT Dallas","Institute of Electrical and Electronics Engineers Inc.","2nd IEEE International Conference on Software Quality, Reliability and Security, QRS 2016","1 August 2016 through 3 August 2016",,124291,,9781509041275,,,"English","Proc. - IEEE Int. Conf. Softw. Qual., Reliab. Secur., QRS",Conference Paper,"Final","",Scopus,2-s2.0-84995380105
"Baek Y.-M., Bae D.-H.","57189683657;17433682600;","Automated model-based android GUI testing using multi-level GUI comparison criteria",2016,"ASE 2016 - Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering",,,,"238","249",,76,"10.1145/2970276.2970313","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989195892&doi=10.1145%2f2970276.2970313&partnerID=40&md5=844dcfbb1075cb6795687c8f7bf7015e","Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea","Baek, Y.-M., Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea; Bae, D.-H., Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea","Automated Graphical User Interface (GUI) testing is one of the most widely used techniques to detect faults in mobile applications (apps) and to test functionality and usability. GUI testing exercises behaviors of an application under test (AUT) by executing events on GUIs and checking whether the app behaves correctly. In particular, because Android leads in market share of mobile OS platforms, a lot of research on automated Android GUI testing techniques has been performed. Among various techniques, we focus on model-based Android GUI testing that utilizes a GUI model for systematic test generation and effective debugging support. Since test inputs are generated based on the underlying model, accurate GUI modeling of an AUT is the most crucial factor in order to generate effective test inputs. However, most modern Android apps contain a number of dynamically constructed GUIs that make accurate behavior modeling more challenging. To address this problem, we propose a set of multi-level GUI Comparison Criteria (GUICC) that provides the selection of multiple abstraction levels for GUI model generation. By using multilevel GUICC, we conducted empirical experiments to identify the inuence of GUICC on testing effectiveness. Results show that our approach, which performs model-based testing with multi-level GUICC, achieved higher effectiveness than activity-based GUI model generation. We also found that multi-level GUICC can alleviate the inherent state explosion problems of existing a single-level GUICC for behavior modeling of real-world Android apps by exibly manipulating GUICC. © 2016 ACM.","Android application testing; GUI comparison criteria; GUI model gen-eration; GUI testing; Model-based test input generation","Android (operating system); Automation; Competition; Embedded systems; Model checking; Software engineering; Testing; User interfaces; Android applications; Application under tests; Comparison criterion; Graphical user interfaces (GUI); GUI testing; Model-based test; State explosion problems; Testing effectiveness; Graphical user interfaces",,,,,"Ministry of Science, ICT and Future Planning, MSIP

Institute for Information and Communications Technology Promotion, IITP

Institute for Information and Communications Technology Promotion, IITP","This work was supported by Institute for Information & communications Technology Promotion(IITP) grant funded by the Korea government(MSIP) (No.R0126-16-1101, (SW Star Lab) Software R & D for Model-based Analysis and Ver-ification of Higher-order Large Complex System). The au-thors would like to thank Gwangui Hong, Dongwon Seo, and Cheolwoo Chae for building a foundation for this research.",,"Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (ICSTW 2011 IEEE Fourth International Conference on, pp. 252-261. , March; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S.D., Imparato, G., A toolset for gui testing of android applications (2012) Software Maintenance (ICSM 2012 28th IEEE International Conference on, pp. 650-653. , Sept; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using gui ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 258-261. , New York, NY, USA. ACM; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) IEEE Software, 32 (5), pp. 53-59. , Sept; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE '12, pp. 591-5911. , New York, NY, USA. ACM; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) SIGPLAN Not, 48 (10), pp. 641-660. , Oct; Bae, G., Rothermel, G., Bae, D.-H., Comparing model-based and dynamic event-extraction based fguig testing techniques: An empirical study (2014) Journal of Systems and Software, 97, pp. 15-46; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) SIGPLAN Not, 48 (10), pp. 623-640. , Oct; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet? (e (2015) Automated Software Engineering (ASE 2015 30th IEEE/ACM International Conference on, pp. 429-440. , Nov; (2015) Ui/Application Exerciser Monkey, , http://developer.android.com/intl/ko/tools/help/monkey.html, GoogleDevelopers; Gross, F., Fraser, G., Zeller, A., Exsyst: Search-based gui testing (2012) Proceedings of the 34th International Conference on Software Engineering, ICSE '12, pp. 1423-1426. , Piscataway, NJ, USA IEEE Press; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable ui-Automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, MobiSys '14, pp. 204-217. , New York, NY, USA ACM; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test, AST '11, pp. 77-83. , New York, NY, USA ACM; Jaaskelainen, A., Katara, M., Kervinen, A., Maunumaa, M., Paakkonen, T., Takala, T., Virtanen, H., Automatic gui test generation for smartphone applications-An evaluation (2009) Software Engineering-Companion Volume 2009. ICSE-Companion 2009. 31st International Conference on, pp. 112-122. , May; Jensen, C.S., Prasad, M.R., Müller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, ISSTA 2013, pp. 67-77. , New York, NY, USA ACM; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 224-234. , New York, NY, USA ACM; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., A whitebox approach for automated security testing of android applications on the cloud (2012) Proceedings of the 7th International Workshop on Automation of Software Test, AST '12, pp. 22-28. , Piscataway, NJ, USA IEEE Press; Memon, A.M., An event-ow model of gui-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab, 17 (3), pp. 137-157. , Sept; Memon, A.M., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, , Nov; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) SIGSOFT Softw. Eng. Notes, 26 (5), pp. 256-267. , Sept; Mirzaei, N., Malek, S., PǍsǍreanu, C.S., Esfahani, N., Mahmood, R., Testing android apps through symbolic execution (2012) SIGSOFT Softw. Eng. Notes, 37, p. 6. , 1-5, Nov; Nijkamp, E., (2014) Supermonkey, , https://github.com/testobject/supermonkey; Rastogi, V., Chen, Y., Enck, W., Appsplayground: Automatic security analysis of smartphone applications (2013) Proceedings of the Third ACM Conference on Data and Application Security and Privacy, CODASPY '13, pp. 209-220. , New York, NY, USA. ACM; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source gui applications (2006) Proceedings of the 22Nd IEEE International Conference on Software Maintenance, ICSM '06, pp. 145-154. , Washington, DC, USA. IEEE Computer Society; Xie, Q., Memon, A.M., Using a pilot study to derive a gui model for automated testing (2008) ACM Trans. Softw. Eng. Methodol, 18 (2), pp. 71-735. , Nov; Yang, S., Yan, D., Rountev, A., Testing for poor responsiveness in android applications (2013) Engineering of Mobile-Enabled Systems (MOBS 2013 1st International Workshop on the, pp. 1-6. , May; Yang, W., Prasad, M.R., Xie, T., Fundamental approaches to software engineering: 16th international conference, fase (2013) 2013, Held As Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, pp. 250-265. , Rome, Italy, March 16-24, 2013. Proceedings, chapter A Grey-Box Approach for Automated GUI-Model Generation of Mobile Applications Springer Berlin Heidelberg, Berlin, Heidelberg",,"Khurshid S.Lo D.Apel S.","et al.;Lee Foundation;Living Analytics Research Centre (LARC);Singapore Management University (SMU);Singapore Management University (SMU), School of Information Systems;Software Analytics Research Group (SOAR)","Association for Computing Machinery, Inc","31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016","3 September 2016 through 7 September 2016",,123481,,9781450338455,,,"English","ASE - Proc. IEEE/ACM Int. Conf. Autom. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84989195892
"Tang H., Wu G., Wei J., Zhong H.","57191366132;55483767200;34772294900;52865189000;","Generating test cases to expose concurrency bugs in android applications",2016,"ASE 2016 - Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering",,,,"648","653",,14,"10.1145/2970276.2970320","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989180792&doi=10.1145%2f2970276.2970320&partnerID=40&md5=8137c13eecdcc7cf53ea86e36dde00a5","State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, China","Tang, H., State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, China; Wu, G., State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, China; Wei, J., State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, China; Zhong, H., State Key Laboratory of Computer Sciences, Institute of Software, Chinese Academy of Sciences, China","Mobile systems usually support an event-based model of concurrent programming. This model, although advantageous to maintain responsive user interfaces, may lead to subtle concurrency errors due to unforeseen threads interleaving coupled with non-deterministic reordering of asynchronous events. These bugs are very difficult to reproduce even by the same user action sequences that trigger them, due to the undetermined schedules of underlying events and threads. In this paper, we proposed RacerDroid, a novel technique that aims to expose concurrency bugs in android applications by actively controlling event schedule and thread interleaving, given the test cases that have potential data races. By exploring the state model of the application constructed dynamically, our technique starts first to generate a test case that has potential data races based on the results obtained from existing static or dynamic race detection technique. Then it reschedules test cases execution by actively controlling event dispatching and thread interleaving to determine whether such potential races really lead to thrown exceptions or assertion violations. Our preliminary experiments show that RacerDroid is effective, and it confirms real data races, while at the same time eliminates false warnings for Android apps found in the wild. © 2016 ACM.","Android; Data race; Mobile application; Record/replay; Testing","Computer programming; Concurrency control; Software engineering; Testing; User interfaces; Android; Android applications; Asynchronous event; Concurrency errors; Concurrent programming; Data races; Mobile applications; Record/replay; Android (operating system)",,,,,"2015BAF05B01

National Natural Science Foundation of China, NSFC: 61472407

National Basic Research Program of China (973 Program): 2015CB352201","This work is supported by National Natural Science Foundation of China under Grant No. 61472407, National Basic Research Program (973) of China under Grant No. 2015CB352201, and National Key Technology R & D Program under Grant No. 2015BAF05B01.",,"Raychev, V., Vechev, M.T., Sridharan, M., Effective race detection for event-driven programs (2013) OOPSLA, pp. 151-166; Petrov, B., Vechev, M., Sridharan, M., Dolby, J., Race detection for web applications PLDI, 12, pp. 251-262; Engler, D.R., Ashcraft, K., Racerx: Effective, static detection of race conditions and deadlocks (2003) SOSP, pp. 237-252; Voung, J.W., Jhala, R., Lerner, S., Relay: Static race detection on millions of lines of code (2007) ESEC/SIGSOFT FSE, pp. 205-214; Flanagan, C., Freund, S.N., Fasttrack: Efficient and precise dy-namic race detection (2009) PLDI, pp. 121-133; Netzer, R.H.B., Optimal tracing and replay for debugging shared-memory parallel programs (1993) Workshop on Parallel and Distributed Debugging, pp. 1-11; Hsiao, C.-H., Yu, J., Narayanasamy, S., Kong, Z., Pereira, C.L., Pokam, G.A., Chen, P.M., Flinn, J., Race detection for event-driven mobile applications PLDI, 14, pp. 326-336; Maiya, P., Kanade, A., Majumdar, R., Race detection for android applications PLDI, 14, pp. 316-325; Bielik, P., Raychev, V., Vechev, M.T., Scalable race detection for android applications (2015) OOPSLA, pp. 332-348. , ACM; Safi, G., Shahbazian, A., Halfond, W.G.J., Medvidovic, N., Detecting event anomalies in event-based systems (2015) FSE, pp. 25-37; Lin, Y., Radoi, C., Dig, D., Retrofitting concurrency for android applications through refactoring (2014) FSE, pp. 252-341; Fard, A.M., Mirzaaghaei, M., Mesbah, A., Leveraging existing tests in automated test generation for web applications (2014) ASE, pp. 67-78; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning OOPSLA, 13, pp. 623-640; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps OOPSLA, 13, pp. 641-660; Yang, S., Yan, D., Wu, H., Wang, Y., Rountev, A., Static control-flow analysis of user-driven callbacks in android applications ICSE, 15, pp. 89-99; Yang, S., Zhang, H., Wu, H., Static window transition graphs for android ASE'15, pp. 658-668; Github, , https://github.com/RobotiumTech/robotium, Robtotium; Espresso, , https://google.github.io/android-testing-supportlibrary/docs/espresso/; Github, , https://github.com/JesusFreke/smali, Smali; Sen, K., Race directed random testing of concurrent programs (2008) PLDI, 8, pp. 11-21; Edelstein, O., Farchi, E., Nir, Y., Ratsaby, G., Ur, S., Multithreaded Java program test generation (2002) IBM Systems Journal, 41 (1), pp. 111-125; Stoller, S.D., Testing concurrent Java programs using randomized scheduling (2002) Workshop on Runtime Verification (RV' 02 70 of ENTCS; Sen, K., Effective random testing of concurrent programs ASE, 7, pp. 323-332; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-And touch-sensitive record and replay for android ICSE, 13, pp. 72-81; Yongjian, H., Azim, T., Neamtiu, I., Versatile yet lightweight record-And-replay for android OOPSLA'15, pp. 349-366; Android Accessibility, , http://developer.android.com/guide/topics/ui/accessibility/index.html; Yee, H., Pattanaik, S., Greenberg, D.P., Spatiotemporal sensitivity and visual attention for efficient rendering of dynamic environments (2001) ACM Trans. Graph, 20 (1). , Jan; UI Automator, , http://developer.android.com/tools/testingsupport-library/index.html#UIAutomator","Wu, G.; State Key Laboratory of Computer Sciences, China; email: gqwu@otcaix.iscas.ac.cn","Khurshid S.Lo D.Apel S.","et al.;Lee Foundation;Living Analytics Research Centre (LARC);Singapore Management University (SMU);Singapore Management University (SMU), School of Information Systems;Software Analytics Research Group (SOAR)","Association for Computing Machinery, Inc","31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016","3 September 2016 through 7 September 2016",,123481,,9781450338455,,,"English","ASE - Proc. IEEE/ACM Int. Conf. Autom. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84989180792
"Wang B., Yin B.-B., Cai K.-Y.","57191222442;16242881200;10039717300;","Event Handler Tree Model for GUI Test Case Generation",2016,"Proceedings - International Computer Software and Applications Conference","2",, 7552178,"58","63",,3,"10.1109/COMPSAC.2016.111","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988037420&doi=10.1109%2fCOMPSAC.2016.111&partnerID=40&md5=8e2e9620150cfa1fa1c63fc6b5f8ad8c","Department of Automatic Control, Beihang University, Beijing, 100191, China","Wang, B., Department of Automatic Control, Beihang University, Beijing, 100191, China; Yin, B.-B., Department of Automatic Control, Beihang University, Beijing, 100191, China; Cai, K.-Y., Department of Automatic Control, Beihang University, Beijing, 100191, China","More and more software applications have Graphical User Interfaces (GUIs). GUI is popular because of its intuitive and convenient way to operate software. However, for its event-driven nature, it also makes applications hard to be tested, and the generation of test cases is very time-consuming. In this paper, an Event Handler Tree (EHT) model is proposed to assist the test case generation process. The EHT is constructed by analyzing source code, and with the EHT we can automatically combine the cell events into runnable test cases. Moreover, the test cases are easy to repair when GUI is modified. Experiments and discussions show our approach is feasible and convenient for test case generation. © 2016 IEEE.","Event Flow Graph; Event Handler Tree; GUI Testing; Test Case Generation","Application programs; Computer software; Flow graphs; Forestry; Testing; Trees (mathematics); User interfaces; Event-flow graph; Event-handlers; Graphical user interface (GUIs); GUI testing; Software applications; Test case generation; Test-case generation process; Tree modeling; Graphical user interfaces",,,,,,,,"Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. Dissertation, University of Pittsburgh, USA; Bryce, R., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Transactions on Software Engineering, 37 (1), pp. 48-64; Memon, A.M., Gui testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) ACM SIGSOFT Software Engineering Notes, 28 (5), pp. 118-127; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Information & Software Technology, pp. 559-575; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of the 29th International Conference on Software Engineering(ICSE), pp. 396-405. , Minneapolis, MN, USA: IEEE Computer Society; Feng, J., Yin, B.B., Cai, K.Y., 3-way GUI test cases generation based on event-wise partitioning (2012) Quality Software (QSIC), 2012 12th International Conference On. IEEE, 430, pp. 89-97; Zhao, L., Cai, K.Y., Event handler-based coverage for GUI testing (2010) Proceedings of the Fifth International Conference on Quality Software, pp. 326-331; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) International Symposium on Software Reliability Engineering (ISSRE), pp. 34-43; Salomaa, A., (1969) Theory of Automata, pp. 7-20. , Marcella Anselmo Alessandra Cherubini & Pierluigi San Pietro; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of FTCS'97, pp. 80-88; Memon, A.M., Adithya, N., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance & Evolution Research & Practice, 17 (1), pp. 27-64; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing? (2003) PROC. IEEE International Conference on Automated Software Engneering, pp. 164-173; Abbot, , http://abbot.sourceforge.net/doc/download.shtml; Yu, Z., Hu, H., Bai, C., Cai, K.Y., Wong, W.E., GUI software fault localization using N-gram analysis (2011) 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering. IEEE Computer Society, pp. 325-332; Memon, A.M., http://www.cs.umd.edu/~atif/Benchmarks/UMD2006b.html",,"Liu L.Milojicic D.Zhang Z.Zhang Z.Ahamed S.I.Sato H.Cimato S.Claycomb W.Reisman S.Nakamura M.Lung C.H.Matskin M.","","IEEE Computer Society","2016 IEEE 40th Annual Computer Software and Applications Conference, COMPSAC 2016","10 June 2016 through 14 June 2016",,123590,07303157,9781467388450,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-84988037420
"Alégroth E., Steiner M., Martini A.","55843479600;57191626644;57196951629;","Exploring the Presence of Technical Debt in Industrial GUI-Based Testware: A Case Study",2016,"Proceedings - 2016 IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2016",,, 7528970,"257","262",,5,"10.1109/ICSTW.2016.47","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84992202683&doi=10.1109%2fICSTW.2016.47&partnerID=40&md5=85b1ad5098fd3376003b706e265fa3ce","Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden","Alégroth, E., Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden; Steiner, M., Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden; Martini, A., Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden","Technical debt (TD) is a concept used to describe a sub-optimal solution of a software artifact that negatively affects its comprehensibility, extendability and maintainability. As such, TD adversely affects the costs or quality associated with the artifact, which is also called interest. TD has through research been identified in all types of software artifacts, from architectural design to automated tests (Testware). However, research into testware technical debt (TTD) is limited and primarily focused on testing on lower level of system abstraction, i.e. unit-and integration tests, leaving a need for more TTD research on GUI-based testing. In this study we explore this gap in knowledge through an industrial case study at a Swedish avionics software development company. Four repositories are studied for the presence of TTD using expert interviews, semi-automated document analysis and automatic metric analysis. Results of the study provide initial support that the concept of TTD is applicable to GUI-based testware and show the presence of both TD items unique to GUI-based testware and items common to software. The implications of these results are that engineering best practices must be established for GUI-based testware to minimize TD interest. © 2016 IEEE.","GUI-based testing; Industrial case study; Technical debt; Testware","Automation; Graphical user interfaces; Integration testing; Software design; Verification; Document analysis; Engineering best practice; Industrial case study; Initial support; Software artifacts; Suboptimal solution; Technical debts; Testware; Software testing",,,,,,,,"Cunningham, W., The wycash portfolio management system (1993) ACM SIGPLAN OOPS Messenger, 4 (2), pp. 29-30; Fowler, M., (1999) Refactoring: Improving the Design of Existing Code, , Pearson Education India; Eisenberg, R.J., A threshold based approach to technical debt (2012) ACM SIGSOFT Software Engineering Notes, 37 (2), pp. 1-6; Marinescu, R., Assessing technical debt by identifying design flaws in software systems (2012) IBM Journal of Research and Development, 56 (5), pp. 1-9; Nugroho, A., Visser, J., Kuipers, T., An empirical model of technical debt and interest (2011) Proceedings of the 2nd Workshop on Managing Technical Debt, pp. 1-8. , ACM; Brown, N., Cai, Y., Guo, Y., Kazman, R., Kim, M., Kruchten, P., Lim, E., Ozkaya, I., Managing technical debt in software-reliant systems (2010) Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research, pp. 47-52. , ACM; Li, Z., Avgeriou, P., Liang, P., A systematic mapping study on technical debt and its management (2015) Journal of Systems and Software, 101, pp. 193-220. , Mar; Tom, E., Aurum, A., Vidgen, R., An exploration of technical debt (2013) Journal of Systems and Software, 86, pp. 1498-1516. , Jun; Alegroth, E., Gao, Z., Oliveira, R., Memon, A., Conceptualization and evaluation of component-based testing unified with visual GUI testing: An empirical study (2015) Proceedings of the 8th IEEE International Conference on Software Testing, Verification and Validation (ICST 2015), , Graz; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. Dom-based web locators: An empirical study (2014) Web Engineering, 8541, pp. 322-340. , ser. Lecture Notes in Computer Science. Springer; Lalwani, T., Garg, M., Burmaan, C., Arora, A., (2013) UFT/QTP Interview Unplugged: And I Thought I Knew UFT, , 2nd ed. Knowledge Inbox; Sonarqube Evaluate Your Technical Debt with Sonar, , http://www.sonarqube.org/evaluate-your-technical-debt-with-sonar/, [Online]; McCabe, T.J., A complexity measure (1976) Software Engineering, IEEE Transactions on, 4, pp. 308-320; Shah, S., Torchiano, M., Vetro, A., Morisio, M., Exploratory testing as a source of technical debt (2014) IT Professional, 16 (3), pp. 44-51. , May; (2015) Technical Debt of Standardized Test Software; Szabados, K., Structural analysis of large TTCN-3 projects (2009) Testing of Software and Communication Systems, pp. 241-246. , Springer; Kovácsa, A., Szabadosb, K., (2014) Advanced TTCN-3 Test Suite Validation with Titan, pp. 273-281; Chen, W.-K., Wang, J.-C., Bad smells and refactoring methods for GUI test scripts (2012) 2012 13th ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel Distributed Computing (SNPD), pp. 289-294. , Aug; Persson, C., Yilmazturk, N., Establishment of automated regression testing at ABB: Industrial experience report on 'avoiding the pitfalls' 19th International Conference on Automated Software Engineering, 2004. Proceedings, pp. 112-121; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Improving test suites maintainability with the page object pattern: An industrial case study 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 108-113; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Software Engineering, 14 (2), pp. 131-164; Staron, M., Meding, W., Nilsson, C., A framework for developing measurement systems and its industrial evaluation (2009) Information and Software Technology, 51 (4), pp. 721-737; Stamelos, I., Angelis, L., Oikonomou, A., Bleris, G.L., Code quality analysis in open source software development (2002) Information Systems Journal, 12 (1), pp. 43-60; Alegroth, E., Feldt, R., Olsson, H., Transitioning manual system test suites to automated testing: An industrial case study (2013) Software Testing, Verification and Validation (ICST), 2013 IEEE Sixth International Conference on, pp. 56-65. , IEEE",,,"American Software Testing Qualifications Board;IEEE;IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","9th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2016","10 April 2016 through 15 April 2016",,123151,,9781509018260,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-84992202683
"Wetzlmaier T., Ramler R., Putschogl W.","56595126700;23095597800;55598946600;","A Framework for Monkey GUI Testing",2016,"Proceedings - 2016 IEEE International Conference on Software Testing, Verification and Validation, ICST 2016",,, 7515500,"416","423",,9,"10.1109/ICST.2016.51","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983371660&doi=10.1109%2fICST.2016.51&partnerID=40&md5=0d40b040b1b74cc9794f92f1eb0d126a","Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Trumpf Maschinen Austria GmbH + Co. KG, Industriepark 24, Pasching, 4061, Austria","Wetzlmaier, T., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, Hagenberg, A-4232, Austria; Putschogl, W., Trumpf Maschinen Austria GmbH + Co. KG, Industriepark 24, Pasching, 4061, Austria","Testing via graphical user interfaces (GUI) is a complex and labor-intensive task. Numerous techniques, tools and frameworks have been proposed for automating GUI testing. In many projects, however, the introduction of automated tests did not reduce the overall effort of testing but shifted it from manual test execution to test script development and maintenance. As a pragmatic solution, random testing approaches (aka «monkey testing») have been suggested for automated random exploration of the system under test via the GUI. This paper presents a versatile framework for monkey GUI testing. The framework provides reusable components and a predefined, generic workflow with extension points for developing custom-built test monkeys. It supports tailoring the monkey for a particular application scenario and the technical requirements imposed by the system under test. The paper describes the customization of test monkeys for an open source project and in an industry application, where the framework has been used for successfully transferring the idea of monkey testing into an industry solution. © 2016 IEEE.","GUI testing; random testing; test automation tool","Automation; Computer software reusability; Graphical user interfaces; Open source software; Testing; User interfaces; Verification; Application scenario; Graphical user interfaces (GUI); GUI testing; Industry applications; Open source projects; Random testing; Technical requirement; Test automation tool; Software testing",,,,,,,,"Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694. , Oct; Chen, T.Y., Kuo, F.C., Merkel, R.G., Tse, T.H., Adaptive random testing: The art of test case diversity (2010) Journal of Systems and Software, 83 (1), pp. 60-66. , January; Nyman, N., Using monkey test tools (2000) Software Testing and Quality Engineering, 29 (2), pp. 18-23. , January; Fodeh, J., Adventures with test monkeys (2012) Experiences of Test Automation: Case Studies of Software Test Automation, , D. Graham and M. Fewster, Eds Addison-Wesley Professional; Hofer, B., Peischl, B., Wotawa, F., GUI savvy end-to-end testing with smart monkeys (2009) Automation of Software Test (AST), ICSE; Forrester, J.E., Miller, B.P., An empirical study of the robustness of Windows NT applications using random testing (2000) 4th USENIX Windows Systems Symposium, 4. , WSS; Ramler, R., Putschogl, W., A retrospection on building a custom tool for automated system testing (2013) 37th Annual Computer Software and Applications Conference, COMPSAC; Wetzlmaier, T., Winterer, M., Test automation for multi-touch user interfaces of industrial applications (2015) 8th Int Conference on Software Testing, Verification and Validation Workshops, TAIC PART; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) 10th Working Conference on Reverse Engineering, WCRE; Whittaker, J.A., (2003) How to Break Software, , Addison-Wesley; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105. , March; Moreira, R., Paiva, A., Memon, A., A pattern-based approach for GUI modeling and testing (2013) 24th International Symposium on Software Reliability Engineering, ISSRE; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR; What about more sophisticated action specification and selection (2014) 7th Seminar Series on Advanced Techniques & Tools for Software Evolution (SATToSE), CEUR",,,"American Software Testing Qualifications Board, Inc. (ASTQB);IEEE;IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","9th IEEE International Conference on Software Testing, Verification and Validation, ICST 2016","10 April 2016 through 15 April 2016",,122841,,9781509018260,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid., ICST",Conference Paper,"Final","",Scopus,2-s2.0-84983371660
"Moran K., Linares-Vasquez M., Bernal-Cardenas C., Vendome C., Poshyvanyk D.","57095532500;54684418100;55848479200;57021999600;13613571900;","Automatically Discovering, Reporting and Reproducing Android Application Crashes",2016,"Proceedings - 2016 IEEE International Conference on Software Testing, Verification and Validation, ICST 2016",,, 7515457,"33","44",,93,"10.1109/ICST.2016.34","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983284234&doi=10.1109%2fICST.2016.34&partnerID=40&md5=69219095a4e88997085cd457ed0e6177","College of William and Mary, United States","Moran, K., College of William and Mary, United States; Linares-Vasquez, M., College of William and Mary, United States; Bernal-Cardenas, C., College of William and Mary, United States; Vendome, C., College of William and Mary, United States; Poshyvanyk, D., College of William and Mary, United States","Mobile developers face unique challenges when detecting and reporting crashes in apps due to their prevailing GUI event-driven nature and additional sources of inputs (e.g., sensor readings). To support developers in these tasks, we introduce a novel, automated approach called CRASHSCOPE. This tool explores a given Android app using systematic input generation, according to several strategies informed by static and dynamic analyses, with the intrinsic goal of triggering crashes. When a crash is detected, CRASHSCOPE generates an augmented crash report containing screenshots, detailed crash reproduction steps, the captured exception stack trace, and a fully replayable script that automatically reproduces the crash on a target device(s). We evaluated CRASHSCOPE's effectiveness in discovering crashes as compared to five state-of-the-art Android input generation tools on 61 applications. The results demonstrate that CRASHSCOPE performs about as well as current tools for detecting crashes and provides more detailed fault information. Additionally, in a study analyzing eight real-world Android app crashes, we found that CRASHSCOPE's reports are easily readable and allow for reliable reproduction of crashes by presenting more explicit information than human written reports. © 2016 IEEE.","android; crash reports; GUI-testing","Graphical user interfaces; Software testing; Verification; android; Android applications; Automated approach; crash reports; Explicit information; Generation tools; GUI testing; Static and dynamic analysis; Android (operating system)",,,,,"National Science Foundation, NSF: 1218129, CCF-1218129, CCF-1525902","This work is supported in part by the NSF CCF-1218129 and NSF CCF-1525902 grants.",,"https://github.com/tuxmobil/CampFahrplan, 31c3 schedule application; http://developer.android.com/tools/help/emulator.html, Android emulator documentation; http://opensignal.com/reports/2014/android-fragmentation/, Android fragmentation statistics; https://developer.android.com/reference/android/widget/TextView.html#attrandroid:inputType, Android inputtype specifications; http://developer.android.com/tools/help/logcat.html, Android logcat debugging tool; https://developer.android.com/about/dashboards/index.html, Android platform install base information; http://developer.android.com/tools/help/monkey.html, Android ui/application exerciser monkey; http://bear.cc.gatech.edu/shauvik/androtest/, Androtest framework; http://emma.sourceforge.net, Emma code coverage tool; https://play.google.com/storehl=en, Google play store; https://www.isecpartners.com/tools/mobile-security/intentfuzzer.aspx, Intent fuzzer; Mobile Apps: What Consumers Really Need and Want, , https://info.dynatrace.com/rs/compuware/images/MobileAppSurveyReport.pdf; Soot Java Instrumentation Framework, , http://sable.github.io/soot/; Vagrant Virtualbox Manager, , https://docs.vagrantup.com/v2/; https://www.virtualbox.org, Virtualbox; Adamsen, C.Q., Mezzetti, G., Møller, A., Systematic execution of android test suites in adverse conditions (2015) Proceedings of the 2015 International Symposium on Software Testing and Analysis, ISSTA 2015, pp. 83-93. , New York, NY, USA ACM; Amalfitano, D., Fasolino, A., Tramontana, P., Ta, B., Memon, A., Mobiguitar - A tool for automated model-based testing of mobile apps (2014) Software, IEEE, (99), p. 1; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using gui ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 258-261. , New York, NY, USA ACM; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE '12, pp. 591-5911. , New York, NY, USA ACM; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA '13, pp. 641-660. , New York, NY, USA ACM; Bavota, G., Linares-Vasquez, M., Bernal-Cardenas, C., Di Penta, M., Oliveto, R., Poshyvanyk, D., The impact of api change-and faultproneness on the user ratings of android apps (2015) Software Engineering IEEE Transactions on, 41 (4), pp. 384-407. , April; Bettenburg, N., Just, S., Schröter, A., Weiss, C., Premraj, R., Zimmermann, T., What makes a good bug report in Proceedings of the 16th (2008) ACM SIGSOFT International Symposium on Foundations of Software Engineering SIGSOFT '08/FSE-16, pp. 308-318. , New York, NY, USA ACM; Bettenburg, N., Premraj, R., Zimmermann, T., Kim, S., Extracting structural information from bug reports (2008) Proceedings of the 2008 International Working Conference on Mining Software Repositories, MSR '08, pp. 27-30. , New York, NY, USA ACM; Breu, S., Premraj, R., Sillito, J., Zimmermann, T., Information needs in bug reports: Improving cooperation between developers and users (2010) Proceedings of the 2010 ACM Conference on Computer Supported Cooperative Work, CSCW '10, pp. 301-310. , New York, NY, USA ACM; Brooke, J., SUS: A quick and dirty usability scale (1996) Usability Evaluation in Industry, , P. W. Jordan, B. Weerdmeester, A. Thomas, and I. L. Mclelland, editors Taylor and Francis, London; Chandra, R., Karlsson, B.F., Lane, N.D., Liang, C.-J.M., Nath, S., Padhye, J., Ravindranath, L., Zhao, F., How to the smash next billion mobile app bugs GetMobile: Mobile (2015) Comp. Comm., 19 (1), pp. 34-38. , June; Chen, N., Lin, J., Hoi, S., Xiao, X., Zhang, B., AR-Miner: Mining informative reviews for developers from mobile app marketplace (2014) 36th International Conference on Software Engineering (ICSE'14), , page To appear; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages - Applications, OOPSLA '13, pp. 623-640. , New York, NY, USA ACM; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for android: Are we there yet (2015) 30th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015); Csallner, C., Smaragdakis, Y., Jcrasher: An automatic robustness tester for Java (2004) Softw. Pract. Exper., 34 (11), pp. 1025-1050. , Sept; Csallner, C., Smaragdakis, Y., Xie, T., Dsd-crasher: A hybrid analysis tool for bug finding (2008) ACM Trans. Softw. Eng. Methodol., 17 (2), pp. 81-837. , May; Dang, Y., Wu, R., Zhang, H., Zhang, D., Nobel, P., Rebucket: A method for clustering duplicate crash reports based on call stack similarity (2012) Proceedings of the 34th International Conference on Software Engineering, ICSE '12, pp. 1084-1093. , Piscataway, NJ, USA IEEE Press; Erfani Joorabchi, M., Mirzaaghaei, M., Mesbah, A., Works for me! characterizing non-reproducible bug reports (2014) Proceedings of the 11th Working Conference on Mining Software Repositories, MSR 2014, pp. 62-71. , New York, NY, USA ACM; Feigenspan, J., Kastner, C., Liebig, J., Apel, S., Hanenberg, S., Measuring programming experience (2012) Program Comprehension (ICPC), 2012 IEEE 20th International Conference on, pp. 73-82. , June; Gu, Z., Barr, E., Hamilton, D., Su, Z., Has the bug really been fixed in Software Engineering, 2010 ACM/ (2010) IEEE 32nd International Conference on, 1, pp. 55-64. , May; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, MobiSys '14, pp. 204-217. , New York, NY, USA ACM; Hu, G., Yuan, X., Tang, Y., Yang, J., Efficiently, effectively detecting mobile app bugs with appdoctor (2014) Proceedings of the Ninth European Conference on Computer Systems, EuroSys '14, pp. 181-1815. , New York, NY, USA ACM; Jaffar, J., Murali, V., Navas, J.A., Boosting concolic testing via interpolation (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 48-58. , New York, NY, USA ACM; Jin, W., Orso, A., Bugredux: Reproducing field failures for in-house debugging (2012) Proceedings of the 34th International Conference on Software Engineering, ICSE '12, pp. 474-484. , Piscataway, NJ, USA IEEE Press; Jin, W., Orso, A., F3: Fault localization for field failures (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, ISSTA 2013, pp. 213-223. , New York, NY, USA ACM; Joorabchi, M., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) Empirical Software Engineering and Measurement, 2013 ACM/IEEE International Symposium on, pp. 15-24. , Oct; Khalid, H., Shihab, E., Nagappan, M., Hassan, A.E., What do mobile App users complain about a study on free iOS Apps (2014) IEEE Software, (2-3), pp. 103-134; Kim, S., Zimmermann, T., Nagappan, N., Crash graphs: An aggregated view of multiple crashes to improve crash triage (2011) Dependable Systems Networks (DSN), 2011 IEEE/IFIP 41st International Conference on, pp. 486-493. , June; Kochhar, P.S., Thung, F., Nagappan, N., Zimmermann, T., Lo, D., Understanding the test automation culture of app developers (2015) Proceedings of the 8th IEEE International Conference on Software Testing, Verification, and Validation, , April; Liang, C.-J.M., Lane, N.D., Brouwers, N., Zhang, L., Karlsson, B.F., Liu, H., Liu, Y., Zhao, F., Caiipa: Automated large-scale mobile app testing through contextual fuzzing (2014) Proceedings of the 20th Annual International Conference on Mobile Computing and Networking, MobiCom '14, pp. 519-530. , New York, NY, USA ACM; Lin, Y., Rojas, J.F., Chu, E., Lai, Y., On the accuracy, efficiency, and reusability of automated test oracles for android devices (2014) IEEE Transactions on Software Engineering (TSE), (99), p. 1; Linares-Vasquez, M., Enabling testing of android apps (2015) IEEE/ACM 37th IEEE International Conference on Software Engineering (ICSE), 2, pp. 763-765. , May; Linares-Vasquez, M., Bavota, G., Bernal-Cardenas, C., Di Penta, M., Oliveto, R., Poshyvanyk, D., Api change and fault proneness: A threat to the success of android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 477-487. , New York, NY, USA ACM; Linares-Vasquez, M., Vendome, C., Luo, Q., Poshyvanyk, D., How developers detect and fix performance bottlenecks in android apps (2015) Proceedings of 31st IEEE International Conference on Software Maintenance and Evolution (ICSME'15), , page to appear; Linares-Vasquez, M., White, M., Bernal-Cardenas, C., Moran, K., Poshyvanyk, D., Mining android app usages for generating actionable gui-based execution scenarios (2015) 12th Working Conference on Mining Software Repositories (MSR'15), , page to appear; Liu, C., Yan, X., Fei, L., Han, J., Midkiff, S.P., Sober: Statistical model-based bug localization (2005) Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/FSE-13, pp. 286-295. , New York, NY, USA ACM; Lohman, G., Champlin, J., Sohn, P., Quickly finding known software problems via automated symptom matching (2005) Proceedings of the Second International Conference on Automatic Computing, ICAC '05, pp. 101-110. , Washington, DC, USA IEEE Computer Society; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 224-234. , New York, NY, USA ACM; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pp. 599-609. , New York, NY, USA ACM; Majumdar, R., Sen, K., Hybrid concolic testing (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE '07, pp. 416-426. , Washington, DC, USA IEEE Computer Society; Mirzaei, N., Bagheri, H., Mahmood, R., Malek, S., Sig-droid: Automated system input generation for android applications (2015) Software Reliability Engineering (ISSRE), 2015 IEEE 26th International Symposium on, pp. 461-471. , Nov; Moran, K., Enhancing android application bug reporting (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, pp. 1045-1047. , New York, NY, USA ACM; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Poshyvanyk, D., Crashscope Online Appendix, , http://www.cs.wm.edu/semeru/data/ICST16-CrashScope/; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Poshyvanyk, D., Auto-completing bug reports for android applications (2015) ESEC/FSE'15, , page to appear, Bergamo, Italy; Moran, K., Linares-Vasquez, M., Bernal-Cardenas, C., Poshyvanyk, D., Fusion: A tool for facilitating and augmenting android bug reporting (2016) Proceedings of 38thACM/IEEE International Conference on Software Engineering (ICSE'16), , May; Morville, P., User Experience Design, , http://semanticstudios.com/userexperiencedesign; Nguyen, B., Memon, A., An observe-model-exercise; Paradigm to test event-driven systems with undetermined input spaces (2014) Software Engineering IEEE Transactions on, 40 (3), pp. 216-234. , March; Pacheco, C., Ernst, M.D., Eclat: Automatic generation and classification of test inputs (2005) Proceedings of the 19th European Conference on Object-Oriented Programming, ECOOP'05, pp. 504-527. , Berlin, Heidelberg Springer-Verlag; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback-directed random test generation (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE '07, pp. 75-84. , Washington, DC, USA IEEE Computer Society; Palomba, F., Linares-Vasquez, M., Bavota, G., Oliveto, R., Di Penta, M., Poshyvanyk, D., De Lucia, A., User reviews matter! tracking crowdsourced reviews to support evolution of successful apps (2015) Proceedings of 31st IEEE International Conference on Software Maintenance and Evolution (ICSME'15), , page to appear; Ravindranath, L., Nath, S., Padhye, J., Balakrishnan, H., Automatic and scalable fault detection for mobile applications (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, MobiSys '14, pp. 190-203. , New York, NY, USA ACM; Salman, I., Misirli, A.T., Juristo, N., Are students representatives of professionals in software engineering experiments (2015) Proceedings of the 37th International Conference on Software Engineering-ICSE '15, 1, pp. 666-676. , Piscataway, NJ, USA IEEE Press; Sasnauskas, R., Regehr, J., Intent fuzzer: Crafting intents of death (2014) Proceedings of the 2014 Joint International Workshop on Dynamic Analysis (WODA) and Software and System Performance Testing, Debugging, and Analytics (PERTEA), WODA+PERTEA 2014, pp. 1-5. , New York, NY, USA ACM; Seo, H., Kim, S., Predicting recurring crash stacks (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 180-189. , New York, NY, USA ACM; Seo, H., Kim, S., How we get there: A context-guided search strategy in concolic testing (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pp. 413-424. , New York, NY, USA ACM; Tonella, P., Tiella, R., Nguyen, C.D., Interpolated n-grams for model based testing (2014) Proceedings of the 36th International Conference on Software Engineering, ICSE 2014, pp. 562-572. , New York, NY, USA ACM; Merwe Der Van, H., Merwe Der Van, B., Visser, W., Execution and property specifications for jpf-android (2014) SIGSOFT Softw. Eng. Notes, 39 (1), pp. 1-5. , Feb; White, M., Linares-Vasquez, M., Johnson, P., Bernal-Cardenas, C., Poshyvanyk, D., Generating reproducible and replayable bug reports from android application crashes (2015) 23rd IEEE International Conference on Program Comprehension; Wu, R., Zhang, H., Cheung, S.-C., Kim, S., Crashlocator: Locating crashing faults based on crash stacks (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, ISSTA 2014, pp. 204-214. , New York, NY, USA ACM; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering, FASE'13, pp. 250-265. , Berlin, Heidelberg Springer-Verlag; Ye, H., Cheng, S., Zhang, L., Jiang, F., Droidfuzzer: Fuzzing the android apps with intent-filter tag (2013) Proceedings of International Conference on Advances in Mobile Computing - Multimedia, MoMM '13, pp. 6868-6874. , New York, NY, USA ACM; Yeh, C.C., Lu, H.L., Chen, C.Y., Khor, K.K., Huang, S.K., Craxdroid: Automatic android system testing by selective symbolic execution (2014) Proceedings of the 2014 IEEE Eighth International Conference on Software Security and Reliability-Companion, SEREC '14, pp. 140-148. , Washington, DC, USA IEEE Computer Society; Yoo, S., Harman, M., Clark, D., Fault localization prioritization: Comparing information-theoretic and coverage-based approaches (2013) ACM Trans. Softw. Eng. Methodol., 22 (3), pp. 191-1929. , July; Zaeem, R.N., Prasad, M.R., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) Proceedings of the 2014 IEEE International Conference on Software Testing, Verification, and Validation, ICST '14, pp. 183-192. , Washington, DC, USA IEEE Computer Society; Zeller, A., Isolating cause-effect chains from computer programs (2002) Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of Software Engineering, SIGSOFT '02/FSE-10, pp. 1-10. , New York, NY, USA ACM; Zeller, A., (2005) Why Programs Fail: A Guide to Systematic Debugging, , Morgan Kaufmann Publishers Inc., San Francisco, CA, USA; Zhou, J., Zhang, H., Lo, D., Where should the bugs be fixed-more accurate information retrieval-based bug localization based on bug reports (2012) Proceedings of the 34th International Conference on Software Engineering, ICSE '12, pp. 14-24. , Piscataway, NJ, USA IEEE Press",,,"American Software Testing Qualifications Board, Inc. (ASTQB);IEEE;IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","9th IEEE International Conference on Software Testing, Verification and Validation, ICST 2016","10 April 2016 through 15 April 2016",,122841,,9781509018260,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verification Valid., ICST",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84983284234
"Wu X., Jiang Y., Xu C., Cao C., Ma X., Lu J.","57188669263;56006054500;56870592600;7401501786;7404550517;36012413400;","Testing android apps via guided gesture event generation",2016,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC","0",, 7890589,"201","208",,5,"10.1109/APSEC.2016.037","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018471007&doi=10.1109%2fAPSEC.2016.037&partnerID=40&md5=b61f8eaecce7b9daa712bf1c876ce6b8","State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Department of Computer Science and Technology, Nanjing University, Nanjing, China","Wu, X., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science and Technology, Nanjing University, Nanjing, China; Jiang, Y., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science and Technology, Nanjing University, Nanjing, China; Xu, C., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science and Technology, Nanjing University, Nanjing, China; Cao, C., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science and Technology, Nanjing University, Nanjing, China; Ma, X., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science and Technology, Nanjing University, Nanjing, China; Lu, J., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science and Technology, Nanjing University, Nanjing, China","Mobile applications (apps) are mostly driven by touch gestures whose interactions are natural to human beings. However, generating gesture events for effective and efficient testing of such apps remains to be a challenge. Existing event generation techniques either feed the apps under test with random gestures or exhaustively enumerate all possible gestures. While the former strategy leads to incomplete test coverage, the latter suffers from efficiency issues. In this paper, we study the particular problem of gesture event generation for Android apps. We present a static analysis technique to obtain the gesture information: each UI component's potentially relevant gestures, so as to reduce the amount of gesture events to be delivered in the automated testing. We implemented our technique as a prototype tool GAT and evaluated it with real-world Android apps. The experimental results show that GAT is both effective and efficient in covering more code as well as detecting gesturerelated bugs. © 2016 IEEE.","Android app; Gesture; Static analysis; Testing","Static analysis; Testing; Analysis techniques; Automated testing; Generation techniques; Gesture; Mobile applications; Prototype tools; Test coverage; UI components; Android (operating system)",,,,,,,,"Some Gestures, , http://www.tutorialspoint.com/android/androidgestures.htm; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proc. of FSE, pp. 224-234; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of Android apps (2013) Proc. of OOPSLA, pp. 641-660; Choi, W., Necula, G., Sen, K., Guided gui testing of Android apps with minimal restart and approximate learning (2013) Proc. of OOPSLA, pp. 623-640; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proc. of FSE, p. 59; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proc. of ASE, pp. 258-261; Li, X., Jiang, Y., Liu, Y., Xu, C., Ma, X., Li, J., User guided automation for testing mobile apps (2014) Proc. of APSEC, pp. 27-34; Mirzaei, N., Bagheri, H., Mahmood, R., Malek, S., Sig-droid: Automated system input generation for Android applications (2015) Proc. of ISSRE, pp. 461-471; http://developer.android.com/tools/help/monkey.html; Some Gestures, , https://pixabay.com; A Study of Gesture Recognition, , http://moon.nju.edu.cn/spar/people/wxy/sogr.html; Android Classes, , http://developer.android.com/reference/; https://sable.github.io/soot/; Meng, Z., Jiang, Y., Xu, C., Facilitating reusable and scalable automated testing and analysis for Android apps (2015) Proc. of Internetware; http://developer.android.com/tools/testing-support-library/index.html#UIAutomator; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for android (2013) Proc. of ICSE, pp. 72-81; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proc. of FSE, pp. 599-609; Choudhary, S.R., Gorla, A., Orso, A., Automated test input generation for Android: Are we there yet? (2015) Proc. of ASE, pp. 429-440; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) Proc. of FASE, pp. 250-265; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable UI-automation for large-scale dynamic analysis of mobile apps (2014) Proc. of Mobisys, pp. 204-217; Li, L., Tegawende, F.B., Mike, P., Siegfried, R., Alexandre, B., Damien, O., Jacques, K., Yves, L.T., Static Analysis of Android Apps: A Systematic Literature Review; Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., McDaniel, P., Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps (2014) Proc. of OOPSLA, 49 (6), pp. 259-269; Lu, L., Li, Z., Wu, Z., Lee, W., Jiang, G., Chex: Statically vetting Android apps for component hijacking vulnerabilities (2012) Proc. of CCS, pp. 229-240; Bartel, A., Klein, J., Le Traon, Y., Monperrus, M., Automatically securing permission-based software by reducing the attack surface: An application to Android (2012) Proc. of ASE, pp. 274-277; Li, D., Tran, A.H., Halfond, W.G., Making web applications more energy efficient for OLED smartphones (2014) Proc. of ICSE, pp. 527-538; Yang, S., Yan, D., Wu, H., Wang, Y., Rountev, A., Static control-flow analysis of user-driven callbacks in Android applications (2015) Proc. of ICSE, pp. 89-99; Zhang, Y., Huang, G., Liu, X., Zhang, W., Mei, H., Yang, S., Refactoring Android Java code for on-demand computation offloading (2012) Proc. of OOPSLA, 47 (10), pp. 233-248; Lin, Y., Radoi, C., Dig, D., Retrofitting concurrency for Android applications through refactoring (2014) Proc. of FSE, pp. 341-352","Xu, C.; State Key Laboratory for Novel Software Technology, China; email: changxu@nju.edu.cn","Potanin A.Murphy G.C.Reeves S.Dietrich J.",,"IEEE Computer Society","23rd Asia-Pacific Software Engineering Conference, APSEC 2016","6 December 2016 through 9 December 2016",,127157,15301362,9781509055753,,,"English","Proc. Asia Pac. Softw. Eng. Conf. APSEC",Conference Paper,"Final","",Scopus,2-s2.0-85018471007
"Zhao L., Gao D.","57195627511;57220859911;","GUI test case generation based on Activity-Flow Graph",2016,"Proceedings of the IEEE International Conference on Software Engineering and Service Sciences, ICSESS","0",, 7883173,"738","741",,2,"10.1109/ICSESS.2016.7883173","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85016954576&doi=10.1109%2fICSESS.2016.7883173&partnerID=40&md5=db1e030267554699e95044a1866bfa4d","Beijing Institute of Control Engineering100190, China","Zhao, L., Beijing Institute of Control Engineering100190, China; Gao, D., Beijing Institute of Control Engineering100190, China","Due to the widespread usage of Graphical User Interfaces (GUIs) in various software applications, GUI testing has gained much importance to software development. In this paper, a model named Activity-Flow Graph is proposed for GUI testing, which can be derived from event-flow graph model, and avoid the problem of generating inapplicable test cases. Experiment results show that the proposed model can be used to generate efficient test suite for GUI applications. © 2016 IEEE.","Activity-Flow Graph; GUI Testing; test case generation","Application programs; Graphic methods; Graphical user interfaces; Software design; Software testing; Activity flow; Event-flow graph; Graphical user interface (GUIs); GUI applications; GUI testing; Software applications; Test case; Test case generation; Flow graphs",,,,,,,,"Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proceedings of the 12'h International Symposium on Software Reliability Engineering, pp. 34-43; Chen, J., Subramaniam, S., A gui environment to manipulate fsms for testing gui-based applications in Java (2001) Proceedings of the 34th Annual Hawaii International Conference on System Sciences, pp. 9-61; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th Annual International Symposium on Fault-Tolerant Computing, pp. 80-88; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing proceedings of the 8th european software engineering conference held jointly with 9th (2001) ACM STGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267; Memon, A.M., Banerjee, I., Nagarajan, A., Dart: A framework for regression testing nightly/daily builds of gut applications (2003) Proceedings of the 19th International Conference on Software Maintenance, pp. 410-419; Lengauer, T., Tarjan, R.E., A fast algorithm for finding dominators in a flowgraph ACM (1979) Transactions on Programming Languages and Systems, 1 (1), pp. 121-141; Grindal, M., Handling combinatorial explosion in software testing (2007) Ph D Dissertation of Linklipings Universitet, Sweden; Zhao, L., Cai, K.Y., Event handler-based coverage for gui testing (2010) Proceedings of the 10th International Conference on Quality Software, pp. 326-331",,"Babu M.S.P.Wenzheng L.","IEEE Beijing Section;The Institute of Electrical and Electronics Engineers","IEEE Computer Society","7th IEEE International Conference on Software Engineering and Service Science, ICSESS 2016","26 August 2016 through 28 August 2016",,126924,23270586,9781467399036,,,"English","Proc.IEEE Int. Conf. Software Eng. Serv. Sci., ICSESS",Conference Paper,"Final","",Scopus,2-s2.0-85016954576
"Campos J.C., Fayollas C., Martinie C., Navarre D., Palanque P., Pinto M.","7201617369;55053422200;36721364900;6602114671;6602748156;57213491627;","Systematic automation of scenario-based testing of user interfaces",2016,"EICS 2016 - 8th ACM SIGCHI Symposium on Engineering Interactive Computing Systems",,,,"138","148",,15,"10.1145/2933242.2948735","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979675839&doi=10.1145%2f2933242.2948735&partnerID=40&md5=07382fbc546139d9e282679b5dfc7e0f","Universidade Do Minho, HASLab, INESC TEC, Braga, Portugal; ICS-IRIT, University of Toulouse, Toulouse, France","Campos, J.C., Universidade Do Minho, HASLab, INESC TEC, Braga, Portugal; Fayollas, C., ICS-IRIT, University of Toulouse, Toulouse, France; Martinie, C., ICS-IRIT, University of Toulouse, Toulouse, France; Navarre, D., ICS-IRIT, University of Toulouse, Toulouse, France; Palanque, P., ICS-IRIT, University of Toulouse, Toulouse, France; Pinto, M., Universidade Do Minho, HASLab, INESC TEC, Braga, Portugal","Ensuring the effectiveness factor of usability consists in ensuring that the application allows users to reach their goals and perform their tasks. One of the few means for reaching this goal relies on task analysis and proving the compatibility between the interactive application and its task models. Synergistic execution enables the validation of a system against its task model by co-executing the system and the task model and comparing the behavior of the system against what is prescribed in the model. This allows a tester to explore scenarios in order to detect deviations between the two behaviors. Manual exploration of scenarios does not guarantee a good coverage of the analysis. To address this, we resort to model-based testing (MBT) techniques to automatically generate scenarios for automated synergistic execution. To achieve this, we generate, from the task model, scenarios to be co-executed over the task model and the system. During this generation step we explore the possibility of including considerations about user error in the analysis. The automation of the execution of the scenarios closes the process. We illustrate the approach with an example. © 2016 ACM.","Interactive systems; Model-based testing; Task models","Automation; Job analysis; Model checking; Effectiveness factor; Interactive applications; Interactive system; Model based testing; Scenario-based testing; Task analysis; Task modeling; Task models; User interfaces",,,,,,,,"Appert, C., Beaudouin-Lafon, M., SwingStates: Adding state machines to Java and the Swing toolkit (2008) Software: Practice and Experience, 38 (11), pp. 1149-1182; Barbosa, A., Paiva, A., Campos, J.C., Test case generation from mutated task models (2011) Proc. ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS 2011, pp. 175-184. , ACM Press; Blanch, R., Beaudouin-Lafon, M., Programming rich interactions using the hierarchical state machine toolkit (2006) Proc. Working Conference on Advanced Visual Interfaces (AVI '06, pp. 51-58. , ACM Press; Bowen, J., Reeves, S., UI-design driven model-based testing (2013) Innovations in Systems and Software Engineering, 9 (3), pp. 201-215; Bowen, J., Reeves, S., UI-driven test-first development of interactive systems (2011) Proc. 3rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS 2011, pp. 165-174. , ACM Press; Fahssi, R., Martinie, C., Palanque, P., Enhanced task modelling for systematic identification and explicit representation of human errors (2015) Proc. IFIP TC13 Interact 2015, pp. 192-212. , 9299 of Lecture Notes in Computer Science, Springer; Fayollas, C., Martinie, C., Navarre, D., Palanque, P., (2015) A Generic Approach for Assessing Compatibility between Task Descriptions and Interactive Systems: Application to the Effectiveness of A Flight Control Unit. I-com 14, 3, pp. 170-191; ISO 9241-11, (1998) Ergonomic Requirements for Office Work with Visual Display Terminals (VDTs)-Part 11: Guidance on Usability; Lelli, V., Blouin, A., Baudry, B., Coulon, F., On model-based testing advanced guis (2015) Proc. 2015 IEEE 8th Intl. Conf. Software Testing, Verification and Validation Workshops (ICSTW), 11th Workshop on Advances in Model Based Testing (A-MOST), , IEEE; Manca, M., Paternò, F., Santoro, C., Spano, L.D., Generation of multi-device adaptive multimodal web applications (2013) Proc. Mobile Web Information Systems (MobiWIS 2013, pp. 218-232. , 8093 of Lecture Notes in Computer Science, Springer; Martinie, C., Navarre, D., Palanque, P., Fayollas, C., A generic tool-supported framework for coupling task models and interactive applications (2015) Proc. 7th ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS 2015, pp. 244-253. , ACM Press; Martinie, C., Palanque, P., Winckler, M., Structuring and composition mechanism to address scalability issues in task models (2011) Proc. IFIP TC13 INTERACT 2011, pp. 589-609. , 6948 of Lecture Notes in Computer Science, Springer; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis, University of Pittsburgh; Mori, G., Paternò, F., Santoro, C., Ctte: Support for developing and analyzing task models for interactive system design (2002) IEEE Trans. Software Eng, 28 (8), pp. 797-813; Navarre, D., Palanque, P., Paternò, F., Santoro, C., Bastide, R., A Tool Suite for Integrating Task and System Models through Scenarios (2001) Proc. DSV-IS 2001, pp. 88-113. , 2220 of Lecture Notes in Computer Science, Springer; Palanque, P., Bastide, R., Sengès, V., Validating interactive system design through the verification of formal task and system models (1995) Proc. IFIP TC2/WG2.7 Work. Conf. on Eng. for Human-Computer Interaction (EHCI 1995, pp. 189-212. , Chapman & Hall; Reason, J., (1990) Human Error, , Cambridge University Press; Rodrigo, M., Moreira, L.M., Paiva, A., PBGT tool: An integrated modeling and testing environment for pattern-based GUI testing (2014) Proc. 29th ACM/IEEE Intl. Conf. on Automated Software Engineering (ASE '14, pp. 863-866. , ACM; Rossignol, V., Scade display® for the design of airborne and ground-based radar human-machine interfaces (hmis (2014) Infowaves, 11, p. 4; Silva, J.L., Campos, J.C., Paiva, A., Model-based user interface testing with spec explorer and concurtasktrees (2008) Electronic Notes in Theoretical Computer Science, 208, pp. 77-93; Utting, M., Legeard, B., (2007) Practical Model-based Testing: A Tools Approach, , Morgan Kaufmann Publishers Inc., San Francisco, CA, USA; Wilson, S., Johnson, P., Kelly, C., Cunningham, J., Markopoulos, P., Beyond hacking: A model based approach to user interface design, people and computers VIII (1993) Proc. HCI 93, pp. 217-231. , Cambridge University Press, BCS HCI",,,"Association for Computing Machinery (ACM) SIGCHI;EDM;Hasselt University;iMinds","Association for Computing Machinery, Inc","8th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, EICS 2016","21 June 2016 through 24 June 2016",,122402,,9781450343220,,,"English","EICS - ACM SIGCHI Symp. Eng. Interact. Comput. Sys.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84979675839
"Alégroth E., Feldt R., Kolström P.","55843479600;24476388300;57160119800;","Maintenance of automated test suites in industry: An empirical study on Visual GUI Testing",2016,"Information and Software Technology","73",,,"66","80",,25,"10.1016/j.infsof.2016.01.012","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960153066&doi=10.1016%2fj.infsof.2016.01.012&partnerID=40&md5=a69fc6f19fe6aab55a049b7a25a90c9e","Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden; Software Engineering Research Lab, School of Computing, Blekinge Institute of Technology, Karlskrona, SE-371 79, Sweden; Saab Sensis ATM Sweden, Ljungadalsgatan 2, Växjö, 352 46, Sweden","Alégroth, E., Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden; Feldt, R., Software Engineering Research Lab, School of Computing, Blekinge Institute of Technology, Karlskrona, SE-371 79, Sweden; Kolström, P., Saab Sensis ATM Sweden, Ljungadalsgatan 2, Växjö, 352 46, Sweden","Context: Verification and validation (V&V) activities make up 20-50% of the total development costs of a software system in practice. Test automation is proposed to lower these V&V costs but available research only provides limited empirical data from industrial practice about the maintenance costs of automated tests and what factors affect these costs. In particular, these costs and factors are unknown for automated GUI-based testing. Objective: This paper addresses this lack of knowledge through analysis of the costs and factors associated with the maintenance of automated GUI-based tests in industrial practice. Method: An empirical study at two companies, Siemens and Saab, is reported where interviews about, and empirical work with, Visual GUI Testing is performed to acquire data about the technique's maintenance costs and feasibility. Results: 13 factors are observed that affect maintenance, e.g. tester knowledge/experience and test case complexity. Further, statistical analysis shows that developing new test scripts is costlier than maintenance but also that frequent maintenance is less costly than infrequent, big bang maintenance. In addition a cost model, based on previous work, is presented that estimates the time to positive return on investment (ROI) of test automation compared to manual testing. Conclusions: It is concluded that test automation can lower overall software development costs of a project while also having positive effects on software quality. However, maintenance costs can still be considerable and the less time a company currently spends on manual testing, the more time is required before positive, economic, ROI is reached after automation. © 2016 Elsevier B.V. All rights reserved.","Empirical; Industrial; Maintenance; Return on investment; Visual GUI Testing","Automation; Computer software selection and evaluation; Costs; Graphical user interfaces; Industrial management; Industrial research; Maintenance; Profitability; Software design; Software testing; Testing; Verification; Empirical; Empirical studies; Industrial; Industrial practices; Re-turn-on; Software development costs; Verification-and-validation; Visual gui testing; Cost benefit analysis",,,,,,,,"Ellims, M., Bridges, J., Ince, D.C., The economics of unit testing (2006) Empirical Softw. Eng., 11 (1), pp. 5-31; Hailpern, B., Santhanam, P., Software debugging, testing, and verification (2002) IBM Syst. J., 41 (1), pp. 4-12; Ericson, T., Subotic, A., Ursing, S., Tim - a test improvement model (1997) Softw. Test. Verification Reliab., 7 (4), pp. 229-246; Olsson, H.H., Alahyari, H., Bosch, J., Climbing the ""stairway to heaven"" - a multiple-case study exploring barriers in the transition from agile development towards continuous deployment of software (2012) 2012 38th EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA), pp. 392-399. , IEEE; Olan, M., Unit testing: test early, test often (2003) J. Comput. Sci. Coll., 19 (2), pp. 319-328; Gamma, E., Beck, K., JUnit: a cook's tour (1999) Java Rep., 4 (5), pp. 27-38; Holmes, A., Kellogg, M., Automating functional tests using selenium (2006) Proceedings of Agile 2006 (Agile'06), pp. 270-275; Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) Companion of the 30th International Conference on Software Engineering, pp. 959-960. , ACM; Vizulis, V., Diebelis, E., Self-testing approach and testing tools (2012) Datorzina¯tne Informa¯cijas Tehnol., 787, p. 27; Börjesson, E., Feldt, R., Automated system testing using visual GUI testing tools: a comparative study in industry (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST), pp. 350-359. , IEEE; Alegroth, E., Feldt, R., Olsson, H., Transitioning manual system test suites to automated testing: an industrial case study (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation (ICST), pp. 56-65. , IEEE; Alégroth, E., Feldt, R., Ryrholm, L., Visual GUI testing in practice: challenges, problems and limitations (2014) Empirical Softw. Eng., 20, pp. 1-51; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. DOM-based web locators: an empirical study (2014) Web Engineering, 8541, pp. 322-340. , Lecture Notes in Computer Science Springer; Rafi, D.M., Moses, K.R.K., Petersen, K., Mantyla, M., Benefits and limitations of automated software testing: systematic literature review and practitioner survey (2012) 2012 Seventh International Workshop on Automation of Software Test (AST), pp. 36-42. , IEEE; Wagner, S., A model and sensitivity analysis of the quality economics of defect-detection techniques (2006) Proceedings of the 2006 International Symposium on Software Testing and Analysis, pp. 73-84. , ACM; Karhu, K., Repo, T., Taipale, O., Smolander, K., Empirical observations on software testing automation (2009) International Conference on Software Testing Verification and Validation. ICST'09, 2009, pp. 201-209. , IEEE; Liu, C., Platform-independent and tool-neutral test descriptions for automated software testing (2000) Proceedings of the 22nd International Conference on Software Engineering, pp. 713-715. , ACM; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference on Software Engineering, pp. 571-579. , ACM; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , ACM Press/Addison-Wesley Publishing Co; Sjösten-Andersson, E., Pareto, L., Costs and benefits of structure-aware capture/replay tools (2006) SERPS06, p. 3; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. programmable web testing: an empirical assessment during test case evolution (2013) 2013 20th Working Conference on Reverse Engineering (WCRE), pp. 272-281. , IEEE; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Softw. Eng., 14 (2), pp. 131-164; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009) IEEE 31st International Conference on Software Engineering, 2009. ICSE 2009, pp. 408-418. , IEEE; Grechanik, M., Xie, Q., Fu, C., Creating GUI testing tools using accessibility technologies (2009) Software Testing, Verification and Validation Workshops, 2009. ICSTW'09. International Conference on, pp. 243-250. , IEEE; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001) Proceedings of the Second International Conference on EXtreme Programming and Flexible Processes in Software Engineering, pp. 114-117. , Citeseer; Leitner, A., Ciupa, I., Meyer, B., Howard, M., Reconciling manual and automated testing: the autotest experience (2007) 40th Annual Hawaii International Conference on System Sciences, 2007. HICSS 2007, p. 261a. , IEEE; Memon, A., GUI testing: pitfalls and process (2002) IEEE Comput., 35 (8), pp. 87-88; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley Professional; Cheon, Y., Leavens, G., A simple and practical approach to unit testing: the JML and JUnit way (2006) ECOOP 2002Object-Oriented Programming, pp. 1789-1901; Rafi, D., Moses, K., Petersen, K., Mantyla, M., Benefits and limitations of automated software testing: systematic literature review and practitioner survey (2012) 2012 Seventh International Workshop on Automation of Software Test (AST), pp. 36-42; Gutiérrez, J.J., Escalona, M.J., Mejías, M., Torres, J., Generation of test cases from functional requirements. a survey (2006) 4ş Workshop on System Testing and Validation; Horowitz, E., Singhera, Z., (1993) Graphical User Interface Testing; Zaraket, F., Masri, W., Adam, M., Hammoud, D., Hamzeh, R., Farhat, R., Khamissi, E., Noujaim, J., GUICOP: specification-based GUI testing (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST), pp. 747-751. , IEEE; Afzal, W., Ghazi, A.N., Itkonen, J., Torkar, R., Andrews, A., Bhatti, K., An Experiment on the Effectiveness and Efficiency of Exploratory Testing; Itkonen, J., Mantyla, M.V., Lassenius, C., Defect detection efficiency: test case based vs. exploratory testing (2007) First International Symposium on Empirical Software Engineering and Measurement, 2007, pp. 61-70. , ESEM 2007, IEEE; Itkonen, J., Rautiainen, K., Exploratory testing: a multiple case study (2005) 2005 International Symposium on Empirical Software Engineering, 2005, 10p; Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated GUI performance testing (2011) Softw. Qual. J., 19, pp. 1-39; Andersson, J., Bache, G., The video store revisited yet again: adventures in GUI acceptance testing (2004) Extreme Programming and Agile Processes in Software Engineering, pp. 1-10; Gao, Z., Liang, Y., Cohen, M.B., Memon, A., Wang, Z., Making system user interactive tests repeatable: when and what should we control? (2015) The Proceedings of the 37th International Conference on Software Engineering (ICSE2015), , IEEE; Vos, T.E., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des. (IJISMD), 6 (3), pp. 46-83; Yeh, T., Chang, T., Miller, R., Sikuli: using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192. , ACM; Alegroth, E., Nass, M., Olsson, H., JAutomate: a tool for system-and acceptance-test automation (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation (ICST), pp. 439-446. , IEEE; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: an innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105; Chang, T., Yeh, T., Miller, R., GUI testing using computer vision (2010) Proceedings of the 28th International Conference on Human Factors in Computing Systems, pp. 1535-1544. , ACM; Kornecki, A., Zalewski, J., Certification of software for real-time safety-critical systems: state of the art (2009) Innovations Syst. Softw. Eng., 5 (2), pp. 149-161; Cadar, C., Godefroid, P., Khurshid, S., Pasareanu, C.S., Sen, K., Tillmann, N., Visser, W., Symbolic execution for software testing in practice: preliminary assessment (2011) 33rd International Conference on Software Engineering (ICSE), 2011, pp. 1066-1071. , IEEE","Alégroth, E.; Chalmers University of Technology, Sweden; email: Emil.Alegroth@Chalmers.se",,,"Elsevier B.V.",,,,,09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84960153066
"Rueda U., Esparcia-Alcazar A.I., Vos T.E.J.","6507265119;6506045663;8980537100;","Visualization of automated test results obtained by the TESTAR tool",2016,"CIBSE 2016 - XIX Ibero-American Conference on Software Engineering",,,,"53","66",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988429380&partnerID=40&md5=accd5d1526c9e41c559387f3af1c9738","Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain","Rueda, U., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain; Esparcia-Alcazar, A.I., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain; Vos, T.E.J., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain","Bigger and more complex software systems demand quality practices that are seldom carried out in real industry. A common practice is to provide a post-release maintenance service of products to correct defects reported by the end user. In previous work we presented TESTAR, a technology-agnostic tool for automated testing of applications from their GUI. Here we introduce state-transition graph models derived from TESTAR test results as a tool for visualisation of what has been tested, to which extent and which software defects were found. We discuss how such models enable to perform quality assessment of software products by inspecting and debugging the system behaviour from the GUI perspective. This constitutes a step forward in aid of software developers and testers, since the User Interface is commonly the means end-users encounter potential software defects.","Automated testing; Quality assessment; User interface models; Visualization","Automation; Defects; Flow visualization; Graphical user interfaces; Program debugging; Software engineering; User interfaces; Visualization; Automated testing; Complex software systems; Maintenance services; Quality assessment; Software developer; Software products; State transition graphs; User interface models; Software testing",,,,,,,,"Aho, P., Menz, N., Rty, T., Schieferdecker, I., Automated Java gui modeling for model-based testing purposes (2011) Information Technology: New Generations (ITNG), 2011 Eighth International Conference on, pp. 268-273. , April; Aho, P., Suarez, M., Kanstren, T., Memon, A., Murphy tools: Utilizing extracted gui models for industrial software testing (2014) The Proceedings of the Testing: Academic & Industrial Conference (TAIC-PART IEEE Computer Society; Alegroth, E., Nass, M., Olsson, H., Jautomate: A tool for system-and acceptancetest automation (2013) Software Testing, Verification and Validation (ICST), 2013 IEEE Sixth International Conference on, pp. 439-446. , March; Amalfitano, D., Fasolino, A., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (ICSTW), 2011 IEEE Fourth International Conference on, pp. 252-261. , March; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (gui) testing: Systematic mapping and repository (2013) Information and Software Technology; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR; What about more sophisticated action specification and selection? (2014) Proceedings of the Seventh Seminar on Advanced Techniques and Tools for Software Evolution, SATToSE 2014, pp. 60-78. , July; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a GUI (2011) Proceedings of the Third International Symposium on Search Based Software Engineering (SSBSE 2011, pp. 10-12. , September; Bauersfeld, S., Vos, T.E.J., Guitest: A Java library for fully automated gui robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 330-333. , http://doi.acm.org/10.1145/2351676.2351739, ASE 2012, ACM, New York, NY, USA; Bauersfeld, S., Vos, T.E.J., Condori-Fernández, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, p. 4. , ESEM 2014, Torino, Italy, September 18-19, 2014; Dallmeier, V., Pohl, B., Burger, M., Mirold, M., Zeller, A., Webmate: Web application test generation in the real world (2014) 2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops, pp. 413-418; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the 31st International Conference on Software Engineering. 408-418. ICSE '09, , http://dx.doi.org/10.1109/ICSE.2009.5070540, IEEE Computer Society, Washington, DC, USA; Morgado, I., Paiva, A., Faria, J., Dynamic reverse engineering of graphical user interfaces (2012) Int. Journal on Advances in Software 5, 3-4, pp. 224-246; Joorabchi, M., Mesbah, A., Reverse engineering ios mobile applications (2012) Reverse Engineering (WCRE 2012 19th Working Conference on, pp. 177-186. , Oct; Kaner, C., (2002) Avoiding Shelfware: A Managers View of Automated Gui Testing, , http://www.kaner.com/pdfs/shelfwar.pdf; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Comparing the maintainability of selenium webdriver test suites employing different locators: A case study (2013) Proceedings of the 2013 International Workshop on Joining AcadeMiA and Industry Contributions to Testing Automation, pp. 53-58. , http://doi.acm.org/10.1145/2489280.2489284, JAMAICA 2013, ACM, New York, NY, USA; Marchetto, A., Tonella, P., Using search-based algorithms for ajax event sequence generation during testing (2011) Empirical Software Engineering, 16 (1), pp. 103-140. , http://dx.doi.org/10.1007/s10664-010-9149-1; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Autoblacktest: A tool for automatic black-box testing (2011) Proceedings of the 33rd International Conference on Software Engineering, pp. 1013-1015. , http://doi.acm.org/10.1145/1985793.1985979, ICSE '11, ACM, New York, NY, USA; Memon, A., Banerjee, I., Nguyen, B., Robbins, B., The first decade of gui ripping: Extensions, applications, and broader impacts (2013) Proceedings of the 20thWorking Conference on Reverse Engineering (WCRE, , IEEE Press; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling AJAX-based web applications through dynamic analysis of user interface state changes (2012) ACM Transactions on the Web, 6 (1), pp. 1-30; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of ajax user interfaces (2009) Proceedings of the 31st International Conference on Software Engineering. 210-220. ICSE '09, , http://dx.doi.org/10.1109/ICSE.2009.5070522, IEEE Computer Society, Washington, DC, USA; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web 6, 1, pp. 31-330. , http://doi.acm.org/10.1145/2109205.2109208, Mar; Miao, Y., Yang, X., An fsm based gui test automation model (2010) Control Automation Robotics Vision (ICARCV 2010 11th International Conference on, pp. 120-126. , Dec; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2013) Automated Software Engineering, pp. 1-41; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.M., Guitar: An innovative tool for automated testing of gui-driven software (2014) Autom. Softw. Eng, 21 (1), pp. 65-105; Rueda, U., Vos, T.E.J., Almenar, F., Martínez, M.O., Esparcia-Alcázar, A.I., TESTAR: From academic prototype towards an industry-ready tool for automated testing at the user interface level (2015) Actas de Las XX Jornadas de Ingeniería Del Software y Bases de Datos (JISBD 2015), pp. 236-245. , Canos, J.H., Gonzalez Harbour, M; Singhera, Z.U., Horowitz, E., Shah, A.A., A graphical user interface (gui) testing methodology (2008) IJITWE, 3 (2), pp. 1-18; Sun, Y., Jones, E.L., Specification-driven automated testing of GUI-based Java programs (2004) Proceedings of the 42nd Annual Southeast Regional Conference, pp. 140-145. , ACM; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated gui-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , FASE'13, Springer-Verlag, Berlin, Heidelberg; Yeh, T., Chang, T.H., Miller, R.C., Sikuli: Using gui screenshots for search and automation (2009) Proceedings of the 22Nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192. , http://doi.acm.org/10.1145/1622176.1622213, UIST '09, ACM, New York, NY, USA",,"Hinojosa C.Gomez O.Cares C.Lopez L.Marczak S.Carvallo J.P.Santos G.Conte T.Solari M.Kalinowski M.Panach I.Fonseca C. E.R.Almentero E.K.","","Universidad de las Fuerzas Armadas ESPE","19th Ibero-American Conference on Software Engineering, CIBSE 2016","27 April 2016 through 29 April 2016",,123413,,9789978301814,,,"English","CIBSE - XIX Ibero-Am. Conf. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84988429380
"Kowalczyk E., Memon A.","56160065200;35599876500;","Extending manual GUI testing beyond defects by building mental models of software behavior",2016,"Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering Workshops, ASEW 2015",,, 7426634,"35","41",,3,"10.1109/ASEW.2015.17","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964459844&doi=10.1109%2fASEW.2015.17&partnerID=40&md5=8df7c9f78676a2571996f528c706dcb6","Department of Computer Science, University of Maryland, College Park, College Park, MD  20740, United States","Kowalczyk, E., Department of Computer Science, University of Maryland, College Park, College Park, MD  20740, United States; Memon, A., Department of Computer Science, University of Maryland, College Park, College Park, MD  20740, United States","Manual GUI testing involves providing inputs to the software via its GUI and determining the software's correctness using its outputs, one of them being the GUI itself. Because of its human-in-the-loop nature, GUI testing is known to be a time-consuming activity. In practice, it is done by junior, inexpensive testers to keep costs low at the very tail-end of the software development process. In this paper, we posit that the importance of GUI testing has suffered due to its traditional narrow role - to detect residual software defects. Because of its human-in-the-loop nature, GUI testing has the potential to provide outputs other than defects and to be used as inputs to several downstream activities, e.g., security analysis. One such output is the mental model that the GUI tester creates during testing, a model that implicitly informs the tester of the software designer's intent. To evaluate our claim, we consider an important question used for security assessment of Android apps: ""What permission-sensitive behaviors does this app exhibit?"" Our assessment is based on the comparison of 2 mental models of 12 Android apps - one derived from the app's usage and the other from its public description. We compare these two models with a third, automatically derived model - the permissions the app seeks from the Android OS. Our results show that the usage-based model provides unique insights into app behavior. This model may be an important outcome of GUI testing, and its consistency with other behavioral information about the app could later be used in software quality assurance activities such as security assessment. © 2015 IEEE.",,"Android (operating system); Application programs; Cognitive systems; Computer software selection and evaluation; Defects; Graphical user interfaces; Mobile security; Quality assurance; Software design; Software engineering; Technical presentations; Human-in-the-loop; Security analysis; Security assessment; Software behavior; Software defects; Software designers; Software development process; Software quality assurance; Software testing",,,,,"National Science Foundation, NSF: 1205501

Defense Advanced Research Projects Agency, DARPA: FA8750-14-2-0039","ACKNOWLEDGMENTS This material is based on research sponsored by the National Science Foundation 1205501 and DARPA under agreement number FA8750-14-2-0039. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon.",,"Artzi, S., Dolby, J., Jensen, S.H., Moller, A., Tip, F., A framework for automated testing of javascript web applications (2011) Software Engineering (ICSE), 2011 33rd International Conference on, pp. 571-580. , IEEE; El Ariss, O., Xu, D., Dandey, S., Vender, B., McClean, P., Slator, B., A systematic capture and replay strategy for testing complex gui based Java applications (2010) Information Technology: New Generations (ITNG), 2010 Seventh International Conference on, pp. 1038-1043. , IEEE; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical gui test case generation using automated planning (2001) Software Engineering, IEEE Transactions on, 27 (2), pp. 144-155; Paiva, A.C., Tillmann, N., Faria, J.C., Vidal, R.F., Modeling and testing hierarchical guis (2005) Abstract State Machines, pp. 329-344. , Citeseer; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for gui-based software applications (2007) ACM Transactions on Software Engineering and Methodology (TOSEM), 16 (1), p. 4; Naik, K., Tripathy, P., (2011) Software Testing and Quality Assurance: Theory and Practice, , John Wiley & Sons; Andersson, C., Runeson, P., Verification and validation in industry - A qualitative survey on the state of practice (2002) Empirical Software Engineering, 2002. Proceedings. 2002 International Symposiumn, pp. 37-47; Spolsky, J., Top five (wrong) reasons you don't have testers (2004) Joel on Software. Apress, pp. 171-177; Galitz, W.O., (2007) The Essential Guide to User Interface Design: An Introduction to GUI Design Principles and Techniques, , John Wiley & Sons; Helander, M.G., (2014) Handbook of Human-computer Interaction, , Elsevier; Payne, S.J., Mental models in human-computer interaction (2007) The Human-Computer Interaction Handbook, pp. 63-75; Shneiderman, B., (2003) Designing the User Interface, , Pearson Education India; Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., McDaniel, P., Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps (2014) SIGPLAN Not., 49 (6), pp. 259-269. , http://doi, Jun. acm.org/10.1145/2666356.2594299; Felt, A.P., Chin, E., Hanna, S., Song, D., Wagner, D., Android permissions demystified (2011) Proceedings of the 18th ACM Conference on Computer and Communications Security, pp. 627-638. , ACM; Grace, M.C., Zhou, W., Jiang, X., Sadeghi, A.-R., Unsafe exposure analysis of mobile in-app advertisements (2012) Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, Ser. WISEC '12, pp. 101-112. , New York, NY, USA: ACM; Arp, D., Spreitzenbarth, M., Hübner, M., Gascon, H., Rieck, K., Siemens, C., Drebin: Effective and explainable detection of android malware in your pocket (2014) Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS); Huang, J., Zhang, X., Tan, L., Wang, P., Liang, B., Asdroid: Detecting stealthy behaviors in android applications by user interface and program behavior contradiction (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 1036-1046. , ACM; Alharbi, K., Blackshear, S., Kowalczyk, E., Memon, A.M., Chang, B.-Y.E., Yeh, T., Android apps consistency scrutinized (2014) CHI'14 Extended Abstracts on Human Factors in Computing Systems, pp. 2347-2352. , ACM; Aung, Z., Zaw, W., Permission-based android malware detection (2013) International Journal of Scientific and Technology Research, 2 (3), pp. 228-234; Gorla, A., Tavecchia, I., Gross, F., Zeller, A., Checking app behavior against app descriptions (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 1025-1035. , ACM; Pandita, R., Xiao, X., Yang, W., Enck, W., Xie, T., Whyper: Towards automating risk assessment of mobile applications (2013) USENIX Security, 13; Appbrain Stats. Http://www.appbrain.com/stats/libraries, , http://www.appbrain.com/stats/libraries, AppBrain; Pearce, P., Felt, A.P., Nunez, G., Wagner, D., Addroid: Privilege separation for applications and advertisers in android (2012) Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security. ACM, pp. 71-72; Stevens, R., Gibler, C., Crussell, J., Erickson, J., Chen, H., Investigating user privacy in android ad libraries (2012) Workshop on Mobile Security Technologies (MoST). Citeseer; Nielsen, J., (1994) Usability Engineering, , Elsevier; Norman, D.A., (2013) The Design of Everyday Things: Revised and Expanded Edition, , Basic books; Preece, J., Rogers, Y., Sharp, H., Benyon, D., Holland, S., Carey, T., (1994) Human-computer Interaction, , Addison-Wesley Longman Ltd; Felt, A.P., Egelman, S., Wagner, D., I've got 99 problems, but vibration ain't one: A survey of smartphone users' concerns (2012) Proceedings of the Second ACM Workshop on Security and Privacy in Smartphones and Mobile Devices. ACM, pp. 33-44; Lin, J., Amini, S., Hong, J.I., Sadeh, N., Lindqvist, J., Zhang, J., Expectation and purpose: Understanding users' mental models of mobile app privacy through crowdsourcing (2012) Proceedings of the 2012 ACM Conference on Ubiquitous Computing, Ser. UbiComp '12, pp. 501-510. , New York, NY, USA: ACM; Felt, A.P., Ha, E., Egelman, S., Haney, A., Chin, E., Wagner, D., Android permissions: User attention, comprehension, and behavior (2012) Proceedings of the Eighth Symposium on Usable Privacy and Security, p. 3. , ACM; Kelley, P.G., Consolvo, S., Cranor, L.F., Jung, J., Sadeh, N., Wetherall, D., A conundrum of permissions: Installing applications on an android smartphone (2012) Financial Cryptography and Data Security, pp. 68-79. , Springer; Qu, Z., Rastogi, V., Zhang, X., Chen, Y., Zhu, T., Chen, Z., Au-tocog: Measuring the description-to-permission fidelity in android applications (2014) Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pp. 1354-1365. , ACM; Fuchs, A.P., Chaudhuri, A., Foster, J.S., (2009) Scandroid: Automated Security Certification of Android Applications, 2 (3). , http://www.cs.umd.edu/avik/projects/scandroidascaa, Manuscript, Univ. of Maryland; Peng, H., Gates, C., Sarma, B., Li, N., Qi, Y., Potharaju, R., Nita-Rotaru, C., Molloy, I., Using probabilistic generative models for ranking risks of android apps (2012) Proceedings of the 2012 ACM Conference on Computer and Communications Security. ACM, pp. 241-252; Apktool, , http://ibotpeaches.github.io/Apktool/; Official Android Documentation, , http://developer.android.com; Au, K.W.Y., Zhou, Y.F., Huang, Z., Lie, D., Pscout: Analyzing the android permission specification (2012) Proceedings of the 2012 ACM Conference on Computer and Communications Security. ACM, pp. 217-228; Venndiagram, , http://cran.r-project.org/web/packages/VennDiagram",,,"ACM SIGAI;ACM Special Interest Group on Software Engineering (SIGSOFT);IEEE;IEEE Computer Society;IEEE TCSE","Institute of Electrical and Electronics Engineers Inc.","30th IEEE/ACM International Conference on Automated Software Engineering Workshops, ASEW 2015","9 November 2015 through 13 November 2015",,119822,,9781467397759,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Eng. Workshops, ASEW",Conference Paper,"Final","",Scopus,2-s2.0-84964459844
"Amalfitano D., Amatucci N., Fasolino A.R., Tramontana P.","25926238800;55843621200;7006159957;8879739800;","A conceptual framework for the comparison of fully automated GUI testing techniques",2016,"Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering Workshops, ASEW 2015",,, 7426636,"50","57",,4,"10.1109/ASEW.2015.19","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964452685&doi=10.1109%2fASEW.2015.19&partnerID=40&md5=dd7d20ce2194c68e563657642d07384e","Department of Electrical Engineering and Information Technologies, University Federico II of Naples, Via Claudio 21, Naples, Italy","Amalfitano, D., Department of Electrical Engineering and Information Technologies, University Federico II of Naples, Via Claudio 21, Naples, Italy; Amatucci, N., Department of Electrical Engineering and Information Technologies, University Federico II of Naples, Via Claudio 21, Naples, Italy; Fasolino, A.R., Department of Electrical Engineering and Information Technologies, University Federico II of Naples, Via Claudio 21, Naples, Italy; Tramontana, P., Department of Electrical Engineering and Information Technologies, University Federico II of Naples, Via Claudio 21, Naples, Italy","Fully automated GUI testing techniques play an important role in the modern software development life cycles. These techniques are implemented by algorithms that automatically traverse the GUI by interacting with it, like robots discovering unexplored spaces. These algorithms are able to define and run test cases on the fly, while the application is in execution. Testing adequacy, performance or costs of such techniques may differ on the basis of different factors. In this paper we will propose an approach for comparing fully automated GUI testing techniques in a systematic manner. The approach is based on a generalized parametric algorithm that abstracts the key aspects of these techniques and provides a conceptual framework that can be used to define and compare different testing approaches. To validate the framework, we exploit it to compare the testing adequacy and the GUI models inferred by 9 fully automated testing techniques obtained by varying the configuration of the algorithm. The experiment is performed on a real Android application. © 2015 IEEE.","Active learning testing; Android Testing Automation; Conceptual Framework; Random testing","Algorithms; Artificial intelligence; Automation; Graphical user interfaces; Life cycle; Software design; Software engineering; Technical presentations; Testing; Active Learning; Android applications; Conceptual frameworks; Parametric algorithms; Random testing; Software development life cycle; Testing adequacies; Testing automation; Software testing",,,,,,,,"Nguyen, B., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 31-330. , Mar; Amalfitano, D., Fasolino, A.R., Tramontana, P., Rich internet application testing using execution trace data (2010) Proceedings of the 2010 Third International Conference on Software Testing, Verification, and Validation Workshops, Ser. ICSTW '10, pp. 274-283. , Washington, DC, USA: IEEE Computer Society; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Greenwald, A., Applying concept analysis to user-session-based testing of web applications (2007) Software Engineering, IEEE Transactions on, 33 (10), pp. 643-658. , Oct; Moreira, R., Paiva, A., Memon, A., A pattern-based approach for gui modeling and testing (2013) Software Reliability Engineering (ISSRE), 2013 IEEE 24th International Symposium on, pp. 288-297. , Nov; Myers, G.J., Sandler, C., (2004) The Art of Software Testing, , John Wiley & Sons; Raffelt, H., Merten, M., Steffen, B., Margaria, T., Dynamic testing via automata learning (2009) International Journal on Software Tools for Technology Transfer, 11 (4), pp. 307-324; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) Proc. of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, pp. 623-640. , ACM; Miller, B.P., Cooksey, G., Moore, F., An empirical study of the robustness of macos applications using random testing (2007) SIGOPS Oper. Syst. Rev., 41 (1), pp. 78-86. , Jan; Monkey, , http://developer.android.com/tools/help/monkey.html; MacHiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, Ser. ESEC/FSE 2013, pp. 224-234. , New York, NY, USA: ACM; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, Ser. ISSTA 2013, pp. 67-77. , New York, NY, USA: ACM; Amalfitano, D., Fasolino, A.R., Carmine, S.D., Memon, A., Tramontana, P., Using gui ripping for automated testing of android applications (2012) ASE '12: Proceedings of the 27th IEEE International Conference on Automated Software Engineering, , Washington, DC, USA: IEEE Computer Society; Hao, S., Liu, B., Nath, S., Halfond, W.G., Govindan, R., Puma: Programmable ui-automation for large-scale dynamic analysis of mobile apps (2014) Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, Ser. MobiSys '14, pp. 204-217. , New York, NY, USA: ACM; Deng, X., Kameda, T., Papadimitriou, C., How to learn an unknown environment. I: The rectilinear case (1998) J. ACM, 45 (2), pp. 215-245. , Mar; Duncan, C.A., Kobourov, S.G., Kumar, V.S.A., Optimal constrained graph exploration (2006) ACM Trans. Algorithms, 2 (3), pp. 380-402. , Jul; Fraigniaud, P., Ilcinkas, D., Peer, G., Pelc, A., Peleg, D., Graph exploration by a finite automaton (2005) Theoretical Computer Science, 345 (2-3), pp. 331-344. , http://www.sciencedirect.com/science/article/pii/S0304397505003993, mathematical Foundations of Computer Science 2004; Amalfitano, D., Amatucci, N., Fasolino, A.R., Tramontana, P., Kowal-Czyk, E., Memon, A., Exploiting the saturation effect in automatic random testing of android applications (2015) The Proceedings of the 2nd ACM International Conference on Mobile Software Engineering and Systems (MOBILESoft 2015); Gao, J., Bai, X., Tsai, W.-T., Uehara, T., Mobile application testing: A tutorial (2014) Computer, 47 (2), pp. 46-55. , Feb; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) SIGPLAN Not., 48 (10), pp. 641-660. , http://doi, Oct. acm.org/10. 1145/2544173.2509549; Wang, P., Liang, B., You, W., Li, J., Shi, W., Automatic android gui traversal with high coverage (2014) Proceedings of the 2014 Fourth International Conference on Communication Systems and Network Technologies, Ser. CSNT '14, pp. 1161-1166. , Washington, DC, USA: IEEE Computer Society; Android Monkey Library, , http://code.google.com/p/androidmonkey/; Amalfitano, D., Fasolino, A., Tramontana, P., Ta, B., Memon, A., Mobiguitar - A tool for automated model-based testing of mobile apps (2015) Software, IEEE, 32 (5), pp. 53-59; Mahmood, R., Mirzaei, N., Malek, S., Evodroid: Segmented evolutionary testing of android apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, Ser. FSE 2014, pp. 599-609. , New York, NY, USA: ACM",,,"ACM SIGAI;ACM Special Interest Group on Software Engineering (SIGSOFT);IEEE;IEEE Computer Society;IEEE TCSE","Institute of Electrical and Electronics Engineers Inc.","30th IEEE/ACM International Conference on Automated Software Engineering Workshops, ASEW 2015","9 November 2015 through 13 November 2015",,119822,,9781467397759,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Eng. Workshops, ASEW",Conference Paper,"Final","",Scopus,2-s2.0-84964452685
"Gao Z., Chen Z., Zou Y., Memon A.M.","55735482100;55579848600;55922244200;35599876500;","SITAR: GUI Test Script Repair",2016,"IEEE Transactions on Software Engineering","42","2", 7214294,"170","186",,27,"10.1109/TSE.2015.2454510","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962812270&doi=10.1109%2fTSE.2015.2454510&partnerID=40&md5=fd6fd14a5f6feb3036e537c31d5bde4e","State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Department of Computer Science, University of Maryland, College Park, MD, United States; Department of Computer Science, Purdue University, West Lafayette, IN, United States","Gao, Z., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science, University of Maryland, College Park, MD, United States; Chen, Z., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China; Zou, Y., State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, China, Department of Computer Science, Purdue University, West Lafayette, IN, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD, United States","System testing of a GUI-based application requires that test cases, consisting of sequences of user actions/events, be executed and the software's output be verified. To enable automated re-testing, such test cases are increasingly being coded as low-level test scripts, to be replayed automatically using test harnesses. Whenever the GUI changes - widgets get moved around, windows get merged - some scripts become unusable because they no longer encode valid input sequences. Moreover, because the software's output may have changed, their test oracles - assertions and checkpoints - encoded in the scripts may no longer correctly check the intended GUI objects. We present ScrIpT repAireR (SITAR), a technique to automatically repair unusable low-level test scripts. SITAR uses reverse engineering techniques to create an abstract test for each script, maps it to an annotated event-flow graph (EFG), uses repairing transformations and human input to repair the test, and synthesizes a new 'repaired' test script. During this process, SITAR also repairs the reference to the GUI objects used in the checkpoints yielding a final test script that can be executed automatically to validate the revised software. SITAR amortizes the cost of human intervention across multiple scripts by accumulating the human knowledge as annotations on the EFG. An experiment using QTP test scripts suggests that SITAR is effective in that 41-89 percent unusable test scripts were repaired. Annotations significantly reduced human cost after 20 percent test scripts had been repaired. © 2015 IEEE.","GUI test script; GUI testing; human knowledge accumulation; test script repair","Application programs; Flow graphs; Graphical user interfaces; Repair; Reverse engineering; Testing; Event-flow graph; GUI testing; Human intervention; Human knowledge; Input sequence; Reverse engineering techniques; System testing; Test scripts; Software testing",,,,,,,,"Memon, A., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 41-436; Daniel, B., Gvero, T., Marinov, D., On test repair using symbolic execution (2010) Proc. 19th Int. Symp. Softw. Testing Anal., pp. 207-218; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezz, M., Automated GUI refactoring and test script repair (2011) Proc. 1st Int. Workshop End-to-End Test Script Eng., pp. 38-41; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2006) Proc. 5th Int. Conf. Formal Approaches Softw. Testing, pp. 16-31; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUIdirected test scripts (2009) Proc. Int. Conf. Softw. Eng., pp. 408-418; Memon, A., An event-flow model of GUI-based applications for testing (2007) Softw. Testing, Verification Rel., 17 (3), pp. 137-157; Lalwani, T., (2011) QuickTest Professional Unplugged, 2nd Ed. Knowledge-Inbox, , http://www.knowledgeinbox.com/; Burns, D., (2010) Selenium 1.0 Testing Tools: Beginners Guide, , Birmingham, U.K.: Packt Publishing; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proc. 10th Work. Conf. Reverse Eng., pp. 260-269; Memon, A., Soffa, M.L., Regression testing of GUIs (2003) Proc. 9th Eur. Softw. Eng. Conf. Held Jointly with 11th ACM SIGSOFT Int. Symp. Found. Softw. Eng., pp. 118-127; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proc. 3rd Int. Conf. Softw. Testing, Verification Validation, pp. 245-254; Fu, C., Grechanik, M., Xie, Q., Inferring types of references to GUI objects in test scripts (2009) Proc. Int. Conf. Softw. Testing Verification Validation, pp. 1-10; Zhang, S., Lü, H., Ernst, M.D., Automatically repairing broken workflows for evolving GUI applications (2013) Proc Int. Symp. Softw. Testing Anal., pp. 45-55; Choudhary, S.R., Zhao, D., Versee, H., Orso, A., WATER: Web application test repair (2011) Proc. 1st Int. Workshop End-to-End Test Script Eng., pp. 24-29; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Comparing the maintainability of selenium webdriver test suites employing different locators: A case study (2013) Proc. Int. Workshop Joining Acade-MiA Ind. Contributions Testing Autom., pp. 53-58; Alshahwan, N., Harman, M., Automated session data repair for web application regression testing (2008) Proc. Int. Conf. Softw. Testing, Verification, Validation, pp. 298-307; Mirzaaghaei, M., Pastore, F., Pezzé, M., Automatically repairing test cases for evolving method declarations (2010) IEEE International Conference on Software Maintenance, ICSM, , Article number 5609549; Mirzaaghaei, M., Pastore, F., Pezze, M., Supporting test suite evolution through test case adaptation (2012) Proc. IEEE 5th Int. Conf. Softw. Testing, Verification Validation, pp. 231-240; Mirzaaghaei, M., Automatic test suite evolution (2011) Proc. 19th ACM SIGSOFT Symp. 13th Eur. Conf. Found. Softw. Eng., pp. 396-399; Daniel, B., Jagannath, V., Dig, D., Marinov, D., Reassert: Suggesting repairs for broken unit tests (2009) Proc. Int. Conf. Automated Softw. Eng., pp. 433-444; Evans, R.B., Savoia, A., Differential testing: A new approach to change detection (2007) Proc. 6th Joint Meet. Eur. Softw. Eng. Conf. ACM SIGSOFT Symp. Found. Softw. Eng., pp. 549-552; Taneja, K., Dig, D., Xie, T., Automated detection of API refactorings in libraries (2007) Proc. 22nd IEEE/ACM Int. Conf. Autom. Softw. Eng., pp. 377-380; Le Goues, C., Nguyen, T., Forrest, S., Weimer, W., GenProg: A generic method for automatic software repair (2012) IEEE Trans. Softw. Eng., 38 (1), pp. 54-72. , Jan; Memon, A., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) Proc. 19th IEEE Int. Conf. Automated Softw. Eng., pp. 186-195; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACMTrans. Softw. Eng. Methodol., 16 (1). , Feb; Xie, T., Augmenting automatically generated unit-test suites with regression oracle checking (2006) Proc. 20th Eur. Conf. Object-Oriented Program., pp. 380-403; Yang, W., Chen, Z., Gao, Z., Zou, Y., Xu, X., GUI testing assisted by human knowledge: Random vs. Functional (2014) J. Syst. Softw., 89, pp. 76-86. , Mar; Pinto, L.S., Sinha, S., Orso, A., Understanding myths and realities of test-suite evolution (2012) Proc. ACM SIGSOFT 20th Int. Symp. Found. Softw. Eng., pp. 331-3311; Nguyen, B.N., Memon, A.M., An observe-model-exercise paradigm to test event-driven systems with undetermined input spaces (2014) IEEE Trans. Softw. Eng., 40 (3), pp. 216-234. , Mar; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) ACM SIGSOFT Soft. Eng. Notes, 26 (5), pp. 256-267; Oliveira, R.A.P., Emil, A., Gao, Z., Memon, A., Definition and evaluation of mutation operators for GUI-level mutation analysis (2015) Proc. IEEE 8th Int. Conf. Softw. Testing, Verification Validation Workshops, pp. 1-10; Algroth, E., Gao, Z., Oliveira, R.A., Memon, A., Conceptualization and evaluation of component-based testing unified with visual GUI testing: An empirical study (2015) Proc. 8th Int. Conf. Softw. Testing, Verification Validation, pp. 1-10","Chen, Z.; State Key Laboratory for Novel Software Technology, China; email: zychen@nju.edu.cn",,,"Institute of Electrical and Electronics Engineers Inc.",,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","",Scopus,2-s2.0-84962812270
"Schulze C., Lindvall M., Bjorgvinsson S., Wiegand R.","57207719196;7005523126;57189045102;56343904400;","Model generation to support model-based testing applied on the NASA DAT Web-application - An experience report",2016,"2015 IEEE 26th International Symposium on Software Reliability Engineering, ISSRE 2015",,, 7381801,"77","87",,3,"10.1109/ISSRE.2015.7381801","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964876530&doi=10.1109%2fISSRE.2015.7381801&partnerID=40&md5=406a8b156392779c7f205e37b8a14701","Fraunhofer Center for Experimental Software Engineering, College Park, MD, United States; NASA Goddard Space Flight Center, Greenbelt, MD, United States","Schulze, C., Fraunhofer Center for Experimental Software Engineering, College Park, MD, United States; Lindvall, M., Fraunhofer Center for Experimental Software Engineering, College Park, MD, United States; Bjorgvinsson, S., Fraunhofer Center for Experimental Software Engineering, College Park, MD, United States; Wiegand, R., NASA Goddard Space Flight Center, Greenbelt, MD, United States","Model-based Testing (MBT), where a model of the system under test's (SUT) behavior is used to automatically generate executable test cases, is a promising and versatile testing technology. Nevertheless, adoption of MBT technologies in industry is slow and many testing tasks are performed via manually created executable test cases (i.e. test programs such as JUnit). In order to adopt MBT, testers must learn how to construct models and use these models to generate test cases, which might be a hurdle. An interesting observation in our previous work is that the existing manually created test cases often provided invaluable insights for the manual creation of the testing models of the system. In this paper we present an approach that allows the tester to first create and debug a set of test cases. When the tester is happy with the test cases, the next step is to automatically generate a model from the test cases. The generated model is derived from the test cases, which are actions that the system can perform (e.g. a button clicks) and their expected outputs in form of assert statements (e.g. assert data entered). The model is a Finite State Machine (FSM) model that can be employed with little or no manual changes to generate additional test cases for the SUT. We successfully applied the approach in a feasibility study to the NASA Data Access Toolkit (DaT), which is a web-based GUI. One compelling finding is that the test cases that were generated from the automatically generated models were able to detect issues that were not detected by the original set of manually created test cases. We present the findings from the case study and discuss best practices for incorporating model generation techniques into an existing testing process. © 2015 IEEE.","Model Generation; Model-based Testing; State Machines","Logic circuits; Model checking; NASA; Software reliability; Testing; Automatically generated; Experience report; Feasibility studies; Model based testing; Model generation; State machine; System under test; Testing technology; Automatic test pattern generation",,,,,,"This work was conducted as part of a NASA supported SARP project. The authors wish to acknowledge support from SARP as well as from the DAT team.",,"Tretmans, J., Model-based testing and some steps towards test-based modelling (2011) Formal Methods for Eternal Networked Software Systems, pp. 297-326. , Springer Berlin Heidelberg; Utting, M., Legeard, B., (2010) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann; Hartman, A., Katara, M., Olvovsky, S., (2006) Choosing A Test Modeling Language: A Survey, pp. 204-218. , Oct; Ganesan, D., Lindvall, M., McComas, D., Bartholomew, M., Slegel, S., Medina, B., Krikhaar, R., Montgomery, L.P., An analysis of unit tests of a flight software product line (2012) Sci. Comput. Program, , March Mar. 2012; Schulze, C., Ganesan, D., Lindvall, M., McComas, D., Cudmore, A., Model-based testing of NASA's OSAL API-An experience report (2013) 2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE), pp. 300-309; Gudmundsson, V., Schulze, C., Ganesan, D., Lindvall, M., Wiegand, R., An initial evaluation of model-based testing (2013) IEEE 24th International Symposium on Software Reliability Engineering (ISSRE); Schulze, C., Ganesan, D., Lindvall, M., Cleaveland, R., Goldman, D., Assessing model-based testing: An empirical study conducted in industry (2014) Companion Proceedings of the 36th International Conference on Software Engineering-ICSE Companion 2014, pp. 135-144; GraphWalker: The Open Source Model-Based Testing Tool, , http://graphwalker.org/, Accessed: 06-Jun-2015; Lindvall, M., Ganesan, D., Ardal, R., Wiegand, R.E., Metamorphic model-based testing applied on NASA DAT-An experience report (2015) 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, 2, pp. 129-138; Liu, H., Kuo, F.-C., Towey, D., Chen, T.Y., How effectively does metamorphic testing alleviate the oracle problem? (2014) IEEE Trans. Softw. Eng., 40 (1), pp. 4-22. , Jan; Selenium-Web Browser Automation, , http://www.seleniumhq.org/, Accessed: 06-Jun-2015]; YEd-Graph Editor, , http://www.yworks.com/en/products/yfiles/yed/, Accessed: 06-Jun-2015]; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) 2008 International Conference on Software Testing, Verification, and Validation, pp. 121-130; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslén, A., (2000) Experimentation in Software Engineering: An Introduction, 15 (1). , Springer Netherlands; Angluin, D., Learning regular sets from queries and counterexamples (1987) Inf. Comput., 75 (2), pp. 87-106. , Nov; Biermann, A.W., Feldman, J.A., On the synthesis of finite-state machines from samples of their behavior (1972) IEEE Trans. Comput., C-21 (6), pp. 592-597. , Jun; Lorenzoli, D., Mariani, L., Pezzè, M., Automatic generation of software behavioral models (2008) Proceedings of the 13th International Conference on Software Engineering-ICSE '08, p. 501; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2013) Autom. Softw. Eng., 21 (1), pp. 65-105. , May; Memon, A.M., An event-flow model of GUI-based applications for testing: Research Articles (2007) Softw. Testing, Verif. Reliab., 17 (3), pp. 137-157. , Sep; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896. , Oct; Torens, C., Ebrecht, L., Lemmer, K., Starting model-based testing based on existing test cases used for model creation (2011) 2011 IEEE 11th International Conference on Computer and Information Technology, pp. 320-327",,,"","Institute of Electrical and Electronics Engineers Inc.","26th IEEE International Symposium on Software Reliability Engineering, ISSRE 2015","2 November 2015 through 5 November 2015",,119083,,9781509004065,,,"English","IEEE Int. Symp. Softw. Reliab. Eng., ISSRE",Conference Paper,"Final","",Scopus,2-s2.0-84964876530
"Gao Z., Fang C., Memon A.M.","55735482100;55321130800;35599876500;","Pushing the limits on automation in GUI regression testing",2016,"2015 IEEE 26th International Symposium on Software Reliability Engineering, ISSRE 2015",,, 7381848,"565","575",,6,"10.1109/ISSRE.2015.7381848","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964840441&doi=10.1109%2fISSRE.2015.7381848&partnerID=40&md5=3340ff287dc55723392f8af11a6952e6","Department of Computer Science, University of Maryland, College Park, United States; State Key Laboratory for Novel Software Technology, Naniine University, China","Gao, Z., Department of Computer Science, University of Maryland, College Park, United States; Fang, C., State Key Laboratory for Novel Software Technology, Naniine University, China; Memon, A.M., Department of Computer Science, University of Maryland, College Park, United States","Although there has been much work on automated GUI regression testing of software, full automation continues to etude us. There are two significant impediments to full automation: obtaining (J) test inputs and (2) test oracle. We now push the envelope 011 full automation of GUI regression testing by fully automatically generating test cases as well as the test oracle, completely eliminating manual work. This allows us to study issues of false positives/negatives in test failure; we provide ways to minimize these. The results of our empirical studies suggest that our approach of using workflow-based test eases, derived front the software under test, may help empower the end user to perform regression testing before applying software updates. © 2015 IEEE.",,"Automatic test pattern generation; Automation; Graphical user interfaces; Regression analysis; Software reliability; Well testing; Empirical studies; False positive; GUI regression testing; Regression testing; Software updates; Test failure; Test inputs; Test oracles; Software testing",,,,,"National Science Foundation, NSF: 1205501

Defense Advanced Research Projects Agency, DARPA: FA8750-14-2-0039","We thank Dr. Yvan Labiche for his valuable feedback and suggestions. This material is based on research sponsored by the National Science Foundation Grant Number 1205501 and by DARPA under agreement number FA8750-14-2-0039.",,"Rothermel, G., Haold, M.J., Analyzing rgression lest selection techniques (1999) Softwar Engineering. IEEE Transactions On., 22 (8), p. 529551; Onoma, A.K., Tsai, W.-T., Ponawala, M., Suganum, H., Regrssion testng in an industral environment (1989) Communications of the ACM., 41 (5), pp. 81-86; Qu, X., Cohen, M.B., Rothermel, G., Cunfguration-awa rgression testing: An empircal study of smpling and prortiztion (2008) Proceedings of Tie 2008 International Sympsium on Sofwar Testing and Analysis, pp. 75-86. , ACM; Voas, J.M., Cerifying of-th-shelf sufwar components (1989) Computer., 31 (6), pp. 53-59; Mens, T., Introduction and Roadmap: History and Challenges of Software Evolution, 208. , Springer; Rothenel, G., Untch, R.H., Chu, C., Harold, M.J., Proritizing test cases for regression testing (2001) Sofware Engineering. IEEE Transactions On., 27 (10), pp. 929-948; White, L.J., Regsion testing of gui event interactions (1996) Sofware Maintenance 1996. Proceedings., International Conference On. IEEE, pp. 350-358; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-dircted test scrpt Prceedings of the 31st International Confernce on Software Engineering. Ser. ICSE '09, 20, pp. 408-418. , http://dx.doi.org/10.1109/ICSE.2009.5070540, Washington. DC. USA: IEEE Computer Soiety; Arlt, S., Banerjee, I., Bertolini, C., Memon, A.M., Schaf, M., Grey-bos gui testing: Effcient generation of event sequences (2012) CoRR, , Abs/1205.4928; Nguyen, B.N., Memon, A., An obsere-moel-exerise∗ paradigm to test event-driven systems with undetermined input space (2014) IEEE Transactions on Software Engineering., 99, p. 1. , http://ieeexplor.ieee.org/stamp/stmp.jsp?arnumber=06714448, Preprints; Harrold, M.J., Testing: A roadmap (2000) Prceedings of the Confernce on the Future of Sofware Engineering, pp. 61-72. , ACM; Memon, A.M., Soffa, M.L., Regression testing of guis (2003) Proceedings of the 9th European Software Engineering Coferernce Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering. Ser. ESEC/FSE-II, pp. 118-127. , New York, NY, USA: ACM; Nguyen, B., Robbins, B., Baneree, I., Memon, A., Guitar an innovative tool for automated testing of GUI-driven software (2013) Automated Software Engineering, pp. 1-41. , http://dx.doi.org/10.l007/s10515-013-0128-9; Memon, A.M., Banerjee, I., Nagarajan, A., GUI rippiing: Reverse engineerng of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, , November; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for gui-based sufware applications (2007) ACM Transactions on Software Engineering and Methodology., 16 (1), p. 4; Gao, Z., Liang, Y., Cohen, M.B., Memon, A.M., Wang, Z., Making system user interactive tests repeatable: When and what should we control? (2015) The Proceedings of the 37th International Conference on Software Engineering (ICSE 2015); Yoo, S., Haan, M., Regression testing minimization, selection and prioritization: A survey (2012) Software Testing, Verification and Reliability., 22 (2), pp. 67-120; Richardson, D.J., Taos: Testing with analysis and oracle support (1994) Proceedings of the 1994 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 138-153. , ACM; Dillon, L.K., Ramakrishna, Y., Generating oracles from your favorite temporal logic specifications (1996) ACM SIGSOFT Software Engineering Notes, 21 (6), pp. 106-117. , ACM; Csallner, C., Smaragdakis, Y., Jcrasher: An automatic robustness tester for Java (2004) Software: Practice and Experience, 34 (11), pp. 1025-1050; Pacheco, C., Ernst, M.D., Randoop: Feedback-directed random testing for Java (2007) Companion to the 22nd ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications Companion. ACM, pp. 815-816; Xie, T., Augmenting automatically generated unit-test suites with regression oracle checking (2006) ECOOP 2006-Object-Oriented Programming, pp. 380-403. , Springer; Pacheco, C., Ernst, M.D., (2005) Eclat: Automatic Generation and Classification of Test Inputs, , Springer; Fraser, G., Arcuri, A., Evosuite: Automatic test suite generation for object-oriented sofware (2011) Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering. ACM, pp. 416-419; Harrold, M.J., Rothermel, G., Sayre, K., Wu, R., Yi, L., An empirical investigation of the relationship between spectra differences and regression faults (2000) Sofware Testing Verification and Reliability, 10 (3), pp. 171-194; Xie, T., Notkin, D., Checking inside the black box: Regression testing by comparing value spectra (2005) Software Engineering, IEEE Transactions On., 31 (10), pp. 869-883; Zaeem, R.N., Prasad, M.R., Khurshid, S., Automated genertion of oracles for testing user-interaction features of mobile apps Sofware Testing, Verification and Validation (ICST). 2014 IEEE Seventh International Conference On. IEEE, 2014, pp. 183-192; Orso, A., Kennedy, B., Selective capture and replay of program executions (2005) ACM SIGSOFT Software Engineering Notes, 30 (4), pp. 1-7. , ACM; Orso, A., Xie, T., Bert: Behavioral regression testing (2008) Proceedings of the 2008 International Workshop on Dynamic Analysis: Held in Conjunction with the ACM SIGSOFT International Symposium on Software Testing and Anaalysis (ISSTA 2008), pp. 36-42. , ACM; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for gui-based software applications (2007) ACM Transaction on Software Engineering and Methodology (TOSEM), 16 (1), p. 4; Ga, Z., Chen, Z., Zou, Y., Memon, A., Sitar: Gui script repair (2015) IEEE Transaction on Software Engineering",,,,"Institute of Electrical and Electronics Engineers Inc.","26th IEEE International Symposium on Software Reliability Engineering, ISSRE 2015","2 November 2015 through 5 November 2015",,119083,,9781509004065,,,"English","IEEE Int. Symp. Softw. Reliab. Eng., ISSRE",Conference Paper,"Final","",Scopus,2-s2.0-84964840441
"Morgado I.C., Paiva A.C.R.","55321167400;7102683763;","The iMPAcT tool: Testing UI patterns on mobile applications",2016,"Proceedings - 2015 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015",,, 7372083,"876","881",,20,"10.1109/ASE.2015.96","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963864509&doi=10.1109%2fASE.2015.96&partnerID=40&md5=303739a7ecb636382eeca16af7c90156","Department of Informatics Engineering, Faculty of Engineering of University of Porto, INESC TEC, Porto, Portugal","Morgado, I.C., Department of Informatics Engineering, Faculty of Engineering of University of Porto, INESC TEC, Porto, Portugal; Paiva, A.C.R., Department of Informatics Engineering, Faculty of Engineering of University of Porto, INESC TEC, Porto, Portugal","This paper presents the iMPAcT tool that tests recurring behaviour, i.e., UI Patterns, on mobile applications. This tool is implemented in Java and makes use of Android's APIs UI Automator and UiAutomation. The tool automatically explores a mobile application in order to automatically identify and test UI Patterns. Each UI Pattern has a test strategy, Test Patterns, associated, which is applied when an UI Pattern is found. The approach works on top of a catalogue of UI Patterns, which determines which UI Patterns are to be tested, and what should their correct behaviour be, and may be used for any application. © 2015 IEEE.","Mobile Testing; Pattern-based testing; Reverse Engineering; UI Patterns","Mobile computing; Mobile telecommunication systems; Reverse engineering; Mobile applications; Mobile testing; Test Pattern; Test strategies; Ui patterns; Software engineering",,,,,,,,"Ingraham, N., (2013) Apple Announces 1 Million Apps in the App Store, More Than 1 Billion Songs Played on ITunes Radio, , Oct; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), , (New York, New York, USA), p. 258, ACM Press, Sept; Muccini, H., Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) 7th International Workshop on Automation of Software Test (AST 2012), pp. 29-35. , (Zurich, Switzerland)IEEE; Capgemini, H.P., Sogeti, (2014) World Quality Report 2014-15; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , San Francisco, CA, USA: Morgan Kaufmann Publishers, 1 ed; Kervinen, A., Maunumaa, M., Paakkonen, T., Katara, M., Grieskamp, W., Weise, C., Model-based testing through a GUI (2006) 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005), 3997, pp. 16-31. , (W. Grieskamp and C. Weise, eds.) of Lecture Notes in Computer Science, (Berlin, Heidelberg) , Springer Berlin Heidelberg; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis, Jan; Paiva, A.C.R., Faria, J.C., Tillmann, N., Vidal, R.A.M., A model-to-implementation mapping tool for automated model-based gui testing (2005) 7th International Conference on Formal Engineering Methods (ICFEM '05), pp. 450-464; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) 28th International Conference on Software Engineering-(ICSE 2006), pp. 997-1000. , (New York, New York, USA)ACM Press, May; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a model-driven approach (2006) 2006 International Workshop on Automation of Software Test (AST 2006), pp. 9-14. , (New York, New York, USA) , ACM Press, May; Arlt, S., Bertolini, C., Schaf, M., Behind the scenes: An approach to incorporate context in GUI test case generation (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2011), pp. 222-231. , (Washington, DC, USA); Monteiro, T., Paiva, A.C.R., Pattern based GUI testing modeling environment (2013) Sixth IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2013), pp. 140-143. , (Luxembourg, Luxembourg) IEEE, Mar; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for GUI modeling and testing (2013) 24th IEEE International Symposium on Software Reliability Engineering (ISSRE 2013), pp. 288-297. , (Passadena, CA) , IEEE, Nov; Moreira, R.M.L.M., Paiva, A.C.R., A GUI modeling DSL for pattern-based GUI testing PARADIGM (2014) 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE'2014), , (Lisbon, Portugal); Chikofsky, E., Cross, J., Reverse engineering and design recovery: A taxonomy (1990) IEEE Software, 7 (1), pp. 13-17; Franke, D., Elsemann, C., Kowalewski, S., Weise, C., Reverse engineering of mobile application lifecycles (2011) 18th Working Conference on Reverse Engineering (WCRE '11), pp. 283-292. , IEEE, Oct; Joorabchi, M.E., Mesbah, A., Reverse engineering iOS mobile applications (2012) 2012 19th Working Conference on Reverse Engineering, pp. 177-186. , IEEE, Oct; Sacramento, C., Paiva, A.C.R., Web application model generation through reverse engineering and UI pattern inferring (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), pp. 105-115. , IEEE, Sept. (Guimaraes, Portugal); Nilsson, E.G., Design patterns for user interface for mobile applications (2009) Advances in Engineering Software, 40, pp. 1318-1328. , Dec; Sahami Shirazi, A., Henze, N., Schmidt, A., Goldberg, R., Schmidt, B., Schmauder, H., Insights into layout patterns of mobile user interfaces by an automatic analysis of android apps (2013) 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 275-284. , ACM, June; Neil, T., (2014) Mobile Design Pattern Gallery: UI Patterns for Smartphone Apps, , Sebastopol, Canada: O'Reilly Media, Inc., 2nd ed; Alexander, C., Ishikawa, S., Silverstein, M., (1977) A Pattern Language: Towns, Buildings, Construction, , Berkeley, CA, USA: Oxford University Press; Coimbra Morgado, I., Paiva, A.C., Faria, J.P., Automated pattern-based testing of mobile applications (2014) 2014 9th International Conference on the Quality of Information and Communications Technology, pp. 294-299. , (Guimaraes, Portugal)IEEE, Sept; (2015) Up and Running with Material Design, , G. Android; (2015) Android-What to Test, , G. Android; (2015) Android Navigation Drawer, , G. Android; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S., Imparato, G., A toolset for GUI testing of android applications (2012) 2012 28th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653. , IEEE, Sept; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering-ESEC/FSE 2013, p. 224. , (New York, New York, USA), ACM Press, Aug; Nasim, F., Aslam, B., Ahmed, W., Naeem, T., Uncovering self code modification in android (2015) First International Conference on Codes, Cryptology, and Information Security, C2SI 2015, pp. 297-313. , (Rabat, Morocco) , Springer; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) The 6th International Workshop on Automation of Software Test (AST '11), p. 7. , (New York, New York, USA), ACM Press, May; Batyuk, L., Herpich, M., Camtepe, S.A., Raddatz, K., Schmidt, A.-D., Albayrak, S., Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications (2011) 2011 6th International Conference on Malicious and Unwanted Software, pp. 66-72. , IEEE, Oct; Amalfitano, D., Amatucci, N., Fasolino, A.R., Gentile, U., Mele, G., Nardone, R., Vittorini, V., Marrone, S., Improving code coverage in android apps testing by exploiting patterns and automatic test case generation (2014) International Workshop on Long-term Industrial Collaboration on Software Engineering (WISE 2014), (Vasteras, Sweden), pp. 29-34. , ACM; Costa, P., Paiva, A.C.R., Nabuco, M., Pattern based GUI testing for mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), (Guimaraes, Portugal), pp. 66-74. , IEEE, Sept; Moreira, R.M.L.M., Paiva, A.C.R., PBGT tool: An integrated modeling and testing environment for pattern-based GUI testing (2014) 29th ACM/IEEE International Conference on Automated Software Engineering (ASE 2014), pp. 863-866. , (New York, New York, USA)ACM Press, Sept",,,"ACM SIGAI;ACM Special Interest Group on Software Engineering (SIGSOFT);IEEE Computer Society;TCSE","Institute of Electrical and Electronics Engineers Inc.","30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015","9 November 2015 through 13 November 2015",,118982,,9781509000241,,,"English","Proc. - IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE",Conference Paper,"Final","",Scopus,2-s2.0-84963864509
"Gómez E., Semke B., Mohacsi S.","57190157778;57190434350;6506640102;","Enhancing test automation of ground data systems through direct access to the user interfaces",2016,"SpaceOps 2016 Conference",,, AIAA 2016-2580,"","",,1,"10.2514/6.2016-2580","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020505153&doi=10.2514%2f6.2016-2580&partnerID=40&md5=8a6352f34e3cf04a3d4a12b6abe62891","European Space Agency, Ground Systems Engineering Department, Robert-Bosch-Strasse 5, Darmstadt, 64293, Germany; Etamax GmbH, Frankfurter Strasse 3d, Braunschweig, 38122, Germany; Atos IT Solutions and Services GmbH, Siemensstrasse 92, Vienna, 1210, Austria","Gómez, E., European Space Agency, Ground Systems Engineering Department, Robert-Bosch-Strasse 5, Darmstadt, 64293, Germany; Semke, B., Etamax GmbH, Frankfurter Strasse 3d, Braunschweig, 38122, Germany; Mohacsi, S., Atos IT Solutions and Services GmbH, Siemensstrasse 92, Vienna, 1210, Austria","This paper describes an automated test system based on direct access to the graphical user interface, which combines in-house developed previously existing infrastructure, open source software and third party tools. The system has been designed with scalability and maintainability as one of the main objectives. © 2016 by European Space Agency.",,"Graphical user interfaces; Open source software; Software engineering; Software testing; User interfaces; Automated test systems; Ground data systems; Test Automation; Third-party tools; Open systems",,,,,,,,"Gómez, E., Krames, G., Kubr, H., González, O., Automating the regression testing of a mission control system (2006) AAIA Spaceops, , Rome, [CD-ROM]; Gómez, E., Casado, M., Stanka, M., Korner, S., Automated Regression Testing of Complex Mission Control Applications (2010) AAIA Spaceops, , Huntsville, [CD-ROM]; Zander, J., Schieferdecker, I., Mosterman, P.J., (2011) Model-Based Testing for Embedded Systems, , CRC Press; Schieferdecker, I., Model-based testing (2012) IEEE Software, 29 (1), pp. 14-18; Beer, A., Mohacsi, S., Efficient Test-data Generation for Variables with Complex Dependencies (2008) IEEE ICST; Graham, D., Fewster, M., (2012) Experiences of Test Automation: Case Studies of Software Test Automation, , Addison-Wesley Professional, New York, Chap. 9",,,"","American Institute of Aeronautics and Astronautics Inc, AIAA","14th International Conference on Space Operations, SpaceOps 2016","16 May 2016 through 20 May 2016",,192229,,9781624104268,,,"English","SpaceOps 2016 Conf.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-85020505153
"Martinez M., Esparcia A.I., Rueda U., Vos T.E.J., Ortega C.","57191694159;6506045663;6507265119;8980537100;56496491000;","Automated localisation testing in industry with test",2016,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9976 LNCS",,,"241","248",,4,"10.1007/978-3-319-47443-4_17","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84992471291&doi=10.1007%2f978-3-319-47443-4_17&partnerID=40&md5=e94c203904bc9159c556dac425a1d377","Universidad Politecnica de Valencia, Camino de vera s/n, Valencia, Spain; Open Universiteit, Valkerburgerweg 177, Heerlen, Netherlands; Indenova, Carrer Dels Traginers 14, Valencia, Spain","Martinez, M., Universidad Politecnica de Valencia, Camino de vera s/n, Valencia, Spain; Esparcia, A.I., Universidad Politecnica de Valencia, Camino de vera s/n, Valencia, Spain; Rueda, U., Universidad Politecnica de Valencia, Camino de vera s/n, Valencia, Spain; Vos, T.E.J., Open Universiteit, Valkerburgerweg 177, Heerlen, Netherlands; Ortega, C., Indenova, Carrer Dels Traginers 14, Valencia, Spain","Test* is a testing tool that automatically and dynamically generates, executes and verifies test sequences based on a tree model that is derived from the software User Interface through assistive technologies. Test* is an academic prototype that we continuously try to transfer to companies to get feedback about its applicability. In this paper we report on one of these short experiences of using Test* in industry at the Valencian company Indenova. We applied the tool to check the localisation quality of a secure web platform that encapsulates a set of applications as services. © IFIP International Federation for Information Processing 2016.","Automated testing; Localisation; Technology transfer","Technology transfer; Testing; User interfaces; Assistive technology; Automated testing; Localisation; Software user interface; Test sequence; Testing tools; Tree modeling; Software testing",,,,,,,,"Alegroth, E., Nass, M., Olsson, H.H., Jautomate: A tool for system- and acceptancetest automation (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation (ICST), pp. 439-446. , March; Bauersfeld, S., Vos, T., A reinforcement learning approach to automated GUI robustness testing (2012) Fast Abstracts of the 4Th Symposium on Search-Based Software Engineering (SSBSE 2012), pp. 7-12. , IEEE; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.M., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng, 21 (1), pp. 65-105; Rueda, U., Vos, T.E.J., Almenar, F., Martínez, M.O., Esparcia-Alcázar, A.I., TESTAR: From academic prototype towards an industry-ready tool for automated testing at the user interface level (2015) Actas De Las XX Jornadas De Ingeniería Del Software Y Bases De Datos (JISBD 2015), pp. 236-245. , Canos, J.H., Gonzalez Harbour, M. (eds.); Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) Int. J. Inf. Syst. Model. Des, 6 (3), pp. 46-83","Rueda, U.; Universidad Politecnica de Valencia, Camino de vera s/n, Spain; email: urueda@pros.upv.es","Wotawa F.Kushik N.Nica M.","","Springer Verlag","28th IFIP WG 6.1 International Conference on Testing Software and Systems, ICTSS 2016","17 October 2016 through 19 October 2016",,185379,03029743,9783319474427,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84992471291
"Jääskeläinen A.","24923055000;","Towards model construction based on test cases and GUI extraction",2016,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9976 LNCS",,,"225","230",,1,"10.1007/978-3-319-47443-4_15","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84992445209&doi=10.1007%2f978-3-319-47443-4_15&partnerID=40&md5=bdcfce648805e9d223eb28ab66761210","Department of Pervasive Computing, Tampere University of Technology, PO Box 553, Tampere, 33101, Finland","Jääskeläinen, A., Department of Pervasive Computing, Tampere University of Technology, PO Box 553, Tampere, 33101, Finland","The adoption of model-based testing techniques is hindered by the difficulty of creating a test model. Various techniques to automate the modelling process have been proposed, based on software process artefacts or an existing product. This paper outlines a hybrid approach to model construction, based on two previously proposed methods. The presented approach combines information in pre-existing test cases with a model extracted from the graphical user interface of the product. © IFIP International Federation for Information Processing 2016.","Model extraction; Model-based testing; Software testing","Extraction; Graphical user interfaces; Model checking; Testing; User interfaces; Hybrid approach; Model based testing; Model construction; Model extraction; Modelling process; Software process; Test case; Test Modeling; Software testing",,,,,"Ulla Tuomisen Säätiö","Funding by Ulla Tuominen Foundation is gratefully acknowledged.",,"Aho, P., Suarez, M., Kanstrén, T., Memon, A.M., Industrial adoption of automatically extracted GUI models for testing (2013) Proceedings of the 3Rd International Workshop on Experiences and Empirical Studies in Software Modelling (Eessmod 2013), CEUR-WS, 1078, pp. 49-54. , Chaudron, M., Genero, M., Abrahão, S., Pareto, L. (eds.), CEUR Workshop Proceedings, October; Aho, P., Suarez, M., Kanstrén, T., Memon, A.M., Murphy tools: Utilizing extracted GUI models for industrial software testing (2014) Proceedings of the 7Th International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2014), pp. 343-348. , O’Conner, L. (ed.), IEEE Computer Society, Los Alamitos; Buwalda, H., Action figures (2003) Software Testing and Quality Engineering Magazine, pp. 42-47. , March/April; Dallmeier, V., Knopp, N., Mallon, C., Hack, S., Zeller, A., Generating test cases for specification mining (2010) Proceedings of the 19Th International Symposium on Software Testing and Analysis (ISSTA 2010), pp. 85-96. , ACM, New York, July; (2014), https://github.com/F-Secure/murphy, Accessed June 2016; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI models for testing (2010) Proceedings of the 5Th Iberian Conference on Information Systems and Technologies (CISTI 2010), pp. 1-6. , IEEE Computer Society, Los Alamitos; Hagerer, A., Hungar, H., Niese, O., Steffen, B., Model generation by moderated regular extrapolation (2002) FASE 2002. LNCS, 2306, pp. 80-95. , Kutsche, R.-D., Weber, H. (eds.), Springer, Heidelberg; Hungar, H., Margaria, T., Steffen, B., Test-based model generation for legacy systems (2003) Proceedings of the 2003 International Test Conference (ICT 2003), 2, pp. 150-159. , IEEE Computer Society, Los Alamitos, September–October; Jääskeläinen, A., Kervinen, A., Katara, M., Valmari, A., Virtanen, H., Synthesizing test models from test cases (2009) HVC 2008. LNCS, 5394, pp. 179-193. , Chockler, H., Hu, A.J. (eds.), Springer, Heidelberg; Ma, C., Du, C., Zhang, T., Hu, F., Cai, X., WSDL-based automated test data generation for web service (2008) Proceedings of the International Conference on Computer Science and Software Engineering (CSSE 2008), pp. 731-737. , Kawada, S. (ed.), IEEE Computer Society, Los Alamitos; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10Thworking Conference on Reverse Engineering (WCRE 2003), pp. 260-269. , van Deursen, A., Stroulia, E., Storey, M.A.D. (eds.), IEEE Computer Society, Los Alamitos; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab. (STVR), 17 (3), pp. 137-157; Silva, J.C., Silva, C., Gonçalo, R.D., Saraiva, J., Campos, J.C., The GUISurfer tool: Towards a language independent approach to reverse engineering GUI code (2010) Proceedings of the 2Nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS 2010), pp. 181-186. , ACM, New York; Xie, T., Notkin, D., Mutually enhancing test generation and specification inference (2004) FATES 2003. LNCS, 2931, pp. 60-69. , Petrenko, A., Ulrich, A. (eds.), Springer, Heidelberg; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) FASE 2013. LNCS, 7793, pp. 250-265. , Cortellessa, V., Varró, D. (eds.), Springer, Heidelberg","Jääskeläinen, A.; Department of Pervasive Computing, PO Box 553, Finland; email: antti.m.jaaskelainen@tut.fi","Wotawa F.Kushik N.Nica M.","","Springer Verlag","28th IFIP WG 6.1 International Conference on Testing Software and Systems, ICTSS 2016","17 October 2016 through 19 October 2016",,185379,03029743,9783319474427,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84992445209
"Almenar F., Esparcia-Alcázar A.I., Martínez M., Rueda U.","56703382600;6506045663;57191694159;6507265119;","Automated testing of web applications with TESTAR: Lessons learned testing the odoo tool",2016,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9962 LNCS",,,"218","223",,4,"10.1007/978-3-319-47106-8_15","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989869632&doi=10.1007%2f978-3-319-47106-8_15&partnerID=40&md5=7c7ba6f20f7d616af077b1ec92c77dac","Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain","Almenar, F., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain; Esparcia-Alcázar, A.I., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain; Martínez, M., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain; Rueda, U., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Camino de vera s/n, Valencia, 46022, Spain","The TESTAR tool was originally conceived to perform automated testing of desktop applications via their Graphical User Interface (GUI). Starting from the premise that source code is not available, TESTAR automatically selects actions based only on information derived from the GUI and in this way generates test sequences on the fly. In this work we extend its use to web applications and carry out experiments using the Odoo open source management software as the testing object. We also introduce novel metrics to evaluate the performance of the testing with TESTAR, which are valid even when access to the source code is not available and testing is only possible via the GUI. We compare results obtained for two types of action selection mechanisms, based on random choice and Q-learning with different parameter settings. Statistical analysis shows the superiority of the latter provided an adequate choice of parameters; furthermore, the results point to interesting areas for improvement. © Springer International Publishing AG 2016.","Automated GUI testing; Q-learning; Testing metrics; Testing web applications","Application programs; Automation; Graphical user interfaces; Open source software; Open systems; Software engineering; User interfaces; World Wide Web; Action selection mechanism; Choice of parameters; Desktop applications; Graphical user interfaces (GUI); GUI testing; Q-learning; Testing metrics; WEB application; Software testing",,,,,,,,"Bauersfeld, S., de Rojas, A., Vos, T., Evaluating rogue user testing in industry: An experience report (2014) 2014 IEEE Eighth International Conference on Research Challenges in Information Science (RCIS), pp. 1-10. , May; Bauersfeld, S., Vos, T.E.J., Condori-Fernández, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2014, p. 4. , Torino, Italy, 18-19 September; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of ESEC/FSE 2001, pp. 256-267; Rueda, U., Vos, T.E.J., Almenar, F., Martínez, M.O., Esparcia-Alcázar, A.I., TESTAR: From academic prototype towards an industry-ready tool for automated testing at the user interface level (2015) Actas de las XX Jornadas de Ingeniería del Software y Bases de Datos (JISBD 2015), pp. 236-245. , Canos, J.H., Gonzalez Harbour, M. (eds.); Schwartz, A., Hetzel, M., The impact of fault type on the relationship between code coverage and fault detection (2016) Proceedings of the 11th International Workshop on Automation of Software Test, AST 2016, pp. 29-35. , http://doi.acm.org/10.1145/2896921.2896926, ACM, New York; Vos, T.E.J., Kruse, P.M., Condori-Fernández, N., Bauersfeld, S., Wegener, J., TESTAR: Tool support for test automation at the user interface level (2015) IJISMD, 6 (3), pp. 46-83. , http://dx.doi.org/10.4018/IJISMD.2015070103","Esparcia-Alcázar, A.I.; Research Center on Software Production Methods (PROS), Camino de vera s/n, Spain; email: aesparcia@pros.upv.es","Sarro F.Deb K.","CREST;DEARBORN;Etal;Ford;NSF;Springer","Springer Verlag","8th International Symposium on Search Based Software Engineering, SSBSE 2016","8 October 2016 through 10 October 2016",,184659,03029743,9783319471051,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84989869632
"Bie Y., Bin S., Sun G., Zhou X.","57191380539;36561126100;36610787400;57191227298;","An empirical analysis of android apps bug and automated testing approach for Android apps",2016,"International Journal of Multimedia and Ubiquitous Engineering","11","9",,"1","10",,1,"10.14257/ijmue.2016.11.9.01","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989324665&doi=10.14257%2fijmue.2016.11.9.01&partnerID=40&md5=cde08c03babe9a224cc0d5919e5063ca","S College, Qingdao University, China; International College of Qingdao University, Qingdao, China; Software Technical College of Qingdao University, Qingdao, China","Bie, Y., S College, Qingdao University, China; Bin, S., International College of Qingdao University, Qingdao, China; Sun, G., Software Technical College of Qingdao University, Qingdao, China; Zhou, X., International College of Qingdao University, Qingdao, China","Android platforms and its applications (apps) have gained tremendous popularity recently, hence the reliability of Android apps is becoming increasingly important. Due to the novelty of the Android platform, apps are prone to errors, which would affect user experience and requires frequent bug fixes. In this paper, an empirical study on bugs in some widely-used open-source Android apps from diverse categories such as media, tools and communication were performed. Based on the findings of the empirical study, an approach for automating the testing process for detecting Android apps GUI bugs was presented. We show how the approach helped to re-discover existing bugs and find new bugs, and how it could be used to prevent certain bug categories. Our empirical study and automated testing approach have the potential to help developers increase the quality of Android apps. © 2016 SERSC.","Android apps; Bug reports; Empirical bug analysis; Google Android; Test automation","Automation; Android apps; Bug reports; Empirical bug analysis; Google Android; Test Automation; Android (operating system)",,,,,,,,"Zeller, A., (2009) Why Programs Fail: A Guide to Systematic Debugging, , Elsevier; Kumar Maji, A., Hao, K., Sultana, S., Bagchi, S., Characterizing failures in mobile oses: A case study with android and symbian (2010) Proceedings of Software Reliability Engineering (ISSRE), 2010 IEEE 21St International Symposium On; Hu, C., Neamtiu, I., Automating GUI testing for Android applications (2011) Proceedings of the 6Th International Workshop on Automation of Software Test; Belli, F., Budnik, C.J., White, L., Eventbased modelling, analysis and testing of user interactions: Approach and case study: Research Articles (2006) Software Test. Verif. Reliab, 16 (1), pp. 3-32; Hooimeijer, P., Weimer, W., Modeling bug report quality (2007) Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering; Bettenburg, N., Just, S., What makes a good bug report (2008) Proceedings of the 16Th ACM SIGSOFT International Symposium on Foundations of Software Engineering; (2010), http://www.junit.org/, May; (2010), http://developer.android.com/guide/developing/tools/, May",,,,"Science and Engineering Research Support Society",,,,,19750080,,,,"English","Int. J. Multimedia Ubiquitous Eng.",Article,"Final","",Scopus,2-s2.0-84989324665
"Arruda F., Sampaio A., Barros F.","57191251845;7004952988;8662857500;","Capture & replay with text-based reuse and framework agnosticism",2016,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2016-January",,,"420","425",,6,"10.18293/SEKE2016-228","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988345468&doi=10.18293%2fSEKE2016-228&partnerID=40&md5=dc447abed00c10ebd05f981e3f467770","Centro de Informática, Universidade Federal de Pernambuco, Recife, Pernambuco, Brazil","Arruda, F., Centro de Informática, Universidade Federal de Pernambuco, Recife, Pernambuco, Brazil; Sampaio, A., Centro de Informática, Universidade Federal de Pernambuco, Recife, Pernambuco, Brazil; Barros, F., Centro de Informática, Universidade Federal de Pernambuco, Recife, Pernambuco, Brazil","Software systems need to be constantly tested, either to verify changes or to check conformance to requirements. The current leading approaches to automate GUI tests are coding and the use of Capture & Replay (C&R) tools. Coding is usually associated with (even if ad hoc) reuse strategies, but requires from the developer specialized knowledge about the adopted framework. On the other hand, even though C&R is able to promote faster automation, it raises maintainability and scalability issues in the long term due to scripts scattering and rework for each new test case, because usually there is no associated reuse strategy. In order to combine the benefits of both approaches, we propose: an abstract and framework-free representation of test actions captured during testing activities; a text-based strategy that matches a new test case with previously recorded test actions; and a C&R tool that implements these concepts in the mobile context. We developed and evaluated our strategy in the context of a partnership with Motorola Mobility, achieving a reuse ratio up to 71% with time gains similar to traditional C&R approaches when compared to coding.","Capture and replay; Mobile applications; Natural language processing; Reuse; Test automation","Abstracting; Codes (symbols); Knowledge engineering; Natural language processing systems; Software engineering; Testing; Capture and replay; Mobile applications; NAtural language processing; Reuse; Test Automation; Software testing",,,,,,,,"Burnstein, I., (2003) Practical Software Testing: A Process-Oriented Approach, , Springer Science & Business Media; Chandra, R., Karlsson, B.F., Lane, N., Liang, C.-J.M., Nath, S., Padhye, J., Ravindranath, L., Zhao, F., (2014) Towards Scalable Automated Mobile App Testing, , Technical Report MSR-TR-2014-44, Tech. Rep; Leung, H.K., White, L., Insights into regression testing [software testing] (1989) Software Maintenance, 1989., Proceedings., Conference on. IEEE, pp. 60-69; Graves, T.L., Harrold, M.J., Kim, J.-M., Porter, A., Rothermel, G., An empirical study of regression test selection techniques (2001) ACM Transactions on Software Engineering and Methodology (TOSEM, 10 (2), pp. 184-208; Beizer, B., (2002) Software Testing Techniques, , Dreamtech Press; Boyapati, C., Khurshid, S., Marinov, D., Korat: Automated testing based on Java predicates (2002) ACM SIGSOFT Software Engineering Notes, 27 (4), pp. 123-133. , ACM; Lin, C.-T., Chen, C.-D., Tsai, C.-S., Kapfhammer, G.M., Historybased test case prioritization with software version awareness (2013) Engineering of Complex Computer Systems (ICECCS), 2013 18th International Conference on, pp. 171-172. , IEEE; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) Reverse Engineering (WCRE), 2013 20th Working Conference on, pp. 272-281. , Oct; Ostrand, T.J., Balcer, M.J., The category-partition method for specifying and generating fuctional tests (1988) Communications of the ACM, 31 (6), pp. 676-686; Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) 2007 Future of Software Engineering. IEEE Computer Society, pp. 85-103; Grieskamp, W., Multi-paradigmatic model-based testing (2006) Formal Approaches to Software Testing and Runtime Verification, pp. 1-19. , Springer; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., Reran: Timing-and touch-sensitive record and replay for android (2013) Software Engineering (ICSE), 2013 35th International Conference on, pp. 72-81. , IEEE; (2013) Monkeytalk, , https://www.cloudmonkeymobile.com/monkeytalk, CloudMonkey. [Online]. Available; (2013) Robotium Recorder, , http://http://robotium.com/, Robotium. [Online]. Available; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B.D., Memon, A.M., Mobiguitar: Automated model-based testing of mobile apps (2015) Software, IEEE, 32 (5), pp. 53-59; Memon, A., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Null. IEEE, p. 260; Carvalho, G., Falcão, D., Barros, F., Sampaio, A., Mota, A., Motta, L., Blackburn, M., Nat2testscr: Test case generation from natural language requirements based on scr specifications (2014) Science of Computer Programming, 95, pp. 275-297; Esser, M., Struss, P., Obtaining models for test generation from natural-language-like functional specifications (2007) Proceedings of DX, 7, pp. 75-82; Gamma, E., (1995) Design Patterns: Elements Of Reusable Object-Oriented Software, , Pearson Education India; Miller, G.A., Wordnet: A lexical database for english (1995) Communications of the ACM, 38 (11), pp. 39-41; Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10 (8), pp. 707-710; Caldiera, V., Rombach, H.D., The goal question metric approach (1994) Encyclopedia of software engineering, 2 (1994), pp. 528-532; Paydar, S., Kahani, M., Ontology-based web application testing (2010) Novel Algorithms and Techniques in Telecommunications and Networking, pp. 23-27. , Springer",,,"Knowledge Systems Institute Graduate School;KSI Research Inc.","Knowledge Systems Institute Graduate School","28th International Conference on Software Engineering and Knowledge Engineering, SEKE 2016","1 July 2016 through 3 July 2016",,123620,23259000,189170639X; 9781891706394,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-84988345468
"Silva T.R., Hak J.-L., Winckler M.","57189006999;57190388129;22735652100;","Testing prototypes and final user interfaces through an ontological perspective for behavior-driven development",2016,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9856 LNCS",,,"86","107",,10,"10.1007/978-3-319-44902-9_7","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84986212724&doi=10.1007%2f978-3-319-44902-9_7&partnerID=40&md5=a4c8b4d10813516eddbe831f6ae67170","ICS-IRIT, Université Paul Sabatier, Toulouse, France","Silva, T.R., ICS-IRIT, Université Paul Sabatier, Toulouse, France; Hak, J.-L., ICS-IRIT, Université Paul Sabatier, Toulouse, France; Winckler, M., ICS-IRIT, Université Paul Sabatier, Toulouse, France","In a user-centered development process, prototypes evolve in iterative cycles until they meet users’ requirements and then become the final product. Every cycle gives the opportunity to revise the design and to introduce new requirements which might affect the specification of artifacts that have been set in former development phases. Testing the consistency of multiple artifacts used to develop interactive systems every time that a new requirement is introduced is a cumbersome activity, especially if it is done manually. This paper proposes an approach based on Behavior-Driven Development (BDD) to support the automated assessment of artifacts along the development process of interactive systems. The paper uses an ontology for specifying tests that can run over multiple artifacts sharing similar concepts. A case study testing Prototypes and Final User Interfaces is presented to demonstrate the feasibility of this approach in early phases of the design process, providing a continuous quality assurance of requirements, and helping clients and development teams to identify potential problems and inconsistencies before commitments with software implementation. © IFIP International Federation for Information Processing 2016.","Automated requirements checking; Behavior-Driven Development; Multi-artifact testing; Ontological modeling; Prototyping","Axial flow; Errors; Ontology; Quality assurance; Safety engineering; Software engineering; Software testing; User interfaces; Automated assessment; Automated requirements checking; Behavior-Driven Development; Development phasis; Development process; Ontological modeling; Software implementation; User-centered development; Software prototyping",,,,,,,,"Soeken, M., Wille, R., Drechsler, R., Assisted behavior driven development using natural language processing (2012) TOOLS 2012. LNCS, 7304, pp. 269-287. , Furia, C.A., Nanz, S. (eds.), Springer, Heidelberg; Kapyaho, M., Kauppinen, M., Agile requirements engineering with prototyping: A case study (2015) IEEE International on Requirements Engineering Conference (RE); North, D., (2016) What’s in a Story?, , http://dannorth.net/whats-in-a-story; Cohn, M., (2004) User Stories Applied: For Agile Software Development, , Addison-Wesley Professional, Reading; Wolff, A., Forbrig, P., Dittmar, A., Reichart, D., Linking GUI elements to tasks: Supporting an evolutionary design process (2005) Proceedings of the 4Th International Workshop on Task Models and Diagrams, pp. 27-34. , ACM; Martinie, C., Navarre, D., Palanque, P., Fayollas, C., A generic tool-supported framework for coupling task models and interactive applications (2015) Proceedings of the 7Th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 244-253; Santoro, C., (2005) A Task Model-Based Approach for Design and Evaluation of Innovative User Interfaces, , Presses Univ. de Louvain; Rosson, M.B., Carroll, J.M., (2002) Usability Engineering: Scenario-Based Development of Human-Computer Interaction, , Morgan Kaufmann, San Francisco; Lewis, C., Rieman, J., (1993) Task-Centered User Interface Design: A Practical Introduction, , University of Colorado, Boulder; Chelimsky, D., Astels, D., Helmkamp, B., North, D., Dennis, Z., Hellesoy, A., (2010) The Rspec Book: Behaviour Driven Development with Rspec, Cucumber, and Friends, , Pragmatic Bookshelf; Guarino, N., Oberle, D., Staab, S., What is an ontology? (2009) Handbook on Ontologies, pp. 1-17. , Springer, Heidelberg; Limbourg, Q., Pribeanu, C., Vanderdonckt, J., Towards uniformed task models in a modelbased approach (2001) DSV-IS 2001. LNCS, 2220, pp. 164-182. , Johnson, C. (ed.), Springer, Heidelberg; Limbourg, Q., Vanderdonckt, J., Michotte, B., Bouillon, L., López-Jaquero, V., USIXML: A language supporting multi-path development of user interfaces (2005) DSV-IS 2004 and EHCI 2004. LNCS, 3425, pp. 200-220. , Feige, U., Roth, J. (eds.), Springer, Heidelberg; Pullmann, J., (2016) Mbui-Glossary-W3c, , https://www.w3.org/TR/mbui-glossary, Fraunhofer FIT; Buchmann, R.A., Karagiannis, D., Modelling mobile app requirements for semantic traceability (2015) Requirements Eng, pp. 1-35; Nair, S., De La Vara, J.L., Sen, S., A review of traceability research at the requirements engineering conference re@21 (2013) 2013 21St IEEE International Requirements Engineering Conference (RE), pp. 222-229. , IEEE; Uusitalo, E.J., Komssi, M., Kauppinen, M., Davis, A.M., Linking requirements and testing in practice (2008) 16Th IEEE International Requirements Engineering, RE 2008, pp. 265-270. , IEEE; Leite, J.C., Oliveira, A.P., A client oriented requirements baseline (1995) Proceedings of the Second IEEE International Symposium on Requirements Engineering; Ebert, C., (2011) Global Software and IT: A Guide to Distributed Development, Projects, and Outsourcing, , Wiley, New Jersey; Myers, G.J., Sandler, C., Badgett, T., (2011) The Art of Software Testing, , Wiley, New Jersey; Lindstrom, D.R., Five ways to destroy a development project (1993) IEEE Softw, 10, pp. 55-58; Pugh, K., (2010) Lean-Agile Acceptance Test-Driven-Development, , Pearson Education, Upper Saddle River; Adzic, G., (2011) Specification by Example: How Successful Teams Deliver the Right Software, , Manning Publications, Westampton; Martinie, C., Palanque, P., Winckler, M., Structuring and composition mechanisms to address scalability issues in task models (2011) INTERACT 2011, Part III. LNCS, 6948, pp. 589-609. , Campos, P., Graham, N., Jorge, J., Nunes, N., Palanque, P., Winckler, M. (eds.), Springer, Heidelberg; Hak, J.L., Winckler, M., Navarre, D., PANDA: Prototyping using annotation and decision analysis (2016) Proceedings of the 8Th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, EICS 2016, pp. 171-176. , Brussels, Belgium, 21-24 June, ACM","Silva, T.R.; ICS-IRIT, France; email: rocha@irit.fr","Winckler M.Johnson C.Bogdan C.Gulliksen J.Kis F.Bernhaupt R.Sauer S.Palanque P.Forbrig P.","et al;International Federation for Information Processing (IFIP);KTH Royal Institute of Technology;OpenLab;School of Computer Science and Communication;Technical Committee TC 13 Human-Computer Interaction","Springer Verlag","IFIP WG 13.2/13.5 Joint 6th International Conference on Human-Centered Software Engineering, HCSE 2016 and 8th International Conference on Human Error, Safety, and System Development, HESSD 2016","29 August 2016 through 31 August 2016",,180489,03029743,9783319449012,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84986212724
"Prongsang C., Suwannasart T.","57190254160;8963028800;","A tool for test case impact analysis from user interface changes in android mobile application",2016,"Lecture Notes in Engineering and Computer Science","1",,,"483","486",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978643516&partnerID=40&md5=38299ac24591ea592a52212c706178d0","Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand","Prongsang, C., Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand; Suwannasart, T., Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Bangkok, Thailand","Mobile applications have influence in our daily life. There are a lot of different mobile application development platforms and Android gains the highest market share. Hence, Android application development has grown up, and it actually has an effect on testing process. The problem of testing process is that some test cases cannot be used when a program is changed. This causes testers to spend more time, energy, and resources for testing the changes before testing the others. Consequently, test case impact analysis from user interface changes for applications are important. We have proposed a tool to analyze an impact on test cases when an user interface of Android applications is changed by comparing two versions of user interface files to analyze the changes, highlighting and correcting which test cases can be used and finally generating new test cases if necessary.","Android; Impact analysis; Mobile application; Test cases; User interface changes","Android (operating system); Competition; Mobile computing; Mobile telecommunication systems; Software testing; Android; Android applications; Impact analysis; Market share; Mobile application development; Mobile applications; Test case; Testing process; User interfaces",,,,,,,,"Smartphone OS Market Share, , http://vAvw.idc.com/, International Data Corporation., Q42014; Phetmanee, S., Suwannasart, T., A tool for impact analysis of test cases based on changes of a web application (2014) Proc. IMECS; Selvam, R., Karthikeyani, V., Mobile software testing-automated test case design strategies (2011) Proc. IJCSE, 3, pp. 1450-1461; Pocatilu, P., Alecu, F., An UT layout files analyzer for test data generation (2014) Proc. IE, 18, pp. 53-61; Bohner, S.A., Software change impacts-An evolving perspective (2002) Software Maintenance, Proceedings International Conference on, pp. 263-272; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing web application (2007) International Symposium on Software Reliability Engineering, pp. 117-126; Yadav, D., Sharma, A.K., Gupta, J.P., Change detection in web pages (2007) Information Technology, (ICIT 2007) 10th International Conference on, pp. 265-270; http://developer.android.com/guide/topics/ui/controls.html, Android Open Source Project, Input Controls-Android Developers; http://developer.android.com/guide/topics/ui/overview.html, Android Open Source Project, UI Overview-Android Developers",,"Douglas C.Feng D.D.Ao S.I.Castillo O.Korsunsky A.M.","et al.;IAENG Society of Artificial Intelligence;IAENG Society of Bioinformatics;IAENG Society of Computer Science;IAENG Society of Data Mining;IAENG Society of Electrical Engineering","Newswood Limited","International Multiconference of Engineers and Computer Scientists 2016, IMECS 2016","16 March 2016 through 18 March 2016",,122273,20780958,9789881925381,,,"English","Lect. Notes Eng. Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84978643516
"Morgado I.C., Paiva A.C.R.","55321167400;7102683763;","Impact of Execution Modes on Finding Android Failures",2016,"Procedia Computer Science","83",,,"284","291",,6,"10.1016/j.procs.2016.04.127","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84971349493&doi=10.1016%2fj.procs.2016.04.127&partnerID=40&md5=380bc6536ce5842723b41ab694b3dbf6","Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; INESC TEC Porto, Porto, Portugal","Morgado, I.C., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal, INESC TEC Porto, Porto, Portugal; Paiva, A.C.R., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal, INESC TEC Porto, Porto, Portugal","The iMPAcT tool combines the benefits of existing user recurring behaviour (User Interface Patterns) on mobile applications to facilitate the test automation of Android mobile applications. It uses an automatic exploration process combined with reverse engineering to identify the existing user interface patterns on a mobile application and then tests those patterns with generic test strategies (designated Test Patterns). The Test Patterns are defined in a catalogue that can be reused for testing other applications. However the results obtained by the iMPAcT tool depend on the exploration mode and on the order in which the test strategies are applied. This paper describes an experiment conducted to evaluate the impact of using different exploration modes and of changing the order by which UI patterns are searched and subsequently tested on the failures found and on the number of events fired. © 2016 The Authors.","Android; Case Study; Mobile Testing; Reverse Engineering; Test Automation; UI Patterns","Android (operating system); Behavioral research; Energy conservation; Mobile computing; Mobile telecommunication systems; Reverse engineering; Android; Exploration process; Mobile applications; Mobile testing; Test Automation; Test strategies; Ui patterns; User interface pattern; User interfaces",,,,,"Fundação para a Ciência e a Tecnologia, FCT: POCI-01-0145-FEDER-006961

European Regional Development Fund, FEDER

Programa Operacional Temático Factores de Competitividade, POFC","This work is financed by the ERDF European Regional Development Fund through the Operational Programme for Competitiveness and Internationalisation - COMPETE 2020 Programme, and by National Funds through the FCT Fundac¸ão para a Ciência e a Tecnologia (Portuguese Foundation for Science and Technology) within project POCI-01-0145-FEDER-006961.",,"Ingraham, N., (2013) Apple Announces 1 Million Apps in the App Store, More Than 1 Billion Songs Played on ITunes Radio, , http://goo.gl/z3RprB; Alalfi, M.H., Cordy, J.R., Dean, T.R., Automating coverage metrics for dynamic web applications (2010) 2010 14th European Conference on Software Maintenance and Reengineering. IEEE, pp. 51-60. , http://goo.gl/WkQ7Y0; Arlt, S., Bertolini, C., Schäf, M., Behind the scenes: An approach to incorporate context in gui test case generation (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2011), pp. 222-231. , Washington, DC, USA; Moreira, R.M.L.M., Paiva, A.C.R., PBGT tool: An integrated modeling and testing environment for pattern-based GUI testing (2014) 29th ACM/IEEE International Conference on Automated Software Engineering (ASE 2014), pp. 863-866. , http://dl.acm.org/citation.cfm?id=2642937.2648618, New York, New York, USA: ACM Press; Nabuco, M., Paiva, A.C.R., Model-based test case generation for web applications (2014) 14th International Conference on Computational Science and Applications (ICCSA 2014); Aho, P., Suarez, M., Memon, A., Kanstren, T., Making GUI testing practical: Bridging the gaps (2015) 12th International Conference on Information Technology - New Generations (ITNG 2015), pp. 439-444. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7113512, Las Vegas, NV, USA; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), pp. 258-261. , http://dl.acm.org/citation.cfm?id=2351676.2351717, New York, New York, USA: ACM Press; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) 7th International Workshop on Automation of Software Test (AST 2012), pp. 29-35. , http://ieeexplore.ieee.org/xpls/absall.jsp?arnumber=6228987, Zurich, Switzerland: IEEE; Capgemini, Sogeti, Hp, (2014) World Quality Report 2014-15. Tech. Rep., , http://goo.gl/jzN2aA; Chikofsky, E., Cross, J., Reverse engineering and design recovery: A taxonomy (1990) IEEE Software, 7 (1), pp. 13-17. , http://dx.doi.org/10.1109/52.43044; Nilsson, E.G., Design patterns for user interface for mobile applications (2009) Advances in Engineering Software, 40 (12), pp. 1318-1328. , http://www.sciencedirect.com/science/article/pii/S0965997809000428; Sahami Shirazi, A., Henze, N., Schmidt, A., Goldberg, R., Schmidt, B., Schmauder, H., Insights into layout patterns of mobile user interfaces by an automatic analysis of android apps (2013) 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems. ACM, pp. 275-284. , http://dl.acm.org/citation.cfm?id=2494603.2480308; Neil, T., (2014) Mobile Design Pattern Gallery: UI Patterns for Smartphone Apps, , Sebastopol, Canada: O'Reilly Media, Inc.; 2nd ed; Coimbra Morgado, I., Paiva, A.C.R., The iMPAcT tool: Testing UI patterns on mobile applications (2015) 30th IEEE/ACM International Conference on Automated Software Engineering (ASE 2015); Rohatgi, A., Hamou-Lhadj, A., Rilling, J., An approach for mapping features to code based on static and dynamic analysis (2008) 2008 16th IEEE International Conference on Program Comprehension. IEEE, pp. 236-241. , http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=4556137; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI models for testing (2010) The 5th Iberian Conference on Information Systems and Technologies (CISTI '10), pp. 1-6. , http://goo.gl/bXcIy, July. IEEE; Coimbra Morgado, I., Paiva, A.C.R., Pascoal Faria, J., Reverse engineering of graphical user interfaces (2011) The Sixth International Conference on Software Engineering Advances (ICSEA '11), pp. 293-298. , c. Barcelona; Sacramento, C., Paiva, A.C.R., Web application model generation through reverse engineering and ui pattern inferring (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), pp. 105-115. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6984098, Guimarães, Portugal: IEEE; Marchetto, A., Tonella, P., Ricca, F., Under and over approximation of state models recovered for ajax applications (2010) 2010 14th European Conference on Software Maintenance and Reengineering. IEEE, pp. 236-239. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5714441; Maezawa, Y., Washizaki, H., Honiden, S., Extracting interaction-based stateful behavior in rich internet applications (2012) 2012 16th European Conference on Software Maintenance and Reengineering. IEEE, pp. 423-428. , http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6178915; Batyuk, L., Herpich, M., Camtepe, S.A., Raddatz, K., Schmidt, A.D., Albayrak, S., Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications (2011) 2011 6th International Conference on Malicious and Unwanted Software. IEEE, pp. 66-72. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6112328; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) 16th International Conference on Fundamental Approaches to Software Engineering (FASE'13), pp. 250-265. , http://link.springer.com/chapter/10.1007/978-3-642-37057-119, Rome, Italy; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops. IEEE, pp. 126-133. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6571621; Gao, J., Bai, X., Tsai, W.T., Uehara, T., Mobile application testing - A Tutorial (2014) Computer, 47 (2), pp. 46-55; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of Android applications (2012) 2012 28th IEEE International Conference on Software Maintenance (ICSM). IEEE, pp. 650-653. , http://goo.gl/gPDU9z; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for Android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2013, p. 224. , http://dl.acm.org/citation.cfm?id=2491411.2491450, New York, New York, USA: ACM Press; Costa, P., Paiva, A.C.R., Nabuco, M., Pattern based GUI testing for mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), pp. 66-74. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6984094, Guimarães, Portugal: IEEE; Nasim, F., Aslam, B., Ahmed, W., Naeem, T., Uncovering self code modification in android (2015) First International Conference on Codes, Cryptology, and Information Security, C2SI 2015, pp. 297-313. , http://link.springer.com/chapter/10.1007/978-3-319-18681-824, Rabat, Morocco: Springer; Cunha, M., Paiva, A.C.R., Ferreira, H.S., Abreu, R., PETTool: A pattern-based GUI testing tool (2010) Software Technology and Engineering (ICSTE), 2010 2nd International Conference on, 1, pp. V1202-V1206. , http://ieeexplore.ieee.org/xpls/absall.jsp?arnumber=5608882, San Juan, PR: IEEE; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for GUI modeling and testing (2013) 24th IEEE International Symposium on Software Reliability Engineering (ISSRE 2013), pp. 288-297. , http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6698881, Passadena, CA: IEEE; Monteiro, T., Paiva, A.C.R., Pattern based GUI testing modeling environment (2013) Sixth IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2013), pp. 140-143. , http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=6571623, Luxembourg, Luxembourg: IEEE; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) The 6th International Workshop on Automation of Software Test (AST '11), p. 7. , http://dl.acm.org/citation.cfm?id=1982595.1982612, New York, New York, USA: ACM Press; Coimbra Morgado, I., Paiva, A.C.R., Testing approach for mobile applications through reverse engineering of UI patterns (2015) Sixth International Workshop on Testing Techniques for Event BasED Software; Coimbra Morgado, I., Paiva, A.C., Faria, J.P., Automated pattern-based testing of mobile applications (2014) 2014 9th International Conference on the Quality of Information and Communications Technology, pp. 294-299. , Guimarães, Portugal: IEEE","Morgado, I.C.; Department of Informatics Engineering, Portugal; email: pro11016@fe.up.pt","Shakshuki E.","","Elsevier B.V.","7th International Conference on Ambient Systems, Networks and Technologies, ANT 2016 and the 6th International Conference on Sustainable Energy Information Technology, SEIT 2016","23 May 2016 through 26 May 2016",,121607,18770509,,,,"English","Procedia Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84971349493
"Schur M., Roth A., Zeller A.","51664191200;56742388200;7007015864;","Mining Workflow Models from Web Applications",2015,"IEEE Transactions on Software Engineering","41","12", 7169616,"1184","1201",,15,"10.1109/TSE.2015.2461542","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961616036&doi=10.1109%2fTSE.2015.2461542&partnerID=40&md5=2bd42f0fa7ac28664225c72af858e273","SAP SE, Germany; Saarland University-Cha. for Software Engineering, Germany","Schur, M., SAP SE, Germany; Roth, A., SAP SE, Germany; Zeller, A., Saarland University-Cha. for Software Engineering, Germany","Modern business applications predominantly rely on web technology, enabling software vendors to efficiently provide them as a service, removing some of the complexity of the traditional release and update process. While this facilitates shorter, more efficient and frequent release cycles, it requires continuous testing. Having insight into application behavior through explicit models can largely support development, testing and maintenance. Model-based testing allows efficient test creation based on a description of the states the application can be in and the transitions between these states. As specifying behavior models that are precise enough to be executable by a test automation tool is a hard task, an alternative is to extract them from running applications. However, mining such models is a challenge, in particular because one needs to know when two states are equivalent, as well as how to reach that state. We present Process Crawler (ProCrawl), a tool to mine behavior models from web applications that support multi-user workflows. ProCrawl incrementally learns a model by generating program runs and observing the application behavior through the user interface. In our evaluation on several real-world web applications, ProCrawl extracted models that concisely describe the implemented workflows and can be directly used for model-based testing. © 2015 IEEE.","dynamic analysis; model-based testing; Specification mining; web system testing","Application programs; Behavioral research; Dynamic analysis; Model checking; User interfaces; Application behaviors; Business applications; Model based testing; Running applications; Specification mining; Test automation tool; Testing and maintenance; Web system; World Wide Web",,,,,"European Research Council, ERC",,,"Abrial, J.-R., (1996) The B-Book: Assigning Programs to Meanings, , New York, NY, USA: Cambridge Univ. Press; Alshahwan, N., Harman, M., Marchetto, A., Tiella, R., Tonella, P., Crawlability metrics for web applications (2012) Proc. IEEE 5th Int. Conf. Softw. Testing, pp. 151-160. , Verification Validation; Amalfitano, D., Fasolino, A., Tramontana, P., Reverse engineering finite state machines from rich internet applications (2008) Proc. 15th Working Conf. Reverse Eng., pp. 69-73; Amalfitano, D., Fasolino, A.R., Tramontana, P., Rich internet application testing using execution trace data (2010) Proc. 3rd Int. Conf. Softw. Testing, pp. 274-283. , Verification, Validation Workshops; Ammann, P., Offutt, J., (2008) Introduction to Software Testing, , New York, NY, USA: Cambridge Univ. Press; Biermann, A.W., Feldman, J.A., On the synthesis of finitestate machines from samples of their behavior (1972) IEEE Trans. Comput., C-21 (6), pp. 592-597. , Jun; Binder, R.V., (1999) Testing Object-Oriented Systems: Models, Patterns, and Tools, , Object Technology Series. Reading, MA, USA: Addison-Wesley; Binder, R.V., Legeard, B., Kramer, A., Model-based testing: Where does it stand? (2014) Queue, 13 (1), pp. 4040-4048. , Dec; Cheng, K.T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) Proc. 30th Int. Des. Autom. Conf., pp. 86-91. , New York, NY, USA; Choudhary, S., Dincturk, M.E., Mirtaheri, S.M., Moosavi, A., Von Bochmann, G., Jourdan, G.-V., Onut, I.V., Crawling rich internet applications: The state of the art (2012) Proc. Conf. Center Adv. Stud. Collaborative Res., pp. 146-160. , Riverton, NJ, USA; Corbett, J.C., Dwyer, M.B., Hatcliff, J., Laubach, S., Pasareanu, C.S., Robby, Zheng, H., Bandera: Extracting finite-state models from Java source code (2000) Proc. Int. Conf. Softw. Eng., pp. 439-448. , New York, NY, USA; Dallmeier, V., Burger, M., Orth, T., Zeller, A., WebMate: A tool for testing web 2.0 applications (2012) Proc. Workshop JavaScript Tools, pp. 11-15. , New York, NY, USA; Dallmeier, V., Knopp, N., Mallon, C., Hack, S., Zeller, A., Generating test cases for specification mining (2010) Proc. 19th Int. Symp. Softw. Testing Anal., pp. 85-96. , New York, NY, USA; Di Francescomarino, C., Marchetto, A., Tonella, P., Reverse engineering of business processes exposed as web applications (2009) Proc. Eur. Conf. Softw. Maintenance Reeng., pp. 139-148; Ernst, M.D., Cockrell, J., Griswold, W.G., Notkin, D., Dynamically discovering likely program invariants to support program evolution (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 99-123. , Feb; Förster, K.-T., Wattenhofer, R., Directed graph exploration (2012) Proc. 16th Int. Conf. Principles Distrib. Syst., pp. 151-165; Garousi, V., Mesbah, A., Betin-Can, A., Mirshokraie, S., A systematic mapping study of web application testing (2013) Inf. Softw. Technol., 55 (8), pp. 1374-1396. , Aug; Grieskamp, W., Kicillof, N., Stobie, K., Braberman, V., Modelbased quality assurance of protocol documentation: Tools and methodology (2011) Softw. Testing, Verification Rel., 21 (1), pp. 55-71. , Mar; Korel, B., Tahat, L.H., Vaysburg, B., Model based regression test reduction using dependence analysis (2002) Proc. Int. Conf. Softw. Maintenance, pp. 214-223; Lee, C., Chen, F., Roşu, G., Mining parametric specifications (2011) Proc. 33rd Int. Conf. Softw. Eng., pp. 591-600. , New York, NY, USA; Lorenzoli, D., Mariani, L., Pezzffe, M., Automatic generation of software behavioral models (2008) Proc. 30th Int. Conf. Softw. Eng., pp. 501-510. , New York, NY, USA; Marchetto, A., Tonella, P., Search-based testing of Ajax web applications (2009) Proc. 1st Int. Symp. Search Based Softw. Eng., pp. 3-12; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) Proc. Int. Conf. Softw. Testing, pp. 121-130. , Verification, Validation; Marchetto, A., Tonella, P., Ricca, F., ReAjax: A reverse engineering tool for Ajax web applications (2012) IET Softw., 6 (1), pp. 33-49. , Feb; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proc. 10th Working Conf. Reverse Eng., pp. 260-269; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling Ajaxbased web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 1-30. , Mar; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Trans. Softw. Eng., 38 (1), pp. 35-53. , Jan; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Automated Softw. Eng., 21 (1), pp. 65-105. , Mar; Pezzffe, M., Young, M., (2007) Software Testing and Analysis: Process, Principles and Techniques, , New York, NY, USA: Wiley; Pradel, M., Jaspan, C., Aldrich, J., Gross, T.R., Statically checking API protocol conformance with mined multi-object specifications (2012) Proc. 34th Int. Conf. Softw. Eng., pp. 925-935. , Piscataway, NJ, USA; Quinlan, J.R., (1993) C4.5: Programs for Machine Learning, , San Francisco, CA, USA: Morgan Kaufmann; Robillard, M.P., Bodden, E., Kawrykow, D., Mezini, M., Ratchford, T., Automated API property inference techniques (2013) IEEE Trans. Softw. Eng., 39 (5), pp. 613-637. , May; Schur, M., Roth, A., Zeller, A., Mining behavior models from enterprise web applications (2013) Proc. 9th Joint Meeting Found. Softw. Eng., pp. 422-432; Schur, M., Roth, A., Zeller, A., ProCrawl: Mining test models from multi-user web applications (2014) Proc. Int. Symp. Softw. Testing Anal., pp. 413-416. , San Jose, CA, USA, Jul. 21-26; Tomasi, A., Marchetto, A., Francescomarino, C.D., Susi, A., ReBPMN: Recovering and reducing Business Processes (2012) Proc. 28th IEEE Int. Conf. Softw. Maintenance, pp. 666-669; Tramontana, P., Amalfitano, D., Fasolino, A.R., Federico, N., Reverse engineering techniques: From web applications to rich internet applications (2013) Proc. 15th IEEE Int. Symp. Web Syst. Evolution, pp. 83-86; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , San Francisco, CA, USA: Morgan Kaufmann; Valmari, A., The state explosion problem (1998) Lectures on Petri Nets I: Basic Models, pp. 429-528. , Advances in Petri Nets. London, U.K.: Springer-Verlag; Vapnik, V.N., An overview of statistical learning theory (1999) Trans. Neur. Netw., 10 (5), pp. 988-999. , Sept; Walkinshaw, N., Lambeau, B., Damas, C., Bogdanov, K., Dupont, P., Stamina: A competition to encourage the development and assessment of software model inference techniques (2013) Empirical Softw. Eng., 18 (4), pp. 791-824. , Aug; Walkinshaw, N., Taylor, R., Derrick, J., Inferring extended finite state machine models from software executions (2013) Proc. 20th Working Conf. Reverse Eng., pp. 301-310; Weyuker, E.J., On testing non-testable programs (1982) Comput. J., 25 (4), pp. 465-470; Wieczorek, S., Kozyura, V., Roth, A., Leuschel, M., Bendisposto, J., Plagge, D., Schieferdecker, I., Applying model checking to generate model-based integration tests from choreography models (2009) Proc. 21st IFIP WG 6.1 Int. Conf. Testing Softw. Commun. Syst., pp. 179-194; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslfien, A., (2012) Experimentation in Software Engineering, , New York, NY, USA: Springer; Xie, Q., Memon, A., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 1-35; Xie, T., Notkin, D., Automatic extraction of object-oriented observer abstractions from unit-test executions (2004) Proc. Int. Conf. Formal Eng. Methods, pp. 290-305; Zeller, A., Program analysis: A hierarchy (2003) Proc. ICSE Workshop Dyn. Anal., pp. 6-9",,,,"Institute of Electrical and Electronics Engineers Inc.",,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","",Scopus,2-s2.0-84961616036
"Amalfitano D., Fasolino A.R., Tramontana P., Ta B.D., Memon A.M.","25926238800;7006159957;8879739800;56809486900;35599876500;","MobiGUITAR: Automated Model-Based Testing of Mobile Apps",2015,"IEEE Software","32","5", 6786194,"53","59",,186,"10.1109/MS.2014.55","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84940398128&doi=10.1109%2fMS.2014.55&partnerID=40&md5=bd6edc632e14df17671f7c3354e7c7d8","University of Naples Federico II, Italy; University of Maryland, College Park, United States","Amalfitano, D., University of Naples Federico II, Italy; Fasolino, A.R., University of Naples Federico II, Italy; Tramontana, P., University of Naples Federico II, Italy; Ta, B.D., University of Maryland, College Park, United States; Memon, A.M., University of Maryland, College Park, United States","As mobile devices become increasingly smarter and more powerful, so too must the engineering of their software. User-interface-driven system testing of these devices is gaining popularity, with each vendor releasing some automation tool. However, these tools are inappropriate for amateur programmers, an increasing portion of app developers. MobiGUITAR (Mobile GUI Testing Framework) provides automated GUI-driven testing of Android apps. It's based on observation, extraction, and abstraction of GUI widgets' run-time state. The abstraction is a scalable state machine model that, together with test coverage criteria, provides a way to automatically generate test cases. When applied to four open-source Android apps, MobiGUITAR automatically generated and executed 7,711 test cases and reported 10 new bugs. Some bugs were Android-specific, stemming from the event-and activity-driven nature of Android. © 1984-2012 IEEE.","Android apps; android testing; GUI testing; MobiGUITAR; mobile apps; software engineering; software testing","Abstracting; Automatic test pattern generation; Automation; Graphical user interfaces; Mobile devices; Model checking; Open source software; Software engineering; Software testing; User interfaces; Android apps; Automated modeling; Automatically generated; GUI testing; MobiGUITAR; Mobile apps; State machine models; Test coverage criteria; Android (operating system)",,,,,"CNS-1205501",,,"Popa, I., (2012) What Problems the Next Blackberry Playbook Has to Solve in Order to Be Successful, , http://smartphonestraighttalk.com/what-problems-the-next-blackberry-playbook-has-to-solve-in-order-to-be-successful; Andrici, M., (2012) Windows Phone: 70k Available Apps, but Are They Enough to Take on Android, IOS?, , www.androidauthority.com/windows-phone-7-apps-67900; Sama, M., Context-aware adaptive applications: Fault patterns and their automated identifcation (2010) IEEE Trans. Software Eng., 36 (5), pp. 644-661; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) Proc. 2013 ACM SIGPLAN Int'l Conf. Object Oriented Programming Systems Languages and Applications (OOPSLA 13), pp. 623-640; Amalftano, D., Using gui ripping for automated testing of android applications (2012) Proc. 27th IEEE/ACM Int'l Conf. Automated Software Eng. (ASE 12), pp. 258-261; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proc. 10th Working Conf. Reverse Eng. (WCRE 03), pp. 260-269; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) SIGSOFT Software Eng. Notes, 26 (5), pp. 256-267; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proc. 2012 Int'l Symp. Software Testing and Analysis (ISSTA 12), pp. 67-77; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1). , article 3; Amalfitano, D., Fasolino, A., Tramontana, P., Reverse engineering finite state machines from rich internet applications (2008) Proc. 15th Working Conf Reverse Eng. (WCRE 08), pp. 69-73; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proc. 6th Int'l Workshop Automation of Software Test (AST 11), pp. 77-83; An, S., Automated concolic testing of smartphone apps (2012) Proc. ACM SIGSOFT 20th Int'l Symp. Foundations of Software Eng. (FSE 12), , article 59; UI/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proc. 2013 9th Joint Meeting Foundations of Software Eng. (ESEC/FSE 13), pp. 224-234",,,,"IEEE Computer Society",,,,,07407459,,IESOE,,"English","IEEE Software",Article,"Final","",Scopus,2-s2.0-84940398128
"Namba Y., Akimoto S., Takagi T.","56959973400;56959952300;8389466000;","Overview of graphical operational profiles for generating test cases of GUI software",2015,"2015 IEEE/ACIS 16th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, SNPD 2015 - Proceedings",,, 7176240,"","",,,"10.1109/SNPD.2015.7176240","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84947086838&doi=10.1109%2fSNPD.2015.7176240&partnerID=40&md5=09f2a20e51d6d2c7859ee5048d6f4250","Graduate School of Engineering, Kagawa University, Takamatsu, Kagawa, Japan; Faculty of Engineering, Kagawa University, Takamatsu, Kagawa, Japan","Namba, Y., Graduate School of Engineering, Kagawa University, Takamatsu, Kagawa, Japan; Akimoto, S., Graduate School of Engineering, Kagawa University, Takamatsu, Kagawa, Japan; Takagi, T., Faculty of Engineering, Kagawa University, Takamatsu, Kagawa, Japan","In order to effectively apply operational profile-based testing to GUI software, this paper shows the overview of graphical operational profiles that are basically generated from execution history of the software and include input conditions and expected results based on GUI screen images of the software. © 2015 IEEE.","model-based testing; operational profile; software testing; test case","Artificial intelligence; Graphical user interfaces; Model checking; Software engineering; Execution history; GUI software; Model based testing; Operational profile; Test case; Software testing",,,,,,,,"Musa, J.D., Operational profiles in software reliability engineering (1993) IEEE Software, 10 (2), pp. 14-32; Whittaker, J.A., Thomason, M.G., A markov chain model for statistical software testing (1994) IEEE Transactions on Software Engineering, 20 (10), pp. 812-824; Hartmann, H., Bokkerink, J., Ronteltap, V., How to reduce your test process with 30%-the application of operational profiles at philips medical systems (2006) Proc. 17th International Symposium on Software Reliability Engineering, CD-ROM",,"Saisho K.","IEEE Computer Society;International Association for Computer and Information Science (ACIS)","Institute of Electrical and Electronics Engineers Inc.","16th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, SNPD 2015","1 June 2015 through 3 June 2015",,115983,,9781479986767,,,"English","IEEE/ACIS Int. Conf. Softw. Eng., Artif. Intell., Netw. Parallel/Distrib. Comput., SNPD - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84947086838
"San Miguel J.L., Takada S.","57078025700;7202611302;","Generating test cases for Android applications through GUI modeling, usage modeling, and Change analysis",2015,"ACM International Conference Proceeding Series","13-17-July-2015",,,"146","147",,1,"10.1145/2790798.2790823","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955621865&doi=10.1145%2f2790798.2790823&partnerID=40&md5=fd9b0442b3d784e9cb5fa10f064d9c7e","Keio University, Yokohama, Japan","San Miguel, J.L., Keio University, Yokohama, Japan; Takada, S., Keio University, Yokohama, Japan","The popularity of Android applications (apps) has grown significantly in the last decade. These apps typically have short time-to-market release which may imply lesser time to check the quality of application particularly in the testing phase. Numerous test automation techniques have already been studied, implemented, and evaluated. However, such techniques did not consider the user's behavior towards the app as well as the frequently changing nature of apps. In this paper, we propose an approach to test case generation, which consists of 1) GUI modeling; 2) Usage modeling through app usage analysis; and 3) Change analysis of newer version of Android apps. Our goal is to reduce testing effort by generating an effective test suite using automated and manual techniques and supporting the evolution of Android apps.","Android; GUI testing; Test case generation","Automatic test pattern generation; Behavioral research; C (programming language); Graphical user interfaces; Software engineering; Testing; Android; Android applications; Change analysis; GUI testing; Manual techniques; Test Automation; Test case generation; Time to market; Android (operating system)",,,,,,,,"Activity - Android Developers, , http://developer.android.com/reference/android/app/Activity.html, Last accessed: 18-May-2015; Choi, W., Necula, G., Sen, K., Guided GUI testing of Android apps with minimal restart and approximate learning (2013) OOPSLA'13, pp. 623-640; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timing- and touch-sensitive record and replay for Android (2013) Proceedings of the International Conference on Software Engineering (ICSE'13), pp. 72-81; Hesenius, M., Griebe, T., Gries, S., Gruhn, V., Automating UI tests for mobile applications with formal gesture descriptions (2014) MobileHCI'14, pp. 213-222; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM'13), pp. 15-24; Linares-Vásquez, M., White, M., Bernal-Cárdenas, C., Moran, K., Poshyvanyk, D., Mining Android app usages for generating actionable GUI-based execution scenarios (2015) Proceedings of the 12th Working Conference on Mining Software Repositories (MSR'15), pp. 111-122; Mariani, L., Pezzé, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST'12), pp. 81-90",,"Toyoma M.Desai B.C.","BytePress.org;Concordia University;ConfSys.org;Keio University","Association for Computing Machinery","8th International C Conference on Computer Science and Software Engineering, C3S2E 2015","13 July 2015 through 15 July 2015",,116074,,9781450334198,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-84955621865
"Yu S., Takada S.","57077298300;7202611302;","External event-based test cases for mobile application",2015,"ACM International Conference Proceeding Series","13-17-July-2015",,,"148","149",,2,"10.1145/2790798.2790822","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955599549&doi=10.1145%2f2790798.2790822&partnerID=40&md5=65b27b52699d019ac4d905bb12f5ad6b","Keio University, Yokohama, Japan","Yu, S., Keio University, Yokohama, Japan; Takada, S., Keio University, Yokohama, Japan","In recent years, research on mobile application testing is becoming popular. Testing of mobile application is more complicated compared to other applications such as web applications. User interactions in web applications are limited to its GUI through the mouse and keyboard. On the other hand, mobile applications are also inuenced by external events like phone calls, GPS, and hardware sensors. In this paper, we propose an approach for generating test cases for mobile applications, specifically Android applications, focusing on external events. Our approach considers events that are both handled and not handled by the mobile application, which we refer to as explicit and implicit events. © 2015 Copyright held by the owner/author(s).","Android; Mobile application; Testing","Android (operating system); Mobile computing; Mobile telecommunication systems; Software engineering; Testing; World Wide Web; Android; Android applications; Hardware sensors; Mobile application testing; Mobile applications; Phone calls; User interaction; WEB application; C (programming language)",,,,,,,,"Android Operating System Statistics - Appbrain, , http://www.appbrain.com/stats/, [Last accessed: June 19, 2015]; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) Proceedings of the 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops, pp. 126-133; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, 11p; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 67-77; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) Proceedings of the 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 15-24; Morgado, I.C., Paiva, A.C.R., Faria, J.A.P., Automated pattern-based testing of mobile applications (2014) Proceedings of the 2014 9th International Conference on the Quality of Information and Communications Technology, pp. 294-299",,"Toyoma M.Desai B.C.","BytePress.org;Concordia University;ConfSys.org;Keio University","Association for Computing Machinery","8th International C Conference on Computer Science and Software Engineering, C3S2E 2015","13 July 2015 through 15 July 2015",,116074,,9781450334198,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-84955599549
"Morgado I.C., Paiva A.C.R.","55321167400;7102683763;","Test patterns for android mobile applications",2015,"ACM International Conference Proceeding Series","08-12-July-2015",, a32,"","",,1,"10.1145/2855321.2855354","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84982860131&doi=10.1145%2f2855321.2855354&partnerID=40&md5=c574345417b4aa10c8c6db115eb5b759","DEI, INESC TEC, Faculty of Engineering of University of Porto, Portugal","Morgado, I.C., DEI, INESC TEC, Faculty of Engineering of University of Porto, Portugal; Paiva, A.C.R., DEI, INESC TEC, Faculty of Engineering of University of Porto, Portugal","Mobile applications are a rapidly increasing part of our daily life, featuring more than one million applications and fifty billions downloads in the two major markets. Thus, it is important to ensure their functional correctness. The Pattern-Based GUI Testing (PBGT) project presented an approach for systematising and automating the GUI testing of web applications by modelling testing goals with User Interface Test Patterns(UITPs), i.e., test strategies for recurring behaviour of the UI. This paper extends the set of UITPs used by the PBGT project with three UITPs specific to the testing of mobile applications: Side Drawer, Orientation and Resources Dependency.","GUI modelling; Mobile applications; Test patterns; UI patterns","Android (operating system); Computational linguistics; Mobile computing; Mobile telecommunication systems; User interfaces; Daily lives; Functional correctness; GUI testing; Mobile applications; Test Pattern; Test strategies; Ui patterns; WEB application; Graphical user interfaces",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), p. 258. , ACM Press, New York, New York, USA; Android, G., (2015) Android - What to Test; Android, G., (2015) Navigation Drawer; Android, G., (2015) Up and Running with Material Design; Arlt, S., Bertolini, C., Schäf, M., Behind the scenes: An approach to incorporate context in GUI test case generation (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2011), pp. 222-231. , Washington, DC, USA; Sogeti, Capgemini, H.P., (2014) World Quality Report 2014-15; Costa, P., Paiva, A.C.R., Nabuco, M., Pattern based GUI testing for mobile applications (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014)., pp. 66-74. , IEEE, Guimarães, Portugal; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Grieskamp, W., Weise, C., Model-based testing through a GUI (2006) 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005), 3997, pp. 16-31. , W. Grieskamp and C. Weise, Eds. Lecture Notes in Computer Science Series, Springer Berlin Heidelberg, Berlin, Heidelberg; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis; Meszaros, G., Doble, J., A pattern language for pattern writing (1997) Pattern Languages of Program Design, pp. 529-574. , 3. Addison-Wesley Longman Publishing Co. Inc. Boston, MA, USA; Monteiro, T., Paiva, A.C.R., Pattern based GUI testing modeling environment (2013) Sixth IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW 2013), pp. 140-143. , IEEE, Luxembourg, Luxembourg; Moreira, R.M.L.M., Paiva, A.C.R., A GUI modeling DSL for pattern-based GUI testing PARADIGM (2014) 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE'2014), , Lisbon, Portugal; Moreira, R.M.L.M., Paiva, A.C.R., PBGT tool: An integrated modeling and testing environment for pattern-based GUI testing (2014) 29th ACM/IEEE International Conference on Automated Software Engineering (ASE 2014), pp. 863-866. , ACM Press, New York, New York, USA; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for GUI modeling and testing (2013) 24th IEEE International Symposium on Software Reliability Engineering (ISSRE 2013), pp. 288-297. , IEEE, Passadena, CA; Neil, T., (2014) Mobile Design Pattern Gallery: UI Patterns for Smartphone Apps, , 2nd Ed. O'Reilly Media, Inc. Sebastopol, Canada; Sacramento, C., Paiva, A.C.R., Web Application Model Generation through Reverse Engineering and UI Pattern Inferring (2014) 9th International Conference on the Quality of Information and Communications Technology (QUATIC 2014), pp. 105-115. , IEEE, Guimarães, Portugal; Toxboe, A., (2012) UI-Patterns; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , 1 Ed. Morgan Kaufmann Publishers, San Francisco, CA, USA; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a model-driven approach (2006) 2006 International Workshop on Automation of Software Test (AST 2006), pp. 9-14. , ACM Press, New York, New York, USA; Vilela, L., Paiva, A.C.R., PARADIGM-COV - A multidimensional test coverage analysis tool (2014) 9th Iberian Conference on Information Systems and Technologies (CISTI2014), pp. 1-7. , IEEE, Barcelona, Spain; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) 28th International Conference on Software Engineering - (ICSE 2006), , ACM Press, New York, New York, USA, 997-1000",,,"","Association for Computing Machinery","20th European Conference on Pattern Languages of Programs, EuroPLoP 2015","8 July 2015 through 12 July 2015",,119317,,9781450338479,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-84982860131
"Alégroth E., Feldt R., Ryrholm L.","55843479600;24476388300;55993905100;","Visual GUI testing in practice: challenges, problemsand limitations",2015,"Empirical Software Engineering","20","3",,"694","744",,20,"10.1007/s10664-013-9293-5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929522900&doi=10.1007%2fs10664-013-9293-5&partnerID=40&md5=eb44534ee43c605aac0719be6b9e3a78","Department of Computer Science and Engineering, Chalmers University of Technology & University of Gothenburg, Gothenburg, SE-412 96, Sweden; Department of Software Engineering, Blekinge Institute of Technology, Karlskrona, Sweden","Alégroth, E., Department of Computer Science and Engineering, Chalmers University of Technology & University of Gothenburg, Gothenburg, SE-412 96, Sweden; Feldt, R., Department of Software Engineering, Blekinge Institute of Technology, Karlskrona, Sweden; Ryrholm, L., Department of Computer Science and Engineering, Chalmers University of Technology & University of Gothenburg, Gothenburg, SE-412 96, Sweden","In today’s software development industry, high-level tests such as Graphical User Interface (GUI) based system and acceptance tests are mostly performed with manual practices that are often costly, tedious and error prone. Test automation has been proposed to solve these problems but most automation techniques approach testing from a lower level of system abstraction. Their suitability for high-level tests has therefore been questioned. High-level test automation techniques such as Record and Replay exist, but studies suggest that these techniques suffer from limitations, e.g. sensitivity to GUI layout or code changes, system implementation dependencies, etc. Visual GUI Testing (VGT) is an emerging technique in industrial practice with perceived higher flexibility and robustness to certain GUI changes than previous high-level (GUI) test automation techniques. The core of VGT is image recognition which is applied to analyze and interact with the bitmap layer of a system’s front end. By coupling image recognition with test scripts, VGT tools can emulate end user behavior on almost any GUI-based system, regardless of implementation language, operating system or platform. However, VGT is not without its own challenges, problems and limitations (CPLs) but, like for many other automated test techniques, there is a lack of empirically-based knowledge of these CPLs and how they impact industrial applicability. Crucially, there is also a lack of information on the cost of applying this type of test automation in industry. This manuscript reports an empirical, multi-unit case study performed at two Swedish companies that develop safety-critical software. It studies their transition from manual system test cases into tests automated with VGT. In total, four different test suites that together include more than 300 high-level system test cases were automated for two multi-million lines of code systems. The results show that the transitioned test cases could find defects in the tested systems and that all applicable test cases could be automated. However, during these transition projects a number of hurdles had to be addressed; a total of 58 different CPLs were identified and then categorized into 26 types. We present these CPL types and an analysis of the implications for the transition to and use of VGT in industrial software development practice. In addition, four high-level solutions are presented that were identified during the study, which would address about half of the identified CPLs. Furthermore, collected metrics on cost and return on investment of the VGT transition are reported together with information about the VGT suites’ defect finding ability. Nine of the identified defects are reported, 5 of which were unknown to testers with extensive experience from using the manual test suites. The main conclusion from this study is that even though there are many challenges related to the transition and usage of VGT, the technique is still valuable, flexible and considered cost-effective by the industrial practitioners. The presented CPLs also provide decision support in the use and advancement of VGT and potentially other automated testing techniques similar to VGT, e.g. Record and Replay. © 2014, Springer Science+Business Media New York.","Challenges; Development cost; Industrial case study; Problems and Limitations; System and acceptance test automation; Visual GUI Testing","Automation; Behavioral research; Cost effectiveness; Costs; Decision support systems; Defects; Graphical user interfaces; Image recognition; Problem solving; Software design; Software engineering; Software testing; User interfaces; Challenges; Development costs; Industrial case study; Problems and Limitations; Visual gui testing; Acceptance tests",,,,,,,,"Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated GUI performance testing (2011) Softw Qual J, 39p; Alegroth, E., Feldt, R., Olsson, H., Transitioning Manual System Test Suites to Automated Testing: an Industrial Case Study. In: IEEE Sixth international conference on software testing, verification and validation, ICST 2013. IEEE (2013) pp 56–65; Alegroth, E., Nass, M., Olsson, H., JAutomate: a tool for system-and acceptance-test automation. In: IEEE Sixth international conference on software testing, verification and validation (ICST), 2013. IEEE (2013) pp 439–446; Andersson, J., Bache, G., The video store revisited yet again: adventures in GUI acceptance testing. In: Extreme programming and agile processes in software engineering (2004) pp 1–10; Beizer, B., Software testing techniques (2002) Dreamtech Press; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing. In: Proceedings of the 27th international conference on software engineering. ACM (2005) pp 571–579; Börjesson, E., Multi-perspective analysis of software development: a method and an industrial case study (2010) CPL; Börjesson, E., Feldt, R., Automated system testing using visual gui testing tools: a comparative study in industry. In: IEEE fifth international conference on software testing, verification and validation, ICST 2012. IEEE (2012) pp 350–359; Cadar, C., Godefroid, P., Khurshid, S., Pasareanu, C.S., Sen, K., Tillmann, N., Visser, W., Symbolic execution for software testing in practice: preliminary assessment. In: 33rd international conference on software engineering, ICSE 2011. IEEE (2011) pp 1066–1071; Chang, T., Yeh, T., Miller, R., GUI testing using computer vision. In: Proceedings of the 28th international conference on human factors in computing systems. ACM (2010) pp 1535–1544; Cheon, Y., Leavens, G., A simple and practical approach to unit testing: The JML and JUnit way ECOOP 2002 object-oriented programming (2006) pp 1789–1901; Dustin, E., Rashka, J., Paul, J., Automated software testing: introduction, management, and performance (1999) Addison-Wesley Professional; Ebert, C., The impacts of software product management (2007) J Syst Softw, 80 (6), pp. 850-861; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment. In: Proceedings of the 2nd international conference on eXtreme programming and flexible processes in software engineering. Citeseer (2001) pp 114–117; http://www.froglogic.com/squish/GUI-testing/, froglogic (2013) Squish; Gamma, E., Beck, K., JUnit: a cook’s tour (1999) Java Rep, 4 (5), pp. 27-38; Grechanik, M., Xie, Q., Fu, C., Creating GUI testing tools using accessibility technologies. In: International conference on software testing, verification and validation workshops, 2009, ICSTW’09. IEEE (2009) pp 243–250; Grechanik, M., Xie, Q., Fu, C., Experimental assessment of manual versus tool-based maintenance of GUI-directed test scripts. In: IEEE international conference on software maintenance, ICSM 2009. IEEE (2009) pp 9–18; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts. In: IEEE 31st international conference on software engineering, ICSE 2009. IEEE (2009) pp 408–418; Gutiérrez, J.J., Escalona, M.J., Mejías, M., Torres, J., Generation of test cases from functional requirements. A survey (2006) In: 4ş workshop on system testing and validation; Hackner, D.R., Memon, A.M., Test case generator for GUITAR. In: Companion of the 30th international conference on software engineering. ACM (2008) pp 959–960; Holmes, A., Kellogg, M., Automating functional tests using selenium (2006) pp 270–275; Horowitz, E., Singhera, Z., Graphical user interface testing (1993) Tech rep Us C-C S-93-5, 4 (8); Hsia, P., Gao, J., Samuel, J., Kung, D., Toyoshima, Y., Chen, C., Behavior-based acceptance testing of software systems: a formal scenario approach. In: Proceedings of the eighteenth annual international on computer software and applications conference, 1994. COMPSAC’94. IEEE (1994) pp 293–298; Hsia, P., Kung, D., Sell, C., Software requirements and acceptance testing (1997) Ann Softw Eng, 3 (1), pp. 291-317; Itkonen, J., Rautiainen, K., Exploratory testing: a multiple case study. In: 2005 international symposium on empirical software engineering, p 10 (2005) doi:10.1109/ISESE.2005.1541817; Itkonen, J., Rautiainen, K., Exploratory testing: a multiple case study. In: 2005 international symposium on empirical software engineering. IEEE (2005) p 10; Leitner, A., Ciupa, I., Meyer, B., Howard, M., Reconciling manual and automated testing: the autotest experience. In: 40th annual Hawaii international conference on system sciences, HICSS 2007. IEEE (2007) pp 261a–261a; Lowell, C., Stell-Smith, J., Successful automation of GUI driven acceptance testing. In: Extreme programming and agile processes in software engineering (2003) pp 1011–1012; Memon, A., GUI testing: pitfalls and process (2002) IEEE Comput, 35 (8), pp. 87-88; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: reverse engineering of graphical user interfaces for testing (2003) In: Proceedings of the 10th working conference on reverse engineering (WCRE); Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) ACM SIGSOFT software engineering notes, ACM, 28, pp. 118-127; Miller, R., Collins, C., Acceptance testing (2001) Proceedings XPUniverse; Mongrédien, C., Lachapelle, G., Cannon, M., Testing GPS L5 acquisition and tracking algorithms using a hardware simulator. In: Proceedings of ION GNSS (2006) pp 2901–2913; Myers, G., Sandler, C., Badgett, T., The art of software testing (2011) Wiley; Olan, M., Unit testing: test early, test often (2003) J Comput Sci Coll, 19 (2), pp. 319-328; Onoma, A., Tsai, W., Poonawala, M., Suganuma, H., Regression testing in an industrial environment (1998) Commun ACM, 41 (5), pp. 81-86; Rafi, D., Moses, K., Petersen, K., Mantyla, M., Benefits and limitations of automated software testing: systematic literature review and practitioner survey (2012) 7th international workshop on automation of software test (AST), 2012, pp. 36-42; Regnell, B., Runeson, P., Combining scenario-based requirements with static verification and dynamic testing. In: Proceedings of the fourth international workshop on requirements engineering-foundations for software quality (REFSQ 98) (1998) Pisa; Rothermel, G., Untch, R., Chu, C., Harrold, M., Prioritizing test cases for regression testing (2001) IEEE Trans Softw Eng, 27 (10), pp. 929-948; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empir Softw Eng, 14 (2), pp. 131-164; Sjösten-Andersson, E., Pareto, L., Costs and Benefits of Structure-aware Capture/Replay tools (2006) SERPS, 6, p. 3; http://smartbear.com/products/qa-tools/automated-testing-tools, smartbear (2013) TestComplete; http://www.testplant.com/, TestPlant (2013) eggPlant; Vizulis, V., Diebelis, E., Self-Testing Approach and Testing Tools (2012) Datorzinātne un informācijas tehnolog̀ijas, p. 27; Williams, L., Kudrjavets, G., Nagappan, N., On the effectiveness of unit test automation at Microsoft. In: 20th international symposium on software reliability engineering, 2009, ISSRE’09. IEEE (2009) pp 81–89; Yeh, T., Chang, T., Miller, R., Sikuli: using GUI screenshots for search and automation. In: Proceedings of the 22nd annual ACM symposium on user interface software and technology (2009) ACM; Zaraket, F., Masri, W., Adam, M., Hammoud, D., Hamzeh, R., Farhat, R., Khamissi, E., Noujaim, J., GUICOP: Specification-Based GUI Testing (2012) IEEE Fifth International Conference on Software Testing, Verification and Validation, 2012, pp. 747-751. , ICST, IEEE","Alégroth, E.; Department of Computer Science and Engineering, Sweden",,,"Kluwer Academic Publishers",,,,,13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84929522900
"Wetzlmaier T., Winterer M.","56595126700;55970005100;","Test automation for multi-touch user interfaces of industrial applications",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings",,, 7107468,"","",,3,"10.1109/ICSTW.2015.7107468","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934325229&doi=10.1109%2fICSTW.2015.7107468&partnerID=40&md5=121d3141754ec0aad721a9e524ae30f5","Software Competence Center Hagenberg, Softwarepark 21, Hagenberg, 4232, Austria","Wetzlmaier, T., Software Competence Center Hagenberg, Softwarepark 21, Hagenberg, 4232, Austria; Winterer, M., Software Competence Center Hagenberg, Softwarepark 21, Hagenberg, 4232, Austria","In this paper we discuss challenges in testing multi-touch user interfaces. We report on our experiences with testing multi-touch UIs in context of industrial software applications for machinery control. For this purpose we developed a reusable capture/replay approach for recording multi-touch gestures. The tool support is used to establish a gesture library capturing the wide range of individual variants in multi-touch interactions for regression testing industrial applications. © 2015 IEEE.","Human computer interaction; Software testing; Test automation",,,,,,,,,"Beer, W., Dorninger, B., Winterer, M., Flexible and reliable software architecture for industrial user interfaces (2013) 18th IEEE International Conference on Emerging Technologies & Factory Automation (ETFA 2013), , Cagliari, Italy, September; Vatavu, R.-D., Anthony, L., Wobbrock, J.O., Gesture heatmaps: Understanding gesture performance with colorful visualizations (2014) Proceedings of the ACM International Conference on Multimodal Interfaces (ICMI '14), pp. 172-179. , Istanbul, Turkey (November 12-16). New York: ACM Press; Lü, H., Li, Y., Gesture coder: A tool for programming multi-touch gestures by demonstration Proceedings of the SIGCHI Conference on Human Factors in Computing Systems; Khandkar, S.H., Sohan, S.M., Sillito, J., Maurer, F., Tool support for testing complex multi-touch gestures (2010) Proc. ITS '10, pp. 59-68. , New York, NY, USA. ACM; Kin, K., Hartmann, B., Derose, T., Agrawala, M., Proton: Multitouch gestures as regular expressions (2012) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI '12, pp. 2885-2894. , New York, NY, USA; Hesenius, M., Griebe, T., Gries, S., Gruhn, V., Automating UI tests for mobile applications with formal gesture descriptions (2014) Proceedings of the 16th International Conference on Human-computer Interaction with Mobile Devices and Services, , Toronto, ON, Canada, ACM; Khandkar, S., Maurer, F., A domain specific language to define gestures for multi-touch applications Proceedings of the 10th Workshop on Domain-Specific Modeling, , Article; Wigdor, D., Fletcher, J., Morrison, G., Designing user interfaces for multi-touch and gesture devices (2009) CHI'09 Extended Abstracts on Human Factors in Computing Systems, pp. 2755-2758; Albinsson, P.-A., Zhai, S., High precision touch screen interaction (2003) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 105-112. , New York, NY, USA; Sears, A., Shneiderman, B., High precision touchscreens: Design strategies and comparisons with a mouse (1991) International Journal of Man-Machine Studies, 34 (4), pp. 593-613; Hinrichs, U., Carpendale, S., Gestures in the wild: Studying multi-touch gesture sequences on interactive tabletop exhibits (2011) InProceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 3023-3032. , New York, NY, USA; Beer, W., Salomon, C., Winterer, M., Putzhammer, K., Schauer, B., Rechberger, T., The 6th finger: Practical challenges in the design of a multitouch audio appliance (2015) Upcoming: In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, , Seoul, Korea",,,"","Institute of Electrical and Electronics Engineers Inc.","2015 8th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015","13 April 2015 through 17 April 2015",,112292,,9781479918850,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84934325229
"Leotta M., Stocco A., Ricca F., Tonella P.","37104276100;36882807000;24822686600;7003489194;","Using multi-locators to increase the robustness of web test cases",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation, ICST 2015 - Proceedings",,, 7102611,"","",,32,"10.1109/ICST.2015.7102611","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935138341&doi=10.1109%2fICST.2015.7102611&partnerID=40&md5=83dd570e6f52d5e9b3ce4f29843cf63a","Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Fondazione Bruno Kessler, Trento, Italy","Leotta, M., Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Stocco, A., Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Ricca, F., Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Tonella, P., Fondazione Bruno Kessler, Trento, Italy","The main reason for the fragility of web test cases is the inability of web element locators to work correctly when the web page DOM evolves. Web elements locators are used in web test cases to identify all the GUI objects to operate upon and eventually to retrieve web page content that is compared against some oracle in order to decide whether the test case has passed or not. Hence, web element locators play an extremely important role in web testing and when a web element locator gets broken developers have to spend substantial time and effort to repair it. While algorithms exist to produce robust web element locators to be used in web test scripts, no algorithm is perfect and different algorithms are exposed to different fragilities when the software evolves. Based on such observation, we propose a new type of locator, named multi-locator, which selects the best locator among a candidate set of locators produced by different algorithms. Such selection is based on a voting procedure that assigns different voting weights to different locator generation algorithms. Experimental results obtained on six web applications, for which a subsequent release was available, show that the multi-locator is more robust than the single locators (about -30% of broken locators w.r.t. the most robust kind of single locator) and that the execution overhead required by the multiple queries done with different locators is negligible (2-3% at most). © 2015 IEEE.","Test Case Robustness; Testware Evolution; Web Element Locators; Web Testing; XPath Locators","Algorithms; Software testing; Testing; Verification; Websites; Test case; Testware Evolution; Web Element Locators; Web testing; XPath Locators; Social networking (online)",,,,,,,,"Beizer, B., (1990) Software Testing Techniques, , 2nd Ed. ). Van Nostrand Reinhold Co., New York, NY, USA; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of 27th International Conference on Software Engineering, ICSE 2005, pp. 571-579. , IEEE; Choudhary, S.R., Zhao, D., Versee, H., Orso, A., WATER: Web application test repair (2011) Proceedings of 1st International Workshop on End-to-End Test Script Engineering, ETSE 2011, pp. 24-29. , ACM; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezze, M., Automated GUI refactoring and test script repair (2011) Proceedings of 1st International Workshop on End-to-End Test Script Engineering, ETSE 2011, pp. 38-41. , ACM; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA; Geisser, S., Predictive Inference (1993) Chapman & Hall/CRC Monographs on Statistics & Applied Probability, , Taylor & Francis; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUIdirected test scripts (2009) Proceedings of 31st International Conference on Software Engineering, ICSE 2009, pp. 408-418. , IEEE; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Comparing the maintainability of Selenium WebDriver test suites employing different locators: A case study (2013) Proceedings of 1st International Workshop on Joining AcadeMiA and Industry Contributions to Testing Automation, JAMAICA 2013, pp. 53-58. , ACM; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs programmable web testing: An empirical assessment during test case evolution (2013) Proceedings of 20th Working Conference on Reverse Engineering, WCRE 2013, pp. 272-281. , IEEE; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. DOM-based web locators: An empirical study (2014) Proceedings of 14th International Conference on Web Engineering (ICWE 2014), Volume 8541 of LNCS, pp. 322-340. , Springer; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Reducing web test cases aging by means of robust XPath locators (2014) Proceedings of 25th International Symposium on Software Reliability Engineering Workshops, ISSREW 2014, pp. 449-454. , IEEE; Leotta, M., Stocco, A., Ricca, F., Tonella, P., Automated generation of visual web tests from DOM-based web tests (2015) Proceedings of 30th Symposium on Applied Computing, SAC 2015. ACM; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology (TOSEM), 18 (2), pp. 41-436. , Nov; Milani Fard, A., Mirzaaghaei, M., Mesbah, A., Leveraging existing tests in automated test generation for web applications (2014) Proceedings of 29th International Conference on Automated Software Engineering, ASE 2014, pp. 67-78. , ACM; Mirzaaghaei, M., Pastore, F., Pezze, M., Automatically repairing test cases for evolving method declarations (2010) IEEE International Conference on Software Maintenance, ICSM, , Article number 5609549; Montoto, P., Pan, A., Raposo, J., Bellas, F., Lopez, J., Automated browsing in AJAX websites (2011) Data & Knowl. Eng., 70 (3), pp. 269-283; Stocco, A., Leotta, M., Ricca, F., Tonella, P., PESTO: A tool for migrating DOM-based to visual web tests (2014) Proceedings of 14th International Working Conference on Source Code Analysis and Manipulation, SCAM 2014, pp. 65-70. , IEEE; Thummalapenta, S., Devaki, P., Sinha, S., Chandra, S., Gnanasundaram, S., Nagaraj, D.D., Sathishkumar, S., Efficient and change-resilient test automation: An industrial case study (2013) Proceedings of 35th International Conference on Software Engineering, ICSE 2013, pp. 1002-1011. , IEEE; Tonella, P., Ricca, F., Marchetto, A., Recent advances in web testing (2014) Advances in Computers, 93, pp. 1-51; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M., Regnell, B., Wesslén, A., (2000) Experimentation in Software Engineering-An Introduction, , Kluwer Academic Publishers; Yandrapally, R., Thummalapenta, S., Sinha, S., Chandra, S., Robust test automation using contextual clues (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, ISSTA 2014, pp. 304-314. , ACM; Zhang, S., Ly, H., Ernst, M.D., Automatically repairing broken workflows for evolving GUI applications (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, ISSTA 2013, pp. 45-55. , ACM",,,"Graz University of Technology (TU Graz);IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","8th IEEE International Conference on Software Testing, Verification and Validation, ICST 2015","13 April 2015 through 17 April 2015",,,,9781479971251,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid., ICST - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84935138341
"Rueda U., Vos T.E.J., Almenar F., Oreto M., Esparcia Alcazar A.","6507265119;8980537100;56703382600;57210883712;6506045663;","TESTAR - From academic protoype towards an industry-ready tool for automated testing at the user interface level",2015,"Actas de las 20th Jornadas de Ingenier&amp;amp;amp;amp;#65533;a del Software y Bases de Datos, JISBD 2015",,,,"","",,6,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988413181&partnerID=40&md5=58ff703c4aa08713b03185afe780366e","Universidad Politecnica de Valencia, Spain, Camino de vera s/n, Valencia, 46022, Spain","Rueda, U., Universidad Politecnica de Valencia, Spain, Camino de vera s/n, Valencia, 46022, Spain; Vos, T.E.J., Universidad Politecnica de Valencia, Spain, Camino de vera s/n, Valencia, 46022, Spain; Almenar, F., Universidad Politecnica de Valencia, Spain, Camino de vera s/n, Valencia, 46022, Spain; Oreto, M., Universidad Politecnica de Valencia, Spain, Camino de vera s/n, Valencia, 46022, Spain; Esparcia Alcazar, A., Universidad Politecnica de Valencia, Spain, Camino de vera s/n, Valencia, 46022, Spain","Testing applications with a Graphical User Interface (GUI) is an important, though challenging and time consuming task. The state of the art in the industry are still capture and replay tools, which may simplify the recording and execution of input sequences, but do not support the tester in finding fault-sensitive test cases and leads to a huge overhead on maintenance of the test cases when the GUI changes. While search-based test case generation strategies are well researched for various areas of testing, relatively little work has been done on applying these techniques to an entire GUI of an application. In this paper we present the tool TESTAR, an automated search-based approach to test applications at the GUI level whose objective is to solve part of the maintenance problem by automatically generating test cases based on a structure that is automatically derived from the GUI. © 2015 Sistedes. All rights reserved.","Automated; Search-based; Testing; User interface level","Automation; Graphical user interfaces; Software engineering; Testing; Well testing; Automated; Automated searches; Graphical user interfaces (GUI); Interface level; Maintenance Problem; Search-based; Test case generation; Time-consuming tasks; Automatic test pattern generation",,,,,,"Acknowledgments. This work was financed by the FITTEST project, ICT-",,"Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.M., GUITAR: An innovative tool for automated testing of GUI-driven software (2014) Journal of Automated Software Engineering (ASE), 21 (1), pp. 65-105; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using gui screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology (UIST), pp. 183-192. , New York, NY, USA; Alegroth, E., Nass, M., Olsson, H., Jautomate: A tool for system- and acceptance- test automation (2013) IEEE Sixth International Conference on Software Testing, Verification and Validation (ICST), pp. 439-446. , March; Bauersfeld, S., Vos, T.E.J., Guitest: A java library for fully automated GUI robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 330-333. , New York, NY, USA; Bauersfeld, S., Vos, T.E.J., A reinforcement learning approach to automated GUI robustness testing (2012) Fast Abstracts of the 4th Symposium on Search-Based Software Engineering (SSBSE), pp. 7-12; Bauersfeld, S., Vos, T.E.J., User interface level testing with TESTAR; what about more sophisticated action specification and selection? (2014) Proceedings of the 7th Edition of the Seminar Series on Advanced Techniques & Tools for Software Evolution (SATToSE), , L Aquila, Italy, July CEUR (in press); Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a GUI (2011) Proceedings of the Third International Symposium on Search Based Software Engineering (SSBSE), pp. 10-12. , Szeged, Hungary, September; McMaster, S., Memon, A., Call-stack coverage for gui test suite reduction (2008) IEEE Transactions on Software Engineering (TSE), 34, pp. 99-115; Vos, T.E.J., Kruse, P., Condori-Fernández, N., Bauersfeld, S., Wegener, J., Testar: Tool support for test automation at the user interface level (2015) Proceedings of the International Journal of Information System Modelling and Design (IJISMD), , in press",,"Canos J.H.Gonzalez-Harbour M.",,"Sistedes","20th Jornadas de Ingenier�a del Software y Bases de Datos, JISBD 2015  - 20th Conference on Software Engineering and Databases, JISBD 2015","15 September 2015 through 17 September 2015",,149665,,,,,"English","Actas Jornadas Ing. Softw. Bases Datos, JISBD",Conference Paper,"Final","",Scopus,2-s2.0-84988413181
"Song K., Han A.-R., Jeong S., Cha S.","57189364471;35961825700;36179958500;7201865525;","Generating various contexts from permissions for testing Android applications",2015,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2015-January",,,"87","92",,5,"10.18293/SEKE2015-118","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969790511&doi=10.18293%2fSEKE2015-118&partnerID=40&md5=e123597f10f87e5b6fae9007c2e75396","Department of Computer Science and Engineering, Korea University, Seoul, South Korea","Song, K., Department of Computer Science and Engineering, Korea University, Seoul, South Korea; Han, A.-R., Department of Computer Science and Engineering, Korea University, Seoul, South Korea; Jeong, S., Department of Computer Science and Engineering, Korea University, Seoul, South Korea; Cha, S., Department of Computer Science and Engineering, Korea University, Seoul, South Korea","Context-awareness of mobile applications yields several issues for testing, since the mobile applications should be testable in any environment and with any contextual input. In previous studies of testing for Android applications as eventdriven systems, many researchers have focused on using the generated test cases considering only GUI events. However, it is difficult to detect failures in the changes in the context in which applications run. It is important to consider various contexts since the mobile applications adapt and use novel features and sensors of mobile devices. In this paper, we provide the method of systematically generating various executing contexts from permissions. By referring the lists of permissions, the resources that the applications use for running Android applications can be inferred easily. The various contexts of an application can be generated by permuting resource conditions, and the permutations of the contexts are prioritized. We have evaluated the usefulness and effectiveness of our method by showing that our method contributes to detect faults. Copyright © 2015 by KSI Research Inc. and Knowledge Systems Institute Graduate School.","Android application testing; Context-aware application; Mobile application testing; Permissions; Various contexts","Knowledge engineering; Mobile computing; Mobile devices; Mobile telecommunication systems; Software engineering; Android applications; Context aware applications; Mobile application testing; Permissions; Various contexts; Android (operating system)",,,,,"Ministry of Education, MOE: NRF-2014R1A1A2054098

Ministry of Science, ICT and Future Planning, MSIP: IITP-2015-H8501-15-1012

National Research Foundation of Korea, NRF

Ministry of Science ICT and Future Planning, MSIP","This research was supported by Basic Science Research Program through the National Research Foundation of Korea(NRF) funded by the Ministry of Education(NRF-2014R1A1A2054098). This research was supported by the MSIP(Ministry of Science, ICT and Future Planning), Korea, under the ITRC(Information Technology Research Center) support program (IITP-2015-H8501-15-1012) supervised by the IITP(Institute for Information & communications Technology Promotion).",,"Dehlinger, J., Dixon, J., Mobile application software engineering: Challenges and research directions (2011) Workshop on Mobile Software Engineering; Peak Vision, , http://www.peekvision.org/; Baldauf, M., Dustdar, S., Rosenberg, F., A survey on context-aware systems (2007) International Journal of Ad Hoc and Ubiquitous Computing, 2 (4), pp. 263-277; Amalfitano, D., Fasolino, A.R., Tramontana, P., Robbins, B., Testing android mobile applications: Challenges, strategies, and approaches (2013) Advances in Computers, 89, pp. 1-52; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Automation of Software Test (AST), 2012 7th International Workshop on, pp. 29-35. , IEEE; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) Software Testing, Verification and Validation Workshops (ICSTW), 2013 IEEE Sixth International Conference on, pp. 126-133. , IEEE; Abowd, G.D., Dey, A.K., Brown, P.J., Davies, N., Smith, M., Steggles, P., Towards a better understanding of context and contextawareness (1999) Handheld and Ubiquitous Computing, pp. 304-307. , Springer; Kumar Maji, A., Hao, K., Sultana, S., Bagchi, S., Characterizing failures in mobile oses: A case study with android and symbian (2010) Software Reliability Engineering (ISSRE), 2010 IEEE 21st International Symposium on, pp. 249-258. , IEEE; System Permissions, , http://developer.android.com/intl/ko/guide/topics/security/permissions.html; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for gui testing of android applications (2012) Software Maintenance (ICSM), 2012 28th IEEE International Conference on, pp. 650-653. , IEEE; Open Camera, , http://opencamera.sourceforge.net; Subsonic, , http://subsonic.org/pages/apps.jsp#android; UI/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using gui ripping for automated testing of android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 258-261. , ACM; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawlingbased technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (ICSTW), 2011 IEEE Fourth International Conference on, pp. 252-261. , IEEE; Wang, M., Yuan, J., Miao, H., Tan, G., A static analysis approach for automatic generating test cases for web applications (2008) Computer Science and Software Engineering 2008 International Conference on, 2, pp. 751-754. , IEEE; Inozemtseva, L., Holmes, R., Coverage is not strongly correlated with test suite effectiveness (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 435-445. , ACM; Wei, X., Gomez, L., Neamtiu, I., Faloutsos, M., Permission evolution in the android ecosystem (2012) Proceedings of the 28th Annual Computer Security Applications Conference, pp. 31-40. , ACM; Menifest Permissions, , http://developer.android.com/reference/android/Manifest.permission.html; Johnson, R., Wang, Z., Gagnon, C., Stavrou, A., Analysis of android applications' permissions (2012) Software Security and Reliability Companion (SERE-C), 2012 IEEE Sixth International Conference on, pp. 45-46. , IEEE; Open Camera Bug Issues, , http://sourceforge.net/p/opencamera/tickets/; Subsonic Bug Issues, , http://sourceforge.net/p/subsonic/bugs; Rothermel, G., Untch, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) Software Engineering IEEE Transactions on, 27 (10), pp. 929-948",,,"Knowledge Systems Institute Graduate School;KSI Research Inc.","Knowledge Systems Institute Graduate School","27th International Conference on Software Engineering and Knowledge Engineering, SEKE 2015","6 July 2015 through 8 July 2015",,121351,23259000,1891706373,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-84969790511
"van der Meer A.P., Kherrazi R., Noroozi N., Wierda A.","56789678700;56790144300;54411225500;57090581000;","The synergy between user experience design and software testing",2015,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9509",,,"11","21",,,"10.1007/978-3-662-49224-6_2","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84956692700&doi=10.1007%2f978-3-662-49224-6_2&partnerID=40&md5=60862b9c406c6c1723ca9aee5810524b","Nspyre B.V, Eindhoven, Netherlands","van der Meer, A.P., Nspyre B.V, Eindhoven, Netherlands; Kherrazi, R., Nspyre B.V, Eindhoven, Netherlands; Noroozi, N., Nspyre B.V, Eindhoven, Netherlands; Wierda, A., Nspyre B.V, Eindhoven, Netherlands","Formal methods and testing are two important approaches that assist in the development of high quality software. Model-based testing (MBT) is a systematic approach to testing where using formal models enables automatic generation of test cases and test oracle. Although the results of applying MBT in practice are promising, creating formal models is an obstacle for wide-spread use of MBT in industry. In this paper we address how the cooperation between testers and user experience designers can help with the overall challenge of applying MBT. We present a test automation approach based on Task Models and Microsoft Spec Explorer model-based testing tool to improve software testing. Task Model is a formal model to specify the high-level interaction between the user and the graphical user interface (GUI). We developed a tool, called UXSpec, to convert Task Models to the input models of Spec Explorer, allowing us to do functional testing with little modeling effort, due to usage of already existing models. We demonstrate this by applying our approach to a case study. © Springer-Verlag Berlin Heidelberg 2015.","ConcurTaskTrees; Model-based testing; Spec Explorer","Graphical user interfaces; Model checking; Software engineering; Software testing; User centered design; User interfaces; Concurtasktrees; Graphical user interfaces (GUI); High-level interactions; High-quality software; Model based testing; Model-based testing tool; Spec Explorer; User experience design; Formal methods",,,,,,,,"Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-based testing of object-oriented reactive systems with Spec explorer (2008) FORTEST. LNCS, 4949, pp. 39-76. , Hierons, R.M., Bowen, J.P., Harman, M. (eds.), Springer, Heidelberg; http://www.eclipse.org/acceleo, The Eclipse Foundation: Acceleo; http://www.eclipse.org/modeling/emf/, The Eclipse Foundation: Eclipse Modeling Framework Project (EMF); http://www.eclipse.org/MoDisco, The Eclipse Foundation: MoDisco Homepage; http://wiki.eclipse.org/QVTo, The Eclipse Foundation: QVTo; https://nmodel.codeplex.com/, Microsoft: NModel; Jacky, J., PyModel: Model-based testing in Python (2011) Proceedings of the 10Th Python in Science Conference, pp. 43-48; Steinberg, D., Budinsky, F., Paternostro, M., Merks, E., (2009) EMF: Eclipse Modeling Frame-Work 2.0, , 2nd edn. Addison-Wesley Professional, Reading; http://research.microsoft.com/en-us/projects/specexplorer, Model-based Testing with SpecExplorer; Manca, M., Patern, F., Santoro, C., Spano, L.D., Considering task pre-conditions in model-based user interface design and generation (2014) Symposium on Engineering Interactive Computing Systems, pp. 149-154. , ACM; Patern, F., Santoro, C., Spano, L.D., Raggett, D., MBUI - Task Models (2014) W3C Working Group Note, p. 08; http://msdn.microsoft.com/enus/library/windows/desktop/ee684009(v=vs.85).aspx, Windows Automation API: UI Automation; Silva, J.L., Campos, J.C., Paiva, A.C.R., Model-based user interface testing with Spec explorer and ConcurTaskTrees (2008) Electron. Notes Theor. Comput. Sci, 208, pp. 77-93; Barbosa, A., Paiva, A.C.R., Campos, J.C., Test case generation from mutated task models (2011) Proceedings of the 3Rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS 2011), pp. 175-184. , ACM; Hjort, U.H., Illum, J., Larsen, K.G., Petersen, M.A., Skou, A., Model-based GUI testing using Uppaal at Novo Nordisk FM 2009. LNCS, 5850, pp. 814-818. , In: Cavalcanti, A., Dams, D.R. (eds.), Springer, Heidelberg (2009); Paiva, A.C.R., (1997) Automated Specification-Based Testing of Graphical User Interfaces, , Ph.D. thesis, Faculty of Engineering, Porto University, Porto, Portugal; Nguyen, B., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for AU-tomated testing of GUI-driven software (2013) Autom. Softw. Eng, 21, pp. 65-105; Alsmadi, I., Samarah, S., Saifan, A., Al Zamil, M.G., Automatic model based methods to improve test effectiveness (2010) Univ. J. Comput. Sci. Eng. Technol, 1 (1), pp. 41-49","Noroozi, N.; Nspyre B.VNetherlands; email: neda.noroozi@nspyre.nl","Bianculli D.Calinescu R.Rumpe B.","Berner and Mattner GmbH, Germany;Ericsson, Sweden;Universidad Politécnica de Valencia, Spain","Springer Verlag","13th International Conference on Software Engineering and Formal Methods, SEFM 2015","7 September 2015 through 8 September 2015",,161349,03029743,9783662492239,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84956692700
"Horváth F., Gergely T.","36147467700;6701482066;","Structural information aided automated test method for Magic 4GL",2015,"Acta Cybernetica","22","1",,"81","99",,,"10.14232/actacyb.22.1.2015.6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955457997&doi=10.14232%2factacyb.22.1.2015.6&partnerID=40&md5=8ae4062ec113b0a2767ae9372ccd4fa4","University of Szeged, Department of Software Engineering, Hungary","Horváth, F., University of Szeged, Department of Software Engineering, Hungary; Gergely, T., University of Szeged, Department of Software Engineering, Hungary","Nowadays testing data intensive, GUI enhanced applications properly on an easily maintainable way has become a more crucial part of the application life cycle. There are many evolving technologies to support automatized GUI testing in various environments. However there are hardly any methods that support 4GLs, especially Magic. Fortunately, the characteristics of the 4th generation of programming languages - like explicit definition of the relations between GUI elements and data - eliminate most of the problems raised during testing the GUI in the case of 3GLs. By utilizing these advantages we were able to develop a generalized testing method that supports 4GLs, and as a proof of concept a system for testing Magic xpa applications was built. In this paper, a generalized testing method for 4GLs, our path and script generator algorithms, and their implementations for Magic xpa applications are presented. In addition, the cooperation of these components with existing solutions is demonstrated, and a test method that has been competed by the application of our tools (and which is an instantiation of the generalized method) is introduced as a possible use of the results.","4GL; ASG; Automated testing; CFG; Magic; Path generation; Test script generation","Graphical user interfaces; Life cycle; Application life cycles; Automated testing; Generalized method; Magic; Path generation; Proof of concept; Structural information; Test script generations; Testing",,,,,,,,"Abramowicz, W., Fensel, D., (2008) Business Information Systems [electronic Resource]: 11th International Conference, BIS 2008, Innsbruck, Austria, May 5-7, 2008, Proceedings, , Lecture notes in business information processing. Springer; Allen, F.E., Cocke, J., A program data flow analysis procedure (1976) Commun. ACM, 19 (3), p. 137. , March; Bakota, T., Beszédes, A., Gergely, T., Gyalai, M., Gyimóthy, T., Füleki, D., Semi-automatic test case generation from business process models (2009) Proceedings of the 11th Symposium on Programming Languages and Software Tools (SPLST'09) and 7th Nordic Workshop on Model Driven Software Engineering (NW-MODE'09), pp. 5-18. , Tampere, Finland, August 26-28; Coleman, J., Jones, C., Oliver, I., Romanovsky, A., Troubitsyna, E., (2005) RODIN (Rigorous Open Development Environment for Complex Systems), , University of Newcastle upon Tyne, Computing Science; Dévai, R., Jász, J., Nagy, C., Ferenc, R., Designing and implementing control flow graph for Magic 4th generation language (2013) Proceedings of the 13th Symposium on Programming Languages and Software Tools (SPLST'13), pp. 200-214. , Kiss, Ákos, editor, Szeged, Hungary, University of Szeged; Ferenc, R., Beszédes, A., Gyimóthy, T., Fact extraction and code auditing with Columbus and SourceAudit (2004) Proceedings of the 20th IEEE International Conference on Software Maintenance, ICSM'04, p. 513. , Washington, DC, USA, IEEE Computer Society; Ferenc, R., Beszédes, A., Tarkiainen, M., Gyimóthy, T., Columbus - Reverse engineering tool and schema for C++ (2002) Proceedings of the 18th International Conference on Software Maintenance (ICSM 2002, pp. 172-181. , IEEE Computer Society; Fritsi, D., Nagy, C., Ferenc, R., Gyimóthy, T., A layout independent GUI test automation tool for applications developed in Magic/uniPaaS (2011) Proceedings of the 12th Symposium on Programming Languages and Software Tools (SPLST'11), pp. 248-259; He, N., Rümmer, P., Kroening, D., Test-case generation for embedded Simulink via formal concept analysis Design Automation Conference (DAC), pp. 224-229. , ACM, 201; Jha, S., Datta, A., Li, N., Melski, D., Reps, T., (2010) Analysis Techniques for Information Security, , Morgan and Claypool Publishers; Kaner, C., Architectures of test automation (2000) STAR West; Kim, Y.G., Hong, H.S., Bae, D.-H.H., Cha, S.-D.D., Test cases generation from uml state diagrams (1999) Software, IEE Proceedings, 146 (4), pp. 187-192. , Aug; Kit, E., Integrated, effective test design and automation (1999) Software Development, 7 (2), pp. 27-41; Leung, N.K.Y., Nkhoma, M., John, B., (2013) Proceedings of the 4th International Conference on IS Management and Evaluation: ICIME 2013, , Academic Conferences and Publishing Limited; Magic Software Enterprises Ltd, (2015) Magic Xpa Application Platform RIA Demo, , http://demo.magicsoftware.com, Accessed 10-Mar-2015; Mingsong, C., Xiaokang, Q., Xuandong, L., Automatic test case generation for uml activity diagrams (2006) Proceedings of the 2006 International Workshop on Automation of Software Test, AST'06, pp. 2-8. , New York, NY, USA, ACM; Nagy, C., Vidács, L., Ferenc, R., Gyimóthy, T., Kocsis, F., Kovács, I., Solutions for reverse engineering 4GL applications, recovering the design of a logistical wholesale system (2011) Proceedings of CSMR 2011 (15th European Conference on Software Maintenance and Reengineering), pp. 343-346. , IEEE Computer Society, March; Richardson, D.J., Clarke, L.A., A partition analysis method to increase program reliability (1981) Proceedings of the 5th International Conference on Software Engineering, ICSE'81, pp. 244-253. , Piscataway, NJ, USA, IEEE Press; Tip, F., (1994) A Survey of Program Slicing Techniques, , Technical report, CWI Centre for Mathematics and Computer Science, Amsterdam, The Netherlands, The Netherlands; Vanhatalo, J., Völzer, H., Leymann, F., Faster and more focused control-flow analysis for business process models through SESE decomposition (2007) Proceedings of the 5th International Conference on Service-Oriented Computing, ICSOC'07, pp. 43-55. , Berlin, Heidelberg, Springer-Verlag; Visser, W., Pəsəreanu, C.S., Khurshid, S., Test input generation with Java PathFinder (2004) Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA'04, pp. 97-107. , New York, NY, USA, ACM; Weimer, W., Necula, G.C., Finding and preventing run-time error handling mistakes (2004) Proceedings of the 19th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications, OOPSLA'04, pp. 419-431. , New York, NY, USA, ACM; Wenzel, I., Rieder, B., Kirner, R., Puschner, P., Automatic timing model generation by cfg partitioning and model checking (2005) Design, Automation and Test in Europe, 2005. Proceedings, 1, pp. 606-611. , March; Yan, J., Li, Z., Yuan, Y., Sun, W., Zhang, J., Bpel4ws unit testing: Test case generation using a concurrent path analysis approach (2006) Software Reliability Engineering, 2006. ISSRE'06. 17th International Symposium On, pp. 75-84. , Nov; Yuan, Q., Wu, J., Liu, C., Zhang, L., A model driven approach toward business process test case generation (2008) Web Site Evolution, 2008. WSE 2008. 10th International Symposium On, pp. 41-44. , Oct; Yuan, X., Memon, A.M., Using gui run-time state as feedback to generate test cases (2007) Software Engineering, 2007. ICSE 2007. 29th International Conference On, pp. 396-405. , May",,,,"University of Szeged, Institute of Informatics",,,,,0324721X,,ACCYD,,"English","Acta Cybern",Article,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-84955457997
"Méndez-Porras A., Nieto Hidalgo M., García-Chamizo J.M., Jenkins M., Porras A.M.","56355200300;56035684000;6507610499;23094218000;57027423000;","A top-down design approach for an automated testing framework",2015,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","9454",,,"37","49",,2,"10.1007/978-3-319-26401-1_4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84952312195&doi=10.1007%2f978-3-319-26401-1_4&partnerID=40&md5=a1716dd50a99f264dbf8c7c0c1cd9b03","Department of Computer Science, Costa Rica Institute of Technology, Cartago, Costa Rica; Department of Computer Technology, University of Alicante, Alicante, Spain; Center for ICT Research, University of Costa Rica, San Pedro, Costa Rica","Méndez-Porras, A., Department of Computer Science, Costa Rica Institute of Technology, Cartago, Costa Rica, Center for ICT Research, University of Costa Rica, San Pedro, Costa Rica; Nieto Hidalgo, M., Department of Computer Technology, University of Alicante, Alicante, Spain; García-Chamizo, J.M., Department of Computer Technology, University of Alicante, Alicante, Spain; Jenkins, M., Center for ICT Research, University of Costa Rica, San Pedro, Costa Rica; Porras, A.M., Center for ICT Research, University of Costa Rica, San Pedro, Costa Rica","Mobile applications have become popular work tools. Portability and ease of Internet connectivity are characteristics that favor this adoption. However, mobile applications sometimes incorrectly process events associated with the user-interaction features. These features include content presentation or navigation. Rotating the devices, and gestures such as scroll or zoom into screens are some examples. There is a need to assess the quality with which mobile applications are processing these user-interaction features in order to improve their performance. In this paper, we present a top-down design approach for an automated testing framework for mobile applications. Our framework integrates digital image processing, GUI information, and historical bug information to identify new bugs based on user-interaction features. Our framework captures images before and after applying the user-interaction features and uses the SURF algorithm to identify interest points in each image. We compared interest points to note differences on the screens before and after applying the user-interaction features. This differences helps to find bugs in mobile applications. The first results show that it is feasible to identify bugs with user-interaction features using the proposed technique. © Springer International Publishing Switzerland 2015.","Automated testing; Historical bug information; Interest points; Mobile applications; Top-down design; User-interaction features","Artificial intelligence; Automation; Image processing; Mobile computing; Mobile telecommunication systems; Automated testing; Historical bug information; Interest points; Mobile applications; Top down design; User interaction; Ubiquitous computing",,,,,"Ministerio de Ciencia Tecnología y Telecomunicaciones, MICITT","This research was supported by the Costa Rican Ministry of Science, Technology and Telecommunications (MICITT).",,"Dhanapal, K., Deepak, K., Sharma, S., Joglekar, S., Narang, A., Vashistha, A., Salunkhe, P., Paul, S., An innovative system for remote and automated testing of mobile phone applications (2012) Annual SRII Global Conference, pp. 44-54. , SRII; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) 2012 7Th International Workshop on Automation of Software Test, AST 2012 - Proceedings, pp. 29-35; Wang, Z., Elbaum, S., Rosenblum, D., Automated generation of context-aware tests (2007) 29Th International Conference on Software Engineering, 2007, ICSE 2007, pp. 406-415; Amalfitano, D., Fasolino, A., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) Proceedings - IEEE 6Th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013, pp. 126-133; Ham, H.K., Park, Y.B., Mobile application compatibility test system design for android fragmentation (2011) ASEA 2011. CCIS, 257, pp. 314-320. , In: Kim, T., Adeli, H., Kim, H., Kang, H., Kim, K.J., Kiumi, A., Kang, B.-H. (eds.), Springer, Heidelberg; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) ICCET 2010–2010 International Conference on Computer Engineering and Technology, Proceedings, 2, pp. V2297-V2301; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote ui testing on android (2012) Proceedings of the 11Th International Conference on Mobile and Ubiquitous Multimedia, MUM 2012; Lu, L., Hong, Y., Huang, Y., Su, K., Yan, Y., Activity page based functional test automation for android application (2012) Proceedings of the 2012 3Rd World Congress on Software Engineering, WCSE 2012, pp. 37-40; Méndez-Porras, A., Quesada-López, C., Jenkins, M., Automated testing of mobile applications: A systematic map and review (2015) XVIII Ibero-American Conference on Software Engineering, Lima-Peru, pp. 195-208. , April; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) 2013 9Th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2013 - Proceedings, pp. 224-234; Amalfitano, D., Fasolino, A., Tramontana, P., Ta, B., (2014) Memon, A.: Mobiguitar - a Tool for Automated Model-Based Testing of Mobile Apps PP, p. 1; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) ACM SIGPLAN Not, 48 (10), pp. 641-660; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) ACM SIGPLAN Not, 48 (10), pp. 623-639; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications (2013) FASE 2013 (ETAPS 2013). LNCS, 7793, pp. 250-265. , Cortellessa, V., Varró, D. (eds.), Springer, Heidelberg; García-Chamizo, J.M., Nieto-Hidalgo, M., (2015) Formalización Algebraica Del método De Arriba Hacia Abajo De dise´no tecnológico, , Departamento de Tecnologá Informática y Computación, Universidad de Alicante; Zaeem, R., Prasad, M., Khurshid, S., Automated generation of oracles for testing user-interaction features of mobile apps (2014) Proceedings - IEEE 7Th International Conference on Software Testing, Verification and Validation, ICST 2014, pp. 183-192; Bay, H., Tuytelaars, T., Van Gool, L., SURF: Speeded up robust features (2006) ECCV 2006, Part I. LNCS, 3951, pp. 404-417. , In: Leonardis, A., Bischof, H., Pinz, A. (eds.), Springer, Heidelberg","Méndez-Porras, A.; Department of Computer Science, Costa Rica; email: amendez@itcr.ac.cr","Garcia-Chamizo J.M.Fortino G.Ochoa S.F.","","Springer Verlag","9th International Conference on Ubiquitous Computing and Ambient Intelligence, UCAmI 2015","1 December 2015 through 4 December 2015",,159259,03029743,9783319264004,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84952312195
"Salvesen K., Galeotti J.P., Gross F., Fraser G., Zeller A.","56957984800;12646413700;55320083800;9247521200;7007015864;","Using Dynamic Symbolic Execution to Generate Inputs in Search-Based GUI Testing",2015,"Proceedings - 8th International Workshop on Search-Based Software Testing, SBST 2015",,, 7173588,"32","35",,7,"10.1109/SBST.2015.15","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84946896754&doi=10.1109%2fSBST.2015.15&partnerID=40&md5=0590af5683481967fa993e6dfdbc2e2a","Computer Science, Saarland University, Germany; Dep. of Computer Science, University of Sheffield, United Kingdom","Salvesen, K., Computer Science, Saarland University, Germany; Galeotti, J.P., Computer Science, Saarland University, Germany; Gross, F., Computer Science, Saarland University, Germany; Fraser, G., Dep. of Computer Science, University of Sheffield, United Kingdom; Zeller, A., Computer Science, Saarland University, Germany","Search-based testing has been successfully applied to generate complex sequences of events for graphical user interfaces (GUIs), but typically relies on simple heuristics or random values for data widgets like text boxes. This may greatly reduce the effectiveness of test generation for applications which expect specific input values to be entered in their GUI by users. Generating such specific input values is one of the virtues of dynamic symbolic execution (DSE), but DSE is less suitable to generate sequences of events. Therefore, this paper describes a hybrid approach that uses search-based testing to generate sequences of events, and DSE to build input data for text boxes. This is achieved by replacing standard widgets in a system under test with symbolic ones, allowing us to execute GUIs symbolically. In this paper, we demonstrate an extension of the search-based GUI testing tool EXSYST, which uses DSE to successfully increase the obtained code coverage on two case study applications. © 2015 IEEE.",,"Graphical user interfaces; Model checking; User interfaces; Complex sequences; Dynamic symbolic executions; Graphical user interface (GUIs); Hybrid approach; Search-based testing; Simple heuristics; System under test; Test generations; Software testing",,,,,"295261",,,"Memon, A.M., An event-flow model of gui-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , http://dx.doi.org/10.1002/stvr.v17:3, Sep.. [Online]. Available; Myers, B.A., User interface software tools (1995) ACM Trans. Comput.-Hum. Interact., 2 (1), pp. 64-103. , http://doi.acm.org/10.1145/200968.200971, Mar.. [Online]. Available; Anderson, S., (2013) Gui Testing, , http://www.inf.ed.ac.uk/teaching/courses/st/2013-14/12guitesting.pdf, [Online; accessed 28-November-2014]; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 408-418. , http://dx.doi.org/10.1109/ICSE.2009.5070540, ser. ICSE '09. Washington, DC, USA: IEEE Computer Society,. [Online]. Available; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, Management, and Performance, , Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc; Tools, A., (2014) Ui/application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html, [Online; accessed 28-November-2014]; Holmes, A., Kellogg, M., Automating functional tests using selenium (2006) Agile Conference, 2006, pp. 6-275. , July; Nguyen, B., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2013) Automated Software Engineering, pp. 1-41. , http://dx.doi.org/10.1007/s10515-013-0128-9, [Online]. Available; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis, pp. 67-77. , ser. ISSTA '12. New York, NY, USA: ACM; Fraser, G., Arcuri, A., Whole test suite generation (2013) IEEE Transactions on Software Engineering, 39 (2), pp. 276-291; Sen, K., Marinov, D., Agha, G., Cute: A concolic unit testing engine for c (2005) Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 263-272. , http://doi.acm.org/10.1145/1081706.1081750, ser. ESEC/FSE-13. New York, NY, USA: ACM,. [Online]. Available; Godefroid, P., Klarlund, N., Sen, K., Dart: Directed automated random testing (2005) Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 213-223. , http://doi.acm.org/10.1145/1065010.1065036, ser. PLDI '05. New York, NY, USA: ACM,. [Online]. Available; Galeotti, J.P., Fraser, G., Arcuri, A., Improving search-based test suite generation with dynamic symbolic execution (2013) 2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE), pp. 360-369; Galeotti, J., Fraser, G., Arcuri, A., Extending a search-based test generator with adaptive dynamic symbolic execution (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 421-424. , http://doi.acm.org/10.1145/2610384.2628049, ser. ISSTA 2014. New York, NY, USA: ACM,. [Online]. Available; Ganov, S., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing gui applications (2009) Proceedings of the 11th International Conference on Formal Engineering Methods: Formal Methods and Software Engineering, pp. 69-87. , http://dx.doi.org/10.1007/978-3-642-10373-54, ser. ICFEM '09. Berlin, Heidelberg: Springer-Verlag,. [Online]. Available; Arlt, S., Borromeo, P., Schäf, M., Podelski, A., Parameterized gui tests (2012) ICTSS, pp. 247-262; (2014) The Java Tutorials: The Event Dispatch Thread, , https://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html, [Online; accessed 12-December-2014]; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 67-77. , http://doi.acm.org/10.1145/2483760.2483777, ser. ISSTA 2013. New York, NY, USA: ACM, [Online]. Available; Inkumsah, K., Xie, T., Improving structural testing of object-oriented programs via integrating evolutionary testing and symbolic execution (2008) ASE'08: Proc. of the 23rd IEEE/ACM Int. Conference on Automated Software Engineering, pp. 297-306; Baars, A., Harman, M., Hassoun, Y., Lakhotia, K., McMinn, P., Tonella, P., Vos, T., (2011) Symbolic Search-based Testing; Malburg, J., Fraser, G., Combining search-based and constraint-based testing (2011) Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering, pp. 436-439. , http://dx.doi.org/10.1109/ASE.2011.6100092, ser. ASE '11. Washington, DC, USA: IEEE Computer Society,. [Online]. Available; Harman, M., Jia, Y., Langdon, W.B., Strong higher order mutationbased test data generation (2011) Symposium on the Foundations of Software Engineering (FSE), pp. 212-222",,,"ACM Special Interest Group on Software Engineering (SIGSOFT);IEEE Computer Society Technical Council on Software Engineering (TCSE)","Institute of Electrical and Electronics Engineers Inc.","8th International Workshop on Search-Based Software Testing, SBST 2015","18 May 2015 through 19 May 2015",,115833,,9781479919345,,,"English","Proc. - Int. Workshop Search-Based Softw. Test., SBST",Conference Paper,"Final","",Scopus,2-s2.0-84946896754
"Griebe T., Hesenius M., Gruhn V.","17834438600;55249675400;7003995554;","Towards automated UI-tests for sensor-based mobile applications",2015,"Communications in Computer and Information Science","532",,,"3","17",,10,"10.1007/978-3-319-22689-7_1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84945938469&doi=10.1007%2f978-3-319-22689-7_1&partnerID=40&md5=573a4741d18024e1ed31b659a03cc019","Paluno - The Ruhr Institute for Software Technology, University of Duisburg-Essen, Gerlingstr. 16, Essen, 45127, Germany","Griebe, T., Paluno - The Ruhr Institute for Software Technology, University of Duisburg-Essen, Gerlingstr. 16, Essen, 45127, Germany; Hesenius, M., Paluno - The Ruhr Institute for Software Technology, University of Duisburg-Essen, Gerlingstr. 16, Essen, 45127, Germany; Gruhn, V., Paluno - The Ruhr Institute for Software Technology, University of Duisburg-Essen, Gerlingstr. 16, Essen, 45127, Germany","Mobile devices changed human-computer interaction, caused the need for specialized software engineering methods and created new business opportunities. The mobile app market is highly competitive and software developers need to maintain high software quality standards for long-lasting economic success. While powerful software development kits support developers in creating mobile applications, testing them is still cumbersome, time-consuming and error-prone. Especially interaction methods depending on sensor input like device motion gestures prevent automated UI testing – developers and testers are forced to manually test all different aspects. We present an approach to integrate sensor information into user acceptance tests and use a sensor simulation engine to enable automatic test case execution for mobile applications. © Springer International Publishing Switzerland 2015.","Mobile applications; Sensor simulation; Software engineering; Test automation; Testing","Application programs; Automation; Computer software; Computer software selection and evaluation; Human computer interaction; Mobile computing; Mobile devices; Mobile telecommunication systems; Software design; Software engineering; Software testing; Testing; Business opportunities; Mobile applications; Sensor informations; Sensor Simulations; Software development kit; Software quality standards; Specialized software; Test Automation; Acceptance tests",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of android applications (2012) Proceedings of the 27Th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 258-261. , ACM, New York; Bo, J., Xiang, L., Xiaopeng, G., MobileTest: A tool supporting automatic black box test for software on smart mobile devices (2007) AST 2007 Proceedings of the Second International Workshop on Automation of Software Test, 8p. , IEEE Computer Society, Washington; Choi, W., Necula, G., Sen, K., Guided GUI testing of android apps with minimal restart and approximate learning (2013) Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and Applications, OOPSLA 2013, pp. 623-640. , ACM, New York; Haller, K., Mobile testing (2013) SIGSOFT Softw. Eng. Notes, 38 (6), pp. 1-8; Hesenius, M., Griebe, T., Gries, S., Gruhn, V., Automating UI tests for mobile applications with formal gesture descriptions (2014) Proceedings of the 16Th International Conference on Human-Computer Interaction with Mobile Devices and Services, Mobilehci 2014, pp. 213-222. , ACM, New York; Hesenius, M., Griebe, T., Gruhn, V., Towards a behavior-oriented specification and testing language for multimodal applications (2014) Proceedings of the 2014 ACM SIGCHI Symposium on Engineering Interactive Computing Systems, EICS 2014, pp. 117-122. , ACM, New York; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) Proceedings of the 6Th Internationalworkshop on Automation of Software Test, AST 2011, pp. 77-83. , ACM, New York; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote UI testing on android (2012) Proceedings of the 11Th International Conference on Mobile and Ubiquitous Multimedia, MUM 2012, pp. 1-4. , ACM, New York; Khandkar, S.H., Sohan, S.M., Sillito, J., Maurer, F., Tool support for testing complex multi-touch gestures (2010) ACM International Conference on Interactive Tabletops and Surfaces, ITS 2010, pp. 59-68. , ACM, New York; She, S., Sivapalan, S., Warren, I., Hermes: A tool for testing mobile device applications (2009) ASWEC 2009 Proceedings of the 2009 Australian Software Engineering Conference, pp. 121-130. , IEEE Computer Society, Washington; Tassey, G., (2002) The Economic Impacts of Inadequate Infrastructure for Software Testing, , Technical report, National Institute of Standards and Technology; Wynne, M., Hellesoy, A., (2012) The Cucumber Book: Behaviour-Driven Development for Testers and Developers, , Pragmatic Bookshelf, Dallas","Griebe, T.; Paluno - The Ruhr Institute for Software Technology, Gerlingstr. 16, Germany; email: tobias.griebe@paluno.uni-due.de","Fujita H.Guizzi G.","","Springer Verlag","14th International Conference on New Trends in Intelligent Software Methodology, Tools, and Techniques, SoMeT 2015","15 September 2015 through 17 September 2015",,140719,18650929,9783319226880,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84945938469
"Vanhatupa J.-M., Heikkinen M.","37017878500;56879951000;","Automatizing Android unit and user interface testing",2015,"Lecture Notes in Business Information Processing","212",,,"373","374",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942768650&partnerID=40&md5=4bf0b5f8619116ff7edc4f311ce387f7","Packet Video Finland Oy, Hallituskatu 8, Tampere, FI-33200, Finland","Vanhatupa, J.-M., Packet Video Finland Oy, Hallituskatu 8, Tampere, FI-33200, Finland; Heikkinen, M., Packet Video Finland Oy, Hallituskatu 8, Tampere, FI-33200, Finland","In this paper we describe our efforts moving towards automatized testing in Android application development. With sophisticated combination of Android development tools and Perl scripts, we have automatized parts of the testing produce. Using the built system, unit tests are built and run automatically each time when a new build is created. In addition, we are automatizing user interface testing using Android uiautomator tool. In this automatization process we encountered several technical issues, for which Android development tools do not offer ready-made solutions, and we had to implement solutions for those. © Springer International Publishing Switzerland 2015.","Android; Graphical user interface testing; Test automation","Android (operating system); Computer programming; Graphical user interfaces; Software design; Software engineering; Android; Android applications; Development tools; Interface testings; New builds; Perl scripts; Test Automation; Unit tests; User interfaces",,,,,,,,"Joorabchi, M.E., Mesbah, A., Kruchten, P., Real Challenges in Mobile App Development (2013) Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement., pp. 15-24. , EEE Computer Society; http://twonky.com/product/beam/; http://developer.android.com/tools/testing/testingui.html; Wasserman, A.I., Software Engineering Issues for Mobile Application Development (2010) Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research, pp. 397-400. , ACM",,"Dingsoyr T.Lassenius C.Paasivaara M.","Aalto University;Ericsson;et al;Nitor;Nokia;Reaktor","Springer Verlag","16th International Conference on Agile Software Development, XP 2015","25 May 2015 through 29 May 2015",,142639,18651348,9783319186115,,,"English","Lect. Notes Bus. Inf. Process.",Conference Paper,"Final","",Scopus,2-s2.0-84942768650
"Habibi E., Mirian-Hosseinabadi S.-H.","56862013100;24344603600;","Event-driven web application testing based on model-based mutation testing",2015,"Information and Software Technology","67",,,"159","179",,8,"10.1016/j.infsof.2015.07.003","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942032277&doi=10.1016%2fj.infsof.2015.07.003&partnerID=40&md5=1a5f8c8a7c3aa293c15bd6541a8fc042","Sharif University of Technology, Computer Engineering Department, Tehran, Iran","Habibi, E., Sharif University of Technology, Computer Engineering Department, Tehran, Iran; Mirian-Hosseinabadi, S.-H., Sharif University of Technology, Computer Engineering Department, Tehran, Iran","Context Event-Driven Software (EDS) is a class of software whose behavior is driven by incoming events. Web and desktop applications that respond to user-initiated events on their Graphical User Interface (GUI), or embedded software responding to events and signals received from the equipment in its operating environment are examples of EDS. Testing EDS poses great challenges to software testers. One of these challenges is the need to generate a huge number of possible event sequences that could sufficiently cover the EDS's state space. Objective In this paper, we introduce a new six-stage testing procedure for event-driven web applications to overcome EDS testing challenges. Method The stages of the testing procedure include dividing the application based on its structure, creating functional graphs for each section, creating mutants from functional graphs, choosing coverage criteria to produce test paths, merging event sequences to make longer ones, and deriving and running test cases. We have analyzed our proposed testing procedure with the help of four metrics consisting of Fault Detection Density (FDD), Fault Detection Effectiveness (FDE), Mutation Score, and Unique Fault. Results Using this procedure, we have prepared prioritized test cases and also discovered a list of unique faults by running the suggested test cases on a sample real-world web application called Academic E-mail System. Conclusion We propose that our suggested testing procedure has some advantages such as creating functional graphs with requirements document, resolving the problem of removing infeasible test cases with these graphs and conditions on the ""add edge"" operator before creating mutants. But the suggested testing procedure, like any other method, had some drawbacks. Because most of the stages in the approach were performed manually, the testing time was increased. © 2015 Elsevier B.V.","Event; Event-driven software; Functional graph; Mutation analysis; Test case generation; Web application","Application programs; Fault detection; Graphic methods; Graphical user interfaces; Real time systems; Social networking (online); Testing; User interfaces; World Wide Web; Event; Event-driven softwares; Functional graphs; Mutation analysis; Test case generation; WEB application; Software testing",,,,,"Sharif University of Technology","We would like to thank Mr. A. Jalali for guidance and editing and Dr. L. Habibi for her help on formatting. This research has been supported by a Grant from Sharif University of Technology – Iran.",,"Ding, X.L., Ding, C., Hou, Y.H., An approach to event-driven software testing (2002) Trans. Tianjin Univ., 8 (4), pp. 265-268; Lee, K.D., (2010) Python Programming Fundamentals, , Springer; Atif, M., Memon, Developing testing techniques for event-driven pervasive computing applications (2004) Proceedings of the OOPSLA 2004 Workshop on Building Software for Pervasive Computing (BSPC 2004); Li, P., Huynh, T., Reformat, M., Miller, J., A practical approach to testing GUI systems (2007) Empirical Softw. Eng., 12 (4), pp. 331-357; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157; Pargas, R.P., Harrold, M.J., Peck, R.R., Test-data generation using genetic algorithms (1999) Softw. Test. Verif. Reliab., 9 (4), pp. 263-282; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study (2006) Softw. Test. Verif. Reliab., 16 (1), pp. 3-32; Herbold, S., Grabowski, J., Waack, S., A model for usage-based testing of event-driven software (2011) 5th International Conference on Secure Software Integration & Reliability Improvement Companion (SSIRI-C), 2011, pp. 172-178. , IEEE; Herbold, S., (2012) Usage-based Testing of Event-driven Software, , PhD diss., Niedersächsische Staats-und Universitätsbibliothek Göttingen; Herbold, S., Harms, P., AutoQUEST-automated quality engineering of event-driven software (2013) IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), 2013, pp. 134-139. , IEEE; Tonella, P., Ricca, F., Statistical testing of web applications (2004) J. Softw. Maintenance Evol.: Res. Pract., 16 (1-2), pp. 103-127; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Trans. Softw. Eng., 36 (1), pp. 81-95; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) 29th International Conference on Software Engineering, 2007, pp. 396-405. , ICSE 2007 IEEE; Isabella, A., Retna, E., (2012) Study Paper on Test Case Generation for GUI Based Testing, , Available from preprint arXiv:1202.4527; Yuan, X., Cohen, M.B., Memon, A.M., Towards dynamic adaptive automated test generation for graphical user interfaces (2009) International Conference on Software Testing, Verification and Validation Workshops, 2009, pp. 263-266. , ICSTW'09 IEEE; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol. (TOSEM), 18 (2), p. 7; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007) Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering, pp. 405-408. , ACM; Yilmaz, C., Cohen, M.B., Porter, A.A., Covering arrays for efficient fault characterization in complex configuration spaces (2006) IEEE Trans. Softw. Eng., 32 (1), pp. 20-34; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. Softw. Eng., 37 (4), pp. 559-574; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Third International Conference on Software Testing, Verification and Validation (ICST), 2010, pp. 245-254. , IEEE; Jhamb, M., Singhal, A., Bansal, A., A survey on different approaches for efficient mutation testing (2013) Int. J. Sci. Res. Publ., 4 (3), p. 513; Offutt, A.J., A practical system for mutation testing: Help for the common programmer (1994) Proceedings of the International Test Conference, 1994, pp. 824-830. , IEEE; Ammann, P., Offutt, J., (2008) Introduction to Software Testing, , Cambridge University Press; Beyazit, M., Sebastian Deistler, T., Gökçe, N., (2010) Event-based Mutation Testing Vs. State-based Mutation Testing-comparison Using A Web-based System. Modellbasiertes Testen und Testautomatisierung (MOTES 2010), pp. 327-332. , GI Jahrestagung (2), Lecture Notes in Informatics, Gesellschaft für Informatik; Belli, F., Beyazit, M., Event-based mutation testing vs. State-based mutation testing-an experimental comparison (2011) 2011 IEEE 35th Annual Computer Software and Applications Conference (COMPSAC), pp. 650-655. , IEEE; Belli, F., Beyazit, M., A formal framework for mutation testing (2010) Fourth International Conference on Secure Software Integration and Reliability Improvement (SSIRI), 2010, pp. 121-130. , IEEE; Brahma, S., Punganti, A., Pattanaik, P.K., Prasad, S., Mall, R., Model-based mutation testing of object-oriented programs (2010) 2nd International Conference on It & Business Intelligence, 32. , IEEE; Aichernig, B.K., Lorber, F., Ničković, D., Time for mutants - Model-based mutation testing with timed automata (2013) Tests and Proofs, pp. 20-38. , Springer Berlin Heidelberg; Belli, F., Hollmann, A., Padberg, S., Communication sequence graphs for mutation-oriented integration testing (2009) Third IEEE International Conference on Secure Software Integration and Reliability Improvement, 2009, pp. 387-392. , SSIRI 2009 IEEE; Okin, J.R., (2005) The Information Revolution: The Not-for-Dummies Guide to the History, Technology, and Use of the World Wide Web, , Ironbound Pr; Paulson, L.D., Building rich web applications with Ajax (2005) Computer, 38 (10), pp. 14-17; (2013) Dynamic Web Pages, , http://en.wikipedia.org/wiki/Dynamic_web_page, Wikipedia; Rothermel, G., Untch, R.H., Chu, C., Harrold, M.J., Test case prioritization: An empirical study (1999) Proceedings of the IEEE International Conference on Software Maintenance, 1999, pp. 179-188. , ICSM'99 IEEE; Konda, K.R., Measuring defect removal accurately (2005) Softw. Test Perform., 2 (6), pp. 35-39; Roongruangsuwan, S., Daengdej, J., A test case prioritization method with practical weight factors (2010) J. Softw. Eng., 4, pp. 193-214; Farrell, J., Nezlek, G.S., Rich internet applications the next stage of application development (2007) 29th International Conference on Information Technology Interfaces, 2007, pp. 413-418. , ITI 2007 IEEE; Bozzon, A., Comai, S., Fraternali, P., Carughi, G.T., Conceptual modeling and code generation for rich internet applications (2006) Proceedings of the 6th International Conference on Web Engineering, pp. 353-360. , ACM; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Trans. Softw. Eng., 37 (1), pp. 48-64","Mirian-Hosseinabadi, S.-H.; Department of Computer Engineering, Sharif University of Technology, CE New Building, Azadi Ave., Iran",,,"Elsevier",,,,,09505849,,ISOTE,,"English","Inf Software Technol",Conference Paper,"Final","",Scopus,2-s2.0-84942032277
"Rauf A., A. Aleisa E.","57194106980;56755547500;","PSO based Automated Test Coverage Analysis of Event Driven Systems",2015,"Intelligent Automation and Soft Computing","21","4",,"491","502",,7,"10.1080/10798587.2014.966479","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84938556686&doi=10.1080%2f10798587.2014.966479&partnerID=40&md5=73a59057cbf32b197a89927615e4bf2c","Department of Computer Science, College of Computer & Information Sciences, Al-Imam Mohammad Ibn Saud Islamic University (IMSIU), Riyadh, KSA, Saudi Arabia","Rauf, A., Department of Computer Science, College of Computer & Information Sciences, Al-Imam Mohammad Ibn Saud Islamic University (IMSIU), Riyadh, KSA, Saudi Arabia; A. Aleisa, E., Department of Computer Science, College of Computer & Information Sciences, Al-Imam Mohammad Ibn Saud Islamic University (IMSIU), Riyadh, KSA, Saudi Arabia","Graphical User Interface (GUI, pronounced sometimes as gooey as well) was first developed in 1981 and has become an essence for today's computing. A GUI contains graphical objects having certain distinct values which can be used to determine the state of the GUI at any time. Developing organizations always desire to thoroughly test the software to get maximum confidence about its quality, but this requires gigantic effort to test a GUI application due to complexity involve in such applications. This problem has led to automate GUI testing and different techniques have been proposed for automated GUI Testing. Event-flow graph is a fresh breach in the field of automated GUI testing. As control-flow graph, another GUI model represents all possible execution paths in a program; in the same way, event-flow model represents all promising progressions of events that can be executed on the GUI. Another challenging question in software testing is, how much testing is enough? There are few measures that can be used to provide guidance on the quality of an automatic test suite as development proceeds. Particle swarm optimization (PSO) algorithm searches for best possible test parameter combinations that are according to some predefined test criterion. Usually this test criterion corresponds a “coverage function” that measures how much of the automatically generated optimization parameters satisfies the given test criterion. In this paper, we have tried to exploit event driven nature of GUI. Based on this nature, we have presented a GUI testing and coverage analysis technique based on PSO. © 2015, TSI® Press.","Automation testing; Coverage analysis; Coverage criterion; Event flow; GUI testing; Particle swarm optimization; Test data generation; Test path",,,,,,,,,"Bertolino, A., Software testing forever: Old and new processes and techniques for validating today's applications 9th International Conference Product-Focused Software Process Improvement (PROFES 2008), , Monte Porzio Catone, June 2008, LNCS 5089, 2008; Harroled, M., Testing: A roadmap (2000) In proceedings of the 22nd international conference on the future of software engineering, pp. 63-72. , Limerick, Ireland: IEEE Computer Society/ACM Press; Memon, A.M., An event-flow model of GUI-based applications for testing: Research articles (2007) Software Testing, Verification and Reliability, 17 (3</–insert>), pp. 137-157; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2); Afzal, W., Torkar, R., Feldt, R., A systematic review of search-based testing for non-functional system properties (2009) Information and Software Technology, 51 (6</–insert>), pp. 957-976. , http://dx.doi.org/10.1016/j.infsof.2008.12.005; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) 21st International Conference on Software Engineering, pp. 257-266. , May 1999, New York: ACM Press; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACMSIGSOFT 8th International symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , 8–10 November 2000, New York: ACM Press; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , September 2001, New York: ACM Press; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), pp. 118-127. , September 2003, New York: ACM Press; Jones, B.F., Eyres, D.E., Sthamer, H.H., A strategy for using genetic algorithms to automate branch and fault-based testing (1998) The Computer Journal, 41 (2), pp. 98-107; Jones, B.F., Sthamer, H.H., Eyres, D.E., Automatic structural testing using genetic algorithms (1996) The Software Engineering Journal, 11 (5), pp. 299-306; Michael, C., McGraw, G., Schatz, M., Generating software test data by evolution (2001) IEEE Transactions on Software Engineering, 27 (12), pp. 1085-1110; Pargas, R.P., Harrold, M.J., Peck, R.R., Test-data generation using genetic algorithms (1999) Journal of Software Testing, Verification and Reliability, 9 (4), pp. 263-282; Tracey, N., Clark, J., Mander, K., McDermid, J., Automated test-data generation for exception conditions (2000) Software: Practice and Experience, 30 (1), pp. 61-79; Ganov, S., Killmar, C., Khurshid, S., Perry, D., (2008) Test generation for graphical user interfaces based on symbolic execution, , Third International Workshop on Automation of Software Testing (AST), Leipzig, Germany; Paiva, A.C., Faria, J.C., Vidal, R.F., Vidal: Towards the integration of visual and formal models for GUI testing (2007) Electronic Notes in Theoretical Computer Science, 190 (2), pp. 99-111; Rauf, A., Anwar, S., Jaffar, A., Shahid, A.A., Automated GUI test coverage analysis using GA, , 2010 Seventh International Conference on Information Technology (ITNG 2010) to be held 12–14 April 2010 in Las Vegas, Nevada, USA; Kennedy, J., Eberhart, C., A discrete binary version of the particle swarm algorithm (1997) Proceedings of the World Multiconferenceon Systemics, Cybernetics and Informatics, pp. 4104-4109; Laskari, E.C., Parsopoulos, K.E., Vrahatis, M.N., Particle swarm optimization for integer programming (2002) Proceedings of the IEEE Congress on Evolutionary Computation, pp. 1582-1587. , May, IEEE Press; Schoofs, L., Naudts, B., Swarm intelligence on the binary constraint satisfaction problem (2002) IEEE Congress on Evolutionary Computation, pp. 1444-1449. , May, IEEE Press; Korel, B., Automated software test data generation (1990) IEEE Transactions on Software Engineering, 16 (8), pp. 870-879",,,,"Taylor and Francis Inc.",,,,,10798587,,,,"English","Intell. Autom. Soft Comp.",Article,"Final","",Scopus,2-s2.0-84938556686
"Straszak T., Śmiałek M.","8925163200;8691503900;","Model-driven acceptance test automation based on use cases",2015,"Computer Science and Information Systems","12","2",,"707","728",,5,"10.2298/CSIS141217033S","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84937564070&doi=10.2298%2fCSIS141217033S&partnerID=40&md5=8fd576877147f13e47a809bac4881a40","Warsaw University of Technology, Warsaw, Poland","Straszak, T., Warsaw University of Technology, Warsaw, Poland; Śmiałek, M., Warsaw University of Technology, Warsaw, Poland","Acceptance testing is highly dependent on the formulation of requirements, as the final system is tested against user requirements. It is thus highly desirable to be able to automate transition from requirements to acceptance tests. In this paper we present a model-driven approach to this issue, where detailed use case models are transformed into test cases. Importantly, our approach facilitates synchronising functional test cases with other types of tests (non-functional, domain logic, user interface) and introducing test data. This leads to a unified approach where requirements models of various kind drive the acceptance testing process. This process is parallel to the development process which also involves automatic transformations from requirements models to software development artefacts (models and code). To show validity of the approach we present a case study which uses a new tool called ReDSeT, that transforms requirements formulated in the Requirements Specification Language (RSL) into tests in a newly proposed Test Specification Language (TSL). © 2015 ComSIS Consortium. All rights reserved.","Acceptance testing; Metamodel; Model transformation; Test generation; Use cases",,,,,,,,,"Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (GUI) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694; Beck, K., (2002) Test Driven Development: By Example, , Addison-Wesley; Bertolini, C., Mota, A., A framework for GUI testing based on use case design (2010) Proc. Third International Conference on Software Testing, Verification, and Validation: Workshops, pp. 252-259; Bizerra Junior, E.M., Silva Silveira, D., Lencastre Pinheiro Menezes Cruz, M., Araujo Wanderley, F., A method for generation of tests instances of models from business rules expressed in OCL (2012) Latin America Transactions, IEEE (Revista IEEE America Latina), 10 (5), pp. 2105-2111; Cockburn, A., (2000) Writing Effective Use Cases, , Addison-Wesley; Dalal, S.R., Model-based testing in practice (1999) Proc. 21St International Conference on Software Engineering (ICSE ’99), pp. 285-294. , ACM; Davis, C., Chirillo, D., Gouveia, D., (2009) Software Test Engineering with IBM Rational Functional Tester: The Definitive Resource, , IBM Press; Dyrkorn, K., Wathne, F., Automated testing of non-functional requirements (2008) Companion 23Rd Conference on Object-Oriented Programming Systems Languages and Applications, pp. 719-720. , ACM; El-Attar, M., Miller, J., Developing comprehensive acceptance tests from use cases and robustness diagrams (2010) Requirements Engineering, 15 (3), pp. 285-306; Graham, I.M., Task scripts, use cases and scenarios in object-oriented analysis (1996) Object-Oriented Systems, 3 (3), pp. 123-142; Gutiérrez, J.J., Escalona, M.J., Mejías, M., Torres, J., An approach to generate test cases from use cases (2006) Proc. 6Th International Conference on Web Engineering, pp. 113-114. , ACM; Jacobson, I., Christerson, M., Jonsson, P., Ö Vergaard, G., (1992) Object-Oriented Software Engineering: A Use Case Driven Approach, , Addison-Wesley; Jiang, M., Ding, Z., Automation of test case generation from textual use cases (2011) 4Th International Conference on Interaction Sciences. Pp. 102–107; Kaindl, H., Śmiałek, M., Wagner, P., (2009) Requirements Specification Language Definition, , http://www.redseeds.eu/, Project Deliverable D2.4.2, ReDSeeDS Project; Marciniak, J.J., Shumskas, A., (2002) Encyclopedia of Software Engineering, Chap. Acceptance Testing, , Wiley, 2 edn; Myers, G.J., Sandler, C., Badgett, T., (2011) The Art of Software Testing, , Wiley Publishing, 3 edn; Nebut, C., Fleurey, F., Le Traon, Y., Jézéquel, J.M., Automatic test generation: A use case driven approach (2006) IEEE Transactions on Software Engineering, 32, pp. 140-155; North, D., (2006) Introducing BDD, , Better Software Magazine; Nowakowski, W., Śmiałek, M., Ambroziewicz, A., Straszak, T., Requirements-level language and tools for capturing software system essence (2013) Computer Science and Information Systems, 10 (4), pp. 1499-1524; Shirole, M., Kumar, R., UML behavioral model based test case generation: A survey (2013) SIGSOFT Softw. Eng. Notes, 38 (4), pp. 1-13; Śmiałek, M., Bojarski, J., Nowakowski, W., Ambroziewicz, A., Straszak, T., Complementary use case scenario representations based on domain vocabularies (2007) Lecture Notes in Computer Science, 4735, pp. 544-558. , MODELS’07; Śmiałek, M., Jarzebowski, N., Nowakowski, W., Runtime semantics of use case stories (2012) 2012 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC), pp. 159-162; Śmiałek, M., Jarzebowski, N., Nowakowski, W., Translation of use case scenarios to Java code (2012) Computer Science, 13 (4), pp. 35-52; Śmiałek, M., Kalnins, A., Ambroziewicz, A., Straszak, T., Wolter, K., Comprehensive system for systematic case-driven software reuse (2010) Lecture Notes in Computer Science, 5901, pp. 697-708. , SOFSEM’10; Śmiałek, M., Nowakowski, W., (2015) From Requirements to Java in a Snap: Model-Driven Requirements Engineering in Practice, , Springer; Śmiałek, M., Nowakowski, W., Jarzebowski, N., Ambroziewicz, A., From use cases and their relationships to code (2012) Second IEEE Internationalworkshop on Model-Driven Requirements Engineering, pp. 9-18. , IEEE; Śmiałek, M., Straszak, T., Facilitating transition from requirements to code with the ReDSeeDS tool (2012) 20Th IEEE International Requirements Engineering Conference, pp. 321-322. , IEEE; Somé, S.S., Cheng, X., An approach for supporting system-level test scenarios generation from textual use cases (2008) Proc. 2008 ACM Symposium on Applied Computing, pp. 724-729. , ACM; Steinberg, D., Budinsky, F., Paternostro, M., Merks, E., (2009) EMF: Eclipse Modeling Framework 2.0. Addison-Wesley, , 2 edn; Straszak, T., Śmiałek, M., Automating acceptance testing with tool support (2014) 2014 Federated Conference on Computer Science and Information Systems, pp. 1569-1574; Team, J., Jgralab: The Java Graph Laboratory, , http://jgralab.uni-koblenz.de; Turner, D.A., Park, M., Kim, J., Chae, J., An automated test code generation method for web applications using activity oriented approach (2008) Proc. 23Rd IEEE/ACM International Conference on Automated Software Engineering, pp. 411-414; Testing Profile, U., (2012), (UTP) Version 1.2. Tech. Rep. formal/2013-04-03, Object Management Group; Zander, J., Dai, Z., Schieferdecker, I., Din, G., From U2TP models to executable tests with TTCN-3: An approach to model driven testing (2005) Lecture Notes in Computer Science, 3502, pp. 289-303. , TestCon’05",,,,"ComSIS Consortium",,,,,18200214,,,,"English","Comp. Sci. Info. Sys.",Article,"Final","All Open Access, Gold, Green",Scopus,2-s2.0-84937564070
"Aho P., Suarez M., Memon A., Kanstren T.","35188652400;56241277100;35599876500;18434124300;","Making GUI Testing Practical: Bridging the Gaps",2015,"Proceedings - 12th International Conference on Information Technology: New Generations, ITNG 2015",,, 7113512,"439","444",,8,"10.1109/ITNG.2015.77","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936803779&doi=10.1109%2fITNG.2015.77&partnerID=40&md5=20fb2dbab4aceb5b687885e037e6b005","VTT Technical Research Centre of Finland, Oulu, Finland; University of Maryland, College Park, MD, United States; F-Secure Ltd, Helsinki, Finland","Aho, P., VTT Technical Research Centre of Finland, Oulu, Finland; Suarez, M., VTT Technical Research Centre of Finland, Oulu, Finland; Memon, A., University of Maryland, College Park, MD, United States; Kanstren, T., F-Secure Ltd, Helsinki, Finland","The effort and expertise required for manually crafting the models for model-based testing (MBT) is a major obstacle slowing down its industrial adoption. For implemented and executable systems, there are approaches to automate some part or even the whole process of creating the models for MBT. Recently, using extracted models for testing graphical user interface (GUI) applications has been a popular area of research, but most of the proposed approaches have limitations and restrictions on what can be modeled, and the software industry has not adopted these approaches. In this paper, we try to identify the gaps between the academic approaches and tools and industrial requirements hindering the industrial adoption, and try to suggest practical solutions to the identified gaps. © 2015 IEEE.","Graphical User Interface; GUI test automation; model extraction; model-based testing; reverse engineering","Application programs; Model checking; Reverse engineering; Software engineering; Software testing; User interfaces; Executable systems; Graphical user interfaces (GUI); Industrial adoption; Industrial requirements; Model based testing; Model extraction; Practical solutions; Test Automation; Graphical user interfaces",,,,,,,,"Memon, A.M., An event-flow moDel of GUI-based applications for testing (2007) Software Testing, Verification &reliability, 17 (3), pp. 137-157. , Sep, John Wiley and Sons Ltd. Chichester, UK; Utting, M., Legeard, B., (2006) Practical MoDel-based Testing: A Tools Approach, , Morgan Kaufmann Publishers San Francisco, USA; Holzmann, G.Z., Smith, M.H., An automated verification method for distributed systems software based on MoDel Extraction (2002) IEEE Trans. on Software Engineering, 28 (4), pp. 364-377. , Apr 2002; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI moDels for testing (2010) 5th Iberian Conf. on Information Systems and Tech. (CISTI), pp. 1-6. , 16-19 Jun 2010, Santiago De Compostela, Spain; Aho, P., Suarez, M., Kanstren, T., Memon, A.M., Industrial adoption of automatically extracted GUI moDels for testing Int. Workshop on Experiences and Empirical Studies in Software MoDelling (EESSMod), pp. 49-54. , 1 Oct 2013, Miami, Florida, USA; https://github.com/F-Secure/murphy, Murphy open source tools for automated moDeling and testing of GUI applications; Aho, P., Suarez, M., Kanstren, T., Memon, A.M., Murphy Tools: Utilizing Extracted GUI MoDels for Industrial Software Testing Testing: AcaDemic &industrial Conference-Practice and Research Techniques (TAIC PART), , 4 Apr 2014, Cleveland, OH, USA; Aho, P., Menz, N., Rty, T., Enhancing generated Java GUI moDels with valid test data IEEE Conf. on Open Systems (ICOS), pp. 310-315. , 25-28 Sep 2011, Langawi, Malaysia; Miao, Y., Yang, X., An FSM based GUI test automation moDel 11th Int. Conf. on Control, Automation, Robotics &vision (ICARCV), pp. 120-126. , 7-10 Dec 2010, Singapore; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern WEB applications IEEE Trans. on Software Eng, 38 (1), pp. 35-53. , (Jan-Feb 2012) , IEEE Computer Society; Amalfitano, D., Fasolino, A.R., Polcaro, A., Tramontana, P., The DynaRIA tool for the comprehension of Ajax WEB applications by dynamic analysis Innovations in Systems and Software Eng, , Apr 2013, Springer-Verlag; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S., Imparato, G., A toolset for gui testing of android applications 28th IEEE Int. Conf. on Software Maintenance (ICSM), pp. 650-653. , 23-28 Sep 2012, Trento, Italy; Nguyen, B., Robbins, B., Banerjee, I., Memon, A.M., GUITAR: An innovative tool for automated testing of GUI-driven software Automated Software Eng, 21 (1), pp. 65-105. , (Mar 2013) Springer US; Memon, A.M., Xie, Q., Studying the fault-Detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Software Eng, 31 (10), pp. 884-896. , Oct, IEEE Press, NJ, USA; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications (2005) Proc. 21st IEEE Int. Conf. on Software Maintenance (ICSM'05), pp. 473-482. , Budapest, Hungary, 25-30 Sep; Meinke, K., Walkinshaw, N., MoDel-Based Testing and MoDel Inference 5th Int. Symp. on Leveraging Applications of Formal Methods (ISOLA), pp. 440-443. , 15-18 Oct 2012, Heraklion, Greece; Kanstrn, T., Towards Trace Based MoDel Synthesis for Program UnDerstanding and Test Automation (2007) Proc. Int. Conf. on Software Eng. Advances (ICSEA), pp. 46-55. , 25-31 Aug Cap Esterel, France; Jemmy An Open Source Java Library for GUI Automation, , http://jemmy.java.net; http://msdn.microsoft.com/enus/library/ms747327(v=vs.110aspx), Microsoft UI Automation; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based WEB applications through dynamic analysis of user Interface State Changes ACM Trans. on the Web (TWEB), 6 (1). , (Mar 2012) article no. 3, ACM New York, NY, USA; Memon, A.M., Banerjee, I., Nguyen, B., Robbins, B., The first decade of gui ripping: Extensions, applications, and broader Impacts Proc. 20th Working Conf. on Reverse Engineering (WCRE), pp. 11-20. , 14-17 Oct 2013, Koblenz, Germany; Aho, P., Menz, N., Rty, T., Schieferdecker, I., Automated Java GUI moDeling for moDel-based testing purposes 8th Int. Conf. on Information Technology : New Generations (ITNG), pp. 268-273. , 11-13 Apr 2011, Las Vegas, Nevada, USA; Gross, F., Fraser, G., Zeller, A., Exsyst: Search-based gui testing 2012 34th Int. Conf. on Software Engineering (ICSE 2012), pp. 1423-1426. , 2-9 Jun 2012, Zurich, Switzerland; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-moDel generation of mobile applications Proc. 16th Int. Conf. on Fundamental Approaches to Software Engineering (FASE13), pp. 250-265. , 16-24 Mar 2013, Rome, Italy; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps 2013 ACM SIGPLAN Int. Conf. on Object-Oriented Programming, Systems, Languages &applications (OOPSLA), pp. 641-660. , 26-31 Oct 2013, Indianapolis, USA; Kull, A., Automatic gui model generation: State of the art Proc 2012 IEEE 23rd Int. Symposium on Software Reliability Engineering Workshops (ISSREW), pp. 207-212. , 27-30 Nov 2012, Dallas, TX, USA; Aho, P., Kanstrn, T., Rty, T., Rning, J., Automated extraction of gui models for testing (2014) Advances in Computers, 95, pp. 49-112. , Elsevier Inc; Memon, A.M., Gui testing: Pitfalls and process (2002) Computer, 35 (8), pp. 87-88. , Aug IEEE Computer Society; Strecker, J., Memon, A.M., Accounting for defect characteristics in evaluations of testing techniques ACM Trans. on Software Engineering and Methodology (TOSEM), 21 (3). , (Jun 2012) article no. 17, ACM New York, NY, USA; Yuan, X., Cohen, M., Memon, A.M., Gui interaction testing: Incorporating event context IEEE Trans. on Software Engineering, 37 (4), pp. 559-574. , (Jul-Aug 2011) , IEEE Computer Society; Memon, A.M., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-Driven Software (2004) Proc. 19th IEEE Int. Conf. on Automated Software Engineering (ASE), pp. 186-195. , 20-24 Sep, Linz, Austria; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should i use for effective gui testing? (2003) 18th IEEE Int. Conf. on Automated Software Eng. (ASE), pp. 164-173. , 6-10 Oct, Montreal, Canada; Yang, X., (2011) Graphic User Interface MoDelling and Testing Automation, , PhD thesis Victoria University, Melbourne, Australia, May; Aho, P., Menz, N., Rty, T., Dynamic reverse engineering of gui models for testing Proc. 2013 Int. Conf. on Control, Decision and Information Technologies (CoDIT'13), pp. 441-447. , 6-8 May 2013, Hammamet, Tunisia",,"Latifi S.Carneiro G.Debnath N.Hashemi R.Minamoto T.Arai K.Reddy Y.Saleem K.Vieira Dias L.A.Shen F.Thuemmler C.","HUAWEI TECHNOLOGIES;Premier Hall for Science and Engineering (PHASE)","Institute of Electrical and Electronics Engineers Inc.","12th International Conference on Information Technology: New Generations, ITNG 2015","13 April 2015 through 15 April 2015",,112541,,9781479988273,,,"English","Proc. - Int. Conf. Inf. Technol.: New Gener., ITNG",Conference Paper,"Final","",Scopus,2-s2.0-84936803779
"Rodriguez J., Rodriguez G.D.","57210248963;12780227800;","Automatic generation of GUI test cases using Ant Colony Optimization and Greedy algorithm",2015,"CIBSE 2015 - XVIII Ibero-American Conference on Software Engineering",,,,"209","221",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936098652&partnerID=40&md5=6df5cd98823802686eca4de31b21fc32","Universidad Nacional Mayor de San Marcos, Lima, Peru; Universidad Nacional de Ingenieria, Lima, Peru; Universidad Ricardo Palma, Lima, Peru","Rodriguez, J., Universidad Nacional Mayor de San Marcos, Lima, Peru; Rodriguez, G.D., Universidad Nacional de Ingenieria, Lima, Peru, Universidad Ricardo Palma, Lima, Peru","The increasing complexity of new applications means GUIs are also getting more complex, and generating tests cases manually for them becomes harder. Generating automatic, good quality GUI test cases is a growing concern in application testing. Actions performed by the user on the GUI can be regarded as events, which can be performed in sequences, forming a graph of event sequences, and therefore multiple execution paths or routes, known as test cases, are possible. The quality of a set of test cases is measured by the coverage criteria (all actions or events must be performed at least one time in the set), which depend on the length and partial coverage of each execution path. Finding feasible paths and complying with the coverage criteria is a highly combinatorial problem. For such problems, due to high computing power that it would take to find an exact solution, it is well justified to use heuristics and metaheuristics algorithms, allowing us to find approximate solutions of good quality. Those methods have been successfully used in chemistry, physics, biology, and recently, in software engineering. In this paper, the use of a metaheuristic known as Ant Colony Optimization Algorithm (ACO) for generating test cases is proposed. The ACO metaheuristic has been adapted in order to find individual routes that could lead to a set of test cases of good quality. A individual test, path or route is desirable if it is long (it tests a lot of events or actions) and do not share events (or share few events) with other paths. After a appropiate number of candidate test cases are generated, we express the problem of generating a set of test cases as a set covering problem and then we apply a greedy algorithm to solve it. The result is a set of paths (test cases) with full covering of events with small number of test cases. We present also a problem solved by our method, generating test cases for Windows Wordpad, and discuss the results. Copyright © 2015 by the authors.","Ant colony optimization (ACO); Automated test case generation; Event-flow model; Greedy algorithm; GUI testing; Set covering problems; Shortest path","Ant colony optimization; Artificial intelligence; Factory automation; Graph theory; Graphical user interfaces; Optimization; Software engineering; Ant Colony Optimization (ACO); Automated test case generation; Flow model; Greedy algorithms; GUI testing; Set covering problem; Shortest path; Algorithms",,,,,,,,"Arlt, S., Banerjee, I., Bertolini, C., Memon, A.M., Schäf, M., (2012) Grey-box GUI Testing: Efficient Generation of Event Sequences, , CoRR, abs/1205.4928; Bauersfeld, S., Wappler, S., Wegener, J., An approach to automatic input sequence generation for gui testing using ant colony optimization (2011) Proceedings of the 13th Annual Conference Companion on Genetic and Evolutionary Computation, GECCO '11, pp. 251-252. , New York, NY, USA, ACM; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a gui (2011) Search Based Software Engineering, pp. 1173-1187. , M. Cohen and M. Cinnide, editors, volume 6956 of Lecture Notes in Computer Science, Springer Berlin Heidelberg; Brooks, P., Robinson, B., Memon, A., An initial characterization of industrial graphical user interface systems (2009) Software Testing Verification and Validation, pp. 11-20. , 2009. ICST'09. International Conference on, IEEE; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Trans. Softw. Eng., 4 (3), pp. 178-187. , May; Chvatal, V., A greedy heuristic for the set-covering problem (1979) Mathematics of Operations Research, 4 (3), pp. 233-235; Dorigo, M., Di-Caro, G., Ant colony optimization: A new meta-heuristic (1999) Evolutionary Computation, 2. , 1999. CEC 99. Proceedings of the 1999 Congress on, IEEE; Dorigo, M., Stützle, T., Ant colony optimization: Overview and recent advances (2010) Handbook of Metaheuristics, pp. 227-263; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley Professional; Fujiwara, S., Von-Bochmann, G., Khendek, F., Amalou, M., Ghedamsi, A., Test selection based on finite state models (1991) IEEE Trans. Softw. Eng., 17 (6), pp. 591-603. , June; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test, pp. 77-83. , AST '11, New York, NY, USA, ACM. SET; Maji, A.K., Hao, K., Sultana, S., Bagchi, S., Failures in mobile OSes: A case study with android and symbian (2010) Software Reliability Engineering (ISSRE), pp. 249-258. , Characterizing, 2010 IEEE 21st International Symposium on, pages, IEEE; Memon, A., Pollack, M., Soffa, M., Hierarchical GUI test case generation using automated planning (2001) Software Engineering, IEEE Transactions on, 27 (2), pp. 144-155; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab, 17 (3), pp. 137-157. , Sept; (2003) Mercury Interactive. WinRunner Users Guide Version 7.6, , http://www.cbueche.de/WinRunner\%20User\%20Guide.pdf; Myers, B.A., Rosson, M.B., Survey on user interface programming (1992) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems CHI 1992, , New York, NY, USA, ACM; Pekar, M., (2002) Pounder, , http://pounder.sourceforge.net/; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th International Symposium on Fault-Tolerant Computing (FTCS '97), pp. 80-88. , FTCS '97, Washington, DC, USA, IEEE Computer Society; Wall, T., (2011) Getting Started with the Abbot Java GUI Test Framework, , http://abbot.sourceforge.net/doc/overview.shtml; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, ISSRE '01, pp. 54-63. , Washington, DC, USA, IEEE Computer Society; Young, N.E., Greedy set-cover algorithms (2008) Encyclopedia of Algorithms, , M.-Y. Kao, editor, Springer, SET",,"Matalonga S.Pimentel E.Brito I.S.Araujo J.Miranda J.J.Espana S.Cuadros-Vargas E.Bencomo N.Pastor O.Goulao M.Oliveira T.Condori-Fernandez N.de la Vara J.L.Kalinowski M.Olsina L.Antonelli L.Guizzardi R.","","Ibero-American Conference on Software Engineering","18th Ibero-American Conference on Software Engineering, CIBSE 2015","22 April 2015 through 24 April 2015",,112515,,9789972825804,,,"English","CIBSE - Ibero-Am. Conf. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84936098652
"Mahajan S., Halfond W.G.J.","56405103300;16230282400;","Detection and localization of HTML presentation failures using computer vision-based techniques",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation, ICST 2015 - Proceedings",,, 7102586,"","",,28,"10.1109/ICST.2015.7102586","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935083017&doi=10.1109%2fICST.2015.7102586&partnerID=40&md5=87bd9e918a88c5bb901c50b6ce9436a0","University of Southern California, Los Angeles, CA, United States","Mahajan, S., University of Southern California, Los Angeles, CA, United States; Halfond, W.G.J., University of Southern California, Los Angeles, CA, United States","An attractive and visually appealing appearance is important for the success of a website. Presentation failures in a site''s web pages can negatively impact end users'' perception of the quality of the site and the services it delivers. Debugging such failures is challenging because testers must visually inspect large web pages and analyze complex interactions among the HTML elements of a page. In this paper we propose a novel automated approach for debugging web page user interfaces. Our approach uses computer vision techniques to detect failures and can then identify HTML elements that are likely to be responsible for the failure. We evaluated our approach on a set of real-world web applications and found that the approach was able to accurately and quickly identify faulty HTML elements. © 2015 IEEE.",,"Computer vision; HTML; Human computer interaction; Social networking (online); Software testing; User interfaces; Verification; Automated approach; Computer vision techniques; Detection and localization; End users; Real world web; Websites",,,,,,,,"Cucumber, , http://cukes.info/; Front-end Developers Job Postings, , http://www-scf.usc.edu/?spmahaja/front-end-job-postings/; Real Mockups Experiment, , http://www-scf.usc.edu/?spmahaja/real-mockups-experiment/; Selenium, , http://docs.seleniumhq.org/; Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F., A framework for automated testing of javascript web applications Proceedings of the 33rd International Conference on Software Engineering; Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision Proceedings of the SIGCHI Conference on Human Factors in Computing Systems; Choudhary, S.R., Prasad, M.R., Orso, A., Crosscheck: Combining crawling and differencing to better detect cross-browser incompatibilities in web applications Proceedings of the 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation; Choudhary, S.R., Prasad, M.R., Orso, A., X-pert: Accurate identification of cross-browser issues in web applications Proceedings of the 35th IEEE and ACM SIGSOFT International Conference on Software Engineering (ICSE 2013); Delamaro, M.E., Dos Nunes, S.L.F., De Oliveira, R.A.P., Using concepts of content-based image retrieval to implement graphical testing oracles (2013) Softw. Test. Verif. Reliab., 23, pp. 171-198; Eaton, C., Memon, A.M., An empirical approach to testing web applications across diverse client platform configurations (2007) International Journal on Web Engineering and Technology (IJWET), Special Issue on Empirical Studies in Web Engineering, 3 (3), pp. 227-253; Ester, M., Peter Kriegel, H., Xu, X., (1996) A Density-based Algorithm for Discovering Clusters in Large Spatial Databases with Noise; Guttman, A., R-trees: A dynamic index structure for spatial searching (1984) SIGMOD Rec., 14 (2), pp. 47-57. , June; Liang, H.-S., Kuo, K.-H., Lee, P.-W., Chan, Y.-C., Lin, Y.-C., Chen, M.Y., Seess: Seeing what i broke-visualizing change impact of cascading style sheets (Css) Proceedings of the 26th Annual ACM Symposium on User Interface Software and Technology; Lynch, P.J., Horton, S., (2009) Web Style Guide, 3rd Edition: Basic Design Principles for Creating Web Sites, , Yale University Press, New Haven, CT, USA, 3rd edition; Mahajan, S., Halfond, W.G.J., Finding HTML presentation failures using image comparison techniques (2014) Proceedings of the 29th IEEE/ACM International Conference on Automated Software Engineering (ASE)-New Ideas Track, , September; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of AJAX user interfaces Proceedings of the 31st International Conference on Software Engineering; Newman, M.W., Landay, J.A., Sitemaps, storyboards, and specifications: A sketch of web site design practice Proceedings of the 3rd Conference on Designing Interactive Systems: Processes, Practices, Methods, and Techniques; Ozenc, F.K., Kim, M., Zimmerman, J., Oney, S., Myers, B., How to Support Designers in Getting Hold of the Immaterial Material of Software Proceedings of the SIGCHI Conference on Human Factors in Computing Systems; Roy Choudhary, S., Versee, H., Orso, A., WEBDIFF: Automated identification of cross-browser issues in web applications Proceedings of the 2010 IEEE International Conference on Software Maintenance; Samimi, H., Schäfer, M., Artzi, S., Millstein, T., Tip, F., Hendren, L., Automated repair of HTML generation errors in PHP applications using string constraint solving Proceedings of the 2012 International Conference on Software Engineering; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing web applications (2007) The Intl. Symp. on Software Reliability Engineering; Strecker, J., Memon, A.M., Testing graphical user interfaces (2009) Encyclopedia of Information Science and Technology, Second Ed. IGI Global; Tamm, M., (2009) Fighting Layout Bugs, , https://code.google.com/p/fighting-layout-bugs/, October; Tuch, A.N., Presslaber, E.E., Stöcklin, M., Opwis, K., Bargas-Avila, J.A., The role of visual complexity and prototypicality regarding first impression of websites: Working towards understanding aesthetic judgments (2012) Int. J. Hum.-Comput. Stud., 70 (11). , Nov; Wang, X., Zhang, L., Xie, T., Xiong, Y., Mei, H., Automating presentation changes in dynamic web applications via collaborative hybrid analysis Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering; Xie, Q., Grechanik, M., Fu, C., Cumby, C.M., Guide: A GUI differentiator (2009) ICSM, pp. 395-396; Yee, H., Pattanaik, S., Greenberg, D.P., Spatiotemporal Sensitivity and Visual Attention for Efficient Rendering of Dynamic Environments (2001) ACM Trans. Graph., 20 (1). , Jan",,,"Graz University of Technology (TU Graz);IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","8th IEEE International Conference on Software Testing, Verification and Validation, ICST 2015","13 April 2015 through 17 April 2015",,112251,,9781479971251,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid., ICST - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84935083017
"Alégroth E., Bache G., Bache E.","55843479600;56285870200;24070065700;","On the industrial applicability of TextTest: An empirical case study",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation, ICST 2015 - Proceedings",,, 7102598,"","",,,"10.1109/ICST.2015.7102598","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935061864&doi=10.1109%2fICST.2015.7102598&partnerID=40&md5=8c23bbc505e31bc51a23261aa7ec2cb8","Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden; Evry AB, Olof Asklunds gata 10, Västra Frölunda, 42130, Sweden; Bache Consulting, Flunsäsliden 25, Göteborg, SE-418 71, Sweden","Alégroth, E., Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden; Bache, G., Evry AB, Olof Asklunds gata 10, Västra Frölunda, 42130, Sweden; Bache, E., Bache Consulting, Flunsäsliden 25, Göteborg, SE-418 71, Sweden","Software systems are becoming more complex, not least in their Graphical User Interfaces (GUIs), which presents challenges for existing testing practices. Pressure to reduce time to market leaves less time for manual testing and increases the importance of test automation. Previous research has identified several generations of automated GUI-based test approaches with different cost-benefit tradeoffs. Whilst test automation provides fast quality feedback it can be associated with high costs and inability to identify defects not explicitly anticipated by the test designer. TextTest is a capture-replay tool for GUI-based testing with a novel approach that overcomes several of the challenges experienced with previous approaches. Firstly the tool supports Approval Testing, an approach where ASCII-art representations of the GUI's visual state are used to verify correct application behavior at the system level. Secondly it records and replays test scripts in a user defined domain specific language (DSL) that is readable by all stakeholders. In this paper we present a three phase industrial case study that aims to identify TextTest's applicability in industrial practice. The paper reports that the tool is associated with (1) low script development costs due to recording functionality, (2) low maintenance costs, on average 7 minutes per test case, (3) better defect finding ability than manual system testing, (4) high test case execution performance (In this case 500 test cases in 20 minutes), (5) high script readability due to DSL defined scripts, and (6) test suites that are robust to change (In this case 93 percent per iteration). However, the tool requires a higher degree of technical skill for customization work, test maintainers need skills in designing regular expressions and the tool's applicability is currently restricted to Java and Python based applications. © 2015 IEEE.","Approval Testing; Industrial Study; System Testing; TextTest","Ability testing; Automation; Commerce; Computer programming languages; Cost effectiveness; Costs; Defects; Graphical user interfaces; Java programming language; Problem oriented languages; System theory; User interfaces; Verification; Cost-benefit tradeoffs; Domain specific languages; Empirical case studies; Graphical user interface (GUIs); Industrial case study; Industrial Study; System testing; TextTest; Software testing",,,,,,,,"Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference on Software Engineering. ACM, pp. 571-579; Alégroth, E., On the industrial applicability of visual gui testing (2013) On the Industrial Applicability of Visual GUI Testing, , Chalmers University of Technology; Rafi, D., Moses, K., Petersen, K., Mantyla, M., Benefits and limitations of automated software testing: Systematic literature review and practitioner survey (2012) Automation of Software Test (AST), 2012 7th International Workshop on, pp. 36-42. , june; Grechanik, M., Xie, Q., Fu, C., Creating GUI testing tools using accessibility technologies (2009) Software Testing, Verification and Validation Workshops, 2009. ICSTW'09. International Conference On. IEEE, pp. 243-250; Horowitz, E., Singhera, Z., (1993) Graphical User Interface Testing, 4 (8). , Technical eport Us C-C S-93-5; Sjösten-Andersson, E., Pareto, L., Costs and benefits of structureaware capture/replay tools (2006) SERPS'06, p. 3; Zaraket, F., Masri, W., Adam, M., Hammoud, D., Hamzeh, R., Farhat, R., Khamissi, E., Noujaim, J., GUICOP: Specification-Based GUI Testing (2012) Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference On. IEEE, pp. 747-751; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001) Proceedings of the 2nd International Conference on EXtreme Programming and Flexible Processes in Software Engineering, pp. 114-117; Gutiérrez, J.J., Escalona, M.J., Mejás, M., Torres, J., Generation of test cases from functional requirements. A survey (2006) 4ş Workshop on System Testing and Validation; Andersson, J., Bache, G., Verdoes, C., Web Applications, Multithreading, Parallel Testing and Multiple Components: Further Adventures in Acceptance Testing; Andersson, J., Bache, G., The video store revisited yet again: Adventures in gui acceptance testing (2004) Extreme Programming and Agile Processes in Software Engineering, pp. 1-10. , Springer; Andersson, J., Bache, G., Sutton, P., Xp with acceptance-test driven development: A rewrite project for a resource optimization system (2003) Extreme Programming and Agile Processes in Software Engineering, pp. 180-188. , Springer; Bache, E., Bache, G., Specification by example with gui testshow could that work? (2014) Agile Processes in Software Engineering and Extreme Programming, pp. 320-326. , Springer; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Software Engineering, 14 (2), pp. 131-164; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for gui-based software applications (2007) ACM Transactions on Software Engineering and Methodology (TOSEM), 16 (1), p. 4; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUIdirected test scripts (2009) Software Engineering, 2009. ICSE 2009. IEEE 31st International Conference On. IEEE, pp. 408-418; Alégroth, E., Feldt, R., Ryrholm, L., Visual gui testing in practice: Challenges, problems and limitations (2014) Empirical Software Engineering, pp. 1-51; Bolcsfoldi, D., Mandelbaum, D., Truter, P., (2010) Apparatus and Method for Control of Multiple Displays from A Single Virtual Frame Buffer, , Oct. 18, uS Patent App. 12/906,933",,,"Graz University of Technology (TU Graz);IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","8th IEEE International Conference on Software Testing, Verification and Validation, ICST 2015","13 April 2015 through 17 April 2015",,112251,,9781479971251,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid., ICST - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84935061864
"Alégroth E., Gao Z., Oliveira R., Memon A.","55843479600;55735482100;36812615000;35599876500;","Conceptualization and evaluation of component-based testing unified with visual GUI testing: An empirical study",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation, ICST 2015 - Proceedings",,, 7102584,"","",,19,"10.1109/ICST.2015.7102584","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935047859&doi=10.1109%2fICST.2015.7102584&partnerID=40&md5=9f5a531c02963590c37d46cd3f53c378","Software Eng. and Tech., Chalmers University, Gothenburge, Sweden; Dept. of Computer Science, University of Maryland, College Park, MD  20740, United States; ICMC/USP, University of Sao Paulo, Sao Carlos, Brazil","Alégroth, E., Software Eng. and Tech., Chalmers University, Gothenburge, Sweden; Gao, Z., Dept. of Computer Science, University of Maryland, College Park, MD  20740, United States; Oliveira, R., ICMC/USP, University of Sao Paulo, Sao Carlos, Brazil; Memon, A., Dept. of Computer Science, University of Maryland, College Park, MD  20740, United States","In this paper we present the results of a two-phase empirical study where we evaluate and compare the applicability of automated component-based Graphical User Interface (GUI) testing and Visual GUI Testing (VGT) in the tools GUITAR and a prototype tool we refer to as VGT GUITAR. First, GUI mutation operators are defined to create 18 faulty versions of an application on which both tools are then applied in an experiment. Results from 456 test case executions in each tool show, with statistical significance, that the component-based approach reports more false negatives than VGT for acceptance tests but that the VGT approach reports more false positives for system tests. Second, a case study is performed with larger open source applications, ranging from 8,803-55,006 lines of code. Results show that GUITAR is applicable in practice but has some challenges related to GUI component states. The results also show that VGT GUITAR is currently not applicable in practice and therefore requires further research and development. Based on the study's results we present areas of future work for both test approaches and conclude that the approaches have different benefits and drawbacks. The component-based approach is robust and executes tests faster than the VGT approach, with a factor of 3. However, the VGT approach can perform visual assertions and is perceived more flexible than the component- based approach. These conclusions let us hypothesize that a combination of the two approaches is the most suitable in practice and therefore warrants future research. © 2015 IEEE.","Component-based testing; GUI Testing; GUITAR; Test automation; Visual GUI Testing","Graphical user interfaces; Musical instruments; Open source software; Open systems; Software testing; Testing; User interfaces; Verification; Component-based Testing; GUI testing; GUITAR; Test Automation; Visual gui testing; Acceptance tests",,,,,,,,"Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Borjesson, E., Feldt, R., Automated system testing using visual gui testing tools: A comparative study in industry (2012) Proceedings of the 5th IEEE International Conference on Software Testing, Verification and Validation (ICST 2012), pp. 350-359. , Montreal, Canada; Alegroth, E., Feldt, R., Olsson, H., Transitioning manual system test suites to automated testing: An industrial case study (2013) Proceedings of the 6th IEEE International Conference on Software Testing, Verification and Validation (ICST 2013), pp. 56-65. , Luxembourg; Alégroth, E., Feldt, R., Ryrholm, L., Visual gui testing in practice: Challenges, problemsand limitations (2014) Empirical Software Engineering, pp. 1-51; Alégroth, E., On the industrial applicability of visual gui testing (2013) Department of Computer Science and Engineering, Software Engineering (Chalmers), , Chalmers University of Technology, Goteborg, Tech. Rep; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs dom-based web locators: An empirical study (2014) Web Engineering, Ser. Lecture Notes in Computer Science, 8541, pp. 322-340. , Springer; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Software Engineering, 14 (2), pp. 131-164; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Transactions on Software Engineering, 37 (5), pp. 649-678; Alégroth, E., Random visual gui testing: Proof of concept (2013) Proceedings of the 25th International Conference on Software Engineering & Knowledge Engineering (SEKE 2013), pp. 178-184; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, Management, and Performance, , 1st ed. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc; Lowell, C., Stell-Smith, J., Successful automation of gui driven acceptance testing (2003) Proceedings of the 4th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP 03), pp. 331-333. , Berlin, Heidelberg; Onoma, A., Tsai, W., Poonawala, M., Suganuma, H., Regression testing in an industrial environment (1998) Communications of the ACM, 41 (5), pp. 81-86; Rothermel, G., Untch, R., Chu, C., Harrold, M., Prioritizing test cases for regression testing (2001) IEEE Transactions on Software Engineering, 27 (10), pp. 929-948; Lalwani, T., Garg, M., Burmaan, C., Arora, A., (2013) UFT/QTP Interview Unplugged: And i Thought i Knew UFT, , 2nd ed. KnowledgeInbox; Alégroth, E., Nass, M., Olsson, H., JAutomate: A tool for systemand acceptance-test automation (2013) Proceedings of the 6th Software Testing, Verification and Validation (ICST 2013), pp. 439-446. , Luxembourg; Chang, T., Yeh, T., Miller, R., Gui testing using computer vision (2010) Proceedings of the 28th International Conference on Human Factors in Computing Systems (CHI 2010), pp. 1535-1544. , Atlanta, US; Demillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) Computer, 11 (4), pp. 34-41; Nguyen, B.N., Memon, A., An observe-model-exercise paradigm to test event-driven systems with undetermined input spaces (2014) IEEE Transactions on Software Engineering, 40 (3), pp. 216-234; Oliveira, R.A.P., Memon, A., Gil, V.N., Nunes, F.L.S., Delamaro, M., An extensible framework to implement test oracle for nontestable programs (2014) Proceedings of the 26th International Conference on Software Engineering and Knowledge Engineering (SEKE 2014), pp. 199-204. , Vancouver, Canada; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference on Software Engineering 2005 (ICSE 2005), pp. 571-579. , St. Louis, USA; Fowler, M., Foemmel, M., (2006) Continuous Integration, , http://www.martinfowler.com/articles/continuousIntegration.html, May. Access: Octber 2014; Mateo, P.R., Usaola, M.P., Offutt, J., Mutation at system and functional levels (2010) Proceedings of the 3rd IEEE International Conference on Software Testing, Verification, and Validation Workshops (ICSTW 2010), pp. 110-119. , Paris, France; Memon, A., An event-flow model of gui-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Memon, A., Soffa, M.L., Regression testing of GUIs (2003) ESEC/FSE-11: Proceedings of the 9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International FSE, pp. 118-127. , New York, USA",,,"Graz University of Technology (TU Graz);IEEE Computer Society","Institute of Electrical and Electronics Engineers Inc.","8th IEEE International Conference on Software Testing, Verification and Validation, ICST 2015","13 April 2015 through 17 April 2015",,112251,,9781479971251,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid., ICST - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84935047859
"Singi K., Era D., Kaulgud V.","56705537600;56705395400;14009680600;","Model-based approach for automated test case generation from visual requirement specifications",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings",,, 7107405,"","",,1,"10.1109/ICSTW.2015.7107405","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934325278&doi=10.1109%2fICSTW.2015.7107405&partnerID=40&md5=dd78609251f986d9a4e6f349e0756658","Accenture Technology Labs, Accenture, India","Singi, K., Accenture Technology Labs, Accenture, India; Era, D., Accenture Technology Labs, Accenture, India; Kaulgud, V., Accenture Technology Labs, Accenture, India","Digital applications exhibit characteristics of rapid evolution, a multitude of stakeholders and emphasis on user experience. Role based access and data visualization is an important application feature. With increased focus on user experience, industry is seeing a growing trend towards visual approaches for documenting and validating requirements. A visual approach creates better synergy between various stakeholders but at the same time poses various challenges to testing. In this paper, we present a graph based modeling technique to create models from visual requirement specifications (or prototypes). The technique also generates test cases from these models using the semantics of the User Interface Components and behavioral events. The paper demonstrates the approach using a case study. © 2015 IEEE.",,,,,,,,,,"(2015) Gartner Predicts, , https://www.gartner.com/doc/2864817, 2015; Ambriola, V., Gervasi, V., Processing natural language requirements (1997) Automated Software Engineering, 1997. Proceedings. , 12th IEEE International Conference. IEEE, pp. 36-45; Jacobson, I., (1992) Object Oriented Software Engineering: A Use Case Driven Approach; Mahajan, R., Shneiderman, B., Visual and textual consistency checking tools for graphical user interfaces (1997) Software Engineering, IEEE Transactions on, 23 (11), pp. 722-735; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction (TOCHI), 2 (1), pp. 64-103; Myers, B., (1992) State of the Art in User Interface Software Tools, , Citeseer; Alberto, S., (2011) Pretotype It, , http://goo.gl/HA65GP; Bergh Den J.Van, Sahni, D., Haesen, M., Luyten, K., Coninx, K., Grip: Get better results from interactive prototypes (2011) Proceedings of the 3rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems. ACM, pp. 143-148; Axure, R., (2012) Interactive Wireframe Software and Mockup Tool; http://www.justinmind.com/; Alalfi, M.H., Cordy, J.R., Dean, T.R., Modelling methods for web application verification and testing: State of the art (2009) Software Testing, Verification and Reliability, 19 (4), pp. 265-296; Kosindrdecha, N., Daengdej, J., A test case generation process and technique (2010) J. Software Eng, 4, pp. 265-287; Moreira, R.M., Paiva, A.C., Memon, A., A pattern-based approach for gui modeling and testing (2013) Software Reliability Engineering (ISSRE), 2013 IEEE 24th International Symposium On. IEEE, pp. 288-297; Dwarakanath, A., Jankiti, A., Minimum number of test paths for prime path and other structural coverage criteria (2014) Testing Software and Systems, pp. 63-79. , Springer",,,"","Institute of Electrical and Electronics Engineers Inc.","2015 8th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015","13 April 2015 through 17 April 2015",,112292,,9781479918850,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84934325278
"Oliveira R.A.P., Alégroth E., Gao Z., Memon A.","36812615000;55843479600;55735482100;35599876500;","Definition and evaluation of mutation operators for GUI-level mutation analysis",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings",,, 7107457,"","",,12,"10.1109/ICSTW.2015.7107457","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934312076&doi=10.1109%2fICSTW.2015.7107457&partnerID=40&md5=340a9fb96b639c1404ae00e2075202a0","ICMC/USP, University of Sao Paulo, Sao Carlos, Brazil; Software Eng. and Tech., Chalmers University, Gothenburg, Sweden; Dept. of Computer Science, University of Maryland, College Park, MD, United States","Oliveira, R.A.P., ICMC/USP, University of Sao Paulo, Sao Carlos, Brazil; Alégroth, E., Software Eng. and Tech., Chalmers University, Gothenburg, Sweden; Gao, Z., Dept. of Computer Science, University of Maryland, College Park, MD, United States; Memon, A., Dept. of Computer Science, University of Maryland, College Park, MD, United States","Automated testing has become essential in software industry to meet market demands for faster delivery and higher quality software. Testing is performed on many levels of system abstraction, from tests on source code to Graphical User Interface (GUI) tests. New testing techniques and frameworks are also continuously released to the market. Mutation analysis has been proposed as a way of assessing the quality of these new test techniques/frameworks as well as existing test suites in practice. The analysis is performed by seeding defects, referred to as mutants, into the system under test with the assumption that a technique/test suite of high quality will 'kill' the mutants. However, whilst support for mutation analysis exists for test techniques that operate on on lower levels of system abstraction, i.e. method-level mutation operators, the support for GUI-level mutation analysis is currently lacking. In this paper we perform an empirical analysis of 18 GUI-level mutation operators defined in our previous work and compare their efficiency and comprehensiveness to state-of-practice lower level mutation operators. The main findings of our analysis are (1) that traditional method-level mutation operators are not precise enough for GUI-level mutation; (2) the defined GUI-based mutation operators provide comprehensive support for GUI-level mutation; and (3) GUI-based mutation operators can be automated but are challenged by the dependencies between GUI widgets. © 2015 IEEE.","Graphical User Interface; GUI testing; mutation operators; mutation testing; software testing1",,,,,,,,,"Memon, A., Pollack, M., Soffa, M., Hierarchical gui test case generation using automated planning (2001) IEEE Trans. on Sof. Eng., 27 (2), pp. 144-155. , Feb; Yuan, X., Cohen, M., Memon, A., Gui interaction testing: Incorporating event context (2011) IEEE Trans. on Sof. Eng., 37 (4), pp. 559-574. , July; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (gui) testing: Systematic mapping and repository (2013) Inf. and Soft. Techn., 55 (10), pp. 1679-1694; Alégroth, E., (2013) On the Industrial Applicability of Visual Gui Testing, , Department of Computer Science and Engineering, Software Engineering (Chalmers), Chalmers University of Technology, Goteborg, Tech. Rep; Demillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) IEEE Computer, 11 (4), pp. 34-43; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Trans. on Sof. Eng., 37 (5), pp. 649-678. , Sept; Xie, Q., Memon, A.M., Using a pilot study to derive a gui model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 71-735. , Nov; Alégroth, E., Gao, Z., Oliveira, R.A., Memon, A., Conceptualization and evaluation of component-based testing unified with visual gui testing: An empirical study (2015) ICST 2015, pp. na-na. , to appear; Ma, Y.-S., Offutt, J., Kwon, Y.R., Mujava: An automated class mutation system: Research articles (2005) Softw. Test. Verif. Reliab., 15 (2), pp. 97-133. , Jun; Hall, M., Frank, E., Holmes, G., Pfahringer, B., Reutemann, P., Witten, I.H., The weka data mining software: An update (2009) SIGKDD Explor. Newsl., 11 (1), pp. 10-18; Offutt, J., Ma, Y.-S., Kwon, Y.-R., An experimental mutation system for Java (2004) SIGSOFT Softw. Eng. Notes, 29 (5), pp. 1-4; Wright, C., Kapfhammer, G., McMinn, P., The impact of equivalent, redundant and quasi mutants on database schema mutation analysis (2014) QSIC 2014, pp. 57-66. , Oct",,,"","Institute of Electrical and Electronics Engineers Inc.","2015 8th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015","13 April 2015 through 17 April 2015",,112292,,9781479918850,,,"English","IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84934312076
"Vos T.E.J., Kruse P.M., Condori-Fernández N., Bauersfeld S., Wegener J.","8980537100;34868253300;6507361130;48161076300;57090080200;","TESTAR: Tool support for test automation at the user interface level",2015,"International Journal of Information System Modeling and Design","6","3",,"46","83",,37,"10.4018/IJISMD.2015070103","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929072613&doi=10.4018%2fIJISMD.2015070103&partnerID=40&md5=a2735243f194c0fc3f151c0cb2bf359b","Universidad Politecnica de Valencia, Valencia, Spain; Berner and Mattner Systemtechnik GmbH, Berlin, Germany; Vrije Universiteit Van Amsterdam, Amsterdam, Netherlands","Vos, T.E.J., Universidad Politecnica de Valencia, Valencia, Spain; Kruse, P.M., Berner and Mattner Systemtechnik GmbH, Berlin, Germany; Condori-Fernández, N., Vrije Universiteit Van Amsterdam, Amsterdam, Netherlands; Bauersfeld, S., Universidad Politecnica de Valencia, Valencia, Spain; Wegener, J., Berner and Mattner Systemtechnik GmbH, Berlin, Germany","Testing applications with a graphical user interface (GUI) is an important, though challenging and time consuming task. The state of the art in the industry are still capture and replay tools, which may simplify the recording and execution of input sequences, but do not support the tester in finding fault-sensitive test cases and leads to a huge overhead on maintenance of the test cases when the GUI changes. In earlier works the authors presented the TESTAR tool, an automated approach to testing applications at the GUI level whose objective is to solve part of the maintenance problem by automatically generating test cases based on a structure that is automatically derived from the GUI. In this paper they report on their experiences obtained when transferring TESTAR in three different industrial contexts with decreasing involvement of the TESTAR developers and increasing participation of the companies when deploying and using TESTAR during testing. The studies were successful in that they reached practice impact, research impact and give insight into ways to do innovation transfer and defines a possible strategy for taking automated testing tools into the market. Copyright © 2015, IGI Global.","Capture and Replay Tools; Graphical User Interface (GUI); Input Sequences; TESTAR","Automatic test pattern generation; Automation; Graphical user interfaces; Maintenance; Automated approach; Automated testing tools; Graphical user interfaces (GUI); Industrial context; Input sequence; Maintenance Problem; TESTAR; Time-consuming tasks; User interfaces",,,,,,"This work was financed by the FITTEST project, ICT-2009.1.2 no 257574. We are grateful to collaboration of: Antonio de Rojas (Clave Informatica), Alessandra Bagnato (SOFTEAM) and Etienne Brosse (SOFTEAM).",,"Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated java gui modeling for model-based testing purposes (2011) Information Technology: New Generations (Itng), 2011 Eighth International Conference on, pp. 268-273. , April; Alegroth, E., Nass, M., Olsson, H., Jautomate: A tool for system- and acceptance-test automation (2013) Software Testing, Verification and Validation (Icst), 2013 Ieee Sixth International Conference on, pp. 439-446. , March; Amalfitano, D., Fasolino, A., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (Icstw), 2011 Ieee Fourth International Conference on, pp. 252-261. , March; Ammann, P., Offutt, J., (2008) Introduction to Software Testing, , Cambridge University Press; Arthur, W., Jr., Bennett, W., Jr., Edens, P.S., Bell, S.T., Effectiveness of training in organizations: A meta-analysis of design and evaluation features (2003) The Journal of Applied Psychology, 88 (2), pp. 234-245. , PMID:12731707; Bagnato, A., Sadovykh, A., Brosse, E., Vos, T., The omg uml testing profile in use-an industrial case study for the future internet testing (2013) Software Maintenance and Reengineering (Csmr), 2013 17th European Conference on, pp. 457-460; Banerjee, I., Nguyen, B., Garousi, V., Memon, A., Graphical user interface (gui) testing: Systematic mapping and repository (2013) Information and Software Technology, 55 (10), pp. 1679-1694; Bauersfeld, S., De Rojas, A., Vos, T., Evaluating rogue user testing in industry:An experience report (2014) Research Challenges in Information Science (Rcis), 2014 Ieee Eighth International Conference on, pp. 1-10. , May; Bauersfeld, S., Vos, T., A reinforcement learning approach to automated gui robustness testing (2012) Fast Abstracts of the 4th Symposium on Search-based Software Engineering (Ssbse 2012), pp. 7-12; Bauersfeld, S., Vos, T.E.J., Guitest: A java library for fully automated gui robustness testing (2012) Proceedings of the 27th Ieee/acm International Conference on Automated Software Engineering, pp. 330-333. , http://doi.acm.org/10.1145/2351676.2351739, New York, NY, USA: ACM; Retrieved from; Bauersfeld, S., Vos, T.E.J., Condori-Fernández, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM '14, Torino, Italy, September 18-19 2014, p. 4. , http://doi.acm.org/10.1145/2652524.2652588, Retrieved from; Benedek, J., Miner, T., Measuring desirability: New methods for evaluating desirability in a usability lab setting (2002) Proceedings of Usability Professionals Association, , Orlando, USA; Dallmeier, V., Pohl, B., Burger, M., Mirold, M., Zeller, A., Webmate: Web application test generation in the real world (2014) 2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops, pp. 413-418. , http://doi.ieeecomputersociety.org/10.1109/ICSTW.2014.65; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 408-418. , Washington, DC, USA: IEEE Computer Society. Retrieved from; Grochtmann, M., Grimm, K., Classification trees for partition testing (1993) Softw. Test. Verif. Reliab., 3 (2), pp. 63-82; Grossman, T., Fitzmaurice, G., Attar, R., A survey of software learnability: Metrics, methodologies and guidelines (2009) Sigchi Conference on Human Factors in Computing Systems, pp. 649-658. , http://doi.acm.org/10.1145/1518701.1518803, ACM; Retrieved from; Harrison, W., Editorial (N=1: An alternative for software engineering research) (1997) Empirical Software Engineering, 2 (1), pp. 7-10; Joorabchi, M., Mesbah, A., Reverse engineering ios mobile applications (2012) Reverse Engineering (Wcre), 2012 19th Working Conference on, pp. 177-186. , Oct; Kaner, C., (2002) Avoiding Shelfware: A Managers' View of Automated Gui Testing, , http://www.kaner.com/pdfs/shelfwar.pdf; Kirkpatrick, D., Kirkpatrick, J., (2010) Evaluating Training Programs: The Four Levels. Read How You Want.com; Berrett-Koehler Publishers, , http://www.amazon.com/Evaluating-Training-Programs-Four-Levels/dp/1442955848, Retrieved from; Kruse, P.M., Condori-Fernández, N., Vos, T.E., Bagnato, A., Brosse, E., Combinatorial testing tool learnability in an industrial environment (2013) Empirical Software Engineering and Measurement, 2013 ACM/IEEE International Symposium on, pp. 304-312; Kruse, P.M., Luniak, M., Automated test case generation using classification trees (2010) Software Quality Professional, 13 (1), pp. 4-12; Larman, C., Basili, V., Iterative and incremental developments. A brief history (2003) Computer, 36 (6), pp. 47-56; Lehmann, E., Wegener, J., Test case design by means of the CTE XL (2000) Proceedings of the 8th European International Conference on Software Testing, Analysis & Review (EuroSTAR 2000), , Copenhagen, Denmark; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Comparing the maintainability of selenium webdriver test suites employing different locators: A case study (2013) Proceedings of the 2013international Workshop on Joining Academia and Industry Contributions to Testing Automation, pp. 53-58. , http://doi.acm.org/10.1145/2489280.2489284, New York, NY, USA: ACM; Retrieved from; Marchetto, A., Tonella, P., Using searchbased algorithms for ajax event sequence generation during testing (2011) Empirical Software Engineering, 16 (1), pp. 103-140. , Retrieved from; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Autoblacktest: A tool for automatic black-box testing (2011) Proceedings of the 33rd International Conference on Software Engineering, pp. 1013-1015. , http://doi.acm.org/10.1145/1985793.1985979, New York, NY, USA: ACM; Retrieved from; Memon, A., Banerjee, I., Nguyen, B., Robbins, B., The first decade of gui ripping: Extensions, applications, and broader impacts (2013) Proceedings of the 20th Working Conference on Reverse Engineering (Wcre), , IEEE Press; Mesbah, A., Van Deursen, A., Invariantbased automatic testing of ajax user interfaces (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 210-220. , Washington, DC, USA: IEEE Computer Society. Retrieved from; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 31-330. , http://doi.acm.org/10.1145/2109205.2109208, March. Retrieved from; Miao, Y., Yang, X., An fsm based gui test automation model (2010) Control Automation Robotics Vision (Icarcv), 2010 11th International Conference on, pp. 120-126. , Dec; Morgado, I., Paiva, A., Faria, J., Dynamic reverse engineering of graphical user interfaces (2012) Int. Journal on Advances in Software, 5 (3-4), pp. 224-246; Myers, G.J., (1979) The Art of Software Testing, , John Wiley and Sons; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A., Guitar: An innovative tool for automated testing of gui-driven software (2013) Automated Software Engineering, pp. 1-41. , Retrieved from10.1007/s10515- 013-0128-9; Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.M., Guitar: An innovative tool for automated testing of gui-driven software (2014) Automated Software Engineering, 21 (1), pp. 65-105; Senapathi, M., A framework for the evaluation of case tool learnability in educational environments (2005) Journal of Information Technology Education: Research, 4 (1), pp. 61-84. , http://www.editlib.org/p/111563, January. Retrieved from; Singhera, Z.U., Horowitz, E., Shah, A.A., A graphical user interface (gui) testing methodology (2008) International Journal of Information Technology and Web Engineering, 3 (2), pp. 1-18; Sun, Y., Jones, E.L., Specificationdriven automated testing of GUI-based Java programs (2004) Proceedings of the 42nd Annual Southeast Regional Conference, pp. 140-145; Vos, T., Test automation at the user interface level (2014) Preproceedings of the Seventh Seminar in Series on Advanced Techniques and Tools for Software Evolution (SATToSE 2014), p. 5. , July, V. Zaytsev (Ed.). Dipartimento di Informatica Università degli Studi dell'Aquila, L'Aquila, Italy. (Invited Talk); Wieringa, R., Designing technical action research and generalizing from real-world cases (2012) Proceedings of the 24th International Conference on Advanced Information Systems Engineering, pp. 697-698. , Berlin, Heidelberg: Springer-Verlag. Retrieved from; Yang, W., Prasad, M.R., Xie, T., A greybox approach for automated gui-model generation of mobile applications (2013) Proceedings of the 16th International Conference on Fundamental Approaches to Software Engineering, pp. 250-265. , Berlin, Heidelberg: Springer-Verlag. Retrieved from; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using gui screenshots for search and automation (2009) Proceedings of the 22nd Annual Acm Symposium on User Interface Software and Technology, pp. 183-192. , http://doi.acm.org/10.1145/1622176.1622213, New York, NY, USA: ACM; Retrieved from; Zendler, A., Horn, E., Schwärtzel, H., Plödereder, E., Demonstrating the usage of singlecase designs in experimental software engineering (2001) Information and Software Technology, 43 (12), pp. 681-691. , http://www.sciencedirect.com/science/article/pii/S095058490100177X",,,,"IGI Global",,,,,19478186,,,,"English","Int. J. Inf. Syst. Model. Des.",Article,"Final","",Scopus,2-s2.0-84929072613
"Filipsky M., Bures M., Jelinek I.","56582436300;14015114200;7003865724;","Creating smart tests from recorded automated test cases",2015,"Advances in Intelligent Systems and Computing","353",,,"773","780",,2,"10.1007/978-3-319-16486-1_76","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84926300337&doi=10.1007%2f978-3-319-16486-1_76&partnerID=40&md5=da935837cfd0537c88d44cd5b95b1adc","Department of Computer Science and Engineering, Czech Technical University in Prague, Czech Republic","Filipsky, M., Department of Computer Science and Engineering, Czech Technical University in Prague, Czech Republic; Bures, M., Department of Computer Science and Engineering, Czech Technical University in Prague, Czech Republic; Jelinek, I., Department of Computer Science and Engineering, Czech Technical University in Prague, Czech Republic","In order to shorten time to market many software development teams have adopted continuous integration and automated testing. Although user interface test automation is a suitable solution for Agile development, the resulting frequently changing application gives rise to challenging task, especially from the point-of-view of maintenance. In this paper, we present an approach bypassing those drawbacks through test recording enhanced by postprocessing that creates smart tests that are easy to maintain. We have analyzed recorded tests and created step signatures that we then use to find a sequence of common steps. Based on this, we identify reusable parts which we consequently optimize using algorithms that are introduced in this paper to remove inefficient duplications in tests. © Springer International Publishing Switzerland 2015.","Automated Testing; Common Sequences; Reusable Objects; Test Recording; Test Set Optimization","Automation; Computer software reusability; Information systems; Integration testing; Software design; Testing; User interfaces; Agile development; Automated testing; Common Sequences; Continuous integrations; Reusable Objects; Software development teams; Suitable solutions; Test sets; Software testing",,,,,,,,"Anand, B.R., Krishnankutty, H., Ramakrishnan, K., Venkatesh, V.C., (2007) Business Rules- Based Test Automation: A Novel Approach for Accelerated Testing, pp. 21-28. , SETLabs Briefing; Bohme, M., Paul, S., On the Efficiency of Automated Testing (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 632-642. , ACM; Buchs, D., Pedro, L.M., Lúcio, L., Formal test generation from UML models (2006) Dependable Systems: Software, Computing, Networks. LNCS, 4028, pp. 145-171. , In: Kohlas, J., Meyer, B., Schiper, A. (eds.), Springer, Heidelberg; Fewster, M., Graham, D., Software Test Automation: Effective Use of Test Execution Tools (1999) Addison-Wesley Professional, , ACM Press Books; Filipsky, M., Bures, M., Jelinek, I., Finding Common Subsequences in Recorded Test Cases (2013) ICSEA 2013, pp. 51-54. , IARIA; Goulding, S., Arunthavarajah, P., Florio, T., Hertyk, J., BlackHorse: Creating Smart Test Cases from Brittle Recorded Tests (2014) Software Quality Journal, pp. 293-310; Hoffman, D., (1999) Cost Benefits Analysis of Test Automation, , White paper. Software Quality Methods; Julstrom, B.A., Hinkemeyer, B., Starting from Scratch: Growing Longest Common Subsequences with Evolution (2006) LNCS, 4193, pp. 930-938. , In: Runarsson, T.P., Beyer, H.-G., Burke, E.K., Merelo- Guervós, J.J., Whitley, L.D., Yao, X. (eds.) PPSN 2006, Springer, Heidelberg; Kaner, C., Software Test Automation: A Real-World Problem. White paper (1998) Los Altos Workshop on Software Testing, pp. 1-3; Lonngren, D.D., Reducing the cost of test through reuse (1998) AUTOTESTCON 1998, pp. 48-53. , Salt Lake City, USA, IEEE Press; Nogueira, S., Sampaio, A., Mota, A., Test generation from state based use case models (2012) Formal Aspects of Computing, pp. 1-50; Rothermel, G., Harrold, M.J., Analyzing Regression Test Selection Techniques (1996) IEEE Transactions on Software Engineering, 22, pp. 529-555; Shewchuk, Y., Garousi, V., (2010) Experience with Maintenance of a Functional GUI Test Suite Using IBM Rational Functional Tester, pp. 489-494. , SEKE; Skoglund, M., Runeson, P., A case study on regression test suite maintenance in system evolution (2004) Proceedings of 20Th IEEE International Conference on Software Maintenance, pp. 438-442. , IEEE Computer Society Press",,"Rocha A.Rocha A.Correia A.M.Costanzo S.Reis L.P.","aisti;Asociación de Técnicos de Informática;Camoes;Global Institute for IT Management;LIACC;Universidade dos Açores","Springer Verlag","World Conference on Information Systems and Technologies, WorldCIST 2015","1 April 2015 through 3 April 2015",,115919,21945357,9783319164854,,,"English","Adv. Intell. Sys. Comput.",Conference Paper,"Final","",Scopus,2-s2.0-84926300337
"Alégroth E., Feldt R.","55843479600;24476388300;","Industrial application of visual GUI testing: Lessons learned",2014,"Continuous software engineering","9783319112831",,,"127","140",,6,"10.1007/978-3-319-11283-1_11","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84930694404&doi=10.1007%2f978-3-319-11283-1_11&partnerID=40&md5=501044ff4dd2b2371d08a86d94394c44","Software Engineering and Technology, Chalmers University, Gothenburge, Sweden; Department of Software Engineering, Blekinge University of Technology, Karlskrona, Sweden","Alégroth, E., Software Engineering and Technology, Chalmers University, Gothenburge, Sweden; Feldt, R., Software Engineering and Technology, Chalmers University, Gothenburge, Sweden, Department of Software Engineering, Blekinge University of Technology, Karlskrona, Sweden","A large body of academic knowledge has been devoted to automated software testing in order to support the software market's demands for continuous software delivery. However, most of these automated techniques approach testing from lower levels of system abstraction, e.g., component level, which limit their applicability for high-level regression testing of, for instance, system and acceptance tests, thus forcing companies to perform these test activities manually, which is considered time consuming, tedious, and error prone. In this book chapter, we present visual GUI testing (VGT), a tool driven test technique that uses image recognition in order to interact and assert the correctness of a system under test (SUT) through the bitmap graphical user interface (GUI) that is shown to the user on the computer monitor. This approach makes VGT flexible and applicable to any SUT with a GUI but also allows VGT tools to emulate end-user behavior and therefore automate previously manual system and acceptance test cases. In addition to presenting the technique itself, this chapter will also present some VGT tools and empirically identified problems with the technique and how these problems can be mitigated in practice. Finally we will discuss how VGT can be used in the context of continuous software development in order to support market demands for quicker software delivery. © 2014 Springer International Publishing Switzerland. All rights reserved.",,"Behavioral research; Commerce; Graphical user interfaces; Image recognition; Software design; Software testing; Automated software testing; Automated techniques; Component levels; Graphical user interfaces (GUI); Regression testing; Software markets; System under test; Visual gui testing; Acceptance tests",,,,,,,,"Olsson, H.H., Alahyari, H., Bosch, J., Climbing the ""stairway to heaven"" - A multiple-case study exploring barriers in the transition from agile development towards continuous deployment of software (2012) 2012 38th EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA), pp. 392-399. , EUROMICRO, IEEE; Olan, M., Unit testing: Test early, test often (2003) J. Comput. Sci. Coll., 19 (2), pp. 319-328; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference on Software Engineering, pp. 571-579. , ICSE, ACM; Grechanik, M., Xie, Q., Fu, C., Creating GUI testing tools using accessibility technologies (2009) International Conference on Software Testing Verification and Validation Workshops 2009. ICSTW'09, pp. 243-250. , ICST, IEEE; Börjesson, E., Feldt, R., Tomated system testing using visual GUI testing tools: A comparative study in industry (2012) 2012 I.E. Fifth International Conference on Software Testing Verification and Validation (ICST), pp. 350-359. , ICST, IEEE; Alegroth, E., Feldt, R., Olsson, H., Transitioning manual system test suites to automated testing: An industrial case study (2013) 2013 I.E. Sixth International Conference on Software Testing Verification and Validation (ICST), pp. 56-65. , ICST IEEE; Alegroth, E., Nass, M., Olsson, H., JAutomate: A tool for system-and acceptance-test automation (2013) 2013 I.E. Sixth International Conference on Software Testing Verification and Validation (ICST), pp. 439-446. , ICST IEEE; Alégroth, E., Feldt, R., Ryrholm, L., Visual GUI testing in practice: Challenges, problems and limitations (2014) Empir. Softw. Eng., pp. 1-51. , Springer US; Humble, J., Farley, D., (2010) Continuous Delivery: Reliable Software Releases Through Build Test and Deployment Automation, , Book Pearson Education; Itkonen, J., Rautiainen, K., Exploratory testing: A multiple case study (2005) 2005 International Symposium on Empirical Software Engineering, 10p. , Nov; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction Management and Performance, , Book Addison-Wesley Professional; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) ACM SIGSOFT Software Engineering Notes, 25, pp. 30-39. , ACM; Memon, A., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Rel., 17 (3), pp. 137-157; Potter, R., (1992) Triggers: GUIding Automation with Pixels to Achieve Data Access, pp. 361-382. , Center for automation research, University of Maryland; Yeh, T., Chang, T., Miller, R., Sikuli: Using GUI screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192. , ACM symposium of UI software and technology, ACM","Alégroth, E.; Software Engineering and Technology, Sweden",,,"Springer International Publishing",,,,,,9783319112831; 3319112821; 9783319112824,,,"English","Contin.- Softw. Eng.",Book Chapter,"Final","",Scopus,2-s2.0-84930694404
"Mariani L., Pezzè M., Riganelli O., Santoro M.","8965048200;35581208100;14020561200;55154486300;","Automatic testing of GUI-based applications",2014,"Software Testing Verification and Reliability","24","5",,"341","366",,16,"10.1002/stvr.1538","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84903788483&doi=10.1002%2fstvr.1538&partnerID=40&md5=5e8d52c02884c540ef08fed9d4b972f9","University of Milano Bicocca, viale Sarca 336, Milano, Italy; University of Lugano, via Buffi 13, Lugano, Switzerland","Mariani, L., University of Milano Bicocca, viale Sarca 336, Milano, Italy; Pezzè, M., University of Milano Bicocca, viale Sarca 336, Milano, Italy, University of Lugano, via Buffi 13, Lugano, Switzerland; Riganelli, O., University of Milano Bicocca, viale Sarca 336, Milano, Italy; Santoro, M., University of Milano Bicocca, viale Sarca 336, Milano, Italy","Testing GUI-based applications is hard and time consuming because it requires exploring a potentially huge execution space by interacting with the graphical interface of the applications. Manual testing can cover only a small subset of the functionality provided by applications with complex interfaces, and thus, automatic techniques are necessary to extensively validate GUI-based systems. This paper presents AutoBlackTest, a technique to automatically generate test cases at the system level. AutoBlackTest uses reinforcement learning, in particular Q-learning, to learn how to interact with the application under test and stimulate its functionalities. When used to complement the activity of test designers, AutoBlackTest reuses the information in the available test suites to increase its effectiveness. The empirical results show that AutoBlackTest can sample better than state of the art techniques the behaviour of the application under test and can reveal previously unknown problems by working at the system level and interacting only through the graphical user interface. © 2014 John Wiley & Sons, Ltd.","black-box testing; Q-learning; test automation","Automatic testing; Graphical user interfaces; Interface states; Reinforcement learning; Software testing; User interfaces; Verification; Application under tests; Automatic technique; Complex interface; Graphical interface; Manual testing; Q-learning; State-of-the-art techniques; Test Automation; Black-box testing",,,,,,,,"Tillmann, N., Halleux, J.D., Pex: White box test generation for.NET (2008) Proceedings of the 2nd International Conference on Tests and Proofs (TAP), pp. 134-153. , Prato, Italy; (2005) Model-based Testing of Reactive Systems, 3472. , Broy M. Jonsson B. Katoen J.P. Leucker M. Pretschner A. (eds.), LNCS,. Springer Verlag: Berlin, Germany; Taneja, K., Xie, T., DiffGen: Automated regression unit-test generation (2008) Proceedings of the 23rd International Conference on Automated Software Engineering (ASE), pp. 407-410. , L'Aquila, Italy; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC-FSE), pp. 256-267. , Vienna, Austria; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering (TSE), 37 (4), pp. 559-574; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering (TSE), 31 (10), pp. 884-896; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback (2010) IEEE Transactions on Software Engineering (TSE), 36 (1), pp. 81-95; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), pp. 67-77. , Minneapolis, MN, USA; Anand, S., Naik, M., Yang, H., Harrold, M.J., Automated concolic testing of smartphone apps (2012) Proceedings of the International Symposium on Foundations of Software Engineering (FSE), pp. 1-11. , Cary, North Carolina; Sutton, R.S., Barto, A.G., (1998) Reinforcement Learning: An Introduction, , MIT Press: Cambridge, MA; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) Proceedings of the Fifth International Conference on Software Testing, Verification and Validation (ICST), pp. 81-90. , Montreal, Canada; Watkins, C., (1989) Learning from Delayed Rewards, , Ph.D. Thesis, King's College, Cambridge, UK; Watkins, C., Dayan, P., Technical note Q-learning (1992) Machine Learning, 8, pp. 279-292; Kephart, J.O., Chess, D.M., The vision of autonomic computing (2003) IEEE Computer, 43 (1), pp. 41-50; IBM Rational Functional Tester, , http://www-01.ibm.com/software/awdtools/tester/functional/, IBM [last accessed 2012]; Abul, O., Polat, F., Alhajj, R., Multiagent reinforcement learning using function approximation (2000) IEEE Transactions on Systems, Man, and Cybernetics, Part C: Applications and Reviews, 30 (4), pp. 485-497; Lin, L.J., (1992) Reinforcement Learning for Robots Using Neural Networks, , Ph.D. Thesis, Carnegie Mellon University, Pittsburgh, PA, USA; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from GUIs (2012) Proceedings of the International Conference on Fundamental Approaches to Software Engineering (FASE), pp. 347-361. , Tallinn, Estonia; Rothermel, G., Untch, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) IEEE Transactions on Software Engineering (TSE), 27 (10), pp. 929-948; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) IEEE Transactions on Software Engineering (TSE), 16 (1), pp. 1-36; http://sourceforge.net/projects/teachingbox/, Teachingbox. [last accessed 2012]; Xie, Q., (2006) Developing Cost-effective Model-based Techniques for GUI Testing, , PhD Thesis, University of Maryland; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., AutoBlackTest: A tool for automatic black-box testing (2011) Proceedings of the International Conference on Software Engineering (ICSE) - Tool Demo, pp. 1013-1015. , Waikiki, Honolulu, HI, USA; http://www.maveryx.com, Maveryx. [last accessed 2012]; Brooks, A.P., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proceedings of the International Conference on Automated Software Engineering (ASE), pp. 333-342. , Atlanta, Georgia, USA; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) Proceedings of the International Conference on Software Testing, Verification, and Validation (ICST), pp. 121-130. , Lillehammer, Norway; Andrews, A., Offutt, J., Alexander, R., Testing Web applications by modeling with FSMs (2005) Software and System Modeling, 4 (3), pp. 326-345; Elbaum, S., Karre, S., Rothermel, G., Improving Web application testing with user session data (2003) Proceedings of the International Conference on Software Engineering (ICSE), pp. 49-59. , Portland, Oregon; Dallmeier, V., Knopp, N., Mallon, C., Fraser, G., Hack, S., Zeller, A., Automatically generating test cases for specification mining (2012) IEEE Transacitons on Software Engineering (TSE), 38 (2), pp. 243-257; Lorenzoli, D., Mariani, L., Pezzé, M., Automatic generation of software behavioral models (2008) Proceedings of the International Conference on Software Engineering (ICSE), pp. 501-510. , Leipzig, Germany; Lo, D., Mariani, L., Santoro, M., Learning extended FSA from software: An empirical assessment (2012) Journal of Systems and Software (JSS), 85 (9), pp. 2063-2076; Groz, R., Irfan, M.N., Oriat, C., Algorithmic improvements on regular inference of software models and perspectives for security testing (2012) Proceedings of the International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISoLA), pp. 444-457. , Heraklion, Crete, Greece; Meinke, K., Sindhu, M., LBTest: A learning-based testing tool for reactive systems (2013) Proceedings of the International Conference on Software Testing, Verification and Validation (ICST), pp. 447-454. , Luxembourg; Meinke, K., Niu, F., Sindhu, M., Learning-based software testing: A tutorial (2011) Proceedings of the International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISoLA), pp. 200-219. , Vienna, Austria; Walkinshaw, N., Bogdanov, K., Derrick, J., Paris, J., Increasing functional coverage by inductive testing: A case study (2010) Proceedings of the International Conference on Testing Software and Systems (ICTSS), pp. 126-141. , Natal, Brazil; Mariani, L., Papagiannakis, S., Pezzé, M., Compatibility and regression testing of COTS-component-based software (2007) Proceedings of the International Conference on Software Engineering (ICSE), pp. 85-95. , Minneapolis, Minnesota","Mariani, L.; University of Milano Bicocca, viale Sarca 336, Italy; email: mariani@disco.unimib.it",,,"John Wiley and Sons Ltd",,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Article,"Final","",Scopus,2-s2.0-84903788483
"Mariani L., Pezzé M., Riganelli O., Santoro M.","8965048200;35581208100;14020561200;55154486300;","Link: Exploiting the web of data to generate test inputs",2014,"2014 International Symposium on Software Testing and Analysis, ISSTA 2014 - Proceedings",,,,"373","384",,15,"10.1145/2610384.2610397","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942743268&doi=10.1145%2f2610384.2610397&partnerID=40&md5=7d22fcffab4bb1512d3e096e353342c5","Department of Informatics Systems and Communications, University of Milano, Bicocca - Milan, Italy; Faculty of Informatics, University of Lugano, Lugano, Switzerland","Mariani, L., Department of Informatics Systems and Communications, University of Milano, Bicocca - Milan, Italy; Pezzé, M., Department of Informatics Systems and Communications, University of Milano, Bicocca - Milan, Italy, Faculty of Informatics, University of Lugano, Lugano, Switzerland; Riganelli, O., Department of Informatics Systems and Communications, University of Milano, Bicocca - Milan, Italy; Santoro, M., Department of Informatics Systems and Communications, University of Milano, Bicocca - Milan, Italy","Applications that process complex data, such as maps, personal data, book information, travel data, etc., are becoming extremely common. Testing such applications is hard, be- cause they require realistic and coherent test inputs that are expensive to generate manually and difficult to synthesize automatically. So far the research on test case generation techniques has focused mostly on generating test sequences and synthetic test inputs, and has payed little attention to the generation of complex test inputs. This paper presents Link, a technique to automatically generate test cases for applications that process complex data. The novel idea of Link is to exploit the Web of Data to generate test data that match the semantics of the related fields, and satisfy the semantic constraints that arise among interrelated fields. Link automatically analyzes the GUI of the application under test, generates a model of the required inputs, queries DBPedia to extract the data that can be used in the tests, and uses the extracted data to generate complex system test inputs. The experimental results show that Link can generate realistic and coherent test inputs that can exercise behaviors difficult to exercise with currently available techniques. Copyright 2014 ACM.","Realistic test input; System testing; Web of data","Semantics; Testing; Application under tests; Semantic constraints; Synthetic tests; System testing; Test case generation; Test inputs; Test sequence; Web of datum; Software testing",,,,,,,,"(2013) AMetro. Subway on Android, , http://www.ametro.org; (2013) Data Crow. The Ultimate Cataloguer, , http://sourceforge.net/projects/datacrow/; (2013) Ldap Address Book, , http://sourceforge.net/projects/ldapaddrbook/; (2013) Lyrics Finder, , https://github.com/Danguilherme/lyrics-finder; (2013) MetaQuerier: Exploring and Integrating the Deep Web, , http://metaquerier.cs.uiuc.edu; (2013) Myights, , https://github.com/markrebhan/MyFlights; (2013) Osmand, , http://osmand.net; (2013) Regexlib, , http://regexlib.com; (2013) Robotium, , https://code.google.com/p/robotium/; Anand, S., Burke, E.K., Chen, T.Y., Clark, J., Cohen, M.B., Grieskamp, W., Harman, M., McMinn, P., An orchestrated survey of methodologies for automated software test case generation (2013) Journal of Systems and Software, 86 (8), pp. 1978-2001; Arcuri, A., Iqbal, M.Z., Briand, L., Formal analysis of the effectiveness and predictability of random testing (2010) Proceedings of the International Symposium on Software Testing and Analysis; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from GUIs (2012) Proceedings of the International Conference on Fundamental Approaches to Software Engineering; Berners-Lee, T., Fielding, R., Masinter, L., Uniform resource identifier (uri): Generic syntax (2005) Request for Comments: 3986, the Internet Society; Bizer, C., Heath, T., Berners-Lee, T., Linked data - The story so far (2009) International Journal on Semantic Web and Information Systems, 5 (3), pp. 1-2; Bizer, C., Jentzsch, A., Cyganiak, R., (2011) State of the Lod Cloud, , http://lod-cloud.net/state/; Bizer, C., Lehmann, J., Kobilarov, G., Auer, S., Becker, C., Cyganiak, R., Hellmann, S., Dbpedia - A crystallization point for the web of data (2009) Journal of Web Semantics, 7 (3), pp. 154-165; Bozkurt, M., Harman, M., Automatically generating realistic test input from web services (2011) Proceedings of the International Symposium on Service Oriented System Engineering; Brickley, D., Guha, R.V., Rdf vocabulary description language 1.0: Rdf schema (2004) W3c Recommendation, , W3C; Burnim, J., Sen, K., Heuristics for scalable dynamic test generation (2008) Proceedings of the International Conference on Automated Software Engineering; Cadar, C., Dunbar, D., Engler, D., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) Proceedings of the Symposium on Operating Systems Design and Implementation; Chang, K.C.-C., He, B., Zhang, Z., Toward large scale integration: Building a MetaQuerier over databases on the web (2005) Proceedings of the Conference on Innovative Data Systems Research; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T.H., Adaptive random testing: The art of test case diversity (2010) J. Syst. Softw., 83 (1), pp. 60-66; Ciupa, I., Leitner, A., Oriol, M., Meyer, B., ARTOO: Adaptive random testing for object-oriented software (2008) Proceedings of the International Conference on Software Engineering; Devaki, P., Thummalapenta, S., Singhania, N., Sinha, S., Effcient and exible gui test execution via test merging (2013) Proceedings of the International Symposium on Software Testing and Analysis; Fellbaum, C., Wordnet and wordnets (2005) Encyclopedia of Language and Linguistics, pp. 665-670. , K. Brown, editor, Oxford, Elsevier, second edition edition; Fraser, G., Arcuri, A., Evolutionary generation of whole test suites (2011) Proceedings of the International Conference on Quality Software; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) Proceedings of the International Conference on Programming Language, Design and Implementation; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the International Conference on Software Engineering; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the International Symposium on Software Testing and Analysis; Hemmati, H., Arcuri, A., Briand, L., Achieving scalable model-based testing through test case diversity (2013) Transactions on Software Engineering and Methodologies, 22 (1). , 6:1-6:42; IBM, (2013) IBM Rational Functional Tester, , http://www-01.ibm.com/software/awdtools/tester/functional/; Jaygarl, H., Kim, S., Xie, T., Chang, C.K., OCAT: Object capture-based automated testing (2010) Proceedings of the International Symposium on Software Testing and Analysis; Klyne, G., Carroll, J.J., Resource description framework (rdf): Concepts and abstract syntax (2004) W3c Recommendation, , W3C; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) Proceedings of the International Conerence on Software Testing, Verification and Validation; McMinn, P., Shahbaz, M., Stevenson, M., Search-based test input generation for string data types using the results of web queries (2012) Proceedings of the International Conference on Software Testing, Verification and Validation; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) Transactions on Software Engineering, 31 (10), pp. 884-896; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) Transactions on Software Engineering, 38 (1), pp. 35-53; Nguyen, D.C., Perini, A., Tonella, P., Ontology-based test generation for multiagent systems (2008) Proceedings of the International Joint Conference on Autonomous Agents and Multiagent Systems; Pacheco, C., Ernst, M.D., Randoop: Feedback-directed random testing for Java (2007) Proceedings of the International Conference Companion on Object-Oriented Programming, Systems, and Applications; Paschos, T.V., A survey of approximately optimal solutions to some covering and packing problems (1997) ACM Computing Surveys, 29 (2), pp. 171-209. , June; Passant, A., Measuring semantic distance on linking data and using it for resources recommendations (2010) Proceedings of the AAAI Spring Symposium: Linked Data Meets Artificial Intelligence; Shahbaz, M., McMinn, P., Stevenson, M., Automated discovery of valid test strings from the web using dynamic regular expressions collation and natural language processing (2012) Proceedings of the International Conference on Quality Software; Stoer, M., Wagner, F., A simple min-cut algorithm (1997) Journal of the ACM, 44 (4), pp. 585-591; Tillmann, N., Halleux, J.D., Pex: White box test generation for.NET (2008) Proceedings of the International Conference on Tests and Proofs; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , Morgan-Kaufmann; (2013) Sparql 1.1 Overview, , W3C SPARQL Working Group. W3c recommendation, W3C",,,"ACM SIGSOFT;et al.;Fujitsu;Microsoft;NASA;SGT","Association for Computing Machinery, Inc","23rd International Symposium on Software Testing and Analysis, ISSTA 2014","21 July 2014 through 25 July 2014",,113465,,9781450326452,,,"English","Int. Symp. Softw. Test. Anal., ISSTA - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84942743268
"Moreira R.M.L.M., Paiva A.C.R.","25925193000;7102683763;","Towards a pattern language for model-based GUI testing",2014,"ACM International Conference Proceeding Series","09-13-July-2014",, 2721972,"","",,,"10.1145/2721956.2721972","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955601006&doi=10.1145%2f2721956.2721972&partnerID=40&md5=705124ba8af6ab4748e6b984a6ddf78c","INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal","Moreira, R.M.L.M., INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal; Paiva, A.C.R., INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal","Graphical user interfaces (GUIs) have become popular as they appear in everydays' software. GUIs have become an ideal way of interacting with computer programs, making the software friendlier to its users. GUIs have grown, and so has the usage of UI Patterns featured in GUIs. UI Patterns are recurring solutions to solve common GUI design problems. We developed the notion of UI Test Patterns that, are able to test different implementations of UI Patterns. Therefore, we created a new methodology called Pattern-Based GUI Testing (PBGT) that aims at systematizing and automating the GUI testing process. PBGT samples the input space using UI Test Patterns, which provide a reusable and configurable test strategy, in order to test a GUI that was implemented using a set of UI Patterns. In this paper we present three UI Test Patterns: Login, Master/Detail and Sort. Copyright © 2014 ACM.","GUI Modeling; GUI Testing; Model-Based GUI Testing; Pattern-Based GUI Testing","Computational linguistics; Testing; User interfaces; Graphical user interface (GUIs); GUI designs; GUI testing; Input space; Model-based OPC; Pattern languages; Test Pattern; Test strategies; Graphical user interfaces",,,,,,,,"Alexander, C., Ishikawa, S., Silverstein, M., (1977) A Pattern Language: Towns, Buildings, Construction, , Oxford University Press, Oxford; Arlt, S., Bertolini, C., Pahl, S., Schaf, M., Trends in model-based gui testing (2012) Advances in Computers, 86, pp. 183-222; Costa, P., Nabuco, M., Paiva, A.C.R., Model-based testing for mobile applications (2014) The 9th International Conference on the Quality of Information and Communications Technology, QUATIC, , IEEE Computer Society; Cunha, M., Paiva, A.C.R., Sereno Ferreira, H., Abreu, R., Pettool: A pattern-based gui testing tool (2010) 2nd International Conference on Software Technology and Engineering (ICSTE'10), SFM'12, pp. 202-206; Dubois, J., Tudu Lists, , http://www.julien-dubois.com/tudu-lists.html, Accessed June 2014; El-Far, I.K., Whittaker, J.A., Model-based software testing (2001) Encyclopedia of Software Engineering; Welcome to Facebook-Log In, Sign Up or Learn More, , http://www.facebook.com, Facebook Accessed January 2014; Gamma, E., Helm, R., Johnson, R., Vlissides, J.M., (1994) Design Patterns: Elements of Reusable Object-Oriented Software, , Addison-Wesley Professional 1 edition; Google. Gmail, , www.gmail.com, Accessed February 2014; Hung, S., Australian Charts Portal, , http://australian-charts.com, Accessed February 2012; Kervinen, A., Maunumaa, M., Pakkonen, T., Katara, M., Model-based testing through a GUI (2006) Proceedings of the 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005) Number 3997 in Lecture Notes in Computer Science, (3997), pp. 16-31. , Springer; Martin, R.C., (2003) Agile Software Development: Principles, Patterns, and Practices, , Prentice Hall, PTR; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis Advisors: Mary Lou Soa and Martha Pollack Committee members: Prof. Rajiv Gupta (University of Arizona), Prof. Adele E. Howe (Colorado State University), Prof. Lori Pollock (University of Delaware; Memon, A.M., GUI testing: Pitfalls and process (2002) Computer, 35 (8), pp. 87-88; Meszaros, G., Doble, J., A pattern language for pattern writing (1996) The 3rd Pattern Languages of Programming Conference, pp. 1-33; (2014) Outlook-Sign in, , https://login.live.com/, Microsoft; Search, Buy and Sell Used and New Vehicles, , http://www.mobile.de/?lang=en, mobile.de. mobile.de-Germany's Biggest Vehicle Marketplace Online Accessed November 2013; Moreira, R.M.L.M., Paiva, A.C.R., (2008) Visual Abstract Notation for GUI Modelling and Testing-VAN4GUIM, , ICSOFT (SE/MUSE/GSDCA 104-111. INSTICC Press; Moreira, R.M.L.M., Paiva, A.C.R., (2014) A GUI Modeling DSL for Pattern-Based GUI Testing-PARADIGM, , L. A. Maciaszek and J. Filipe, editors, ENASE. SciTePress; Moreira, R.M.L.M., Paiva, A.C.R., PBGT tool: An integrated modeling and testing environment for pattern-based gui testing ASE ' 14 (2014) Proceedings of the 29th IEEE International Conference on Automated Software Engineering, , ACM; Rodrigo, M., Moreira, L.M., Ana, C., Paiva, R., A novel approach using alloy in domain-specific language engineering (2015) Proceedings of the 3rd International Conference on Model-Driven Engineering and Software Development (MODELSWARD 2015), , ESEO, Angers, Loire Valley, France; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for gui modeling and testing (2013) Proceedings of the 24th International Symposium on Software Reliability Engineering, ISSRE'13, , Pasadena, CA, USA IEEE Computer Society; Nabuco, M., Paiva, A.C.R., Faria, J.P., Inferring user interface patterns from execution traces of web applications Software Quality Workshop of the 14th International Conference on Computational Science and Applications (ICCSA 2014); Ozier, S., TaskFreak! Web Based Task Manager and Todo List, Project Management Made Easy, , http://www.taskfreak.com/original, Accessed June 2014; Paiva, A., Faria, J.C.P., Vidal, R.F.A.M., Specification-based testing of user interfaces (2003) Interactive Systems. Design, Specification, and Verification, 10th International Workshop of LNCS, 2844, pp. 139-153. , Springer; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M., A model-to-implementation mapping tool for automated model-based gui testing (2005) ICFEM of LNCS, 3785, pp. 450-464. , K.-K. Lau and R. Banach, editors Springer; Paterno, F., Mancini, C., Meniconi, S., Concurtasktrees: A diagrammatic notation for specifying task models (1997) Proceedings of the IFIP TC13 International Conference on Human-Computer Interaction, INTERACT '97, pp. 362-369. , London, UK, UK Chapman & Hall, Ltd; Patternry Open-A Free Front-End Resource J Patternry, , http://patternry.com/patterns/, Patternry.Accessed January 2014; (2014) Pattern-Based GUI Testing Wiki, , http://paginas.fe.up.pt/~apaiva/pbgtwiki/doku.php?id=publications, PBGT Accessed August, 2014; Raszka, R., Pttrns-Mobile User Interface Patterns, , http://pttrns.com/, Accessed January 2014; Sacramento, C., Paiva, A.C.R., Web application model generation through reverse engineering and ui pattern inferring (2014) The 9th International Conference on the Quality of Information and Communications Technology, QUATIC, , IEEE Computer Society; Telerik Mobile App Development Platform . NET UI Controls, Web Mobile, Desktop Development Tools, , www.telerik.com, Telerik Accessed January 2014; Tidwell, J., (2011) Designing Interfaces, , O'Reilly, Sebastopol, CA; Toxboe, A., Design Patterns, , http://ui-patterns.com/patterns/, Accessed January 2014; Uasp, I.D.T., Pattern Browser, , http://patternbrowser.org/code/pattern/pattern.php, Accessed January 2014; Van Welie, M., (2008) Interaction Design Pattern Library, , http://www.welie.com/patterns, Accessed January, 2014; Wacha, C., Home-PHP IAddressBook, , http://iaddressbook.org/wiki/, Accessed June 2014; Yahoo! Yahoo! Mail-Sign in to Yahoo, , http://mail.yahoo.com, Accessed January 2014; (2012) Yahoo! Yahoo! Design Pattern Library, , http://developer.yahoo.com/ypatterns, Accessed December, 2013",,,"","Association for Computing Machinery","19th European Conference on Pattern Languages of Programs, EuroPLoP 2014","9 July 2014 through 13 July 2014",,118346,,9781450334167,,,"English","ACM Int. Conf. Proc. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-84955601006
"Pham R., Holzmann H., Schneider K., Brüggemann C.","55320298600;55668294200;35276019200;36719821000;","Tailoring video recording to support efficient GUI testing and debugging",2014,"Software Quality Journal","22","2",,"273","292",,1,"10.1007/s11219-013-9206-2","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84899486308&doi=10.1007%2fs11219-013-9206-2&partnerID=40&md5=5f3fe53d4a0f5a0bb476b2d17b883ff2","Software Engineering Group, Leibniz Universität Hannover, Hannover, Germany; Application Lifecycle Service Center, Capgemini Deutschland GmbH, Hannover, Germany","Pham, R., Software Engineering Group, Leibniz Universität Hannover, Hannover, Germany; Holzmann, H., Software Engineering Group, Leibniz Universität Hannover, Hannover, Germany; Schneider, K., Software Engineering Group, Leibniz Universität Hannover, Hannover, Germany; Brüggemann, C., Application Lifecycle Service Center, Capgemini Deutschland GmbH, Hannover, Germany","Automated GUI tests typically comprise of several test steps that are executed on the GUI before reaching a point of assertion. Comparing a longer and complex execution of a GUI test to its test instructions for debugging is a laborious task: re-establish the test environment, slow down test execution for human perception, and locate the currently executed test step. Video documentation of GUI tests for debugging purposes is already present in several industry tools. However, it is not optimized for effective documentation of on-screen actions nor synched with the executed test instructions. We present a video-based documentation of automated GUI tests that links the executed test case instruction to the on-screen response of the application under test. Screen recording is optimized for speed and memory consumption while all relevant details are captured. Additional browsing capabilities for easier debugging are introduced. Concepts of aspect-oriented programming are adapted for tracing of pre-compiled test case scripts. Our concepts are evaluated by a working implementation, a series of performance measurements during a technical experiment, and industrial experience from 370 real-world test cases carried out in a large software company. The limits of our implementation regarding video capturing and code tracing are explored with a specialized test frame. © 2013 Springer Science+Business Media New York.","Aspect-oriented programming; Automated test; Code tracing; Graphical user interface; Video","Aspect oriented programming; Automation; Graphical user interfaces; Program debugging; Testing; Video recording; Application under tests; Automated test; Code tracing; Industrial experience; Memory consumption; Performance measurements; Video; Video documentation; Software testing",,,,,,,,"Beck, K., (2002) Test Driven Development. By Example, , Amsterdam: Addison-Wesley Longman; Bodkin, R., Colyer, A., Hugunin, J., (2003) Applying aop for middleware platform independence, , Practitioner Reports, AOSD, 2003; Böllert, K., On weaving aspects (1999) Proceedings of the ECOOP'99 workshop on aspect-oriented programming, 1999, , Lisbon, Portugal; Wink [Online], , http://www.debugmode.com/wink, DebugMode, Available, Accessed 2011; Holzmann, H., (2011) Videounterstützte Ablaufverfolgung von Tests für Anwendungen mit grafischer Benutzeroberfläche, , Bachelor Thesis, Leibniz Universität Hannover; Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C., Loingtier, J., Aspect-oriented programming (1997) ECOOP'97-Object-oriented programming, pp. 220-242; Laddad, R., Aspect-oriented programming will improve quality (2003) IEEE Software, 20 (6), pp. 90-91; Le Gall, D., Mpeg: A video compression standard for multimedia applications (1991) Communications of the ACM, 34 (4), pp. 46-58; Memon, A., GUI Testing: Pitfalls and Process (2002) IEEE Computer, 35 (8), pp. 87-88; Expression Encoder Pro [Online], , http://www.microsoft.com/expression/products/encoderpro_overview.aspx, Microsoft, Available, Accessed 2011; IntelliTrace [Online], , http://msdn.microsoft.com/en-us/magazine/ee336126.aspx, Microsoft, Available, Accessed 2011; Team Foundation Server [Online], , http://www.microsoft.com/visualstudio/en-us/products/2010-editions/team-foundation-server/overview, Microsoft, Available, Accessed 2011; Myers, G.J., (1979) The Art of Software Testing, , 1st edn., New York: Wiley; Patel, K., Smith, B., Rowe, L., Performance of a software MPEG video decoder (1993) Proceedings of the first ACM international conference on Multimedia, pp. 75-82; Ranorex [Online], , http://www.ranorex.com, Available, Accessed 2011; Camstudio [Online], , http://camstudio.org, RenderSoft, Available, Accessed 2011; Schneider, K., (2007) Abenteuer Softwarequalität: Grundlagen Und Verfahren für Qualitätssicherung Und Qualitätsmanagement, , Heidelberg: Dpunkt; Sikora, T., MPEG digital video-coding standards (1997) IEEE Signal Processing Magazine, 14 (5), pp. 82-100; Camtasia [Online], , http://www.techsmith.com/camtasia, TechSmith, Available, Accessed 2011; http://www.tightvnc.com, Tightvnc [Online], Available, Accessed 2011; http://www.uvnc.com, Ultravnc [Online]. Available Accessed 2011; http://www.uvnc.com/screenrecorder, Ultravnc Screen Recorder [Online]. Available, Accessed 2011; Wiegand, T., Sullivan, G., Bjontegaard, G., Luthra, A., Overview of the H.264/AVC video coding standard (2003) IEEE Transactions on Circuits and Systems for Video Technology, 13 (7), pp. 560-576; Zimmermann, T., Premraj, R., Bettenburg, N., Just, S., Schroter, A., Weiss, C., What makes a good bug report? (2010) IEEE Transactions on Software Engineering, 35 (5), pp. 618-643","Pham, R.; Software Engineering Group, , Hannover, Germany; email: Raphael.Pham@inf.uni-hannover.de",,,"Kluwer Academic Publishers",,,,,09639314,,,,"English","Softw. Qual. J.",Article,"Final","",Scopus,2-s2.0-84899486308
"Naidu T.J., Basri N.A., Nagenthram S.","56538345700;56538186800;55651218800;","SAHI vs. Selenium: A comparative analysis",2014,"Proceedings of 2014 International Conference on Contemporary Computing and Informatics, IC3I 2014",,, 7019594,"967","970",,3,"10.1109/IC3I.2014.7019594","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84949921894&doi=10.1109%2fIC3I.2014.7019594&partnerID=40&md5=c36ae2dca643f23d66b38220b08ae4a1","Corporate Customer Quality and Strategic Initiative, MIMOS Berhad, Kuala Lumpur, Malaysia","Naidu, T.J., Corporate Customer Quality and Strategic Initiative, MIMOS Berhad, Kuala Lumpur, Malaysia; Basri, N.A., Corporate Customer Quality and Strategic Initiative, MIMOS Berhad, Kuala Lumpur, Malaysia; Nagenthram, S., Corporate Customer Quality and Strategic Initiative, MIMOS Berhad, Kuala Lumpur, Malaysia","Functional testing for wireless based graphic user interfaces is one of the most routine and basic quality verification and validation on telecommunication products. These tests are often done based on requirements and specifications set and defined by product designers and original equipment manufacturers. As manual testing consumes considerable resource, having various time-to-market periods and user scenarios, automation is vital for testing. There are several tools that could perform automation, so we have conducted a study on two of the most commonly used web automation testing tools to allow test engineers and web and wireless software developers to make an informed decision on which tools to use based on their needs and resource. Which tool would give the best user experience? Which is easier to learn and maintain? Which tool needs lesser test resources and how convenient would the setup be for multiple iteration testing cycles? These, among other questions are answered during the course of this white paper © 2014 IEEE.","Automation; Functional testing; Graphical user interface; SAHI; Selenium; Web; Wireless","Automation; Graphical user interfaces; Radio; Selenium; Comparative analysis; Considerable resources; Functional testing; Graphic user interface; Multiple iterations; Original equipment manufacturers; Quality verification; SAHI; Software testing",,,,,,,,"http://en.wikipedia.org/wiki/Manual_testing; http://en.wikipedia.org/wiki/Test_automation; http://en.wikipedia.org/wiki/Sahi_(software; http://en.wikipedia.org/wiki/Selenium_(software; Kaur, M., Kumari, R., Comparative study of automated testing tools: Testcomplete and quicktest pro (2011) International Journal of Computer Applications (0975-8887), 24 (1). , June",,,"Cycle Pure Agarbathies;et al.;HCL;Research Publishing, Singapore (RPS);Siemens;Zebra Technologies","Institute of Electrical and Electronics Engineers Inc.","2014 International Conference on Contemporary Computing and Informatics, IC3I 2014","27 November 2014 through 29 November 2014",,110301,,9781479966295,,,"English","Proc. Int. Conf. Contemp. Comput. Informatics, ICI",Conference Paper,"Final","",Scopus,2-s2.0-84949921894
"Jayagopal P., Nagarajan M.","57191158941;35146549000;","A novel prioritization algorithm model based test-suite generation using regression testing",2014,"Journal of Computer Science","10","2",,"190","197",,1,"10.3844/jcssp.2014.190.197","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84987625525&doi=10.3844%2fjcssp.2014.190.197&partnerID=40&md5=99f7690330093cffcbc9cc49de7a4e0b","Department of Computer Science and Engineering, Sathyabama University, Chennai, India; Sri Ranganathar Institute of Engineering and Technology, Coimbatore Tamil Nadu, India","Jayagopal, P., Department of Computer Science and Engineering, Sathyabama University, Chennai, India; Nagarajan, M., Sri Ranganathar Institute of Engineering and Technology, Coimbatore Tamil Nadu, India","The fully automatic Graphical User Interface tool for any application using novel model based test suite generation techniques for a GUI. They are unable to control response time and time intervals are based on relationship between GUI events handlers and test cases with their responsibilities. We present a novel prioritization algorithm that enhances event handlers for the automated GUI tool. The proposed tool generates GUI events, it Captures and Playback event responses to automatic verification point of the results for the test cases which are written to a log file and corresponding report will be generated. This novel algorithm was able to detect new test suite and ordering of test cases to reduce a GUI fault integration defects. The number of faults detected for a single event are found after generating test cases for the application. The Average Percentage of Fault Detection (APFD) and charts has been used to show the effectiveness of proposed algorithm to find fault detection rate. © 2014 Science Publications.","Capture/Playback; GUI Testing; Novel Prioritization Algorithm; Regression Testing; Test Suite",,,,,,,,,"Alshraideh, M., A complete automation of unit testing for JavaScript programs (2008) J. Comput. Sci., 4, pp. 1012-1019; Ashraf, E., Rauf, A., Mahmood, K., Value based regression test case prioritization (2012) Proceedings of the World Congress on Engineering and Computer Science, , Oct. 24-26, San Francisco, USA; Belli, F., Beyazit, M., Guler, N., Eventoriented, model-based GUI testing and reliability assessment-approach and case study (2012) Adv. Comput., 85, pp. 277-326; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Trans. Soft. Eng., 37, pp. 48-64; Huang, C.Y., Chang, J.R., Chang, Y.H., Design and analysis of GUI test-case prioritization using weight-based methods (2010) J. Syst. Software, 83, pp. 646-659; Jatain, A., Sharma, G., A systematic review of techniques for test case prioritization (2013) Int. J. Comput. Applic., 68, pp. 38-42; Marchetto, A., Tonella, P., Ricca, F., Statebased testing of ajax web applications (2008) Proceedings of the 1st International Conference Software Testing, pp. 121-130. , Verification and Validation, Apr. 9-11, IEEE Xplore Press, Lillehammer; McMinn, P., Harman, M., Binkley, D., Tonella, P., The species per path approach to SearchBased test data generation (2006) Proceedings of International Symposium on Software Testing and Analysis, pp. 13-24. , Jul. 17-20, ACM Press, Portland, ME, USA; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Software Eng. Methodol., 18, pp. 1-36; Prabhu, J., Malmurugan, N., A survey on automated GUI testing procedures (2010) Eur. J. Sci. Res., 64, pp. 456-462; Reimer, J., A History of the GUI (2005), Arc Technical, LLC; Rothermel, G., Huntch, R., Cu, C., Harold, M.J., Prioritizing test cases for regression testing (2001) IEEE Trans. Software Eng., 27, pp. 929-948; Sampath, S., Bryce, R., Memon, A.M., A uniform representation of hybrid criteria for regression testing (2013) IEEE Trans. Soft. Eng., 39, pp. 1326-1344; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an android application (2011) Proceedings of the IEEE 4th International Conference on Software Testing, pp. 377-386. , Verification and Validation, Mar. 21-25, IEEE Xplore Press, Berlin; Yu, Y.T., Lau, M.F., Fault-based test suite Prioritization for specification-based testing (2011) Inform. Software, 54, pp. 179-202; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of the 29th International Conferences on Software Engineering, pp. 396-405. , May 20-26, IEEE Xplore Press, Minneapolis, MN","Jayagopal, P.; Department of Computer Science and Engineering, India",,,"Science Publications",,,,,15493636,,,,"English","J. Comput. Sci.",Article,"Final","All Open Access, Hybrid Gold",Scopus,2-s2.0-84987625525
"Dan H., Harman M., Krinke J., Li L., Marginean A., Wu F.","23395755900;7006379048;6603760534;56311698400;56311537300;56244710800;","Pidgin crasher: Searching for minimised crashing GUI event sequences",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8636 LNCS",,,"253","258",,4,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958543535&partnerID=40&md5=ec3cc68ef16ae32707a5a2475c3e42b8","CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom","Dan, H., CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom; Harman, M., CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom; Krinke, J., CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom; Li, L., CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom; Marginean, A., CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom; Wu, F., CREST, Department of Computer Science, University College London, Malet Place, London, WC1E 6BT, United Kingdom","We present a search based testing system that automatically explores the space of all possible GUI event interleavings. Search guides our system to novel crashing sequences using Levenshtein distance and minimises the resulting fault-revealing UI sequences in a post-processing hill climb. We report on the application of our system to the SSBSE 2014 challenge program, Pidgin. Overall, our Pidgin Crasher found 20 different events that caused 2 distinct kinds of bugs, while the event sequences that caused them were reduced by 84% on average using our minimisation post processor. © 2014 Springer International Publishing Switzerland.",,"Graphical user interfaces; Real time systems; Event sequence; Interleavings; Levenshtein distance; Minimisation; Post processing; Post-processor; Search-based testing; Application programs",,,,,"Engineering and Physical Sciences Research Council, EPSRC: EP/J017515/1",,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Reverse engineering finite state machines from rich internet applications (2008) 15th Working Conference on Reverse Engineering, , (October); Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of Android applications (2012) 28th IEEE International Conference on Software Maintenance (ICSM), , (September); Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) 27th IEEE/ACM International Conference on Automated Software Engineering; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study (2006) Software Testing, Verification and Reliability, 16 (1). , (March); Gross, F., Fraser, G., Zeller, A., EXSYST: Search-based GUI testing (2012) 34th International Conference on Software Engineering, , (June); Harman, M., McMinn, P., Shahbaz, M., Yoo, S., A comprehensive survey of trends in oracles for software testing (2013) Technical Report Research Memoranda CS-13-01, , Department of Computer Science, University of Sheffield; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) International Symposium on Software Testing and Analysis; Langdon, W.B., Harman, M., Optimising existing software with genetic programming (2014) IEEE Transactions on Evolutionary Computation (TEVC), , (to appear); Memon, A.M., GUI testing: Pitfalls and process (2002) Computer, 35 (8). , (August); Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10). , (October); (2014) Pidgin, the Universal Chat Client, , http://www.pidgin.im/, (accessed in); Tan, L., Liu, C., Li, Z., Wang, X., Zhou, Y., Zhai, C., Bug characteristics in open source software (2013) Empirical Software Engineering, , (June); Yoo, S., Harman, M., Test data regeneration: Generating new test data from existing test data (2012) Software Testing, Verification and Reliability, 22 (3). , (May)",,,"Carnegie Mellon University;CREST;et al.;Grupo de Otimizacao em Engenharia de Software (GOES);Mestrado Academico em Ciencia da Computacao (MACC);University College London (UCL)","Springer Verlag","6th International Symposium on Search-Based Software Engineering, SSBSE 2014","26 August 2014 through 29 August 2014","Fortaleza",106733,03029743,9783319099392,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84958543535
"Chen S., Sun D., Miao H., Zeng H.","36650204400;56489074000;16176008900;15754853300;","Modeling and testing of GUIs using IOLTS",2014,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC","1",, 7091288,"35","42",,,"10.1109/APSEC.2014.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951277777&doi=10.1109%2fAPSEC.2014.14&partnerID=40&md5=8cfcf4ca484eed6066a5dcad97ba8086","School of Computer Engineering and Science, Shanghai University, Shanghai, 200436, China; Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 201112, China","Chen, S., School of Computer Engineering and Science, Shanghai University, Shanghai, 200436, China; Sun, D., School of Computer Engineering and Science, Shanghai University, Shanghai, 200436, China; Miao, H., Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 201112, China; Zeng, H., Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 201112, China","Graphical User Interface (GUI) provides a popular and convenient way for the user to freely interact with the systems which makes it widely used in various software applications; it has become an important and indispensable part of today's software. Owing to the characteristics of GUIs different from the traditional software, traditional test techniques and methods cannot satisfy the requirements of GUI testing. Modeling and testing of GUIs-based system is a difficult and challenging work. GUIs-based application is an event-driven application. In GUIs, there exist not only the input events and output events, but also the internal events. In this paper, we identify the input events, output events and internal events and propose an approach to modeling and testing of GUIs-based system using the IOLTS, and input events, output events and internal events are also taken into account. Constraints on events and regular expressions on validation of data are given out. The interactions of GUIs are constructed by the corresponding output events. Finally, tests generation and tests instantiation are given out. © 2014 IEEE.",,"Application programs; Graphical user interfaces; Software engineering; User interfaces; Event driven applications; Graphical user interfaces (GUI); GUI testing; Output events; Regular expressions; Software applications; Test techniques; Software testing",,,,,,,,"Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D Dissertation. Department of Computer Science, University of Pittsburgh, Pittsburgh, PA; Prosise, J., (1999) Programming Windows with MFC, Second Edition, , Microsoft Press; Memon, A., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , Oct; Chen, S., Miao, H., Qian, Z., Modeling and verifying Web browser interactions (2008) Proceedings of the 2008 15th Asia-Pacific Software Engineering Conference, pp. 351-358. , ser. APSEC08. Washington, DC, USA IEEE Computer Society; Jard, C., Jeron, T., TGV: Theory, principles and algorithms: A tool for the automatic synthesis of conformance test cases for non-deterministic reactive systems (2005) Int. J. Softw. Tools Technol. Transf, 7 (4), pp. 297-315. , Aug; Beek, H.M.A.V., Mauw, S., Eindhoven, T.U., Automatic conformance testing of internet applications (2003) Proceedings Third International Workshop on Formal Approaches to Testing of Software, FATES 2003, LNCS, 2931, pp. 205-222. , Springer Verlag; Vries, R., Tretmans, J., On-The-fly conformance testing using SPIN (2000) Int. J. Softw. Tools Technol. Transf, 2 (4), pp. 382-393; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the 11th International Symposium on Software Reliability Engineering, pp. 110-121. , ser. ISSRE00. Washington, DC, USA IEEE CS; Belli, F., Finite-state testing and analysis of Graphical User Interfaces (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, pp. 34-43. , ser. ISSRE01. Washington, DC, USA IEEE Computer Society; Paiva, A., Tillmann, N., Faria, J., Vidal, R., Modeling and testing hierarchical GUIs (2005) Proceedings of 12th International Workshop on Abstract State Machines(ASM05), pp. 329-344. , ser. LNCS. Paris, France Springer Berlin, Heidelberg; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th International Symposium on Fault-Tolerant Computing (FTCS97), pp. 80-94. , Washington, DC, USA IEEE Computer Society; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should i use for effective GUI testing? (2003) Proceedings of 18th IEEE International Conference on Automated Software Engineering ASE03, pp. 164-173. , Oct; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of the 29th International Conference on Software Engineering, pp. 396-405. , ser. ICSE07 Washington, DC, USA IEEE Computer Society; Yuan, X., Generating event sequence-based test cases using GUI runtime state feedback (2011) IEEE Transactions on Software Engineering, 36 (1), pp. 81-95. , Jan; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology (TOSEM, 18 (2), pp. 71-735. , Nov; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267. , ser. ESEC/FSE-9. New York, NY, USA: ACM; Zhao, L., Cai, K., Event handler-based coverage for GUI testing (2011) Proceedings of 10th International Conference on Quality Software (QSIC10), pp. 326-331. , Washington, DC, USA IEEE CS; McMaster, S., Memon, A., Call-stack coverage for GUI test suite reduction (2008) IEEE Transactions on Software Engineering, 34 (1), pp. 99-115. , Jan",,"Gueheneuc Y-G.Kwon G.Cha S.","","IEEE Computer Society","21st Asia-Pacific Software Engineering Conference, APSEC 2014","1 December 2014 through 4 December 2014",,116806,15301362,9781479974252,,,"English","Proc. Asia Pac. Softw. Eng. Conf. APSEC",Conference Paper,"Final","",Scopus,2-s2.0-84951277777
"Ankita, Mittal A., Arora H., Gupta S.","56825915100;56825172800;56825372000;56824714300;","Ameliorating the image matching algorithm of sikuli using artificial neural networks",2014,"International Journal of Applied Engineering Research","9","24",,"23591","23600",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84941121305&partnerID=40&md5=f7dab3aa2ff73e1429af68e786f95ffe","Department of Information Technology, Indira Gandhi Institute of Technology, GGSIP University, Delhi, India; Samsung Research Institute, Noida, India; Samsung Research Institute, Delhi, India","Ankita, Department of Information Technology, Indira Gandhi Institute of Technology, GGSIP University, Delhi, India; Mittal, A., Samsung Research Institute, Noida, India; Arora, H., Samsung Research Institute, Noida, India, Samsung Research Institute, Delhi, India; Gupta, S., Samsung Research Institute, Noida, India, Samsung Research Institute, Delhi, India","Testing an application prior to its release has always been the most important step in the software development lifecycle.Various tools and techniques are available for the same in the market nowadays.But every tool comes with some problems along with the advantages over other tools.Sikuli is one among that long list of software testing tools available. It is an automated testing tool used in GUI testing which tests with the help of images.In this paper, an improvised image matching algorithm for Sikuli testing tool has been proposed which overcomes the problem encountered in the actual tool whilerunning test scripts. The technique which is used in the algorithm is Artificial Neural Network. © Research India Publications.","Automation testing; Grayscale; IDE; Manual testing; Neural network; Sikuli; Test script",,,,,,,,,"Thummalapenta, S., Sinha, S., Singhania, N., Chandra, S., Automating Test Automation (2012) IEEE; Wang, F., Wencai, D., A Test Automation Framework based on Web (2012) IEEE, 11Th International Conference on Computer and Information Science; Dianxiang, X., Weifeng, X., Bavikati, B.K., Eric Wong, W., , “Mining Executable Specifications of Web Applications from Selenium IDE Tests,” (2012) IEEE, Sixth International Conference on Software Security and Reliability; (2012), www.seleniumhq.org, Release 1.0, August 26; Yalla, P., Reddy, L.S., Srinivas, M., Subha Mastan Rao, T., Framework for Testing Web Applications using Selenium Testing tool with respect to Integration Testing (2011) International Journal of Computer Science and Technology; Bruns, R., Kornstädt, R., Wichmann, D., Web Application tests with Selenium (2009) IEEE; http://www.sikuli.org; http://en.wikipedia.org/wiki/Sikuli; Iqbalquraishi, M.D., Pal Choudhury, J., Mallika De, “Image Recognition and Processing Using Artificial Neural Network,” (2012) 1St Int’l Conf. On Recent Advances in Information Technology; Belghini, N., Zarghili, A., Kharroubi, J., Majda, A., Color Facial Authentication System Based on Neural Network (2011) IEEE; Yeo, K.W., Yap, D.F.W., Oh, T.H., Andito, D.P., Kok, S.L., Ho, Y.H., Suaidi, M.K., Grayscale medical image compression using feed forward neural networks International; Kim, J.-M., Kang, M.-A., A study of face recognition using the PCA and Error-back propagation (2010) Second International Conference on Intelligent Human-Machine Systems and Cybernetics; Saravanan, C., Color image to grayscaleimage conversion (2010) Second International Conference on Computer Engineering and Applications; Wang, C., Yang, Y., Robust Face Recognition from Single Training Image per Person via Auto-associative Memory Neural Network (2011) IEEE; Obaidat, M.S., Walk, J.V., An evaluation study of traditional and neural network techniques for image processing applications (1992) IEEE",,,,"Research India Publications",,,,,09734562,,,,"English","Int. J. Appl. Eng. Res.",Article,"Final","",Scopus,2-s2.0-84941121305
"Oliveira R.A.P., Memon A.M., Gil V.N., Nunes F.L.S., Delamaro M.","36812615000;35599876500;56747472700;7102392843;6602659678;","An extensible framework to implement test oracles for non-testable programs",2014,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2014-January","January",,"199","204",,6,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935074236&partnerID=40&md5=778fb3296d6f16acf77a7e70702d9a9d","Dept. of Computer Systems, University of São Paulo - (ICMC/USP), São Carlos, SP, Brazil; Department of Computer Science, University of Maryland - UMD, College Park, MD, United States; Dept. of Computer Systems, University of São Paulo - (EACH/USP), Sao Paulo, SP, Brazil","Oliveira, R.A.P., Dept. of Computer Systems, University of São Paulo - (ICMC/USP), São Carlos, SP, Brazil, Department of Computer Science, University of Maryland - UMD, College Park, MD, United States; Memon, A.M., Department of Computer Science, University of Maryland - UMD, College Park, MD, United States; Gil, V.N., Dept. of Computer Systems, University of São Paulo - (EACH/USP), Sao Paulo, SP, Brazil; Nunes, F.L.S., Dept. of Computer Systems, University of São Paulo - (EACH/USP), Sao Paulo, SP, Brazil; Delamaro, M., Dept. of Computer Systems, University of São Paulo - (ICMC/USP), São Carlos, SP, Brazil","Test oracles evaluate the execution of SUTs (Systems Under Test) supporting testers to decide about correct outputs and behaviors. ""Non-testable"" systems are cases in which the testers must spend extraordinary efforts to judge SUT's outputs. Currently, some contemporary non-testable programs are represented by systems with complex outputs such as GUIs (Graphical User Interface), Web applications, and Text-to-speech (TTS) systems. Currently, there is a lack of knowledge associated with automated test oracles and SUTs with complex outputs. Extensible testing frameworks are necessary to provide the reuse of components and the sharing of knowledge in this field. This paper presents an extensible framework to support the development of test oracles for non-testable programs with complex outputs. In addition, we present an alternative to reuse software engineering components through plug-ins-based frameworks. The framework adapts CBIR (Content-Based Image Retrieval) concepts to enable testers to specify test oracles. The framework matches concepts of signal feature extraction, similarity functions, and object comparisons to obtain a Java program that compares two objects, responding how similar they are, according to a threshold. We performed proofs of concept using two empirical studies and the results showed our framework is useful to alleviate human-oracle efforts supporting human decisions. In addition, the plug-insbased framework we present is a contribution toward a reusing of components on test oracles for systems with complex outputs. Copyright © 2014 by Knowledge Systems Institute Graduate School.","Knowledge engineering; Software testing; Test oracle",,,,,,"2012/06474-1, 2013/01775-6",,,"Chan, W., Tse, T., Oracles are hardly attain'd, and hardly understood: Confessions of software testing researchers (2013) Proceedings of the 13th International Conference on Quality Software (QSIC 2013), pp. 245-252. , Boston, USA; Mateo, P., Usaola, P., Bacterio oracle: An oracle suggester tool (2013) Proceedings of the 25th International Conference on Software Engineering and Knowledge Engineering (SEKE 2013), pp. 300-305. , Boston, USA; Staats, M., Gay, G., Heimdahl, M., Automated oracle creation support, or: How I learned to stop worrying about fault propagation and love mutation testing (2012) Proceedings of the 34th International Conference on Software Engineering (ICSE 2012), pp. 870-880. , Zurich, Switzerland; Weyuker, E.J., On testing non-testable programs (1982) The Computer Journal, 25 (4), pp. 465-470. , Nov; Taylor, P., (2009) Text-to-Speech Synthesis, , 1st ed. Cambridge University Press; Datta, R., Joshi, D., Li, J., Wang, J.Z., Image retrieval: Ideas, influences, and trends of the new age (2008) ACM Computing Surveys, 40 (2), pp. 1-60. , Apr; Davis, M.D., Weyuker, E.J., Pseudo-oracles for non-testable programs (1981) Proceedings of the ACM '81 Conference, pp. 254-257. , ser. ACM '81. New York, NY, USA: ACM; Delamaro, M.E., Nunes, F.L.S., Oliveira, R.A.P., Using concepts of content-based image retrieval to implement graphical testing oracles (2013) Software Testing, Verification and Reliability, 23 (3), pp. 171-198",,,"Knowledge Systems Institute Graduate School","Knowledge Systems Institute Graduate School","26th International Conference on Software Engineering and Knowledge Engineering, SEKE 2014","1 July 2014 through 3 July 2014",,112837,23259000,,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","",Scopus,2-s2.0-84935074236
"Bauersfeld S., Vos T.E.J.","48161076300;8980537100;","User interface level testing with testar; what about more sophisticated action specification and selection?",2014,"CEUR Workshop Proceedings","1354",,,"60","78",,10,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928792767&partnerID=40&md5=39ba96c89d25c331a7ed04db6825ca49","Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Valencia, Spain","Bauersfeld, S., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Valencia, Spain; Vos, T.E.J., Research Center on Software Production Methods (PROS), Universitat Politècnica de València, Valencia, Spain","Testing software applications at the Graphical User Interface (GUI) level is a very important testing phase to ensure realistic tests because the GUI represents a central juncture in the application under test from where all the functionality is accessed. In earlier works we presented the TESTAR tool, a Model-Based approach to automate testing of applications at the GUI level whose objective is to generate test cases based on a model that is automatically derived from the GUI through the accessibility API. Once the model has been created, TESTAR derives the sets of visible and unblocked actions that are possible for each state that the GUI is in and randomly selects and executes actions in order to drive the tests. This paper, instead of random selection, we propose a more advanced action specification and selection mechanism developed on top of our test framework TESTAR. Instead of selecting random clicks and keystrokes that are visible and unblocked in a certain state, the tool uses a Prolog specification to derive sensible and sophisticated actions. In addition, it employs a well-known machine learning algorithm, called Q-Learning, in order to systematically explore even large and complex GUIs. This paper explains how it operates and present the results of experiments with a set of popular desktop applications.",,"Application programs; Artificial intelligence; Graphical user interfaces; Learning algorithms; Learning systems; Specifications; Testing; User interfaces; Action specifications; Application under tests; Desktop applications; Graphical user interfaces (GUI); Model based approach; Random selection; Selection mechanism; Testing software; Software testing",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) Software Testing, Verification and Validation Workshops (ICSTW), 2011 IEEE Fourth International Conference On, pp. 252-261. , March; Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F., A framework for automated testing of javascript web applications (2011) Proceedings of the 33rd International Conference on Software Engineering, ICSE'11, pp. 571-580. , New York, NY, USA, ACM; Bauersfeld, S., De Rojas, A., Vos, T.E.J., Evaluating rogue user testing in industry: An experience report (2014) Research Challenges in Information Science (RCIS), 2014 IEEE Eighth International Conference On, pp. 1-10. , May; Bauersfeld, S., Vos, T., A reinforcement learning approach to automated gui robustness testing (2012) Fast Abstracts of the 4th Symposium on Search-based Software Engineering (SSBSE 2012), pp. 7-12. , IEEE; Bauersfeld, S., Vos, T.E.J., Guitest: A java library for fully automated gui robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 330-333. , ASE 2012, New York, NY, USA, ACM; Bauersfeld, S., Vos, T.E.J., Condori-Ferńandez, N., Bagnato, A., Brosse, E., Evaluating the TESTAR tool in an industrial case study (2014) 2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM'14, p. 4. , Torino, Italy, September 18-19, 2014; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) Software Engineering, 2005. ICSE 2005. Proceedings. 27th International Conference On, pp. 571-579. , May; Bertolini, C., Peres, G., D'Amorim, M., Mota, A., An empirical evaluation of automated black box testing techniques for crashing guis (2009) Software Testing Verification and Validation, 2009. ICST'09. International Conference On, pp. 21-30. , April; Bratko, I., (1986) Prolog Programming for Artificial Intelligence, , Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA; Hofer, B., Peischl, B., Wotawa, F., Gui savvy end-to-end testing with smart monkeys (2009) Automation of Software Test, 2009. AST'09. ICSE Workshop On, pp. 130-137. , May; Huang, S., Cohen, M., Memon, A.M., Repairing gui test suites using a genetic algorithm (2010) ICST 2010: Proceedings of the 3rd IEEE International Conference on Software Testing, Verification and Validation, , Washington, DC, USA, IEEE Computer Society; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) Computer Engineering and Technology (ICCET), 2010 2nd International Conference On, 2, pp. V2297-V2301. , April; Memon, A., Banerjee, I., Nguyen, B., Robbins, B., The first decade of gui ripping: Extensions, applications, and broader impacts Proceedings of the 20th Working Conference on Reverse Engineering (WCRE), p. 2013. , IEEE Press; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Advisors: Mary Lou Soffa and Martha Pollack; Committee members: Prof. Rajiv Gupta University of Arizona, Prof. Adele E. Howe Colorado State University, Prof. Lori Pollock University of Delaware; Miller, B.P., Cooksey, G., Moore, F., An empirical study of the robustness of macos applications using random testing (2006) Proceedings of the 1st International Workshop on Random Testing, RT'06, pp. 46-54. , New York, NY, USA, ACM; Sutton, R.S., Barto, A.G., (1998) Introduction to Reinforcement Learning, , MIT Press, Cambridge, MA, USA, 1st edition",,"Di Ruscio D.Zaytsev V.","","CEUR-WS","7th Seminar on Advanced Techniques and Tools for Software Evolution, SATToSE 2014","9 July 2014 through 11 July 2014",,112061,16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84928792767
"Stocco A., Leotta M., Ricca F., Tonella P.","36882807000;37104276100;24822686600;7003489194;","PESTO: A tool for migrating DOM-based to visual web tests",2014,"Proceedings - 2014 14th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2014",,, 6975638,"65","70",,15,"10.1109/SCAM.2014.36","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924857856&doi=10.1109%2fSCAM.2014.36&partnerID=40&md5=60677a08da763175bdd1f91616d3f92d","Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Fondazione Bruno Kessler, Trento, Italy","Stocco, A., Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Leotta, M., Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Ricca, F., Dipartimento di Informatica, Bioingegneria, Robotica e Ingegneria Dei Sistemi (DIBRIS), Università di Genova, Italy; Tonella, P., Fondazione Bruno Kessler, Trento, Italy","Automated testing of web applications reduces the effort needed in manual testing. Old 1st generation tools, based on screen coordinates, produce quite fragile test suites, tightly coupled with the specific screen resolution, window position and size experienced during test case recording. These tools have been replaced by a 2nd generation of tools, which offer easy selection and interaction with the web elements, based on DOM-oriented commands. Recently, a new 3rd generation of tools came up based on visual image recognition, bringing the promise of wider applicability and simplicity. A tester might ask if the migration towards such new technology is worthwhile, since the manual effort to rewrite a test suite might be overwhelming. In this paper, we propose PESTO, a tool facing the problem of the automated migration of 2nd generation test suites to the 3rd generation. PESTO determines automatically the screen position of each web element located on the DOM by a 2nd generation test case. It then calculates a screenshot image centred around the web element so as to ensure unique visual matching. Then, the entire source code of the DOM-based test suite is transformed into a visual test suite, based on such automatically extracted images and using specific visual commands. © 2014 IEEE.","DOM-based Testing; GUI Testing; Selenium Web Driver; Sikuli; Test Automation; Test Case Maintenance; Test Suite Migration; Visual Testing; Web Testing","Automation; Image recognition; Social networking (online); GUI testing; Sikuli; Test Automation; Test case maintenances; Visual testing; Web testing; Testing",,,,,,,,"Alegroth, E., Nass, M., Olsson, H.H., JAutomate: A tool for systemand acceptance-test automation (2013) Proceedings of 6th International Conference on Software Testing, Verification and Validation, ICST 2013, pp. 439-446. , IEEE; Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proceedings of SIGCHI Conference on Human Factors in Computing Systems, CHI 2010, pp. 1535-1544. , ACM; Chapman, P., Evans, D., Automated black-box detection of side-channel vulnerabilities in web applications (2011) Proceedings of 18th Conference on Computer and Communications Security, CCS 2011, pp. 263-274. , ACM; Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C., Loingtier, J.-M., Irwin, J., Aspect-oriented programming (1997) Lecture Notes in Computer Science (LNCS), 1241, pp. 220-242. , M. Aksit and S. Matsuoka, editors Proceedings of 11th European Conference on Object-Oriented Programming (ECOOP 1997) Springer; Leotta, M., Clerissi, D., Ricca, F., Spadaro, C., Improving test suites maintainability with the page object pattern: An industrial case study (2013) Proceedings of 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013, pp. 108-113. , IEEE; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs. Programmable web testing: An empirical assessment during test case evolution (2013) Proceedings of 20th Working Conference on Reverse Engineering, WCRE 2013, pp. 272-281. , IEEE; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Visual vs. DOM-based web locators: An empirical study (2014) Lecture Notes in Computer Science (LNCS), 8541, pp. 322-340. , S. Casteleyn, G. Rossi, and M. Winckler, editors, Proceedings of 14th International Conference on Web Engineering (ICWE 2014) Springer; Tonella, P., Ricca, F., Marchetto, A., Recent advances in web testing (2014) Advances in Computers, 93, pp. 1-51",,,"","Institute of Electrical and Electronics Engineers Inc.","14th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2014","28 September 2014 through 29 September 2014",,109634,,9780769553047,,,"English","Proc. - IEEE Int. Working Conf. Source Code Anal. Manip., SCAM",Conference Paper,"Final","",Scopus,2-s2.0-84924857856
"Bures M.","14015114200;","Change detection system for the maintenance of automated testing",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8763",,,"192","197",,1,"10.1007/978-3-662-44857-1_15","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921654143&doi=10.1007%2f978-3-662-44857-1_15&partnerID=40&md5=bcb12ed4f4dc48ce364e87acd53f7877","Department of Computer Science, Czech Technical University in Prague, Prague, Czech Republic","Bures, M., Department of Computer Science, Czech Technical University in Prague, Prague, Czech Republic","Maintenance of automated test scripts is one of the important factors leading to success and return of investment of the test automation projects. As the key prerequisite to maintain the scripts correctly, we need to be informed about all relevant changes in the project scope, specification or system under test to be able to reflect them in updates of the test scripts. In this paper we introduce a concept on how to track these changes in semi-automated way with acceptable additional effort. The proposed solution is based on automated detection of changes in test management and requirement management tools, combined with optional manual inputs and automated scanning of changes in system under test user interface. © IFIP International Federation for Information Processing 2014.","Automated detection of change; Better efficiency; Change management; Maintenance of test scripts; Test automation; Traceability","Maintenance; Testing; User interfaces; Automation; Automated detection; Change management; Test Automation; Test scripts; Traceability; Automation; Software testing",,,,,,,,"Rafi, D.M., Benefits and limitations of automated software testing: Systematic literature review and practitioner survey (2012) 7th International Workshop on Automation of Software Test (AST), pp. 36-42. , Zurich, Switzerland; Dustin, E., Garrett, T., Gauf, B., (2009) Implementing Automated Software Testing, pp. 24-26. , Addison-Wesley, Boston; Xie, Q., Memon, A.M., Using a Pilot Study to Derive a GUI Model for Automated Testing (2008) ACM Transactions on Computational Logic, 18 (2). , (November); Van der Alast, L., (2008) TMap Next: Business Driven Test Management, , UTN Publishers, Nederlands; Koomen, T., (2006) TMap Next for result-driven testing, , UTN Publishers, Nederlands; Haswell, J.J., Young, R.J., Schramm, K., (2004) System, method, and article of manufacture for test maintenance in an automated scripting framework, , US Patent 6 701 514 B1 (March 2); Ibbs, C., Wong, C., Kwak, Y., Project Change Management System (2001) Journal of Management in Engineering, 17 (3). , (July)","Bures, M.; Department of Computer Science, Czech Republic; email: buresm3@fel.cvut.cz",,,"Springer Verlag",,,,,03029743,,,,"English","Lect. Notes Comput. Sci.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84921654143
"Sacramento C., Paiva A.C.R.","56483114700;7102683763;","Web application model generation through reverse engineering and UI pattern inferring",2014,"Proceedings - 2014 9th International Conference on the Quality of Information and Communications Technology, QUATIC 2014",,, 6984098,"105","115",,19,"10.1109/QUATIC.2014.20","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921033919&doi=10.1109%2fQUATIC.2014.20&partnerID=40&md5=93e6c81462cd3b5584a4ae876b2b1d78","INESC TEC, Department of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal","Sacramento, C., INESC TEC, Department of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal; Paiva, A.C.R., INESC TEC, Department of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal","A great deal of effort in model-based testing is related to the creation of the model. In addition, the model itself, while a powerful tool of abstraction, can have conceptual errors, introduced by the tester. These problems can be reduced by generating those models automatically. This paper presents a dynamic reverse engineering approach that aims to extract part of the model of an existing web application through the identification of User Interface (UI) patterns. This reverse engineering approach explores automatically any web application, records information related to the interaction, analyses the gathered information, tokenizes it, and infers the existing UI patterns via syntactical analysing. After being complemented with additional information and validated, the model extracted is the input for the Pattern-Based Graphical User Interface Testing (PBGT) approach for testing existing web application under analysis. © 2014 IEEE.","Reverse Engineering; UI Patterns; Web Application; Web Scraping","Graphical user interfaces; Model checking; Reverse engineering; Social networking (online); World Wide Web; Model based testing; Ui patterns; WEB application; Web Application Modeling; Web scrapings; User interfaces",,,,,,,,"Garrett, J.J., (2005) Ajax: A New Approach to Web Applications; Constantine, L.L., Lockwood, L.A., Usage-centered engineering for web applications (2002) Software IEEE, 19 (2), pp. 42-50; Fraternali, P., Rossi, G., Sánchez-Figueroa, F., Rich internet applications (2010) Internet Computing IEEE, 14 (3), pp. 9-12; Van Welie, M., Van Der Veer, G.C., Eliëns, A., Patterns as tools for user interface design (2001) Tools for Working with Guidelines, pp. 313-324. , Springer; Morgado, I.C., Paiva, A.C., Faria, J.P., Camacho, R., Gui reverse engineering with machine learning (2012) Realizing Artificial Intelligence Synergies in Software Engineering (RAISE) 2012 First International Workshop On. IEEE, pp. 27-31; Dalal, S.R., Jain, A., Karunanithi, N., Leaton, J., Lott, C.M., Patton, G.C., Horowitz, B.M., Model-based testing in practice (1999) Proceedings of the 21st International Conference on Software Engineering. ACM, pp. 285-294; Nabuco, M., Paiva, A.C., Camacho, R., Faria, J.P., Inferring ui patterns with inductive logic programming (2013) Information Systems and Technologies (CISTI) 2013 8th Iberian Conference On. IEEE, pp. 1-5; Moreira, R.M., Paiva, A.C., Memon, A., A pattern-based approach for gui modeling and testing (2013) Software Reliability Engineering (ISSRE) 2013 IEEE 24th International Symposium On. IEEE, pp. 288-297; Moreira, R.M.L.M., Paiva, A.C.R., A gui modeling dsl for pattern-based gui testing-Paradigm 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE 2014), 2014, pp. 126-135; Monteiro, T., Paiva, A.C.R., Pattern based GUI testing modeling environment ICST Workshops. IEEE, 2013, pp. 140-143. , http://dblp.uni-trier.de/db/conf/icst/icstw2013.html#MonteiroP13, [Online]. Available; Liliana Vilela, A.C.R.P., Paradigm-cov-a multimensional test coverage analysis tool (2014) CISTI 2014-9l Conferencia Ibrica de Sistemas y Tecnologas de Informacin Barcelona; Moreira, R.M.L.M., Paiva, A.C.R., Towards a pattern language for model-based GUI testing (2014) Proceedings of the 19th European Conference on Pattern Languages of Programs (EuroPLoP 2014); Chikofsky, E.J., Cross, J.H., Reverse engineering and design recovery: A taxonomy (1990) Software IEEE, 7 (1), pp. 13-17; Systä, T., Dynamic reverse engineering of java software (1999) ECOOP Workshops, pp. 174-175; Canfora, G., Di Penta, M., Cerulo, L., Achievements and challenges in software reverse engineering (2011) Communications of the ACM, 54 (4), pp. 142-151; Pacione, M.J., Roper, M., Wood, M., A comparative evaluation of dynamic visualisation tools (2003) 10th Working Conference on Reverse Engineering, pp. 80-89; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Greenwald, A.S., Applying concept analysis to user-session-based testing of web applications (2007) Software Engineering, IEEE Transactions on, 33 (10), pp. 643-658; Amalfitano, D., Fasolino, A.R., Tramontana, P., Rich internet application testing using execution trace data (2010) Software Testing, Verification, and Validation Workshops (ICSTW), 2010 Third International Conference On. IEEE, pp. 274-283; Andjelkovic, I., Artho, C., Trace server: A tool for storing, querying and analyzing execution traces (2011) JPF Workshop, Lawrence, USA; Grilo, A., Paiva, A., Faria, J., Reverse engineering of gui models for testing (2010) Information Systems and Technologies (CISTI), 2010 5th Iberian Conference on, pp. 1-6. , June; Paiva, A.C.R., Faria, J.C.P., Mendes, P.M.C., Reverse engineered formal models for gui testing (2007) FMICS, 4916, pp. 218-233. , http://dblp.uni-trier.de/db/conf/fmics/fmics2007.html#PaivaFM07, ser. Lecture Notes in Computer Science, S. Leue and P. Merino, Eds., Springer, [Online]. Available; Coimbra Morgado, I., Paiva, A., Pascoal Faria, J., Reverse engineering of graphical user interfaces (2011) ICSEA 2011, the Sixth International Conference on Software Engineering Advances, pp. 293-298; Coimbra Morgado, I., Paiva, A.C., Pascoal Faria, J., Dynamic reverse engineering of graphical user interfaces (2012) International Journal on Advances in Software, 5 (3-4), pp. 224-236; Duarte, L.M., Kramer, J., Uchitel, S., Model extraction using context information (2006) Model Driven Engineering Languages and Systems., pp. 380-394. , Springer; Benedikt, M., Freire, J., Godefroid, P., Veriweb: Automatically testing dynamic web sites (2002) Proceedings of 11th International World Wide Web Conference (WW W2002, , Citeseer; Bernardi, M.L., Di Lucca, G.A., Distante, D., Reverse engineering of web applications to abstract user-centered conceptual models (2008) Web Site Evolution, 2008. WSE 2008. 10th International Symposium on, pp. 101-110. , IEEE; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) Software Testing, Verification, and Validation, 2008 1st International Conference on, pp. 121-130. , IEEE; Roest, D., (2010) Automated Regression Testing of Ajax Web Applications, , Master's thesis, Delft University of Technology, February; Memon, A.M., An event-flow model of gui-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) Software Engineering IEEE Transactions on, 38 (1), pp. 35-53; Artzi, S., Dolby, J., Jensen, S.H., Moller, A., Tip, F., A framework for automated testing of javascript web applications (2011) Software Engineering (ICSE), 2011 33rd International Conference on, pp. 571-580. , IEEE; Amalfitano, D., Fasolino, A.R., Tramontana, P., Using dynamic analysis for generating end user documentation for web 2.0 applications (2011) Web Systems Evolution (WSE), 2011 13th IEEE International Symposium on, pp. 11-20. , IEEE; Fard, A.M., Mesbah, A., Feedback-directed exploration of web applications to derive test models (2013) Proceedings of the 24th IEEE International Symposium on Software Reliability Engineering (ISSRE). IEEE Computer Society, p. 10; Dallmeier, V., Burger, M., Orth, T., Zeller, A., Webmate: A tool for testing web 2.0 applications (2012) Proceedings of the Workshop on JavaScript Tools. ACM, pp. 11-15; Dallmeier, V., Burger, M., Orth, T., Zeller, A., Webmate: Generating test cases for web 2.0 (2013) Software Quality. Increasing Value in Software and Systems Development, pp. 55-69. , Springer; Tidwell, J., Designing interface (2010) O'Reilly; Neil, T., 12 Standard Screen Patterns, , http://designingwebinterfaces.com/designing-web-interfaces-12-screen-patterns, Accessed: 2014-01-22. [Online]. Available; Sinnig, D., Gaffar, A., Reichart, D., Forbrig, P., Seffah, A., Patterns in model-based engineering (2005) Computer-Aided Design of User Interfaces IV, pp. 197-210. , Springer; Lin, J., Landay, J.A., Employing patterns and layers for early-stage design and prototyping of cross-device user interfaces (2008) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM, pp. 1313-1322; Pontico, F., Winckler, M., Limbourg, Q., Organizing user interface patterns for e-government applications (2008) Engineering Interactive Systems, pp. 601-619. , Springer; Brin, S., Extracting patterns and relations from the world wide web (1999) The World Wide Web and Databases, pp. 172-183. , Springer; Chang, C.-H., Hsu, C.-N., Lui, S.-C., Automatic information extraction from semi-structured web pages by pattern discovery (2003) Decision Support Systems, 35 (1), pp. 129-147",,"da Silva A.R.da Silva A.R.Machado R.J.Brito M.A.","INOVARIA","Institute of Electrical and Electronics Engineers Inc.","9th International Conference on the Quality of Information and Communications Technology, QUATIC 2014","23 September 2014 through 26 September 2014",,109826,,9781479961337,,,"English","Proc. - Int. Conf. Qual. Inf. Commun. Technol., QUATIC",Conference Paper,"Final","",Scopus,2-s2.0-84921033919
"Pradel M., Schuh P., Necula G., Sen K.","25641744400;56396761600;6603766231;8226489200;","EventBreak: Analyzing the responsiveness of user interfaces through performance-guided test generation",2014,"ACM SIGPLAN Notices","49","10",,"33","47",,11,"10.1145/2660193.2660233","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920754459&doi=10.1145%2f2660193.2660233&partnerID=40&md5=e147b6ed97787b84a0a0584ed287e8a4","EECS Department, University of California, Berkeley, United States","Pradel, M., EECS Department, University of California, Berkeley, United States; Schuh, P., EECS Department, University of California, Berkeley, United States; Necula, G., EECS Department, University of California, Berkeley, United States; Sen, K., EECS Department, University of California, Berkeley, United States","Event-driven user interface applications typically have a single thread of execution that processes event handlers in response to input events triggered by the user, the network, or other applications. Programmers must ensure that event handlers terminate after a short amount of time because otherwise, the application may become unresponsive. This paper presents EventBreak, a performance-guided test generation technique to identify and analyze event handlers whose execution time may gradually increase while using the application. The key idea is to systematically search for pairs of events where triggering one event increases the execution time of the other event. For example, this situation may happen because one event accumulates data that is processed by the other event. We implement the approach for JavaScript-based web applications and apply it to three real-world applications. EventBreak discovers events with an execution time that gradually increases in an unbounded way, which makes the application unresponsive, and events that, if triggered repeatedly, reveal a severe scalability problem, which makes the application unusable. The approach reveals two known bugs and four previously unknown responsiveness problems. Furthermore, we show that EventBreak helps in testing that event handlers avoid such problems by bounding a handler's execution time.","Performance; Responsiveness; Test generation; Testing; Web applications","Human computer interaction; Social networking (online); Testing; World Wide Web; Event-driven; Event-handlers; Interface applications; Performance; Responsiveness; Scalability problems; Test generations; WEB application; User interfaces",,,,,"CCF-0747390, CCF-1017810, CCF-1018729, CCF-1018730, CCF-1423645",,,"Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated GUI performance testing (2011) Softw Qual J, pp. 801-839; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) FSE, p. 59; Azim, T., Neamtiu, I., Targeted and depth-first exploration for systematic testing of android apps (2013) OOPSLA, pp. 641-660; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) ASE, pp. 333-342; Burnim, J., Juvekar, S., Sen, K., WISE: Automated test generation for worst-case complexity (2009) ICSE, pp. 463-473; Choi, W., Necula, G., Sen, K., Guided gui testing of android apps with minimal restart and approximate learning (2013) OOPSLA; Crosby, S.A., Wallach, D.S., Denial of service via algorithmic complexity attacks (2003) SSYM; De Oliveira, A.B., Fischmeister, S., Diwan, A., Hauswirth, M., Sweeney, P.F., Why you should care about quantile regression (2013) ASPLOS, pp. 207-218; Duda, C., Frey, G., Kossmann, D., Matter, R., Zhou, C., Ajax crawl: Making ajax applications searchable (2009) ICDE, pp. 78-89; Ganov, S.R., Killmar, C., Khurshid, S., Perry, D.E., Test generation for graphical user interfaces based on symbolic execution (2008) AST, pp. 33-40; Georges, A., Buytaert, D., Eeckhout, L., Statistically rigorous java performance evaluation (2007) OOPSLA, pp. 57-76; Goldsmith, S., Aiken, A., Wilkerson, D.S., Measuring empirical computational complexity (2007) ESEC/FSE, pp. 395-404; Grechanik, M., Fu, C., Xie, Q., Automatically finding performance problems with feedback-directed learning software testing (2012) ICSE, pp. 156-166; Gulwani, S., Mehra, K.K., Chilimbi, T.M., Speed: Precise and efficient static estimation of program computational complexity (2009) POPL, pp. 127-139; Han, S., Dang, Y., Ge, S., Zhang, D., Xie, T., Performance debugging in the large via mining millions of stack traces (2012) ICSE, pp. 145-155; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation (2013) ISSTA, pp. 67-77; Jin, G., Song, L., Shi, X., Scherpelz, J., Lu, S., Understanding and detecting real-world performance bugs (2012) PLDI, pp. 77-88; Jovic, M., Adamoli, A., Hauswirth, M., Catch me if you can: Performance bug detection in the wild (2011) OOPSLA, pp. 155-170; Khoo, Y.P., Hicks, M., Foster, J.S., Sazawal, V., Directing javascript with arrows (2009) DLS, pp. 49-58; Killian, C.E., Nagaraj, K., Pervez, S., Braud, R., Anderson, J.W., Jhala, R., Finding latent performance bugs in systems implementations (2010) FSE, pp. 17-26; Lambeau, B., Damas, C., Dupont, P., State-merging dfa induction algorithms with mandatory merge constraints (2008) ICGI, pp. 139-153; Liu, Y., Xu, C., Cheung, S., Characterizing and detecting performance bugs for smartphone applications (2014) ICSE; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) ESEC/FSE, pp. 224-234; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) ICST, pp. 121-130; Memon, A.M., An event-flow model of gui-based applications for testing (2007) Softw Test Verif Reliab, pp. 137-157; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of ajax user interfaces (2009) ICSE, pp. 210-220; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling ajax by inferring user interface state changes (2008) ICWE, pp. 122-134; Mi, N., Cherkasova, L., Ozonat, K.M., Symons, J., Smirni, E., Analysis of application performance and its change via representative application signatures (2008) NOMS, pp. 216-223; Mytkowicz, T., Diwan, A., Hauswirth, M., Sweeney, P.F., Producing wrong data without doing anything obviously wrong! (2009) ASPLOS, pp. 265-276; Nistor, A., Song, L., Marinov, D., Lu, S., Toddler: Detecting performance problems via similar memory-access patterns (2013) ICSE, pp. 562-571; Pradel, M., Huggler, M., Gross, T.R., Performance regression testing of concurrent classes (2014) ISSTA, pp. 13-25; Ravindranath, L., Padhye, J., Agarwal, S., Mahajan, R., Obermiller, I., Shayandeh, S., Appinsight: Mobile app performance monitoring in the wild (2012) OSDI, pp. 107-120; Saxena, P., Akhawe, D., Hanna, S., Mao, F., McCamant, S., Song, D., A symbolic execution framework for javascript (2010) S&P, pp. 513-528; Thummalapenta, S., Lakshmi, K.V., Sinha, S., Sinha, N., Chandra, S., Guided test generation for web applications (2013) ICSE, pp. 162-171; Wert, A., Happe, J., Happe, L., Supporting swift reaction: Automatically uncovering performance problems by systematic experiments (2013) ICSE, pp. 552-561; Xiao, X., Han, S., Zhang, D., Xie, T., Context-sensitive delta inference for identifying workload-dependent performance bottlenecks (2013) ISSTA, pp. 90-100; Xu, G., Rountev, A., Detecting inefficiently-used containers to avoid bloat (2010) PLDI, pp. 160-173; Xu, G.H., Arnold, M., Mitchell, N., Rountev, A., Sevitsky, G., Go with the flow: Profiling copies to find runtime bloat (2009) PLDI, pp. 419-430; Xu, G.H., Mitchell, N., Arnold, M., Rountev, A., Schonberg, E., Sevitsky, G., Finding low-utility data structures (2010) PLDI, pp. 174-186; Yan, D., Xu, G.H., Rountev, A., Uncovering performance problems in java applications with reference propagation profiling (2012) ICSE, pp. 134-144; Zaman, S., Adams, B., Hassan, A.E., A qualitative study on performance bugs (2012) MSR, pp. 199-208; Zaparanuks, D., Hauswirth, M., Algorithmic profiling (2012) PLDI, pp. 67-76",,,,"Association for Computing Machinery",,,,,15232867,,,,"English","ACM SIGPLAN Not.",Article,"Final","",Scopus,2-s2.0-84920754459
"Kim D.-K., Lee L.-S.","56431652100;7404389778;","Reverse engineering from exploratory testing to specification-based testing",2014,"International Journal of Software Engineering and its Applications","8","11",,"197","208",,5,"10.14257/ijseia.2014.8.11.18","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84913601742&doi=10.14257%2fijseia.2014.8.11.18&partnerID=40&md5=e05534ec19da54adac60f14a9dee60ce","Department of Computer Engineering, Kumoh National Institute of Technology, 61, Daehak-ro, Gumi-si, Gyeongsangbuk-do, 730-701, South Korea","Kim, D.-K., Department of Computer Engineering, Kumoh National Institute of Technology, 61, Daehak-ro, Gumi-si, Gyeongsangbuk-do, 730-701, South Korea; Lee, L.-S., Department of Computer Engineering, Kumoh National Institute of Technology, 61, Daehak-ro, Gumi-si, Gyeongsangbuk-do, 730-701, South Korea","GUI testing takes a crucial role of acceptance testing. SBT (Specification-based Testing) and ET (exploratory testing) are mainly used for GUI testing. SBT is not practical because it requires high level experts and a lot of efforts for creating specifications. Therefore, in most cases, test cases are manually written based on ET by testers. However, ET requires heavy labor cost for enhancing coverages. Thus, it is not programmatic for better coverage than SBT. In this paper, to take advantages of SBT we proposed a method applying a reverse engineering concept which automatically generates formal specifications from manually written test cases. The paper also proposed a method to expand uncovered test paths and test data. The generated specifications could contribute to enhance the quality of software with a few additional manual tasks. © 2014 SERSC.","Exploratory testing; GUI testing; Reverse engineering; Software engineering; Software testing; Specification based testing",,,,,,,,,"Zechner, M.S., Exploratory GUI Application Testing and Productivity (2004), M.Sc. thesis, University of Tampere, December; Kim, Y.G., Hong, H.S., Bea, D.H., Cha, S.D., Test cases generation from UML state diagrams (1999) IEEE Softwar, 146, pp. 187-192. , August; Srinivasan, J., Leveson, N., Automated Testing from Specifications (2002) Digital Avionics Systems Conference 2002. Proceedings, 1. , 6A2-1-6A2-8; Gaarsdal, J., Sonderskov, J.E., Automated-GUI-Testing-on-Low-Resource-Embedded-Systems (2014), Master's Thesis In Technical Information Technology, June 2; Beer, A., Ramler, R., The Role of Experience in Software Testing Practice (2008) Proceedings of Euromicro Conference on Software Engineering and Advanced Applications, pp. 258-265; Meszaros, G., Agile Regression Testing Using Record&Playback (2003) Companion of the 18th Ann. ACM Sigplan Conf. Object-Oriented Programming, Systems, Languages, and Applications (Oopsla 03), pp. 353-360. , ACM Press; Chang, T., Yeh, T., Miller, R., GUI Testing Using Computer Vision (2010), CHI; Yeh, T., Chang, T., Miller, R.C., Sikuli: Using GUI Screenshots for Search and Automation (2009) ACM Conference on User Interface Software and Technology (UIST), pp. 183-192; Sarma, M., Kundu, D., Mall, R., Automated Test Cases Generation from UML Sequence Diagram (2007) Advanced Computing and Communications (ADCOM), International Conference, , December 18-21; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.A.M., A Model-to-implementation Mapping Tool for Automated Model-based GUI Testing (2005) Formal Methods and Software Engineering, Lecture Notes in Computer Science, 3785, pp. 450-464; Voigt, R., Fazal, K., Reza, H., Specification-based Testing Method Using Testing Flow Graphs (2007) Software Engineering Advances (ICSEA), International Conference, , August 25-31; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-Based Testing of Object-Oriented Reactive Systems with Spec Explorer (2008) Formal method and testing, pp. 39-76; Ricca, F., Tonella, P., Analysis and Testing ofWeb Applications (2001) ICSE '01 Proceedings of the 23rd International Conference on Software Engineering, pp. 25-34; Memon, A., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing (2003) WCRE '03, IEEE Computer Society, pp. 260-269; Baxter, I.D., Mehlich, M., Reverse Engineering is Reverse Forward Engineering (1997) WCRE, Proceedings of the Fourth Working Conference, , October 6-8","Lee, L.-S.; Department of Computer Engineering, Kumoh National Institute of Technology, 61, Daehak-ro, South Korea",,,"Science and Engineering Research Support Society",,,,,17389984,,,,"English","Int. J. Softw. Eng. Appl.",Article,"Final","",Scopus,2-s2.0-84913601742
"Darab M.A.D., Chang C.K.","55646608600;7407043131;","Black-box test data generation for GUI testing",2014,"Proceedings - International Conference on Quality Software",,, 06958397,"133","138",,5,"10.1109/QSIC.2014.42","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84912122759&doi=10.1109%2fQSIC.2014.42&partnerID=40&md5=dda6b534c2eb6c4001c5c43cddefc9a0","Department of Computer Science, Iowa State University, Ames, Iowa, 50011-1301, United States","Darab, M.A.D., Department of Computer Science, Iowa State University, Ames, Iowa, 50011-1301, United States; Chang, C.K., Department of Computer Science, Iowa State University, Ames, Iowa, 50011-1301, United States","Effective system testing of applications with a Graphical User Interface (GUI) front-end demands careful generation of event sequences as well as providing relevant test data for parameterized widgets, i.e., widgets that accept input values such as textboxes and textareas. Current GUI testing techniques either manipulate the source code of the application under test (AUT) to generate the test data, or blindly use a set of random string values. In this paper, we propose a third novel way to generate relevant test data for GUI testing. We exploit the information provided in the GUI structure to extract a set of key identifiers for each parameterized widget. These identifiers are used to compose appropriate search phrases and collect relevant test data from the Internet. The results of an empirical study on five GUI-based applications show that the proposed approach is applicable and can get some hard-to-cover branches in the subject programs to execute. The proposed technique works from the black-box perspective and is entirely independent from GUI modeling and event sequence generation, thus it does not need access to the source code of AUT and provides an opportunity to be integrated with the existing GUI testing frameworks. © 2014 IEEE.","Model-based GUI Testing; Parameterized Widget; Test Data Generation","Acceptance tests; Application programs; Black-box testing; Data communication systems; Parameterization; Application under tests; Effective systems; Empirical studies; Event sequence; Graphical user interfaces (GUI); GUI testing; Parameterized; Test data generation; Graphical user interfaces",,,,,,,,"Utting, M., Legeard, B., (2007) Practical Model-Based Testing-A Tools Approach, , Morgan Kaufmann; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. dissertation, University of Pittsburgh; Darvish, A., Chang, C., Guidiva: Automated discovery and validation of state-based gui invariants (2014) COMPSAC 14 IEEE Computer Society; Nguyen, B.N., Memon, A., An observe-model-exercise paradigm to test event-driven systems with undetermined input spaces (2014) IEEE Trans. Softw. Eng, 40 (3), pp. 216-234; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) ISSTA 12, pp. 67-77; Arlt, S., Banerjee, I., Bertolini, C., Memon, A.M., Schf, M., Greybox gui testing: Efficient generation of event sequences (2012) CoRR, , abs/1205.4928; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., Autoblacktest: Automatic black-box testing of interactive applications (2012) ICST 12, pp. 81-90; Bauersfeld, S., Wappler, S., Wegener, J., (2011) A Metaheuristic Approach to Test Sequence Generation for Applications with A Gui, , SBSE 11. Springer-Verlag; Yuan, X., Cohen, M.B., Memon, A.M., Gui interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37, pp. 559-574; Ganov, S., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing gui applications (2009) ICFEM 09, pp. 69-87; Yuan, X., Memon, A.M., Generating event sequence-based test cases using gui runtime state feedback (2010) IEEE Trans. Softw. Eng, 36 (1), pp. 81-95. , Jan; Memon, A., Pollack, M.E., Soffa, M.L., Hierarchical gui test case generation using automated planning (2001) IEEE Trans. Softw. Eng, 27 (2), pp. 144-155; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) ISSRE 01 IEEE Computer Society, pp. 34-43; Ghosh, I., Shafiei, N., Li, G., Chiang, W.-F., Jst: An automatic test generation tool for industrial java applications with strings (2013) ICSE 13 IEEE Press, pp. 992-1001; Apache Common Validator, , http://commons.apache.org/proper/commons-validator/, Apache; Shahbaz, M., McMinn, P., Stevenson, M., Automatic generation of valid and invalid test data for string validation routines using web searches and regular expressions (2014) Elsevier Journal of Science of Computer Programming; Memon, A., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE 03 EEE Computer Society, pp. 260-269; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng, 31 (10), pp. 884-896; Qing, X., Memon, A., Using a pilot study to derive a gui model for automated testing (2008) ACM Trans. Softw. Eng. Methodol, 18, pp. 71-735; Galitz, W.O., (2007) The Essential Guide to User Interface Design: An Introduction to GUI Design Principles and Techniques, , Wiley; Andoni, A., (2009) Nearest Neighbor Search: The Old, the New, and the Impossible, , Ph.D. dissertation Massachusett Institute of Technology; Corporation, O., Java Swing Library Documentation, , http://docs.oracle.com/javase/7/docs/technotes/guides/swing/; Toutanova, K., Stanford Log-linear Part-of-speech Tagger, , http://nlp.stanford.edu/software/tagger.shtml; http://sourceforge.net/projects/jazzy, Jazzy; Atkinson, K., Spell Checking Oriented, , http://wordlist.sourceforge.net/, word lists (scowl); Regexlib Library, , http://regexlib.com/, RegExLib; Yuan, X., Cohen, M., Memon, A., Covering array sampling of Input event sequences for automated gui testing (2007) ASE 07 ACM, pp. 405-408; McMaster, S., Memon, A.M., Call-stack coverage for GUI test-suite reduction (2008) IEEE Trans. Softw. Eng; Tracey, N., Clark, J., Mander, K., McDermid, J., An automated framework for structural test-data generation (1998) ASE 98 IEEE Computer Society, pp. 285-288; Demillo, R.A., Offutt, A.J., Constraint-based automatic test data generation (1991) IEEE Trans. Softw. Eng, 17 (9), pp. 900-910. , Sep; King, J.C., A new approach to program testing (1975) SIGPLAN Not, 10 (6), pp. 228-233. , Apr; Godefroid, P., Klarlund, N., Sen, K., Dart: Directed automated random testing (2005) SIGPLAN Not, 40 (6), pp. 213-223. , Jun; McMinn, P., Search-based software test data generation: A survey: Research articles (2004) Softw. Test. Verif. Reliab, 14 (2), pp. 105-156. , Jun; Afshan, S., McMinn, P., Stevenson, M., Evolving readable string test inputs using a natural language model to reduce human oracle cost (2013) ICST 13 IEEE Computer Society, pp. 352-361; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for gui-based software applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1), p. 4; McMinn, P., Shahbaz, M., Stevenson, M., Search-based test input generation for string data types using the results of web queries (2012) ICST 12 IEEE Computer Society, pp. 141-150","Darab, M.A.D.; Department of Computer Science, Iowa State UniversityUnited States",,"Sapientia et Virtus;UT Dallas","IEEE Computer Society","14th International Conference on Quality Software, QSIC 2014","2 October 2014 through 3 October 2014",,109264,15506002,9781479971978,,,"English","Proc. Int. Conf. Qual. Softw.",Conference Paper,"Final","",Scopus,2-s2.0-84912122759
"Li A., Qin Z., Chen M., Liu J.","57220780821;56012519500;55581519700;55705933200;","ADAutomation: An activity diagram based automated GUI testing framework for smartphone applications",2014,"Proceedings - 8th International Conference on Software Security and Reliability, SERE 2014",,, 6895417,"68","77",,15,"10.1109/SERE.2014.20","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910030377&doi=10.1109%2fSERE.2014.20&partnerID=40&md5=44f18244d13d68c6995e6920ea12ff8d","Shanghai Key Lab of Trustworthy Computing, East China Normal University, Shanghai, China","Li, A., Shanghai Key Lab of Trustworthy Computing, East China Normal University, Shanghai, China; Qin, Z., Shanghai Key Lab of Trustworthy Computing, East China Normal University, Shanghai, China; Chen, M., Shanghai Key Lab of Trustworthy Computing, East China Normal University, Shanghai, China; Liu, J., Shanghai Key Lab of Trustworthy Computing, East China Normal University, Shanghai, China","Under the increasing complexity and time-to-market pressures, functional validation is becoming a major bottleneck of smartphone applications running on mobile platforms (e.g., Android, iOS). Due to the GUI (Graphical User Interface) intensive nature, the execution of smartphone applications heavily relies on the interactions with users. Manual GUI testing is extremely slow and unacceptably expensive in practice. However, the lack of formal models of user behaviors in the design phase hinders the automation of GUI testing (i.e., test case generation and test evaluation). While thorough test efforts are required to ensure the consistency between user behavior specifications and GUI implementations, few of existing testing approaches can automatically utilize the design phase information to test complex smartphone applications. Based on UML activity diagrams, this paper proposes an automated GUI testing framework called AD Automation, which supports user behavior modeling, GUI test case generation, and post-test analysis and debugging. The experiments using two industrial smartphone applications demonstrate that our approach can not only drastically reduce overall testing time, but also improve the quality of designs. © 2014 IEEE.","Activity diagram; GUI testing; Smartphone applications","Automation; Behavioral research; Design; Signal encoding; Smartphones; Software reliability; Systems analysis; Testing; Activity diagram; Functional validation; GUI (graphical user interface); GUI testing; Smart-phone applications; Test case generation; UML activity diagrams; User behavior modeling; Graphical user interfaces",,,,,,,,"http://en.wikipedia.org/wiki/IOSAppStore, App Store (iOS); https://github.com/jonathanpenn/ui-auto-monkey, UI AutoMonkey; http://code.google.com/p/robotium, Android Robotium; http://xyo.net/app-downloads-reports, Xyologic App Download Statistics; Rumbaugh, J.E., Jacoboson, I., Booch, G., (2001) The Unified Modeling Language User Guide, , Addison-Wesley; http://www.omg.org/spec/UML/2.4/Superstructure/Beta2/PDF, UML Superstructure V2.4; Wang, L., Yuan, J., Yu, X., Hu, J., Li, X., Zheng, G., Generating test cases from UML activity diagram based on gray-box method (2004) Prof. of Asia-Pacific Software Engineering Conference (APSEC), pp. 284-291; Chen, M., Qiu, X., Li, X., Automatic test case generation for UML activity diagrams (2006) Proc. of International Workshop on Automation of Software Test (AST), pp. 2-8; Chen, M., Mishra, P., Kalita, D., Coverage-driven automatic test generation for UML activity diagrams (2006) Proc. of ACM Great Lakes Symposium on VLSI (GLSVLSI), pp. 139-142; Chen, M., Qiu, X., Xu, W., Wang, L., Zhao, J., Li, X., UML activity diagram-based automatic test case generation for java programs (2009) The Computer Journal, 52 (5), pp. 545-556; Chen, M., Qin, X., Koo, H., Mishra, P., (2012) System-Level Validation: High-Level Modeling and Directed Test Generation Techniques, , Springer; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Prof. of International Symposium on Foundations of Software Engineering (FSE), pp. 256-267; Peterson, J.L., (1981) Petri Nets Theory and the Modeling of Systems, , Prentice-Hall, NJ; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an Android application (2011) Proc. of International Conference on Software Testing, Verification and Validation, pp. 377-386; Dalal, A.R., Jain, A., Karunanithi, N., Leaton, J.M., Lott, C.M., Patton, G.C., Horowitz, B.M., Model-based testing in practice (1999) Proc. of International Conference on Software Engineering (ICSE), pp. 285-294; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeie, J., Automation of GUI testing using a model-driven approach (2006) Proc. of International Workshop on Automation of Software Test (AST), pp. 9-14; Shehady, R., Siewiorek, D., A method to automate user interface testing using variable finite state machines (1997) Proc. of International Symposium on Fault Tolerant Computing (FTCS), pp. 80-88; Reza, H., Endapally, S., Grant, E., A model-based approach for testing GUI using hierarchical predicate transition nets (2007) Proc. of International Conference on Information Technology: New Generations, pp. 366-370; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2005) Proc. of International Conference on Software Maintenance (ICSM), pp. 473-482; Arlt, S., Bertolini, C., Pahl, S., Schaf, M., Trends in model-based GUI testing (2012) Advances in Computers, 86, pp. 183-222; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proc. of International Symposium on Software Reliability Engineering (ISSRE), pp. 34-43; Arlt, S., Podelski, A., Bertolini, C., Schaf, M., Banerjee, I., Memon, A., Lightweight static analysis for GUI testing (2012) Proc. of International Symposium on Software Reliability Engineering (ISSRE), pp. 301-310; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) Proc. of International Conference on Software Engineering (ICSE), pp. 997-1000; Gross, F., Fraser, G., Zeller, A., EXSYST: Search-based GUI testing (2012) Proc. of International Conference on Software Engineering (ICSE), pp. 1423-1426; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proc. of International Conference on Automated Software Engineering (ASE), pp. 258-261; Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) Proc. of International Conference on Software Engineering (ICSE), pp. 959-960; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proc. of International Conference on Software Engineering (ICSE), pp. 396-405; Chang, T.H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proc. of ACM SIGCHI Conference on Human Factors in Computing Systems (CHI), pp. 1535-1544; Hu, C., Neamtiu, I., Automating GUI testing for Android applications (2011) Proc. of International Workshop on Automation of Software Test (AST), pp. 77-83; Brooks, P.A., Memon, A.M., Introducing a test suite similarity metric for event sequence-based test cases (2009) Proc. of International Conference on Software Maintenance (ICSM), pp. 243-252; Rauf, A., Anwar, S., Jaffer, M.A., Shahid, A.A., Automated GUI test coverage analysis using GA (2010) Proc. of International Conference on Information Technology : New Generations, pp. 1057-1062; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Memon, A.M., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; http://www.kodak.com/go/mobileprinting, KODAK PicFlick; https://github.com/Xuzz/newsyc; http://www.sparxsystems.com, Enterprise Architect; https://developer.apple.com/xcode, Xcode 4, Apple Developer; Hu, C., Neamtiu, I., A GUI bug finding framework for Android applications (2011) Proc. of the ACM Symposium on Applied Computing (SAC), pp. 1490-1491","Chen, M.; Shanghai Key Lab of Trustworthy Computing, East China Normal UniversityChina",,"","Institute of Electrical and Electronics Engineers Inc.","8th International Conference on Software Security and Reliability, SERE 2014","30 June 2014 through 2 July 2014",,114566,,9781479942961,,,"English","Proc. - Int. Conf. Softw. Secur. Reliab., SERE",Conference Paper,"Final","",Scopus,2-s2.0-84910030377
"Amalfitano D., Amatucci N., Fasolino A.R., Gentile U., Mele G., Nardone R., Vittorini V., Marrone S.","25926238800;55843621200;7006159957;56352190200;56352190100;50861911000;6701381302;57203296376;","Improving code coverage in android apps testing by exploiting patterns and automatic test case generation",2014,"WISE 2014 - Proceedings of the 2014 ACM International Workshop on Long-Term Industrial Collaboration on Software Engineering, Co-located with ASE 2014",,,,"29","34",,7,"10.1145/2647648.2656426","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908645493&doi=10.1145%2f2647648.2656426&partnerID=40&md5=a257ffe40a8fd8c703e9e69893206a86","Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Seconda Universitá di Napoli, Dip. di Matematica e Fisica, viale Lincoln, 5, Caserta, Italy","Amalfitano, D., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Amatucci, N., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Fasolino, A.R., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Gentile, U., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Mele, G., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Nardone, R., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Vittorini, V., Universitá di Napoli Federico II, DIETI, via Claudio, 21, Naples, Italy; Marrone, S., Seconda Universitá di Napoli, Dip. di Matematica e Fisica, viale Lincoln, 5, Caserta, Italy","This work aims at defining a procedure and a set of mechanisms able to improve the quality of the code coverage in automated software reverse engineering processes, and specifically in automated GUI-driven testing of Android apps. Existing automated model-based testing techniques, based on reverse engineering, generate test cases which can be executed directly on the software's GUI. We propose to augment the code coverage of these techniques, by exploiting information from patterns, defined at different levels (application design, state-based model, interaction with Android services), and generating additional test cases that may in crease the coverage capability of GUI-Ripping based testing technique. The generation of the additional test cases is accomplished by defining an automatable procedure which exploits an existing GUI testing approach and a pattern based approach used in a different context. Copyright 2014 ACM.","Automatic test case generation; GUI testing; Mobile applications; Model driven engineering; Reverse engineering","Android (operating system); Automatic programming; Automation; Codes (symbols); Graphical user interfaces; Model checking; Reverse engineering; Software engineering; Application design; Automated modeling; Automatic test-case generations; GUI testing; Mobile applications; Model-driven Engineering; Software reverse engineering; State-based models; Software testing",,,,,,,,"Android Developers, the Developer's Guide, , http://developer.android.com/guide/developing/tools/monkey.htm, UI/Application Exerciser Monkey; CRYSTAL, CRitical SYSTem Engineering AcceLeration, , http://www.crystal-artemis.eu/; (2014) Mobile Design Pattern Gallery: UI Patterns for Smartphone Apps, , Oreilly & Associates Inc; Amalfitano, D., Fasolino, A., Tramontana, P., Amatucci, N., Considering context events in event-based testing of mobile applications (2013) Software Testing, Verification and Validation Workshops (ICSTW), 2013 IEEE Sixth International Conference on, pp. 126-133. , March; Amalfitano, D., Fasolino, A., Tramontana, P., De Carmine, S., Imparato, G., A toolset for gui testing of android applications (2012) 2013 IEEE International Conference on Software Maintenance, pp. 650-653; Amalfitano, D., Fasolino, A.R., Tramontana, P., Ta, B., Memon, A., Mobiguitar-A tool for automated model-based testing of mobile apps (2014) IEEE Software, 99, p. 1. , PrePrints; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE '12, pp. 591-5911. , New York, NY, USA, ACM; Gargantini, A., Heitmeyer, C., Using model checking to generate tests from requirements specifications (1999) SIGSOFT Softw. Eng. Notes, 24 (6), pp. 146-162; Gentile, U., Marrone, S., Mele, G., Nardone, R., Peron, A., (2014) Test Specification Patterns for the Automatic Generation of Test Sequences, 8718. , Springer-Verlag; Hicinbothom, J.H., Zachary, W.W., (1993) Tool for Automatically Generating Transcripts of Human-computer Interaction, 2, p. 1042; Machiry, A., Tahiliani, R., Naik, M., Dynodroid: An input generation system for android apps (2013) Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, pp. 224-234. , New York, NY, USA, ACM; Marrone, S., Flammini, F., Mazzocca, N., Nardone, R., Vittorini, V., Towards model-driven v&v assessment of railway control systems (2014) International Journal on Software Tools for Technology Transfer, pp. 1-15; Memon, A., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, WCRE '03, p. 260. , Washington, DC, USA, IEEE Computer Society; Memon, A., Banerjee, I., Nguyen, B., Robbins, B., (2013) The First Decade of Gui Ripping: Extensions, Applications, and Broader Impacts, pp. 11-20; Soundarajan, N., Hallstrom, J., Shu, G., Delibas, A., Patterns: From system design to software testing (2008) Innovations in Systems and Software Engineering, 4 (1), pp. 71-85; Wang, Z., Elbaum, S., Rosenblum, D.S., Automated generation of context-aware tests (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE '07, pp. 406-415. , Washington, DC, USA, IEEE Computer Society","Amalfitano, D.; Universitá di Napoli Federico II, DIETI, via Claudio, 21, Italy",,"ACM SIGGAI;ACM SIGSOFT;IEEE;Malardalen University Sweden","Association for Computing Machinery, Inc","2014 ACM International Workshop on Long-Term Industrial Collaboration on Software Engineering, WISE 2014 - Co-located with ASE 2014","16 September 2014 through 16 September 2014",,114556,,9781450330459,,,"English","WISE - Proc. ACM Int. Workshop Long-Term Ind. Collab. Softw. Eng., Co-located ASE",Conference Paper,"Final","",Scopus,2-s2.0-84908645493
"Moreira R.M.L.M., Paiva A.C.R.","25925193000;7102683763;","PBGT tool: An integrated modeling and testing environment for pattern-based GUI testing",2014,"ASE 2014 - Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering",,,,"863","866",,22,"10.1145/2642937.2648618","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908612083&doi=10.1145%2f2642937.2648618&partnerID=40&md5=f922cef07a5dd8839d4c33b216b2c091","INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal","Moreira, R.M.L.M., INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Paiva, A.C.R., INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal","Pattern Based GUI Testing (PBGT) is a new methodology that aims at systematizing and automating the GUI testing process. It is supported by a Tool (PBGT Tool) which provides an integrated modeling and testing environment that supports the crafting of test models based on UI Test Patterns, using a GUI modeling DSL called PARADIGM. The tool is freely available as an Eclipse plugin, developed on top of the Eclipse Modeling Framework. This paper presents PBGT Tool, which has been successfully used in several projects, and more recently at industry level. © 2014 ACM.","GUI modeling; GUI Testing; Model-based GUI Testing; Pattern-based GUI Testing","Software engineering; Eclipse modeling framework; Eclipse plugin; GUI testing; Integrated modeling; Test models; Test Pattern; Testing environment; Graphical user interfaces",,,,,,,,"Design Guidelines for Domain Specific Languages, Rossi, M., Sprinkle, J., Gray, J., Tolvanen, J.-P., (2009) Proceedings of the 9th OOPSLA Workshop on Domain-specific Modeling (DSM'09), pp. 7-13; Costa, P., Nabuco, M., Paiva, A.C.R., Model-based testing for mobile applications (2014) The 9th International Conference on the Quality of Information and Communications Technology, QUATIC, , IEEE Computer Society; Jackson, D., (2011) Software Abstractions: Logic, Language, and Analysis, , MIT Press; 2nd Revised edition; Miao, Y., Yang, X., An FSM based GUI test automation model (2010) Control Automation Robotics Vision (ICARCV), 2010 11th International Conference on, pp. 120-126. , Dec; Moreira, R., Paiva, A., Towards a pattern language for model-based GUI testing (2014) Proceedings of the 19th European Conference on Pattern Languages of Programs (EuroPLoP); Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for GUI modelling and testing - VAN4GUIM (2008) ICSOFT (SE/MUSE/GSDCA), pp. 104-111. , INSTICC Press; Moreira, R.M.L.M., Paiva, A.C.R., A GUI Modeling DSL for Pattern-Based GUI Testing - PARADIGM (2014) ENASE, , L. A. Maciaszek and J. Filipe, editors, SciTePress; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for GUI modeling and testing (2013) Proceedings of the 24th International Symposium on Software Reliability Engineering, , ISSRE'13, Pasadena, CA, USA, IEEE Computer Society; Nabuco, M., Paiva, A.C.R., Faria, J.P., Inferring user interface patterns from execution traces of web applications (2014) Software Quality Workshop of the 14th International Conference on Computational Science and Applications (ICCSA); Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.M., Guitar: An innovative tool for automated testing of GUI-driven software (2014) Autom. Softw. Eng., 21 (1), pp. 65-105; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M., A model-to-implementation mapping tool for automated model-based GUI testing (2005) ICFEM, Volume 3785 of LNCS, pp. 450-464. , K.-K. Lau and R. Banach, editors, Springer; Paternò, F., Mancini, C., Meniconi, S., ConcurTaskTrees: A diagrammatic notation for specifying task models (1997) Proceedings of the IFIP TC13 International Conference on Human-computer Interaction, INTERACT'97, pp. 362-369. , London, UK, UK, 6Chapman & Hall, Ltd; Sacramento, C., Paiva, A.C.R., Web application model generation through reverse engineering and UI pattern inferring (2014) The 9th International Conference on the Quality of Information and Communications Technology, QUATIC, , IEEE Computer Society; Strembeck, M., Zdun, U., An approach for the systematic development of domain-specific languages (2009) Softw. Pract. Exper., 39 (15), pp. 1253-1292. , Oct; Tidwell, J., (2011) Designing Interfaces, , O'Reilly, Sebastopol, CA; Vilela, L., Paiva, A.C.R., PARADIGM-COV - A multimensional test coverage analysis tool (2014) 9a Conferencia Ibérica de Sistemas y Tecnologías de Información (CISTI)","Moreira, R.M.L.M.; INESC TEC and Dept. of Informatics Engineering, Faculty of Engineering, University of PortoPortugal",,"ACM SIGARCH;ACM SIGSOFT;IEEE;Malardalen University Sweden","Association for Computing Machinery, Inc","29th ACM/IEEE International Conference on Automated Software Engineering, ASE 2014","15 September 2014 through 19 September 2014",,114557,,9781450330138,,,"English","ASE - Proc. ACM/IEEE Int. Conf. Autom. Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84908612083
"Bae G., Rothermel G., Bae D.-H.","37071921000;57204301736;17433682600;","Comparing model-based and dynamic event-extraction based GUI testing techniques: An empirical study",2014,"Journal of Systems and Software","97",,,"15","46",,11,"10.1016/j.jss.2014.06.039","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908212997&doi=10.1016%2fj.jss.2014.06.039&partnerID=40&md5=88821dc9e475e84b2d16302f464093e9","Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea; University of Nebraska-Lincoln, LincolnNE, United States","Bae, G., Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea; Rothermel, G., Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea, University of Nebraska-Lincoln, LincolnNE, United States; Bae, D.-H., Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea","Graphical user interfaces are pervasive in modern software systems, and to ensure their quality it is important to test them. Two primary classes of automated GUI testing approaches, those based on static models and those based on dynamic event-extraction, present tradeoffs in cost and effectiveness. For example, static model-based GUI testing techniques can create test cases that contain nonexecutable events, whereas dynamic event-extraction based GUI testing techniques can create larger numbers of duplicate test cases. To better understand the effects of these tradeoffs, we created a GUI testing framework that facilitates fair comparison of different GUI testing techniques, and we conducted a controlled experiment comparing representative versions of static-model based and dynamic event-extraction based testing techniques on several GUI-based Java applications. Our study reveals several cost and effectiveness tradeoffs between the techniques, with implications for research and practice. © 2014 Elsevier Inc. All rights reserved.","Dynamic event-extraction based testing; GUI testing; Model-based testing; Test case generation","Dynamic events; Empirical studies; GUI testing; Model based testing; Test case generation",,,,,"10041313

R31-30007

National Science Foundation, NSF: CNS-0720757

Boeing

Air Force Office of Scientific Research, AFOSR: FA9550-10-1-0406

Microsoft

National Research Foundation of Korea, NRF","Gregg Rothermel received the Ph.D. in Computer Science from Clemson University, an M.S. in Computer Science from SUNY Albany, and a B.A. in Philosophy from Reed College. He is Professor and Jensen Chair of Software Engineering in the Department of Computer Science and Engineering at University of Nebraska – Lincoln. His research interests include software engineering and program analysis, with emphases on the application of program analysis techniques to problems in software testing, and on empirical studies. Previous positions include Vice President, QA/QC, Palette Systems, Incorporated. His research has been supported by NSF, AFOSR, Microsoft, Lockheed-Martin, and Boeing.","This work was partly supported by the IT R&D Program of MSIP/KEIT [10041313, UX-oriented Mobile SW Platform], by the World Class University program under the National Research Foundation of Korea funded by the Ministry of Education, Science and Technology of Korea (Project No.: R31-30007), by the National Science Foundation through award CNS-0720757, and by the Air Force Office of Scientific Research through award FA9550-10-1-0406.","Arlt, S., Podelski, A., Bertolini, C., Schaf, M., Banerjee, I., Memon, A.M., Lightweight static analysis for GUI testing (2012) Proceedings of the IEEE International Symposium on Software Reliability Engineering, pp. 301-310; Artzi, S., Dolby, J., Jensen, S.H., Moller, A., Tip, F., A framework for automated testing of javascript web applications (2011) Proceedings of the International Conference on Software Engineering, pp. 571-580; Bae, G., Rothermel, G., Bae, D.-H., On the relative strengths of model-based and dynamic event extraction-based GUI testing techniques: An empirical study (2012) Proceedings of the International Symposium on Software Reliability Engineering, pp. 181-190; Basili, V.R., Selby, R.W., Comparing the effectiveness of software testing strategies (1987) IEEE Trans. Softw. Eng., 13 (12), pp. 1278-1296; Bauersfeld, S., Wappler, S., A metaheuristic approach to test Sequence generation for applications with a GUI, Search Based Software (2011) LNCS, 6956, pp. 173-187; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proceedings of the International Symposium on Software Reliability Engineering, pp. 34-43; Bertolini, C., Peres, G., D'Amorim, M., Mota, A., An empirical evaluation of automated black box testing techniques for crashing GUIs (2009) Proceedings of the International Conference on Software Testing Verification and Validation, pp. 21-30; Bertolini, C., Mota, A., Aranha, E., Ferraz, C., GUI testing techniques evaluation by designed experiments (2010) Proceedings of the Third International Conference on Software Testing, Verification and Validation, pp. 235-244; Borjesson, E., Feldt, R., Automated system testing using visual GUI testing tools: A comparative study in industry (2012) Proceedings of the International Conference on Software Testing, pp. 350-359; Briand, L., Labiche, Y., Wang, Y., Using simulation to empirically investigate test coverage criteria based on statechart (2004) Proceedings of the International Conference on Software Engineering, pp. 86-95; Cai, X., Lyu, M.R., The effect of code coverage on fault detection under different testing profiles (2005) Proceedings of the 1st International Workshop on Advances in Model-based Testing, pp. 1-7; Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 1535-1544; http://cobertura.sourceforge.net/, Cobertura; Cohen, M., Dwyer, M., Constructing interaction test suites for highly-configurable systems in the presence of constraints: A greedy approach (2008) IEEE Trans. Softw. Eng., 34 (5), pp. 633-650; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezzè, M., Automated GUI refactoring and test script repair (2011) Proceedings of the First International Workshop on End-to-End Test Script Engineering, pp. 38-41; Elbaum, S., Gable, D., Rothermel, G., Understanding and measuring the sources of variation in the prioritization of regression test suites (2001) Proceedings of the 7th International Symposium on Software Metrics, pp. 169-179; Forrester, J.E., Miller, B.P., An empirical study of the robustness of windows NT applications using random testing (2000) Proceedings of the 4th USENIX Windows System Symposium, pp. 59-68; Frankl, P.G., Iakounenko, O., Further empirical studies of test effectiveness (1998) Proceedings of the 6th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 153-162; Gove, R., Faytong, J., Identifying infeasible GUI test cases using support vector machines and induced grammars (2011) Proceedings of the Fourth International Conference on Software Testing, Verification and Validation Workshops, pp. 202-211; Gove, R., Faytong, J., Machine learning and event-based software testing: Classifiers for identifying infeasible GUI event sequences (2012) Adv. Comput., 86, pp. 109-135; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009) Proceedings of the International Conference on Software Engineering, pp. 408-418; Grechanik, M., Zie, Q., Fu, C., Experimental assessment of manual versus tool-based maintenance of GUI-directed test scripts (2009) Proceedings of the International Conference on Software Maintenance, pp. 9-18; Gross, F., Fraser, G., Zeller, A., EXSYST: Search-based GUI testing (2012) Proceedings of the International Conference on Software Engineering, pp. 1423-1426; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the International Symposium on Software Testing and Analysis, pp. 67-77; Huang, S., Cohen, M., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proceedings of the International Conference on Software Testing Verification and Validation, pp. 245-254; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments on the effectiveness of dataflow- and control-flow-based test adequacy criteria (1994) Proceedings of the International Conference on Software Engineering, pp. 191-200; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments of the effectiveness of dataflow- and controlflow-based test adequacy criteria (1994) Proceedings of the 16th International Conference on Software Engineering, pp. 191-200; Jones, J.A., Harrold, M.J., Stasko, J., Visualization of test information to assist fault localization (2002) Proceedings of the International Conference on Software Engineering, pp. 467-477; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) Proceedings of the International Conference on Software Testing, Verification, and Validation, pp. 121-130; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) Proceedings of the Fifth International Conference on Software Testing, Verification and Validation, pp. 81-90; McMaster, S., Memon, A.M., An extensible heuristic-based framework for GUI test case maintenance (2009) Proceedings of the First International Workshop on Testing Techniques & Experimentation Benchmarks for Event-Driven Software, pp. 251-254; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the Working Conference on Reverse Engineering, pp. 260-269; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces (PhD Thesis), , Pittsburgh; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 1-36; Myers, B., Rosson, M.B., Survey on user interface programming (1992) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 195-202; Myers, G.J., (2004) The Art of Software Testing, , 2nd ed. John Wiley & Sons Inc; Namin, A.S., Andrews, J.H., The influence of size and coverage on test suite effectiveness (2009) Proceedings of the 18th International Symposium on Software Testing and Analysis, pp. 57-68; Nguyen, B., Robbins, B., Banerjee, I., Memon, A., GUITAR: An innovative tool for automated testing of GUI-driven software (2013) Autom. Softw. Eng., pp. 1-41; Nyman, N., Using monkey test tools (2000) Softw. Test. Qual. Eng. Mag., pp. 18-21; Piwowarski, P., Ohba, M., Caruso, J., Coverage measurement experience during function test (1993) Proceedings of the 15th International Conference on Software Engineering, pp. 287-301; Qu, X., Cohen, M.B., Rothermel, G., Configuration-aware regression testing: An empirical study of sampling and prioritization (2008) Proceedings of the International Symposium on Software Testing and Analysis, pp. 75-86; Reisner, E., Song, C., Ma, K.-K., Foster, J.S., Porter, A., Using symbolic evaluation to understand behavior in configurable software systems (2010) Proceedings of the International Conference on Software Engineering, pp. 445-454; Rothermel, G., Elbaum, S., Malishevsky, A.G., Kallakuri, P., Qiu, X., On test suite composition and cost-effective regression testing (2004) ACM Trans. Softw. Eng. Methodol., 13 (3), pp. 277-331; Shehady, R., Siewiorek, D., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the International Symposium on Fault Tolerant Computing, pp. 80-88; Song, C., Porter, A., Foster, J.S., ITree: Efficiently discovering high-coverage configurations using interaction trees (2012) Proceedings of the International Conference on Software Engineering, pp. 903-913; http://guitar.sourceforge.net, SourceForge.net: GUITAR Home Page - guitar; Strecker, J., Memon, A.M., Accounting for defect characteristics in evaluations of testing techniques (2012) ACM Trans. Softw. Eng. Methodol., 21 (3), pp. 171-1743; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the International Symposium on Software Reliability Engineering, pp. 54-63; Whittaker, J.A., Stochastic software testing (1997) Ann. Softw. Eng., 4, pp. 115-131; Xie, Q., Memon, A., Studying the characteristics of a 'good' GUI test suite (2006) Proceedings of the IEEE International Symposium on Software Reliability Engineering, pp. 159-168; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1); Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 71-735; http://www.yworks.com/en/products_yed_about.html, yED - Graph Editor; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) J. Inf. Softw. Technol., 52 (5), pp. 559-575; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback (2010) IEEE Trans. Softw. Eng., 36 (1), pp. 81-95; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. Soft. Eng., 37 (4), pp. 559-574","Rothermel, G.; University of Nebraska-Lincoln, LincolnUnited States",,,"Elsevier Inc.",,,,,01641212,,JSSOD,,"English","J Syst Software",Article,"Final","",Scopus,2-s2.0-84908212997
"Bauersfeld S., Vos T.E.J., Condori-Fernandez N., Bagnato A., Brosse E.","48161076300;8980537100;6507361130;36052505500;56989268300;","Evaluating the TESTAR tool in an industrial case study",2014,"International Symposium on Empirical Software Engineering and Measurement",,, a4,"","",,10,"10.1145/2652524.2652588","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907813232&doi=10.1145%2f2652524.2652588&partnerID=40&md5=659d24043572d815b9ad9e1271d861ef","Universidad Politecnica de Valencia, Spain; Vrije Universiteit Van Amsterdam, Netherlands; Softeam, Paris, France","Bauersfeld, S., Universidad Politecnica de Valencia, Spain; Vos, T.E.J., Universidad Politecnica de Valencia, Spain; Condori-Fernandez, N., Vrije Universiteit Van Amsterdam, Netherlands; Bagnato, A., Softeam, Paris, France; Brosse, E., Softeam, Paris, France","[Context] Automated test case design and execution at the GUI level of applications is not a fact in industrial practice. Tests are still mainly designed and executed manually. In previous work we have described TESTAR, a tool which allows to set-up fully automatic testing at the GUI level of applications to find severe faults such as crashes or non-responsiveness. [Method] This paper aims at the evaluation of TESTAR with an industrial case study. The case study was conducted at SOFTEAM, a French software company, while testing their Modelio SaaS system, a cloud-based system to manage virtual machines that run their popular graphical UML editor Modelio. [Goal] The goal of the study was to evaluate how the tool would perform within the context of SOFTEAM and on their software application. On the other hand, we were interested to see how easy or difficult it is to learn and implant our academic prototype within an industrial setting. [Results] The effectiveness and efficiency of the automated tests generated with TESTAR can definitely compete with that of the manual test suite. [Conclusions] The training materials as well as the user and installation manual of TESTAR need to be improved using the feedback received during the study. Finally, the need to program Java-code to create sophisticated oracles for testing created some initial problems and some resistance. However, it became clear that this could be solved by explaining the need for these oracles and compare them to the alternative of more expensive and complex human oracles. The need to raise consciousness that automated testing means programming solved most of the initial problems. Copyright 2014 ACM.","software testing at the user interface level; TESTAR","Application programs; Automatic test pattern generation; Automatic testing; Automation; Computer software; Graphical user interfaces; Java programming language; Software engineering; Effectiveness and efficiencies; Industrial case study; Industrial practices; Industrial settings; Interface level; Software applications; TESTAR; Training material; Software testing",,,,,,,,"Bagnato, A., Sadovykh, A., Brosse, E., Vos, T.E.J., The omg uml testing profile in use-an industrial case study for the future internet testing (2013) Software Maintenance and Reengineering (CSMR), 2013 17th European Conference on, pp. 457-460; Bauersfeld, S., De Rojas, A., Vos, T.E.J., Evaluating rogue user testing in industry: An experience report (2014) Proceedings of 8th International Conference RCIS, , IEEE; Bauersfeld, S., Vos, T.E.J., Guitest: A java library for fully automated gui robustness testing (2012) Proc of the 27th IEEE/ACM ASE, pp. 330-333; Benedek, J., Miner, T., Measuring desirability: New methods for evaluating desirability in a usability lab setting (2002) Proceedings of Usability Professionals Association, , Orlando, USA; Grossman, T., Fitzmaurice, G., Attar, R., A survey of software learnability: Metrics, methodologies and guidelines (2009) SIGCHI Conference on Human Factors in Computing Systems, pp. 649-658. , ACM; Harrison, W., Editorial (n=1: An alternative for software engineering research) (1997) Empirical Software Engineering, 2 (1), pp. 7-10; Kitchenham, B., Pickard, L., Pfleeger, S.L., Case studies for method and tool evaluation (1995) Software, IEEE, 12 (4), pp. 52-62. , July; Kruse, P.M., Condori-Fernandez, N., Vos, T.E.J., Bagnato, A., Brosse, E., Combinatorial testing tool learnability in an industrial environment (2013) ESEM 2013, pp. 304-312. , Oct; Senapathi, M., A framework for the evaluation of case tool learnability in educational environments (2005) Journal of Information Technology Education: Research, 4 (1), pp. 61-84. , January; Zendler, A., Horn, E., Schwartzel, H., Plodereder, E., Demonstrating the usage of single-case designs in experimental software engineering (2001) Information and Software Technology, 43 (12), pp. 681-691","Bauersfeld, S.; Universidad Politecnica de ValenciaSpain",,"IEEE Software;Microsoft Research;Politecnico di Torino;Telecom Italia JOL (Joint Open Lab);Telecom Italia Lab","IEEE Computer Society","8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2014","18 September 2014 through 19 September 2014",,108081,19493770,9781450327749,,,"English","Int. Symp. Empir. Softw. Eng. Meas.",Conference Paper,"Final","",Scopus,2-s2.0-84907813232
"Aho P., Kanstrén T., Räty T., Röning J.","35188652400;18434124300;16550820200;6701703474;","Automated extraction of GUI models for testing",2014,"Advances in Computers","95",,,"49","112",,6,"10.1016/B978-0-12-800160-8.00002-4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906748272&doi=10.1016%2fB978-0-12-800160-8.00002-4&partnerID=40&md5=7f24bbb946483e716d15ba7cc82e45fb","VTT Technical Research Centre of Finland, Oulu, Finland; Department of Computer Science, University of Maryland, College Park, MD, United States; Department of Computer Science, University of Toronto, Toronto, Canada; Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, United States; Department of Computer Science and Engineering, University of Oulu, Oulu, Finland","Aho, P., VTT Technical Research Centre of Finland, Oulu, Finland, Department of Computer Science, University of Maryland, College Park, MD, United States; Kanstrén, T., VTT Technical Research Centre of Finland, Oulu, Finland, Department of Computer Science, University of Toronto, Toronto, Canada; Räty, T., VTT Technical Research Centre of Finland, Oulu, Finland, Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, United States; Röning, J., Department of Computer Science and Engineering, University of Oulu, Oulu, Finland","A significant challenge in applying model-based testing on software systems is that manually designing the test models requires considerable amount of effort and deep expertise in formal modeling. When an existing system is being modeled and tested, there are various techniques to automate the process of producing the models based on the implementation. Some approaches aim to fully automated creation of the models, while others aim to automate the first steps to create an initial model to serve as a basis to start the manual modeling process. Especially graphical user interface (GUI) applications, including mobile and Web applications, have been a good domain for model extraction, reverse engineering, and specification mining approaches. In this chapter, we survey various automated modeling techniques, with a special focus on GUI models and their usefulness in analyzing and testing of the modeled GUI applications. © 2014 Elsevier Inc.","Graphical user interfaces; MBGT; Model extraction; Model-based GUI testing; Reverse engineering; Specification mining; Test automation",,,,,,,,,"Yang, X., (2011) Graphic user interface modelling and testing automation, , PhD thesis, School of Engineering and Science, Victoria University, Melbourne, Australia; Silva, J.L., Campos, J.C., Paiva, A.C.R., (2007) Model-based user interface testing with spec explorer and ConcurTaskTrees, pp. 77-93; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 1-36. , article no. 4. ACM, New York, NY; Canny, J., The future of human-computer interaction (2006) ACM Queue, 4 (6), pp. 24-32. , ACM, New York, NY; Myers, B.A., UIMSs, toolkits, interface builders (1995) ACM Trans. Comput. Hum. Interact., 2 (1), pp. 64-103. , Human Computer Interaction Institute, Carnegie Mellon University, May 24, 1996. A revised version from ""User Interface Software Tools""; Memon, A.M., Using reverse engineering for automated usability evaluation of GUI-based applications (2009) Human-Centered Software Engineering: Software Engineering Models, Patterns and Architectures for HCI, pp. 335-355. , Springer, London, A. Seffah, J. Vanderdonckt, M.C. Desmarais (Eds.); Silva, J.C., Saraiva, J.A., Campos, J.C., (2009) A generic library for GUI reasoning and testing, pp. 121-128; Memon, A.M., GUI testing: pitfalls and process (2002) Computer, 35 (8), pp. 87-88. , IEEE Computer Society; Memon, A.M., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) J. Softw. Maint. Evol. Res. Pract., 17 (1), pp. 27-64. , John Wiley & Sons Inc; Myers, B.A., Hudson, S.E., Pausch, R., Past, present, and future of user interface software tools (2000) ACM Trans. Comput. Hum. Interact., 7 (1), pp. 3-28; Myers, B.A., Park, S.Y., Nakano, Y., Mueller, G., Ko, A., (2008) How designers design and program interactive behaviors, pp. 177-184; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., (2010) Reverse engineering of GUI models for testing, pp. 1-6; http://www.msdn.microsoft.com/en-us/library/ms747327(v=vs.110).aspx, Microsoft UI Automation; http://jemmy.java.net, Jemmy, an open source Java library for GUI automation; Li, K., Wu, M., (2004) Effective GUI Test Automation: Developing an Automated GUI Testing Tool, , SYBEX Inc., Alameda, CA; Aho, P., Menz, N., Räty, T., (2013) Dynamic reverse engineering of GUI models for testing, pp. 441-447; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann Publishers Inc, San Francisco, CA; Kanstrén, T., (2010) A Framework for Observation-Based Modelling in Model-Based Testing, , VTT Publications 727, Espoo, Finland; Kull, A., (2012) Automatic GUI model generation: state of the art, pp. 207-212; Systä, T., (2000) Static and Dynamic Reverse Engineering Techniques for Java Software Systems, , Acta Electronica Universitatis Tamperensis 30, Tampere, Finland; Kollmann, R., Selonen, P., Stroulia, E., Systä, T., Zündorf, A., (2002) A study on the current state of the art in tool-supported UML-based static reverse engineering, pp. 22-32; Memon, A.M., Nguyen, B.N., Advances in automated model-based system testing of software applications with a GUI front-end (2010) Adv. Comput., 80, pp. 121-162. , Elsevier Inc; Nguyen, B., (2013) Testing GUI-Based Software with Undetermined Input Spaces, , PhD dissertation, Department of Computer Science, University of Maryland, College Park; Aho, P., Menz, N., Räty, T., (2011) Enhancing generated Java GUI models with valid test data, pp. 310-315; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , John Wiley and Sons Ltd., Chichester, UK; Banerjee, I., Nguyen, B., Garousi, V., Memon, A.M., Graphical user interface (GUI) testing: systematic mapping and repository (2013) Inform. Softw. Technol., 55 (10), pp. 1679-1694. , Elsevier; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Trans. Softw. Eng., 36 (1), pp. 81-95. , IEEE Computer Society; Jacob, R.J.K., Girouard, A., Hirshfield, L.M., Horn, M.S., Shaer, O., Solovey, E.T., Zigelbaum, J., (2008) Reality-based interaction: a framework for post-WIMP interfaces, pp. 201-210; Dam, A., Post-WIMP user interfaces (1997) ACM Commun., 40 (2), pp. 63-67. , ACM, New York, NY; (2004) Guide to the Software Engineering Body of Knowledge: 2004 Version, , IEEE Computer Society Professional Practices Committee IEEE Computer Society; (1996) IEEE Standard Glossary of Software Engineering Terminology, , IEEE ANSI/IEEE Std 610.12-1990, IEEE Standards Association, New York, NY, Reaffirmed 2002; Belli, F., Linschulte, M., (2008) Event-driven modeling and testing of web services, pp. 1168-1173; Yuan, X., Cohen, M., Memon, A.M., GUI interaction testing: incorporating event context (2011) IEEE Trans. Softw. Eng., 37 (4), pp. 559-574. , IEEE Computer Society; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2). , article no. 7. ACM, New York, NY; Iglesias, D., Castro, L.M., Property-based testing for graphical user interfaces (2011) J. Comput. Inform. Technol., 1 (3), pp. 60-71. , Academy Publish; Brooks, P., Robinson, B., Memon, A.M., (2009) An initial characterization of industrial graphical user interface systems, pp. 11-20; Bowen, J., Reeves, S., UI-design driven model-based testing (2013) Innov. Syst. Softw. Eng., 9 (3), pp. 201-215. , Springer, London; Campos, J.C., Saraiva, J., Silva, C., Silva, J.C., (2012) GUIsurfer: a reverse engineering framework for user interface software, pp. 31-54. , InTech; Santos-Neto, P., Resende, R., Pâdua, C., (2007) Requirements for information systems model-based testing, pp. 1409-1415; Bertolino, A., Polini, A., Inverardi, P., Muccini, H., (2004) Towards anti-model-based testing, pp. 124-125; Holzmann, G.Z., Smith, M.H., An automated verification method for distributed systems software based on model extraction (2002) IEEE Trans. Softw. Eng., 28 (4), pp. 364-377. , IEEE Computer Society; Grechanik, M., Xie, Q., Fu, C., (2009) Maintaining and evolving GUI-directed test scripts, pp. 408-418; http://jfcunit.sourceforge.net, jfcUnit, an extension to JUnit framework for testing Java Swing based applications; Andersson, J., Bache, G., (2004) The video store revisited yet again: adventures in GUI acceptance testing, pp. 1-10; http://abbot.sourceforge.net, Abbot, a framework for automated testing of Java GUI components and programs; http://www.froglogic.com/squish/gui-testing, Squish, a GUI test automation tool for functional GUI regression tests; http://marathontesting.com, marathonITE, a Java GUI Test automation framework; Yeh, T., Chang, T., Miller, R.C., (2009) Sikuli: using GUI screenshots for search and automation, pp. 183-192; http://www.sikuli.org, Sikuli, a tool using screenshot images for automating and testing GUIs; http://docs.seleniumhq.org, SeleniumHQ, a tool for automating testing of web applications; http://appium.io, Appium, an open source test automation framework for native and hybrid mobile apps; Kervinen, A., Maunumaa, M., Katara, M., (2006) Controlling testing using three-tier model architecture, pp. 53-66; http://www.sparxsystems.com/products/ea/, Enterprise Architect, a commercial UML modeling tool; http://www.conformiq.com/products/conformiq-designer/, Conformiq Designer, a commercial test modeling and MBT tool; http://msdn.microsoft.com/en-us/library/ee620411.aspx, Microsoft Spec Explorer, a tool that extends Microsoft Visual Studio for creating models of software behavior; Takala, T., Katara, M., Harty, J., (2011) Experiences of system-level model-based GUI testing of an android application, pp. 377-386; Belli, F., (2001) Finite-state testing and analysis of graphical user interfaces, pp. 34-43; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD dissertation, Department of Computer Science, University of Pittsburgh; Belli, F., Nissanke, N., Budnik, C.J., Mathur, A., (2005) Test generation using event sequence graphs: Technical Report 2005/6, , Institute for Electrical Engineering and Information Technology, University of Paderborn, Germany; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., (2006) Automation of GUI testing using a model-driven approach, pp. 9-14; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., (2005) Model-based testing through a GUI, pp. 16-31; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Satama, M., (2006) Towards deploying model-based testing with a domain-specific modeling approach, pp. 81-89; http://tema.cs.tut.fi, TEMA tools, an open source tool set for MBGT; Mauser, D., Klaus, A., Holl, K., (2013) Towards a GUI test model using state charts and programming code, pp. 271-276; Memon, A.M., Soffa, M.L., Pollack, M.E., (2001) Coverage criteria for GUI testing, pp. 256-267; Strecker, J., Memon, A.M., (2008) Relationships between test suites, faults, and fault detection in GUI testing, pp. 12-21; Strecker, J., Memon, A.M., (2007) Faults' context matters, pp. 112-115; Basili, V.R., Selby, R.W., Comparing the effectiveness of software testing strategies (1987) IEEE Trans. Softw. Eng., 13 (12), pp. 1278-1296. , IEEE Computer Society; Offutt, A.J., Hayes, J.H., (1996) A semantic model of program faults, pp. 195-200; Strecker, J., Memon, A.M., Accounting for defect characteristics in evaluations of testing techniques (2012) ACM Trans. Softw. Eng. Methodol., 21 (3). , article no. 17. ACM, New York, NY; Xie, Q., Memon, A.M., (2006) Studying the characteristics of a ""Good"" GUI test suite, pp. 159-168; McMaster, S., Memon, A.M., (2005) Call stack coverage for test suite reduction, pp. 539-548; McMaster, S., Memon, A.M., (2007) Fault detection probability analysis for coverage-based test suite reduction, pp. 335-344; McMaster, S., Memon, A.M., (2006) Call stack coverage for GUI test-suite reduction, pp. 33-44; McMaster, S., Memon, A.M., Call-stack coverage for GUI test suite reduction (2008) IEEE Trans. Softw. Eng., 34 (1), pp. 99-115. , IEEE Computer Society; Brooks, P., Memon, A.M., (2009) Introducing a test suite similarity metric for event sequence-based test cases, pp. 243-252; Bryce, R.C., Memon, A.M., (2007) Test suite prioritization by interaction coverage, pp. 1-7; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Trans. Softw. Eng., 37 (1), pp. 48-64. , IEEE Computer Society; Elsaka, E., Moustafa, W.E., Nguyen, B., Memon, A.M., (2010) Using methods & measures from network analysis for GUI testing, pp. 240-246; Sampath, S., Bryce, R., Memon, A.M., A uniform representation of hybrid criteria for regression testing (2013) IEEE Trans. Softw. Eng., 39 (1), pp. 1326-1344. , IEEE Computer Society; Chikofsky, E.J., Cross, J.H., Reverse engineering and design recovery: a taxonomy (1990) IEEE Softw., 7 (1), pp. 13-17. , IEEE Computer Society; Silva, C.E., Campos, J.C., (2013) Combining static and dynamic analysis for the reverse engineering of web applications, pp. 107-112; Shoham, S., Yahav, E., Fink, S.J., Pistoia, M., Static specification mining using automata-based abstractions (2008) IEEE Trans. Softw. Eng., 34 (5), pp. 651-666. , IEEE Computer Society; Alur, R., Cerny, P., Madhusudan, P., Nam, W., (2005) Synthesis of interface specifications for Java classes, pp. 98-109; Acharya, M., Xie, T., Xu, J., (2006) Mining interface specifications for generating checkable robustness properties, pp. 311-320; Nanda, M.G., Grothoff, C., Chandra, S., (2005) Deriving object type states in the presence of inter-object references, pp. 77-96; Engler, D., Chen, D.Y., Hallem, S., Chou, A., Chelf, B., (2001) Bugs as deviant behavior: a general approach to inferring errors in systems code, pp. 57-72; Ramanathan, M.K., Grama, A., Jagannathan, S., (2007) Path-sensitive inference of function precedence protocols, pp. 240-250; Wasylkowski, A., Zeller, A., Lindig, C., (2007) Detecting object usage anomalies, pp. 35-44; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., (2010) SEIM: static extraction of interaction models, pp. 22-28; Briand, L.C., Labiche, Y., Leduc, J., (2004) Towards the reverse engineering of UML sequence diagrams for distributed, multithreaded Java software: Technical Report, , Carleton University (SCE-04-04); Gross, F., Fraser, G., Zeller, A., (2012) EXSYST: search-based GUI testing, pp. 1423-1426; Kumar, S., Khoo, S.-C., Roychoudhury, A., Lo, D., (2011) Mining message sequence graphs, pp. 91-100; Briand, L., Labiche, Y., Leduc, J., Toward the reverse engineering of UML sequence diagrams for distributed Java software (2006) IEEE Trans. Softw. Eng., 32 (9), pp. 642-663. , IEEE Computer Society; Ammons, G., Bodik, R., Larus, J.R., (2002) Mining specifications, pp. 4-16; Lo, D., Maoz, S., (2008) Mining scenario-based triggers and effects, pp. 109-118; Lorenzoli, D., Mariani, L., Pezze, M., (2008) Automatic generation of software behavioral models, pp. 501-510; Dallmeier, V., Lindig, C., Wasylkowski, A., Zeller, A., (2006) Mining object behavior with ADABU, pp. 17-24; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., (2006) Perracotta: mining temporal API rules from imperfect traces, pp. 282-291; Gabel, M., Su, Z., (2008) Javert: fully automatic mining of general temporal properties from dynamic traces, pp. 339-349; Hamou-Lhadj, A., Braun, E., Amyot, D., Lethbridge, T., (2005) Recovering behavioral design models from execution traces, pp. 112-121; Guo, P.J., Perkins, J.H., McCamant, S., Ernst, M.D., (2006) Dynamic inference of abstract types, pp. 255-265; Whaley, J., Martin, M.C., Lam, M.S., (2002) Automatic extraction of object-oriented component interfaces, pp. 218-228; Burdy, L., Cheon, Y., Cok, D., Ernst, M., Kiniry, J., Leavens, G.T., Leino, K.R.M., Poll, E., An overview of JML tools and applications (2005) Int. J. Softw. Tool Technol. Trans., 7 (3), pp. 212-232. , Springer-Verlag, Berlin, Heidelberg; Systä, T., (1999) On the relationships between static and dynamic models in reverse engineering Java software, pp. 304-313; Schur, M., (2011) Experimental specification mining for enterprise applications, pp. 388-391; Memon, A.M., Banerjee, I., Nagarajan, A., (2003) GUI ripping: reverse engineering of graphical user interfaces for testing, pp. 260-269; Mariani, L., Papagiannakis, S., Pezzé, M., (2007) Compatibility and regression testing of COTS-component-based software, pp. 85-95; Xie, T., Notkin, D., Tool-assisted unit test generation and selection based on operational abstractions (2006) Autom. Softw. Eng., 13 (3), pp. 345-371. , Springer, Kluwer Academic Publishers; Ernst, M.D., Cockrell, J., Griswold, W.G., Notkin, D., Dynamically discovering likely program invariants to support program evolution (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 1-25. , IEEE Computer Society; Fraser, G., Walkinshaw, N., (2012) Behaviourally adequate software testing, pp. 300-309; http://www.cs.waikato.ac.nz/ml/weka, Weka, a collection of machine learning algorithms for data mining tasks; Pradel, M., Gross, T.R., (2012) Leveraging test generation and specification mining for automated bug detection without false positives, pp. 288-298; Pradel, M., Jaspan, C., Aldrich, J., Gross, T.R., (2012) Statically checking API protocol conformance with mined multi-object specifications, pp. 925-935; Zheng, W., Ma, H., Lyu, M.R., Xie, T., King, I., (2011) Mining test oracles of web search engines, pp. 408-411; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1). , article no. 4. ACM, New York, NY; d'Amorim, M., Pacheco, C., Marinov, D., Xie, T., Ernst, M.D., (2006) An empirical comparison of automated generation and classification techniques for object-oriented unit testing, pp. 59-68; Aho, P., Menz, N., Räty, T., Schieferdecker, I., (2011) Automated Java GUI modeling for model-based testing purposes, pp. 268-273; Xie, Q., Memon, A.M., (2005) Rapid crash testing for continuously evolving GUI-based software applications, pp. 473-482; Mesbah, A., Deursen, A.V., (2009) Invariant-based automatic testing of AJAX user interfaces, pp. 210-220; Meinke, K., Walkinshaw, N., (2012) Model-based testing and model inference, pp. 440-443; Bouillon, L., Limbourg, Q., Vanderdonckt, J., Michotte, B., (2005) Reverse engineering of web pages based on derivations and transformations, pp. 3-13; Staiger, S., (2007) Reverse engineering of graphical user interfaces using static analyses, pp. 189-198; Guha, A., Krishnamurthi, S., Jim, T., (2009) Using static analysis for Ajax intrusion detection, pp. 561-570; Ko, A.J., Zhang, X., (2011) FeedLack detects missing feedback in web applications, pp. 2177-2186; Bellucci, F., Ghiani, G., Paternò, F., Porta, C., (2012) Automatic reverse engineering of interactive dynamic web applications to support adaptation across platforms, pp. 217-226; http://www.iste.uni-stuttgart.de/en/ps/project-bauhaus.html, Bauhaus project, tools for program analysis; Ramón, Ó.S., Vanderdonckt, J., Molina, J.G., (2013) Re-engineering graphical user interfaces from their resource files with UsiResourcer, pp. 1-12; Mesbah, A., Bozdag, E., van Deursen, A., (2008) Crawling AJAX by inferring user interface state changes, pp. 122-134; Mesbah, A., van Deursen, A., Lenselink, S., Crawling Ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1). , article no. 3. ACM, New York, NY; Samir, H., Kamel, A., (2007) Automated reverse engineering of Java graphical user interfaces for web migration, pp. 157-162; Stroulia, E., El-Ramly, M., Iglinski, P., Sorenson, P., User interface reverse engineering in support of interface migration to the web (2003) Autom. Softw. Eng., 10 (3), pp. 271-301. , Kluwer Academic Publishers, Hingham, MA; Li, P., Wohlstadter, E., (2008) View-based maintenance of graphical user interfaces, pp. 156-167; Gimblett, A., Thimbleby, H., (2010) User interface model discovery: towards a generic approach, pp. 145-154; Muhairat, M.I., Al-Qutaish, R.E., Athamena, B.M., From graphical user interface to domain class diagram: a reverse engineering approach (2011) J. Theor. Appl. Inf. Technol., 24 (1), pp. 28-40. , Little Lion Scientific, Islamabad, Pakistan; Yang, W., Prasad, M.R., Xie, T., (2013) A grey-box approach for automated GUI-model generation of mobile applications, pp. 250-265; Watson, T.J., http://wala.sourceforge.net/wiki/index.php/Main_Page, Libraries for Analysis (WALA); https://code.google.com/p/robotium, Robotium, an Android test automation framework; Azim, T., Neamtiu, I., (2013) Targeted and depth-first exploration for systematic testing of Android Apps, pp. 641-660; Richardson, D.J., Aha, S.L., O'Malley, T.O., (1992) Specification-based test oracles for reactive systems, pp. 105-118; Memon, A.M., Banerjee, I., Nagarajan, A., (2003) What test oracle should i use for effective GUI testing?, pp. 164-173; Memon, A.M., Pollack, M.E., Soffa, M.L., (1999) Using a goal-driven approach to generate test cases for GUIs, pp. 257-266; Memon, A.M., Xie, Q., (2004) Using transient/persistent errors to develop automated test oracles for event-driven software, pp. 186-195; Memon, A.M., Pollack, M.E., Soffa, M.L., (2000) A planning-based approach to GUI testing; Memon, A.M., Pollack, M.E., Soffa, M.L., (2000) Plan generation for GUI testing, pp. 226-235; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155. , IEEE Computer Society; Memon, A.M., Pollack, M., Soffa, M., (2000) Automated test oracles for GUls, pp. 30-39; Memon, A.M., Banerjee, I., Nagarajan, A., (2003) DART: a framework for regression testing nightly/daily builds of GUI applications, pp. 410-420; Memon, A.M., Xie, Q., (2004) Empirical evaluation of the fault-detection effectiveness of smoke regression test cases for GUI-based software, pp. 8-17; http://guitar.sourceforge.net, GUITAR, a GUI testing framework; Memon, A.M., Soffa, M.L., (2003) Regression testing of GUIs, pp. 118-127; Memon, A.M., (2004) Using tasks to automate regression testing of GUIs; McMaster, S., Memon, A.M., (2009) An extensible heuristic-based framework for GUI test case maintenance, pp. 251-254; Cohen, M., Huang, S., Memon, A.M., (2012) AutoInSpec: using missing test coverage to improve specifications in GUIs, pp. 251-260; Memon, A.M., Banerjee, I., Nguyen, B., Robbins, B., (2013) The first decade of GUI ripping: extensions, applications, and broader impacts, pp. 11-20; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896. , IEEE Press, Piscataway, NJ; Nguyen, B., Robbins, B., Banerjee, I., Memon, A.M., GUITAR: an innovative tool for automated testing of GUI-driven software (2013) Autom. Softw. Eng., 21 (1), pp. 65-105. , Springer, US; Hackner, D., Memon, A.M., (2008) Test case generator for GUITAR, pp. 959-960; Nagarajan, A., Memon, A.M., (2003) Refactoring using event-based profiling; Memon, A.M., Employing user profiles to test a new version of a GUI component in its context of use (2006) Softw. Qual. J., 14 (4), pp. 359-377. , Kluwer Academic Publishers, Hingham, MA; Brooks, P., Memon, A.M., (2007) Automated GUI testing guided by usage profiles, pp. 333-342; Xie, Q., Memon, A.M., (2006) Model-based testing of community-driven open-source GUI applications, pp. 145-154; Memon, A.M., Xie, Q., Agile quality assurance techniques for GUI-based applications (2007) Agile Software Development Quality Assurance, pp. 114-135. , Idea Group Inc., Hershey, PA, I.G. Stamelos, P. Sfetsos (Eds.); Yuan, X., Memon, A.M., (2007) Using GUI run-time state as feedback to generate test cases, pp. 396-405; Yuan, X., Memon, A.M., (2008) Alternating GUI test generation and execution, pp. 23-32; Yuan, X., Cohen, M., Memon, A.M., (2009) Towards dynamic adaptive automated test generation for graphical user interfaces, pp. 263-266; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Inform. Softw. Technol., 52 (5), pp. 559-575. , Butterworth-Heinemann, Newton, MA; Huang, S., Cohen, M., Memon, A.M., (2010) Repairing GUI test suites using a genetic algorithm, pp. 245-254; Memon, A.M., (2004) Developing testing techniques for event-driven pervasive computing applications; Yuan, X., Cohen, M., Memon, A.M., (2007) Covering array sampling of input event sequences for automated GUI testing, pp. 405-408; Arlt, S., Banerjee, I., Bertolini, C., Memon, A.M., Schäf, M., Grey-box GUI testing: efficient generation of event sequences (2012) Comput. Res. Repos., , arXiv:1205.4928; Arlt, S., Podelski, A., Bertolini, C., Schäf, M., Banerjee, I., Memon, A.M., (2012) Lightweight static analysis for GUI testing, pp. 301-310; Xie, Q., (2006) Developing cost-effective model-based techniques for GUI testing, pp. 997-1000; Campos, J.C., Harrison, M.D., (1997) Formally verifying interactive systems: a review, pp. 109-124; Campos, J.C., Harrison, M.D., (1998) The role of verification in interactive systems design, pp. 155-170; Campos, J.C., Harrison, M.D., Model checking interactor specifications (2001) Autom. Softw. Eng., 8 (3-4), pp. 275-310. , Kluwer Academic Publishers, Hingham, MA; Campos, J.C., (2003) Using task knowledge to guide interactor specifications analysis, pp. 171-186; Campos, J.C., Doherty, G.J., (2003) Reasoning about dynamic information displays, pp. 288-302; Campos, J.C., Harrison, M.D., (2003) From HCI to software engineering and back, pp. 49-56; Campos, J.C., Harrison, M.D., Loer, K., (2004) Verifying user interface behaviour with model checking, pp. 87-96; Campos, J.C., Harrison, M.D., (2007) Considering context and users in interactive systems analysis, pp. 193-209; Silva, J.C., Saraiva, J.A., Campos, J.C., (2006) Combining formal methods and functional strategies regarding the reverse engineering of interactive applications, pp. 137-150; Silva, J.C., Campos, J.C., Saraiva, J., (2006) Models for the reverse engineering of Java/Swing applications; http://www.haskell.org/haskellwiki/Applications_and_libraries/Generic_programming/Strafunski, Strafunski Haskell library; Silva, C.E., (2010) Reverse Engineering of Rich Internet Applications, , Master's thesis, University of Minho, Portugal; Silva, J.C., Silva, C.C., Gonçalo, R.D., Saraiva, J.A., Campos, J.C., (2010) The GUISurfer tool: towards a language independent approach to reverse engineering GUI code, pp. 181-186; Silva, J.C., Silva, C.E., Campos, J.C., Saraiva, J.A., (2010) GUI behavior from source code analysis, pp. 81-88; Silva, C.E., (2012) Reverse engineering of GWT applications, pp. 325-328; http://www.graphviz.org, Graphviz, an open source graph visualization software; http://graph-tool.skewed.de, Graph-tool, a Python module; Silva, J.C., Campos, J.C., Saraiva, J.A., (2010) GUI Inspection from source code analysis, , article no. 11; Couto, R., Ribeiro, A.N., Campos, J.C., (2012) A patterns based reverse engineering approach for Java source code, pp. 140-147; Couto, R., Ribeiro, A.N., Campos, J.C., (2012) MapIt: a model based pattern recovery tool, pp. 19-37; Silva, C.E., Campos, J.C., (2012) Can GUI implementation markup languages be used for modelling?, pp. 112-129; Paiva, A., Faria, J., Vidal, R., (2003) Specification-based testing of user interfaces, pp. 139-153; Paiva, A.C.R., Tillmann, N., Faria, J.C.P., Vidal, R.F.A.M., (2005) Modeling and testing hierarchical GUIs, pp. 329-344; Paiva, A., Faria, J., Tillmann, N., Vidal, R., (2005) A model-to-implementation mapping tool for automated model-based GUI testing, pp. 450-464; Paiva, A.C.R., (2007) Automated Specification-Based Testing of Graphical User Interfaces, , PhD thesis, Department of Electrical and Computer Engineering, University of Porto, Portugal; Paiva, A.C.R., Faria, J.C.P., Mendes, P., (2007) Reverse engineered formal models for GUI testing, pp. 218-233; Paiva, A.C.R., Faria, J.C.P., Vidal, R.F.A.M., (2007) Towards the integration of visual and formal models for GUI testing, pp. 99-111; Moreira, R.M.L.M., Paiva, A.C.R., (2008) Visual abstract notation for gui modelling and testing-VAN4GUIM, pp. 104-111; http://giove.isti.cnr.it/teresa.html, Multimodal TERESA, a tool for design and development of multi-platform applications; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., (2009) Reverse engineering of GUI models, pp. 527-538; Morgado, I., Paiva, A., Faria, J., (2011) Reverse engineering of graphical user interfaces, pp. 293-298; Morgado, I., Paiva, A., Faria, J., Dynamic reverse engineering of graphical user interfaces (2012) Int. J. Adv. Softw., 5 (3-4), pp. 224-246. , IARIA; Ferreira, R.D.F., Faria, J.C.P., Paiva, A.C.R., (2010) Test coverage analysis of UML activity diagrams for interactive systems, pp. 268-273; Ferreira, R.D.F., Faria, J.C.P., Paiva, A.C.R., (2010) Test coverage analysis of UML state machines. Software testing, pp. 284-289; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2008) Reverse engineering finite state machines from rich internet applications, pp. 69-73; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2009) Experimenting a reverse engineering technique for modelling the behaviour of rich internet applications, pp. 571-574; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2010) Rich internet application testing using execution trace data, pp. 274-283; Amalfitano, D., Fasolino, A.R., Polcaro, A., Tramontana, P., (2010) DynaRIA: a tool for Ajax web application comprehension, pp. 46-47; Amalfitano, D., Fasolino, A.R., Polcaro, A., Tramontana, P., (2010) Comprehending Ajax web applications by the DynaRIA tool, pp. 122-131; Amalfitano, D., Fasolino, A.R., Polcaro, A., Tramontana, P., The DynaRIA tool for the comprehension of Ajax web applications by dynamic analysis (2014) Innov. Syst. Softw. Eng., 10, pp. 41-57. , Springer-Verlag; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2010) An Iterative approach for the reverse engineering of rich internet application user interfaces, pp. 401-410; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2011) Using dynamic analysis for generating end user documentation for Web 2.0 applications, pp. 11-20; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2009) A tool-supported process for reliable classification of web pages, pp. 338-345; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2010) Techniques and tools for rich internet applications testing, pp. 63-72; Amalfitano, D., Fasolino, A.R., Tramontana, P., (2011) A GUI crawling-based technique for android mobile application testing, pp. 252-261; Amalfitano, D., (2011) Reverse Engineering and Testing of Rich Internet Applications, , PhD thesis, Facoltà di Ingegneria, Dipartimento di Informatica e Sistemistica, Università degli Studi di Napoli Federico II; Amalfitano, D., Fasolino, A.R., Carmine, S., Memon, A.M., Tramontana, P., (2012) Using GUI ripping for automated testing of android applications, pp. 258-261; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S., Imparato, G., (2012) A toolset for GUI testing of android applications, pp. 650-653; Amalfitano, D., Fasolino, A.R., Tramontana, P., Amatucci, N., (2013) Considering context events in event-based testing of mobile applications, pp. 126-133; Miao, Y., Yang, X., (2010) An FSM based GUI test automation model, pp. 120-126; Yang, X., Miao, Y., Zhang, Y., Model-driven GUI automation for efficient information exchange between heterogeneous electronic medical record systems (2011) Information Systems Development, Business Systems and Services: Modeling and Development, pp. 799-810. , Springer, New York, NY, J. Pokorny, V. Repa, K. Richta, W. Wojtkowski, H. Linger, C. Barry, M. Lang (Eds.); Aho, P., Suarez, M., Kanstren, T., Memon, A.M., (2013) Industrial adoption of automatically extracted GUI models for testing, pp. 49-54; http://jenkins-ci.org, Jenkins, an open source continuous integration server; Aho, P., Suarez, M., Kanstren, T., Memon, A.M., (2014) Murphy tools: utilizing extracted GUI models for industrial software testing; Chen, J., Subramaniam, S., Specification-based testing for GUI-based applications (2002) Softw. Qual. J., 10 (3), pp. 205-224. , Kluwer Academic Publishers; Mesbah, A., van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Trans. Softw. Eng., 38 (1), pp. 35-53. , IEEE Computer Society; Duda, C., Frey, G., Kossmann, D., Matter, R., Zhou, C., (2009) AJAX Crawl: making AJAX applications searchable, pp. 78-89; Joorabchi, M., Mesbah, A., (2012) Reverse engineering iOS mobile applications, pp. 177-186; http://www.jboss.org/javassist, Javassist, an open source library for Java bytecode manipulation; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., (2011) AutoBlackTest: a tool for automatic black-box testing, pp. 1013-1015; http://www.ibm.com/software/products/en/functional, IBM Rational Functional Tester, a commercial tool for automated functional testing and regression testing; http://sourceforge.net/projects/teachingbox, TeachingBox, an open source tool providing advanced machine learning techniques; Fraser, G., Arcuri, A., (2011) EvoSuite: automatic test suite generation for object-oriented software, pp. 416-419; Arlt, S., Bertolini, C., Pahl, S., Schäf, M., Trends in model-based GUI testing (2012) Adv. Comput., 86, pp. 183-222. , Academic Press",,,,"Academic Press Inc.",,,,,00652458,,,,"English","Adv. Comput.",Book Chapter,"Final","",Scopus,2-s2.0-84906748272
"Polo M., Caivano D., Reales P.","7005519744;6603243250;35318784900;","Extending the Bacterio tool for web application mutation testing",2014,"CIBSE 2014: Proceedings of the 17th Ibero-American Conference Software Engineering",,,,"151","164",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84906053470&partnerID=40&md5=94f961a70d7069af507bf536dbe6dbbe","Institute of Information Systems and Technologies, U. of Castilla-La Mancha, Spain; Dipartimento di Informatica, U. degli Studi di Bari Aldo Moro, Bari, Italy","Polo, M., Institute of Information Systems and Technologies, U. of Castilla-La Mancha, Spain; Caivano, D., Dipartimento di Informatica, U. degli Studi di Bari Aldo Moro, Bari, Italy; Reales, P., Institute of Information Systems and Technologies, U. of Castilla-La Mancha, Spain","Mutation is a testing technique that, after many years of application in the academic and research environments, has recently started to be applied in industry. The main obstacle for its industrial adoption has been the high costs associated to its three stages: mutant generation, execution of tests cases against mutants and result analysis. In the same way, the techniques that researchers have developed to alleviate these costs are the main reason for its acceptation. In spite of this, the application of mutation is reduced to the testing of the internal layers of systems, and not of the external ones, such as the GUI. Since current trends in software construction mainly involve the development of web and mobile applications, we have extended the Bacterio tool for web application testing using mutation. This paper deals with the integration of the mutant schema technique in Bacterio as a way to efficiently execute mutation testing of web applications. Moreover, a new component has been included to control the execution of the test cases within the web server.","Mutation testing; Web application testing","Cost benefit analysis; Software engineering; Software testing; Testing; Industrial adoption; Mobile applications; Mutation testing; Research environment; Result analysis; Software construction; Testing technique; Web application testing; World Wide Web",,,,,,,,"Beizer, B., (1990) Software Testing Techniques, , London; Boston: International Thomson Computer Press; Polo, M., Reales, P., Mutation Testing Cost Reduction Techniques: A Survey (2010) IEEE Softw, 27 (3), pp. 80-86. , May; Demillo, R.A., Lipton, R.J., Sayward, F.G., Hints on Test Data Selection: Help for the Practicing Programmer (1978) Computer, 11 (4), pp. 34-41; Offutt, A.J., Lee, A., Rothermel, G., Untch, R.H., Zapf, C., An Experimental Determination of Sufficient Mutant Operators (1996) ACM Trans. Softw. Eng. Met-hodol, 5 (2), pp. 99-118. , Apr; Mresa, E.S., Bottaci, L., Efficiency of mutation operators and selective mutation strategies: An empirical study (1999) Software Testing, Verification and Reliability, 9 (4), pp. 205-232; Reales, P., Polo, M., (2012) Bacterio: Java Mutation Testing Tool: A Framework to Evaluate Quality of Tests Cases, pp. 646-649; Schuler, D., Zeller, A., (2009) Javalanche: Efficient Mutation Testing For Java, p. 297; Untch, R.H., Offutt, A.J., Harrold, M.J., Mutation Analysis Using Mutant Schemata (1993) Proceedings of the 1993 ACM SIGSOFT International Symposium On Software Testing and Analysis, pp. 139-148. , New York, NY, USA; Reales, P., Polo, M., (2012) Mutant Execution Cost Reduction: Through MUSIC (Mutant Schema Improved With Extra Code), pp. 664-672; Polo, M., Piattini, M., García-Rodríguez, I., Decreasing the cost of mutation testing with second-order mutants (2009) Softw. Test. Verif. Reliab, 19 (2), pp. 111-131; Reales, P., Polo, M., Fernandez, J.L., Validating 2nd-Order Mutation at System Level (2012) IEEE Transactions On Software Engineering, 39 (4), pp. 570-587; Reales, P., Polo, M., Parallel mutation testing (2012) Software Testing, Verification and Reliability, 23 (4), pp. 315-350. , Mar; Reales, P., Polo, M., Offutt, J., Mutation at the multi-class and system levels Science of Computer Programming, 78 (4), pp. 364-387; Baker, R., Habli, I., An Empirical Evaluation of Mutation Testing for Improving the Test Quality of Safety-Critical Software (2013) IEEE Transactions On Software Engineering, 39 (6), pp. 787-805; Polo Usaola, M., Reales Mateo, P., Pérez lamancha, B., Reduction of Test Suites Using Mutation (2012) Proceedings of the 15th International Conference On Fundamental Approaches to Software Engineering, pp. 425-438. , Berlin, Heidelberg; (2013) Webinar: Architecture of a Modern Web App; Baruch, O., Katz, S., Partially interpreted schemas for CSP programming (1988) Science of Computer Programming, 10 (1), pp. 1-18. , Feb; Upsorn Praphamontripong, J.O., Applying Mutation Testing to Web Applications,"" (2010) Proc. of the Sixth Workshop On Mutation Analysis (Mutation 2010); Nishiura, K., Maezawa, Y., Washizaki, H., Shinichi Honiden, ""Mutation Analysis for JavaScriptWeb Application Testing (2013) Proc. of the 25th International Conference On Software Engineering and Knowledge Engineering, , Boston, USA",,,"","Universidad de la Frontera","17th Ibero-American Conference on Software Engineering, CIBSE 2014","23 April 2014 through 25 April 2014","Pucon",106930,,9789562362474,,,"English","Proc. Ibero-Amer. Conf. Software Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84906053470
"Stefan I., Ivan I., Miclea L.","24829780100;57197280367;6508329176;","Assisted test case design using contextual information by DOM exploration",2014,"Proceedings of 2014 IEEE International Conference on Automation, Quality and Testing, Robotics, AQTR 2014",,, 6857861,"","",,2,"10.1109/AQTR.2014.6857861","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905844089&doi=10.1109%2fAQTR.2014.6857861&partnerID=40&md5=bf0ebc03c90f1b399be00c1445057664","Automation Department, Technical University of Cluj-Napoca, Romania","Stefan, I., Automation Department, Technical University of Cluj-Napoca, Romania; Ivan, I., Automation Department, Technical University of Cluj-Napoca, Romania; Miclea, L., Automation Department, Technical University of Cluj-Napoca, Romania","The paper proposes a method to use contextual data from the web applications DOM (Document Object Model) to aid test cases generation for functional testing. The objective is to enhance the automation by reducing the time allocated to obtain the input values and the rough steps of the test cases. The DOM architecture for Web applications will be considered the starting point in the development of the method. The discussion remains if the tester inspection is needed in order to choose between the diversity of test cases automatically generated or the tests will be entirely executed without exception. The required system resources will be taken in consideration to repeatedly run all the tests in regression testing. In the case of applying this method to several user interfaces, by saving the extracted properties and the generated test cases and results, statistical data regarding effective templates to use would emerge. © 2014 IEEE.","automated test vector generatoration; context; DOM; test vector","Automation; Robotics; Software testing; Testing; User interfaces; World Wide Web; Automated test; Automatically generated; context; Contextual information; Document object model; DOM; Test cases generation; Test vectors; Automatic test pattern generation",,,,,,,,"Kaner, C., (2006) Exploratory Testing Keynote at QAI, , www.kaner.com/pdfs/ETatQUAI.pdf, USA, California"" Notes partially based on NFSGrant EIA-0113539 ITR/SY+PE, ""Improving education of software Testers, last retrieved January, 2014; Dash, N.S., Context and contextual word meaning SKASE Journal of Theoretical Linguistics, 5 (2), pp. 21-31. , http://www.skase.sk/Volumes/JTL12/pdf_doc/2.pdf, [online]; Hoffman, D., (2007) Advanced Test Automation Architectures: Beyond Regression Testing, , www.softwarequalitymethods.com/Slides/TestAutoBeyondX2-CAST07.pdf, last retrieved January 2014; Dictionary, M. W., http://www. merriam-webster. com/ dictionary/ context, last retrieved February 2014; http://htmlagilitypack.codeplex.com, last retrieved September 2013; Xu, Y., Zhu, X., Wang, Y., Towards GUI test based on interactive event-flow model Procedeeings of the 2012 International Conference of Quality, Reliability, Risk, Maintenance, and Safety Engineering (ICQR2MSE), pp. 222-226; Nagarani, P., Venkataramanachary, I.R., A tool based approach for automation of gui applications 2012 Third International Conference on Computing Communication & Networking Technologies (ICCCNT), pp. 1-6; Kung, D., Liu, C.H., Hsia, P., A Model-based approach for testing web applications (2000) Proc. of Twelfth International Conference on Software Engineering and Knowledge Engineering, , Chicago, IL., July; Leotta, M., Clerissi, D., Ricca, F., Tonella, P., Capture-replay vs programmable web testing: An empirical assessment during test case evolution (2013) 20th Working Conference on Reverse Engineering, , Koblenz; Boumiza, D.S., Ben Azzouz, A., Design and development of a user interface to customize web testing scenarios (2012) International Conference on Education and E-Learning Innovations, , Sousse; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) 1st International Conference on Software Testing, Verification, and Validation, Lillehammer; Torkey, F.A., Keshk, A., Hamza, T., Ibrahim., A., A new methodology for web testing (2007) 5th International Conference on Informations and Communications Technology, , Cairo; Cryer, J., CSS Regression Testing, , http://tldr.huddle.com/blog/css-testing","Stefan, I.; Automation Department, Technical University of Cluj-NapocaRomania; email: Iulia.Stefan@aut.utcluj.ro",,"and Technical Informatics (SRAIT);IEEE Computer Society - Test Technology Technical Council;IPA-R and D Institute for Automation, Cluj-Napoca Subsidiary;Romanian Ministry of National Education;Romanian Society of Automatic Control;Technical University of Cluj-Napoca","IEEE Computer Society","2014 19th IEEE International Conference on Automation, Quality and Testing, Robotics, AQTR 2014","22 May 2014 through 24 May 2014","Cluj-Napoca",106774,,9781479937318,,,"English","Proc. IEEE Int. Conf. Autom., Qual. Test., Robotics, AQTR",Conference Paper,"Final","",Scopus,2-s2.0-84905844089
"Nabuco M., Paiva A.C.R.","55933421700;7102683763;","Model-based test case generation for web applications",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8584 LNCS","PART 6",,"248","262",,8,"10.1007/978-3-319-09153-2_19","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904895456&doi=10.1007%2f978-3-319-09153-2_19&partnerID=40&md5=7df63d7a58357b3807119c4c8efdccdf","Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; INESC TEC, Faculty of Engineering, University of Porto, Porto, Portugal","Nabuco, M., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Paiva, A.C.R., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal, INESC TEC, Faculty of Engineering, University of Porto, Porto, Portugal","This paper presents a tool to filter/configure the test cases generated within the Model-Based Testing project PBGT. The models are written in a Domain Specific Language called PARADIGM and are composed by User Interface Test Patterns (UITP) describing the testing goals. To generate test cases, the tester has to provide test input data for each UITP in the model. After that, it is possible to generate test cases. However, without a filter/configuration of the test case generation algorithm, the number of test cases can be so huge that becomes unfeasible. So, this paper presents an approach to define parameters for the test case generation in order to generate a feasible number of test cases. The approach is evaluated by comparing the different test strategies and measuring the performance of the modeling tool against a capture-replay tool used for web testing. © 2014 Springer International Publishing.",,"Computer programming languages; User interfaces; Capture-replay; Domain specific languages; Model based testing; Model-based test; Modeling tool; Test case generation; Test strategies; WEB application; Testing",,,,,,,,"Dalal, S.R., Jain, A., Karunanithi, N., Leaton, J.M., Lott, C.M., Patton, G.C., Horowitz, B.M., Model-based testing in practice (1999) Proceedings of the 21st International Conference on Software Engineering (ICSE 1999), pp. 285-294. , ACM, New York; Dick, J., Faivre, A., Automating the generation and sequencing of test cases from model-based specifications (1993) LNCS, 670, pp. 268-284. , Larsen, P.G., Wing, J.M. (eds.) FME 1993. Springer, Heidelberg; Katsiri, E., Mycroft, A., Model checking for sentient computing: An axiomatic approach (2005) Proceedings of the First International Workshop on Managing Context Information in Mobile and Pervasive Environments (SME 2005), , CEUR-WS, Ayia Napa May; Claessen, K., Hughes, J., QuickCheck: A lightweight tool for random testing of haskell programs (2000) Proc. of the 5th ACM SIGPLAN International Conference on Functional Programming (ICFP 2000), pp. 268-279. , Odersky, M., Wadler, P. (eds.) ACM; Mealy, G.H., A Method for Synthesizing Sequential Circuits (1955) Bell Systems Technical Journal, 34, pp. 1045-1079; Cheng, K.-T., Krishnakumar, A.S., Automatic Functional Test Generation Using The Extended Finite State Machine Model (1993) 1993 30th Conference on Design Automation, June 14-18, pp. 86-91; Fröhlich, P., Link, J., Automated Test Case Generation from Dynamic Models (2000) LNCS, 1850, p. 472. , Bertino, E. (ed.) ECOOP 2000. Springer, Heidelberg; Rayadurgam, S., Heimdahl, M.P.E., Coverage based test-case generation using model checkers (2001) Proceedings. Eighth Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems-ECBS, pp. 83-91; Tretmans, J., Test Generation with Inputs, Outputs, and Repetitive Quiescence (1996) Software-Concepts and Tools, 17, pp. 103-120; Phalippou, M., (1994) Relations D Implantation et Hypotheses de Test Sur des Automates a Entrees et Sorties, , PhD thesis, L Universite de Bordeaux I, France; Jard, C., Jeron, T., TGV: Theory, Principles and Algorithms: A Tool for the Automatic Synthesis of Conformance Test Cases for Non-Deterministic Reactive Systems (2005) Software Tools for Technology Transfer, 7 (4), pp. 297-315; Hartman, A., Nagin, K., The AGEDIS Tools for Model Based Testing (2004) Int. Symposium on Software Testing and Analysis - ISSTA 2004, pp. 129-132. , ACM Press, New York; He, J., Turner, K., Protocol-Inspired Hardware Testing (1999) Int. Workshop on Testing of Communicating Systems, 12, pp. 131-147. , Csopaki, G., Dibuz, S., Tarnay, K. (eds.) Kluwer Academic Publishers; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.A.M., A model-to-implementation mapping tool for automated model-based GUI testing (2005) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 3785 LNCS, pp. 450-464. , DOI 10.1007/11576280-31, Formal Methods and Software Engineering - 7th International Conference on Formal Engineering Methods, ICFEM 2005, Proceedings; Moreira, R.M.L.M., Paiva, A.C.R., Visual Abstract Notation for Gui Modelling and Testing - VAN4GUIM (2008) ICSOFT 2008, pp. 104-111. , March 4; De Alfaro, L., Henzinger, T.A., Interface automata (2001) ESEC / SIGSOFT FSE, pp. 109-120; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Testing concurrent object-oriented systems with spec explorer extended abstract (2005) Lecture Notes in Computer Science, 3582, pp. 542-547. , FM 2005: Formal Methods: International Symposium of Formal Methods Europe. Proceedings; Feijs, L.M.G., Goga, N., Mauw, S., Tretmans, J., Test selection, trace distance and heuristics (2002) Proceedings of the IFIP 14th International Conference on Testing Communicating Systems (TestCom 2002), pp. 267-282. , Kluwer; Nachmanson, L., Veanes, M., Schulte, W., Tillmann, N., Grieskamp, W., Optimal strategies for testing nondeterministic systems (2004) Proc. of the 2004 ACM SIGSOFT International Sym- Posium on Software Testing and Analysis (ISSTA 2004), pp. 55-64. , Avrunin, G.S., Rothermel, G. (eds.); Moreira, R., Paiva, A., Memon, A., A Pattern-Based Approach for GUI Modeling and Testing (2013) Proceedings of the 24th Annual International Symposium on Software Reliability Engineering, ISSRE 2013; Welie, M., Gerrit, C., Eliens, A., Patterns as tools for user interface design Workshop on Tools for Working with Guidelines, Biarritz, France (2000); Garrett, J.J., (2006) Ajax: A New Approach to Web Applications, , http://www.adaptivepath.com/publications/essays/archives/000385.php; Constantine, L.L., Lockwood, L.A.D., Usage-centered engineering for Web applications (2002) IEEE Software Journal, 19 (2), pp. 42-50; Monteiro, T., Paiva, A., Pattern Based GUI Testing Modeling Environment (2013) 4th InternationalWorkshop on Testing Techniques & Experimentation Benchmarks for Event-Driven Software, TESTBEDS 2013; Nabuco, M., Paiva, A., Camacho, R., Faria, J., Inferring, U.I., Patterns with Inductive Logic Programming 8th Iberian Conference on Information Systems and Technologies (2013); Cunha, M., Paiva, A., Ferreira, H., Abreu, R.P., A Pattern-Based GUI Testing Tool (2010) 2nd International Conference on Software Technology and Engineering (ICSTE 2010), pp. 202-206; (2014) Sikuli API, , https://code.google.com/p/sikuli-api/, last acessed February; Andrade, F.R., Faria, J.P., Paiva, A., Test generation from bounded algebraic specifications using alloy (2011) ICSOFT 2011, 6th International Conference on Software and Data Technology, , January; Rebello De Andrade, F., Faria, J.P., Lopes, A., Paiva, A.C.R., Specification-driven unit test generation for java generic classes (2012) LNCS, 7321, pp. 296-311. , Derrick, J., Gnesi, S., Latella, D., Treharne, H. (eds.) IFM 2012. Springer, Heidelberg; Paiva, A.C.R., Faria, J.P., Vidal, R.M., Specification-based Testing of User Interfaces Proceedings of the 10th DSV-IS Workshop - Design, Specification and Verification of Interactive Systems, Funchal, Madeira, de Junho 4-6 (2003)",,,"Associacao Portuguesa de Investigacao Operacional;Kyushu Sangyo University (KSU);Monash University;Universidade do Minho;University of Basilicata;University of Perugia","Springer Verlag","14th International Conference on Computational Science and Its Applications, ICCSA 2014","30 June 2014 through 3 July 2014","Guimaraes",106576,03029743,9783319091525,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84904895456
"Bache E., Bache G.","24070065700;56285870200;","Specification by example with gui tests - how could that work?",2014,"Lecture Notes in Business Information Processing","179 LNBIP",,,"320","326",,4,"10.1007/978-3-319-06862-6_26","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904569844&doi=10.1007%2f978-3-319-06862-6_26&partnerID=40&md5=31a1d19d98862c19765b2fc95d31a409","Bache Consulting, Göteborg, Sweden; Jeppesen Systems, Göteborg, Sweden","Bache, E., Bache Consulting, Göteborg, Sweden; Bache, G., Jeppesen Systems, Göteborg, Sweden","Specification by Example is a collaborative method for developing software. It involves a workshop where people representing various roles and viewpoints discuss what is to be built, and come up with concrete example scenarios. These scenarios later form the basis for automated (functional) acceptance tests, and are sometimes called ""Living Documentation"", as they are written in a Domain Specific Language and can be read by non-programmers. GUI testing has traditionally used a record-replay paradigm that requires the user interface exists before the tests can be created, and hence have been considered incompatible with a Specification by Example approach. In this experience report we will discuss how we have overcome this apparent contradiction at Jeppesen, and relate an experience using the tool TextTest for GUI testing of Jeppesen's next-generation Crew Management System. © Springer International Publishing Switzerland 2014.","ATDD; Capture-Replay Testing; GUI testing; Specification by Example","Graphical user interfaces; Problem oriented languages; Software design; Specifications; ATDD; Capture-replay; Crew management systems; Domain specific languages; Experience report; GUI testing; Record-replay; Acceptance tests",,,,,,,,"Adzic, G., Specification by Example, , Bridging the Communcation Gap; Crispin, L., Gregory, J., Agile Testing; Fowler, M., Fowler's bliki, , http://martinfowler.com/bliki/PageObject.html; http://texttest.org",,,"CISCO;et al;FlossLab;Targetprocess;ThoughtWorks;VersionOne","Springer Verlag","15th International Conference on Agile Software Development, XP 2014","26 May 2014 through 30 May 2014","Rome",106498,18651348,9783319068619,,,"English","Lect. Notes Bus. Inf. Process.",Conference Paper,"Final","",Scopus,2-s2.0-84904569844
"Liu C.-H., Lu C.-Y., Cheng S.-J., Chang K.-Y., Hsiao Y.-C., Chu W.-M.","7409787147;55733524300;51664479200;7404877867;7101720415;16425137300;","Capture-replay testing for android applications",2014,"Proceedings - 2014 International Symposium on Computer, Consumer and Control, IS3C 2014",,, 6846085,"1129","1132",,29,"10.1109/IS3C.2014.293","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904408447&doi=10.1109%2fIS3C.2014.293&partnerID=40&md5=4102859bc4e8c7a1d952349c6ef97584","Department of Computer Science and Information Engineering, National Taipei University of Technology, 1, Sec. 3, Zhongxiao E. Rd, Taipei 10608, Taiwan; Department of Industrial Education and Technology, National Changhua University of Education, Taiwan; Department of Aircraft Engineering, Army Academy, Taiwan; Department of Electronic Engineering, Chienkuo Technology University, Taiwan; Department of Electro-Optical and Energy Engineering, MingDao University, Taiwan; Department of Electrical Engineering, National Chin-Yi University of Technology, Taiwan","Liu, C.-H., Department of Computer Science and Information Engineering, National Taipei University of Technology, 1, Sec. 3, Zhongxiao E. Rd, Taipei 10608, Taiwan; Lu, C.-Y., Department of Industrial Education and Technology, National Changhua University of Education, Taiwan; Cheng, S.-J., Department of Aircraft Engineering, Army Academy, Taiwan; Chang, K.-Y., Department of Electronic Engineering, Chienkuo Technology University, Taiwan; Hsiao, Y.-C., Department of Electro-Optical and Energy Engineering, MingDao University, Taiwan; Chu, W.-M., Department of Electrical Engineering, National Chin-Yi University of Technology, Taiwan","With the widespread popularity of Android devices, the number of Android applications has increased dramatically in recent years. In order to assure the quality of the applications, Android testing has drawn extensive attention. This paper proposes an approach to automate the testing of Android applications based on the Capture and Replay method. Particularly, the user events of Android applications are captured and converted into Robotium test scripts that can be executed to replay the recorded actions of users. The approach also allows inserting assertions when capturing user interactions for verifying the outputs of Android UI components. A supporting tool is implemented to illustrate the usefulness of the proposed approach. © 2014 IEEE.","Android application testing; Android testing; Capture/Replay; GUI testing; Test automation","Computer science; Computers; Control; Android applications; Capture/replay; GUI testing; Supporting tool; Test Automation; Test scripts; UI components; User interaction; Android (operating system)",,,,,,,,"Google Play Wiki, , http://zh.wikipedia.org/wiki/Google_Play; Monkeyrunner, , http://developer.android.com/tools/help/monkeyrunner_concepts.html; Robotium, , http://code.google.com/p/robotium/; Uiautomator, , http://developer.android.com/tools/help/uiautomator/index.html; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timing-and touch-sensitive record and replay for android (2013) Proc. of the 2013 International Conference on Software Engineering (ICSE 2013), pp. 72-81. , May; Amalfitano, D., Rita Fasolino, A., Tramontana, P., A GUI crawling-based technique for android mobile application testing (2011) Proc. of the Fourth IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 252-261. , March; Amalfitano, D., Rita Fasolino, A., Tramontana, P., De Carmine, S., Memon, A., Using GUI ripping for automated testing of android applications (2012) Proc. of the 27th IEEE/ACM Conference on Automated Software Engineering (ASE 2012), pp. 258-261. , Sep; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for GUI testing of android applications (2012) Proc. of the 28th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653; Kaasila, J., Ferreira, D., Kostakos, V., Ojala, T., Testdroid: Automated remote UI testing on Android (2012) Proc. of the 11th International Conference on Mobile and Ubiquitous Multimedia; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an android application (2011) Proc. of the Fourth IEEE International Conference on Software Testing, Verification and Validation (ICST2011), pp. 377-386. , March; Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proc. of the 6th International Workshop on Automation of Software Test, pp. 77-83. , May; Eclipse, , http://www.eclipse.org/",,,"College of Electric and Control Engineering;et al.;IEEE Circuits and Systems Society;National Chin -Yi University of Technology;Xian University of Science and Technology,","IEEE Computer Society","2nd International Symposium on Computer, Consumer and Control, IS3C 2014","10 June 2014 through 12 June 2014","Taichung",106413,,9781479952779,,,"English","Proc. - Int. Symp. Comput., Consum. Control, IS3C",Conference Paper,"Final","",Scopus,2-s2.0-84904408447
"Mayo Q., Michaels R., Bryce R.","18935988900;57196556874;12645168200;","Test suite reduction by combinatorial-based coverage of event sequences",2014,"Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2014",,, 6825647,"128","132",,8,"10.1109/ICSTW.2014.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84903647686&doi=10.1109%2fICSTW.2014.14&partnerID=40&md5=2ccd14ed42a348af2cd51215402095a3","Computer Science and Engineering, University of North Texas, Denton, TX 76203, United States","Mayo, Q., Computer Science and Engineering, University of North Texas, Denton, TX 76203, United States; Michaels, R., Computer Science and Engineering, University of North Texas, Denton, TX 76203, United States; Bryce, R., Computer Science and Engineering, University of North Texas, Denton, TX 76203, United States","Combinatorial-based criteria are useful in several studies for test suite generation, prioritization, and minimization. In this paper, we extend previous work by using combinatorial-based criteria for test suite reduction. We use criteria that are based on combinatorial coverage of events and consider the order in which events occur. A simple combinatorial-based criterion covers t-way events and does not differentiate between the order of events. The event pair (e1, e2) is counted the same as if it occurs in the order (e2, e1). We also use two criteria that consider the order in which events occur since different orderings of events may be valuable during testing. First, the consecutive sequence-based criterion counts all event sequences in different orders, but they must occur adjacent to each other. The sequence-based criterion counts pairs in all orders without the requirement that events must be adjacent. We evaluate the new criteria on three GUI applications. We use 2way inter-window coverage in our studies. All of the 2way combinatorial-based criteria are effective in reducing the test suites and maintaining close to 100% fault finding effectiveness. Our future work examines larger test suites, higher strength coverage, techniques to partition event data, and further empirical studies. © 2014 IEEE.","Combinatorial testing; GUI testing; Test suite reduction","Software testing; Combinatorial testing; Empirical studies; Event sequence; Fault finding; GUI applications; GUI testing; Prioritization; Test suite reduction; Graphical user interfaces",,,,,"70NANB10H048

1262126",,,"Blue, D., Segall, I., Tzoref-Brill, R., Zlotnick, A., Interaction-based test-suite minimization (2013) Proceedings of the Intl. Conference on Software Engineering, May, pp. 182-191; Harrold, M.J., Gupta, R., Soffa, M.L., Methodology for controlling the size of a test suite (1993) ACM Transactions on Software Engineering and Methodology, 2 (3), pp. 270-285. , DOI 10.1145/152388.152391; Black, J., Melachrinoudis, E., Kaeli, D., Bi-criteria models for all-uses test suite reduction (2004) The Intl. Conf. on Software Engineering, pp. 106-115; Hsu, H.-Y., Orso, A., MINTS: A General Framework and Tool for Supporting Test-suite Minimization Intl. Conf. on Software Engineering, May 2009, pp. 419-429; Rothermel, G., Harrold, M.J., Von Ronne, J., Hong, C., Empirical studies of test suite reduction (2002) Journal of Software Testing, Verification, and Reliability, 4 (2), pp. 219-249. , Dec; Jones, J.A., Harrold, M.J., Test suite reduction and prioritization for modified condition/decision coverage (2003) IEEE Trans. On Software Engineering, 29 (3), pp. 195-209. , Mar; Jeffrey, D., Gupta, N., Test suite reduction with selective redundancy (2005) Intl. Conf. on Software Maintenance, pp. 549-558; McMaster, S., Memon, A., Call-stack coverage for GUI test suite reduction (2008) IEEE Transactions on Software Engineering, 34 (1), pp. 99-115. , DOI 10.1109/TSE.2007.70756; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Greenwald, A.S., Applying concept analysis to user-session-based testing of web applications (2007) IEEE Transactions on Software Engineering, 33 (10), pp. 643-658. , DOI 10.1109/TSE.2007.70723; Wong, W.E., Horgan, J.R., London, S., Mathur, A.P., Effect of test set minimization on fault detection effectiveness Intl. Conf. on Software Engineering, 1995, pp. 41-50; Heimdahl, M.P., George, D., Test-suite reduction for model based tests: Effects on test quality and implications for testing Intl. Conf. on Automated Software Engineering, Sep. 2004, pp. 176-185; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Web application testing with customized test requirements-an experimental comparison study Intl. Sym. on Software Reliability Engineering, Nov. 2006, pp. 266-278; Yuan, X., Cohen, M., Memon, A., Gui interaction testing: Incorporating event context (2011) Transactions on Software Engineering, 37 (4), pp. 559-574; Sampath, S., Bryce, R., Improving the effectiveness of test suite reduction for user-session-based testing of web applications (2012) Information and Software Technology Journal, 54 (7), pp. 724-738; Kuhn, D., Higdon, J., Lawrence, J., Kacker, R., Lei, Y., Efficient methods for interoperability testing using event sequences (2012) CrossTalk, the Journal of Defense Software Engineering, July/August, pp. 15-18; Kuhn, D., Dominguez, I., Kacker, R., Lei, Y., Combinatorial coverage measurement concepts and applications Proceedings of the Intl. Workshop on Combinatorial Testing, Mar. 2013, pp. 352-361; http://comet.unl.edu, accessed on December 28, 2013; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Sampath, S., Bryce, R., Memon, A., A uniform representation of hybrid criteria for regression testing (2013) Transactions on Software Engineering, 39 (10), pp. 1326-1344",,,"Institut Mines-Telecom;INTER-TRUST - FP7;SPaCIoS European Project;TU Munich","IEEE Computer Society","7th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2014","31 March 2014 through 4 April 2014","Cleveland, OH",105862,,9780769551944,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-84903647686
"Aho P., Suarez M., Kanstrén T., Memon A.M.","35188652400;56241277100;18434124300;35599876500;","Murphy tools: Utilizing extracted GUI models for industrial software testing",2014,"Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2014",,, 6825683,"343","348",,13,"10.1109/ICSTW.2014.39","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84903642261&doi=10.1109%2fICSTW.2014.39&partnerID=40&md5=70030db90771b94f1dec04d8172e3758","VTT Technical Research Centre of Finland, Oulu, Finland; F-Secure Ltd., Helsinki, Finland; VTT, Oulu, Finland; University of Toronto, Toronto, ON, Canada; University of Maryland, College Park, MD, United States","Aho, P., VTT Technical Research Centre of Finland, Oulu, Finland; Suarez, M., F-Secure Ltd., Helsinki, Finland; Kanstrén, T., VTT, Oulu, Finland, University of Toronto, Toronto, ON, Canada; Memon, A.M., University of Maryland, College Park, MD, United States","One of the main challenges in adopting model-based testing (MBT) is the effort and expertise required to produce the formal models. For an existing system, there are various approaches to automate the process of creating the models. In this paper, we share our experiences from a long term industrial evaluation on automatically extracting models of graphical user interface (GUI) applications and utilizing the extracted models to automate and support GUI testing. While model extraction and GUI testing has been recently a popular research topic, most proposed approaches have limitations on what can be modeled and industry adoption has been lacking. We describe the process of using Murphy tools to extract GUI models and utilize these models to automate and support various testing activities. During the evaluation, test engineers of an industrial software company used Murphy tools to support their daily efforts in testing commercial software products during 1 year time period. The results from the evaluation were promising, significantly reducing time and effort required for GUI testing. © 2014 IEEE.","graphical user interface; GUI test automation; industrial test environment; model extraction; reverse engineering","Automatic testing; Data mining; Reverse engineering; Software testing; Commercial software products; Graphical user interfaces (GUI); Industrial evaluations; Industrial software; Industrial tests; Model based testing; Model extraction; Test Automation; Graphical user interfaces",,,,,,,,"Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. on Software Engineering and Methodology (TOSEM), 18 (2), p. 4. , Nov; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Holzmann, G.J., Smith, M.H., An automated verification method for distributed systems software based on model extraction (2002) IEEE Transactions on Software Engineering, 28 (4), pp. 364-377. , DOI 10.1109/TSE.2002.995426; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI models for testing Proc. 2010 5th Iberian Conf. on Information Systems and Technologies (CISTI), 16-19 Jun 2010, Santiago de Compostela, Spain, pp. 1-6; Aho, P., Suarez, M., Kanstren, T., Memon, A.M., Industrial adoption of automatically extracted GUI models for testing Proc. Int. Workshop on Experiences and Empirical Studies in Software Modelling (EESSMod), 1 Oct 2013, Miami, Florida, USA, pp. 49-54; Dynamic Virtual Machine Provisioning Service, , https://github.com/F-Secure/dvmps; Yang, X., (2011) Graphic User Interface Modelling and Testing Automation, , PhD thesis, School of Engineering and Science, Victoria University, Melbourne, Australia, May; Aho, P., Menz, N., Räty, T., Dynamic Reverse Engineering of GUI Models for Testing Proc. Int. Conf. on Control, Decision and Information Tech., 6-8 May 2013, Hammamet, Tunisia, pp. 441-447; Bowen, J., Reeves, S., UI-design driven model-based testing (2013) Innovations in Systems and Sw.Eng., 9 (3), pp. 201-215; Utting, M., Legeard, B., (2006) Practical Model-based Testing: A Tools Approach, , Morgan Kaufmann Publishers, San Francisco, USA; Kanstrén, T., A framework for observation-based modelling in model-based testing (2010) VTT Publications, 727. , Espoo, Finland; Silva, C.E., Campos, J.C., Combining static and dynamic analysis for the reverse engineering of web applications Proc. 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS), 24-27 Jun 2013, London, UK, pp. 107-112; Aho, P., Menz, N., Räty, T., Enhancing generated Java GUI models with valid test data Proc. 2011 IEEE Conf. on Open Systems (ICOS), 25-28 Sep 2011, Langawi, Malaysia, pp. 310-315; Kull, A., Automatic GUI Model Generation: State of the Art Proc. 2012 IEEE 23rd Int. Symposium on Software Reliability Engineering Workshops (ISSREW), 27-30 Nov 2012, Dallas, TX, USA, pp. 207-212; Memon, A.M., Banerjee, I., Nguyen, B., Robbins, B., The First Decade of GUI Ripping: Extensions, Applications, and Broader Impacts Proc. 20th Working Conf. on Reverse Engineering (WCRE), 14-17 Oct 2013, Koblenz, Germany, pp. 11-20; Miao, Y., Yang, X., An FSM based GUI test automation model Proc. 2010 11th Int. Conf. on Control, Automation, Robotics & Vision (ICARCV), Singapore, 7-10 Dec 2010, pp. 120-126; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling Ajax-based Web Applications through Dynamic Analysis of User Interface State Changes (2012) ACM Trans. on the Web (TWEB), 6 (1); Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated Java GUI Modeling for Model-Based Testing Purposes Proc. 8th Int. Conf. on Information Technology: New Generations (ITNG), 11-13 Apr 2011, Las Vegas, USA, pp. 268-273; Morgado, I., Paiva, A., Faria, J., Dynamic Reverse Engineering of Graphical User Interfaces (2012) Int. Journal on Advances in Software, 5 (3-4), pp. 224-246; Amalfitano, D., Fasolino, A.R., Polcaro, A., Tramontana, P., The DynaRIA tool for the comprehension of Ajax web applications by dynamic analysis (2013) Innovations in Systems and Sw. Eng., , Apr; Amalfitano, D., Fasolino, A.R., Tramontana, P., Carmine, S., Imparato, G., A Toolset for GUI Testing of Android Applications Proc. 28th IEEE Int. Conf. on Software Maintenance (ICSM), 23-28 Sep 2012, Trento, Italy, pp. 650-653; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic Black-Box Testing of Interactive Applications Proc. IEEE 5th Int. Conf. on Software Testing, Verification and Validation (ICST), 17-21 Apr 2012, Montreal, Canada, pp. 81-90; Yang, W., Prasad, M.R., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications Proc. 16th Int. Conf. on Fundamental Approaches to Software Engineering (FASE), 16-24 Mar 2013, Rome, Italy, pp. 250-265; Azim, T., Neamtiu, I., Targeted and Depth-first Exploration for Systematic Testing of Android Apps Proc. 2013 Int. Conf. on Object-Oriented Programming, Systems, Languages & Applications (OOPSLA), 26-31 Oct 2013, Indianapolis, USA, pp. 641-660; Gross, F., Fraser, G., Zeller, A., EXSYST: Search-Based GUI Testing 2012 34th Int. Conf. on Software Engineering (ICSE), 2-9 Jun 2012, Zurich, Switzerland, pp. 1423-1426; Memon, A.M., GUI Testing: Pitfalls and Process (2002) Computer, 35 (8), pp. 87-88. , Aug IEEE Computer Society; Strecker, J., Memon, A.M., Accounting for Defect Characteristics in Evaluations of Testing Techniques (2012) ACM Trans. on Software Engineering and Methodology (TOSEM), 21 (3). , Jun; Yuan, X., Cohen, M., Memon, A.M., GUI Interaction Testing: Incorporating Event Context (2011) IEEE Trans. on Software Engineering, 37 (4), pp. 559-574. , Jul-Aug; Mesbah, A., Van Deursen, A., Roest, D., Invariant-Based Automatic Testing of Modern Web Applications (2012) IEEE Trans. on Software Engineering, 38 (1), pp. 35-53. , Jan-Feb; Nguyen, B., Robbins, B., Banerjee, I., Memon, A.M., GUITAR: An innovative tool for automated testing of GUI-driven software (2013) Automated Software Engineering, 21 (1), pp. 65-105; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications Proc. 21st Int. Conf. on Software Maintenance (ICSM), 25-30 Sep 2005, Budapest, Hungary, pp. 473-482",,,"Institut Mines-Telecom;INTER-TRUST - FP7;SPaCIoS European Project;TU Munich","IEEE Computer Society","7th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2014","31 March 2014 through 4 April 2014","Cleveland, OH",105862,,9780769551944,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-84903642261
"Wang P., Liang B., You W., Li J., Shi W.","56177275900;57200218592;37562365200;56176387900;8727119200;","Automatic android GUI traversal with high coverage",2014,"Proceedings - 2014 4th International Conference on Communication Systems and Network Technologies, CSNT 2014",,, 6821582,"1161","1166",,19,"10.1109/CSNT.2014.236","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84902576511&doi=10.1109%2fCSNT.2014.236&partnerID=40&md5=2a9007c81f17e4a31423fa0ec33cfbb4","School of Information, Renmin University of China, Beijing, China","Wang, P., School of Information, Renmin University of China, Beijing, China; Liang, B., School of Information, Renmin University of China, Beijing, China; You, W., School of Information, Renmin University of China, Beijing, China; Li, J., School of Information, Renmin University of China, Beijing, China; Shi, W., School of Information, Renmin University of China, Beijing, China","Android apps are usually rich in GUIs and users interact with the GUIs to use the functions provided by an app. To make Android apps reliable, GUI testing is an effective method. Automation and high GUI coverage is necessary in the testing for the sake of minimizing human effort and maximizing effectiveness. However, the existing work is insufficient to meet such requirements. In this paper, we identify several challenges for conducting GUI traversal on Android, such as component recognition, event injection and UI traversal. We present a tool named Droid Crawle to address the challenges for automatically exploring the GUIs of Android apps with high GUI coverage. The evaluation of Droid Crawler shows that it is efficient and effective to automatically capture the GUI tree of the target application with high GUI coverage. © 2014 IEEE.","Android; Automatic GUI Testing; High coverage","Communication systems; Graphical user interfaces; Android; Android apps; Automatic gui testing; GUI testing; High coverage; Target application; Android (operating system)",,,,,,,,"http://www.idc.com/getdoc.jsp?containerId=prUS24108913, IDC Worldwide Quarterly Mobile Phone Tracker. May 2013; http://www.kaspersky.com/about/news/virus/2013/ Todays_Mobile_Threatscape_Android_Centric_Booming_Espionage_friendly, Kapersky Lab. Today's Mobile Threatscape: Android-Centric, Booming, Espionage-friendly; http://developer.android.com/tools/help/adb.html, Android Debug Bridge; http://developer.android.com/tools/help/monkey.html, UI/Application Exerciser Monkey; http://developer.android.com/tools/help/hierarchy-viewer.html, Hierarchy Viewer; MonkeyRunner, , http://developer.android.com/tools/help/monkeyrunner_concepts.html, Android Developers. June 2013; Robotium, , http://code.google.com/p/robotium/, Google Code, June 2013; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawlingbased technique for android mobile application testing (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW2011), pp. 252-261. , Mar; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timingand touch-sensitive record and replay for Android (2013) International Conference on Software Engineering (ICSE 2013), pp. 72-81. , May; Hornyack, P., Han, S., Jung, J., Schechter, S., Wetherall, D., These aren't the droids you're looking for: Retrofitting android to protect data from imperious apps (2011) ACM Conference on Computer and Communications Security (CCS 2011), pp. 639-652. , October; Zheng, C., Zhu, S., Dai, S., Gu, G., Gong, X., Han, X., Zou, W., Smartdroid: An automatic system for revealing ui-based trigger conditions in android applications (2012) ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM 2012), pp. 93-104. , October; Rastogi, V., Chen, Y., Enck, W., AppsPlayground: Automatic security analysis of smartphone applications (2013) Data and Application Security and Privacy, pp. 209-220. , February; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an Android application (2011) Software Testing, Verification and Validation (ICST 2011), pp. 377-386. , March; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) ACM International Conference on Automated Software Engineering ( ASE 2012), pp. 258-261. , September; Hu, C., Neamtiu, I., Automating gui testing for android applications (2011) International Workshop on Automation of Software Test (ASE 2011), pp. 77-83. , May; http://developer.android.com/reference/android/app/Instrumentation.html, Android Instrumentation; Hornyack, P., Han, S., Jung, J., Schechter, S., Wetherall, D., These aren't the droids you're looking for: Retrofitting android to protect data from imperious applications (2011) ACM Conference on Computer and Communications Security (CCS 2011), pp. 639-652. , October; Jääskeläinen, A., Design, implementation and use of a test model library for GUI testing of smartphone applications (2011) Doctoral Dissertation, Tampere University of Technology, , Finland; http://tema.cs.tut.fi/intro.html, Tampere University of Technology. Introduction: Model-based testing and glossary; Memon, A.M., An event flow model of GUI based applications for testing (2007) Software Testing, Verification and Reliability, pp. 137-157; Ying-Dar, L.A.V., (2011) Automatic Functionality and Stability Testing Through GUI of Handheld Devices; www.appchina.com/app/it.suppeco.smsvoice.android, SMS Voice Suppeco; Yang, Z., Yang, M., Zhang, Y., Gu, G., Ning, P., Wang, X.S., Appintent: Analyzing sensitive data transmission in android for privacy leakage detection (2013) ACM Conference on Computer and Communication Security (CCS 2013); https://groups.google.com/forum/#!msg/androidcontrib/3ls0ige_E_k/ iFboWDnM5vQ, Request for help to improve automated testing for the Android platform; http://developer.android.com/reference/android/test/ InstrumentationTestRunner.html, Android InstrumentationRunner",,,"","IEEE Computer Society","2014 4th International Conference on Communication Systems and Network Technologies, CSNT 2014","7 April 2014 through 9 April 2014","Bhopal",105702,,9781479930708,,,"English","Proc. - Int. Conf. Commun. Syst. Netw. Technol., CSNT",Conference Paper,"Final","",Scopus,2-s2.0-84902576511
"Moreira R.M.L.M., Paiva A.C.R.","25925193000;7102683763;","A GUI modeling DSL for pattern-based GUI testing PARADIGM",2014,"ENASE 2014 - Proceedings of the 9th International Conference on Evaluation of Novel Approaches to Software Engineering",,,,"126","135",,15,"10.5220/0004880601260135","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84902305809&doi=10.5220%2f0004880601260135&partnerID=40&md5=104b205fb36b4303a410b37a136cfc04","INESC TEC, Department of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal","Moreira, R.M.L.M., INESC TEC, Department of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal; Paiva, A.C.R., INESC TEC, Department of Informatics Engineering, Faculty of Engineering of the University of Porto, Porto, Portugal","Today's software feature user interface (UI) patterns. Those patterns describe generic solutions for common recurrent problems. However, to the best of our knowledge, there is no specific testing methodology that is particularly suited for testing those patterns providing generic testing solutions that can be reused after minor configurations in order to test slightly different implementations. Pattern-Based Graphical User Interface Testing (PBGT) is a recent methodology that aims at systematizing and automating the GUI testing process, by sampling the input space using ""UI Test Patterns"" that express generic solutions to test common recurrent GUI's behaviour. This paper describes the development process of PARADIGM, a domain specific language (DSL) to be used in the context of PBGT and empirically evaluates PARADIGM to assess its diminished modeling efforts, usefulness, graphical power, and acceptability.","Domain-specific languages; Graphical modeling DSL; GUI modeling; GUI testing; PARADIGM; Pattern-based GUI testing","Digital subscriber lines; Graphical user interfaces; Problem oriented languages; Software engineering; Development process; Domain specific languages; Generic solutions; GraphicaL model; GUI testing; PARADIGM; Software features; Testing methodology; Modeling languages",,,,,,,,"Brucker, A.D., Doser, J., Metamodel-based uml notations for domain-specific languages (2007) 4th International Workshop on Software Language Engineering (ATEM 2007), , Favre, J. M., Gasevic, D., Lammel, R., andWinter, A., editors Nashville, USA; Cabot, J., Gogolla, M., Object constraint language (OCL): A definitive guide (2012) Proceedings of the 12th International Conference on Formal Methods for the Design of Computer, Communication, and Software Systems: Formal Methods for Model-driven Engineering, SFM'12, pp. 58-90. , Berlin, Heidelberg. Springer-Verlag; Constantine, L., Canonical abstract prototypes for abstract visual and interaction design (2003) Interactive Systems Design, Specification, and Verification, pp. 1-15. , volume 2844 of LNCS, Springer-Verlag, Berlin/Heidelberg; Cook, S., Jones, G., Kent, S., Wills, A., (2007) Domain-Specific Development with Visual Studio DSL Tools, , Addison-Wesley Professional, first edition; Cunha, M., Paiva, A.C.R., Sereno Ferreira, H., Abreu, R., PETTool: A pattern-based gui testing tool (2010) 2nd International Conference on Software Technology and Engineering (ICSTE'10), SFM'12, pp. 202-206; Fowler, M., (2010) Domain Specific Languages, , Addison-Wesley Professional, 1st edition; (2008) Open Modelsphere-Free Modeling Software Open Source GPL, , http://www.modelsphere.org, Grandite, Accessed January, 2013; Gronback, R.C., Boldt, N., (2013) Graphical ModelingFramework, , http://www.eclipse.org/modeling/gmp, Accessed April, 2013; Jackson, D., (2011) Software Abstractions: Logic, Language, and Analysis, , MIT Press; 2nd Revised edition; Karsai, G., Krahn, H., Pinkernell, C., Rumpe, B., Schneider, M., Vlkel, S., Design guidelines for domain specific languages (2009) Proceedings of the 9th OOPSLA Workshop on Domain-Specific Modeling (DSM'09), pp. 7-13. , Rossi, M., Sprinkle, J., Gray, J., and Tolvanen, J.-P., editors; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , ACM Press; (2012) Model-based Testing with SpecExplorer-Microsoft Research, , http://research.microsoft.com/enus/projects/specexplorer, Microsoft Accessed February,2012; (2013) Spec#-Microsoft Research, , http://research.microsoft.com/enus/projects/specsharp, Accessed January, 2013; Monteiro, T., Paiva, A.C.R., Pattern based gui testing modeling environment (2013) ICST Workshops, pp. 140-143; Moody, D., What makes a good diagram? Improving the cognitive effectiveness of diagrams in is development (2007) Advances in Information Systems Development, pp. 481-492. , Wojtkowski, W., Wojtkowski, W., Zupancic, J., Magyar, G., and Knapp, G., editors, Springer US; Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for gui modelling and testing-van4guim (2008) ICSOFT (SE/MUSE/GSDCA), pp. 104-111. , Cordeiro, J., Shishkov, B., Ranchordas, A., and Helfert, M., editors INSTICC Press; Moreira, R.M.L.M., Paiva, A.C.R., Memon, A., A pattern-based approach for gui modeling and testing (2013) Proceedings of the 24th International Symposium on Software Reliability Engineering, ISSRE' 13, , Pasadena, CA, USA. IEEE Computer Society; Paiva, A., Faria, J.C.P., Vidal, R.F.A.M., Specification-based testing of user interfaces (2003) Interactive Systems Design, Specification, and Verification, 10th International Workshop, pp. 139-153. , volume 2844 of LNCS, Springer; Paiva, A.C., Faria, J.C., Tillmann, N., Vidal, R.A., A model-to-implementation mapping tool for automated model-based gui Testing (2005) Formal Methods and Software Engineering, pp. 450-464. , Lau, K.-K. and Banach, R., editors 3785 of LNCS, Springer Berlin Heidelberg; Paternò, F., Mancini, C., Meniconi, S., Concur-tasktrees: A diagrammatic notation for specifying task models (1997) Proceedings of the IFIP TC13 International Conference on Human-Computer Interaction, INTERACT '97, pp. 362-369. , London, UK, UK. Chapman &amp; Hall, Ltd; Rubel, D., Wren, J., Clayberg, E., (2011) The Eclipse Graphical Editing Framework (GEF), , Addison-Wesley Professional, 1st edition; Runeson, P., Höst, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Software Engineering, 14 (2), pp. 131-164; (2005) Staruml-The Open Source UML/MDA Platform, , http://staruml.sourceforge.net/en, Accessed January, 2013; Steinberg, D., Budinsky, F., Paternostro, M., Merks, E., (2009) EMF: Eclipse Modeling Framework 2.0, , Addison-Wesley Professional, 2nd edition; Strembeck, M., Zdun, U., An approach for the systematic development of domain-specific languages (2009) Softw. Pract. Exper, 39 (15), pp. 1253-1292",,,"Control and Communication (INSTICC);Institute for Systems and Technologies of Information,","SciTePress","9th International Conference on Evaluation of Novel Approaches to Software Engineering, ENASE 2014","28 April 2014 through 30 April 2014","Lisbon",105635,,9789897580307,,,"English","ENASE - Proc. Int. Conf. Eval. Novel Approaches Softw. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84902305809
"Nguyen B.N., Robbins B., Banerjee I., Memon A.","57220847012;36784707800;7004506086;35599876500;","GUITAR: An innovative tool for automated testing of GUI-driven software",2014,"Automated Software Engineering","21","1",,"65","105",,126,"10.1007/s10515-013-0128-9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84899458075&doi=10.1007%2fs10515-013-0128-9&partnerID=40&md5=f13f9af3fbc6532d0f188379791ee3e3","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Nguyen, B.N., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Robbins, B., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Banerjee, I., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Memon, A., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Most of today's software applications feature a graphical user interface (GUI) front-end. System testing of these applications requires that test cases, modeled as sequences of GUI events, be generated and executed on the software. We term GUI testing as the process of testing a software application through its GUI. Researchers and practitioners agree that one must employ a variety of techniques (e.g., model-based, capture/replay, manually scripted) for effective GUI testing. Yet, the tools available today for GUI testing are limited in the techniques they support. In this paper, we describe an innovative tool called GUITAR that supports a wide variety of GUI testing techniques. The innovation lies in the architecture of GUITAR, which uses plug-ins to support flexibility and extensibility. Software developers and quality assurance engineers may use this architecture to create new toolchains, new workflows based on the toolchains, and plug in a variety of measurement tools to conduct GUI testing. We demonstrate these features of GUITAR via several carefully crafted case studies. © Springer Science+Business Media New York 2013.","GUI testing; Test automation; Test generation","Application programs; Musical instruments; Quality assurance; Software testing; Testing; Tools; Automated testing; Graphical user interfaces (GUI); GUI testing; Measurement tools; Software applications; Software developer; Test Automation; Test generations; Graphical user interfaces",,,,,,"Supported by",,"Alfaro, L.D., Henzinger, T.A., Interface theories for component-based design (2001) Proceedings of the First International Workshop on Embedded Software (EMSOFT'01), pp. 148-165. , Springer, London; Amalfitano, D., Fasolino, A.R., Tramontana, P., A GUI crawling-based technique for Android mobile application testing (2011) Proceedings of the IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW'11), pp. 252-261. , IEEE Comput. Soc., Los Alamitos; Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F., A framework for automated testing of javascript web applications (2011) Proceedings of the 33rd International Conference on Software Engineering (ICSE'11), pp. 571-580. , ACM, New York; Baresi, L., Young, M., (2001) Test Oracles, , Technical report CIS-TR-01-02, University of Oregon, Dept. of Computer and Information Science, Eugene, Oregon, USA; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSR'01), p. 34. , IEEE Comput. Soc., Washington; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering (ASE'07), pp. 333-342. , ACM, New York; Brooks, P., Robinson, B., Memon, A.M., An initial characterization of industrial graphical user interface systems (2009) Proceedings of the 2nd IEEE International Conference on Software Testing, Verification and Validation (ICST 2009), , IEEE Computer Society, Washington; Cadar, C., Dunbar, D., Engler, D., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (OSDI'08), pp. 209-224. , USENIX Association, Berkeley; Chang, T.H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Conference on Human Factors in Computing Systems, pp. 1535-1544; Chen, J., Subramaniam, S., A GUI environment to manipulate FSMs for testing GUI-based applications in Java (2001) Conference on System Sciences, 9, p. 9061; Chen, W.K., Tsai, T.H., Chao, H.H., Integration of specification-based and CR-based approaches for GUI testing (2005) Conference on Advanced Information Networking and Applications, pp. 967-972; Cunha, M., Paiva, A., Ferreira, H., Abreu, R., PETTool: A pattern-based GUI testing tool (2010) International Conference on Software Technology and Engineering, pp. 202-206; Draheim, D., Lutteroth, C., Weber, G., A source code independent reverse engineering tool for dynamic web sites (2005) Proceedings of the Ninth European Conference on Software Maintenance and Reengineering (CSMR'05), pp. 168-177. , IEEE Comput. Soc., Washington; Ganov, S., Kilmar, C., Khurshid, S., Perry, D., Test generation for graphical user interfaces based on symbolic execution (2008) Proceedings of the International Workshop on Automation of Software Test; Grechanik, M., Xie, Q., Fu, C., Creating GUI testing tools using accessibility technologies (2009) Conference on Software Testing, Verification, and Validation, pp. 243-250; Hellmann, T.D., Hosseini Khayat, A., Maurer, F., Supporting test-driven development of graphical user interfaces using agile interaction design (2010) Proceedings of the 2010 Third International Conference on Software Testing, Verification, and Validation Workshops, pp. 444-447; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation (ICST'10), pp. 245-254. , IEEE Comput. Soc., Washington; Jääskeläinen, A., Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Takala, T., Virtanen, H., Automatic GUI test generation for smartphone applications-an evaluation (2009) Proceedings of the Software Engineering in Practice Track of the 31st International Conference on Software Engineering (ICSE 2009), pp. 112-122. , companion volume. IEEE Computer Society, Los Alamitos; McMaster, S., Memon, A.M., An extensible heuristic-based framework for GUI test case maintenance (2009) Proceedings of the First International Workshop on TESTing Techniques & Experimentation Benchmarks for Event-driven Software (TESTBEDS'09), , IEEE Computer Society, Washington; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab., 17, pp. 137-157; Memon, A.M., Nguyen, B.N., Advances in automated model-based system testing of software applications with a GUI front-end (2010) Advances in Computers, 80, pp. 121-162. , Zelkowitz, M. V. ed., Academic Press, San Diego; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE'03), p. 260. , IEEE Computer Society, Washington; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 26, pp. 256-267. , ACM, New York; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of AJAX user interfaces (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE'09), pp. 210-220. , IEEE Computer Society, Washington; Myers, B.A., User interface software tools (1995) ACM Trans. Comput.-Hum. Interact., 2 (1), pp. 64-103; Nguyen, D.H., Strooper, P., Suess, J.G., Model-based testing of multiple GUI variants using the GUI test generator (2010) Workshop on Automation of Software Test, pp. 24-30; Paiva, A.C.R., Faria, J.C.P., Mendes, P.M.C., Reverse engineered formal models for GUI testing (2008) Proc. of Conf. on Formal Methods for Industrial Critical Systems, 4916 (1), pp. 218-233; Robinson, B., Francis, P., Ekdahl, F., A defect-driven process for software quality improvement (2008) Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM'08), pp. 333-335. , ACM, New York, doi:10.1145/1414004.1414072; Ruiz, A., Price, Y.W., GUI testing made easy (2008) Proceedings of the Testing: Academic & Industrial Conference-practice and Research Techniques, pp. 99-103. , IEEE Computer Society, Washington; Shneiderman, B., Plaisant, C., Cohen, M., Jacobs, S., (2009) Designing the User Interface: Strategies for Effective Human-computer Interaction, , 5th edn. Addison-Wesley, Reading; Silva, J.L., Campos, J.C., Paiva, A.C.R., Model-based user interface testing with spec explorer and ConcurTaskTrees (2008) Electron. Notes Theor. Comput. Sci., 208, pp. 77-93; Silva, J.C., Saraiva, J., Campos, J.C., A generic library for GUI reasoning and testing (2009) ACM Symposium on Applied Computing, pp. 121-128; Staiger, S., Static analysis of programs with graphical user interface (2007) 11th European Conference on Software Maintenance and Reengineering (CSMR'07), pp. 252-264; Ural, H., Yang, B., A test sequence selection method for protocol testing (1991) IEEE Trans. Commun., 39 (4), pp. 514-523; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-based testing of object-oriented reactive systems with Spec Explorer (2008) Formal Methods and Testing, Chap.: Model-based Testing of Object-oriented Reactive Systems with Spec Explorer, pp. 39-76. , Hierons, R. M., Bowen, J. P., Harman, M. eds., Springer, Berlin; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a model-driven approach (2006) Conference on Software Engineering, pp. 9-14; Xie, Q., Memon, A.M.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1), p. 4; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. on Softw. Eng. and Method; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Trans. Softw. Eng., 36, pp. 81-95; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. Softw. Eng., 37 (4), pp. 559-574; Zhang, S., Saff, D., Bu, Y., Ernst, M.D., Combined static and dynamic automated test generation (2011) Proceedings of the 2011 International Symposium on Software Testing and Analysis (ISSTA'11), pp. 353-363. , ACM, New York","Nguyen, B.N.; Department of Computer Science, University of Maryland, College Park, MD 20742, United States; email: baonn@cs.umd.edu",,,"Kluwer Academic Publishers",,,,,09288910,,ASOEE,,"English","Autom Software Eng",Article,"Final","",Scopus,2-s2.0-84899458075
"Lin Y.-D., Chu E.T.-H., Yu S.-C., Lai Y.-C.","7406584610;57211735640;56070272600;7401512145;","Improving the accuracy of automated GUI testing for embedded systems",2014,"IEEE Software","31","1", 6576113,"39","45",,18,"10.1109/MS.2013.100","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84896284732&doi=10.1109%2fMS.2013.100&partnerID=40&md5=25200560de4aa251f60e1249bebc1dbb","National Chiao Tung University, Taiwan; National Yunlin University of Science and Technology, Taiwan","Lin, Y.-D., National Chiao Tung University, Taiwan; Chu, E.T.-H., National Yunlin University of Science and Technology, Taiwan; Yu, S.-C., National Chiao Tung University, Taiwan; Lai, Y.-C., National Yunlin University of Science and Technology, Taiwan","Automated GUIs test application user interfaces and verify their functionalities. However, due to the uncertainty of runtime execution environments, the device under test (DUT) might not reproduce GUI operations on time, resulting in test failures. The Smart Phone Automated GUI (SPAG) avoids nondeterministic events by batching event sequences and directly reproducing them on the DUT. SPAG dynamically changes the timing of following operations so that all event sequences can be performed on time. Experiments conducted on an Acer Liquid smartphone comparing SPAG to MonkeyRunner showed that SPAG can maintain up to 99.5 percent accuracy. © 1984-2012 IEEE.",,"Automation; Design for testability; Smartphones; Device under test; Event sequence; Following operation; GUI testing; Non-deterministic events; Run-time execution; Test applications; Test failure; Graphical user interfaces",,,,,,,,"Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) Proc. 22nd Ann. ACM Symp. User Interface Software and Technology (UIST 09) ACM, pp. 183-192; Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proc. 28th Int'l Conf. Human Factors in Computing Systems (CHI 10) ACM, pp. 1535-1544",,,,"IEEE Computer Society",,,,,07407459,,IESOE,,"English","IEEE Software",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84896284732
"Vijayakumar E., Punithavalli M.","55845209200;14044200100;","Enhanced approaches to improve graphical user interface testing process",2013,"Journal of Engineering and Applied Sciences","8","5",,"172","176",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84889605870&partnerID=40&md5=73654f0342e004fe8e5c9b3dbd425575","School of Computer Applications, Professional Institutions, Coimbatore, India; Sri Ramakrishna Engineering College, Coimbatore, Tamil Nadu, India","Vijayakumar, E., School of Computer Applications, Professional Institutions, Coimbatore, India; Punithavalli, M., Sri Ramakrishna Engineering College, Coimbatore, Tamil Nadu, India","Graphical User Interfaces (GUI) are important components of Event-Driven software that are used mainly for improving user-computer interactions. As the number of graphical controls that the user can select using mouse or key board is very high, the number of test cases generated is also veiy high. Thus, the test cases generation process has to be optimized. This research performs this in three steps by enhancing the three operations, namely; test case generation, reduction and prioritization. Experimental results prove that the methods proposed have optimized the process of test case generation and has improved the accuracy of error detection rate. A maximum of 99.25% fault detection rate was obtained which shows that the proposed amalgamation of techniques are successful and can be used by the 21 st centuiy software. © Medwell Journals, 2013.","Classification; Graphical user interface; Prioritization; Test case generation; Test case reduction",,,,,,,,,"Arlt, S., Bertolini, C., Schaf, M., (2011) Behind the scenes: An approach to incorporate context in GUI test case generation. Proceedings of the IEEE 4th International Conference on Software Testing, pp. 222-231. , Verification and Validation Workshops, March 21 -25, 2011, Berlin, Germany; Bryce, R.C., Memon, A.M., Test suite prioritization by interaction coverage (2007) Proceedings of the Workshop on Domain Specific Approaches to Software Test Automation: In Conjunction with the 6th ESEC/FSE loint Meeting, pp. 1 -7. , September, 4, 2007, Dubrovnik, Croatia; Gove, R., Faytong, I., Identifying infeasible GUI test cases using support vector machines and induced grammars (2012) Proceedings of the IEEE 4th International Conference on Software Testing, pp. 202-211. , Verification and Validation Workshops, March 21 -25, 2011, Berlin, Germany; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) J. Software Test. Verification Reliab., 17, pp. 137-157; Myers, B.A., User interface software tools (1995) ACM Trans. Comput. Hum. Interact, 2, pp. 64-103; Roongruangsuwan, S., Daengdej, J., Test case prioritization techniques (2010) J. Theor. Applied Inform. Technol., 18, pp. 45-60; Vijayakumar, E., Punithavalli, M., A survey on user interface defect detection in object oriented design (2009) Global J. Comput. Sci. Technol., 9, pp. 176-182; Vijayakumar, E., Punithavalli, M., Enhanced GUI test case generation method using two-stage classification method (2013) Int. J. Comput Appl., 63, pp. 29-33; Yoo, S., Hannan, M., Tone11a, P., Susi, A., Clustering test cases to achieve effective and scalable prioritisation incorporating expert knowledge (2009) Proceedings of the 18th International Symposium on Software Testing and Analysis, pp. 201 -212. , luly 19-23, 2009, Chicago, IL, USA","Vijayakumar, E.; School of Computer Applications, , Coimbatore, India",,,,,,,,1816949X,,,,"English","J. Eng. Appl. Sci.",Article,"Final","",Scopus,2-s2.0-84889605870
"Colley A., Tikka P., Huhtala J., Häkkilä J.","56926846100;56021909800;24080426800;13007086200;","Investigating text legibility in mobile UI - A case study comparing automated vs. user study based evaluation",2013,"Proceedings of the 17th International Academic MindTrek Conference: ""Making Sense of Converging Media"", MindTrek 2013",,,,"304","306",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893340716&partnerID=40&md5=f92ec01ca2654da8b15bd026f9cf8ddf","Center for Internet Excellence, University of Oulu, P.O. Box 1001, FI-90014 Oulu, Finland; Department of Psychology, Northumbria University, Newcastle upon Tyne NE1 8ST, United Kingdom; OP-Services Ltd., Elektroniikkatie 10, 90570 Oulu, Finland","Colley, A., Center for Internet Excellence, University of Oulu, P.O. Box 1001, FI-90014 Oulu, Finland; Tikka, P., Department of Psychology, Northumbria University, Newcastle upon Tyne NE1 8ST, United Kingdom; Huhtala, J., OP-Services Ltd., Elektroniikkatie 10, 90570 Oulu, Finland; Häkkilä, J., Center for Internet Excellence, University of Oulu, P.O. Box 1001, FI-90014 Oulu, Finland","For typical mobile devices, such as smartphones, a significant amount of the use involves reading text. Our paper contributes in providing methods and initial data to improve usability testing practices related to mobile UI text legibility. We compared two methods to study mobile UI text legibility - perceived and measured results from a study of 17 users, and automated Optical Character Recognition (OCR). The results are compared with different foreground-background graphics and simulated lighting conditions causing reflections on the device screen, which are essential factors in the mobile use context and can influence the text legibility. The results demonstrate, for instance, a very strong correlation between subjective ratings and OCR results, in response to the different conditions. Copyright © 2013 ACM.","Legibility; Mobile devices; OCR; Usability methods; User tests","Legibility; Lighting conditions; Optical character recognition (OCR); Strong correlation; Subjective rating; Usability methods; Usability testing; User tests; Optical character recognition; Mobile devices",,,,,,,,"Von Ahn, L., Maurer, B., McMillen, C., Abraham, D., Blum, M., ReCAPTCHA: Human-based character recognition via web security measures (2008) Science, 321, pp. 1465-1468. , 12 September 2008; Bernard, M.L., Chaparro, B.S., Mills, M.M., Halcomb, C.G., Comparing the effects of text size and format on the readibility of computer-displayed times new Roman and arial text (2003) International Journal of Human-Computer Studies, 59 (6), pp. 823-835. , DOI:10.1016/S1071-5819(03)00121-6; Boschmann, M.C., Roufs, J.A.J., Text quality metrics for visual display units: II. An experimental survey (1997) Displays, 18 (1997), pp. 45-64; Dillon, A., Richardson, J., McKnight, C., The effect of display size and paragraph splitting on reading lengthy text from screen (1990) Behaviour and Information Technology, 9 (3), pp. 215-227; Knoche, H.O., McCarthy, J.D., Sasse, M.A., Reading the fine print: The effect of text legibility on perceived video quality in mobile TV (2006) Proceedings of MM'06, pp. 727-730; Knoblauch, K., Arditi, A., Szlyk, J., Effects of chromatic and luminance contrast on reading (1990) Journal Opt. Soc. Am. A, 7, pp. 1976-1984. , (1990); Mustonen, T., Olkkonen, M., Häkkinen, J., Examining mobile phone text legibility while walking (2004) CHI 2004 Late Breaking Results","Center for Internet Excellence, P.O. Box 1001, FI-90014 Oulu, Finland",,"EMMi Lab.;Tampere Univ. of Technology (TUT);University of Tampere (UTA);Tampere University of Applied Sciences (TAMK);MindTrek Association",,"17th International Academic MindTrek Conference: ""Making Sense of Converging Media"", MindTrek 2013","1 October 2013 through 4 October 2013","Tampere",102046,,9781450319928,,,"English","Proc. Int. Acad. MindTrek Conf.: ""Mak. Sense Converging Media"", MindTrek",Conference Paper,"Final","",Scopus,2-s2.0-84893340716
"Moreira R.M.L.M., Paiva A.C.R., Memon A.","25925193000;7102683763;35599876500;","A pattern-based approach for GUI modeling and testing",2013,"2013 IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013",,, 6698881,"288","297",,48,"10.1109/ISSRE.2013.6698881","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893264322&doi=10.1109%2fISSRE.2013.6698881&partnerID=40&md5=d3c578acbc0c22f90e91ebfb5bdac67f","Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Department of Computer Science, University of Maryland, College Park, MD, United States","Moreira, R.M.L.M., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Paiva, A.C.R., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Porto, Portugal; Memon, A., Department of Computer Science, University of Maryland, College Park, MD, United States","User Interface (UI) patterns are used extensively in the design of today's software. UI patterns embody commonly recurring solutions that solve common GUI design problems, such as 'login,' 'file-open,' and 'search.' Yet, testing of GUIs for functional correctness has largely ignored UI patterns. This paper formalizes the notion of a Pattern-Based Graphical User Interface (GUI) Testing method (PBGT) for systematizing and automating the GUI testing process. The space of all possible interactions with a GUI is typically very large. PBGT presents a new methodology to sample the input space using 'UI Test Patterns,' that embody commonly recurring solutions to test GUIs. Our empirical studies show that the PBGT methodology is effective in revealing faults in fielded GUIs. © 2013 IEEE.","GUI Modeling; GUI Testing; Model-based GUI Testing; Software Testing; UI Patterns; UI Test Patterns","Empirical studies; Functional correctness; Graphical user interfaces (GUI); GUI designs; GUI testing; Test Pattern; Testing method; Ui patterns; Software reliability; Software testing; Testing; Graphical user interfaces",,,,,,,,"Neil, T., 12 Standard Screen Patterns, , http://designingwebinterfaces.com/designing-web-interfaces-12- screenpatterns, accessed November, 2012; (2012) UI Design Patterns and Library Builder, , http://patternry.com, accessed November; Tidwell, J., (2011) Designing Interfaces, , Sebastopol, CA: O'Reilly; Toxboe, A., UI Patterns - User Interface Design Pattern Library, , http://ui-patterns.com, accessed November, 2012; Van Welie, M., Interaction Design Pattern Library, , http://www.welie.com/patterns, accessed November, 2012; Yahoo! Design Pattern Library, , http://developer.yahoo.com/ypatterns, accessed November, 2012; Strembeck, M., Zdun, U., An approach for the systematic development of domain-specific languages (2009) Softw. Pract. Exper., 39 (15), pp. 1253-1292. , http://dx.doi.org/10.1002/spe.v39:15, Oct; Paternò, F., Mancini, C., Meniconi, S., Concur task trees: A diagrammatic notation for specifying task models (1997) Proceedings of the IFIP TC13 International Conference on Human-Computer Interaction, Ser. INTERACT'97, pp. 362-369. , http://dl.acm.org/citation.cfm?id=647403.723688, London, UK, UK: Chapman & Hall, Ltd; Skrypuch, N., Eclipse Modeling - EMF - Home, , http://www.eclipse.org/modeling/emf, accessed November, 2012; Mobile.de - Germany's Biggest Vehicle Marketplace Online. Search, Buy and Sell Used and New Vehicles, , http://www.mobile.de, accessed December, 2012; Hung, S., Australian Charts Portal, , http://australian-charts.com, accessed February, 2012; Inc, A., Apple - ITunes - Everything you need to be Entertained, , http://www.apple.com/itunes, accessed February, 2012; Google, , http://www.google.com, accessed February, 2012; Pehmöller, A., Salger, F., Wagner, S., Patterns for testing in global software development (2010) Proceedings of the 13th International Conference on Quality Engineering in Software Technology; Soundarajan, N., Hallstrom, J., Shu, G., Delibas, A., Patterns: From system design to software testing (2008) Innovations in Systems and Software Engineering, 4, pp. 71-85. , http://dx.doi.org/10.1007/s11334-007-0042-z; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, Ser. ISSRE'01, p. 34. , http://dl.acm.org/citation.cfm?id=851028.856279, Washington, DC, USA: IEEE Computer Society; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the 11th International Symposium on Software Reliability Engineering, Ser. ISSRE'00, p. 110. , http://dl.acm.org/citation.cfm?id=851024.856239, Washington, DC, USA: IEEE Computer Society; Reza, H., Ogaard, K., Malge, A., A model based testing technique to test web applications using statecharts (2008) Proceedings of the Fifth International Conference on Information Technology: New Generations, Ser. ITNG'08, pp. 183-188. , http://dx.doi.org/10.1109/ITNG.2008.145, Washington, DC, USA: IEEE Computer Society; Kervinen, A., Maunumaa, M., Päakkönen, T., Katara, M., Modelbased testing through a GUI (2006) Proceedings of the 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005), Number 3997 in Lecture Notes in Computer Science, pp. 16-31. , Springer; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage Criteria for GUI Testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , ACM Press; Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated java GUI modeling for model-based testing purposes (2011) Proceedings of the 2011 Eighth International Conference on Information Technology: New Generations, Ser. ITNG'11, pp. 268-273. , http://dx.doi.org/10.1109/ITNG.2011.54, Washington, DC, USA: IEEE Computer Society; Belli, F., Beyazit, M., Güler, N., Event-based GUI testing and reliability assessment techniques - An experimental insight and preliminary results (2011) Proceedings of the 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops, Ser. ICSTW'11, pp. 212-221. , http://dx.doi.org/10.1109/ICSTW.2011.59, Washington, DC, USA: IEEE Computer Society; Datentechnik, A., TSD - Test Suite Designer, , http://designingwebinterfaces.com/designing-web-interfaces-12- screenpatterns, accessed November, 2012; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M., A model-to-implementation mapping tool for automated model-based GUI testing (2005) ICFEM, Ser. Lecture Notes in Computer Science, 3785, pp. 450-464. , http://dblp.unitrier.de/db/conf/icfem/icfem2005.html#PaivaFTV05, Springer K.-K. Lau and R. Banach; Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for GUI modelling and testing - VAN4GUIM (2008) ICSOFT (SE/MUSE/GSDCA), J. Cordeiro, B. Shishkov, A. Ranchordas, and M. Helfert, pp. 104-111. , http://dblp.uni-trier.de/db/conf/icsoft/icsoft2008-2.html#MoreiraP08, INSTICC Press; Barbosa, A., Paiva, A.C., Campos, J.C., Test case generation from mutated task models (2011) Proceedings of the 3rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, Ser. EICS'11, pp. 175-184. , http://doi.acm.org/10.1145/1996461.1996516, New York, NY, USA: ACM","Department of Informatics Engineering, , Porto, Portugal",,,,"2013 IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013","4 November 2013 through 7 November 2013","Pasadena, CA",102439,,9781479923663,,,"English","IEEE Int. Symp. Softw. Reliab. Eng., ISSRE",Conference Paper,"Final","",Scopus,2-s2.0-84893264322
"Aho P., Räty T., Menz N.","35188652400;16550820200;46461640500;","Dynamic reverse engineering of GUI models for testing",2013,"2013 International Conference on Control, Decision and Information Technologies, CoDIT 2013",,, 6689585,"441","447",,10,"10.1109/CoDIT.2013.6689585","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893263302&doi=10.1109%2fCoDIT.2013.6689585&partnerID=40&md5=2da1f592455e5cc9722f22c80dda01a9","VTT Technical Research Centre of Finland, Oulu, Finland; Fraunhofer FOKUS, Berlin, Germany","Aho, P., VTT Technical Research Centre of Finland, Oulu, Finland; Räty, T., VTT Technical Research Centre of Finland, Oulu, Finland; Menz, N., Fraunhofer FOKUS, Berlin, Germany","A significant challenge in application of modelbased testing (MBT) is that manually designing the test models requires considerable amount of effort and deep expertise in formal modeling. Reverse engineering can be used to automate parts of the modeling process but in applications with a graphical user interface (GUI), the dynamic behavior of the GUI is difficult to extract with static reverse engineering. Therefore we propose to use dynamic reverse engineering for automatically generating GUI models suitable for MBT. In this paper we compare various approaches for automated GUI modeling including an empirical tool study, propose a GUI component classification suitable for GUI automation, and present some examples of GUI automation strategies for efficient modeling of GUI applications. © 2013 IEEE.","GUI automation; GUI modeling; MBGT; MBT; Model generation; Modelbased GUI testing","Dynamic behaviors; Graphical user interfaces (GUI); GUI applications; GUI testing; MBGT; MBT; Model based testing; Model generation; Automation; Information technology; Reverse engineering; Graphical user interfaces",,,,,,,,"Li, K., Wu, M., (2004) Effective Gui Test Automation: Developing An Automated Gui Testing Tool, , SYBEX Inc., Alameda, CA; Utting, M., Legeard, B., Practical model-based testing: A tools approach (2006) Inc, San Francisco, CA, USA, , Morgan Kaufmann Publishers; Kanstrén, T., A framework for observation-based modelling in model-based testing (2010) VTT Publications 727, Espoo, Finland; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI models for testing (2010) 5th Iberian Conference on Information Systems and Technologies (CISTI), Santiago de Compostela, Spain; Aho, P., Menz, N., Räty, T., Enhancing generated java gui models with valid test data 2011 IEEE Conference on Open Systems (ICOS 2011, pp. 25-28. , September 2011, Langawi, Malaysia; Chikofsky, E.J., Cross, J.H.I.I., Reverse engineering and design recovery: A taxonomy (1990) IEEE Software, 7 (1), pp. 13-17. , Jan; Kollmann, R., Selonen, P., Stroulia, E., Systä., T., Zündorf, A., A study on the current state of the art in tool-supported UML-based static reverse engineering (2002) Proceedings of the 9th Working Conference on Reverse Engineering (WCRE'02, , IEEE Computer Society Washington, DC, USA; Systa, T., Static and dynamic reverse engineering techniques for Java software systems (2000) Acta Electronica Universitatis Tamperensis 30, , Tampere, Finland; Silva, J.C., Silva, C.C., Gonçalo, R.D., Saraiva, J., Campos, J.C., The guisurfer tool: Towards a language independent approach to reverse engineering gui code (2010) Proceedings of the 2nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, Berlin, pp. 181-186. , Germany; Staiger, S., Reverse engineering of graphical user interfaces using static analyses (2007) 14th Working Conference on Reverse Engineering, , Vancouver, BC, Canada 29-31 October; Project Bauhaus web pages Accessed 29 of Nov 2012, , http://www.bauhaus-stuttgart.de/bauhaus; Briand, L.C., Labiche, Y., Leduc, J., Towards the reverse engineering of uml sequence diagrams for distributed, multithreaded java software (2004) Technical Report, Carleton University (SCE-04-04, , September; Samir, H., Kamel, A., Automated reverse engineering of Java graphical user interfaces for web migration (2007) ITI 5th International Conference on Information and Communications Technology (ICICT, , , Cairo, Egypt December; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing Proceedings of the 10th Working Conference on Reverse Engineering (WCRE '03, , IEEE Computer Society, Washington, DC, USA; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of gui test cases for rapidly evolving software (2005) IEEE Trans. Software Engineering, 31 (10), pp. 884-896. , October; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification & Reliability, 17 (3), pp. 137-157. , September; The Web Pages of the GUITAR Toolset, , http://guitar.sourceforge.net, accessed 29 of Nov 2012; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving gui-based software applications Proceedings of the 21st IEEE International Conference on Software Maintenance (ICSM '05), IEEE Computer Society, pp. 473-482. , Washington, DC, USA; Miao, Y., Yang, X., An FSM based GUI test automation model 11th International Conference on Control, Automation, Robotics and Vision (ICARCV 2010, , , Singapore, 7-10th December 2010; Yang, X., Miao, Y., Zhang, Y., Model-driven GUI automation for efficient information exchange between heterogeneous electronic medical record systems 19th International Conference on Information System Development (ISD, , 25-27 August 2010, Prague, Czech Republic; Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated Java GUI modeling for model-based testing purposes 8th International Conference on Information Technology : New Generations (ITNG 2011, , 11-13 April 2011, Las Vegas, Nevada, USA; The Web Pages of the GraphML File Format, , http://graphml.graphdrawing.org/, accessed 29 of Nov 2012; The Web Pages of GraphWalker Open Source Model-based Testing Tool, , http://graphwalker.org/, accessed 29 of Nov 2012; The Web Pages of TerpOffice Calculator TerpCalc 4.0, , http://www.cs.umd.edu/~atif/TerpOfficeWeb/TerpOfficeV4.0/TerpCalc, accessed 29 of Nov 2012; The Web Pages of BuddyTalk Instant Messaging Application, , http://sourceforge.net/projects/buddytalk, accessed 29 of Nov 2012; Wang, L.J., Sajeev, A.S.M., Inchaiwong, L., A formal specification of interaction widgets hierarchy framework (2006) Proceedings of the 3rd International Conference on Information Technology: New Generations, pp. 658-664. , IEEE Computer Society Washington, DC, USA; Wang, L.J., Sajeev, A.S.M., Abstract interface specification languages for device-independent interface design: Classification, analysis and challenges (2006) 1st International Symposium on Pervasive Computing and Applications, , 3-5 August, Urumchi, Xinjiang, China","VTT Technical Research Centre of Finland, Oulu, Finland",,"University of Gafsa;RU. ATSI - Monastir University;UMR STMR 6279 CNRS - University of Technology of Troyes (UTT);Control Theory and Applications Group - Aristotle University of Thessaloniki",,"2013 International Conference on Control, Decision and Information Technologies, CoDIT 2013","6 May 2013 through 8 May 2013","Hammamet",102418,,9781424497966,,,"English","Int. Conf. Control, Decis. Inf. Technol., CoDIT",Conference Paper,"Final","",Scopus,2-s2.0-84893263302
"Azim T., Neamtiu I.","55901396200;10041674000;","Targeted and depth-first exploration for systematic testing of android apps",2013,"Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA",,,,"641","660",,158,"10.1145/2509136.2509549","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84888182092&doi=10.1145%2f2509136.2509549&partnerID=40&md5=d5c89665b558851975d91153c510c9c8","University of California, Riverside, United States","Azim, T., University of California, Riverside, United States; Neamtiu, I., University of California, Riverside, United States","Systematic exploration of Android apps is an enabler for a variety of app analysis and testing tasks. Performing the exploration while apps run on actual phones is essential for exploring the full range of app capabilities. However, exploring real-world apps on real phones is challenging due to non-determinism, non-standard control flow, scalability and overhead constraints. Relying on end-users to conduct the exploration might not be very effective: we performed a 7-user study on popular Android apps, and found that the combined 7-user coverage was 30.08% of the app screens and 6.46% of the app methods. Prior approaches for automated exploration of Android apps have run apps in an emulator or focused on small apps whose source code was available. To address these problems, we present A3E, an approach and tool that allows substantial Android apps to be explored systematically while running on actual phones, yet without requiring access to the app's source code. The key insight of our approach is to use a static, taint-style, dataflow analysis on the app bytecode in a novel way, to construct a high-level control flow graph that captures legal transitions among activities (app screens).We then use this graph to develop an exploration strategy named Targeted Exploration that permits fast, direct exploration of activities, including activities that would be difficult to reach during normal use. We also developed a strategy named Depth-first Exploration that mimics user actions for exploring activities and their constituents in a slower, but more systematic way. To measure the effectiveness of our techniques, we use two metrics: activity coverage (number of screens explored) and method coverage. Experiments with using our approach on 25 popular Android apps including BBC News, Gas Buddy, Amazon Mobile, YouTube, Shazam Encore, and CNN, show that our exploration techniques achieve 59.39-64.11% activity coverage and 29.53-36.46% method coverage. Copyright © 2013 ACM.","Code coverage; Dynamic analysis; Google android; Greybox testing; GUI testing; Systematic exploration; Taint analysis; Test case generation","Code coverage; Google android; Grey-box testing; GUI testing; Systematic exploration; Taint analysis; Test case generation; Computer programming languages; Data flow analysis; Dynamic analysis; Internet; Object oriented programming; Telephone sets; Robots",,,,,,,,"(2012) Gartner Says Worldwide PC Shipment Growth Was Flat in Second Quarter of 2012, , http://www.gartner.com/it/page.jsp?id=2079015, July, URL; (2010) Gartner Highlights Key Predictions for IT Organizations and Users in 2010 and beyond, , http://www.gartner.com/it/page.jsp?id=1278413, January, URL; (2012) Android and IOS Surge to New Smartphone OS Record in Second Quarter, , http://www.idc.com/getdoc.jsp?containerId=prUS23638712, IDC., August, URL; (2012) Android Reclaims 61 Percent of All U.S. Smartphone Sales, , URLhttp://news.cnet.com/8301-1023_3-57429192-93/android-reclaims-61- percent-of-all-u.s-smartphone-sales/, May; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 67-77; Hu, C., Neamtiu, I., Automating GUI testing for android applications AST '11, pp. 77-83; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timing- and touch-sensitive record and replay for android ICSE '13; Guyn, J., Facebook users give iPhone app thumbs down (2011) Los Angeles Times, , http://latimesblogs.latimes.com/technology/2011/07/facebook-users-give- iphone-app-thumbs-down.html, July, URL, July 21; Amalfitano, D., Fasolino, A.R., De Salvatore, Using GUI ripping for automated testing of android applications ASE'2012, pp. 258-261; Rastogi, V., Chen, Y., Enck, W., Apps Playground: Automatic security analysis of smart phone applications CODASPY'2013, pp. 209-220; Yang, W., Prasad, M., Xie, T., A Grey-box approach for automated gui-model generation of mobile applications FASE'13, pp. 250-265; Yuan, X., Memon, A.M., Generating event sequence- based test cases using gui run-time state feedback (2010) IEEE Transactions on Software Engineering, pp. 81-95; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases ICSE '07, pp. 396-405; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, pp. 137-157; (2012) UI/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html, August, URL; Memon, A., (2012) GUITAR, , August, URL guitar. sourceforge.net; Memon, A., (2012) Android GUITAR, , http://sourceforge.net/apps/mediawiki/guitar/index.php?title= Android_GUITAR, August, URL; (2012) Robotium, , http://code.google.com/p/robotium/, August, URL; (2013) APK Analyzer, , http://developer.sonymobile.com/knowledge-base/tool-guides/ analyse-your-apks-with-apkanalyser/, January, URL; Jeon, J., Foster, J.S., (2013) Troyd, , https://github.com/plum-umd/troyd, January, URL; (2013) Andro Guard, , http://code.google.com/p/androguard/, January, URL; (2013) Droid Box, , http://code.google.com/p/droidbox/, January, URL; (2013) Android Assault, , http://code.google.com/p/android-assault/, January, URL; (2012) Monkey Runner, , http://developer.android.com/guide/developing/tools/ monkeyrunner_concepts.html, August, URL; Authors, V., (2013) Scan Droid, , https://github.com/scandroid/scandroid, January, URL; Bitbar, (2013) Automated Testing Tool for Android - Test Droid, , http://testdroid.com/, January, URL; (2013) Android Test Automation - Automate your App Testing, , http://www.ranorex.com/mobile-automation-testing/android-test-automation. html, January, URL; River, W., (2013) Wind River Framework for Automated Software Testing, , http://www.windriver.com/announces/fast/, January, URL; (2013) Egg Plant for Mobile Testing, , http://www.testplant.com/products/eggplant/mobile/, January, URL; Bhattacharya, P., Ulanova, L., Neamtiu, I., Koduru, S.C., An empirical analysis of the bug-fixing process in open source android apps CSMR'13; Enck, W., Gilbert, P., Chun, B.G., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N., Taintdroid: An information-flow tracking system for real time privacy monitoring on smart phones (2010) OSDI, pp. 393-407; (2013) Android Emulator Limitations, , http://developer.android.com/tools/devices/emulator.html#limitations, March, URL; (2013) Android Intents, , http://developer.android.com/reference/android/content/Intent.html, March, URL; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smart phone apps FSE '12, pp. 1-11; B̈ohmer, M., Hecht, B., Scḧoning, J., Kr̈uger, A., Bauer, G., Falling asleep with angry birds, face book and kindle: A large scale study on mobile application usage MobileHCI '11, pp. 47-56; Cornelissen, B., Zaidman, A., Van Deursen, A., Moonen, L., Koschke, R., A systematic survey of program comprehension through dynamic analysis (2009) Software Engineering, IEEE Transactions on, pp. 684-702; Ernst, M.D., Static and dynamic analysis: Synergy and duality WODA 2003: Workshop on Dynamic Analysis, pp. 24-27. , May 9; Hao, S., Li, D., Halfond, W., Govindan, R., Estimating Android applications' CPU energy usage via bytecode profiling (2012) Green and Sustainable Software (GREENS), 2012 First International Workshop on, pp. 1-7; Dong, M., Zhong, L., Self-constructive high-rate system energy modeling for battery-powered mobile systems MobiSys '11, pp. 335-348; Wei, X., Gomez, L., Neamtiu, I., Faloutsos, M., Profile- Droid: Multi-layer profiling of android applications Mobicom '12, pp. 137-148; Takala, T., Katara, M., Harty, J., Experiences of system level model-based GUI testing of an Android application ICST '11, pp. 377-386","University of California, Riverside, United States",,"ACM SIGPLAN",,"2013 28th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2013","29 October 2013 through 31 October 2013","Indianapolis, IN",100913,,9781450323741,,,"English","Proc Conf Object Orient Program Syst Lang Appl OOPSLA",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84888182092
"Laţiu G.I., Creţ O., Vǎcariu L.","55514764800;7801577566;14631376100;","EvoGUITest - A graphical user interface testing framework based on evolutionary algorithms",2013,"IJCCI 2013 - Proceedings of the 5th International Joint Conference on Computational Intelligence",,,,"75","82",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887487006&partnerID=40&md5=7c648c6a552c59212765bd1d570fe901","Technical University of Cluj-Napoca, Computer Science Department, 26-28 Bariţiu Street, Cluj-Napoca, Romania","Laţiu, G.I., Technical University of Cluj-Napoca, Computer Science Department, 26-28 Bariţiu Street, Cluj-Napoca, Romania; Creţ, O., Technical University of Cluj-Napoca, Computer Science Department, 26-28 Bariţiu Street, Cluj-Napoca, Romania; Vǎcariu, L., Technical University of Cluj-Napoca, Computer Science Department, 26-28 Bariţiu Street, Cluj-Napoca, Romania","Software testing has become an important phase in software applications' lifecycle. Graphical User Interface (GUI) components can be found in a large number of desktops and web applications and also in a wide variety of systems like mobile phones. In the last years GUIs have become more and more complex and interactive. The GUI testing process requires interaction with the GUI components, mainly by generating mouse and keyboard events. Given their increased importance, GUIs verification for correctness can contribute to the establishment of the correct functionality of the corresponding software application. Most of the current GUI testing methodologies are ad hoc and manual, therefore they are resource consuming. This paper presents EvoGUITest, a novel GUI testing framework based on evolutionary algorithms which tests the GUI independently from the application code itself. EvoGUITest framework is designed for testing GUIs of web applications.","Evolutionary Algorithms; Graphical User Interface Testing; Testing Framework","Application codes; Graphical user interfaces (GUI); GUI testing; Interface testings; Software applications; Testing framework; WEB application; Application programs; Applications; Artificial intelligence; Evolutionary algorithms; Software testing; Verification; World Wide Web; Graphical user interfaces",,,,,,,,"Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) International Symposium on Software Reliability Engineering, , China; Bergen, S., Ross, J., Evolutionary art using summed multi-objective ranks (2011) Genetic Programming Theory and Practice, 8. , Springer Science; Bernard, J., The graphical user interface: An introduction (1998) Seminal Works in Computer Human Interaction, 30 (3), pp. 24-28; Bertsimas, D., Tsitsiklis, J., Simulated annealing (1993) Statistical Science, 8 (1), pp. 10-15; Ganov, S., Killmar, C., Khurshid, S., Perry, D., (2008) Test Generation for Graphical User Interfaces Based on Symbolic Execution, AST; Jones, G., (1990) Genetic and Evolutionary Algorithms, , University of Sheffield, CGA04; Nascimento, V., Carvalho, V., Castilho, C., Soares, E., Bittencourt, C., Woodruff, D., (1999) The Simulated Annealing Global Search Algorithm Applied to the Crystallography of Surfaces by Leed, Surface Review and Letters, 6 (5), pp. 651-661; Nyman, N., (2000) Using Monkey Test Tools, Software Testing and Quality Engineering Magazine; http://nunit.org, online documentation; http://abbot.sourceforge.net, online documentation; Nyman, N., (2006) Defense of Monkey Testing, Software Testing and Quality Engineering Magazine; Qureshi, I.A., Nadeem, A., GUI testing techniques: A survey (2013) International Journal of Future Computer and Communication, 2 (2); Pimenta, A., (2006) Automated Specification-Based Testing of Graphical User Interfaces, , Phd. Thesis Department of Electrical and Computer Engineering, FEUP; Pohlheim, H., (2006) Evolutionary Algorithms: Overview, Methods and Operators; Prabhu, J., Malmurugan, N., A survey on automated GUI testing procedures (2011) European Journal of Scientific Research, (3), pp. 456-462; Rational Robot Framework, , http://www-01.ibm.com/software/awdtools/tester/robot, online documentation; Rauf, A., (2010) Coverage Analysis for GUI Testing, , Phd. Thesis, Department of Computer Science, National University of Computer and Emerging Sciences, Pakistan; Rutenbar, R., (1989) Simulated Annealing Algorithms: An Overview, IEEE Circuits and Devices Magazine; http://seleniumhq.org, online documentation; Streichert, F., (2007) Evolutionary Algorithms in MultiModal and Multi-Objective Environments, , Phd. Thesis, University of Tubingen, Germany; Valdez-Garcia, M., EvoSpace-interactive: A framework to develop distributed collaborative-interactive evolutionary algorithms for artistic design (2013) Evolutionary and Biologically Inspired Music, Design, Sound Art and Design, 7834, pp. 121-132; Win Runner Framework, , http://mercury.com, online documentation; Yang, X., (2011) Graphic User Interface Modelling and Testing Automation, , Phd. Thesis Victoria University","Technical University of Cluj-Napoca, 26-28 Bariţiu Street, Cluj-Napoca, Romania",,"Institute for Systems and Technologies of;Information, Control and Communication (INSTICC)",,"5th International Joint Conference on Computational Intelligence, IJCCI 2013","20 September 2013 through 22 September 2013","Vilamoura, Algarve",100693,,9789898565778,,,"English","IJCCI - Proc. Int. Jt. Conf. Comput. Intell.",Conference Paper,"Final","",Scopus,2-s2.0-84887487006
"Swearngin A., Cohen M.B., John B.E., Bellamy R.K.E.","42262946400;8719004300;7102210961;7006073277;","Human performance regression testing",2013,"Proceedings - International Conference on Software Engineering",,, 6606561,"152","161",,11,"10.1109/ICSE.2013.6606561","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886447334&doi=10.1109%2fICSE.2013.6606561&partnerID=40&md5=84ee2191254c3300a263dc6377b4ff5c","Dept. of Computer Science and Eng., University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; IBM T. J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY 10598, United States","Swearngin, A., Dept. of Computer Science and Eng., University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; Cohen, M.B., Dept. of Computer Science and Eng., University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; John, B.E., IBM T. J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY 10598, United States; Bellamy, R.K.E., IBM T. J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY 10598, United States","As software systems evolve, new interface features such as keyboard shortcuts and toolbars are introduced. While it is common to regression test the new features for functional correctness, there has been less focus on systematic regression testing for usability, due to the effort and time involved in human studies. Cognitive modeling tools such as CogTool provide some help by computing predictions of user performance, but they still require manual effort to describe the user interface and tasks, limiting regression testing efforts. In recent work, we developed CogTool-Helper to reduce the effort required to generate human performance models of existing systems. We build on this work by providing task specific test case generation and present our vision for human performance regression testing (HPRT) that generates large numbers of test cases and evaluates a range of human performance predictions for the same task. We examine the feasibility of HPRT on four tasks in LibreOffice, find several regressions, and then discuss how a project team could use this information. We also illustrate that we can increase efficiency with sampling by leveraging an inference algorithm. Samples that take approximately 50% of the runtime lose at most 10% of the performance predictions. © 2013 IEEE.",,"Functional correctness; Human performance; Human performance model; Inference algorithm; Keyboard shortcuts; Performance prediction; Regression testing; Test case generation; Inference engines; Software testing; User interfaces; Software engineering",,,,,,,,"Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210. , Apr; Beizer, B., (1990) Software Testing Techniques, , International Thomson Computer Press; Yilmaz, C., Krishna, A.S., Memon, A., Porter, A., Schmidt, D.C., Gokhale, A., Natarajan, B., Main effects screening: A distributed continuous quality assurance process for monitoring performance degradation in evolving software systems (2005) Proceedings of the 27th International Conference on Software Engineering, Ser. ICSE '05, pp. 293-302; Thakkar, D., Hassan, A.E., Hamann, G., Flora, P., A framework for measurement based performance modeling (2008) Proceedings of the 7th International Workshop on Software and Performance, Ser. WOSP '08, pp. 55-66; Yoo, S., Harman, M., Tonella, P., Susi, A., Clustering test cases to achieve effective & scalable prioritisation incorporating expert knowledge (2009) Proceedings of the International Symposium on Software Testing and Analysis, ISSTA, pp. 201-211. , July; Blackmon, M.H., Kitajima, M., Polson, P.G., Tool for accurately predicting website navigation problems, non-problems, problem severity, and effectiveness of repairs (2005) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '05), pp. 31-40; Card, S.K., Newell, A., Moran, T.P., (1983) The Psychology of Human-Computer Interaction, , Hillsdale, NJ, USA: L. Erlbaum Associates Inc; Chi, E.H., Rosien, A., Supattanasiri, G., Williams, A., Royer, C., Chow, C., Robles, E., Cousins, S., The bloodhound project: Automating discovery of web usability issues using the InfoScent simulator (2003) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '03), pp. 505-512; John, B.E., Kieras, D.E., Using goms for user interface design and evaluation: Which technique (1996) ACM Transactions on Computer-Human Interaction, 3 (4), pp. 287-319. , Dec; Teo, L., John, B.E., Blackmon, M.H., Cogtool-explorer: A model of goal-directed user exploration that considers information layout (2012) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, Ser. CHI '12, pp. 2479-2488. , May; Bellamy, R., John, B., Kogan, S., Deploying cogtool: Integrating quantitative usability assessment into real-world software development (2011) Proceedings of the International Conference on Software Engineering, pp. 691-700; Swearngin, A., Cohen, M.B., John, B.E., Bellamy, R.K.E., Easing the generation of predictive human performance models from legacy systems (2012) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, Ser. CHI '12, pp. 2489-2498. , May; (2011) GUITAR-A GUI Testing FrAmewoRk, , http://guitar.sourceforge.net; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical gui test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; John, B.E., Prevas, K., Salvucci, D.D., Koedinger, K., Predictive human performance modeling made easy (2004) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, Ser. CHI '04, pp. 455-462; Memon, A.M., Soffa, M.L., Regression testing of guis (2003) Proceedings of the Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, Ser. ESEC/FSE-11, pp. 118-127; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, Ser. WCRE '03, pp. 260-269; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) International Symposium on Software Reliability Engineering (ISSRE), pp. 34-43; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) Proceedings of the European Software Engineering Conference/ACM SIGSOFT International Symposium on Foundations of Software Engineering, Ser. ESEC/FSE-9, pp. 256-267; Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, Ser. CHI '10, pp. 1535-1544; http://libreoffice.org, LibreOffice 3.4, 2011; Patton, E.W., Gray, W.D., SANLab-cm: A tool for incorporating stochastic operations into activity network modeling (2010) Behavior Research Methods, 42 (3), pp. 877-883","Dept. of Computer Science and Eng., , Lincoln, NE 68588-0115, United States",,"Association for Computing Machinery (ACM);SIGSOFT;IEEE Computer Society;Technical Council on Software Engineering (TCSE)",,"2013 35th International Conference on Software Engineering, ICSE 2013","18 May 2013 through 26 May 2013","San Francisco, CA",100317,02705257,9781467330763,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84886447334
"Memon A.M., Cohen M.B.","35599876500;8719004300;","Automated testing of GUI applications: Models, tools, and controlling flakiness",2013,"Proceedings - International Conference on Software Engineering",,, 6606750,"1479","1480",,31,"10.1109/ICSE.2013.6606750","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886445408&doi=10.1109%2fICSE.2013.6606750&partnerID=40&md5=89c2c75caed2b282d5ee36a96bf1ed58","University of Maryland, Department of Computer Science, College Park, MD 20742, United States; University of Nebraska-Lincoln, Department of Computer Science and Eng., Lincoln, NE 68588-0115, United States","Memon, A.M., University of Maryland, Department of Computer Science, College Park, MD 20742, United States; Cohen, M.B., University of Nebraska-Lincoln, Department of Computer Science and Eng., Lincoln, NE 68588-0115, United States","System testing of applications with graphical user interfaces (GUIs) such as web browsers, desktop, or mobile apps, is more complex than testing from the command line. Specialized tools are needed to generate and run test cases, models are needed to quantify behavioral coverage, and changes in the environment, such as the operating system, virtual machine or system load, as well as starting states of the executions, impact the repeatability of the outcome of tests making tests appear flaky. In this tutorial, we present an overview of the state of the art in GUI testing, consisting of both lectures and demonstrations on various platforms (desktop, web and mobile applications), using an open source testing tool, GUITAR. We show how to setup a system under test, how to extract models without source code, and how to then use those models to generate and replay test cases. We then present a lecture on the various factors that may cause flakiness in the execution of GUI-centric software, and hence impact the results of analyses and experiments based on such software. We end with a demonstration of a community resource for sharing GUI testing artifacts aimed at controlling these factors. This tutorial targets both researchers who develop techniques for testing GUI software, and practitioners from industry who want to learn more about model-based GUI testing or who run and rerun GUI tests and often find their runs are flaky. © 2013 IEEE.",,"Automated testing; Community resources; Graphical user interface (GUIs); GUI applications; Mobile applications; Specialized tools; System under test; Virtual machines; Graphical user interfaces; Software engineering; Tools; Software testing",,,,,,,,"Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the European Software Engineering Conference and ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE), pp. 256-267; (2009) GUITAR-a GUI Testing FrAmewoRk, , http://guitar.sourceforge.net, website; (2012) COMET-COMmunity Event-based Testing, , http://comet.unl.edu, website; Swearngin, A., Cohen, M., John, B., Bellamy, R., Easing the generation of predictive human performance models from legacy systems (2012) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, (CHI), pp. 2489-2498; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, Ser. WCRE 03, pp. 260-269; Yuan, X., Cohen, M., Memon, A., GUI interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) International Conference on Software Testing (ICST), pp. 245-254. , April; Cohen, M.B., Huang, S., Memon, A.M., AutoInSpec: Using missing test coverage to improve specifications in GUIs (2012) International Symposium on Software Reliability Engineering (ISSRE), pp. 245-254. , Novembe","University of Maryland, , College Park, MD 20742, United States",,"Association for Computing Machinery (ACM);SIGSOFT;IEEE Computer Society;Technical Council on Software Engineering (TCSE)",,"2013 35th International Conference on Software Engineering, ICSE 2013","18 May 2013 through 26 May 2013","San Francisco, CA",100317,02705257,9781467330763,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84886445408
"Thummalapenta S., Lakshmi K.V., Sinha S., Sinha N., Chandra S.","24072113500;57215476126;55636320325;55154332600;55729867300;","Guided test generation for web applications",2013,"Proceedings - International Conference on Software Engineering",,, 6606562,"162","171",,34,"10.1109/ICSE.2013.6606562","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886394575&doi=10.1109%2fICSE.2013.6606562&partnerID=40&md5=c86b4902db2ec948bf44fe1494323628","IBM Research, India; Indian Institute of Science, India; IBM TJ. Watson Research Center, United States","Thummalapenta, S., IBM Research, India; Lakshmi, K.V., Indian Institute of Science, India; Sinha, S., IBM Research, India; Sinha, N., IBM Research, India; Chandra, S., IBM TJ. Watson Research Center, United States","We focus on functional testing of enterprise applications with the goal of exercising an application's interesting behaviors by driving it from its user interface. The difficulty in doing this is focusing on the interesting behaviors among an unbounded number of behaviors. We present a new technique for automatically generating tests that drive a web-based application along interesting behaviors, where the interesting behavior is specified in the form of 'business rules.' Business rules are a general mechanism for describing business logic, access control, or even navigational properties of an application's GUI. Our technique is black box, in that it does not analyze the application's server-side implementation, but relies on directed crawling via the application's GUI. To handle the unbounded number of GUI states, the technique includes two phases. Phase 1 creates an abstract state-transition diagram using a relaxed notion of equivalence of GUI states without considering rules. Next, Phase 2 identifies rule-relevant abstract paths and refines those paths using a stricter notion of state equivalence. Our technique can be much more effective at covering business rules than an undirected technique, developed as an enhancement of an existing test-generation technique. Our experiments showed that the former was able to cover 92% of the rules, compared to 52% of the rules covered by the latter. © 2013 IEEE.",,"Enterprise applications; Functional testing; Navigational properties; State equivalences; State-transition diagrams; Test generations; WEB application; Web-based applications; Automatic test pattern generation; Graphical user interfaces; World Wide Web; Software engineering",,,,,,,,"Halfond, W.G.J., Anand, S., Orso, A., Precise interface identification to improve testing and analysis of web applications (2009) ISSTA, pp. 285-296; http://seleniumhq.org/; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) ICSE, pp. 25-34; Andrews, A.A., Offutt, J., Alexander, R.T., Testing web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , Jul; Di Lucca, G., Fasolino, A., Faralli, F., De Carlini, U., Testing web applications (2002) ICSM, pp. 310-319; Kung, D.C., Liu, C.-H., Hsia, P., An object-oriented web test model for testing web applications (2000) COMPSAC, pp. 537-542; Elbaum, S., Rothermel, G., Karre, S., Fisher, M., Leveraging usersession data to support web application testing (2005) IEEE Trans. on Softw. Eng., 31 (3), pp. 187-202. , Mar; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for web applications (2005) ASE, pp. 253-262; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) ICST, pp. 121-130; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of ajax user interfaces (2009) ICSE, pp. 210-220; Amalfitano, D., Fasolino, A.R., Tramontana, P., Rich internet application testing using execution trace data (2010) ICST Workshops, pp. 274-283; Ball, T., Levin, V., Rajamani, S., A decade of software model checking with SLAM (2011) CACM, 54 (7), pp. 68-76. , Jul; Myers, G.J., (2004) The Art of Software Testing, , John Wiley and Sons; http://www-01.ibm.com/software/websphere/ilog/; http://www.jboss.org/drools/; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling ajax by inferring user interface state changes (2008) ICWE, pp. 122-134; Roest, D., Mesbah, A., Van Deursen, A., Regression testing ajax applications: Coping with dynamism (2010) ICST, pp. 127-136; Choudhary, S., Dincturk, M.E., Bochmann, G.V., Jourdan, G.-V., Onut, I.V., Ionescu, P., Solving some modeling challenges when testing rich internet applications for security (2012) ICST, pp. 850-857; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling Ajax-based web applications through dynamic analysis of user interface state changes (2012) ACM Trans. on the Web, 6 (1), pp. 1-30. , Mar; Duda, C., Frey, G., Kossmann, D., Matter, R., Zhou, C., AJAX crawl: Making ajax applications searchable (2009) ICDE, pp. 78-89; Benedikt, M., Freire, J., Godefroid, P., Veriweb: Automatically testing dynamic web sites (2002) WWW; http://www-01.ibm.com/software/awdtools/tester/functional, Rational Functional Tester; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Trans. Software Eng., 38 (1), pp. 35-53. , Jan/Feb; Wang, W., Lei, Y., Sampath, S., Kacker, R., Kuhn, R., Lawrence, J., A combinatorial approach to building navigation graphs for dynamic web applications (2009) ICSM, pp. 211-220; Sampath, S., Mihaylov, V., Souter, A., Pollock, L., A scalable approach to user-session based testing of web applications through concept analysis (2004) ASE, pp. 132-141; Amalfitano, D., Fasolino, A.R., Tramontana, P., Reverse engineering finite state machines from rich internet applications (2008) WCRE, pp. 69-73; Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A.M., Ernst, M.D., Finding bugs in web applications using dynamic test generation and explicit-state model checking (2010) IEEE Trans. Softw. Eng., 36 (4), pp. 474-494. , Jul-Aug; Wassermann, G., Yu, D., Chander, A., Dhurjati, D., Inamura, H., Su, Z., Dynamic test input generation for web applications (2008) ISSTA, pp. 249-260; Alshahwan, N., Harman, M., Automated web application testing using search based software engineering (2011) ASE, pp. 3-12; Alshahwan, N., Harman, M., State aware test case regeneration for improving web application test suite coverage and fault detection (2012) ISSTA, pp. 45-55; Willmor, D., Embury, S.M., Testing the implementation of business rules using intensional database tests (2006) TAIC PART, pp. 115-115","IBM ResearchIndia",,"Association for Computing Machinery (ACM);SIGSOFT;IEEE Computer Society;Technical Council on Software Engineering (TCSE)",,"2013 35th International Conference on Software Engineering, ICSE 2013","18 May 2013 through 26 May 2013","San Francisco, CA",100317,02705257,9781467330763,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-84886394575
"Machiry A., Tahiliani R., Naik M.","55848928300;55849699300;12140829000;","Dynodroid: An input generation system for android apps",2013,"2013 9th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2013 - Proceedings",,,,"224","234",,394,"10.1145/2491411.2491450","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883731598&doi=10.1145%2f2491411.2491450&partnerID=40&md5=cf6eb3980d59cf23b1cb5338a186f58e","Georgia Institute of Technology, United States","Machiry, A., Georgia Institute of Technology, United States; Tahiliani, R., Georgia Institute of Technology, United States; Naik, M., Georgia Institute of Technology, United States","We present a system Dynodroid for generating relevant inputs to unmodified Android apps. Dynodroid views an app as an event-driven program that interacts with its environment by means of a sequence of events through the Android framework. By instrumenting the framework once and for all, Dynodroid monitors the reaction of an app upon each event in a lightweight manner, using it to guide the generation of the next event to the app. Dynodroid also allows interleaving events from machines, which are better at generating a large number of simple inputs, with events from humans, who are better at providing intelligent inputs. We evaluated Dynodroid on 50 open-source Android apps, and compared it with two prevalent approaches: users manually exercising apps, and Monkey, a popular fuzzing tool. Dynodroid, humans, and Monkey covered 55%, 60%, and 53%, respectively, of each app's Java source code on average. Monkey took 20X more events on average than Dynodroid. Dynodroid also found 9 bugs in 7 of the 50 apps, and 6 bugs in 5 of the top 1, 000 free apps on Google Play. Copyright 2013 ACM.","Android; GUI testing; Testing event-driven programs","Android; Android apps; Event-driven; Generation systems; Google plays; GUI testing; Java source codes; Sequence of events; Application programs; Robots; Software engineering",,,,,,,,"DroidBox: Android Application Sandbox, , http://code.google.com/p/droidbox; http://emma.sourceforge.net; Free and Open Source App Repository, , https://f-droid.org; GUITAR: A Model-based System for Automated GUI Testing, , http://guitar.sourceforge.net; Hierarchy Viewer, , http://developer.android.com/tools/help/hierarchy-viewer.html; Historical Distribution of Android Versions in Use, , http://developer.android.com/about/dashboards/index.html; UI/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html; Amalfitano, D., Fasolino, A., Carmine, S., Memon, A., Tramontana, P., Using GUI ripping for automated testing of android applications (2012) Proceedings of 27th Intl. Conf. on Automated Software Engineering (ASE); Anand, S., Naik, M., Yang, H., Harrold, M., Automated concolic testing of smartphone apps (2012) Proceedings of ACM Conf. on Foundations of Software Engineering (FSE); Bryce, R., Sampath, S., Memon, A., Developing a single model and test prioritization strategies for event-driven software (2011) Trans. on Soft. Engr., 37 (1); Cadar, C., Dunbar, D., Engler, D., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) Proceedings of 8th USENIX Symp. on Operating Systems Design and Implementation (OSDI); Enck, W., Gilbert, P., Chun, B.-G., Cox, L., Jung, J., McDaniel, P., Sheth, A., Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones (2010) Proceedings of 9th USENIX Symp. on Operating Systems Design and Implementation (OSDI); Gilbert, P., Chun, B.-G., Cox, L., Jung, J., Vision: Automated security validation of mobile apps at app markets (2011) Proceedings of 2nd Intl. Workshop on Mobile Cloud Computing and Services (MCS); Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) Proceedings of ACM Conf. on Programming Language Design and Implementation (PLDI); Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA); Hu, C., Neamtiu, I., Automating GUI testing for android applications (2011) Proceedings of 6th IEEE/ACM Workshop on Automation of Software Test (AST); Jeon, J., Micinski, K., Foster, J., (2012) Symdroid: Symbolic Execution for Dalvik Bytecode, , http://www.cs.umd.edu/~jfoster/papers/symdroid.pdf; King, J., Symbolic execution and program testing (1976) CACM, 19 (7), pp. 385-394; Mahmood, R., Esfahani, N., Kacem, T., Mirzaei, N., Malek, S., Stavrou, A., A whitebox approach for automated security testing of android applications on the cloud (2012) Proceedings of 7th IEEE/ACM Workshop on Automation of Software Test (AST); Memon, A., Pollack, M., Soffa, M., Automated test oracles for GUIs (2000) Proceedings of ACM Conf. on Foundations of Software Engineering (FSE); Memon, A., Soffa, M., Regression testing of GUIs (2003) Proceedings of ACM Conf. on Foundations of Software Engineering (FSE); Mirzaei, N., Malek, S., Pasareanu, C., Esfahani, N., Mahmood, R., Testing android apps through symbolic execution (2012) Java Pathfinder Workshop (JPF); Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an android app (2011) Proceedings of 4th Intl. Conf. on Software Testing, Verification and Validation (ICST); White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of 11th IEEE Intl. Symp. on Software Reliability Engineering (ISSRE); Yan, L., Yin, H., DroidScope: Seamlessly reconstructing the OS and dalvik semantic views for dynamic android malware analysis (2012) Proceedings of 21st USENIX Security Symposium; Yuan, X., Cohen, M., Memon, A., GUI interaction testing: Incorporating event context (2011) Trans. on Soft. Engr., 37 (4); Yuan, X., Memon, A., Generating event sequence-based test cases using GUI runtime state feedback (2010) Trans. on Soft. Engr., 36 (1)","Georgia Institute of TechnologyUnited States",,"Association for Computing Machinery, Special;Interest Group on Software Engineering (ACM SIGSOFT)",,"2013 9th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2013","18 August 2013 through 26 August 2013","Saint Petersburg",99148,,9781450322379,,,"English","Jt. Meet. Eur. Softw. Eng. Conf. ACM SIGSOFT Symp. Found. Softw. Eng., ESEC/FSE - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84883731598
"Alégroth E., Feldt R., Olsson H.H.","55843479600;24476388300;24335916300;","Transitioning manual system test suites to automated testing: An industrial case study",2013,"Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013",,, 6569716,"56","65",,19,"10.1109/ICST.2013.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883425663&doi=10.1109%2fICST.2013.14&partnerID=40&md5=1da19f836e16c363e76182f787c7ea68","Software Engineering and Technology, Chalmers University, Gothanburg, Sweden; Department of Computer Science, Malmö University, Malmö, Sweden","Alégroth, E., Software Engineering and Technology, Chalmers University, Gothanburg, Sweden; Feldt, R., Software Engineering and Technology, Chalmers University, Gothanburg, Sweden; Olsson, H.H., Department of Computer Science, Malmö University, Malmö, Sweden","Visual GUI testing (VGT) is an emerging technique that provides software companies with the capability to automate previously time-consuming, tedious, and fault prone manual system and acceptance tests. Previous work on VGT has shown that the technique is industrially applicable, but has not addressed the real-world applicability of the technique when used by practitioners on industrial grade systems. This paper presents a case study performed during an industrial project with the goal to transition from manual to automated system testing using VGT. Results of the study show that the VGT transition was successful and that VGT could be applied in the industrial context when performed by practitioners but that there were several problems that first had to be solved, e.g. testing of a distributed system, tool volatility. These problems and solutions have been presented together with qualitative, and quantitative, data about the benefits of the technique compared to manual testing, e.g. greatly improved execution speed, feasible transition and maintenance costs, improved bug finding ability. The study thereby provides valuable, and previously missing, contributions about VGT to both practitioners and researchers. © 2013 IEEE.","Empirical; Industrial case study; Test Automation; Test Maintenance; Visual GUI testing","Empirical; Industrial case study; Test Automation; Test maintenances; Visual gui testing; Ability testing; Automation; Industrial applications; Maintenance; Software testing; Acceptance tests",,,,,,,,"B̈orjesson, E., Feldt, R., Automated system testing using visual GUI testing tools: A comparative study in industry (2012) ICST; Olan, M., Unit testing: Test early, test often (2003) Journal of Computing Sciences in Colleges, 19 (2), pp. 319-328; Gamma, E., Beck, K., JUnit: A cook's tour (1999) Java Report, 4 (5), pp. 27-38; Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated GUI performance testing (2011) Software Quality Journal, pp. 1-39; Andersson, J., Bache, G., The video store revisited yet again: Adventures in GUI acceptance testing (2004) Extreme Programming and Agile Processes in Software Engineering, pp. 1-10; Memon, A., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 87-88; Weyuker, E., Testing component-based software: A cautionary tale (1998) Software, IEEE, 15 (5), pp. 54-59; Sj̈osten-Andersson, E., Pareto, L., Costs and benefits of structureaware capture/replay tools (2006) SERPS'06, p. 3; Chang, T., Yeh, T., Miller, R., GUI testing using computer vision (2010) Proceedings of the 28th International Conference on Human Factors in Computing Systems. ACM, pp. 1535-1544; Potter, R., (1992) Triggers: Guiding Automation with Pixels to Achieve Data Access, pp. 361-382. , University of Maryland, Center for Automation Research, Human/Computer Interaction Laboratory; Zettlemoyer, L., St Amant, R., A visual medium for programmatic control of interactive applications (1999) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems: The CHI Is the Limit. ACM, pp. 199-206; Memon, A., Pollack, M., Soffa, M., Hierarchical GUI test case generation using automated planning,"" Software Engineering (2001) IEEE Transactions on, 27 (2), pp. 144-155; Brooks, P., Memon, A., Automated GUI testing guided by usage profiles (2007) Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 333-342; Memon, A., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Miller, R., Collins, C., Acceptance testing (2001) Proc. XPUniverse; Lowell, C., Stell-Smith, J., Successful automation of GUI driven acceptance testing (2003) Extreme Programming and Agile Processes in Software Engineering, pp. 1011-1012; Runeson, P., Ḧost, M., Guidelines for conducting and reporting case study research in software engineering (2009) Empirical Software Engineering, 14 (2), pp. 131-164; Eldh, S., Hansson, H., Punnekkat, S., Analysis of mistakes as a method to improve test case design (2011) Software Testing, Verification and Validation (ICST) 2011, pp. 70-79. , IEEE Fourth International Conference on. IEEE; Itkonen, J., Rautiainen, K., Exploratory testing: A multiple case study (2005) Empirical Software Engineering, p. 10. , 2005. 2005 International Symposium on, nov","Software Engineering and Technology, , Gothanburg, Sweden",,,,"IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013","18 May 2013 through 20 May 2013","Luxembourg",98979,,,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-84883425663
"Dolstra E., Vliegendhart R., Pouwelse J.","22733789800;54581717100;55885186700;","Crowdsourcing GUI tests",2013,"Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013",,, 6569745,"332","341",,41,"10.1109/ICST.2013.44","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883388101&doi=10.1109%2fICST.2013.44&partnerID=40&md5=61377e47571d8a1c962b24e091997b1e","LogicBlox, Inc., Atlanta, GA, United States; Department of Intelligent Systems, Delft University of Technology, Netherlands; Department of Software and Computer Technology, Delft University of Technology, Netherlands","Dolstra, E., LogicBlox, Inc., Atlanta, GA, United States; Vliegendhart, R., Department of Intelligent Systems, Delft University of Technology, Netherlands; Pouwelse, J., Department of Software and Computer Technology, Delft University of Technology, Netherlands","Graphical user interfaces are difficult to test: automated tests are hard to create and maintain, while manual tests are time-consuming, expensive and hard to integrate in a continuous testing process. In this paper, we show that it is possible to crowd source GUI tests, that is, to outsource them to individuals drawn from a large pool of workers on the Internet, by instantiating virtual machines (VMs) running the system under test and letting testers access the VMs through their web browsers. This enables semi-automated continuous testing of GUIs and usability experiments with large numbers of participants at low cost. Several large experiments on the Amazon Mechanical Turk demonstrate that our approach is technically feasible and sufficiently reliable. © 2013 IEEE.","continuous testing; crowdsourcing; GUI testing; Mechanical Turk; usability studies; virtualization","Continuous testing; Crowdsourcing; GUI testing; Mechanical turks; Usability studies; Virtualizations; Experiments; Graphical user interfaces; Software testing; Testing",,,,,,,,"Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. dissertation, University of Pittsburgh; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) 29th Intl. Conf. on Software Engineering (ICSE '07), pp. 396-405. , May; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) 28th Intl. Conf. on Software Engineering (ICSE '06), pp. 997-1000. , ACM; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Transactions on Software Engineering and Methodoly, 16. , Feb; Memon, A.M., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) 19th IEEE Intl. Conf. on Automated Software Engineering (ASE '04), pp. 186-195; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should i use for effective GUI testing? (2003) IEEE Intl. Conf. on Automated Software Engineering (ASE '03), pp. 164-173. , IEEE Computer Society, Oct; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) 8th ACM SIGSOFT Intl. Symp. on Foundations of Software Engineering (FSE-8), pp. 30-39. , New York, NY, USA: ACM; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) 11th Intl. Symp. on Software Reliability Engineering (ISSRE '00), pp. 110-121. , IEEE Computer Society; Myers, B.A., State of the art in user interface software tools (1993) Advances in Human-Computer Interaction, 4, pp. 110-150. , H. R. Hartson and D. Hix, Eds; Howe, J., The rise of crowdsourcing (2006) Wired, 14 (6). , Jun; Ipeirotis, P.G., (2010) Mechanical Turk: Now with 40.92% Spam, , http://www.behind-the-enemy-lines.com/2010/12/mechanical-turk-now-with- 4092-spam.html, Dec; Ambati, V., Vogel, S., Carbonell, J., Active learning and crowd-sourcing for machine translation (2010) 7th Conf. on International Language Resources and Evaluation (LREC'10), , Valletta, Malta: European Language Resources Association (ELRA), May; Zaidan, O.F., Callison-Burch, C., Crowdsourcing translation: Professional quality from non-professionals (2011) 49th Annual Meeting of the Assoc. for Computational Linguistics: Human Language Technologies, pp. 1220-1229. , Jun; Novotney, S., Callison-Burch, C., Cheap, fast and good enough: Automatic speech recognition with non-expert transcription (2010) Human Language Technologies: 11th Annual Conf. of the North American Chapter of the Assoc. for Computational Linguistics, pp. 207-215; Paolacci, G., Chandler, J., Ipeirotis, P.G., Running experiments on Amazon Mechanical Turk (2010) Judgment and Decision Making, 5 (5), pp. 411-419. , Aug; Buhrmester, M., Kwang, T., Gosling, S.D., Amazon's Mechanical Turk: A new source of inexpensive, yet highquality, data? (2011) Perspectives on Psychological Science, 6 (1). , Jan; Adar, E., Why i hate Mechanical Turk research (and workshops) (2011) CHI 2011 Workshop on Crowdsourcing and Human Computation, , May; Pouwelse, J.A., Garbacki, P., Wang, J., Bakker, A., Yang, J., Iosup, A., Epema, D.H.J., Sips, H.J., Tribler: A social-based peer-to-peer system (2008) Concurrency and Computation: Practice and Experience, 20, pp. 127-138. , Feb; Burg Der S.Van, Dolstra, E., Automating system tests using declarative virtual machines (2010) 21st, , IEEE Intl. Symp. on Software Reliability Engineering (ISSRE '10). IEEE Computer Society, Nov; Dolstra, E., L̈oh, A., NixOS: A purely functional Linux distribution (2008) 13th ACM SIGPLAN Intl. Conf. on Functional Programming (ICFP2008), , ACM, Sep; Dolstra, E., Visser, E., De Jonge, M., Imposing a memory management discipline on software deployment (2004) 26th Intl. Conf. on Software Engineering (ICSE 2004), pp. 583-592. , IEEE Computer Society, May; Arcangeli, A., Eidus, I., Wright, C., Increasing memory density by using KSM (2009) Linux Symposium, , Jul; Kohavi, R., Longbotham, R., Sommerfield, D., Henne, R.M., Controlled experiments on the web: Survey and practical guide (2009) Data Mining and Knowledge Discovery, 18, pp. 140-181. , Feb","LogicBlox, Inc., Atlanta, GA, United States",,,,"IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013","18 May 2013 through 20 May 2013","Luxembourg",98979,,,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84883388101
"Alégroth E., Nass M., Olsson H.H.","55843479600;55843952200;24335916300;","JAutomate: A tool for system- and acceptance-test automation",2013,"Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013",,, 6569758,"439","446",,33,"10.1109/ICST.2013.61","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883384580&doi=10.1109%2fICST.2013.61&partnerID=40&md5=6de4e90a891b25786fdfaead0c41919a","Software Engineering and Technology, Chalmers University, Gothanburg, Sweden; Inceptive AB, Gothanburg, Sweden; Department of Computer Science, Malmö University, Malmö, Sweden","Alégroth, E., Software Engineering and Technology, Chalmers University, Gothanburg, Sweden; Nass, M., Inceptive AB, Gothanburg, Sweden; Olsson, H.H., Department of Computer Science, Malmö University, Malmö, Sweden","System- and acceptance-testing are primarily performed with manual practices in current software industry. However, these practices have several issues, e.g. they are tedious, error prone and time consuming with costs up towards 40 percent of the total development cost. Automated test techniques have been proposed as a solution to mitigate these issues, but they generally approach testing from a lower level of system abstraction, leaving a gap for a flexible, high system-level test automation technique/tool. In this paper we present JAutomate, a Visual GUI Testing (VGT) tool that fills this gap by combining image recognition with record and replay functionality for high system-level test automation performed through the system under test's graphical user interface. We present the tool, its benefits compared to other similar techniques and manual testing. In addition, we compare JAutomate with two other VGT tools based on their static properties. Finally, we present the results from a survey with industrial practitioners that identifies testrelated problems that industry is currently facing and discuss how JAutomate can solve or mitigate these problems. © 2013 IEEE.","JAutomate; Test automation; Testing, Tool; Visual GUI Testing","Industrial practitioners; JAutomate; Record-and-replay; Software industry; Static properties; System-level test; Test Automation; Visual gui testing; Automation; Graphical user interfaces; Image recognition; Software engineering; Software testing; Tools; Acceptance tests",,,,,,,,"Miller, R., Collins, C., Acceptance testing (2001) Proc. XPUniverse; Jovanovíc, I., Software testing methods and techniques (2009) IPSI BgD Transactions on Internet Research, p. 30; Olan, M., Unit testing: Test early, test often (2003) Journal of Computing Sciences in Colleges, 19 (2), pp. 319-328; Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated gui performance testing (2011) Software Quality Journal, pp. 1-39; Andersson, J., Bache, G., The video store revisited yet again: Adventures in gui acceptance testing (2004) Extreme Programming and Agile Processes in Software Engineering, pp. 1-10; Memon, A., Gui testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 87-88; B̈orjesson, E., Feldt, R., Automated system testing using visual gui testing tools: A comparative study in industry (2012) ICST; Linden Der F.Van, Family evaluation framework overview & introduction (2005) Philips Medical Systems, Version, 1; Gamma, E., Beck, K., Junit: A cook's tour (1999) Java Report, 4 (5), pp. 27-38; Utting, M., Legeard, B., Practical model-based testing: A tools approach (2007) Morgan Kaufmann; Sj̈osten-Andersson, E., Pareto, L., Costs and benefits of structureaware capture/replay tools (2006) SERPS'06, p. 3; Potter, R., (1992) Triggers: Guiding Automation with Pixels to Achieve Data Access, pp. 361-382. , University of Maryland, Center for Automation Research, Human/Computer Interaction Laboratory; Zettlemoyer, L., St Amant, R., A visual medium for programmatic control of interactive applications (1999) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems: The CHI Is the Limit, pp. 199-206. , ACM; Chang, T., Yeh, T., Miller, R., Gui testing using computer vision (2010) Proceedings of the 28th International Conference on Human Factors in Computing Systems, pp. 1535-1544. , ACM; Weyuker, E., Testing component-based software: A cautionary tale (1998) Software, IEEE, 15 (5), pp. 54-59; Andrews, R., Boyne, G., Law, J., Walker, R., External constraints on local service standards: The case of comprehensive performance assessment in english local government (2005) Public Administration, 83 (3), pp. 639-656; Sonnenburg, S., Braun, M., Ong, C., Bengio, S., Bottou, L., Holmes, G., Lecunn, Y., Rasmussen, C., The need for open source software in machine learning (2007) J Mach Learn Res, 8, pp. 2443-2466; Fowler, M., Foemmel, M., (2006) Continuous Integration, , http://www.thoughtworks.com/ContinuousIntegration.pdf, Thought-Works; Martin, R., Professionalism and test-driven development (2007) Software, IEEE, 24 (3), pp. 32-36","Software Engineering and Technology, , Gothanburg, Sweden",,,,"IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013","18 May 2013 through 20 May 2013","Luxembourg",98979,,,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-84883384580
"Monteiro T., Paiva A.C.R.","55843724000;7102683763;","Pattern based GUI testing modeling environment",2013,"Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013",,, 6571623,"140","143",,11,"10.1109/ICSTW.2013.24","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883377743&doi=10.1109%2fICSTW.2013.24&partnerID=40&md5=50307ac4da89c686b111d2448e88a979","Departamento de Engenharia Informatica, Faculdade de Engenharia, Universidade Do Porto, Porto, Portugal","Monteiro, T., Departamento de Engenharia Informatica, Faculdade de Engenharia, Universidade Do Porto, Porto, Portugal; Paiva, A.C.R., Departamento de Engenharia Informatica, Faculdade de Engenharia, Universidade Do Porto, Porto, Portugal","This paper presents a modeling environment (ME) developed for a Domain Specific Language (PARADIGM) which aims to support the construction of models to be used in the context of Model Based GUI Testing (MBGT). It starts by briefly presenting PARADIGM which aims to increase the level of abstraction of the models and promote reuse in order to diminish the effort in building models for MBGT. Afterwards, it describes the architecture of the ME, how the constraints of the language are enforced within the ME to ensure the consistency of the models built, the test case configuration of the model elements, the test case generation algorithm and how the ME can be extended/adapted to include additional features. © 2013 IEEE.","DSL; GUI modeling; GUI testing; Model based testing","Construction of models; Domain specific languages; GUI testing; Level of abstraction; Model based testing; Model-based OPC; Modeling environments; Test case generation; DSL; Software testing",,,,,,,,"Mernik, M., Heering, J., Sloane, A.M., When and how to develop domain-specific languages (2005) ACMComputingSurveys, 37 (4), pp. 316-344. , Dec; Cunha, M., Paiva, A.C.R., Ferreira, H.S., Abreu, R., PETTool: A pattern-based GUI testing tool (2010) Software Technology and Engineering (ICSTE), 2010 2nd International Conference on, 1, pp. V1-202; Memon, A.M., Lou Soffa, M., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations Ofsoftware Engineering ESECFSE9, 26 (5), p. 256; Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for gui modelling and testing-van4guim (2008) ICSOFT (SE/MUSE/GSDCA), pp. 104-111; Alexander, C., Ishikawa, S., Silverstein, M., (1977) A Pattern Language: Towns, Buildings, Construction, 2 (0), p. 1171. , Oxford University Press; Gronback, R.C., (2009) ECLIPSE MODELING PROJECT-A Domain-Specific Language Toolkit, , Addison-Wesley; Shatalin, A., Tikhomirov, A., Graphical modeling framework architecture overview (2006) Eclipse Modeling Symposium; Lee, M., Kim, H., Kim, J., Lee, J., (2005) StarUML 5. 0-Developer Guide; (2009) Open Modelsphere-User Guide, , http://www.modelsphere.org/help/User_Guide.html, Grandite [Online]. Available; (2008) Open ModelSphere 3. 0-Developer Guide, No, , Grandite September; Ramirez, A., Tolke, L., Wulp, M., Benett, J., Odutola, K., Rueckert, A., Vanpeperstraete, P., (2011) ArgoUML User Manual A Tutorial and Reference Description; Paiva, A.R., Faria, J.P., Vidal, R.A.M., Specification-based testing of user interfaces (2003) Interactive Systems. Design, Specification, and Verification, 2844, pp. 139-153. , J. Jorge, N. Jardim Nunes, and J. e Cunha, Eds. Springer Berlin Heidelberg; (2006) ""OCL Specification, , http://www.omg.org/cgi-bin/doc?formal/06-05-01, [Online]. Available; Nguyen, C.D., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis, pp. 100-110; http://seleniumhq.org/, Selenium. "" [Online]. Available; http://www.sikuli.org/, [Online]. Available","Departamento de Engenharia Informatica, , Porto, Portugal",,,,"IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013","18 March 2013 through 20 March 2013","Luxembourg",99045,,,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-84883377743
"Bauersfeld S.","48161076300;","GUIdiff - A regression testing tool for graphical user interfaces",2013,"Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013",,, 6569773,"499","500",,6,"10.1109/ICST.2013.84","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883353743&doi=10.1109%2fICST.2013.84&partnerID=40&md5=a8f4de57c293ccb81b0d5ac0b6509913","Software Testing and Quality Group, Universitat Politècnica de València, Valencia, Spain","Bauersfeld, S., Software Testing and Quality Group, Universitat Politècnica de València, Valencia, Spain","Due to the rise of tablets and smart phones and their impact on everyday life, robust and high-quality Graphical User Interfaces (GUIs) are becoming more and more important. Unfortunately, testing these GUIs still remains a big challenge with the current industrial tools, which only cater to manual testing practices and provide limited oracle functionalities such as screenshot comparison. These tools often result in large amounts of manual labor and thus increase cost. We propose a new GUI regression testing tool called GUIdiff, which works similar to diff tools for text data. It executes two different versions of a System Under Test (SUT) side by side, compares the GUI states against each other and presents the list of the detected deviations to the tester. The tool is semi-automatic in the sense that it finds the differences completely automatic and that the tester labels them as faults or false positives. © 2013 IEEE.",,"False positive; Graphical user interface (GUIs); GUI regression testing; Industrial tools; Manual testing; Regression testing; Semi-automatics; System under test; Graphical user interfaces; Software testing; Tools",,,,,,,,"Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis, University of Pittsburgh; Bauersfeld, S., Vos, T.E.J., GUITest: A java library for fully automated GUI robustness testing (2012) ASE; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI Test Suites using a Genetic Algorithm (2010) ICST; Amalfitano, D., Fasolino, A.R., Tramontana, P., A GUI crawling-based technique for android mobile application testing (2011) ICST; Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F., A framework for automated testing of javascript web applications (2011) ICSE; Marchetto, A., Tonella, P., Using search-based algorithms for Ajax event sequence generation during testing (2011) Empirical Softw. Engg; Bille, P., A survey on tree edit distance and related problems (2005) Theoretical Computer Science, 337 (1-3), pp. 217-239. , 9 June","Bauersfeld, S.; Software Testing and Quality Group, , Valencia, Spain; email: sbauersfeld@pros.upv.es",,,,"IEEE 6th International Conference on Software Testing, Verification and Validation, ICST 2013","18 May 2013 through 20 May 2013","Luxembourg",98979,,,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-84883353743
"Amalfitano D., Fasolino A.R., Tramontana P., Amatucci N.","25926238800;7006159957;8879739800;55843621200;","Considering context events in event-based testing of mobile applications",2013,"Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013",,, 6571621,"126","133",,56,"10.1109/ICSTW.2013.22","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883345141&doi=10.1109%2fICSTW.2013.22&partnerID=40&md5=90301e4753ed01d98832fd11c3515e22","Dipartimento di Ingegneria Elettrica e Delle Tecnologie dell'Informazione, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy","Amalfitano, D., Dipartimento di Ingegneria Elettrica e Delle Tecnologie dell'Informazione, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Fasolino, A.R., Dipartimento di Ingegneria Elettrica e Delle Tecnologie dell'Informazione, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Tramontana, P., Dipartimento di Ingegneria Elettrica e Delle Tecnologie dell'Informazione, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Amatucci, N., Dipartimento di Ingegneria Elettrica e Delle Tecnologie dell'Informazione, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy","A relevant complexity factor in developing and testing mobile apps is given by their sensibility to changes in the context in which they run. As an example, apps running on a smartphone can be influenced by location changes, phone calls, device movements and many other typologies of context events. In this paper, we address the problem of testing a mobile app as an event-driven system by taking into account both context events and GUI events. We present approaches based on the definition of reusable event patterns for the manual and automatic generation of test cases for mobile app testing. One of the proposed testing techniques, based on a systematic and automatic exploration of the behaviour of an Android app, has been implemented and some preliminary case studies on real apps have been carried out in order to explore their effectiveness. © 2013 IEEE.","Android; Context-aware; Event Based Testing; Event Patterns; Mobile Applications","Android; Context-Aware; Event pattern; Event-based; Mobile applications; Robots; Software testing; Mobile computing",,,,,,,,"Abowd, G.D., Dey, A.K., Brown, P.J., Davies, N., Smith, M., Steggles, P., Towards a better understanding of context and context-awareness (1999) Proceedings of the 1st International Symposium on Handheld and Ubiquitous Computing (HUC '99), pp. 304-307. , Springer-Verlag; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), pp. 258-261. , ACM; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Imparato, G., A toolset for gui testing of android applications (2012) Proceedings of the 28th IEEE International Conference on Software Maintenance (ICSM), pp. 650-653. , IEEE CS Press; Amalfitano, D., Fasolino, A.R., Tramontana, P., Robbins, B., (2013) Testing Android Mobile Applications: Challenges, Strategies, and Approaches, Advances in Computers, 89, pp. 1-52. , Elsevier; Amalfitano, D., Fasolino, A.R., Tramontana, P., A gui crawling-based technique for android mobile application testing (2011) IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), pp. 252-261. , IEEE CS Press; Baldauf, M., Dustdar, S., Rosenberg, F., A survey on context aware systems (2007) Int. J. Ad Hoc Ubiquitous Comput., 2 (4), pp. 263-277. , June Inderscience Publishers; Barbosa, A., Paiva, A.C.R., Creissac Campos, J., Test case generation from mutated task models Proceedings of the 3rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems (EICS '11), pp. 175-184. , ACM, New York, NY, USA; Belli, F., Beyazit, M., Memon, A., Testing is an event-centric activity (2012) Proceedings of the IEEE Sixth International Conference on Software Security and Reliability Companion (SERE-C), pp. 198-206. , IEEE CS Press; Enck, W., Ongtang, M., McDaniel, P., Understanding android security (2009) Security & Privacy, IEEE, 7 (1), pp. 50-57. , Jan.-Feb; Rodriguez Garzon, S., Hritsevskyy, D., Model-based generation of scenario-specific event sequences for the simulation of recurrent user behavior within context-aware applications Proceedings of the 2012 Symposium on Theory of Modeling and Simulation-DEVS Integrative M&S Symposium (TMS/DEVS '12). Society for Computer Simulation International, p. 6. , Article 29; Hu, C., Neamtiu, I., Automating gui testing for android applications Proc of AST 2011, 6th International Workshop on Automation of Software Test, pp. 77-83. , ACM Press; Kim, H., Choi, B., Eric Wong, W., Performance testing of mobile applications at the unit test level Proc of 2009 Third IEEE International Conference on Secure Software Integration and Reliability Improvement, pp. 171-181. , IEEE Comp. Soc. Press; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) 2nd International Conference on Computer Engineering and Technology (ICCET), 2, pp. 297-301; Maji, A.K., Hao, K., Sultana, S., Bagchi, S., Characterizing failures in mobile oses: A case study with android and symbian (2010) Proceedings of the 21st IEEE Int. Symposium on Software Reliability Engineering, pp. 249-258. , IEEE CS Press; Malik, Q.A., Lilius, J., Laibinis, L., Scenario-based test case generation using event-b models (2009) Proceedings of the First International Conference on Advances in System Testing and Validation Lifecycle, pp. 31-37. , IEEE CS Press; Muccini, H., Di Francesco, A., Esposito, P., Software testing of mobile applications: Challenges and future research directions (2012) Proceedings of the 7th International Workshop on Automation of Software Test (AST); Sama, M., Rosenblum, D.S., Wang, Z., Elbaum, S., Model-based fault detection in context-aware adaptive applications (2008) Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering (SIGSOFT '08/FSE-16)., pp. 261-271. , ACM; Satoh, I., Software testing for wireless mobile application IEEE Wireless Communications, Oct. 2004, pp. 58-64. , IEEE CS Press; http://code.google.com/p/openintents/wiki/SensorSimulator, OpenIntents Sensor Simulator; Tsay, W., Yu, L., Zhu, F., Paul, R., Rapid embedded system testing using verification patterns (2005) IEEE Software, 22 (4), pp. 68-75. , IEEE CS Press; Tse, T., Yau, S., Chan, W., Lu, H., Chen, T., Testing context-sensitive middleware-based software applications (2004) Proceedings of International Computer Software and Applications Conference, pp. 458-465. , IEEE CS Press; Wang, Z., Elbaum, S., Rosenblum, D.S., Automated generation of context-aware tests (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE, pp. 406-415. , IEEE CS Press; Wasserman, A.I., Software engineering issues for mobile application development (2010) Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research (FoSER '10, pp. 397-400. , ACM; Yuan, X., Cohen, M.B., Memon, A.M., Gui interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574. , July-Aug. IEEE CS Press","Dipartimento di Ingegneria Elettrica e Delle Tecnologie dell'Informazione, Via Claudio 21, 80125 Napoli, Italy",,,,"IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013","18 March 2013 through 20 March 2013","Luxembourg",99045,,,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-84883345141
"Bowen J., Reeves S.","8725498700;7102635636;","UI-design driven model-based testing",2013,"Innovations in Systems and Software Engineering","9","3",,"201","215",,8,"10.1007/s11334-013-0199-6","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84881490451&doi=10.1007%2fs11334-013-0199-6&partnerID=40&md5=84aee5d0e94afca995124d660dc130b8","The University of Waikato, Hamilton, New Zealand","Bowen, J., The University of Waikato, Hamilton, New Zealand; Reeves, S., The University of Waikato, Hamilton, New Zealand","Testing interactive systems is a notoriously difficult task. Not only do we need to ensure that the functionality of the developed system is correct with respect to the requirements and specifications, but also we need to ensure that the user interface (UI) to the system is correct (enables a user to access the functionality correctly) and is usable. These different requirements of interactive system testing are not easily combined within a single testing strategy. We investigate the use of models of interactive systems, which have been derived from design artefacts, as the basis for generating tests for an implemented system. We show how automatically generated abstract tests can be used as the basis for a model-based method for testing interactive systems which has low overhead in terms of the models required and which enables testing of UI and system functionality from the perspective of user interaction. We also examine other testing strategies which use the same abstract tests as their basis and discuss general problems in the area of interactive system testing and propose some solutions. © 2013 Springer-Verlag London.","Formal methods; Prototyping; Unit testing; User interface","Automatically generated; Interactive system; Model based testing; Model-based method; System functionality; Testing strategies; Unit testing; User interaction; Automatic test pattern generation; Computer software selection and evaluation; Formal methods; Software prototyping; System theory; User interfaces",,,,,,,,"Beck, K., Aim, fire (2001) IEEE Softw, 18, pp. 87-89; Beck, K., Test-driven development by example (2003) The Addison-Wesley signature series, , Addison-Wesley, Menlo Park; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) In: ISSRE '01: Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSRE'01), pp. 34-43. , IEEE Computer Society, Washington; Belli, F., (2003) A holistic view for finite-state modeling and testing of user interactions, , Technical Report 2003/1. The University of Paderborn, Institute for Electrical Engineering and Information Technology, Paderborn; Bowen, J., (2008) Formal models and refinement for graphical user interface design, , PhD thesis, University of Waikato, Department of Computer Science, Hamilton; Bowen, J., Reeves, S., Formal models for informal GUI designs (2006) In: 1st international workshop on formal methods for interactive systems, pp. 57-72. , Macau SAR China, 31 (October 2006) Electronic notes in theoretical computer science, vol 183. Elsevier, Amsterdam; Bowen, J., Reeves, S., Formal models for user interface design artefacts (2008) Innov Syst Softw Eng, 4 (2), pp. 125-141; Bowen, J., Reeves, S., Refinement for user interface designs (2008) Electron Notes Theor Comput Sci, 208, pp. 5-22; Bowen, J., Reeves, S., UI-design driven model-based testing (2009) Electronic Communications of EASST 22, , http://eceasst.cs.tu-berlin.de/index.php/eceasst/issue/view/33; Bowen, J., Reeves, S., Developing usability studies via formal models of uis (2010) In: Proceedings of the 2nd ACM SIGCHI symposium on engineering interactive computing systems, pp. 175-180. , (Berlin, Germany, June 19-23 (2010) EICS '10. ACM, New York; Bowen, J., Reeves, S., UI-driven test-first development of interactive systems (2011) In: Proceedings of the 3rd ACM SIGCHI symposium on engineering interactive computing systems, EICS '11, pp. 165-174; Bowen, J., Reeves, S., Modelling user manuals of modal medical devices and learning from the experience (2012) Eics, pp. 121-130. , S. D. J. Barbosa, J. C. Campos, R. Kazman, P. A. Palanque, M. D. Harrison, and S. Reeves (Eds.), New York: ACM; Bowen, J., Reeves, S., Schweer, A., A tale of two studies (2013) Proc. AUIC2013, , (to appear); Dutta, S., Abbot-a friendly JUnit extension for GUI testing (2003) Java Dev J, pp. 8-12. , http://abbot.sourceforge.net; (2009) FEST (Fixtures for Easy Software Testing), , http://fest.easytesting.org/wiki/pmwiki.php, FEST; Gimblett, A., Thimbleby, H., User interface model discovery: towards a generic approach (2010) In: Proceedings of the 2nd ACM SIGCHI Symposium on Engineering interactive Computing Systems, pp. 145-154. , (Berlin, Germany, June 19-23 (2010) EICS '10. ACM, New York; Hierons, R.M., Testing from a Z specification (1997) Softw Test Verifi Reliab, 7 (1), pp. 19-33; (1994) ISO/IEC 9646-1-Information Technology-Open Systems Interconnection-Conformance Testing Methodology and Framework, Part 1: General Concepts, , ISO, 1st edn. International Standards Organisation, ISO/IEC, Geneva; (2002) ISO/IEC 13568- Information Technology-Z Formal Specification Notation-Syntax, Type System and Semantics, , ISO, 1st edn. Prentice-Hall International series in computer science, ISO/IEC. Prentice-Hall, Englewood Cliffs; Legeard, B., Peureux, F., Utting, M., Controlling test case explosion in test generation from B formal models (2004) J Softw Test Verif Reliab, 14 (2), pp. 81-103. , http://lifc.univ-fcomte.fr/bztt/docs/article/RR2004-14.pdf; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw Test Verif Reliab, 17 (3), pp. 137-157; Memon, A.M., Using reverse engineering for automated usability evaluation of GUI-based applications (2009) In: Software engineering models, patterns and architectures for HCI, , Springer, London; Myers, G.J., Badgett, T., Thomas, T.M., Sandler, C., (2004) The Art of Software Testing, , 2nd edn., New York: Wiley; Paiva, A., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for GUI testing (2007) Electron Notes Theor Comput Sci, 190 (2), pp. 99-111; Paiva, A., Tillmann, N., Faria, J., Vidal, R., Modeling and testing hierarchical GUI s (2005) Asm05, , D. Beauquier, E. Borger, and A. Slissenko (Eds.), Paris: Universite de Paris; (2012) PIMed, , http://sourceforge.net/projects/pims1/?_test=b.PIMed; Pretschner, A., Philipps, J., Methodological issues in model-based testing (2005) Model-based testing of reactive systems, 3472, pp. 281-291. , In: Broy M, Jonsson B, Katoen JP, Leucker M, Pretschner A (eds). LNCS,. Springer, Berlin; Ruiz, A., Price, Y.W., Test-driven GUI development with test NG and Abbot (2007) IEEE Softw, 24 (3), pp. 51-57; Schweer, A., Hinze, A., The digital parrot: combining context-awareness and semantics to augment memory (2007) In: Proceedings of the Workshop on Supporting Human Memory with Interactive Systems (MeMos 2007) at the 2007 British HCI International Conference, , Las Vegas; Silva, J.C., Silva, C.E., Gonçalo, R.D., Saraiva, J., Campos, J.C., The GUIS urfer tool: towards a language independent approach to reverse engineering GUI code (2010) In: EICS, pp. 181-186; (2008) Microsoft technical pages for Spec#, , http://research.microsoft.com/specsharp/, Spec#; Stocks, P., Carrington, D.A., A framework for specification-based testing (1996) IEEE Trans Softw Eng, 22 (11), pp. 777-793; (2011) UISpec4J, , http://www.uispec4j.org/; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , San Francisco: Morgan Kaufmann; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) In: ISSRE '00: Proceedings of the 11th International Symposium on Software Reliability Engineering, p. 110. , IEEE Computer Society, Washington; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source GUI applications (2006) In: ICSM '06: Proceedings of the 22nd IEEE international conference on software maintenance, pp. 145-154. , IEEE Computer Society, Washington; Yuan, X., Cohen, M.B., Memon, A.M., Towards dynamic adaptive automated test generation for graphical user interfaces (2009) In: ICSTW '09: Proceedings of the IEEE International Conference on Software Testing, Verification, and Validation Workshops, pp. 263-266. , IEEE Computer Society, Washington","Bowen, J.; The University of Waikato, Hamilton, New Zealand; email: jbowen@cs.waikato.ac.nz",,,,,,,,16145046,,,,"English","Innov. Syst. Softw. Eng.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84881490451
"Zhang S., Lü H., Ernst M.D.","7409371660;56131276600;36916423000;","Automatically repairing broken workflows for evolving GUI applications",2013,"2013 International Symposium on Software Testing and Analysis, ISSTA 2013 - Proceedings",,,,"45","55",,26,"10.1145/2483760.2483775","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84881278166&doi=10.1145%2f2483760.2483775&partnerID=40&md5=acf98899f12811ea75e109bcd5bdc82b","Department of Computer Science and Engineering, University of Washington, United States","Zhang, S., Department of Computer Science and Engineering, University of Washington, United States; Lü, H., Department of Computer Science and Engineering, University of Washington, United States; Ernst, M.D., Department of Computer Science and Engineering, University of Washington, United States","A workflow is a sequence of UI actions to complete a specific task. In the course of a GUI application's evolution, changes ranging from a simple GUI refactoring to a complete rearchitecture can break an end-user's well-established workflow. It can be challenging to find a replacement workflow. To address this problem, we present a technique (and its tool implementation, called FlowFixer) that repairs a broken workflow. FlowFixer uses dynamic profiling, static analysis, and random testing to suggest a replacement UI action that fixes a broken workflow. We evaluated FlowFixer on 16 broken workflows from 5 realworld GUI applications written in Java. In 13 workflows, the correct replacement action was FlowFixer's first suggestion. In 2 workflows, the correct replacement action was FlowFixer's second suggestion. The remaining workflow was un-repairable. Overall, FlowFixer produced significantly better results than two alternative approaches. © 2013 ACM.","Dynamic analysis; GUI applications; workflows","Alternative approach; Dynamic Profiling; GUI applications; Random testing; Real-world; Refactorings; Specific tasks; Work-flows; Dynamic analysis; Graphical user interfaces; Repair; Software testing",,,,,,,,"Arlt, S., Podelski, A., Bertolini, C., Schaf, M., Banerjee, I., Memon, A., Lightweight static analysis for GUI testing (2012) ISSRE; Bacon, D.F., Sweeney, P.F., Fast static analysis of C++ virtual function calls Proc. OOPSLA, 1996; Choudhary, S.R., Zhao, D., Versee, H., Orso, A., WATER: Web Application TEst Repair (2011) ETSE; Crossword, , http://sourceforge.net/projects/crosswordsage/; Dagenais, B., Robillard, M.P., Recommending adaptive changes for framework evolution (2011) TOSEM, 20 (4), p. 9; Daniel, B., Dig, D., Gvero, T., Jagannath, V., Jiaa, J., Mitchell, D., Nogiec, J., Marinov, D., ReAssert: A tool for repairing broken unit tests (2011) ICSE; Daniel, B., Luo, Q., Mirzaaghaei, M., Dig, D., Marinov, D., Pezzè, M., Automated GUI refactoring and test script repair (2011) ETSE; Demsky, B., Ernst, M.D., Guo, P.J., McCamant, S., Perkins, J.H., Rinard, M., Inference and enforcement of data structure consistency specifications (2006) ISSTA; Dig, D., Comertoglu, C., Marinov, D., Johnson, R., Automated detection of refactorings in evolving components (2006) ECOOP; http://freemind.sourceforge.net; Fu, C., Grechanik, M., Xie, Q., Inferring types of references to GUI objects in test scripts (2009) ICST; Ganov, S., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing GUI applications (2009) ICFEM; http://www.ganttproject.biz/; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009) ICSE; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) ISSTA; Halfond, W., Anand, S., Orso, A., Precise interface identification to improve testing and analysis of web applications (2009) ISSTA; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm Proc. ICST, 2010; http://jabref.sourceforge.net/; JDK Swing Framework, , http://docs.oracle.com/javase/6/docs/technotes/guides/swing/; http://www.jedit.org/; Kim, M., Notkin, D., Grossman, D., Automatic inference of structural changes for matching across program versions (2007) ICSE; Leitner, A., Oriol, M., Zeller, A., Ciupa, I., Meyer, B., Efficient unit test case minimization (2007) ASE; Li, B., Sun, X., Leung, H., Zhang, S., A survey of code-based change impact analysis techniques (2012) STVR; Li, P., Wohlstadter, E., View-based maintenance of graphical user interfaces (2008) AOSD; Mani, S., Sinha, V.S., Dhoolia, P., Sinha, S., Automated support for repairing input-model faults (2010) ASE; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 4:1-4:36. , Nov; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs Proc. FSE, 2000; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) FSE; Meng, S., Wang, X., Zhang, L., Mei, H., A history-based matching approach to identification of framework evolution (2012) ICSE; Michail, A., Xie, T., Helping users avoid bugs in GUI applications (2005) ICSE; Microsoft Office Community Forums, , http://support.microsoft.com/gp/gp_newsgroups_master; Perkins, J.H., Kim, S., Larsen, S., Amarasinghe, S., Bachrach, J., Carbin, M., Pacheco, C., Rinard, M., Automatically patching errors in deployed software (2009) SOSP; Qi, D., Roychoudhury, A., Liang, Z., Vaswani, K., Darwin: An approach for debugging evolving programs (2009) FSE; The SimMetrics String Similarity Metric Library, , http://sourceforge.net/projects/simmetrics/; http://www.uispec4j.org/; http://wala.sourceforge.net; Wang, X., Zhang, L., Xie, T., Xiong, Y., Mei, H., Automating presentation changes in dynamic web applications via collaborative hybrid analysis (2012) FSE; Yoo, S., Harman, M., Regression testing minimization, selection and prioritization: A survey (2012) Softw. Test. Verif. Reliab., 22 (2), pp. 67-120. , Mar; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE TSE, 37 (4); Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases Proc. ICSE, 2007; Zeller, A., Yesterday, my program worked. Today, it does not. Why? (1999) SIGSOFT Softw. Eng. Notes, 24 (6), pp. 253-267; Zhang, S., Practical semantic test simplification Proc. ICSE (NIER), 2013; Zhang, S., Lin, Y., Gu, Z., Zhao, J., Effective identification of failure-inducing changes: A hybrid approach (2008) PASTE; Zhang, S., Saff, D., Bu, Y., Ernst, M.D., Combined static and dynamic automated test generation Proc. ISSTA, 2011","Department of Computer Science and Engineering, United States",,"ACM SIGSOFT;Universita della Svizzera Italiana, Faculty of Informatics;UBS;Hasler Foundation;Orange",,"22nd International Symposium on Software Testing and Analysis, ISSTA 2013","15 July 2013 through 20 July 2013","Lugano",98381,,9781450321594,,,"English","Int. Symp. Softw. Test. Anal., ISSTA - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84881278166
"Maras J., Štula M., Carlson J.","36023615200;14422828000;7402114423;","Generating feature usage scenarios in client-side web applications",2013,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","7977 LNCS",,,"186","200",,9,"10.1007/978-3-642-39200-9_17","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880904622&doi=10.1007%2f978-3-642-39200-9_17&partnerID=40&md5=497605fcd21384c2b432bfde9ecc6b65","University of Split, Croatia; Mälardalen University, Sweden","Maras, J., University of Split, Croatia; Štula, M., University of Split, Croatia; Carlson, J., Mälardalen University, Sweden","Client-side web applications are highly-dynamic event-driven GUI applications where the majority of code is executed as a response to user-generated events. Many software engineering activities (e.g. testing) require sequences of actions (i.e. usage scenarios) that execute the application code with high coverage. Specifying these usage scenarios is a difficult and time-consuming activity. This is especially true when generating usage scenarios for a particular feature because it requires in-depth knowledge of application behavior and understanding of the underlying implementation. In this paper we present a method for automatic generation of feature usage scenarios. The method is based on dynamic analysis and systematic exploration of the application's event and value space. We have evaluated the approach in a case study, and the evaluation shows that the method is capable of identifying usage scenarios for a particular feature. We have also performed the evaluation on a suite of web applications, and the results show that an increase in coverage can be achieved, when compared to the initial coverage obtained by loading the page and executing registered events. © 2013 Springer-Verlag Berlin Heidelberg.","GUI Testing; Symbolic Execution; Web Applications","Application behaviors; Automatic Generation; Engineering activities; GUI testing; In-depth knowledge; Symbolic execution; Systematic exploration; WEB application; Applications; Graphical user interfaces; Software engineering; World Wide Web; Loading",,,,,,,,"Harman, M., Search based software engineering for program comprehension (2007) Proceedings - ICPC 2007: 15th IEEE International Conference on Program Comprehension, pp. 3-12. , DOI 10.1109/ICPC.2007.35, 4268235, Proceedings - ICPC 2007: 15th IEEE International Conference on Program Comprehension; Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F., A framework for automated testing of javascript web applications (2011) 33rd International Conference on Software Engineering, ICSE 2011, pp. 571-580. , ACM; Eisenbarth, T., Koschke, R., Simon, D., Locating features in source code (2003) IEEE Transactions on Software Engineering, 29 (3), pp. 210-224; Godefroid, P., Klarlund, N., Sen, K., Dart: Directed automated random testing (2005) ACM Sigplan Notices, 40, pp. 213-223; Godefroid, P., Levin, M.Y., Molnar, D., Automated whitebox fuzz testing (2008) NDSS; Jussien, N., Rochart, G., Lorca, X., The choco constraint programming solver (2008) CPAIOR 2008 Workshop on Open-Source Software for Integer and Contraint Programming; Maras, J., Carlson, J., Crnkovic, I., Extracting client-side web application code (2012) 21st International Conference on World Wide Web, WWW 2012, pp. 819-828. , ACM; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling ajax by inferring user interface state changes (2008) Eighth International Conference on Web Engineering, ICWE 2008, pp. 122-134. , IEEE; Mesbah, A., Van Deursen, A., Roest, D., Invariant-based automatic testing of modern web applications (2012) IEEE Transactions on Software Engineering, 38 (1), pp. 35-53; Saxena, P., Akhawe, D., Hanna, S., Mao, F., McCamant, S., Song, D., A symbolic execution framework for javascript (2010) 2010 IEEE Symposium on Security and Privacy (SP), pp. 513-528. , IEEE; Sen, K., Marinov, D., Agha, G., (2005) CUTE: A Concolic Unit Testing Engine for C, 30. , ACM","University of SplitCroatia",,"Otto Monsted Fond;Det Obelske Famieliefond",,"13th International Conference on Web Engineering, ICWE 2013","8 July 2013 through 12 July 2013","Aalborg",98035,03029743,9783642391996,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84880904622
"Fritsi D., Nagy C., Ferenc R., Gyimothy T.","55496107600;26667913000;6603559878;6603266536;","A methodology and framework for automatic layout independent GUI testing of applications developed in magic xpa",2013,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","7972 LNCS","PART 2",,"513","528",,,"10.1007/978-3-642-39643-4_37","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880739761&doi=10.1007%2f978-3-642-39643-4_37&partnerID=40&md5=0baf8d5b2fc1fa25fc2daea382066858","Department of Software Engineering, University of Szeged, Hungary","Fritsi, D., Department of Software Engineering, University of Szeged, Hungary; Nagy, C., Department of Software Engineering, University of Szeged, Hungary; Ferenc, R., Department of Software Engineering, University of Szeged, Hungary; Gyimothy, T., Department of Software Engineering, University of Szeged, Hungary","Testing an application via its Graphical User Interface (GUI) requires lots of manual work, even if some steps of GUI testing can be automated. Test automation tools are great help for testers, particularly for regression testing. However these tools still lack some important features and still require manual work to maintain the test cases. For instance, if the layout of a window is changed without affecting the main functionality of the application, all test cases testing the window must be re-recorded again. This hard maintenance work is one of the greatest problems with the regression tests of GUI applications. In our paper we propose an approach to use the GUI information stored in the source code during automatic testing processes to create layout independent test scripts. The idea was motivated by testing an application developed in a fourth generation language, Magic. In this language the layout of the GUI elements (e.g. position and size of controls) are stored in the code and can be gathered via static code analysis. We implemented the presented approach for Magic xpa in a tool called Magic Test Automation, which is used by our industrial partner who has developed applications in Magic for more than a decade. © 2013 Springer-Verlag Berlin Heidelberg.",,"Developed applications; Graphical user interfaces (GUI); GUI applications; Important features; Industrial partners; Regression testing; Static code analysis; Test automation tool; Automatic testing; Automation; Software testing; Tools; Graphical user interfaces",,,,,,,,"Bauersfeld, S., Guitest, J.E.V.T., A java library for fully automated gui robustness testing (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 330-333. , ACM, New York; Buwalda, H., Automated testing with action words, abandoning record and playback (1996) Proceedings of the EuroStar Conference; Buwalda, H., Kasdorp, M., (1999) Getting Automated Testing under Control, Software Testing and Quality Engineering, , STQE Magazine, Division of Software Quality Engineering (November/December; Dranidis, D., Masticola, S.P., Strooper, P., Challenges in practice 4th international workshop on the automation of software test report (2009) SIGSOFT Softw. Eng. Notes, 34 (4), pp. 32-34; Dustin, E., Garrett, T., Gauf, B., (2009) Implementing Automated Software Testing, , How to Save Time and Lower Costs While Raising Quality, 1st edn. Addison-Wesley Professional; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing. Introduction, Management, and Performance, , Addison-Wesley Longman Publishing Co., Inc., Boston; Fewster, M., Graham, D., (1999) Software Test Automation. Effective Use of Test Execution Tools, , ACM Press/Addison-Wesley Publishing Co; Ganov, S.R., Killmar, C., Khurshid, S., Perry, D.E., Test generation for graphical user interfaces based on symbolic execution (2008) Proceedings of the 3rd International Workshop on Automation of Software Test, AST 2008, pp. 33-40. , ACM, New York; Hinz, J., Gijsen, M., (2009) Fifth Generation Scriptless and Advanced Test Automation Technologies; Kaner, C., (2000) Architectures of Test Automation; Kit, E., (1999) Integrated Effective Test Design and Automation Software Development, , Software Development Online (February; Li, K., Wu, M., (2005) Effective GUI Test Automation, , SYBEX Inc., Alameda; Lu, Y., Yan, D., Nie, S., Wang, C., Development of an improved GUI automation test system based on event-flow graph (2008) Proceedings of the 2008 International Conference on Computer Science and Software Engineering, 2, pp. 712-715. , IEEE Computer Society; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Nagy, C., Vidács, L., Rudolf, F., Gyimóthy, T., Kocsis, F., Kovács, I., Solutions for reverse engineering 4GL applications, recovering the design of a logistical wholesale system (2011) 15th European Conference on Software Maintenance and Reengineering (CSMR), pp. 343-346. , March; Peleska, J., Löding, H., Kotas, T., Test automation meets static analysis (2007) GI Jahrestagung (2). LNI, 110, pp. 280-290. , GI; Posey, B., (2002) Just Enough Software Test Automation, , Prentice Hall PTR; Sommerville, I., (2010) Software Testing, , In. Software Engineering, 9th edn. Addison-Wesley; Strang, R., Data driven testing for client/server applications (1996) Proceedings of the Fifth International Conference on Software Testing, Analysis and Reliability (STAR 1996), pp. 395-400","Department of Software Engineering, Hungary",,"Ho CHi Minh City International University;University of Perugia;Monash University;Kyushu Sangyo University;University of Basilicata;The Office of Naval Research",,"13th International Conference on Computational Science and Its Applications, ICCSA 2013","24 June 2013 through 27 June 2013","Ho Chi Minh City",97954,03029743,9783642396427,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84880739761
"Alsmadi I.","17433667400;","How much automation can be done in testing?",2013,"Software Design and Development: Concepts, Methodologies, Tools, and Applications","4-4",,,"1828","1849",,1,"10.4018/978-1-4666-4301-7.ch087","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944681939&doi=10.4018%2f978-1-4666-4301-7.ch087&partnerID=40&md5=fd63a5abc14c6535d81a9bd50d4aa402","Yarmouk University, Jordan","Alsmadi, I., Yarmouk University, Jordan","It is widely acknowledged that software testing stage is a stage in the software project that is time and resources' consuming. In addition, this stage comes late in the project, usually at the time where pressure of delivery is high. Those are some reasons why major research projects in testing focus on methods to automate one or more of activities in this stage. In this chapter, description of all sub stages in software testing is explained along with possible methods to automate activities in this sub stage. The focus in this chapter is on the user interface of the software as it is one of the major components that receives a large percentage of testing. A question always raised in testing is whether full test automation is possible and if that can be feasible, possible and applicable. While 100% test automation is theoretic and impractical, given all types of activities that may occur in testing, it is hoped that a maximum coverage in test automation will be visible soon. © 2014, IGI Global.",,"Automation; User interfaces; Full tests; Maximum coverage; Software project; Test Automation; Software testing",,,,,,,,"Alsmadi, I., The utilization of user sessions in testing (2008) Proceedings of the Seventh IEEE/ACIS International Conference on Computer and Information Science, , ICIS 2008; Alsmadi, I., Al-Kabi, M., GUI structural metrics (2011) The International Arab Journal of Information Technology (IAJIT), 8 (2); Alsmadi, I., Magel, K., GUI path oriented test generation algorithms (2007) Proceedings of the Second IASTED International Conference on Human Computer Interaction, , March 14-16, 2007, Chamonix, France; Alsmadi, I., Magel, K., (2007) An object oriented framework for user interface test automation, , MICS07; Ames, A., Jie, H., (2004) Critical paths for GUI regression testing, , http://www.cse.ucsc.edu/~sasha/proj/gui_testing.pdf, University of California, Santa Cruz. Retrieved from; Godase, S., (2005) An introduction to software automation, , http://www.qthreads.com/articles/testing-/an_introduction_to_software_test_automation.html, Retrieved from; Goga, N., (2003) A probabilistic coverage for onthe-y test generation algorithms, , Retrieved from; Hanna, S., Abu Ali, A., Platform effect on Web services robustness testing (2011) Journal of Applied Sciences, 11 (2), pp. 360-366. , http://www.fmt.cs.utwente.nl/publications/Files/398_covprob.ps.gz, doi:10.3923/jas.2011.360.366; Makedonov, Y., (2005) Managers guide to GUI test automation, , http://www.softwaretestconsulting.com/Presentations_slides/Manager_sGuide_GUI_Test-Automation11wh.pdf, Software Test and Performance Conference 2005. Retrieved from; Mao, Y., Boqin, F., Zhenfang, H., Li, F., Important usage paths selection for GUI software testing (2006) Information and Technology Journal, 5 (4), pp. 648-654; Marick, B., When should a test be automated (1998) Proceedings of the 11th International Software/Internet Quality Week. Software Research, , http://www.testing.com/writings/automate.pdf, San Francisco, USA. Retrieved from; Mcglade, L., (2008) Structural testing of Webbased scripting programs, , http://www.cra.org/Activities/craw/dmp/awards/2001/mcglade/final_paper.htm, Retrieved from; Memon, A., (2001) A comprehensive framework for testing graphical user interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July 2001; Memon, A., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A., GUI testing: Pitfall and process (2002) Software Technologies, 35 (8), pp. 87-88; Memon, A., (2004) Developing testing techniques for event-driven pervasive computing applications, , Department of Computer Science, University of Maryland; Memon, A., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2); Memon, A., Banerejee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th. Working Conference on Reverse Engineering, pp. 1095-1350. , WCRE'03); Memon, A., Soffa, M., Regression testing of GUIs (2003) Proceedings of ESEC/FSE'03, , September 2003; Memon, A., Xie, Q., Studying the fault detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; (2008) Computer science and artificial intelligence laboratory, , http://sdg.csail.mit.edu/index.html, Retrieved from; Mitchell, A., Power, J., An approach to quantifying the run-time behavior of Java GUI applications (2004) Proceedings of the Winter International Symposium on Information and Communication Technologies, pp. 1-6. , Cancun, Mexico; Mustafa, G., Ali Shah, A., Asif, K.H., Ali, A., A strategy for testing of Web based software (2007) Information Technology Journal, 6 (1), pp. 74-81; Nistorica, G., (2005) Automated GUI testing. O'Reilly Network, , http://www.perl.com/pub/a/2005/08/11/win32guitest.html, Retrieved from; Orso, A., Silva, S., Open issues and research directions in object oriented testing (1998) Proceedings of the 4th International Conference on ""Achieving Quality in Software: Software Quality in the Communication Society"" (AQUIS'98), , Venice, Italy; Pettichord, B., (2004) Homebrew test automation, , www.io.com/~wazmo/papers/homebrew_test_automation_200409.pdf, ThoughtWorks. Retrieved from; Rajanna, V., Automated software testing tools and their impact on software maintenance (2001) Proceedings of the 3rd Annual International Software Testing, , Softwaredioxide.com, India. Retrieved from; Sengupta, G.J., Regression testing method based on XML schema for GUI components (2010) Journal of Software Engineering, 4 (2), pp. 137-146; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for Web applications (2005) Proceedings of the 20th IEEE/ACM international Conference on Automated Software Engineering, , November 07-11, 2005, USA; Sreedevi, S., (2006) Cost effective techniques for user session based testing of Web applications, , 128.4.133.74:8080/dspace/bitstream/123456789/168/1/-sampath.dissertation06.pdf, PhD dissertation, University of Delaware. Retrieved from; Stewart, F., (2008) Practical use of Rational Robot in transactional monitoring, , http://www.ibm.com/developerworks/tivoli/library/trationalrobot/index.html, IBM. Retrieved from; Tretmans, J., Test generation with inputs, outputs, and quiescence (1996) Proceedings of the Second International Workshop on Tools and Algorithms for Construction and Analysis of Systems, Passau, Germany, Lecture Notes in Computer Science, 1055, pp. 127-146; Tse, T.H., Chan, F.T., Chen, H.Y., An axiom-based test case selection strategy for object-oriented programs (1994) IFIP Conference Proceedings, Software Quality and Productivity:Theory, Practice and Training, pp. 107-114. , London, UK; Tse, T.H., Chan, F.T., Chen, H.Y., In black and white: An integrated approach to objectoriented program testing (1998) ACM Transactions on Software Engineering and Methodology, 7 (3), pp. 250-295; Tubeishat, M., Alsmadi, I., Al-Kabi, M., Using XML for user interface documentation and differential evaluation (2010) Journal of Theoretical and Applied Information Technology, 21 (2); Turner, C.D., Robson, D.J., The statebased testing of object-oriented programs (1993) Proceedings of the IEEE Conference on Software Maintenance, pp. 302-310. , CSM-93), Montreal, Canada; White, L., Al Mezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, p. 54. , ISSRE'01), Hong Kong, PRC; White, L., Almezen, H., Generating test cases from GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering (ISSRE'00), pp. 110-121. , San Jose, USA; Wilber, J., Weishaar, G., (2002) Executing visual test scripts with IBM Rational TestManager, , http://www.ibm.com/developerworks/rational/library/2962.html, IBM. Retrieved from; Williams, C., Software testing and the UML (1999) Proceedings of the International Symposium on Software Reliability Engineering, , ISSRE'99), Boca Raton, USA; Xie, Q., Developing cost-effective modelbased techniques for GUI testing (2006) Proceedings of The International Conference of Software Engineering 2006, , ICSE'06; Xin, W., Feng-Yan, H., Zheng, Q., Software reliability testing data generation approach based on a mixture model (2010) Information Technology Journal, 9 (5), pp. 1038-1043","Alsmadi, I.; Yarmouk UniversityJordan",,,"IGI Global",,,,,,9781466643024; 1466643013; 9781466643017,,,"English","Softw. Des. and Dev.: Concepts, Methodol., Tools, and Appl.",Book Chapter,"Final","",Scopus,2-s2.0-84944681939
"Yang W., Prasad M.R., Xie T.","55607069500;7201465637;55574210063;","A grey-box approach for automated GUI-model generation of mobile applications",2013,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","7793 LNCS",,,"250","265",,185,"10.1007/978-3-642-37057-1_19","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84874383552&doi=10.1007%2f978-3-642-37057-1_19&partnerID=40&md5=037cd899fd2aa4e2a863a1383aceb55f","Software Systems Innovation Group, Fujitsu Labs. of America, Sunnyvale, CA, United States; Department of Computer Science, North Carolina State University, Raleigh, NC, United States","Yang, W., Software Systems Innovation Group, Fujitsu Labs. of America, Sunnyvale, CA, United States, Department of Computer Science, North Carolina State University, Raleigh, NC, United States; Prasad, M.R., Software Systems Innovation Group, Fujitsu Labs. of America, Sunnyvale, CA, United States; Xie, T., Department of Computer Science, North Carolina State University, Raleigh, NC, United States","As the mobile platform continues to pervade all aspects of human activity, and mobile applications, or mobile apps for short, on this platform tend to be faulty just like other types of software, there is a growing need for automated testing techniques for mobile apps. Modelbased testing is a popular and important testing approach that operates on a model of an app's behavior. However, such a model is often not available or of insufficient quality. To address this issue, we present a novel grey-box approach for automatically extracting a model of a given mobile app. In our approach, static analysis extracts the set of events supported by the Graphical User Interface (GUI) of the app. Then dynamic crawling reverse-engineers a model of the app, by systematically exercising these events on the running app. We also present a tool implementing this approach for the Android platform. Our empirical evaluation of this tool on several Android apps demonstrates that it can efficiently extract compact yet reasonably comprehensive models of high quality for such apps. © 2013 Springer-Verlag.",,"Android apps; Android platforms; Automated testing; Comprehensive model; Empirical evaluations; Graphical user interfaces (GUI); Grey-box; High quality; Human activities; Mobile app; Mobile applications; Mobile apps; Mobile platform; Model based testing; Set of events; Graphical user interfaces; Mobile computing; Robots; Static analysis; Testing; Software engineering",,,,,,,,"(2012) State of the Internet: Q1, , http://www.comscore.com/Insights/Presentations_and_Whitepapers/2012/ State_of_US_Internet_in_Q1_2012; (2012) Twitter's Mobile Ad Revenue Overtakes Desktop PCs, , http://www.digitalstrategyconsulting.com/netimperative/news/2012/06/ twitters_mobile_ad_revenue_ove.php, netimperative; (2012) Google Play Hits 600,000 Apps, 20 Billion Total Installs, , http://www.engadget.com/2012/06/27/google-play-hits-600000-apps/, engadget.com; http://developer.Android.com/; Robotium, , http://code.google.com/p/robotium/; Robolectric, , http://pivotal.github.com/robolectric/; http://testdroid.com/, Bitbar; Mobile App Testing, , http://mobileappstesting.contussupport.com/; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smart-phone apps (2012) Proc. 20th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, FSE 2012, pp. 59:1-59:11; Nguyen, C.D., Marchetto, A., Tonella, P., Combining model-based and combinatorial testing for effective test case generation (2012) Proc. International Symposium on Software Testing and Analysis, ISSTA 2010, pp. 100-110; Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A.M., Using GUI ripping for automated testing of Android applications (2012) Proc. 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012, pp. 258-261; Mirzaei, N., Malek, S., Pǎsǎreanu, C.S., Esfahani, N., Mahmood, R., Testing Android apps through symbolic execution (2012) SIGSOFT Softw. Eng. Notes, 37, pp. 1-5; Joorabchi, M.E., Mesbah, A., Reverse engineering iOS mobile applications (2012) Proc. 19th Working Conference on Reverse Engineering, WCRE 2012, pp. 177-186; Syer, M.D., Adams, B., Zou, Y., Hassan, A.E., Exploring the development of microapps: A case study on the Blackberry and Android platforms (2011) Proc. IEEE 11th International Working Conference on Source Code Analysis and Manipulation, SCAM 2011, pp. 55-64; Pezzè, M., Young, M., (2007) Software Testing and Analysis - Process, Principles and Techniques, , Wiley; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proc. 10th Working Conference on Reverse Engineering, WCRE 2003, pp. 260-269; Mesbah, A., Van Deursen, A., Lenselink, S., Crawling AJAX-based Web applications through dynamic analysis of user interface state changes (2012) ACM Trans. Web, 6 (1), pp. 3:1-3:30; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an Android application (2011) Proc. 4th IEEE International Conference on Software Testing, Verification and Validation, ICST 2011, pp. 377-386; Dias Neto, A.C., Subramanyan, R., Vieira, M., Travassos, G.H., A survey on model-based testing approaches: A systematic review (2007) Proc. 1st ACM International Workshop on Empirical Assessment of Software Engineering Languages and Technologies, WEASELTech 2007, pp. 31-36; Shafique, M., Labiche, Y., (2010) A Systematic Review of Model Based Testing Tool Support, , Technical Report SCE-10-04, Carleton University, Canada; Android GUITAR, , http://sourceforge.net/apps/mediawiki/guitar/index.php?title= Android_GUITAR; Dallmeier, V., Burger, M., Orth, T., Zeller, A., WebMate: A tool for testing Web 2.0 applications (2012) Proc. Workshop on JavaScript Tools, JSTools 2012, pp. 11-15; Hu, C., Neamtiu, I., Automating GUI testing for Android applications (2011) Proc. 6th International Workshop on Automation of Software Test, AST 2011, pp. 77-83; WALA, , http://wala.sourceforge.net/wiki/index.php","Yang, W.; Software Systems Innovation Group, , Sunnyvale, CA, United States; email: wei.yang@ncsu.edu",,,,"16th International Conference on Fundamental Approaches to Software Engineering, FASE 2013, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013","16 March 2013 through 24 March 2013","Rome",95779,03029743,9783642370564,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84874383552
"Tang J., Zhu Q., Jiang M.","8708277400;54891348600;35279508600;","Towards an interface-based automation testing framework for sirverlight applications",2013,"Information Technology Journal","12","4",,"829","834",,,"10.3923/itj.2013.829.834","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872957855&doi=10.3923%2fitj.2013.829.834&partnerID=40&md5=42d41cf22a44d738d35d7d7fed700e62","Institute of Software Intelligent Technology, Hangzhou Dianzi University, Xiasha Campus, Hangzhou, Zhejiang, China","Tang, J., Institute of Software Intelligent Technology, Hangzhou Dianzi University, Xiasha Campus, Hangzhou, Zhejiang, China; Zhu, Q., Institute of Software Intelligent Technology, Hangzhou Dianzi University, Xiasha Campus, Hangzhou, Zhejiang, China; Jiang, M., Institute of Software Intelligent Technology, Hangzhou Dianzi University, Xiasha Campus, Hangzhou, Zhejiang, China","Nowadays software applications are increasingly becoming large in scale and complexity, thus, Graphical User Interface (GUI) testing plays a formal important role in ensuring the correctness and reliability of software applications. A variety of approaches in the area of GUI testing have emerged in recent years. One notable trend is Model-Based Testing (MBT) which creates an abstract test model that simulates the anticipated behavior of the System Under Testing (SUT) by using some software generated tools to generate model tests. This study highlights the designing as well as the presentation of a new automation testing framework for silverlight applications with particular focuses upon the integration of the Spec Explorer based MBT with a free web framework called WebAii. Both of the tools are available as open source. Spec Explorer can be used to generate the test cases automatically, while WebAii is used to simulate human action and operation processes to complete the test execution in an automated way. © 2013 Asian Network for Scientific Information.","Automation test; GUI testing; Model-based testing; Spec Explorer; WebAii","Automation testing; GUI testing; Human actions; Model based testing; Model tests; Open sources; Operation process; Software applications; Spec Explorer; Test case; Test execution; Test models; WebAii; Automation; Graphical user interfaces; Software reliability; Testing; Software testing",,,,,,,,"Barnett, M., Leino, R., Schulte, W., The spec programming system: An overview (2004) Proceedings of the International Workshop on Construction and Analysis of Safe, Secure and Interoperable Smart Devices, 3362, pp. 49-69. , March 10-14, 2004,Springer, Marseille, France; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., (2005) Model-Based Testing of Object-Oriented Reactive Systems with Spec Explorer, , Technical Report MSR-TR-2005-59, Microsoft Research, May 2005; Dustm, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, management and performance, p. 575. , Addison-Wesley, New York, USA., ISBN: 9780201432879; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the IEEE 31 st International Conference on Software Engineering, pp. 408-418. , May 16-24, 2009, Vancouver, BC, Canada; Grieskamp, W., Gurevich, Y., Schulte, W., Veanes, M., Generating finite state machines from abstract state machines (2002) Proceedings of the 2002 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 112-122. , luly 22-24, 2002, Rome, Italy; Gurevich, Y., Rossman, B., Schulte, W., Semantic essence of asml (2005) Theor. Comput Sci., 343, pp. 370-412; Kanstren, T., (2010) A Framework for Observation-Based Modelling in Model-Based Testing, p. 727. , VTT Technical Research Centre of Finland, Espoo, Finland, ISBN: 9789513873769; Li, K., Wu, M., (2004) Effective GUI Test Automation: Developing an Automated GUI Testing Tool, p. 445. , John Wiley and Sons, New York, USA., ISBN: 9780782143515; Mlynarski, M., Guldali, B., Spath, M., Engels, G., From design models to test models by means of test ideas (2009) Proceedings of the 6th International Workshop on Model-Driven Engineering, Verification and Validation, , October 4-9, 2009, Denver, CO., USA; Myers, B., Hudson, S.E., Pausch, R., Past, present and future of user interface software tools (2000) ACM Trans. Comput Human Interact., 7, pp. 3-28; Paz, J.R.G., (2010) Pro Telenk ASP, p. 696. , Net and Silverlight Controls: Master Telerik Controls for Advanced ASP.Net and Silverlight Projects. Apress, Berkeley, CA., USA., ISBN: 9781430229407; Singhera, Z., Horowitz, E., Shah, A., A graphical user interface (gui) testing methodology (2008) Int. J. Inform. Technol. Web Eng., 3, pp. 1-17; Swain, S.K., Pam, S.K., Mohapatra, D.P., Model based object-oriented software testing (2010) J. Theor. Applied Inform. Technol., 14, pp. 30-36; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, p. 433. , Morgan Kaufmann Publishers Inc., San Francisco, CA., USA., ISBN: 9780123725011; Villa, A., Cassarino, I., Antonelli, D., Extending group technology to the identification and the analysis of enterprises networks (2007) Int. J. Prod. Res, 45, pp. 3881-3892; Ye, M., Feng, B., Zhu, L., Automated oracle based on multi-weighted neural networks for gui testing (2007) Inform. Technol. J, 6, pp. 370-375; Yuejin, L., Lianyu, X., Conditioning for state space reduction in program model checking (2009) Inform. Technol. J., 8, pp. 990-997","Tang, J.; Institute of Software Intelligent Technology, Xiasha Campus, Hangzhou, Zhejiang, China",,,,,,,,18125638,,,,"English","Inf. Technol. J.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-84872957855
"Alsmadi I.M.","17433667400;","Using mutation to enhance GUI testing coverage",2013,"IEEE Software","30","1", 6148201,"67","73",,4,"10.1109/MS.2012.22","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872130558&doi=10.1109%2fMS.2012.22&partnerID=40&md5=f820f2fe528ae3e87ca6af229458f534","Yarmouk University, Jordan","Alsmadi, I.M., Yarmouk University, Jordan","Mutation testing improves a system's bug-detection capability. It also helps improve coverage by exposing software or code areas that other types of testing might not expose. However, the value of mutation testing is often bypassed because it consumes extra resources from already limited ones. The author presents an automatic technique to generate valid and mutant test cases. In traditional mutation testing, one or more parameters in the specification or the code are changed, and the technique finds the test cases that can detect those mutations. In the author's approach, the test cases generated by a GUI model are mutated and the mutants are then applied the model to test its capability to kill the mutant test cases by rejecting them. A robust model is expected to differentiate between a valid and invalid event sequence. The author also describes an automatic execution and verification technique to evaluate the test cases rejected by the GUI model and to calculate coverage based on their number relative to the total number of test cases. Experimental results indicate the value of this mutation process and its potential for improving software test coverage automatically. © 1984-2012 IEEE.","GUI modeling; mutation testing; random test-case generation; test-case execution and verification; test-case generation","Automatic technique; Event sequence; GUI testing; Mutation process; Mutation testing; Robust models; Software test; Test case; Test case generation; Verification techniques; Graphical user interfaces; Software testing",,,,,,,,"Izzat, A., Magel, K., GUI path oriented test generation algorithms (2007) Proc. Int'l Assoc. Science and Technology for Development Conf. Human-Computer Interaction (HCI 07), pp. 216-219. , ACTA Press; Izzat, A., Magel, K., An object oriented framework for user interface test automation (2007) Proc. Midwest Instruction and Computing Symp. (MICS 07, , http://static.aws.pdf-archive.com/2011/08/13/10-1-1-101-3642/ 10-1-1-101-3642.pdf","Alsmadi, I.M.; Yarmouk UniversityJordan",,,,,,,,07407459,,IESOE,,"English","IEEE Software",Article,"Final","",Scopus,2-s2.0-84872130558
"Alégroth E.","55843479600;","Random visual GUI testing: Proof of concept",2013,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE","2013-January","January",,"178","183",,5,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84935119363&partnerID=40&md5=1b1c1830852561a7aa2fab79cb40cabb","Department of Computer Science and Engineering, Chalmers University of Technology, Göteborg, SE-41296, Sweden","Alégroth, E., Department of Computer Science and Engineering, Chalmers University of Technology, Göteborg, SE-41296, Sweden","Market demands for higher quality software and shorter time-to-market delivery have resulted in a need for new automated software testing techniques. Most automated testing techniques are designed for regression testing that limit their fault finding ability to faults explicitly tested in scenarios/scripts. To overcome this limitation, companies define test processes with several test techniques, e.g. unit testing and random testing (RT). RT is a technique that can be performed manually or automatically with tools such as Fuzz, DART and Quickcheck. However, these tools operate on lower levels of system abstraction, leaving a gap for a Graphical User Interface (GUI), bitmap level, automated RT technique. In this paper we present proof of concept for Random Visual GUI testing (RVGT), a novel automated test technique that combines GUI based testing, Visual GUI Testing, with random testing. Proof of concept for RVGT is evaluated in a three phase study with results that show that RVGT is applicable for both functional and non-functional/quality requirement conformance testing. Furthermore, results from a survey performed in industry indicate that there is industrial need for the technique. These pivotal results show that further research into RVGT is warranted. Copyright © 2013 by Knowledge Systems Institute Graduate School.","Proof of concept; Random testing; Visual GUI testing","Ability testing; Automation; Commerce; Graphical user interfaces; Knowledge engineering; Software engineering; User interfaces; Automated software testing; Conformance testing; Graphical user interfaces (GUI); Higher quality softwares; Proof of concept; Random testing; Regression testing; Visual gui testing; Software testing",,,,,,,,"Jovanović, I., Software testing methods and techniques (2009) The IPSI BgD Transactions on Internet Research, 30p; Olan, M., Unit testing: Test early, test often (2003) Journal of Computing Sciences in Colleges, 19 (2), pp. 319-328; Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated gui performance testing (2011) Software Quality Journal, pp. 1-39; Börjesson, E., Feldt, R., Automated system testing using visual gui testing tools: A comparative study in industry (2012) ICST; Alegroth, E., Feldt, R., Olsson, H., Transitioning manual system test suites to automated testing: An industrial case study (2012) ICST; Rothermel, G., Untch, R., Chu, C., Harrold, M., Prioritizing test cases for regression testing (2001) Software Engineering, IEEE Transactions on, 27 (10), pp. 929-948; Itkonen, J., Rautiainen, K., Exploratory testing: A multiple case study (2005) 2005 International Symposium on Empirical Software Engineering, 2005, 10p. , IEEE; Hamlet, R., Random testing (1994) Encyclopedia of Software Engineering; Godefroid, P., Klarlund, N., Sen, K., Dart: Directed automated random testing (2005) ACM Sigplan Notices, 40 (6), pp. 213-223. , ACM; Forrester, J., Miller, B., An empirical study of the robustness of windows nt applications using random testing (2000) Proceedings of the 4th Conference on USENIX Windows Systems Symposium, 4, pp. 6-6. , USENIX Association; Claessen, K., Hughes, J., Quickcheck: A lightweight tool for random testing of haskell programs (2000) Acm Sigplan Notices, 35 (9), pp. 268-279. , ACM; Gutjahr, W., Partition testing vs. Random testing: The influence of uncertainty (1999) Software Engineering, IEEE Transactions on, 25 (5), pp. 661-674; Bach, J., (2003) Exploratory Testing Explained, , http://www.satisfice.com/articles/et-article.pdf, Online; Andrews, J., Briand, L., Labiche, Y., Is mutation an appropriate tool for testing experiments? [software testing] (2005) Software Engineering, 2005, ICSE 2005, Proceedings, 27th International Conference On, pp. 402-411. , IEEE; Yeh, T., Chang, T., Miller, R., Sikuli: Using gui screenshots for search and automation (2009) Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology, pp. 183-192. , ACM; Gorschek, T., Wohlin, C., Carre, P., Larsson, S., A model for technology transfer in practice (2006) Software, IEEE, 23 (6), pp. 88-95","Alégroth, E.; Department of Computer Science and Engineering, Chalmers University of TechnologySweden",,"Knowledge Systems Institute Graduate School","Knowledge Systems Institute Graduate School","25th International Conference on Software Engineering and Knowledge Engineering, SEKE 2013","27 June 2013 through 29 June 2013",,112836,23259000,,,,"English","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,"Final","",Scopus,2-s2.0-84935119363
"Aho P., Suarez M., Kanstrén T., Memon A.M.","35188652400;56241277100;18434124300;35599876500;","Industrial adoption of automatically extracted GUI models for testing",2013,"CEUR Workshop Proceedings","1078",,,"49","54",,6,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924943054&partnerID=40&md5=3afe1ac39820868693b0f1db0ee9b899","VTT Technical Research Centre of Finland, Oulu, Finland; University of Maryland, College Park, MD, United States; F-Secure Ltd, Helsinki, Finland; University of Toronto, Toronto, Canada","Aho, P., VTT Technical Research Centre of Finland, Oulu, Finland, University of Maryland, College Park, MD, United States; Suarez, M., F-Secure Ltd, Helsinki, Finland; Kanstrén, T., VTT Technical Research Centre of Finland, Oulu, Finland, University of Toronto, Toronto, Canada; Memon, A.M., University of Maryland, College Park, MD, United States","Crafting the models for effective model-based testing (MBT) requires deep understanding of the problem domain and expertise on formal modeling, and creating the models manually from the scratch re- quires a significant amount of effort. When an existing system is being modeled and tested, there are various techniques to automate the pro- cess of producing the models based on the implementation. Especially graphical user interface (GUI) applications have been a good domain for reverse engineering and specification mining approaches, but the exist- ing academic approaches have limitations and restrictions on the GUI applications that can be modeled, and none of them have been adopted by the industry for testing commercial software. Although using imple- mentation based models in testing has restrictions and requires special consideration, the generated models can be used in automated testing and supporting various manual testing actions. In this paper we intro- duce an industrial approach and platform-independent Murphy tool set for automatically extracting state models for testing GUI applications. Copyright © 2013 for the individual papers by the papers' authors.",,"Application programs; Computational linguistics; Graphical user interfaces; Model checking; Modeling languages; Reverse engineering; User interfaces; Automated testing; Commercial software; Graphical user interfaces (GUI); GUI applications; Industrial adoption; Model based testing; Platform independent; Specification mining; Software testing",,,,,,,,"Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tool Approach, , Morgan Kaufmann Publishers Inc, San Francisco, CA, USA; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse engineering of GUI models for testing (2010) 5th Iberian Conference on Information Systems and Technologies (CISTI), , Santiago de Compostela, Spain; Aho, P., Menz, N., Raty, T., Enhancing generated Java GUI models with valid test data, 2011 (2011) IEEE Conference on Open Systems (ICOS 2011), , 25-28 Sep Langawi, Malaysia; Memon, A.M., An event-ow model of GUI-based applications for testing (2007) Soft- ware Testing, Verification and Reliability, 17 (3). , Sep; Miao, Y., Yang, X., An FSM based GUI test automation model (2010) 11th Int. Conf. Control, Automation, Robotics and Vision Singapore, , 7-10th Dec; Amaltano, D., Fasolino, A.R., Tramontana, P., A GUI crawling-based tech- nique for android mobile application testing, 3rd int. Workshop on testing techniques & experimentation benchmarks for event-driven software (2011) IEEE CS Press, pp. 252-261; Silva, J.C., Silva, C., Gonalo, R.D., Saraiva, J., Campos, J.C., The GUISurfer tool: Towards a language independent approach to reverse engineering GUI code (2010) Proc. 2nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, Berlin, pp. 181-186. , Germany; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineer- ing of graphical user interfaces for testing Proc. 10th Working Conference on Reverse Engineering (WCRE'03, , IEEE Comp Society, Washington DC, USA; Aho, P., Menz, N., Raty, T., Schieferdecker, I., Automated Java GUI modeling for model-based testing purposes (2011) 8th Int. Conf. on Information Technology : New Generations (ITNG2011), , April 11-13, Las Vegas, Nevada, USA; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI- based software applications Proc. 21st IEEE Int. Conf. on Software Mainte- nance (ICSM'05, pp. 473-482. , IEEE Computer Society, Washington DC, USA",,"Chaudron M.Genero M.Abrahao S.Pareto L.","","CEUR-WS","3rd International Workshop on Experiences and Empirical Studies in Software Modeling, EESSMod 2013 - Co-located with 16th International Conference on Model Driven Engineering Languages and Systems, MoDELS 2013","1 October 2013",,111113,16130073,,,,"English","CEUR Workshop Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84924943054
"Azim T., Neamtiu I.","55901396200;10041674000;","Targeted and depth-first exploration for systematic testing of Android apps",2013,"ACM SIGPLAN Notices","48","10",,"641","660",,122,"10.1145/2544173.2509549","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84888803377&doi=10.1145%2f2544173.2509549&partnerID=40&md5=b8b437a51cd6b8d25a1660368ae03cf4","University of California, Riverside, United States","Azim, T., University of California, Riverside, United States; Neamtiu, I., University of California, Riverside, United States","Systematic exploration of Android apps is an enabler for a variety of app analysis and testing tasks. Performing the exploration while apps run on actual phones is essential for exploring the full range of app capabilities. However, exploring real-world apps on real phones is challenging due to non-determinism, non-standard control flow, scalability and overhead constraints. Relying on end-users to conduct the exploration might not be very effective: we performed a 7-user study on popular Android apps, and found that the combined 7-user coverage was 30.08% of the app screens and 6.46% of the app methods. Prior approaches for automated exploration of Android apps have run apps in an emulator or focused on small apps whose source code was available. To address these problems, we present A3E, an approach and tool that allows substantial Android apps to be explored systematically while running on actual phones, yet without requiring access to the app's source code. The key insight of our approach is to use a static, taint-style, dataflow analysis on the app bytecode in a novel way, to construct a high-level control flow graph that captures legal transitions among activities (app screens). We then use this graph to develop an exploration strategy named Targeted Exploration that permits fast, direct exploration of activities, including activities that would be difficult to reach during normal use. We also developed a strategy named Depth-first Exploration that mimics user actions for exploring activities and their constituents in a slower, but more systematic way. To measure the effectiveness of our techniques, we use two metrics: activity coverage (number of screens explored) and method coverage. Experiments with using our approach on 25 popular Android apps including BBC News, Gas Buddy, Amazon Mobile, YouTube, Shazam Encore, and CNN, show that our exploration techniques achieve 59.39-64.11% activity coverage and 29.53-36.46% method coverage. Copyright © 2013. Copyright © 2013 ACM.","Code coverage; Dynamic analysis; Google Android; Greybox testing; GUI testing; Systematic exploration; Taint analysis; Test case generation","Codes (symbols); Data flow analysis; Dynamic analysis; Flow graphs; Petroleum prospecting; Telephone sets; Code coverage; Google Android; Grey-box testing; GUI testing; Systematic exploration; Taint analysis; Test case generation; Android (operating system)",,,,,,,,"(2012) Gartner Says Worldwide PC Shipment Growth Was Flat in Second Quarter of 2012, , http://www.gartner.com/it/page.jsp?id=2079015, July; (2010) Gartner Highlights Key Predictions for IT Organizations and Users in 2010 and Beyond, , http://www.gartner.com/it/page.jsp?id=1278413, January; (2012) Android and IOS Surge to New Smartphone OS Record in Second Quarter, , http://www.idc.com/getdoc.jsp?containerId=prUS23638712, According to IDC. August; (2012) Android Reclaims 61 Percent of All U. S. Smartphone Sales, , http://news.cnet.com/8301-1023_3-57429192-93/android-reclaims-61-percent - of-all-u.s-smartphone-sales, May; Jensen, C.S., Prasad, M.R., Møller, A., Automated testing with targeted event sequence generation Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 67-77; Hu, C., Neamtiu, I., Automating GUI testing for Android applications AST'11, pp. 77-83; Gomez, L., Neamtiu, I., Azim, T., Millstein, T., RERAN: Timing- and touch-sensitive record and replay for android ICSE'13; Guyn, J., Facebook users give iPhone app thumbs down (2011) Los Angeles Times, , http://latimesblogs.latimes.com/technology/2011/07/facebook-users-give- iphone-app-thumbs-down.html, July 21, July; Amalfitano, D., Fasolino, A.R., Salvatore, D.E., Using GUI ripping for automated testing of android applications (2012) ASE', pp. 258-261; Rastogi, V., Chen, Y., Enck, W., AppsPlayground: Automatic security analysis of smartphone applications (2013) CODASPY', pp. 209-220; Yang, W., Prasad, M., Xie, T., A grey-box approach for automated GUI-model generation of mobile applications FASE'13, pp. 250-265; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback (2010) IEEE Transactions on Software Engineering, pp. 81-95; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases ICSE'07, pp. 396-405; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, pp. 137-157; (2012) UI/Application Exerciser Monkey, , http://developer.android.com/tools/help/monkey.html, August; (2012) GUITAR, , guitar.sourceforge.net, August; (2012) Android GUITAR, , http://sourceforge.net/apps/mediawiki/guitar/index.php?title= Android_GUITAR, August; (2012) Robotium. August, , http://code.google.com/p/robotium; (2013), http://developer.sonymobile.com/knowledge-base/tool-guides/ analyse-your-apks-with-apkanalyser, January; Jeon, J., Jeffrey, S., (2013) Foster. Troyd, , https://github.com/plum-umd/troyd, January; (2013) Androguard. January, , http://code.google.com/p/androguard; (2013) Droidbox, , http://code.google.com/p/droidbox, January; (2013) Android Assault, , http://code.google.com/p/android-assault, January; (2012) MonkeyRunner, , http://developer.android.com/guide/developing/tools/ monkeyrunner_concepts.html, August; (2013) SCanDroid, , https://github.com/scandroid/scandroid, January; (2013) Automated Testing Tool for Android - Testdroid, , http://testdroid.com, January; (2013) Android Test Automation - Automate Your App Testing, , http://www.ranorex.com/mobile-automation-testing/android-test-automation . html, January; River, W., (2013) Wind River Framework for Automated Software Testing, , http://www.windriver.com/announces/fast, January; (2013) EggPlant for Mobile Testing, , http://www.testplant.com/products/eggplant/mobile, January; Bhattacharya, P., Ulanova, L., Neamtiu, I., Koduru, S.C., An empirical analysis of the bug-fixing process in open source android apps CSMR'13; Enck, W., Gilbert, P., Chun, B.G., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N., Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones (2010) OSDI, pp. 393-407; (2013) Android Emulator Limitations, , http://developer.android.com/tools/devices/emulator.html#limitations, March; (2013) Android Intents, , http://developer.android.com/reference/android/content/Intent.html, March; Anand, S., Naik, M., Harrold, M.J., Yang, H., Automated concolic testing of smartphone apps FSE'12, pp. 1-11; Böhmer, M., Hecht, B., Schöning, J., Krüger, A., Bauer, G., Falling Asleep with Angry Birds, Facebook and Kindle: A Large Scale Study on Mobile Application Usage. in MobileHCI'11, pp. 47-56; Cornelissen, B., Zaidman, A., Van Deursen, A., Moonen, L., Koschke, R., A systematic survey of program comprehension through dynamic analysis (2009) Software Engineering, IEEE Transactions On, pp. 684-702; Ernst, M.D., Static and dynamic analysis: Synergy and duality WODA 2003: Workshop on Dynamic Analysis, pp. 24-27. , May 9; Hao, S., Li, D., Halfond, W., Govindan, R., Estimating Android applications' CPU energy usage via bytecode profiling Green and Sustainable Software (GREENS), 2012 First International Workshop On, 2012, pp. 1-7; Dong, M., Zhong, L., Self-constructive high-rate system energy modeling for battery-powered mobile systems MobiSys'11, pp. 335-348; Wei, X., Gomez, L., Neamtiu, I., Faloutsos, M., Profile-Droid: Multi-layer profiling of android applications Mobicom'12, pp. 137-148; Takala, T., Katara, M., Harty, J., Experiences of systemlevel model-based GUI testing of an Android application ICST'11, pp. 377-386",,,,"Association for Computing Machinery",,,,,15232867,,,,"English","ACM SIGPLAN Not.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84888803377
"Yu Z., Bai C., Cai K.-Y.","7404345847;56220159400;10039717300;","Mutation-oriented test data augmentation for GUI software fault localization",2013,"Information and Software Technology","55","12",,"2076","2098",,5,"10.1016/j.infsof.2013.07.004","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84885183613&doi=10.1016%2fj.infsof.2013.07.004&partnerID=40&md5=4905029cdbeb71be205b4d188576ba0c","School of Automation Science and Electrical Engineering, Beihang University, Beijing 100191, China","Yu, Z., School of Automation Science and Electrical Engineering, Beihang University, Beijing 100191, China; Bai, C., School of Automation Science and Electrical Engineering, Beihang University, Beijing 100191, China; Cai, K.-Y., School of Automation Science and Electrical Engineering, Beihang University, Beijing 100191, China","Context: Fault localization lies at the heart of program debugging and often proceeds by contrasting the statistics of program constructs executed by passing and failing test cases. A vital issue here is how to obtain these ''suitable'' test cases. Techniques presented in the literature mostly assume the existence of a large test suite a priori. However, developers often encounter situations where a failure occurs, but where no or no appropriate test suite is available for use to localize the fault. Objective: This paper aims to alleviate this key limitation of traditional fault localization techniques for GUI software particularly, namely, it aims at enabling cost-effective fault localization process for GUI software in the described scenario. Method: To address this scenario, we propose a mutation-oriented test data augmentation technique, which actually is directed by the ''similarity'' criterion in GUI software's test case context towards the generation of test suite with excellent fault localization capabilities. More specifically, the technique mainly uses four proposed novel mutation operators to iteratively mutate some failing GUI test cases' event sequences to derive new test cases potentially useful to localize the specific encountered fault. We then compare the fault localization performance of the test suite generated using this technique with that of an original provided large event-pair adequate test suite on some GUI applications. Results: The results indicate that the proposed technique is capable of generating a test suite that has comparable, if not better, fault localization effectiveness to the event-pair adequate test suite, but it is much smaller and it is generated immediately once a failure is encountered by developers. Conclusion: It is concluded that the proposed technique can truly enable quick-start cost-effective fault localization process under the investigated all-too-common scenario, greatly alleviating one key limitation of traditional fault localization techniques and prompting the test-diagnose-repair cycle. © 2013 Elsevier B.V. All rights reserved.","Fault localization; GUI software; Mutation operator; Test data augmentation","Cost effectiveness; Graphical user interfaces; Iterative methods; Program debugging; Testing; Cost effective; Event sequence; Fault localization; GUI applications; GUI software; Mutation operators; Novel mutations; Test data; Software testing",,,,,"National Natural Science Foundation of China, NSFC: 61272164

Natural Science Foundation of Beijing Municipality: 4112033","This work was supported in part by the National Natural Science Foundation of China (Grant No. 61272164) and the Beijing Natural Science Foundation (Grant No. 4112033). The authors thank the anonymous reviewers very much for their detailed and helpful comments.",,"Ayari, K., Bouktif, S., Antoniol, G., Automatic mutation test input data generation via ant colony (2007) Proceedings of GECCO 2007: Genetic and Evolutionary Computation Conference, pp. 1074-1081. , DOI 10.1145/1276958.1277172, Proceedings of GECCO 2007: Genetic and Evolutionary Computation Conference; Alexander, R.T., Bieman, J.M., Ghosh, S.B., Ji Mutation of Java objects (2002) Proceedings of the 13th International Symposium on Software Reliability Engineering (ISSRE 2002, pp. 341-351. , November; Agrawal Hiralal, Demillo Richard, A., Spafford Eugene, H., Debugging with dynamic slicing and backtracking (1993) Software - Practice and Experience, 23 (6), pp. 589-616; Artzi, S., Dolby, J., Tip, F., Pistoia, M., Practical fault localization for dynamic web applications (2010) Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering (ICSE 2010, pp. 265-274. , ACM, New York, NY; Artzi, S., Dolby, J., Tip, F., Pistoia, M., Fault localization for dynamic web applications (2012) IEEE Transactions on Software Engineering, 38 (2), pp. 314-335; Abraham, R., Erwig, M., Mutation operators for spreadsheets (2009) IEEEi Transactions on Software Engineering, 35 (1), pp. 94-108; Arlt, S., Podelski, A., Bertolini, C., Schäf, M., Banerjee, I., Memon, A.M., Lightweight static analysis for GUI testing (2012) Proceedings of the 23rd IEEE International Symposium on Software Reliability Engineering (ISSRE 2012, pp. 301-310. , Washington, DC, USA; Abreu, R., Zoeteweij, P., Golsteijn, R., Van Gemund, A.J.C., A practical evaluation of spectrum-based fault localization (2009) Journal of Systems and Software, 82 (11), pp. 1780-1792; Baudry, B., Fleurey, F., Le Traon, Y., Improving test suites for efficient fault localization (2006) Proceedings - International Conference on Software Engineering, 2006, pp. 82-91. , Proceeding of the 28th International Conference on Software Engineering 2006, ICSE '06; Domínguez-Jiménez, J.J., Estero-Botaro, A., García-Domínguez, A., Medina-Bulo, I., Evolutionary mutation testing (2011) Information and Software Technology, 53 (10), pp. 1108-1123; Digiuseppe, N., Jones, J.A., On the influence of multiple faults on coverage-based fault localization (2011) Proceedings of the 2011 International Symposium on Software Testing and Analysis (ISSTA 2011, pp. 210-220. , ACM, New York, NY; Do, H., Rothermel, G., On the use of mutation faults in empirical assessments of test case prioritization techniques (2006) IEEE Transactions on Software Engineering, 32 (9), pp. 733-752. , DOI 10.1109/TSE.2006.92; Fraser, G., Zeller, A., Mutation-driven generation of unit tests and oracles Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA 2010 ACM), pp. 147-158. , New York, NY, USA; Gupta, N., He, H., Zhang, X., Gupta, R., Locating faulty code using failure-inducing chops (2005) Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering (ASE 2005), pp. 263-272. , ACM Press, New York, NY; Harman, M., Jia, Y., Langdon, W.B., Strong higher order mutation-based test data generation (2011) Proceedings of the 19th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2011), pp. 212-222. , ACM, Szeged, Hungary; Jeffrey, D., Gupta, N., Gupta, R., Fault localization using value replacement (2008) Proceedings of the 2008 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2008), pp. 167-178. , ACM, New York, NY; Jia, Y., Harman, M., An analysis and survey of the development of mutation testing (2011) IEEE Transactions on Software Engineering, 37 (5), pp. 649-678; Jia, Y., Harman, M., Higher order mutation testing (2009) Information and Software Technology, 51 (10), pp. 1379-1393; Jones, J.A., Harrold, M.J., Empirical evaluation of the Tarantula automatic fault localization technique (2005) Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering (ASE 2005), pp. 273-282. , ACM, New York, NY; Jones, J.A., Harrold, M.J., Bowring, J.F., Debugging in parallel (2007) 2007 ACM International Symposium on Software Testing and Analysis, ISSTA'07, pp. 16-26. , DOI 10.1145/1273463.1273468, Proceedings of the 2007 ACM International Symposium on Software Testing and Analysis, ISSTA'07; Jiang, B., Zhang, Z., Chan, W.K., Tse, T.H., Chen, T.Y., How well does test case prioritization integrate with statistical fault localization? (2012) Information and Software Technology, 54 (7), pp. 739-758; Korel, B., Laski, J., Dynamic program slicing (1988) Information Processing Letters, 29 (3), pp. 155-163; Liu, C., Fei, L., Yan, X., Midkiff, S.P., Han, J., Statistical debugging: A hypothesis testing-based approach (2006) IEEE Transactions on Software Engineering, 32 (10), pp. 831-848; Liu, M.-H., Gao, Y.-F., Shan, J.-H., Liu, J.-H., Zhang, L., Sun, J.-S., An approach to test data generation for killing multiple mutants (2006) IEEE International Conference on Software Maintenance, ICSM, pp. 113-122. , DOI 10.1109/ICSM.2006.13, 4021328, ICSM 2006 Proceedings - 22nd IEEE International Conference on Software Maintenance; Liblit, B., Naik, M., Zheng, A.X., Aiken, A., Jordan, M.I., Scalable statistical bug isolation (2005) Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2005), pp. 15-26. , ACM, New York, NY; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D Thesis Department of Computer Science University of Pittsburgh, July; Memon, A.M., http://www.cs.umd.edu/~atif/TerpOfficeWeb/TerpOfficeV3.0/index.html; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 256-267; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Masri, W., Abou-Assi, R., Cleansing test suites from coincidental correctness to enhance fault-localization (2010) Proceedings of the 3rd International Conference on Software Testing, Verification and Validation (ICST 2010), pp. 165-174. , Paris, France; Masri, W., Abou-Assi, R., El-Ghali, M., Al-Fatairi, N., An empirical study of the factors that reduce the effectiveness of coverage-based fault localization (2009) Proceedings of International Workshop on Defects in Large Software Systems (DEFECTS 2009), pp. 1-5. , Chicago IL; Offutt, A.J., (1988) Automatic Test Data Generation, , Ph.D Thesis, Georgia Institute of Technology, Atlanta, GA, USA; Offutt, A.J., A mutation carol: Past present and future (2011) Information and Software Technology, 53 (10), pp. 1098-1107; Offutt, A.J., Jin, Z., Pan, J., The dynamic domain reduction procedure for test data generation (1999) Software-Practice and Experience, 29 (2), pp. 167-173; Papadakis, M., Malevris, N., Mutation based test case generation via a path selection strategy (2012) Information and Software Technology, 54 (9), pp. 915-932; Parnin, C., Orso, A., Are automated debugging techniques actually helping programmers? (2011) Proceedings of the 2011 International Symposium on Software Testing and Analysis (ISSTA 2011), pp. 199-209. , Toronto, Ontario, Canada; Renieris, M., Reiss, S.P., Fault localization with nearest neighbor queries (2003) Proceedings of the 18th IEEE/ACM International Conference on Automated Software Engineering (ASE1 2003), pp. 30-39. , IEEE Computer Society, Los Alamitos, CA; Santelices, R., Chittimalli, P.K., Apiwattanapong, T., Orso, A., Harrold, M.J., Testsuite augmentation for evolving software (2008) Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE 2008), pp. 218-227. , Washington, DC, USA; Vessey, I., Expertise in debugging computer programs: A process analysis (1985) International Journal of Man-Machine Studies, 23 (5), pp. 459-494; Voas, J.M., PIE: A dynamic failure-based technique (1992) IEEE Transactions on Software Engineering, 18 (8), pp. 717-727; Weiser, M., Program slicing (1982) IEEE Transactions on Software Engineering, 10 (4), pp. 352-357; Wong, W.E., Qi, Y., BP neural network-based effective fault localization (2009) International Journal of Software Engineering and Knowledge Engineering, 19 (4), pp. 573-597; Wong, W.E., Shi, Y., Qi, Y., Golden, R., Using an RBF Neural Network to Locate Program Bugs Proceedings of the 19th IEEE International Symposium on Software Reliability Engineering (ISSRE 2008), pp. 27-38. , Seattle Washington, USA, November 2008; Wang, T., Roychoudhury, A., Automated path generation for software fault localization (2005) Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering (ASE 2005), pp. 347-351. , Long Beach, CA, November; Xu, Z., Kim, Y., Kim, M., Rothermel, G., Cohen, M.B., Directed test suite augmentation: Techniques and tradeoffs (2010) Proceedings of the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2010), pp. 257-266. , November; Yuan, X., Cohen, M., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Transactions on Software Engineering, 36 (1), pp. 81-95; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Information and Software Technology, 52 (5), pp. 559-575; Yoo, S., Harman, M., (2008) Test Data Augmentation: Generating New Test Data from Existing Test Data, , Technical Report TR-08-04, Dept. of Computer Science, King's College London July; Yu, Z., Hu, H., Bai, C.G., Cai, K.Y., Wong, W.E., GUI software fault localization using n-gram analysis (2011) Proceedings of the 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), pp. 325-332. , 10-12 November; Yu, Y., Jones, J.A., Harrold, M.J., An empirical study of the effects of test-suite reduction on fault localization (2008) Proceedings of the 30th International Conference on Software Engineering (ICSE 2008), pp. 201-210. , ACM, New York, NY; Zeller, A., Yesterday, my program worked Today, it does not why? (1999) SIGSOFT Software Engineering Notes, 24 (6), pp. 253-267; Zeller, A., Isolating cause-effect chains from computer programs (2002) Proceedings of the 10th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2002), pp. 1-10. , November; Zhang, X., Gupta, N., Gupta, R., Locating faults through automated predicate switching Proceedings of the 28th International Conference on Software Engineering (ICSE 2006), pp. 272-281. , Shanghai, May 2006; Zhang, X., Gupta, N., Gupta, R., Locating faulty code by multiple points slicing (2007) Software - Practice and Experience, 37 (9), pp. 935-961. , DOI 10.1002/spe.795; Zhang, Z., Jiang, B., Chan, W.K., Tse, T.H., Wang, X., Fault localization through evaluation sequences (2010) Journal of Systems and Software 83, 2, pp. 174-187","Yu, Z.; School of Automation Science and Electrical Engineering, , Beijing 100191, China; email: yuzhongxing88@gmail.com",,,"Elsevier B.V.",,,,,09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-84885183613
"Datchayani M., Arockia Xavier Annie R., Yogesh P., Zacharias B.","55511246900;55441021800;36643137400;55511437600;","Test case generation and reusing test cases for GUI designed with HTML",2012,"Journal of Software","7","10",,"2269","2277",,8,"10.4304/jsw.7.10.2269-2277","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870526576&doi=10.4304%2fjsw.7.10.2269-2277&partnerID=40&md5=411bfd77425868c5440e6825052aab8f","Department of Information Technology, Valliammai Engineering College, SRM Nagar, Kattankulathur, Chennai, India; Department of Computer Science and Engineering, College of Engineering, Anna University, Chennai, India; Department of Information Science and Technology, College of Engineering, Anna University, Chennai, India; Wipro Consulting Services, Sholinganallur, Chennai - 600 119, India","Datchayani, M., Department of Information Technology, Valliammai Engineering College, SRM Nagar, Kattankulathur, Chennai, India; Arockia Xavier Annie, R., Department of Computer Science and Engineering, College of Engineering, Anna University, Chennai, India; Yogesh, P., Department of Information Science and Technology, College of Engineering, Anna University, Chennai, India; Zacharias, B., Wipro Consulting Services, Sholinganallur, Chennai - 600 119, India","Graphical User Interface (GUI) is pervasive to the extent that half of the code of the software systems written today is to produce the required GUIs. Test case generation for GUI based software systems is complex as it is necessary to include all possible sequences of events that may be exercised by the widget or end-user. The major issue with GUI based systems is that even a single change in the GUI may make the entire suite of existing test cases unusable. Hence a solution to analyze the existing test cases (i.e. the test cases that were already generated before modification of GUI) and identify the test cases that have become unusable and that are reusable in the context of the modified GUI is provided here. Test cases that are reusable are retained and the test cases that have become unusable are subjected to transformations. These transformations make the unusable test cases reusable through the construction of Event Flow Graph (EFG) generated and parsing EFG using Depth First Search (DFS) to identify reusable and unusable test cases. © 2012 ACADEMY PUBLISHER.","Depth first search; Event flow graph; Graphical user interface; Reusable test cases; Test case generation; Unusable test cases","Depth first search; Event-flow graph; Reusable test case; Test case; Test case generation; Computer software; Flow graphs; Graphic methods; Graphical user interfaces; Testing",,,,,,,,"Ariss, E.O., Dianxiang, X., Dandey, S., Vender, B., McClean, P., Slator, B., A systematic capture and replay strategy for testing complex GUI based Java applications (2010) TNG '10 Proceedings of the Seventh International Conference On Information Technology: New Generations, pp. 1038-1043. , editors, Washington, DC, USA: IEEE Computer Society, 2010; Gerrard, P., Testing GUI Applications (1997) Eurostar Conference, , http://gerrardconsulting.com/?q=node/514, [internet]. Edinburgh, UK, Nov, [updated 2010; cited 2010 Dec 11]. Available from:; Hower, R., (1996) Software QA and Testing, , http://www.softwareqatest.com/qatfaql.html, [Internet], [place unknown, Nov 22 [updated 2011 Jan 3; cited 2011 Jan 9]. Available from; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE J Computer, 35 (8), pp. 87-88. , Aug; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions On Software Engineering and Methodology (TOSEM), 18 (2). , Nov; Memon, A.M., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software Journal of Software Maintenance: Research and Practice, 17 (1), pp. 27-64. , Special issue: 2003 International conference on software maintenance: The architectural evolution of systems, Jan; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical, G.U.I., Test case generation using automated planning (2001) IEEE Transactions On Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions On Software Engineering, 31 (10), pp. 884-896; Murgia, A., Wolff, R., Steptoe, W., Sharkey, P., Roberts, D., Guimaraes, E., Steed, A., Rae, J., (2008) A Tool For Replay and Analysis of Gaze-enhanced Multiparty Sessions Captured In Immersive Collaborative Environments, pp. 252-258. , editors, 12th IEEE/ACM International Symposium Distributed Simulation and Real-Time Applications; 2008; Washington, DC. USA: IEEE Computer Society; Poston, R.M., (1997) Automating Specification-based Software Testing, p. 272. , 1st. ed. IEEE Computer Society, CA, USA: IEEE Computer Society Press; (2003) Vyom Network, , http://www.onestoptesting.com, [Internet], [place unknown], [cited 2010 Aug 23]. Available from:; Weiss, M.A., (1997) Data Structures and Algorithm Analysis In C, p. 511. , 2nd. ed. Boston, USA: Addison-Wesley Longman Publishing Co., Inc; Xie, Q., Memon, A.M., Model-Based testing of community-driven open-source GUI Applications (2006) Proceeding ICSM '06 Proceedings of the 22nd IEEE International Conference On Software Maintenance, p. 145. , editors, Washington DC, USA; c, 2006","Datchayani, M.; Department of Information Technology, SRM Nagar, Kattankulathur, Chennai, India; email: m.dhaksh@gmail.com",,,,,,,,1796217X,,,,"English","J. Softw.",Article,"Final","",Scopus,2-s2.0-84870526576
"Naseer H., Rauf A.","55746963200;57194106980;","Validation of ontology based test case generation for graphical user interface",2012,"2012 15th International Multitopic Conference, INMIC 2012",,, 6511486,"465","469",,4,"10.1109/INMIC.2012.6511486","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84878194285&doi=10.1109%2fINMIC.2012.6511486&partnerID=40&md5=0a89676e014f334764c63b69594a8059","Department of Computer Science and Software Engineering, International Islamic University Islamabad, Pakistan","Naseer, H., Department of Computer Science and Software Engineering, International Islamic University Islamabad, Pakistan; Rauf, A., Department of Computer Science and Software Engineering, International Islamic University Islamabad, Pakistan","Testing is an important phase during the development cycle of software. Generating test cases is an important activity during this phase. TCG for GUI is a least focused area and the techniques which are being used in Command Line Interface do not fit here. One of the means to formally represent knowledge is through ontology. It represents domain information as a set of concepts and relationship among them. Ontology based GUI testing is a new branch of testing. To validate the framework for generating test case based on ontology an experiment has been conducted. © 2012 IEEE.","Command Line Interface; Graphical User Interface; GUI Testing; Ontology; Software Development Life Cycle; Test Case Generation; Validation","Command line interface; GUI testing; Software development life cycle; Test case generation; Validation; Ontology; Software testing; Graphical user interfaces",,,,,,,,"Tian, J., (2005) Software Quality Engineering: Testing, Quality Assurance and Quantifiable Improvement, , IEEE Computer Society; Prasanna, M., Sivanandam, S.N., Venkatesan, R., Sundarrajan, R., A Survey on Automatic Test Case Generation (2005) Academic Open Internet Journal, 15; Memon, A.M., Employing User Profiles to Test A New Version Of A GUI Component In Its Context Of Use (2006) Software Quality Journal, 14, pp. 359-377. , Springer; Yuan, X., Memon, A.M., Generating Event Sequence-Based Test Cases Using GUI Runtime State Feedback (2010) IEEE Transactions on Software Engineering, 36 (1); Rauf, A., Anwar, S., Ramzan, M., Ur Rehman, S., Shahid, A.A., Ontology Driven Semantic Annotation Based GUI Testing (2010) 6th International Conference on Emerging Technologies (ICET), pp. 261-264. , IEEE; Noy, N.F., McGuinness, D.L., Ontology Development 101: A Guide to Creating Your First Ontology; Ding, Y., Foo, S., Ontology research and development. Part I - A review of ontology generation (2002) Journal of Information Science, 28 (2), pp. 123-136; http://wikipedia.org; Siy, H., Wu, Y., An Ontology to Support Empirical Studies in Software Engineering (2009) International Conference on Computing, Engineering and Information (ICC), pp. 12-15. , IEEE; Li, H., Chen, F., Yang, H., Guo, H., Chu, W.C.-C., Yang, Y., An Ontology-Based Approach for GUI Testing (2009) IEEE International Computer Software and Applications Conference (COMPSAC), 2009. COMPSAC'09. 33rd Annual IEEE International, 1, pp. 632-633; Fraser, G., Gargantini, A., An Evaluation of Specification Based Test Generation Techniques Using Model Checkers (2009) Testing: Academic and Industrial Conference - Practice and Research Techniques (TAIC PART), pp. 72-81. , IEEE; Kelley, K., (2009) Automated Test Case Generation from Correct and Complete System Requirement Models, , IEEE; http://protegewiki.stanford.edu/index.php/Protege_Ontology_Library; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI Test Case Generation Using Automated Planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Yuan, X., Memon, A.M., Iterative Execution-Feedback Model-Directed GUI Testing (2010) Information and Software Technology, 52, pp. 559-575. , ELSEVIER; Memon, A.M., Pollack, M.E., Soffa, M.L., (1999) Plan Generation for GUI Testing, , American Association for Artificial Intelligence; Elsaka, E., Moustafa, W.E., Nguyen, B., Memon, A., Using Methods & Measures from Network Analysis for GUI Testing (2010) Third International Conference on Software Testing, Verification, and Validation Workshops, pp. 240-246. , IEEE; Memon, A.M., Strecker, J., Accounting for Defect Characteristics in Evaluations of Testing Techniques (2010) ACM Transactions on Embedded Computing Systems, 9 (4); Gerrard, P., Testing GUI Applications (1997) EuroSTAR, pp. 24-28; Huo, Q., Zhu, H., (2005) Developing a Software Testing Ontology in UML for a Software Growth Environment of Web-Based Applications; Yuan, X., Cohen, M.B., Memon, A.M., GUI Interaction Testing: Incorporating Event Context (2010) IEEE Transactions on Software Engineering, , IEEE Computer Society, Los Alamitos, CA, USA; http://en.wikipedia.org/wiki/Software_testing; (2000) Software Engineering, , 6th Edition, Ian Sommerville; Kamde, P.M., Nandavadekar, V.D., Pawar, R.G., (2006) Value of Test Cases in Software Testing, , IEEE; Linn, C., A Metric Framework for Quantifying Semantic Reliability in Shared Ontology Environments (2004) Proceedings of the IEEE/WIC/ACM International Conference on Web Intelligence (WI'04), , IEEE; De Bruijn, J., Using Ontologies Enabling Knowledge Sharing and Reuse on the Semantic Web (2003) DERI Technical Report DERI-2003-10-29, , October; Khan, L., Luo, F., Ontology Construction for Information Selection (2002) Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence (ICTAI'02), , IEEE; Looker, N., Gwynne, B., Xu, J., Munro, M., An Ontology-Based Approach for Determining the Dependability of Service-Oriented Architectures (2005) Proceedings of the 10th IEEE International Workshop on Object-Oriented Real-Time Dependable Systems (WORDS'05), , IEEE; Shim, J., Lee, H., Automatic Ontology Generation Using Extended Search Keywords (2008) 4th International Conference on Next Generation Web Services Practices, , IEEE; Lee, C.-S., Jian, Z.-W., Huang, L.-K., A Fuzzy Ontology and Its Application to News Summarization (2005) IEEE Transactions on Systems, Man, and Cybernetics - Part B: CYBERNETICS, 35 (5). , October; Kof, L., Gacitua, R., Rouncefield, M., Sawyer, P., Ontology and Model Alignment as a Means for Requirements Validation IEEE Fourth International Conference on Semantic Computing, 2010; Bianchi, D., Poggi, A., Ontology Based Automatic Speech Recognition and Generation for Human-Agent Interaction (2004) Proceedings of the 13th IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises (WET ICE'04), , IEEE; Xu, L., Yuan, Q., Wu, J., Liu, C., (2009) Ontology-based Web Service Robustness Test Generation, , IEEE; Li, H., Guo, H., Chen, F., Yang, H., Yang, Y., Using Ontology To Generate Test Cases For GUI Testing (2011) International Journal of Computer Applications in Technology, 42 (2), pp. 213-224","Department of Computer Science and Software Engineering, Pakistan",,,,"15th IEEE International Multitopic Conference, INMIC 2012","13 December 2012 through 15 December 2012","Islamabad",97004,,9781467322508,,,"English","Int. Multitopic Conf., INMIC",Conference Paper,"Final","",Scopus,2-s2.0-84878194285
"Bae G., Rothermel G., Bae D.-H.","37071921000;7003915481;17433682600;","On the relative strengths of model-based and dynamic event extraction-based GUI testing techniques: An empirical study",2012,"Proceedings - International Symposium on Software Reliability Engineering, ISSRE",,, 6405366,"181","190",,11,"10.1109/ISSRE.2012.18","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84876366319&doi=10.1109%2fISSRE.2012.18&partnerID=40&md5=a76b73bc1b036ad2ba1bde5c908a8aaf","Department of Computer Science, KAIST, Daejeon, South Korea; Division of Web Science and Technology, KAIST, Daejeon, South Korea; Department of Computer Science, University of Nebraska-Lincoln, Lincoln, NE, United States","Bae, G., Department of Computer Science, KAIST, Daejeon, South Korea; Rothermel, G., Division of Web Science and Technology, KAIST, Daejeon, South Korea, Department of Computer Science, University of Nebraska-Lincoln, Lincoln, NE, United States; Bae, D.-H., Department of Computer Science, KAIST, Daejeon, South Korea","Many software systems rely on graphical-user interfaces (GUIs) to support user interactions. The correctness of these GUIs affects the overall quality of the systems, and thus, it is important that GUIs be tested. To support such testing, GUI test case generation techniques based on graph models such as event flow graphs (EFGs) have been used to generate test cases in the form of sequences of events. Models, however, are abstractions of dynamic behavior and may not accurately reflect actual system behavior; thus, test case generation techniques based on models may create nonexecutable test cases and miss important events. Test case generation techniques based on dynamic event extraction-based approaches, in contrast, may suffer less from these effects. As a consequence, we expect that the two approaches will differ in terms of cost and effectiveness. In this paper, we report the results of an empirical study comparing the cost and effectiveness of model-based and dynamic event extraction-based test case generation approaches. Our results show that event extraction-based approaches, though more expensive than model-based approaches, are indeed more effective in terms of their ability to achieve code coverage and to cover events, but at additional cost, with implications for both researchers and practitioners. © 2012 IEEE.","Dynamic event extraction-based testing; GUI testing; Model-based testing; Test case generation","Dynamic behaviors; Dynamic events; Empirical studies; GUI testing; Model based approach; Model based testing; Relative strength; Test case generation; Costs; Data mining; Graphical user interfaces; Software reliability; Testing",,,,,,,,"Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009) Int'l. Conf. Softw. Eng., pp. 408-418; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback (2010) IEEE Trans. Softw. Eng., 99 (1); Bertolini, C., Peres, G., D'Amorim, M., Mota, A., An empirical evaluation of automated black box testing techniques for crashing GUIs (2009) Int'l. Conf. Softw. Test., pp. 21-30; Bauersfeld, S., Wappler, S., A metaheuristic approach to test sequence generation for applications with a GUI (2011) Search Based Software, LNCS 6956, pp. 173-187; Mariani, L., Pezze, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) Int'l. Conf. Softw. Test., pp. 81-90; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Int'l. Symp. Softw. Rel. Eng., p. 110; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Int'l. Symp. Softw. Rel. Eng., pp. 34-43; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Meth.; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Conf. Rev. Eng., pp. 260-269; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Gove, R., Faytong, J., Identifying infeasible GUI test cases using support vector machines and induced grammars (2011) Int'l. Symp. Softw. Test., Verif., Val. Workshops, pp. 202-211; Huang, S., Cohen, M., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Int'l. Conf. Softw. Test.; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Trans. Softw. Eng., 37 (4), pp. 559-574. , Mar; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Info. Softw. Techn., 52 (5), pp. 559-575; Bertolini, C., Mota, A., Aranha, E., Ferraz, C., GUI testing techniques evaluation by designed experiments (2010) Int'l. Conf. Softw. Test., pp. 235-244; Xie, Q., Memon, A., Studying the characteristics of a 'good' GUI test suite (2006) Int'l. Symp. Softw. Rel. Eng.; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) SIGCHI Conf. Human Factors Comp. Sys., pp. 244-251; Gross, F., Fraser, G., Zeller, A., EXSYST: Search-based GUI testing (2012) Int'l. Conf. Softw. Eng., Demo. Track; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD Thesis, University of Pittsburgh; Myers, G.J., (2004) The Art of Software Testing, , 2nd ed. John Wiley & Sons; Nyman, N., Using monkey test tools (2000) Softw Test. Qual. Eng. Mag., pp. 18-21; Whittaker, J.A., Stochastic software testing (1997) Annals Soft. Eng., 4, pp. 115-131; Forrester, J.E., Miller, B.P., An empirical study of the robustness of windows NT applications using random testing (2000) Wind. Sys. Symp., pp. 59-68; SourceForge.net: GUITAR Home Page - Guitar, , http://guitar.sourceforge.net; http://cobertura.sourceforge.net/; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Meth., 16 (1), p. 4; Qu, X., Cohen, M.B., Rothermel, G., Configuration-aware regression testing (2008) Int'l. Symp. Softw. Test. Anal., p. 75","Bae, G.; Department of Computer Science, , Daejeon, South Korea; email: ggbae@cs.kaist.ac.kr",,,,"2012 IEEE 23rd International Symposium on Software Reliability Engineering, ISSRE 2012","27 November 2012 through 30 November 2012","Dallas, TX",96616,10719458,9780769548883,PSSRF,,"English","Proc. Int. Symp. Softw. Reliab. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-84876366319
"Arlt S., Podelski A., Bertolini C., Schäf M., Banerjee I., Memon A.M.","47060904400;7003653406;56274935100;35186406200;7004506086;35599876500;","Lightweight static analysis for GUI testing",2012,"Proceedings - International Symposium on Software Reliability Engineering, ISSRE",,, 6405378,"301","310",,39,"10.1109/ISSRE.2012.25","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84876355729&doi=10.1109%2fISSRE.2012.25&partnerID=40&md5=09a24d457fa9184759ce5fa601d449b9","Albert-Ludwigs-Universität Freiburg, Germany; Federal University of Pernambuco, Brazil; United Nations University Macau, Macau; University of Maryland, United States","Arlt, S., Albert-Ludwigs-Universität Freiburg, Germany; Podelski, A., Albert-Ludwigs-Universität Freiburg, Germany; Bertolini, C., Federal University of Pernambuco, Brazil; Schäf, M., United Nations University Macau, Macau; Banerjee, I., University of Maryland, United States; Memon, A.M., University of Maryland, United States","GUI testing is an active research area. The open challenge is the judicious generation of event sequences (an event sequence encodes a user interaction). A major advance in this direction is the use of a black-box model to systematically generate event sequences that are executable on the GUI. The black-box model can be, e.g., an Event Flow Graph (EFG) or an Event Sequence Graph (ESG). In this paper we propose a new approach to select relevant event sequences among the event sequences generated by a blackbox model. We express the relevance of an event sequence by a precisely defined dependency between a fixed number of events in the event sequence. Departing from a pure blackbox approach we apply a static analysis to the bytecode of the application. This allows us to infer a dependency graph, which we call Event Dependency Graph (EDG). We use the EDG together with a black-box model to construct a set of relevant event sequences among the executable ones. We have implemented our approach in a new tool. We evaluate the approach on four open source GUI applications. With the specific choice of a lightweight static analysis, the approach scales to large applications and, at the same time, leads to an informed selection of event sequences. Using our approach we are able to find previously undetected bugs. © 2012 IEEE.","Black-box testing; GUI testing; Static analysis; Test automation","Black box approach; Dependency graphs; Event sequence graphs; Event-flow graph; GUI applications; GUI testing; Test Automation; User interaction; Black-box testing; Software reliability; Static analysis; Graphical user interfaces",,,,,,,,"Arlt, S., Borromeo, P., Schäf, M., Podelski, A., Parameterized GUI tests (2012) ICTSS; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) ISSRE, pp. 34-43; Belli, F., Linschulte, M., Budnik, C.J., Stieber, H.A., Fault detection likelihood of test sequence length (2010) ICST, pp. 402-411; Bertolini, C., Mota, A., Aranha, E., Calibrating probabilistic GUI testing models based on experiments and survival analysis (2010) ISSRE, pp. 319-328; Bertolini, C., Mota, A., Aranha, E., Ferraz, C., GUI testing techniques evaluation by designed experiments (2010) ICST, pp. 235-244; Ganov, S.R., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing GUI applications (2009) ICFEM, pp. 69-87; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) PLDI, pp. 213-223; Gross, F., Fraser, G., Zeller, A., Search-based system testing: High coverage, no false alarms (2012) ISSTA, pp. 67-77; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) ICST, pp. 245-254; Lindholm, T., Yellin, F., (1999) Java Virtual Machine Specification, , Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2nd edition; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., AutoBlackTest: Automatic black-box testing of interactive applications (2012) ICST, pp. 81-90; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test., Verif. Reliab., 17 (3), pp. 137-157; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE, pp. 260-269; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing? (2003) ASE, pp. 164-173; Paiva, A.C.R., Faria, J.C.P., Mendes, P.M.C., Reverse engineered formal models for GUI testing (2007) FMICS, pp. 218-233; Silva, J.C., Silva, C.E., Gonçalo, R.D., Saraiva, J., Campos, J.C., The GUISurfer tool: Towards a language independent approach to reverse engineering GUI code (2010) EICS, pp. 181-186; Tuglular, T., Muftuoglu, C.A., Belli, F., Linschulte, M., Event-based input validation using design-by-contract patterns (2009) ISSRE, pp. 195-204; White, L.J., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) ISSRE, pp. 110-123; White, L.J., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) ISSRE, pp. 54-65; Yuan, X., Cohen, M.B., Memon, A.M., Covering array sampling of input event sequences for automated gui testing (2007) ASE, pp. 405-408; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) ICSE, pp. 396-405; Zhang, S., Lü, H., Ernst, M.D., Finding errors in multithreaded GUI applications (2012) ISSTA, pp. 243-253; Zhang, S., Saff, D., Bu, Y., Ernst, M.D., Combined static and dynamic automated test generation (2011) ISSTA, pp. 353-363","Arlt, S.; Albert-Ludwigs-Universität FreiburgGermany",,,,"2012 IEEE 23rd International Symposium on Software Reliability Engineering, ISSRE 2012","27 November 2012 through 30 November 2012","Dallas, TX",96616,10719458,9780769548883,PSSRF,,"English","Proc. Int. Symp. Softw. Reliab. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84876355729
"Cohen M.B., Huang S., Memon A.M.","8719004300;56140320500;35599876500;","AutoInSpec: Using missing test coverage to improve specifications in GUIs",2012,"Proceedings - International Symposium on Software Reliability Engineering, ISSRE",,, 6405373,"251","260",,9,"10.1109/ISSRE.2012.33","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84876349890&doi=10.1109%2fISSRE.2012.33&partnerID=40&md5=5e87a16149c672a4438321f343a158c2","University of Nebraska-Lincoln, Department of Computer Science and Engineering, Lincoln, NE 68588-0115, United States; University of Maryland, Department of Computer Science, College Park, MD 20742, United States","Cohen, M.B., University of Nebraska-Lincoln, Department of Computer Science and Engineering, Lincoln, NE 68588-0115, United States; Huang, S., University of Nebraska-Lincoln, Department of Computer Science and Engineering, Lincoln, NE 68588-0115, United States; Memon, A.M., University of Maryland, Department of Computer Science, College Park, MD 20742, United States","Developers of a software's graphical user interface (GUI) often fail to document the interface specifications. Without these, models used for automated test generation and execution remain imperfect and incomplete. This leads to unexpected behavior that creates unrecoverable situations for test harnesses, and missed coverage. In this paper, we present AutoInSpec, a technique to infer an important class of specifications, temporal and state-based invariants between GUI events that have been incorrectly modeled. Unlike existing specification mining approaches that require full execution traces, or source code, and that mine all invariants, we simplify the problem. We guide AutoInSpec with coverage criteria and use a previously developed repair framework that builds coverage-adequate test suites, removing unexecutable sub-sequences from consideration. These failing sub-sequences are input to a logic-based inference engine, armed with known invariant templates, to obtain the missing specifications. We validate AutoInSpec on a set of well studied GUI applications. © 2012 IEEE.","Covering arrays; Genetic algorithm; GUI testing; Invariants; Specification mining","Automated test generations; Coverage criteria; Covering arrays; Graphical user interfaces (GUI); GUI testing; Interface specification; Invariants; Specification mining; Genetic algorithms; Repair; Software reliability; Specifications; Graphical user interfaces",,,,,,,,"Belli, F., Beyazit, M., Memon, A., Testing is an event-centric activity (2012) Intl. Conf. on Soft. Secur. and Reliab., (SERE), pp. 198-206; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Soft. Testing, Verif. Reliab., 17 (3), pp. 137-157; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study: Research articles (2006) Softw. Test. Verif. Reliab., 16 (1), pp. 3-32. , Mar; White, L., Almezen, H., Sastry, S., Firewall regression testing of GUI sequences and their interactions (2003) Intl. Conf. on Soft. Maint., (ICSM), pp. 398-408; Doan, T.-A., Lo, D., Maoz, S., Khoo, S.-C., LM: A miner for scenario-based specifications (2010) Intl. Conf. on Soft. Eng., (ICSE), pp. 319-320; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., Perracotta: Mining temporal API rules from imperfect traces (2006) Intl. Conf. on Soft. Eng., (ICSE), pp. 282-291; Lo, D., Maoz, S., Scenario-based and value-based specification mining: Better together (2010) Intl. Conf. on Aut. Soft. Eng., (ASE), pp. 387-396; Dallmeier, V., Knopp, N., Mallon, C., Fraser, G., Hack, S., Zeller, A., Automatically generating test cases for specification mining (2012) IEEE Trans. on Soft. Eng., 38, pp. 243-257; Perkins, J.H., Ernst, M.D., Efficient incremental algorithms for dynamic detection of likely invariants (2004) SIGSOFT Soft. Eng. Notes, 29 (6), pp. 23-32; Ernst, M.D., Czeisler, A., Griswold, W.G., Notkin, D., Quickly detecting relevant program invariants (2000) Intl. Conf. on Soft. Eng., (ICSE), pp. 449-458; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Intl. Conf. Soft. Test, (ICST), pp. 245-254. , April; Yuan, X., Cohen, M., Memon, A., GUI interaction testing: Incorporating event context (2011) IEEE Trans. on Soft. Eng., 37 (4), pp. 559-574; Cohen, M.B., Colbourn, C.J., Gibbons, P.B., Mugridge, W.B., Constructing test suites for interaction testing (2003) Intl. Conf. on Soft Eng., (ICSE), pp. 38-48; (2009) GUITAR - A GUI Testing FrAmewoRk, , http://guitar.sourceforge.net, website; Garvin, B.J., Cohen, M.B., Dwyer, M.B., An improved meta-heuristic search for constrained interaction testing (2009) Symp. on Search Based Soft. Eng. (SSBSE), pp. 13-22. , May; Gabel, M., Su, Z., Symbolic mining of temporal specifications (2008) Intl. Conf. on Soft. Eng., (ICSE), pp. 51-60; Ramanathan, M.K., Grama, A., Jagannathan, S., Path-sensitive inference of function precedence protocols (2007) Intl. Conf. on Soft. Eng., (ICSE), pp. 240-250; Krka, I., Brun, Y., Popescu, D., Garcia, J., Medvidovic, N., Using dynamic execution traces and program invariants to enhance behavioral model inference (2010) Intl. Conf. on Soft. Eng., (ICSE), pp. 179-182; Lorenzoli, D., Mariani, L., Pezzè, M., Automatic generation of software behavioral models (2008) Intl. Conf. on Soft. Eng., (ICSE), pp. 501-510; Cobb, J., Jones, J.A., Kapfhammer, G.M., Harrold, M.J., Dynamic invariant detection for relational databases (2011) Intl. Work. on Dyn. Anal., (WODA), pp. 12-17; Wasylkowski, A., Zeller, A., Mining temporal specifications from object usage (2009) Intl. Conf. on Aut. Soft. Eng., (ASE), pp. 295-306; Livshits, B., Zimmermann, T., (2011) DynaMine: Finding Usage Patterns and their Violations by Mining Software Repositories, , CRC Press; Xie, T., Pei, J., MAPO: Mining API usages from open source repositories (2006) Intl. Work. on Min. Soft. Repo., (MSR), pp. 54-57; Dwyer, M.B., Robby, O.T., Visser, W., Analyzing interaction orderings with model checking (2004) Intl. Conf. on Aut. Soft. Eng., (ASE), pp. 154-163","Cohen, M.B.; University of Nebraska-Lincoln, , Lincoln, NE 68588-0115, United States; email: myra@cse.unl.edu",,,,"2012 IEEE 23rd International Symposium on Software Reliability Engineering, ISSRE 2012","27 November 2012 through 30 November 2012","Dallas, TX",96616,10719458,9780769548883,PSSRF,,"English","Proc. Int. Symp. Softw. Reliab. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84876349890
"Kull A.","25927243900;","Automatic GUI model generation: State of the art",2012,"Proceedings - 23rd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2012",,, 6405443,"207","212",,10,"10.1109/ISSREW.2012.23","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84873399003&doi=10.1109%2fISSREW.2012.23&partnerID=40&md5=aa3a1f7284da19c6c6a5618a1fa8af28","Elvior LLC, Tallinn, Estonia; University of Maryland, Dept. of Computer Science, College Park, MD, United States","Kull, A., Elvior LLC, Tallinn, Estonia, University of Maryland, Dept. of Computer Science, College Park, MD, United States","Modeling has been one of the most significant obstacles to why model-based testing has not been taken into use by industry on a large scale. Therefore, generating models automatically is an attractive way of thinking. In well-structured application domains, such as graphical user interface (GUI), this method can be used successfully. This paper gives a state-of-the-art overview of GUI model generation methods. The paper analyzes the methods from the point of view of model-based testing of GUI applications, where generated GUI models are used for generating the tests. © 2012 IEEE.","Automatic GUI model generation; GUI model; Model-based testing","GUI applications; Model based testing; Model generation; State of the art; Software reliability; Technical presentations; Graphical user interfaces",,,,,,,,"Moore, M., Rugaber, S., Seaver, P., Knowledge-based user interface migration (1994) Proc. of the 1994 International Conference on Software Maintenance, pp. 72-79; Antoniol, G., Fiutem, R., Merlo, E., Tonella, P., Application and user interface migration from BASIC to Visual C++ (1995) Proc. 11th International Conference on Software Maintenance (ICSM'95); Michail, A., Browsing and searching source code of applications written using a GUI framework (2002) Proc. of the 24th International Conference on Software Engineering (ICSE), pp. 327-337; Stroulia, E., El-Ramly, M., Sorenson, P., From legacy to web through interaction modeling (2002) Proc. 18th IEEE International Conference on Software Maintenance, ICSM; Bouillon, L., Vonderdonckt, J., Souchon, N., Recovering alternative presentation models of a web page with VAQUITA (2002) Proc. CADUI '02, pp. 311-322; Gaeremynck, Y., Bergman, L., Lau, T., MORE for less: Model recovery from visual interfaces for multi-device application design (2003) Proc. 8th International Conference on Intelligent User Interfaces, , January 12-15, 2003, Miami, Florida, USA; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proc. 10th Working Conference on Reverse Engineering, , Nov; Briand, L., Labiche, Y., Leduc, J., Towards the reverse engineering of UML Sequence Diagrams for distributed Java software (2006) IEEE Transactions on Software Engineering, 32 (9), pp. 642-663. , Sept; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , ISBN-13 9780123725011. Elsevier Science & Technology Books; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proc. 29th International Conference on Software Engineering, pp. 396-405. , (Washington, DC, USA), May 23-25, 2007; Paiva, A.C.R., Faria, J.C.P., Mendes, P., Reverse engineering formal models for GUI testing (2007) Proc. 12th International Workshop on Formal Methods for Industrial Critical Systems (FMICS), , Berlin, Germany; Brooks, P., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proc. 22nd IEEE International Conference on Automated Software Engineering, , Washington, DC, USA; Staiger, S., Reverse engineering of graphical user interfaces using static analyses (2007) Proc. 14th Working Conference on Reverse Engineering, , Vancouver, BC, Canada, 29-31 October; Samir, H., Kamel, A., Automated reverse engineering of Java graphical user interfaces for web migration (2007) Proc. ITI 5th International Conference on Information and Communications Technology (ICICT), , Cairo, Egypt, December; Mesbah, A., Van Deursen, A., Invariant-based testing of Ajax user interfaces (2009) Proc. int'L. Conf. on Software Eng. (ICSE); Grilo, A.M.P., Reverse engineering of GUI models for testing (2010) Proc. 5th Iberian Conference on Information Systems and Technologies (CISTI); Silva, J.C., Silva, C.C., Gonçalo, R.D., Saraiva, J., Campos, J.C., The GUISurfer tool: Towards a language independent approach to reverse engineering GUI code (2010) Proc. 2nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 181-186. , Berlin, Germany; Miao, Y., Yang, X., An FSM-based GUI test automation model (2010) Proc. 11th International Conference on Control, Automation, Robotics and Vision (ICARCV 2010), , Singapore, 7-10th December; Aho, P., Menz, N., Räty, T., Schieferdecker, I., Automated Java GUI modeling for model-based testing purposes (2011) Proc. 8th International Conference on Information Technology: New Generations (ITNG 2011), , April 11-13, 2011, Las Vegas, Nevada, USA; Aho, P., Menz, N., Räty, T., Enhancing generated Java GUI models with valid test data (2011) Proc. IEEE Conference on Open Systems (ICOS)","Kull, A.; Elvior LLC, Tallinn, Estonia; email: andres.kull@elvior.com",,,,"23rd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2012","27 November 2012 through 30 November 2012","Dallas, TX",95287,,9780769549286,,,"English","Proc. - Int. Symp. Softw. Reliab. Eng. Workshops, ISSREW",Conference Paper,"Final","",Scopus,2-s2.0-84873399003
"Amalfitano D., Fasolino A.R., Tramontana P., De Carmine S., Imparato G.","25926238800;7006159957;8879739800;55370784300;55574322100;","A toolset for GUI testing of Android applications",2012,"IEEE International Conference on Software Maintenance, ICSM",,, 6405345,"650","653",,38,"10.1109/ICSM.2012.6405345","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84873172993&doi=10.1109%2fICSM.2012.6405345&partnerID=40&md5=06ec3d814fa73b5cdc58836c43d99d48","Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy","Amalfitano, D., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Fasolino, A.R., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Tramontana, P., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; De Carmine, S., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Imparato, G., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy","This paper presents a toolset for GUI testing of Android applications. The toolset is centered on a GUI ripper that systematically explores the GUI structure of an application under test with the aim of firing sequences of user events and exposing failures of the application. The toolset supports the execution of a testing procedure that automatically performs crash testing of subject applications and provides test results made of several artifacts. The paper illustrates some examples of using the toolset for testing real Android applications. © 2012 IEEE.","Android application testing; GUI ripping; testing automation1","Application under tests; Crash testing; Firing sequences; GUI testing; Testing automation; Testing procedure; Toolsets; Computer software maintenance; Graphical user interfaces; Robots",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., De Carmine, S., Memon, A., Using GUI ripping for automated testing of android applications (2012) Proceedings of IEEE/ACM Conference on Automated Software Engineering, ASE; Android Developer Standard Development Kit, , http://developer.android.com/sdk/index.html, last acc. June 27, 2012; Android Developer, Testing Fundamentals, , http://developer.android.com/tools/testing/testing_android. html#Instrumentation, last Accessed June 27, 2012; App Brain Market Statistics, , http://www.appbrain.com/stats/number-of-android-apps, last Accessed June 27, 2012; Emma, a Free Java Coverage Tool, , http://emma.sourceforge.net/, last Accessed June 27, 2012; Memon, A., Banerjee, L., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE 2003), pp. 260-269. , IEEE CS Press; Memon, A., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , Oct; Brice, R., Sampath, S., Memon, A., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Trans. on Software Engineering, 37 (1), pp. 48-64. , Jan; http://code.google.com/p/robotium/, last Accessed June 27, 2012; StatCounter Global Stats, , http://gs.statcounter.com/#mobile_os-ww-monthly-201105-201205, last Accessed June 27, 2012; Takala, T., Katara, M., Harty, J., Experiences of system-level ModelBased GUI testing of an android application 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation, pp. 377-386. , IEEE Comp. Soc. Press; Wasserman, A., Software engineering issues for mobile application development Proc. of the FSE/SDP Workshop on Future of Software Engineering Research, pp. 397-400. , IEEE Comp. Soc. Press","Amalfitano, D.; Dipartimento di Informatica e Sistemistica, Via Claudio 21, 80125 Napoli, Italy; email: domenico.amalfitano@unina.it",,,,"28th IEEE International Conference on Software Maintenance, ICSM 2012","23 September 2012 through 28 September 2012","Riva del Garda,Trento",95267,,9781467323123,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-84873172993
"Feng J., Yin B.-B., Cai K.-Y., Yu Z.-X.","55416290400;16242881200;10039717300;7404345847;","3-way GUI test cases generation based on event-wise partitioning",2012,"Proceedings - International Conference on Quality Software",,, 6319229,"89","97",,3,"10.1109/QSIC.2012.42","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84869107686&doi=10.1109%2fQSIC.2012.42&partnerID=40&md5=b2ed3437ad59bab13ed5b7b4dc7bf6dc","Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China","Feng, J., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China; Yin, B.-B., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China; Cai, K.-Y., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China; Yu, Z.-X., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China","S-Graphical User Interfaces (GUIs) are the most popular Human-Computer-Interfaces in today's software system. GUIs become more and more popular because they can bring the flexibility to users, i.e. the user is not restricted to a fixed ordering of inputs. Exhaustive GUIs testing in terms of covering all potential user interface problems can improve software quality as well as increase confidence to ensure the GUI behaves correctly. However, systematically generating 3-, 4-, 5- and above multi-way test cases remains an open area of research [1]. This work provides a 3-way test case generation technique based on event-wise partitioning. The idea of this technique is very similar to the Category-Partition method, and therefore the complexity and number of the generated test cases can be controlled easily. Experiments in this paper show that the proposed technique is effective in 3-way interaction test case generation. © 2012 IEEE.","Event-driven software; GUI testing; Partition testing; Test-case generation","Event-driven softwares; GUI testing; Interface problems; Partition testing; Potential users; Software Quality; Software systems; Test case; Test case generation; Test cases generation; Computer software selection and evaluation; Graphical user interfaces; Testing; Software testing",,,,,,,,"Yuan, X., Memon, A.M., Using GUI run-time state as feedback togenerate test cases (2007) Proceedings of the 29th International Conference on Software Engineering(ICSE' 07), pp. 396-405. , Minneapolis, MN, USA: IEEEComputer Society; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Information & Software Technology, 52 (5), pp. 559-575; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) International Symposium on Software Reliability Engineering (ISSRE), pp. 34-43; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of FTCS'97, pp. 80-88; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUItest case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Memon, A.M., Soffa, M.L., Pollack, M.E., Coveragecriteria for GUI testing (2001) Proceedings of the 8th EuropeanSoftware Engineering Conference (ESEC) and 9th ACMSIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267; Yuan, X., Memon, A.M., Iterative execution-feedbackmodel-directed GUI testing (2010) Information and SoftwareTechnology, 52 (5), pp. 559-575; Ostrand, T.J., Balcer, M.J., The category-partition method for specifyingand generating functional tests (1988) Communications of the ACM, 331 (6), pp. 676-686. , 331; Miller, W., Spooner, D.L., Automatic generation of floating-point test data (1976) IEEE Transactions on Software Engineering, 2 (3), pp. 223-226; Buttler, D., A short survey of document structure similarity algorithms (2004) International Conference on Internet Computing 2004, pp. 3-9; Schönauer, S., (2003) Efficient Similarity Search in StructuredData, , PhD thesis, Ludwigaximilians Universität München; Bartolini, I., Ciaccia, P., Patella, M., A framework for the comparison for complex patterns (2004) Proceedings of 1stInternationalWorkshop on Pattern Representation and Management(PaRMa'04); Cai, K.Y., Zhao, L., Hu, H., Jiang, C.H., On the test CaseDefinition for GUI testing (2005) Proceedings of the Fifth InternationalConference on Quality Software (QSIC 2005), pp. 19-28; Pham, D.T., Dimov, S.S., Nguyen, C.D., Selection of K in K-means clustering (2004) Proceedings of the Institution of Mechanical Engineering Science, 219, pp. 103-119; Memon, A.M., (2010), http://www.cs.umd.edu/~atif/TerpOfficeWeb/TerpOfficeV3.0/index.html; Zhao, L., Cai, K.Y., Event handler-based coverage for GUI testing (2010) Proceedings of the Fifth InternationalConference on Quality Software (QSIC 2010), pp. 326-331; Memon, A.M., (2010), http://www.cs.umd.edu/~atif/Benchmarks/MD2006b.html","Feng, J.; Department of Automatic Control, , Beijing 100083, China; email: fj_mail@126.com",,"Northwest Polytechnic University;The University of Hong Kong;University of L'Aquila",,"12th International Conference on Quality Software, QSIC 2012","27 August 2012 through 29 August 2012","Xi'an, Shaanxi",93789,15506002,9780769548333,,,"English","Proc. Int. Conf. Qual. Softw.",Conference Paper,"Final","",Scopus,2-s2.0-84869107686
"Amalfitano D., Fasolino A.R., Tramontana P., De Carmine S., Memon A.M.","25926238800;7006159957;8879739800;55370784300;35599876500;","Using GUI ripping for automated testing of android applications",2012,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012 - Proceedings",,,,"258","261",,342,"10.1145/2351676.2351717","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866918123&doi=10.1145%2f2351676.2351717&partnerID=40&md5=b2b1b4ef8f4ac808b765068f2cb00eb4","Dipartimento di Informatica e Sistemistica, Università Federico II Napoli, Napoli, Italy; Department of Computer Science, University of Maryland, College Park, MD, United States","Amalfitano, D., Dipartimento di Informatica e Sistemistica, Università Federico II Napoli, Napoli, Italy; Fasolino, A.R., Dipartimento di Informatica e Sistemistica, Università Federico II Napoli, Napoli, Italy; Tramontana, P., Dipartimento di Informatica e Sistemistica, Università Federico II Napoli, Napoli, Italy; De Carmine, S., Dipartimento di Informatica e Sistemistica, Università Federico II Napoli, Napoli, Italy; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD, United States","We present AndroidRipper, an automated technique that tests Android apps via their Graphical User Interface (GUI). AndroidRipper is based on a user-interface driven ripper that automatically explores the app's GUI with the aim of exercising the application in a structured manner. We evaluate AndroidRipper on an open-source Android app. Our results show that our GUI-based test cases are able to detect severe, previously unknown, faults in the underlying code, and the structured exploration outperforms a random approach. Copyright 2012 ACM.","Android; Testing automation; Testing tools","Android; Automated techniques; Automated testing; Open-source; Test case; Testing automation; Testing tools; Android applications; Android apps; Graphical user interfaces (GUI); Automation; Graphical user interfaces; Robots; Software engineering",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Reverse engineering finite state machines from rich internet applications (2008) Proceedings of the 2008 15th Working Conference on Reverse Engineering (WCRE '08), pp. 69-73. , IEEE Computer Society, USA; Amalfitano, D., Fasolino, A.R., Tramontana, P., A GUI crawling-based technique for android mobile application testing Third International Workshop on TESTing Techniques & Experimentation Benchmarks for Event- Driven Software, pp. 252-261. , IEEE CS Press; (2012) The Developer's Guide, , http://developer.android.com/guide/, last accessed on February 29th; Chu, E., (2011) 10 Billion Android Market Downloads and Counting, , http://androiddevelopers.blogspot.com/2011/12/10-billion-androidmarket- downloads-and.html, last acc. on February 29th, 2012; Fevzi, B., Christof, J.B., Lee, W., Eventbased modelling, analysis and testing of user interactions: Approach and case study: Research articles (2006) Softw. Test. Verif. Reliab., 16 (1), pp. 3-32. , March 2006; Chen, T.Y., Kuo, F.-C., Merkel, R.G., Tse, T.H., Adaptive Random Testing: The ART of test case diversity (2010) J. Syst. Softw., 83 (1), pp. 60-66. , January 2010; Hu, C., Neamtiu, I., Automating GUI testing for Android applications (2011) Proceedings of the 6th International Workshop on Automation of Software Test (AST '11), pp. 77-83. , ACM, New York, NY, USA; (2011) Gartner Says Sales of Mobile Devices Grew 5.6 Percent in Third Quarter of 2011, , http://www.gartner.com/it/page.jsp?id=1848514lastacc, on February 29th, 2012; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application (2010) Proceedings of the 2nd International Conference on Computer Engineering and Technology (ICCET '10), 2, pp. 297-301. , IEEE Computer Society, Washington, DC, USA; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation (ICST '08), pp. 121-130. , IEEE Computer Society, Washington, DC, USA; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE '03), pp. 260-269. , IEEE Computer Society, Washington, DC, USA; Memon, A., Xie, Q., Studying the fault- detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Memon, A.M., An event-flow model of GUI-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , September 2007; (2012) The Developer's Guide, , http://developer.android.com/guide/developing/tools/monkey.html, UI/Application Exerciser Monkey, last accessed on February 29th; (2012) Robotium, , http://code.google.com/p/robotium/, last accessed on February 29th; Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an Android application (2011) Proceedings of the 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation (ICST '11), pp. 377-386. , IEEE Computer Society, Washington, DC, USA; Wasserman, A., Software engineering issues for mobile application development Proc. of the FSE/SDP Workshop on Future of Software Engineering Research, pp. 397-400. , FOSER 2010, IEEE Comp. Soc. Press; Android GUI Ripper Wiki, , http://wpage.unina.it/ptramont/GUIRipperWiki.htm, available at:, last accessed on July 8th, 2012","Amalfitano, D.; Dipartimento di Informatica e Sistemistica, , Napoli, Italy; email: domenico.amalfitano@unina.it",,"IEEE;IEEE Computer Society;Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT);University of Zurich, Department of Informatics",,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012","3 September 2012 through 7 September 2012","Essen",92925,,9781450312042,,,"English","IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84866918123
"Bauersfeld S., Vos T.E.J.","48161076300;8980537100;","GUITest: A java library for fully automated GUI robustness testing",2012,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012 - Proceedings",,,,"330","333",,18,"10.1145/2351676.2351739","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866914697&doi=10.1145%2f2351676.2351739&partnerID=40&md5=a8dd0ef5c2951c123c0db1cbb331bd75","Universitat Politècnica de València, Camino de Vera s/n, Valencia, Spain","Bauersfeld, S., Universitat Politècnica de València, Camino de Vera s/n, Valencia, Spain; Vos, T.E.J., Universitat Politècnica de València, Camino de Vera s/n, Valencia, Spain","Graphical User Interfaces (GUIs) are substantial parts of today's applications, no matter whether these run on tablets, smartphones or desktop platforms. Since the GUI is often the only component that humans interact with, it demands for thorough testing to ensure an efficient and satisfactory user experience. Being the glue between almost all of an application's components, GUIs also lend themselves for system level testing. However, GUI testing is inherently difficult and often involves great manual labor, even with modern tools which promise automation. This paper introduces a Java library called GUITest, which allows to generate fully automated GUI robustness tests for complex applications, without the need to manually generate models or input sequences. We will explain how it operates and present first results on its applicability and effectivity during a test involving Microsoft Word. Copyright 2012 ACM.","Automated testing; Gui testing; Robustness testing","Automated testing; Complex applications; GUI testing; Input sequence; Java library; Manual labors; Microsoft Word; Modern tools; Robustness testing; System level testing; User experience; Graphical user interface (GUIs); Robustness tests; Automation; Java programming language; Software engineering; Graphical user interfaces",,,,,,,,"Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F., A framework for automated testing of javascript web applications (2011) ICSE'11; Bauersfeld, S., Wappler, S., Wegener, J., An approach to automatic input sequence generation for gui testing using ant colony optimization (2011) GECCO'11; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a gui (2011) SSBSE'11; Huang, S., Cohen, M.B., Memon, A.M., Repairing gui test suites using a genetic algorithm (2010) ICST'10; Marchetto, A., Tonella, P., Using search-based algorithms for ajax event sequence generation during testing (2011) Empirical Softw. Engg.; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis, University of Pittsburgh","Bauersfeld, S.; Universitat Politècnica de València, Camino de Vera s/n, Valencia, Spain; email: sbauersfeld@pros.upv.es",,"IEEE;IEEE Computer Society;Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT);University of Zurich, Department of Informatics",,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012","3 September 2012 through 7 September 2012","Essen",92925,,9781450312042,,,"English","IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84866914697
"Belli F., Beyazit M., Memon A.","57200611344;36182172500;35599876500;","Testing is an event-centric activity",2012,"Proceedings of the 2012 IEEE 6th International Conference on Software Security and Reliability Companion, SERE-C 2012",,, 6258472,"198","206",,17,"10.1109/SERE-C.2012.24","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866907629&doi=10.1109%2fSERE-C.2012.24&partnerID=40&md5=892c05a75531cb8983494be9b84e28a7","Faculty of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Paderborn, Germany; Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Belli, F., Faculty of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Paderborn, Germany; Beyazit, M., Faculty of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Paderborn, Germany; Memon, A., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Recent advances in techniques for testing graphical user interfaces (GUIs) enabled to develop workflow models and successfully employ them to generate large numbers of test cases by defining new test adequacy criteria and optimizing test suites for increasing the test efficiency. The key to the success of these event-focused techniques, especially event flow graphs and event sequence graphs, is that they primarily focus on the input space, and model the workflow in simple terms. If necessary, they can also be augmented to model more complex systems and processes to adapt to the needs of test engineers. We now posit that we can extend these techniques to also domains other than GUIs to create a general event-driven paradigm for testing. © 2012 IEEE.","Directed graph; Event; Event-centric; Modeling; State; Testing","Event; Event sequence graphs; Event-centric; Event-flow graph; Input space; State; Test adequacy criteria; Test case; Test efficiency; Test engineers; Workflow models; C (programming language); Directed graphs; Models; Security of data; Software reliability; Testing; Graphical user interfaces",,,,,,,,"Abramovici, M., Breuer, M.A., Friedman, A.D., (1990) Digital Systems Testing and Testable Design, , Computer Science Press; Satish, K.I., Tutorial on design for testability (DFT) ""An ASIC design philosophy for testability from chips to systems,"" (1993) Proc. 6th Annual IEEE International ASIC Conference and Exhibit, pp. 130-139; Williams, T.W., Parker, K.P., Design for testability - A survey (1982) IEEE Transactions on Computers, 31 (1), pp. 2-15. , Jan; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proc. 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE-9), pp. 256-267. , ACM; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proc. 12th International Symposium on Software Reliability Engineering (ISSRE 2001), pp. 34-43. , IEEE, Nov; (2007) Event-driven Test Scripting Language, , OASIS ebXML Implementation Interoperability and Conformance (IIC) TC Working Draft 0.85, Nov. 7; The Testing and Test Control Notation Version 3 (TTCN-3), , European Telecommunications Standards Institute (ETSI) ETSI European Standard (ES) 201 873, 2003/2003; Unified Modeling Language (UML), , http://www.omg.org/spec/UML, Object Management Group; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Transactions on Software Engineering, SE-4 (3), pp. 178-187. , May; Fujiwara, S., Bochmann, G.V., Khendek, F., Amalou, M., Ghedamsi, A., Test selection based on finite state models (1991) IEEE Transactions on Software Engineering, 17 (6), pp. 591-603. , Jun; Lee, D., Yannakakis, M., Principles and methods of testing finite state machines - A survey (1996) Proceedings of the IEEE, 84 (8), pp. 1090-1123. , Aug; Hierons, R., Ural, H., Generating a checking sequence with a minimum number of reset transitions (2010) Automated Software Engineering, 17 (3), pp. 217-250; Mouchawrab, S., Briand, L.C., Labiche, Y., Assessing, comparing, and combining statechart-based testing and structural testing: An experiment (2007) Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM2007), pp. 41-50. , IEEE; Moore, E.F., Gedanken experiments on sequential machines (1956) Automata Studies, Annals of Mathematical Studies, 34, pp. 129-153. , Princeton University Press; Mealy, G.H., A method for synthesizing sequential circuits (1955) Bell Systems Technical Journal, 34, pp. 1045-1079. , Sep; Myhill, J., Finite automata and the representation of events (1957) Technical Report, WADD TR 57-624, Wright Patterson AFB, pp. 112-137; Ianow, J.I., (1958) Logic Schemes of Algorithms, Problems of Cybernetics I, pp. 87-144. , (in Russian); Jensen, K., Wirth, N., (1974) Pascal User Manual and Report, , P.B. Hansen, D. Gries, C. Moler, G. Seegmüller, N. Wirth, Eds., Springer-Verlag; Tennent, R.D., (2002) Specifying Software, , Cambridge University Press; Korel, B., Automated test data generation for programs with procedures (1996) Proc. International Symposium on Software Testing and Analysis (ISSTA 1996), pp. 209-215. , ACM; Belli, F., Budnik, C.J., Test minimization for human-computer interaction (2007) International Journal of Applied Intelligence, 26 (2), pp. 161-174; (2006) The Idea of ESG Extension, Mainly Reflecting Professor Ina Schieferdecker's Idea, Bases on Early, , Private Communication unpublished discussions between her and Fevzi Belli; Belli, F., Linschulte, M., On 'Negative' tests of web applications (2008) Annals of Mathematics, Computing & Teleinformatics, 1 (5), pp. 44-56; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , Oct; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proc. 29th International Conference on Software Engineering (ICSE 2007), pp. 396-405. , IEEE, May; Brooks, P., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proc. 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE 2007), pp. 333-342. , ACM; Belli, F., Endo, A.T., Linschulte, M., Simao, A., Model-based testing of web service compositions (2011) IEEE 6th International Symposium on Service Oriented System Engineering (SOSE2011), pp. 181-192. , IEEE, 12-14 Dec","Belli, F.; Faculty of Computer Science, Electrical Engineering and Mathematics, , Paderborn, Germany; email: belli@adt.upb.de",,"IEEE Reliability Society",,"2012 IEEE 6th International Conference on Software Security and Reliability Companion, SERE-C 2012","20 June 2012 through 22 June 2012","Gaithersburg, MD",92958,,9780769547435,,,"English","Proc. IEEE Int. Conf. Softw. Secur. Reliab. Companion, SERE-C",Conference Paper,"Final","",Scopus,2-s2.0-84866907629
"Xu Y., Zhu X., Wang Y.","55364784500;55788041100;35146938100;","Towards GUI test based on interactive event-flow model",2012,"Proceedings of 2012 International Conference on Quality, Reliability, Risk, Maintenance, and Safety Engineering, ICQR2MSE 2012",,, 6246224,"222","226",,2,"10.1109/ICQR2MSE.2012.6246224","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866607449&doi=10.1109%2fICQR2MSE.2012.6246224&partnerID=40&md5=939ae7b0200ada6ab737226ce725e2d2","Maintenance Engineering Institute, Mechanical Engineering College, Shijiazhuang, China","Xu, Y., Maintenance Engineering Institute, Mechanical Engineering College, Shijiazhuang, China; Zhu, X., Maintenance Engineering Institute, Mechanical Engineering College, Shijiazhuang, China; Wang, Y., Maintenance Engineering Institute, Mechanical Engineering College, Shijiazhuang, China","Event-flow model is a GUI testing model that describes the immediate execution relationship between GUI events, while GUI is based on event-driven mode. To improve the relationship between GUI events, information to describe the interactive relationship between GUI events is added in the event-flow model. The interactive relationship is based on sharing variables or exchanging messages. Then, an algorithm is given to generate effective and interactive GUI test cases based on interactive event-flow model, and the result of an experiments shows that this method obviously reduced the number of GUI test cases. © 2012 IEEE.","event-flow model; GUI; GUI test; interaction event relationship; software test","GUI testing; interaction event relationship; Interactive relationships; Software test; Test case; Maintenance; Safety engineering; Software testing; Testing; Graphical user interfaces",,,,,,,,"Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Research Articles, Software Testing, Verification & Reliability, 17 (3), pp. 137-157; Huang, C.Y., Chang, J.R., Chang, Y.H., Design and analysis of GUI test-case prioritization using weight-based methods (2010) The Journal of Systems and Software, 83 (4), pp. 646-659; Ganov, S., Killmar, C., Khurshid, S., Perry, D.E., Event listener analysis and symbolic execution for testing GUI applications (2009) Proceedings of the 11th International Conference on Formal Engineering Methods, pp. 69-87; Qian, S.Y., Jiang, F., An event interaction structure for GUI test case generation (2009) Proceedings of the 2nd IEEE International Conference on Computer Science and Information Technology, pp. 619-622; Suberri, G., Automated Reverse Engineering of Graphical user Interface, , http://www.cs.umd.edu/Honors/reports/GiladReport.pdf, Accessed 2012; Yuan, X., Memon, A.M., Alternating GUI test generation and execution (2008) Proceedings of the IEEE Testing : Academic and Industrial Conference, IEEE Computer Society, pp. 23-32; Najumudheen, E.S.F., Mall, R., Samanta, D., A dependence graph-based test coverage analysis technique for object-oriented programs (2009) Proceedings of the 6th International Conference on Information Technology, pp. 763-768; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Transactions on Software Engineering, 36 (1), pp. 81-95; Bryce, R., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Transactions on Software Engineering, 37 (1)","Xu, Y.; Maintenance Engineering Institute, , Shijiazhuang, China; email: xyjie@mail.ustc.edu.cn",,,,"2012 International Conference on Quality, Reliability, Risk, Maintenance, and Safety Engineering, ICQR2MSE 2012","15 June 2012 through 18 June 2012","Chengdu",92813,,9781467307888,,,"English","Proc. Int. Conf. Qual., Reliab., Risk, Maint., Saf. Eng., ICQR2MSE",Conference Paper,"Final","",Scopus,2-s2.0-84866607449
"Gross F., Fraser G., Zeller A.","55320083800;9247521200;7007015864;","Search-based system testing: High coverage, no false alarms",2012,"2012 International Symposium on Software Testing and Analysis, ISSTA 2012 - Proceedings",,,,"67","77",,76,"10.1145/04000800.2336762","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865286383&doi=10.1145%2f04000800.2336762&partnerID=40&md5=1733ab2bd3f37fdc1c33bad4462dcd23","Saarland University, Saarbrücken, Germany","Gross, F., Saarland University, Saarbrücken, Germany; Fraser, G., Saarland University, Saarbrücken, Germany; Zeller, A., Saarland University, Saarbrücken, Germany","Modern test case generation techniques can automatically achieve high code coverage. If they operate on the unit level, they run the risk of generating inputs infeasible in reality, which, when causing failures, are painful to identify and eliminate. Running a unit test generator on five open source Java programs, we found that all of the 181 reported failures were false failures - that is, indicating a problem in the generated test case rather than the program. By generating test cases at the GUI level, our EXSYST prototype can avoid such false alarms by construction. In our evaluation, it achieves higher coverage than search-based test generators at the unit level; yet, every failure can be shown to be caused by a real sequence of input events. Whenever a system interface is available, we recommend considering search-based system testing as an alternative to avoid false failures. © 2012 ACM.","GUI testing; system testing; Test case generation; test coverage","Code coverage; False alarms; GUI testing; Java program; Open sources; Search-based; System interfaces; System testing; Test case; Test case generation; Test coverage; Unit tests; Errors; Java programming language; System theory; Testing; Software testing",,,,,,,,"(2009) GUITAR - A GUI Testing FrAmewoRk, , Website; Arcuri, A., Briand, L., A practical guide for using statistical tests to assess randomized algorithms in software engineering (2011) ACM/IEEE International Conference on Software Engineering (ICSE), pp. 1-10; Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a GUI (2011) Lecture Notes in Computer Science, 6956, pp. 173-187. , M. B. Cohen and M. O Cinneide, editors, Search Based Software Engineering, Springer Berlin / Heidelberg; Briand, L.C., Labiche, Y., Shousha, M., Using genetic algorithms for early schedulability analysis and stress testing in real-time systems (2006) Genetic Programming and Evolvable Machines, 7, pp. 145-170. , June; Burger, M., Zeller, A., Minimizing reproduction of software failures (2011) Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA '11, pp. 221-231. , New York, NY, USA, July ACM; Ciupa, I., Leitner, A., Liu, L.L., Automatic testing of object-oriented software (2007) Proceedings of SOFSEM 2007 (Current Trends in Theory and Practice of Computer Science), , Springer-Verlag; Dallmeier, V., Knopp, N., Mallon, C., Hack, S., Zeller, A., Generating test cases for specification mining (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis, ISSTA '10, pp. 85-96. , ACM; Elbaum, S., Chin, H.N., Dwyer, M.B., Jorde, M., Carving and replaying differential unit test cases from system test cases (2009) IEEE Transactions on Software Engineering, 35, pp. 29-45; Fraser, G., Arcuri, A., Evolutionary generation of whole test suites (2011) International Conference on Quality Software (QSIC), pp. 31-40. , Los Alamitos, CA, USA, IEEE Computer Society; Fraser, G., Arcuri, A., It is not the length that matters, it is how you control it (2011) ICST 2011: Proceedings of the International Conference on Software Testing, Verification, and Validation, pp. 150-159. , Los Alamitos, CA, USA, IEEE Computer Society; Fraser, G., Zeller, A., Mutation-driven generation of unit tests and oracles (2010) ISSTA'10: Proceedings of the ACM International Symposium on Software Testing and Analysis, pp. 147-158. , ACM; Fraser, G., Zeller, A., Exploiting common object usage in test case generation (2011) ICST 2011: Proceedings of the International Conference on Software Testing, Verification, and Validation, pp. 80-89. , Los Alamitos, CA, USA, IEEE Computer Society; Fraser, G., Zeller, A., Generating parameterized unit tests (2011) ISSTA'11: Proceedings of the ACM International Symposium on Software Testing and Analysis, , ACM; Ganov, S.R., Killmar, C., Khurshid, S., Perry, D.E., Test generation for graphical user interfaces based on symbolic execution (2008) Proceedings of the 3rd international workshop on Automation of software test, AST '08, pp. 33-40. , New York, NY, USA, ACM; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) PLDI '05: Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 213-223. , New York, NY, USA, ACM; Gross, F., Fraser, G., Zeller, A., EXSYST: Search-based gui testing ICSE 2012 Demonstration Track: Proceedings of the 34th International Conference on Software Engineering, 2012; Harman, M., Jia, Y., Langdon, W.B., Strong higher order mutation-based test data generation (2011) Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, ESEC/FSE '11, pp. 212-222. , New York, ACM; Harman, M., McMinn, P., A theoretical and empirical study of search based testing: Local, global and hybrid search (2010) IEEE Trans. Softw. Eng., 36 (2), pp. 226-247; Huang, S., Cohen, M.B., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation, ICST '10, pp. 245-254. , Washington, DC, USA, IEEE Computer Society; Kruse, P.M., Wegener, J., Wappler, S., A highly configurable test system for evolutionary black-box testing of embedded systems (2009) Proceedings of the 11th Annual Conference on Genetic and Evolutionary Computation, GECCO '09, pp. 1545-1552. , New York, ACM; Lakhotia, K., McMinn, P., Harman, M., Automated test data generation for coverage: Haven't we solved this problem yet? (2009) TAIC-PART '09: Proceedings of Testing: Academic & Industrial Conference - Practice and Research Techniques, pp. 95-104. , Los Alamitos, CA, USA, IEEE Computer Society; Leitner, A., Oriol, M., Zeller, A., Ciupa, I., Meyer, B., Efficient unit test case minimization (2007) ASE '07: Proceedings of the 22nd IEEE/ACM International Conference on Automated Software Engineering, pp. 417-420. , New York, NY, USA, ACM; Malburg, J., Fraser, G., Combining search-based and constraint-based testing IEEE/ACM International Conference on Automated Software Engineering (ASE'2011), 2011; McMinn, P., Search-based software test data generation: A survey: Research articles (2004) Software Testing Verification Reliability, 14 (2), pp. 105-156; McMinn, P., Shahbaz, M., Stevenson, M., Search-based test input generation for string data types using the results of web queries IEEE International Conference on Software Testing, Verification and Validation (ICST), 2012; Medina, R., Pratmarty, P., UISpec4J - Java/Swing GUI testing library, , http://www.uispec4j.org/; Memon, A.M., Dart: A framework for regression testing nightly/daily builds of GUI applications (2003) Proc. of ICSM, pp. 410-419. , BibTeX; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18, pp. 4:1-4:36. , November; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing Proceedings of the 10th Working Conference on Reverse Engineering, Nov. 2003; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27, pp. 144-155. , February; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/FSE-9, pp. 256-267. , New York, NY, USA, ACM; Michael, C.C., McGraw, G., Schatz, M.A., Generating software test data by evolution (2001) IEEE Trans. Softw. Eng., 27, pp. 1085-1110. , December; Pacheco, C., Ernst, M.D., feedback-directed random testing for Java (2007) OOPSLA '07: Companion to the 22nd ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications Companion, pp. 815-816. , New York, NY, USA, ACM; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C (2005) ESEC/FSE-13: Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 263-272. , New York, NY, USA, ACM; Tillmann, N., De Halleux, J.N., Pex- white box test generation for .NET (2008) LNCS, 4966, pp. 134-253. , TAP 2008: International Conference on Tests And Proofs, Springer; Tonella, P., Evolutionary testing of classes (2004) ISSTA '04: Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 119-128. , New York, NY, USA, ACM; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18, pp. 7:1-7:35. , November; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE '07, pp. 396-405. , Washington, DC, USA, IEEE Computer Society; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Information and Software Technology, 52 (5), pp. 559-575. , TAIC-PART 2008; Zhan, Y., Clark, J.A., The state problem for test generation in Simulink (2006) Proceedings of the 8th Annual Conference on Genetic and Evolutionary Computation, GECCO '06, pp. 1941-1948. , New York, NY, USA, ACM","Gross, F.; Saarland University, Saarbrücken, Germany; email: fgross@cs.uni-saarland.de",,"ACM Special Interest Group on Software Engineering (SIGSOFT)",,"21st International Symposium on Software Testing and Analysis, ISSTA 2012","15 July 2012 through 20 July 2012","Minneapolis, MN",92048,,9781450314541,,,"English","Int. Symp. Softw. Test. Anal., ISSTA - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84865286383
"Molnar A.-J.","56513388200;","An initial study on ideal GUI test case replayability",2012,"2012 IEEE International Conference on Automation, Quality and Testing, Robotics, AQTR 2012 - Proceedings",,, 6237736,"376","381",,,"10.1109/AQTR.2012.6237736","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84865006377&doi=10.1109%2fAQTR.2012.6237736&partnerID=40&md5=6f23f16b72d57b25b42374cf07c5f859","Department of Computer Science, Faculty of Mathematics and Computer Science, Babeş-Bolyai University, Romania","Molnar, A.-J., Department of Computer Science, Faculty of Mathematics and Computer Science, Babeş-Bolyai University, Romania","In this paper we investigate the effect of long-term GUI changes occurring during application development on the reusability of existing GUI test cases. We conduct an empirical evaluation on two complex, open-source GUI-driven applications for which we generate test cases of various lengths. We then assess the replayability of generated test cases using simulation on newer versions of the target applications and partition them according to the type of repairing change required for their reuse. © 2012 IEEE.",,"Application development; Empirical evaluations; Open-source; Target application; Test case; Graphical user interfaces; Reusability; Robotics",,,,,,,,"Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. dissertation, aAI3026063; Nikolai, A.P., Paiva, A.C.R., Tillmann, N., Faria, J.C.P., M, R.F.A., Modeling and testing hierarchical guis Proc.ASM05. Universit de Paris 12, 2005, pp. 8-11; Pimenta, A.C.R.P., (2006) Automated Specification-based Testing of Graphical User Interfaces, , Ph.D. dissertation; Memon, A., Gui ripping: Reverse engineering of graphical user interfaces for testing In Proceedings of the 10th Working Conference on Reverse Engineering, 2003, pp. 260-269; Home of the GUITAR Toolset, , http://guitar.sourceforge.net/, Website; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving gui software (2005) Journal of Software Maintenance, 17, pp. 27-64. , http://portal.acm.org/citation.cfm?id=1062996.1062999, January [Online]. Available; Hackner, D., Memon, A.M., Test case generator for GUITAR (2008) ICSE '08: Research Demonstration Track: International Conference on Software Engineering, , Washington, DC, USA: IEEE Computer Society; Xie, Q., (2006) Developing Cost-effective Model-based Techniques for Gui Testing, , Ph.D. dissertation, College Park, MD, USA, aAI3241432; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source gui applications (2006) Proceedings of the 22nd IEEE International Conference on Software Maintenance, pp. 145-154. , http://portal.acm.org/citation.cfm?id=1172962.1172990, Washington, DC, USA: IEEE Computer Society, [Online]. Available; Hammontree, M.L., Hendrickson, J.J., Hensley, B.W., Integrated data capture and analysis tools for research and testing on graphical user interfaces (1992) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 431-432. , ser. CHI '92. New York, NY, USA: ACM; Memon, A., What test oracle should i use for effective gui testing? (2003) Proc. IEEE International Conference on Automated Software Engineering ASE'03., pp. 164-173. , IEEE Computer Society Press; Takahashi, J., An automated oracle for verifying gui objects (2001) SIGSOFT Softw. Eng. Notes, 26, pp. 83-88. , http://doi.acm.org/10.1145/505482.505494, July [Online]. Available; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for gui systems (1998) SIGSOFT Softw. Eng. Notes, 23, pp. 82-92. , http://doi.acm.org/10.1145/271775.271793, March [Online]. Available; Hemmati, H., Arcuri, A., Briand, L., Reducing the cost of model-based testing through test case diversity (2010) Proceedings of the 22nd IFIP WG 6.1 International Conference on Testing Software and Systems, pp. 63-78. , ser. ICTSS'10. Berlin, Heidelberg: Springer-Verlag; Jacky, J., Veanes, M., Campbell, C., Schulte, W., Model-Based Software Testing and Analysis with C#, , 1st ed; Silva, J.L., Campos, J.C., Paiva, A.C.R., Model-based user interface testing with spec explorer and concurtasktrees (2008) Electron. Notes Theor. Comput. Sci., 208, pp. 77-93. , April; Memon, A.M., Automatically repairing event sequence-based gui test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18, pp. 4:1-4:36. , http://doi.acm.org/10.1145/1416563.1416564, November [Online]. Available; Huang, S., Cohen, M.B., Memon, A.M., Repairing gui test suites using a genetic algorithm (2010) Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation, pp. 245-254. , http://dx.doi.org/10.1109/ICST.2010.39, ser. ICST '10. Washington, DC, USA: IEEE Computer Society, [Online]. Available; McMaster, S., Memon, A.M., An extensible heuristic-based framework for gui test case maintenance (2009) Proceedings of the, pp. 251-254. , IEEE International Conference on Software Testing, Verification, and Validation Workshops Washington, DC, USA: IEEE Computer Society; Molnar, A.-J., A heuristic process for GUI widget matching across application versions (2012) Annales Universitatis. Scientiarum Budapestinensis, Sectio Computatorica, 36, pp. 255-275; Memon, A.M., An event-flow model of gui-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Brooks, P.A., Memon, A.M., Automated gui testing guided by usage profiles (2007) Proceedings of the Twenty-second, pp. 333-342. , IEEE/ACM international conference on Automated software engineering, ser. ASE '07. New York, NY, USA: ACM; Xie, Q., Memon, A.M., Studying the characteristics of a 'good' GUI test suite (2006) Proceedings of the 17th IEEE International Symposium on Software Reliability Engineering (ISSRE 2006), , IEEE Computer Society Press, Nov; Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18. , November; Paiva, A.C.R., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for gui testing (2007) Electr. Notes Theor. Comput. Sci., 190 (2), pp. 99-111; Molnar, A.-J., A software repository and toolset for empirical research (2012) Studia Informatica UBB, 57 (1), pp. 73-88. , March; Home of Our GUI Toolset, , https://sourceforge.net/projects/javaset, Website; Bryce, R., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Transactions on Software Engineering","Molnar, A.-J.; Department of Computer Science, Romania",,"IEEE Computer Society - Test Technology Technical Council;Technical University of Cluj-Napoca;IPA - R and D Institute for Automation, Cluj-Napoca Subsidiary;Rom. Gov. - ANCS Nat. Auth. Sci. Res.;Rom. Soc. Control Eng. Tech. Informatics - SRAIT",,"2012 18th IEEE International Conference on Automation, Quality and Testing, Robotics, AQTR 2012","24 May 2012 through 27 May 2012","Cluj-Napoca",91781,,9781467307024,,,"English","IEEE Int. Conf. Autom., Qual. Test., Rob., AQTR - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84865006377
"Morgado I.C., Paiva A.C.R., Faria J.P., Camacho R.","55321167400;7102683763;35219959000;7005843756;","GUI reverse engineering with machine learning",2012,"2012 1st International Workshop on Realizing AI Synergies in Software Engineering, RAISE 2012 - Proceedings",,, 6227966,"27","31",,8,"10.1109/RAISE.2012.6227966","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864265339&doi=10.1109%2fRAISE.2012.6227966&partnerID=40&md5=7945597c79302427a33baa866047931f","Department of Informatics Engineering, Faculty of Engineering, University of Porto, rua Dr. Roberto Frias, 4200-465 Porto, Portugal; INESC Porto, Portugal","Morgado, I.C., Department of Informatics Engineering, Faculty of Engineering, University of Porto, rua Dr. Roberto Frias, 4200-465 Porto, Portugal; Paiva, A.C.R., Department of Informatics Engineering, Faculty of Engineering, University of Porto, rua Dr. Roberto Frias, 4200-465 Porto, Portugal; Faria, J.P., Department of Informatics Engineering, Faculty of Engineering, University of Porto, rua Dr. Roberto Frias, 4200-465 Porto, Portugal, INESC Porto, Portugal; Camacho, R., Department of Informatics Engineering, Faculty of Engineering, University of Porto, rua Dr. Roberto Frias, 4200-465 Porto, Portugal","This paper proposes a new approach to reduce the effort of building formal models representative of the structure and behaviour of Graphical User Interfaces (GUI). The main goal is to automatically extract the GUI model with a dynamic reverse engineering process, consisting in an exploration phase, that extracts information by interacting with the GUI, and in a model generation phase that, making use of machine learning techniques, uses the extracted information of the first step to generate a state-machine model of the GUI, including guard conditions to remove ambiguity in transitions. © 2012 IEEE.","Inductive Logic Programming; Machine Learning; Model-Based Testing; Reverse Engineering","Exploration phase; Formal model; Machine learning techniques; Model based testing; Model generation; Reverse engineering process; State machine models; Inductive logic programming (ILP); Learning systems; Reverse engineering; Software engineering; Graphical user interfaces",,,,,,,,"Booch, G., Rumbaugh, J., Jacobson, I., (2005) Unified Modeling Language User Guide, , http://dl.acm.org/citation.cfm?id=1088874, 2nd ed. Addison- Wesley Professional, May [Online]. Available; Bratko, I., Grobelnik, M., Inductive Learning Applied to Program Construction and Verification (1992) Extended Papers from the IFIP TC12 Workshop on Artificial Intelligence from the Information Processing Perspective: Knowledge Oriented Software Design, pp. 169-182. , http://dl.acm.org/citation.cfm?id=646677.756917, Sep. [Online]. Available; Chikofsky, E., Cross, J., Reverse engineering and design recovery: A taxonomy (1990) IEEE Software, 7 (1), pp. 13-17. , http://dl.acm.org/citation.cfm?id=624579.624902, [Online]. Available; Clocksin, W.F., Mellish, C.S., (2003) Programming in Prolog, , 4th ed. Berlin, Germany: Springer-Verlag New York Berlin Heidelberg; Cohen, W.W., Devanbu, P.T., A Comparative Study of Inductive Logic Programming Methods for Software Fault Prediction Fourteenth International Conference on Machine Learning, 1997, pp. 66-74; Coimbra Morgado, I., Paiva, A., Pascoal Faria, J., Reverse Engineering of Graphical User Interfaces (2011) The Sixth International Conference on Software Engineering Advances, (100), pp. 293-298. , Barcelona; Di Lucca, G., Fasolino, A., Pace, F., Tramontana, P., De Carlini, U., WARE: A tool for the reverse engineering of Web applications (2002) Proceedings of the Sixth European Conference on Software Maintenance and Reengineering, pp. 241-250. , http://goo.gl/ZaG7t, IEEE Comput. Soc, [Online]. Available; Dzerosk, S., Lavrac, N., (2001) Relational Data Mining, , http://wwwai.ijs.si/SasoDzeroski/RDMBook/, Berlin: SV, [Online]. Available; Dzeroski, S., Relational Data Mining (2010) Computer Software Engineering Series, pp. 887-911. , http://www.arnetminer.org:8080/publication/relational-data-mining- 2999763.html, [Online]. Available; Edamatsu, H., (1995) Finite State Machine, , http://www.freepatentsonline.com/EP0356940.html, Aug. [Online]. Available; Grilo, A., Paiva, A., Faria, J., Reverse engineering of GUI models for testing (2010) Information Systems and Technologies (CISTI), 2010 5th Iberian Conference On, No. July, pp. 1-6. , http://goo.gl/bXcIy, [Online]. Available; Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) Companion of the 13th International Conference on Software Engineering - ICSE Companion '08, p. 959. , http://dl.acm.org/citation.cfm?id=1370175.1370207, New York, New York, USA: ACM Press, May [Online]. Available; Muggleton, S., Inductive logic programming Proceedings of the 1st Conference on Algorithmic Learning Theory, 1990, pp. 43-62; Muggleton, S.H., Raedt, L.D., Inductive Logic Programming: Theory and Methods (1994) Journal of Logic Programming, 19 (20), pp. 629-679; Paiva, A.C.R., Faria, J.A.C.P., Mendes, P.M.C., Reverse engineered formal models for GUI testing (2007) The 12th International Conference on Formal Methods for Industrial Critical Systems, pp. 218-233. , http://dl.acm.org/citation.cfm?id=1793603.1793621, Berlin, Germany: Springer-Verlag, Jul. [Online]. Available; Rekoff, M., On Reverse Engineering (1985) IEEE Trans. Systems, Man, and Cybernetics, pp. 244-252. , http://www.citeulike.org/group/1374/article/3944848, no. March- April, [Online]. Available; Russell, S.J., Norvig, P., (2010) Artificial Intelligence - A Modern Approach (3. Internat. Ed.), , Pearson Education; Shapiro, E.Y., (1983) Algorithmic Program Debugging; Silva, J.A.C., (2010) GUIsurfer: A Tool for Reverse Engineering of Graphical User Interfaces, , http://hdl.handle.net/1822/12267, Ph.D. dissertation, [Online]. Available; Srinivasan, A., (2007) Aleph Manual, , http://goo.gl/5fRuY, [Online]. Available; Stroulia, E., Systä, T., Dynamic analysis for reverse engineering and program understanding (2002) ACM SIGAPP Applied Computing Review, 10 (1), pp. 8-17. , http://dl.acm.org/citation.cfm?id=568235.568237, Apr. [Online]. Available","Morgado, I.C.; Department of Informatics Engineering, rua Dr. Roberto Frias, 4200-465 Porto, Portugal",,,,"2012 1st International Workshop on Realizing AI Synergies in Software Engineering, RAISE 2012","5 June 2012 through 5 June 2012","Zurich",91309,,9781467317535,,,"English","Int. Workshop Realizing AI Synergies Softw. Eng., RAISE - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-84864265339
"Gross F., Fraser G., Zeller A.","55320083800;9247521200;7007015864;","EXSYST: Search-based GUI testing",2012,"Proceedings - International Conference on Software Engineering",,, 6227232,"1423","1426",,33,"10.1109/ICSE.2012.6227232","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864191575&doi=10.1109%2fICSE.2012.6227232&partnerID=40&md5=19e196a436db5b47a51a68136fa3df67","Saarland University, Saarbrücken, Germany","Gross, F., Saarland University, Saarbrücken, Germany; Fraser, G., Saarland University, Saarbrücken, Germany; Zeller, A., Saarland University, Saarbrücken, Germany","Test generation tools commonly aim to cover structural artefacts of software, such as either the source code or the user interface. However, focusing only on source code can lead to unrealistic or irrelevant test cases, while only exploring a user interface often misses much of the underlying program behavior. Our EXSYST prototype takes a new approach by exploring user interfaces while aiming to maximize code coverage, thus combining the best of both worlds. Experiments show that such an approach can achieve high code coverage matching and exceeding the code coverage of traditional unit-based test generators; yet, by construction every test case is realistic and relevant, and every detected failure can be shown to be caused by a real sequence of input events. © 2012 IEEE.","GUI testing; system testing; test case generation; test coverage","Code coverage; GUI testing; Program behavior; Search-based; Source codes; System testing; Test case; Test case generation; Test coverage; Test generations; Software engineering; Testing; User interfaces; Software testing",,,,,"Seventh Framework Programme, FP7: 290914",,,"Bauersfeld, S., Wappler, S., Wegener, J., A metaheuristic approach to test sequence generation for applications with a GUI (2011) Lecture Notes in Computer Science, 6956, pp. 173-187. , M. Cohen and M. O Cinneide, editors, Search Based Software Engineering, Springer Berlin / Heidelberg; Fraser, G., Arcuri, A., Evolutionary generation of whole test suites (2011) International Conference on Quality Software (QSIC), pp. 31-40. , Los Alamitos, CA, USA, IEEE Computer Society; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) PLDI '05: Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 213-223. , New York, NY, USA, ACM; Gross, F., Fraser, G., Zeller, A., (2012) Exploring Realistic Program Behavior, , Technical report, Saarland University, Submitted for publication; McMinn, P., Search-based software test data generation: A survey: Research articles (2004) Software Testing Verification Reliability, 14 (2), pp. 105-156; Medina, R., Pratmarty, P., UISpec4J - Java/Swing GUI Testing Library, , http://www.uispec4j.org/; Memon, A., Banerjee, I., Hashmi, N., Nagarajan, A., Dart: A framework for regression testing ""nightly/daily builds"" of gui applications (2003) Proceedings of the International Conference on Software Maintenance, ICSM '03, p. 410. , Washington, DC, USA, IEEE Computer Society; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing Proceedings of the 10th Working Conference on Reverse Engineering, Nov. 2003; Pacheco, C., Ernst, M.D., Randoop: Feedback-directed random testing for Java (2007) OOPSLA '07: Companion to the 22nd ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications Companion, pp. 815-816. , New York, NY, USA, ACM; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of the 29th International Conference on Software Engineering, ICSE '07, pp. 396-405. , Washington, DC, USA, IEEE Computer Society","Gross, F.; Saarland University, Saarbrücken, Germany; email: fgross@cs.uni-saarland.de",,"IEEE Computer Society;ACM;University of Zurich (UZH), Department of Informatics;Technical Council on Software Engineering (TCSE);Special Interest Group on Software Engineering (SIGSOFT);SI-SE",,"34th International Conference on Software Engineering, ICSE 2012","2 June 2012 through 9 June 2012","Zurich",91326,02705257,9781467310673,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84864191575
"Zhu B., Wang A.","53882256000;55483870000;","Functional and user interface model for generating test cases",2012,"Proceedings - 2012 IEEE/ACIS 11th International Conference on Computer and Information Science, ICIS 2012",,, 6211160,"605","610",,,"10.1109/ICIS.2012.54","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864051659&doi=10.1109%2fICIS.2012.54&partnerID=40&md5=1b65b9ec9fb1466e5f7b705f377548c6","School of Computer and Information, Shanghai Second Polytechnic University, Shanghai, China","Zhu, B., School of Computer and Information, Shanghai Second Polytechnic University, Shanghai, China; Wang, A., School of Computer and Information, Shanghai Second Polytechnic University, Shanghai, China","Use cases models are used to specifying functional requirements whereas task models are employed to modeling UI requirements. Test cases generated from use cases models are focused on the core functionality of the system, while test cases generated from task models are used to user interface testing which concerned with details of user interactions. Therefore, test cases derived from use case models or task models only capture partial system behavior. These test cases are inadequate for testing full system behavior. In this paper we employ use cases models for modeling system functionality and user action notation (UAN) for describing user interfaces. We assumed that the task model and use case model are consistent and they refined each other in some part of model. Use case models and task models are transformed to FSM respectively. We propose a method for formally integrating the model for use case models and task models. The resulting integrated model is then used to generate test cases which capture more complete and detailed user interactions and secondary system interactions. © 2012 IEEE.","FSM; Task model; Test case; UAN; Use case model","FSM; Task models; Test case; UAN; Use case model; Information science; User interfaces",,,,,,,,"Santoro, C., (2005) A Task Model-Based Approach for the Design and Evaluation of Innovative User Interfaces, , Presses universitaires de Louvain; Paternò, F., From model-based to natural development (2003) Proceedings HCI International, pp. 592-596; Pinheiro Da Silva, P., Paton, N., User interface modelling with UML (2000) Proc. of the 10th European-Japanese Conference on Information Modelling and Knowledge Representation; Larman, C., (2002) Applying UML and Patterns : An Introduction to Objectoriented Analysis and Design and the Unified Process, , Prentice Hall PTR, Upper Saddle River, NJ; Sinnig, D., Khendek, F., Chalin, P., A formal model for generating integrated functional and user interface test cases (2010) ICST, pp. 255-264; Mori, G., Paternò, F., Santoro, C., CTTE: Support for developing and analyzing task models for interactive system design (2002) IEEE Transactions on Software Engineering, 28 (8), pp. 797-813. , August; Hartson, H.R., Temporal aspects of tasks in the user action notation (1992) Human-Computer Interaction, 7, pp. 1-45; Hartson, H.R., Siochi, A.C., Hix, D., The UAN: A useroriented representation for direct manipulation interface designs (1990) ACM Transactions on Information Systems, 8, pp. 181-203; Sinnig, D., Chalin, P., Khendek, F., Consistency between task models and use cases (2007) Proc. of DSV-IS 2007, , Salamanca; Chow, T., Testing software design modeled by finite-state machines (1978) IEEE Trans. on Software Engineering, SE-4 (3), pp. 178-187. , May; Miao, H., Qian, Z., He, T., Modeling web browser interactions using FSM (2007) The 2nd IEEE Asia-Pacific Service Computing Conference (APSCC'2007), pp. 211-217. , IEEE Computer Society, Tsukuba Science City, Japan, Dec. 11-14; Hongwei, Z., Huaikou, M., Model checking-based testing of Web applications (2007) Wuhan University Journal of Natural Sciences, 12 (5), pp. 922-926; Lee, D., Yannakakis, M., Principles and methods of testing finite state machines (1996) Proceedings of IEEE, 84 (8), pp. 1090-1123; Nebut, C., Fleurey, F., Le Traon, Y., Jezequel, J., Automatic test generation:A use case driven approach (2006) IEEE Trans. Softw. Eng., 32 (3), pp. 140-155; Gutierez, J., Escalona, M.J., Torres, M.M., An approach to generate test cases from use cases (2006) Proceedings of the 6th International Conference on Web Engineering, pp. 113-114; Fröhlich, P., Link, J., Automated test case generation from dynamic models (2000) Proc. of ECOOP'00, pp. 472-492. , Sophia Antipolis and Cannes, France; Kassel, N., (2006) An Approach to Automate Test Case Generation from Structured Use Cases, , Thesis in Computer Science, lemson University, Clemson, South Carolina; Mori, G., Paternoá, F., Santoro, C., CTTE: Support for developing and analyzing task models for interactive system design (2002) IEEE Transactions on Software Engineering, 28 (8). , AUGUST; Silva, J., Campos, J.C., Paiva, A., Model-based user interface testing with spec explorer and concor task trees (2007) Proc. of Formal Methods for Interactive Systems Macau, , China; Benz, S., Combining test case generation for component and integration testing (2007) Proc. of AMOST'07, pp. 23-33. , London, UK","Zhu, B.; School of Computer and Information, , Shanghai, China; email: tozhubin@163.com",,"IEEE Computer Society;Int. Assoc. Comput. Inf. Sci. (ACIS)",,"2012 IEEE/ACIS 11th International Conference on Computer and Information Science, ICIS 2012","30 May 2012 through 1 June 2012","Shanghai",91164,,9780769546940,,,"English","Proc. - IEEE/ACIS Int. Conf. Comput. Inf. Sci., ICIS",Conference Paper,"Final","",Scopus,2-s2.0-84864051659
"Mariani L., Pezzè M., Riganelli O., Santoro M.","8965048200;35581208100;14020561200;55154486300;","AutoBlackTest: Automatic black-box testing of interactive applications",2012,"Proceedings - IEEE 5th International Conference on Software Testing, Verification and Validation, ICST 2012",,, 6200099,"81","90",,52,"10.1109/ICST.2012.88","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84862331561&doi=10.1109%2fICST.2012.88&partnerID=40&md5=371c7c2d99507494d72ba4b07d6796c5","University of Milano Bicocca, Viale Sarca, 336, Milano, Italy; University of Lugano, Via Buffi, 13, Lugano, Switzerland","Mariani, L., University of Milano Bicocca, Viale Sarca, 336, Milano, Italy; Pezzè, M., University of Milano Bicocca, Viale Sarca, 336, Milano, Italy, University of Lugano, Via Buffi, 13, Lugano, Switzerland; Riganelli, O., University of Milano Bicocca, Viale Sarca, 336, Milano, Italy; Santoro, M., University of Milano Bicocca, Viale Sarca, 336, Milano, Italy","Automatic test case generation is a key ingredient of an efficient and cost-effective software verification process. In this paper we focus on testing applications that interact with the users through a GUI, and present Auto Black Test, a technique to automatically generate test cases at the system level. Auto Black Test uses reinforcement learning, in particular Q-Learning, to learn how to interact with the application under test and stimulate its functionalities. The empirical results show that Auto Black Test can execute a relevant portion of the code of the application under test, and can reveal previously unknown problems by working at the system level and interacting only through the GUI. © 2012 IEEE.","Black-Box Testing; Q-Learning; Test Automation","Application under tests; Automatic testcase generation; Black-box testing; Interactive applications; Q-learning; Software verification; System levels; Test Automation; Test case; Graphical user interfaces; Reinforcement learning; Verification; Software testing",,,,,,,,"Pezzè, M., Young, M., (2007) Software Testing and Analysis: Process, Principles and Techniques, , John Wiley; King, J., Symbolic execution and program testing (1976) Communications of the ACM, 19 (7), pp. 385-394; Tillmann, N., Halleux, J.D., Pex: White box test generation for. NET (2008) Proceedings of the 2nd International Conference on Tests and Proofs, , Springer-Verlag; Broy, M., Jonsson, B., Katoen, J.-P., Leucker, M., Pretschner, A., Model-based Testing of Reactive Systems (2005) LNCS, 3472. , ser. Springer Verlag; Taneja, K., Xie, T., DiffGen: Automated regression unit-test generation Proceedings of the 23rd International Conference on Automated Software Engineering, 2008; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2001; Yuan, X., Cohen, M., Memon, A.M., GUI interaction testing: Incorporating event context (2011) IEEE Transactions on Software Engineering, 37 (4), pp. 559-574; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback (2010) IEEE Transactions on Software Engineering, 36 (1), pp. 81-95; Sutton, R., Barto, A., (1998) Reinforcement Learning: An Introduction, , MIT Press; IBM Rational Functional Tester, , http://www-01.ibm.com/software/awdtools/tester/functional/; Kephart, J.O., Chess, D.M., The vision of autonomic computing (2003) IEEE Computer, 43 (1), pp. 41-50; Watkins, C.J.C.H., Dayan, P., Technical note Q-Learning (1992) Machine Learning, 8, pp. 279-292; Abul, O., Polat, F., Alhajj, R., Multiagent reinforcement learning using function approximation (2000) IEEE Transactions on Systems, Man, and Cybernetics, Part C: Applications and Reviews, 30 (4), pp. 485-497; Lin, L.-J., (1992) Reinforcement Learning for Robots Using Neural Networks, , Ph.D. dissertation, Carnegie Mellon University, Pittsburgh, PA, USA; Becce, G., Mariani, L., Riganelli, O., Santoro, M., Extracting widget descriptions from GUIs Proceedings of the International Conference on Fundamental Approaches to Software Engineering, 2012; Rothermel, G., Untcn, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) IEEE Transactions on Software Engineering, 27 (10), pp. 929-948. , DOI 10.1109/32.962562; Xie, Q., (2006) Developing Cost-effective Model-based Techniques for Gui Testing, , PhD Thesis, University of Maryland; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., AutoBlackTest: A tool for automatic black-box testing Proceedings of the International Conference on Software Engineering - Tool Demo, 2011; Wall, T., Abbot Java GUI Test Framework, , http://abbot.sourceforge.net/; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) IEEE Transactions on Software Engineering, 16 (1), pp. 1-36; Brooks, A., Memon, A., Automated GUI testing guided by usage profiles Proceedings of the International Conference on Automated Software Engineering, 2007; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications Proceedings of the International Conference on Software Testing, Verification, and Validation, 2008; Andrews, A., Offutt, J., Alexander, R., Testing Web applications by modeling with FSMs (2005) Software and System Modeling, 4 (3); Elbaum, S., Karre, S., Rothermel, G., Improving Web application testing with user session data Proceedings of the International Conference on Software Engineering, 2003","Mariani, L.; University of Milano Bicocca, Viale Sarca, 336, Milano, Italy",,,,"5th IEEE International Conference on Software Testing, Verification and Validation, ICST 2012","17 April 2012 through 21 April 2012","Montreal, QC",90301,,9780769546704,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-84862331561
"Börjesson E., Feldt R.","54888761900;24476388300;","Automated system testing using visual GUI testing tools: A comparative study in industry",2012,"Proceedings - IEEE 5th International Conference on Software Testing, Verification and Validation, ICST 2012",,, 6200127,"350","359",,44,"10.1109/ICST.2012.115","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84862327388&doi=10.1109%2fICST.2012.115&partnerID=40&md5=7b27b6066e4744b8d0fbef4c6b67c6e1","Software Engineering and Technology, Chalmers University, Gothenburg, Sweden","Börjesson, E., Software Engineering and Technology, Chalmers University, Gothenburg, Sweden; Feldt, R., Software Engineering and Technology, Chalmers University, Gothenburg, Sweden","Software companies are under continuous pressure to shorten time to market, raise quality and lower costs. More automated system testing could be instrumental in achieving these goals and in recent years testing tools have been developed to automate the interaction with software systems at the GUI level. However, there is a lack of knowledge on the usability and applicability of these tools in an industrial setting. This study evaluates two tools for automated visual GUI testing on a real-world, safety-critical software system developed by the company Saab AB. The tools are compared based on their properties as well as how they support automation of system test cases that have previously been conducted manually. The time to develop and the size of the automated test cases as well as their execution times have been evaluated. Results show that there are only minor differences between the two tools, one commercial and one open-source, but, more importantly, that visual GUI testing is an applicable technology for automated system testing with effort gains over manual system test practices. The study results also indicate that the technology has benefits over alternative GUI testing techniques and that it can be used for automated acceptance testing. However, visual GUI testing still has challenges that must be addressed, in particular the script maintenance costs and how to support robust test execution. © 2012 IEEE.","Empirical; Industrial Study; Tool Comparison; Visual GUI testing","Automated acceptance testing; Automated systems; Automated test; Comparative studies; Empirical; Execution time; GUI testing; Industrial settings; Industrial Study; Maintenance cost; Open-source; Robust tests; Saab ab; Safety-critical software systems; Software company; Software systems; System test; Testing tools; Time to market; Acceptance tests; Industry; Software testing; System theory; Automation",,,,,,,,"Li, P., Huynh, T., Reformat, M., Miller, J., A practical approach to testing GUI systems (2007) Empirical Software Engineering, 12 (4), pp. 331-357. , DOI 10.1007/s10664-006-9031-3; Miller, R., Collins, C., Acceptance testing Proc. XPUniverse, 2001; Hsia, P., Kung, D., Sell, C., Software requirements and acceptance testing (1997) Annals of Software Engineering, 3 (1), pp. 291-317; Hsia, P., Gao, J., Samuel, J., Kung, D., Toyoshima, Y., Chen, C., Behavior-based acceptance testing of software systems: A formal scenario approach (1994) Computer Software and Applications Conference, 1994. COMPSAC 94. Proceedings., Eighteenth Annual International, pp. 293-298. , IEEE; Graves, T.L., Harrold, M.J., Kim, J.-M., Porter, A., Rothermel, G., An empirical study of regression test selection techniques (2001) ACM Transactions on Software Engineering and Methodology, 10 (2), pp. 184-208. , DOI 10.1145/367008.367020; Olan, M., Unit testing: Test early, test often (2003) Journal of Computing Sciences in Colleges, 19 (2), pp. 319-328; Gamma, E., Beck, K., Junit: A cook's tour (1999) Java Report, 4 (5), pp. 27-38; Chelimsky, D., Astels, D., Dennis, Z., Hellesoy, A., Helmkamp, B., North, D., The rspec book: Behaviour driven development with rspec, cucumber, and friends (2010) Pragmatic Bookshelf; Weyuker, E.J., Testing component-based software: A cautionary tale (1998) IEEE Software, 15 (5), pp. 54-59; Berner, S., Weber, R., Keller, R., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference on Software Engineering, pp. 571-579. , ACM; Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated gui performance testing (2011) Software Quality Journal, pp. 1-39; Andersson, J., Bache, G., The video store revisited yet again: Adventures in gui acceptance testing (2004) Extreme Programming and Agile Processes in Software Engineering, pp. 1-10; Memon, A., Gui testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 87-88; Jovic, M., Adamoli, A., Zaparanuks, D., Hauswirth, M., Automating performance testing of interactive java applications (2010) Proceedings of the 5th Workshop on Automation of Software Test, pp. 8-15. , ACM; Sjösten-Andersson, E., Pareto, L., Costs and benefits of structureaware capture/replay tools (2006) SERPS'06, p. 3; Chang, T., Yeh, T., Miller, R., Gui testing using computer vision (2010) Proceedings of the 28th International Conference on Human Factors in Computing Systems, pp. 1535-1544. , ACM; Potter, R., (1992) Triggers: Guiding Automation with Pixels to Achieve Data Access, pp. 361-382. , University of Maryland, Center for Automation Research, Human/Computer Interaction Laboratory; Zettlemoyer, L., St Amant, R., A visual medium for programmatic control of interactive applications (1999) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems: The CHI Is the Limit, pp. 199-206. , ACM; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; Brooks, P., Memon, A., Automated gui testing guided by usage profiles (2007) Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering, pp. 333-342. , ACM; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Lowell, C., Stell-Smith, J., Successful automation of gui driven acceptance testing (2003) Extreme Programming and Agile Processes in Software Engineering, pp. 1011-1012; Illes, T., Herrmann, A., Paech, B., Rückert, J., Criteria for software testing tool evaluation. A task oriented view (2005) Proceedings of the 3rd World Congress for Software Quality, 2, pp. 213-222; Richardson, T., Stafford-Fraser, Q., Wood, K., Hopper, A., Virtual network computing (1998) Internet Computing, IEEE, 2 (1), pp. 33-38; Fowler, L., Armarego, J., Allen, M., Case tools: Constructivism and its application to learning and usability of software engineering tools (2001) Computer Science Education, 11 (3), pp. 261-272","Börjesson, E.; Software Engineering and Technology, , Gothenburg, Sweden; email: borjesson@chalmers.se",,,,"5th IEEE International Conference on Software Testing, Verification and Validation, ICST 2012","17 April 2012 through 21 April 2012","Montreal, QC",90301,,9780769546704,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-84862327388
"Becce G., Mariani L., Riganelli O., Santoro M.","55155472500;8965048200;14020561200;55154486300;","Extracting widget descriptions from GUIs",2012,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","7212 LNCS",,,"347","361",,12,"10.1007/978-3-642-28872-2_24","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859141600&doi=10.1007%2f978-3-642-28872-2_24&partnerID=40&md5=7e77484b20c9ce35a637244163829016","Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy","Becce, G., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy; Mariani, L., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy; Riganelli, O., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy; Santoro, M., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy","Graphical User Interfaces (GUIs) are typically designed to simplify data entering, data processing and visualization of results. However, GUIs can also be exploited for other purposes. For instance, automatic tools can analyze GUIs to retrieve information about the data that can be processed by an application. This information can serve many purposes such as ease application integration, augment test case generation, and support reverse engineering techniques. In the last years, the scientific community provided an increasing attention to the automatic extraction of information from interfaces. For instance, in the domain of Web applications, learning techniques have been used to extract information from Web forms. The knowledge about the data that can be processed by an application is not only relevant for the Web, but it is also extremely useful to support the same techniques when applied to desktop applications. In this paper we present a technique for the automatic extraction of descriptive information about the data that can be handled by widgets in GUI-based desktop applications. The technique is grounded on mature standards and best practices about the design of GUIs, and exploits the presence of textual descriptions in the GUIs to automatically obtain descriptive data for data widgets. The early empirical results with three desktop applications show that the presented algorithm can extract data with high precision and recall, and can be used to improve generation of GUI test cases. © 2012 Springer-Verlag Berlin Heidelberg.","graphical user interface; program analysis; testing GUI applications","Application integration; Automatic extraction; Automatic tools; Descriptive information; Desktop applications; Engineering techniques; High precision; Learning techniques; Program analysis; Scientific community; Test case; Test case generation; Textual description; WEB application; Web forms; Application integration; Descriptive information; Desktop applications; Graphical user interface (GUIs); GUI applications; Program analysis; Reverse engineering techniques; Test case generation; Data visualization; Software engineering; Software testing; Visualization; Application programs; Data handling; Data visualization; Extraction; Reverse engineering; Software engineering; Software testing; User interfaces; Graphical user interfaces; Graphical user interfaces",,,,,,,,"http://buddi.digitalcave.ca/; JAOLT, , http://code.google.com/p/jaolt/; Java Look and Feel Design Guidelines, , http://java.sun.com/products/jlf/ed2/book/; JPass, , http://metis.freebase.hu/jpass.html; PDFSAM, , http://sourceforge.net/projects/pdfsam/; (1998) ISO 9241-12:1998 Ergonomic Requirements for Office Work with Visual Display Terminals (VDTs) - Part 12: Presentation of Information; Bertolino, A., Gnesi, S., Use case-based testing of product lines (2003) SIGSOFT Softw. Eng. Notes, 28, pp. 355-358; Fröhlich, P., Link, J., Automated test case generation from dynamic models (2000) ECOOP 2000, 1850, pp. 472-491. , Bertino, E. (ed.) LNCS Springer, Heidelberg; Fu, C., Grechanik, M., Xie, Q., Inferring types of references to gui objects in test scripts (2009) Proceedings of the International Conference on Software Testing Verification and Validation; He, B., Chang, K.C.-C., Statistical schema matching across web query interfaces (2003) Proceedings of the International Conference on Management of Data; Lo, R., Webby, R., Jeffery, R., Sizing and estimating the coding and unit testing effort for gui systems (1996) Proceedings of the 3rd International Symposium on Software Metrics: From Measurement to Empirical Results; Mariani, L., Pezzè, M., Riganelli, O., Santoro, M., Autoblacktest: A tool for automatic black-box testing (2011) Proceeding of the International Conference on Software Engineering; Nguyen, H., Nguyen, T., Freire, J., Learning to extract form labels (2008) Proceedings of the VLDB Endowment, 1. , August; Preece, J., Rogers, Y., Sharp, H., Benyon, D., Holland, S., Carey, T., (1994) HumanComputer Interaction, , Addison Wesley; Sánchez Ramón, O., Sánchez Cuadrado, J., García Molina, J., Model-driven reverse engineering of legacy graphical user interfaces (2010) Proceedings of the International Conference on Automated Software Engineering; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the International Symposium on Fault-tolerant Computing; Tichy, W.F., Koerner, S.J., Text to software: Developing tools to close the gaps in software engineering (2010) Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of gui testing using a model-driven approach (2006) Proceedings of the 2006 International Workshop on Automation of Software Test; Wu, W., Yu, C., Doan, A., Meng, W., An interactive clustering-based approach to integrating source query interfaces on the deep web (2004) Proceedings of the International Conference on Management of Data; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback (2010) IEEE Transactions on Software Engineering, 36 (1), pp. 81-95","Becce, G.; Department of Informatics, Systems and Communications, , Milano, Italy; email: becce@disco.unimib.it",,"Institute of Cybernetics at TUT;""Tallinn University of Technology(TUT)"";EXCS Eur. Reg. Dev. Fund (ERDF);Estonian Convention Bureau;Microsoft Research",,"15th International Conference on Fundamental Approaches to Software Engineering, FASE 2012, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2012","24 March 2012 through 1 April 2012","Tallinn",89253,03029743,9783642288715,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84859141600
"Mesbah A., Van Deursen A., Lenselink S.","17345931800;7003969355;55175572400;","Crawling AJAX-based web applications through dynamic analysis of user interface state changes",2012,"ACM Transactions on the Web","6","1", 3,"","",,184,"10.1145/2109205.2109208","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859409079&doi=10.1145%2f2109205.2109208&partnerID=40&md5=30ece2ad473c2d92c90ecd5d0e2b8fa3","Department of Electrical and Computer Engineering, University of British Columbia, 2332 Main Mall, V6T1Z4 Vancouver, BC, Canada; Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, 2628CD Delft, Netherlands","Mesbah, A., Department of Electrical and Computer Engineering, University of British Columbia, 2332 Main Mall, V6T1Z4 Vancouver, BC, Canada; Van Deursen, A., Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, 2628CD Delft, Netherlands; Lenselink, S., Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, 2628CD Delft, Netherlands","Using JAVASCRIPT and dynamic DOM manipulation on the client side of Web applications is becoming a widespread approach for achieving rich interactivity and responsiveness in modern Web applications. At the same time, such techniques-collectively known as AJAX-shatter the concept of webpages with unique URLs, on which traditional Web crawlers are based. This article describes a novel technique for crawling AJAX-based applications through automatic dynamic analysis of user-interface-state changes in Web browsers. Our algorithm scans the DOM tree, spots candidate elements that are capable of changing the state, fires events on those candidate elements, and incrementally infers a state machine that models the various navigational paths and states within an AJAX application. This inferred model can be used in program comprehension and in analysis and testing of dynamic Web states, for instance, or for generating a static version of the application. In this article, we discuss our sequential and concurrent AJAX crawling algorithms. We present our open source tool called CRAWLJAX, which implements the concepts and algorithms discussed in this article. Additionally, we report a number of empirical studies in which we apply our approach to a number of open-source and industrialWeb applications and elaborate on the obtained results. © 2012 ACM 1559-1131/2012/03-ART3 $10.00.","Algorithms; Design; Experimentation","Analysis and testing; Automatic dynamic analysis; DOM tree; Empirical studies; Experimentation; Interactivity; Javascript; Navigational paths; Novel techniques; Open source tools; Open-source; Program comprehension; State machine; WEB application; Web crawlers; Algorithms; Design; User interfaces; World Wide Web; Java programming language",,,,,,,,"Alvarez, M., Pan, A., Raposo, J., Hidalgo, J., Crawling web pages with support for client-side dynamism (2006) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 4016, pp. 252-262. , Advances in Web-Age Information Management - 7th International Conference, WAIM 2006, Proceedings; Alvarez, M., Pan, A., Raposo, J., Vina, A., Client-side deep web data extraction (2004) Proceedings of the IEEE International Conference on E-Commerce Technology for Dynamic E-Business, CEC-East 2004, pp. 158-161. , Proceedings of the IEEE International Conference on E-Commerce Technology for Dynamic E-Business, CEC-East 2004; Atterer, R., Schmidt, A., Adding usability to web engineering models and tools (2005) Lecture Notes in Computer Science, 3579, pp. 36-41. , Web Engineering: 5th International Conference, ICWE 2005. Proceedings; Barbosa, L., Freire, J., An adaptive crawler for locating hiddenwebentry points (2007) 16th International World Wide Web Conference, WWW2007, pp. 441-450. , DOI 10.1145/1242572.1242632, 16th International World Wide Web Conference, WWW2007; Bezemer, C.-P., Mesbah, A., Van Deursen, A., Automated security testing of Web widget interactions (2009) Proceedings of the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC-FSE'09)., pp. 81-91. , ACM Press, New York, NY; Boldi, P., Codenotti, B., Santini, M., Vigna, S., Ubicrawler: A scalable fully distributedWeb crawler (2004) Softw. Practice Exper., 34 (8), pp. 711-726; Brin, S., Page, L., The anatomy of a large-scale hypertextual Web search engine (1998) Comput. Netw. ISDN Syst., 30 (1-7), pp. 107-117; Burner, M., Crawling towards eternity: Building an archive of the world wide web (1997) Web Techniques Mag., 2 (5), pp. 37-40; Chawathe, S.S., Rajaraman, A., Garcia-Molina, H., Widom, J., Change detection in hierarchically structured information (1996) SIGMOD Record (ACM Special Interest Group on Management of Data), 25 (2), pp. 493-504; Cho, J., Garcia-Molina, H., Parallel crawlers (2002) Proceedings of the 11th International World Wide Web Conference., pp. 124-135. , ACM Press, New York, NY; Cho, J., Garcia-Molina, H., Page, L., Efficient crawling through URL ordering (1998) Comput. Netw. ISDN Syst., 30 (1-7), pp. 161-172; Dasgupta, A., Ghosh, A., Kumar, R., Olston, C., Pandey, S., Tomkins, A., The discoverability of theWeb (2007) Proceedings of the 16th International World WideWeb Conference (WWW'07)., pp. 421-430. , ACM Press, New York, NY; De Carvalho Fontes, A., Silva, F.S., SmartCrawl: A new strategy for the exploration of the hidden web (2004) Proceedings of the Interntational Workshop on Web Information and Data Management, pp. 9-15. , WIDM 2004: Proceedings of the Sixth ACM International Workshop on Web Information and Data Management; Dijkstra, E.W., A note on two problems in connexion with graphs (1959) Numerische Mathematik, 1 (1), pp. 269-271; Duda, C., Frey, G., Kossmann, D., Matter, R., Zhou, C., Ajax crawl: Making Ajax applications searchable (2009) Proceedings of the 25th International Conference on Data Engineering (ICDE'09)., pp. 78-89. , IEEE Computer Society, Los Alamitos, CA; Fielding, R., Taylor, R.N., Principled design of the modern Web architecture (2002) ACM Trans. Inter. Tech., 2 (2), pp. 115-150; Garavel, H., Mateescu, R., Smarandache, I., Parallel state space construction for modelchecking (2001) LNCS, (2057), pp. 217-234. , Model Checking Software; Garrett, J., (2005) Ajax: A New Approach to Web Applications., , http://www.adaptivepath.com/publications/essays/archives/000385.php; Heydon, A., Najork, M., Mercator: A scalable, extensible Web crawler (1999) Proceedings of the International World Wide Web Conference, 2 (4), pp. 219-229; Lage, J.P., Silva A S, D.A., Golgher, P.B., Laender, A.H.F., Automatic generation of agents for collecting hidden Webpages for data extraction (2004) Data Knowl. Eng., 49 (2), pp. 177-196; Levenshtein, V.L., Binary codes capable of correcting deletions, insertions, and reversals (1996) Cybernetics Control Theory, 10, pp. 707-710; Madhavan, J., D, K.O., Kot, L., Ganapathy, V., Rasmussen, A., Halevy, A., Google's deep Web crawl (2008) Proc. VLDB Endow., 1 (2), pp. 1241-1252; Maxwell, S., Delaney, H., (2004) Designing Experiments and Analyzing Data: A Model Comparison Perspective., , Lawrence Erlbaum, U.K; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE'03)., pp. 260-269. , IEEE Computer Society, Los Alamitos, CA; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 256-267; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling Ajax by inferring user interface state changes (2008) Proceedings of the 8th International Conference on Web Engineering (ICWE'08)., pp. 122-134. , IEEE Computer Society, Los Alamitos, CA; Mesbah, A., Van Deursen, A., Migrating multi-page web applications to single-page AJAX interfaces (2007) Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR, pp. 181-190. , DOI 10.1109/CSMR.2007.33, 4145036, Proceedings - CSMR 2007: 11th European Conference on Software Maintenance and Reengineering - Software Evolution in Complex Software Intensive Systems; Mesbah, A., Prasad, M.R., Automated cross-browser compatibility testing (2011) Proceedings of the 33rd ACM/ IEEE International Conference on Software Engineering (ICSE'11), pp. 561-570. , ACM Press, New York, NY; Mesbah, A., Van Deursen, A., A component- and push-based architectural style for Ajax applications (2008) J. Syst. Softw., 81 (12), pp. 2194-2209; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of Ajax user interfaces (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE'09)., pp. 210-220. , IEEE Computer Society, Los Alamitos, CA; Ntoulas, A., Zerfos, P., Cho, J., Downloading textual hidden Web content through keyword queries (2005) Proceedings of the ACM/IEEE Joint Conference on Digital Libraries, pp. 100-109. , Proceedings of the 5th ACM/IEEE Joint Conference on Digital Libraries - Digital Libraries: Cyberinfrastructure for Research and Education; Pinkerton, B., Finding what people want: Experiences with the Web crawler (1994) Proceedings of the 2nd International World Wide Web Conference., 94, pp. 17-20; Raghavan, S., Garcia-Molina, H., Crawling the hidden Web (2001) Proceedings of the 27th International Conference on Very Large Data Bases (VLDB'01)., pp. 129-138; Roest, D., Mesbah, A., Van Deursen, A., Regression testing Ajax applications: Coping with dynamism (2010) Proceedings of the 3rd International Conference on Software Testing, Verification and Validation (ICST'10)., pp. 128-136. , IEEE Computer Society, Los Alamitos, CA; Russell, A., (2006) Comet: Low Latency Data for the Browser, , http://alex.dojotoolkit.org/?p=545; Valmari, A., The state explosion problem (1998) Lectures on Petri Nets I: Basic Models: Advances in Petri Nets., pp. 429-528; W3C Web Storage, , http://dev.w3.org/html5/webstorage, W3C","Mesbah, A.; Department of Electrical and Computer Engineering, , V6T1Z4 Vancouver, BC, Canada; email: amesbah@ece.ubc.ca",,,,,,,,15591131,,,,"English","ACM Trans. Web",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84859409079
"Yin J., Yu D., Ma S.","55547574700;55700453200;7403725006;","An automatic testing framework applied on LIW and implementation",2012,"Journal of Theoretical and Applied Information Technology","46","2",,"648","653",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872009476&partnerID=40&md5=e375c35c0359c89edb06fc5a2febf719","State Key Lab. of Software Development Environment, Beihang University, Beijing 100191, Beijing, China","Yin, J., State Key Lab. of Software Development Environment, Beihang University, Beijing 100191, Beijing, China; Yu, D., State Key Lab. of Software Development Environment, Beihang University, Beijing 100191, Beijing, China; Ma, S., State Key Lab. of Software Development Environment, Beihang University, Beijing 100191, Beijing, China","Software is an important component of Large Information Weapon (LIW). We propose a data-driven distributed automatic testing framework, which is based on the analysis of LIW testing requirements, and it supports the whole process of distributed software test. The main components of the framework consist of distributed test designing environment, execution and control environment and test results show environment. We present a set of GUI scripting language specification for automatic testing, the script language with object-oriented features. Unlike the previous GUI automatic testing scripting language, this specification records the information of the node where the test cases will be running. As an application of the framework, we develop an automatic testing system (DMATS). DMATS has been put into practices in XXX-business electronic system, and it is proved the feasibility of the framework. © 2005 - 2012 JATIT & LLS. All rights reserved.","Automatic testing; Large information weapons; Test language","Automatic testing; Graphical user interfaces; Specifications; Automatic testing system; Control environment; Distributed software; Electronic systems; Object-oriented features; Script Languages; Scripting languages; Test case; Test language; Testing requirements; Whole process; Software testing",,,,,,,,"Offutt, J., Liu, S., Abdurazik, A., Generating Test Data From State-based Specifications (2005) The Journal of Software Testing, Verification and Reliability, 13 (1), pp. 25-53; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI Test Case Generation Using Automated Planning (2006) IEEE Transactions On Software Engineering, 27 (2), pp. 144-155; Offutt, J., Liu, S., Generating Test Data from SOFL Specifications (2004) The Journal of Systems and Software, 49 (1), pp. 49-62; Hengshan, W., Jinhong, W., Automatic testing model based on the validity of GUI states (2004) J. Huazhong Univ. of Sci. & Tech, 32 (12), pp. 34-36; Parveen, T., Tilley, S., Gonzalez, G., A Case Study in Test Management (2007) Proceedings of the 45th Annual Southeast Regional Conference, pp. 82-87. , Mar. 23-24; Koh, E., Kerne, A., Berry, S., Test Collection Management and Labeling System (2009) Proceedings of the 9th ACM Symposium On Document Engineering, pp. 39-42. , Sep. 15-18; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) SIGSOFT Software Engineering Notes, 25, pp. 30-39; Shahamiri, S.R., An automated framework for software test oracle (2011) Information and Software Technology, 53, pp. 774-788; Hierons, R.M., Using status messages in the distributed test architecture (2009) Information and Software Technology, 51 (7), pp. 1123-1130; Hierons, R.M., Ural, H., Overcoming controllability problems with fewest channels between testers (2009) Computer Networks, 53 (5), pp. 680-690","Yin, J.; State Key Lab. of Software Development Environment, Beihang University, Beijing 100191, Beijing, China",,,"Asian Research Publishing Network (ARPN)",,,,,19928645,,,,"English","J. Theor. Appl. Inf. Technol.",Article,"Final","",Scopus,2-s2.0-84872009476
"Gove R., Faytong J.","26642390300;47060929900;","Machine Learning and Event-Based Software Testing: Classifiers for Identifying Infeasible GUI Event Sequences",2012,"Advances in Computers","86",,,"109","135",,13,"10.1016/B978-0-12-396535-6.00004-1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864145738&doi=10.1016%2fB978-0-12-396535-6.00004-1&partnerID=40&md5=9c6271bd53fffd473e4d15f96b231430","Human-Computer Interaction Lab, Department of Computer Science, University of Maryland, College Park, MD, United States; Department of Computer Science, University of Maryland, College Park, MD, United States","Gove, R., Human-Computer Interaction Lab, Department of Computer Science, University of Maryland, College Park, MD, United States; Faytong, J., Department of Computer Science, University of Maryland, College Park, MD, United States","Machine learning is a technique not widely used in software testing even though the broader field of software engineering has used machine learning to solve many problems. In this chapter we present an overview of machine learning approaches for many problems in software testing, including test suite reduction, regression testing, and faulty statement identification. We also present our work using machine learning to augment automatic model-based test case generation for graphical user interfaces (GUIs). A model of the GUI is used to generate test cases, which are event sequences, to be executed on the system under test. Such models may not completely represent the GUI, and therefore may allow infeasible test cases to be generated that violate constraints in the GUI. We use two different machine learning techniques (support vector machines and grammar induction) to identify infeasible test cases (i.e., test requirements that cannot be satisfied). We demonstrate that these techniques are robust across different-length test cases and different GUI constraints. © 2012 Elsevier Inc.","Event-based testing; Grammar induction; GUI testing; Machine learning; Model-based testing; Software testing; Support vector machines",,,,,,"Fulbright Association","Jorge Faytong was a graduate student in Computer Science at the University of Maryland at College Park where his work covered artificial intelligence, machine learning, software testing, and information visualization. He previously studied at Escuela Superior Politécnica del Litoral in Guayaguil, Ecuador. His studies at the University of Maryland were supported by a Fulbright scholarship. He passed away in February, 2012.",,"Baskiotis, N., Sebag, M., Gaudel, M.C., Gouraud, S., A machine learning approach for statistical software testing (2007) Proceedings of the 20th International Joint Conference on Artificial Intelligence, pp. 2274-2279. , Morgan Kaufman Publishers Inc., San Francisco, CA, USA; Michail, A., Xie, T., Helping users avoid bugs in GUI applications (2005), pp. 107-116. , in: Proceedings of the 27th International Conference on Software Engineering, May; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Huang, S., Cohen, M., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation, , IEEE Computer Society, Washington, DC, USA; Vapnik, V.N., (1995) The Nature of Statistical Learning Theory, , Springer-Verlag New York Inc., New York, NY, USA; Hipp, J., Güntzer, U., Nakhaeizadeh, G., Algorithms for association rule mining-a general survey and comparison (2000) SIGKDD Explorations Newsletter, 2 (1), pp. 58-64; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Porat, S., Feldman, J.A., Learning automata from ordered examples (1991) Machine Learning, 7, pp. 109-138; Xie, T., Thummalapenta, S., Lo, D., Liu, C., Data mining for software engineering (2009) IEEE Computer, 42 (8), pp. 35-42; Ana Paiva, N.T., João, C.P.F., Vidal, R.F.A.M., A model-to-implementation mapping tool for automated model-based GUI testing (2005), pp. 450-464. , in: International Conference on Formal Engineering Methods; Chen, W.-K., Shen, Z.-W., (2010), pp. 145-151. , GUI test-case generation with macro-event contracts, in: Proceedings of the Second International Conference on Software Engineering and Data Mining, June; Hoefel, G., Elkan, C., Learning a two-stage SVM/CRF sequence classifier (2008) Proceedings of the 17th ACM Conference on Information and Knowledge Management, pp. 271-278. , ACM, New York, NY, USA; Chen, H., Zhou, H.-X., Hu, X., Yoo, I., Classification comparison of prediction of solvent accessibility from protein equences (2004) Proceedings of the Second Asia-Pacific Bioinformatics Conference, pp. 333-338. , Australian Computer Society, Inc., Darlinghurst, Australia; Liao, L., Noble, W.S., Combining pairwise sequence similarity and support vector machines for remote protein homology detection (2002) Proceedings of the Sixth Annual International Conference on Computational Biology, pp. 225-232. , ACM, New York, NY, USA; Last, M., Data mining for software testing (2005) Data Mining and Knowledge Discovery Handbook, pp. 1239-1248. , Springer, USA, O. Maimon, L. Rokach (Eds.); Murphy, C., Kaiser, G., Arias, M., An approach to software testing of machine learning applications (2007), pp. 167-172. , in: Proceedings of the 19th International Conference on Software Engineering and Knowledge Engineering; Gondra, I., Applying machine learning to software fault-proneness prediction (2008) Journal of Systems and Software, 81 (2), pp. 186-195; Renieres, M., Reiss, S., (2003), pp. 30-39. , Fault localization with nearest neighbor queries, in: Proceedings of the 18th IEEE International Conference on Automated Software Engineering, October; Briand, L.C., Labiche, Y., Liu, X., Using machine learning to support debugging with tarantula (2007) Proceedings of the 18th IEEE International Symposium on Software Reliability Engineering, pp. 137-146. , IEEE Computer Society, Washington, DC, USA; Briand, L.C., Labiche, Y., Bawar, Z., Spido, N.T., Using machine learning to refine category-partition test specifications and test suites (2009) Information and Software Technology, 51 (11), pp. 1551-1564; Yilmaz, C., Cohen, M., Porter, A., Covering arrays for efficient fault characterization in complex configuration spaces (2006) IEEE Transactions on Software Engineering, 32 (1), pp. 20-34; von Mayrhauser, A., Anderson, C.W., Chen, T., Mraz, R., Gideon, C., On the promise of neural networks to support software testing (1998) Computational Intelligence in Software Engineering, , World Scientific Publishing Co., Inc; Last, M., Kandel, A., Automated test reduction using an info-fuzzy network (2003) Software Engineering with Computational Intelligence, pp. 235-258. , Kluwer Academic Publishers; Last, M., Friedman, M., Kandel, A., The data mining approach to automated software testing (2003) Proceedings of the Ninth ACM International Conference on Knowledge Discovery and Data Mining, pp. 388-396. , ACM, New York, NY, USA; Weiss, G.M., Timeweaver: a genetic algorithm for identifying predictive patterns in sequences of events (1999) Proceedings of the Genetic and Evolutionary Computation Conference, pp. 718-725. , Morgan Kaufmann; Giordana, A., Terenziani, P., Botta, M., Recognizing and discovering complex events in sequences (2002) Proceedings of the 13th International Symposium on the Foundations of Intelligent Systems, pp. 374-382. , Springer-Verlag, London, UK; Galassi, U., Giordana, A., Learning regular expressions from noisy sequences (2005), pp. 92-106s. , in: Proceedings of the Sixth International Symposium on Abstraction, Reformulation and Approximation; Bex, G.J., Neven, F., Schwentick, T., Vansummeren, S., Inference of concise regular expressions and DTDs (2010) ACM Transactions on Database Systems, 35 (2), pp. 1-47; Ferenc, R., Beszedes, A., Fulop, L., Lele, J., Design pattern mining enhanced by machine learning (2005) Proceedings of the 21st IEEE International Conference on Software Maintenance, pp. 295-304. , IEEE Computer Society, Washington, DC, USA; Dietterich, T.G., Machine learning for sequential data: a review (2002) Structural, Syntactic, and Statistical Pattern Recognition, pp. 15-30. , Springer Verlag, London, UK; Hopcroft, J., Ullman, J., (1979) Introduction to Automata Theory, Languages and Computation, , Addison-Wesley, Reading Massachusetts; Unold, O., Grammar-based classifier system: a universal tool for grammatical inference (2008) WSEAS Transactions on Computers, 7, pp. 1584-1593; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007) Proceedings of the 22nd IEEE International Conference on Automated Software Engineering, , IEEE Computer Society, Washington, DC, USA","Gove, R.; Human-Computer Interaction Lab, , College Park, MD, United States",,,"Academic Press Inc.",,,,,00652458,,,,"English","Adv. Comput.",Book Chapter,"Final","",Scopus,2-s2.0-84864145738
"Dev R., Jääskeläinen A., Katara M.","55177831000;24923055000;7801543558;","Model-Based GUI Testing. Case Smartphone Camera and Messaging Development.",2012,"Advances in Computers","85",,,"65","122",,3,"10.1016/B978-0-12-396526-4.00002-3","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859514072&doi=10.1016%2fB978-0-12-396526-4.00002-3&partnerID=40&md5=1220aba0436b10b00c2873531c7dc10d","Symbio Finland Oy Devices and Telecom BU, FI-33210 Tampere, Finland; Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland","Dev, R., Symbio Finland Oy Devices and Telecom BU, FI-33210 Tampere, Finland; Jääskeläinen, A., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Katara, M., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland","Model-based software testing can be used to generate tests automatically from a formal model describing the system under test. Along with traditional test automation, it can improve the quality of testing and reduce the resources required for it. In this chapter, we will take a look at different approaches to model-based testing, examine its benefits and drawbacks, and analyze what adopting it would entail. The focus of the chapter is on graphical user interface (GUI) testing. We will also present a case study demonstrating the ability of a model-based testing tool to produce long-period tests and run tests on multiple smartphone devices in parallel. © 2012 Elsevier Inc..","GUI testing; Model-based testing; Smartphone application testing; TEMA tool; Testability Driver",,,,,,,,,"Dev, R., UI Test Automation in Symbian Camera Software Development (2011), Master's thesis, Tampere University of Technology, Tampere, Finland, June; TEMA Model-based Testing, , http://tema.cs.tut.fi/, Tampere University of Technology, Accessed December 2011; Testability Driver, , http://projects.developer.nokia.com/Testabilitydriver, Nokia Developer, Accessed August 2011; Craig, R.D., Jaskiel, S.P., (2002) Systematic Software Testing, , Artech House, Boston, MA, USA; Davis, R., What is Gray/grey Box Testing?, , http://www.robdavispe.com/free2/software-qa-testing-test-tester-2210.html, Accessed December 2011; Software Quality Assurance Interview Questions and Answers, , http://sqa.fyicenter.com/FAQ/Software-QA-Testing/, Software QA and Testing Resource Center, Accessed December 2011; Tretmans, J., Model based testing-property checking for real (2011), http://www-sop.inria.fr/everest/events/cassis04/Slides/tretmans.ppt, Keynote presentation at the CASSIS International Workshop (Construction and Analysis of Safe, Secure and Interoperable Smart devices), 2004. Accessed December; Utting, M., Legeard, B., (2007) Practical Model-Based Testing-A Tools Approach, , Morgan Kaufmann, San Francisco, CA, USA; Fowler, M., Continuous Integration, , http://www.martinfowler.com/articles/continuousIntegration.html, Accessed December 2011; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley, ACM Press, New York, NY, USA; Buwalda, H., Action figures (2003) Software Testing and Quality Engineering Magazine, pp. 42-47; Qt-Cross-platform Application and UI Framework, , http://qt.nokia.com/, Nokia, Accessed December 2011; Ruby Programming Language, , http://www.ruby-lang.org/en/, Ruby Community, Accessed December 2011; Olli-Pekka Puolitaival, Model-based Testing Tools (2011), http://www.cs.tut.fi/tapahtumat/testaus08/Olli-Pekka.pdf, Presentation at Tampere Testing Day 2008, available at , 2008. Accessed December; Utting, M., Pretschner, A., Legeard, B., A taxonomy of model-based testing (2011), http://www.cs.waikato.ac.nz/pubs/wp/2006/uow-cs-wp-2006-04.pdf, Working Paper 4, Department of Computer Science, University of Waikato, Hamilton, New Zealand. Available at , April 2006. Accessed December; Olli-Pekka Puolitaival, Adapting Model-based Testing to Agile Context Master's thesis, University of Oulu, VTT Publications 694, Espoo, Finland; Relieving the Software Testing Bottleneck, , http://www.origsoft.com/solutions/relieving-testing-bottlenecks/, Original Software, Accessed December 2011; Tretmans, J., A Formal Approach to Conformance Testing (1992), PhD thesis, Twente University, Enschede, The Netherlands; Kaner, C., Bach, J., Pettichord, B., (2002) Lessons Learned in Software Testing: A Context-Driven Approach, , Wiley, New York, NY, USA; Robinson, H., Finite state model-based testing on a shoestring (1999) Software Testing, , http://www.geocities.com/model_based_testing/shoestring.htm, Available at, Accessed December 2011; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for GUI systems (1998) Proceedings of the ACM/SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 1998), pp. 82-92; Memon, A.M., A Comprehensive Framework for Testing Graphical User Interfaces (2001), PhD thesis, University of Pittsburgh, Pittsburgh, PA, USA; Milner, R., (1982) A Calculus of Communicating Systems, , Springer-Verlag, Secaucus, NJ, USA; Milner, R., (1989) Communication and Concurrency, , Prentice Hall, Upper Saddle River, NJ, USA; Hoare, C.A.R., Communicating Sequential Processes, , http://www.usingcsp.com/cspbook.pdf, Available at, Accessed December 2011; Roscoe, A.W., (1997) The Theory and Practice of Concurrency, , Prentice Hall, Upper Saddle River, NJ, USA; International Organization for Standardization, ISO 8807 (1989), Information Processing Systems-Open Systems Interconnection-LOTOS-A Formal Description Technique Based on the Temporal Ordering of Observational Behaviour, International Organization for Standardization, Geneva, Switzerland; Karsisto, K., A New Parallel Composition Operator for Verification Tools (2003), Doctoral dissertation, Tampere University of Technology, Tampere, Finland. Number 420 in publications; Valmari, A., The state explosion problem (1998), 1491, pp. 429-528. , in: W. Reisig, G. Rozenberg (Eds.), Lectures on Petri Nets I: Basic Models, Lecture Notes in Computer Science, Springer, Berlin, Heidelberg; de Vries, R., Tretmans, J., On-the-fly conformance testing using SPIN (2000) Int. J. Softw. Tools Technol. Transf., 2 (4), pp. 382-393; Petri, C.A., Kommunikation mit Automaten [Communication with Automata] PhD thesis, University of Bonn, Bonn, Germany, June 1962. In German; Hoare, C.A.R., An axiomatic basis for computer programming (1969) Commun. ACM, 12 (10), pp. 576-580; van Lamsweerde, A., Formal specification: a roadmap (2000) Proceedings of the Conference on the Future of Software Engineering (ICSE 2000), pp. 147-159; UML, , http://www.omg.org/spec/UML/, Object Management Group, Inc., Accessed December 2011; http://www.conformiq.com/, Conformiq Inc., Accessed December 2011; Huima, A., Implementing Conformiq Qtronic (2007), 4581, pp. 1-12. , in: A. Petrenko, M. Veanes, J. Tretmans, W. Grieskamp (Eds.), Proceedings of the Joint Conference of the 19th IFIP International Conference on Testing of Communicating Systems and the 7th International Workshop on Formal Approaches to Testing of Software (TESTCOM/FATES 2007), Lecture Notes in Computer Science, Springer, Berlin, Heidelberg, June; NModel, , http://nmodel.codeplex.com/, Microsoft, Accessed December 2011; Jacky, J., Veanes, M., Campbell, C., Schulte, W., (2008) Model-based Software Testing and Analysis with C#, , Cambridge University Press, New York, NY, USA; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Testing concurrent object-oriented systems with Spec Explorer (2005), 3582, pp. 542-547. , in: J. Fitzgerald, I.J. Hayes, A. Tarlecki (Eds.), Proceedings of the International Symposium of Formal Methods Europe (FME 2005), Lecture Notes in Computer Science, Springer, Berlin, Heidelberg, July; Model-based Testing with SpecExplorer, , http://research.microsoft.com/en-us/projects/specexplorer/, Microsoft, Accessed December 2011; Helovuo, J., Leppänen, S., Exploration testing (2001) Proceedings of the 2nd International Conference on Application of Concurrency to System Design (ACSD 2001), pp. 201-210; Belli, F., Finite-state testing of graphical user interfaces (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSRE 2001), pp. 34-43; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: approach and case study (2006) Softw. Test. Verification Reliab. (STVR), 16 (1), pp. 3-32; Legeard, B., Peureux, F., Generation of functional test sequences from B formal specifications-presentation and industrial case study (2001) Proceedings of the 16th IEEE International Conference on Automated Software Engineering (ASE 01), pp. 377-381; Legeard, B., Peureux, F., Utting, M., Automated boundary testing from Z and B (2002), 2391, pp. 21-40. , in: Lars-Henrik Eriksson, Peter Alexander Lindsay (Eds.), Proceedings of the International Symposium of Formal Methods Europe (FME 2002), Lecture Notes in Computer Science Springer, Berlin, Heidelberg, July; Bouquet, F., Legeard, B., Reification of executable test scripts in formal specification-based test generation: the Java Card transaction mechanism case study (2003), 2805, pp. 778-795. , in: K. Araki, S. Gnesi, D. Mandrioli (Eds.), Proceedings of the International Symposium of Formal Methods Europe (FME 2003), Lecture Notes in Computer Science, Springer, Berlin, Heidelberg, September; Bouquet, F., Jaffuel, E., Legeard, B., Peureux, F., Utting, M., Requirements traceability in automated test generation-application to smart card software validation (2005) Proceedings of the 1st International Workshop on Advances in Model-Based Software Testing (A-MOST 2005), pp. 1-7; Applegate, D.L., Bixby, R.E., Chvátal, V., Cook, W.J., The Traveling Salesman Problem: A Computational Study (2007) Princeton Series in Applied Mathematics, , Princeton University Press, Princeton, NJ, USA; Eiselt, H.A., Gendreau, M., Laporte, G., Arc routing problems, part I: The Chinese postman problem (1995) Oper. Res., 43 (2), pp. 231-242; Hamlet, D., When only random testing will do (2006) Proceedings of the 1st International Workshop on Random Testing (RT '06), pp. 1-9; Hart, P., Nilsson, N., Raphael, B., A formal basis for the heuristic determination of minimum cost paths (1968) IEEE Trans. Syst. Sci. Cybern., 4 (2), pp. 100-107; Pyhälä, T., Heljanko, K., Specification coverage aided test selection (2003) Proceedings of the 3rd International Conference on Application of Concurrency to System Design (ACSD 2003), pp. 187-195; Kervinen, A., Virolainen, P., Heuristics for faster error detection with automated black box testing (2005) Electron. Notes Theor. Comput. Sci., 111, pp. 53-71; Csöndes, T., Kotnyek, B., Szabó, J.Z., Application of heuristic methods for conformance test selection (2002) Eur. J. Oper. Res., 142 (1), pp. 203-218; Kervinen, A., Towards Practical Model-Based Testing: Improvements in Modelling and Test Generation (2008), Doctoral dissertation, Tampere University of Technology, Tampere, Finland, November. Number 769 in publications; Malik, Q.A., Jääskeläinen, A., Virtanen, H., Katara, M., Abbors, F., Truscan, D., Lilius, J., Model-based testing using system vs. test models-what is the difference? (2010) Proceedings of the 17th IEEE International Conference on Engineering of Computer-Based Systems (ECBS 2010) (poster session), pp. 291-299; Jääskeläinen, A., Katara, M., Kervinen, A., Heiskanen, H., Maunumaa, M., Tuula Pääkkönen, Model-based testing service on the web (2008), 5047, pp. 38-53. , K. Suzuki, T. Higashino, A. Ulrich, T. Hasegawa (Eds.), Proceedings of the Joint Conference of the 20th IFIP International Conference on Testing of Communicating Systems and the 8th International Workshop on Formal Approaches to Testing of Software (TESTCOM/FATES 2008), Lecture Notes in Computer Science, Springer, Berlin, Heidelberg, June; Katara, M., Kervinen, A., Making model-based testing more agile: a use case driven approach (2007), 4383, pp. 219-234. , in: E. Bin, A. Ziv, S. Ur (Eds.), Proceedings of the 2nd International Haifa Verification Conference on Hardware and Software, Verification and Testing (HVC 2006), Lecture Notes in Computer Science, Springer, Berlin, Heidelberg, March; Nieminen, A., Jääskeläinen, A., Virtanen, H., Katara, M., A comparison of test generation algorithms for testing application interactions (2011), in: Proceedings of the 11th International Conference On Quality Software (QSIC), IEEE Computer Society, Los Alamitos, CA, USA, to appear; Jääskeläinen, A., A Domain-specific Tool for Creation and Management of Test Models (2008), Master's thesis, Tampere University of Technology, Tampere, Finland, January; Heiskanen, H., Jääskeläinen, A., Katara, M., Debug support for model-based GUI testing (2010) Proceedings of the 3rd IEEE International Conference on Software Testing, Verification, and Validation (ICST 2010), pp. 25-34; Jääskeläinen, A., Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Takala, T., Virtanen, H., Automatic GUI test generation for smartphone applications-an evaluation (2009) Proceedings of the Software Engineering in Practice track of the 31st International Conference on Software Engineering (ICSE 2009), pp. 112-122. , (companion volume); Jääskeläinen, A., Takala, T., Katara, M., Model-based GUI testing of smartphone applications: Case S60 and Linux (2011) Model-Based Testing for Embedded Systems, Computational Analysis, Synthesis, and Design of Dynamic Systems, , CRC Press, Boca Raton, FL, USA, J. Zander, I. Schieferdecker, P.J. Mosterman (Eds.); Jääskeläinen, A., Takala, T., Katara, M., Model-based GUI testing of Android applications (2012) Software Test Automation Experiences, , Addison-Wesley (Pearson Education), Upper Saddle River, NJ, USA, D. Graham, M. Fewster (Eds.); Takala, T., Katara, M., Harty, J., Experiences of system-level model-based GUI testing of an Android application (2011) Proceedings of the 4th IEEE International Conference on Software Testing, Verification, and Validation (ICST 2011), pp. 377-386; Jääskeläinen, A., (2011), Design, Implementation and Use of a Test Model Library for GUI Testing of Smartphone Applications, Doctoral dissertation, Tampere University of Technology, Tampere, Finland, January. Number 948 in publications; Janicki, M., Katara, M., Pääkkönen, T., Obstacles and opportunities in deploying model-based GUI testing of mobile software: a survey, STVR, to appear","Dev, R.; Symbio Finland Oy Devices and Telecom BU, FI-33210 Tampere, Finland",,,,,,,,00652458,,,,"English","Adv. Comput.",Book Chapter,"Final","",Scopus,2-s2.0-84859514072
"Mesbah A., Van Deursen A., Roest D.","17345931800;7003969355;36167097800;","Invariant-based automatic testing of modern web applications",2012,"IEEE Transactions on Software Engineering","38","1", 5728834,"35","53",,100,"10.1109/TSE.2011.28","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84856558128&doi=10.1109%2fTSE.2011.28&partnerID=40&md5=4de36660d150d466651fcc5d10e220f7","Department of Electrical and Computer Engineering, 2332 Main Mall, University of British Columbia, Vancouver, BC V6T 1Z4, Canada; Department of Software Technology, Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, Delft 2628CD, Netherlands","Mesbah, A., Department of Electrical and Computer Engineering, 2332 Main Mall, University of British Columbia, Vancouver, BC V6T 1Z4, Canada; Van Deursen, A., Department of Software Technology, Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, Delft 2628CD, Netherlands; Roest, D., Department of Software Technology, Faculty of Electrical Engineering, Mathematics and Computer Science, Delft University of Technology, Mekelweg 4, Delft 2628CD, Netherlands","Ajax-based Web 2.0 applications rely on stateful asynchronous client/server communication, and client-side runtime manipulation of the DOM tree. This not only makes them fundamentally different from traditional web applications, but also more error-prone and harder to test. We propose a method for testing Ajax applications automatically, based on a crawler to infer a state-flow graph for all (client-side) user interface states. We identify Ajax-specific faults that can occur in such states (related to, e.g., DOM validity, error messages, discoverability, back-button compatibility) as well as DOM-tree invariants that can serve as oracles to detect such faults. Our approach, called Atusa, is implemented in a tool offering generic invariant checking components, a plugin-mechanism to add application-specific state validators, and generation of a test suite covering the paths obtained during crawling. We describe three case studies, consisting of six subjects, evaluating the type of invariants that can be obtained for Ajax applications as well as the fault revealing capabilities, scalability, required manual effort, and level of automation of our testing approach. © 2006 IEEE.","Ajax; Automated testing; web applications","Ajax; Automated testing; Back-button; Client/server; DOM tree; Error messages; Error prones; Interface state; Invariant checking; Runtimes; Web 2.0 applications; WEB application; Automatic testing; User interfaces; World Wide Web; Java programming language",,,,,,,,"Andrews, A.A., Offutt, J., Alexander, R.T., Testing Web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , DOI 10.1007/s10270-004-0077-7; Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A., Ernst, M.D., Finding bugs in dynamic web applications (2008) Proc. Int'l Symp. Software Testing and Analysis, pp. 261-272; Barnett, M., Deline, R., Fahndrich, M., Rustan, K., Leino, M., Schulte, W., Verification of object-oriented programs with invariants (2004) J. Object Technology, 3 (6), pp. 1-30; Benedikt, M., Freire, J., Godefroid, P., Veriweb: Automatically testing dynamic web sites (2002) Proc. 11th Int'l Conf. World Wide Web, pp. 654-668; Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) FoSE 2007: Future of Software Engineering, pp. 85-103. , DOI 10.1109/FOSE.2007.25, 4221614, FoSE 2007: Future of Software Engineering; Bezemer, C.P., Mesbah, A., Van Deursen, A., Automated security testing of web widget interactions (2009) Proc. Seventh Joint Meeting of the European Software Eng. Conf. and the ACM SIGSOFT Symp. The Foundations of Software Eng., pp. 81-91; Binder, R.V., (1999) Testing Object-Oriented Systems: Models Patterns, and Tools, , Addison-Wesley; Clarke, L.A., Rosenblum, D.S., A historical perspective on runtime assertion checking in software development (2006) ACM SIGSOFT Software Eng. Notes, 31 (3), pp. 25-37; De Alfaro, L., Model checking the world wide web (2001) Proc. 13th Int'l Conf. Computer Aided Verification, pp. 337-349; De Alfaro, L., Henzinger, T.A., Mang, F.Y.C., MCWEB: A model-checking tool for web site debugging (2001) Proc. World Wide Web Conf., posters; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user-session data to support web application testing (2005) IEEE Transactions on Software Engineering, 31 (3), pp. 187-202. , DOI 10.1109/TSE.2005.36; Ernst, M.D., Cockrell, J., Griswold, W.G., Notkin, D., Dynamically discovering likely program invariants to support program evolution (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 99-123. , DOI 10.1109/32.908957; Garrett, J., Ajax: A new approach to web applications (2005) Adaptive Path, , http://www.adaptivepath.com/publications/essays/archives/000385.php, , Feb; Groeneveld, F., Mesbah, A., Van Deursen, A., (2010) Automatic Invariant Detection in Dynamic Web Applications, pp. 2010-2037. , Technical Report TUD-SERG-, Delft Univ. of Technology; Halfond, W., Anand, S., Orso, A., Precise interface identification to improve testing and analysis of web applications (2009) Proc. 18th Int'l Symp. Software Testing and Analysis, pp. 285-296; Halfond, W., Orso, A., Improving test case generation for web applications using automated interface discovery (2007) Proc. Sixth Joint Meeting of the European Software Eng. Conf. and the ACM SIGSOFT Symp. The Foundations of Software Eng., pp. 145-154; Halfond, W., Orso, A., Automated identification of parameter mismatches in web applications (2008) Proc. 16th Int'l Symp. Foundations of Software Eng., pp. 181-191; Huang, Y.-W., Tsai, C.-H., Lin, T.-P., Huang, S.-K., Lee, D.T., Kuo, S.-Y., A testing framework for Web application security assessment (2005) Computer Networks, 48 (5), pp. 739-761. , DOI 10.1016/j.comnet.2005.01.003, PII S1389128605000101, Web Traffic; Kals, S., Kirda, E., Kruegel, C., Jovanovic, N., SecuBat: A web vulnerability scanner (2006) Proceedings of the 15th International Conference on World Wide Web, pp. 247-256. , DOI 10.1145/1135777.1135817, Proceedings of the 15th International Conference on World Wide Web; Levenshtein, V.L., Binary codes capable of correcting deletions, insertions, and reversals (1996) Cybernetics and Control Theory, 10, pp. 707-710; Marchetto, A., Ricca, F., Tonella, P., A Case study-based comparison of web testing techniques applied to ajax web applications (2008) Int'l J. Software Tools for Technology Transfer, 10 (6), pp. 477-492; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) Proc. IEEE First Int'l Conf. Software Testing Verification and Validation, pp. 121-130; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling ajax by inferring user interface state changes (2008) Proc. Eighth Int'l Conf. Web Eng., pp. 122-134; Mesbah, A., Van Deursen, A., Migrating multi-page web applications to single-page AJAX interfaces (2007) Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR, pp. 181-190. , DOI 10.1109/CSMR.2007.33, 4145036, Proceedings - CSMR 2007: 11th European Conference on Software Maintenance and Reengineering - Software Evolution in Complex Software Intensive Systems; Mesbah, A., Prasad, M., Automated cross-browser compatibility testing Proc. 33rd Int'l Conf. Software Eng., 2011; Mesbah, A., A.Van Deursen, A., A component-and push-based architectural style for ajax applications (2008) J. Systems and Software, 81 (12), pp. 2194-2209; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of ajax user interfaces (2009) Proc.IEEE 31st Int'l Conf. Software Eng., pp. 210-220; Meyer, B., Seven principles of software testing (2008) Computer, 41 (8), pp. 99-101. , Aug; Pattabiraman, K., Zorn, B., DoDOM: Leveraging dom invariants for web 2.0 application robustness testing Proc.IEEE 21st Int'l Conf. Software Reliability Eng., 2010; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) Proceedings - International Conference on Software Engineering, pp. 25-34; Roest, D., Automated Regression Testing of Ajax Web Applications, 2010. , master's thesis, Delft Univ. of Technology, Feb; Roest, D., Mesbah, A., Van Deursen, A., Regression testing ajax applications: Coping with dynamism Proc. Third Int'l Conf. Software Testing, Verification and Validation, 2010, pp. 128-136; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for web applications (2005) Proc. IEEE/ACM 20th Int'l Conf. Automated Software Eng., pp. 253-262; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing web applications (2007) Proc. IEEE 18th Int'l Symp. Software Reliability, pp. 117-126; Stepien, B., Peyton, L., Xiong, P., Framework testing of web applications using TTCN-3 (2008) Int'l J. Software Tools for Technology Transfer, 10 (4), pp. 371-381; Wassermann, G., Su, Z., Static detection of cross-site scripting vulnerabilities (2008) Proc. 30th Int'l Conf. Software Eng., pp. 171-180; Weyuker, E.J., On testing non-testable programs (1982) The Computer J., 25 (4), pp. 465-470; Yen, J.Y., Finding the k Shortest Loopless Paths in a Network (1971) Management Science, 17 (11), pp. 712-716; Yin, R.K., (2003) Case Study Research: Design and Methods, , third ed. Sage Publications Inc","Mesbah, A.; Department of Electrical and Computer Engineering, , Vancouver, BC V6T 1Z4, Canada; email: amesbah@ece.ubc.ca",,,,,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84856558128
"Fritsi D., Nagy C., Ferenc R., Gyimothy T.","55496107600;26667913000;6603559878;6603266536;","A layout independent GUI test automation tool for applications developed in magic/uniPaaS",2011,"SPLST'11 - Proceedings 12th Symposium on Programming Languages and Software Tools",,,,"249","261",,5,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84869744850&partnerID=40&md5=4156dbdb8c2b507cb98e5a5c2d62c445","Department of Software Engineering, University of Szeged, Hungary","Fritsi, D., Department of Software Engineering, University of Szeged, Hungary; Nagy, C., Department of Software Engineering, University of Szeged, Hungary; Ferenc, R., Department of Software Engineering, University of Szeged, Hungary; Gyimothy, T., Department of Software Engineering, University of Szeged, Hungary","A good software development process involves thorough testing phases, that are usually expensive, but necessary to deliver a reliable and high quality product. Testing an application via its graphical user interface requires lots of manual work, even if some steps of GUI testing can be automated. Test automation tools are a great help for testers, particularly for regression tests. However these tools still lack some important features and still require manual work to maintain the test cases. For instance, if the layout of a window is changed without affecting the main functionality of the application, all test cases testing the window must be re-recorded again. This hard maintenance work is one of the greatest problems with the regression tests of GUI applications. In our paper we propose an approach to use the GUI information stored in the source code during automatic testing processes to create layout independent test scripts. With this technique, the already recorded tests scripts will be unaffected by minor changes in the GUI. It reduces the maintenance effort of very expensive regression tests where thousands of test cases have to be maintained by testing teams. The idea was motivated by testing an application developed in a fourth generation language, Magic/uniPaaS. In this language the layout of the GUI elements (structure of the window, position and size of controls, etc.) are stored in the code and it can be gathered via static code analysis. We implemented the presented approach for Magic/uniPaaS, and our Magic Test Automation tool is used by our industrial partner who has developed applications in Magic/uniPaaS for more than a decade.",,"Developed applications; GUI applications; GUI testing; High-quality products; Industrial partners; Maintenance work; Manual work; Regression tests; Software development process; Source codes; Static code analysis; Test automation tool; Test case; Test scripts; Automatic testing; Automation; Computer software; Maintenance; Regression analysis; Graphical user interfaces",,,,,,,,"Buwalda, H., (1996) Automated Testing With Action Words, Abandoning Record and Playback, , In Proceedings of the EuroStar Conference; Buwalda, H., Kasdorp, M., (1999) Getting Automated Testing Under Control, Software Testing and Quality Engineering, , STQE magazine, division of Software Quality Engineering, nov/dec; Dustin, E., Garrett, T., Gauf, B., (2009) Implementing Automated Software Testing: How to Save Time and Lower Costs While Raising Quality, , Addison-Wesley Professional, 1st edition; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , ACM Press/Addison-Wesley Publishing Co., New York, NY, USA; Ganov, S.R., Killmar, C., Khurshid, S., Dewayne, E., Perry. Test generation for graphical user interfaces based on symbolic execution (2008) Proceedings of the 3rd International Workshop On Automation of Software Test, AST '08, pp. 33-40. , New York, NY, USA, ACM; Hinz, J., Gijsen, M., (2009) Fifth Generation Scriptless and Advanced Test Automation Technologies, , http://www.testars.com/docs/5GTA.pdf, accessed on 2011 August; Kaner, C., (2000) Architectures of Test Automation, , http://www.kaner.com/pdfs/testarch.pdf, accessed on 2011 August; Kit, E., Integrated Effective Test Design and Automation Software Development, , Software Development online, feb 1999; Li, K., Menggi, W., (2005) Effective GUI Test Automation, , SYBEX Inc., Alameda, CA, USA; Yongzhong, L., Yan, D., Nie, S., Wang, C., Development of an improved GUI automation test system based on event-flow graph (2008) Proceedings of the 2008 International Conference On Computer Science and Software Engineering, 2, pp. 712-715. , IEEE Computer Society; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning IEEE Transactions On Software Engineering, 27 (2), pp. 144-155. , feb 2001; Nagy, C., Vidács, L., Rudolf, F., Gyimóthy, T., Kocsis, F., Kovács, I., Solutions For Reverse Engineering 4GL Applications, Recovering the Design of a Logistical Wholesale System, pp. 343-346. , In 15th European Conference on Software Maintenance and Reengineering (CSMR), march 2011; Peleska, J., Löding, H., Kotas, T., Test automation meets static analysis (2007) GI Jahrestagung, LNI, 110 (2), pp. 280-290. , GI; Posey, B., (2002) Just Enough Software Test Automation, , Prentice Hall PTR; Strang, R., Data driven testing for client/server applications (1996) Proceedings of the Fifth International Conference On Software Testing, Analysis and Reliability (STAR'96), pp. 395-400","Fritsi, D.; Department of Software Engineering, Hungary; email: frirsi@frontenart.com",,"Estonian Centre of Excellence in Computer Science, EXCS",,"12th Symposium on Programming Languages and Software Tools, SPLST 2011","5 November 2011 through 7 November 2011","Tallinn",93276,,9789949231782,,,"English","SPLST'11 - Proc. 12th Sym. Prog. Lang. Soft. Tools",Conference Paper,"Final","",Scopus,2-s2.0-84869744850
"Chang T.-H.","35179131400;","Using graphical representation of user interfaces as visual references",2011,"UIST'11 Adjunct - Proceedings of the 24th Annual ACM Symposium on User Interface Software and Technology",,,,"27","30",,6,"10.1145/2046396.2046411","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80955143418&doi=10.1145%2f2046396.2046411&partnerID=40&md5=d1a8de985a7e2fc4fb1838c92218291c","MIT CSAIL, 32 Vassar St., Cambridge, MA 02139, United States","Chang, T.-H., MIT CSAIL, 32 Vassar St., Cambridge, MA 02139, United States","Many user interfaces use indirect references to identify specific objects and devices. My thesis investigates using graphical representations of user interfaces (i.e. screenshots) as direct visual references to support various kinds of applications. Sikuli Script enables users to programmatically control GUIs without the support from the underlying applications. Sikuli Test lets GUI developers and testers create test scripts without coding. Deep Shot introduces a framework and interaction techniques to migrate work states across heterogeneous devices in one action, taking a picture. In addition to these pure pixel-based systems, PAX associates the pixel representation with the internal structures and metadata of the user interface. Based on these building blocks, we propose to develop a visual history system that enables users to search and browse what they have seen on their computer screens. We outline some interesting use cases and discuss the challenges in this ongoing work. © is held by the owner/author(s).","Accessibility API; GUI automation; GUI testing; Information reuse; Task migration","Accessibility API; Building blockes; Computer screens; Graphical representations; GUI testing; Heterogeneous devices; Information reuse; Interaction techniques; Internal structure; Pixel representation; Screenshots; Task migration; Test scripts; Visual reference; Application programming interfaces (API); Graphic methods; Information use; Metadata; Pixels; Graphical user interfaces",,,,,,,,"Chang, T.-H., Li, Y., Deep shot: A framework for migrating tasks across devices using mobile phone cameras CHI '11, , ACM. To appear; Chang, T.-H., Yeh, T., Miller, R.C., GUI testing using computer vision (2010) CHI '10, pp. 1535-1544. , New York, NY, USA ACM; Chang, T.-H., Yeh, T., Miller, R.C., Correlating the visual representation of user interfaces with their internal structures and metadata (2011) UIST '11, , ACM To appear; Dixon, M., Fogarty, J., Prefab: Implementing advanced behaviors using pixel-based reverse engineering of interface structure (2010) CHI '10, , Apr; Dixon, M., Leventhal, D., Fogarty, J., Content and hierarchy in pixel-based methods for reverse engineering interface structure (2011) CHI '11, , Feb; Hurst, A., Hudson, S., Automatically identifying targets users interact with during real world tasks (2010) IUI '10: Proceeding of the 15th Intelligent User Interfaces, , Jan; Potter, R.L., (1999) Pixel Data Access: Interprocess Communication in the User Interface for End-user Programming and Graphical Macros, , PhD thesis, College Park, MD, USA AAI9926789; St. Amant, R., Lieberman, H., Potter, R., Zettlemoyer, L., Programming by example: Visual generalization in programming by example (2000) Commun. ACM, 43 (3), pp. 107-114; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) UIST '09, pp. 183-192. , ACM; Zettlemoyer, L.S., St. Amant, R., A visual medium for programmatic control of interactive applications (1999) CHI '99, pp. 199-206. , New York, NY, USA ACM","Chang, T.-H.; MIT CSAIL, 32 Vassar St., Cambridge, MA 02139, United States; email: vgod@mit.edu",,"ACM Spec. Interest Groups Comput.-Hum. Interact. (SIGCHI);ACM Special Interest Groups on Computer Graphics (SIGGRAPH)",,"24th Annual ACM Symposium on User Interface Software and Technology, UIST 2011","16 October 2011 through 19 October 2011","Santa Barbara, CA",87245,,9781450307161,,,"English","UIST Adjunct - Proc. Annu. ACM Symp. User Interface Softw. Technol.",Conference Paper,"Final","",Scopus,2-s2.0-80955143418
"Prabhu J., Malmurugan N.","57189659665;55666085000;","A survey on automated GUI testing procedures",2011,"European Journal of Scientific Research","64","3",,"456","462",,5,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-81755161573&partnerID=40&md5=e1c5bd097165ad255aec5f67686aa0b4","Sathyabama University, Chennai, India","Prabhu, J., Sathyabama University, Chennai, India; Malmurugan, N., Sathyabama University, Chennai, India","A Graphical User Interface (GUI) testing tool is one to test applications user interface and to detect the correctness of applications functionality. This paper presents detail survey of the existing GUI testing tools namely Abbot, Jacareto, Pounder, JFC and Marathon based on the events and fields needed for an ideal GUI testing tool. This paper also summarizes various existing automated GUI testing approaches such as Performance Testing and Analysis (PTA), Model Based Testing (MBT), Combinatorial Interaction Testing (CIT), (GUI)-based Applications (GAPs). The feasibility of using java GUI capture and replay tools for GUI performance test automation has been studied. The severe limitations of GUI tools when used for recording and replaying realistic session of the real world Java applications have been also addressed. Various GUI testing tool are compared in terms of performance. © EuroJournals Publishing, Inc. 2011.","CIT; GAPs; Graphical User Interface; MBT; Performance Testing; PTA",,,,,,,,,"Adamoli, A., Zaparanuks, D., Jovic, M., Hauswirth, M., Automated GUI performance testing (2011) Software Quality Journal, , Apr 2011; Yuan, X., Memon, A.M., (2010) Generating Event Sequence-Based Test Cases Using GUI Runtime State Feedback, 36 (1). , Feb; Bryce, R.C., Memon, A.M., Test suite prioritization by interaction coverage (2007) DoSTA 2007: Workshop on Domain-Specific Approaches to Software Test Automation - In conjunction with the 6th ESEC/FSE Joint Meeting, pp. 1-7. , DOI 10.1145/1294921.1294922, DoSTA 2007: Workshop on Domain-Specific Approaches to Software Test Automation - In conjunction with the 6th ESEC/FSE Joint Meeting; Sampath, S., Bryce, R., Viswanath, G., Kandimalla, V., Koru, A.G., Prioritizing user-session-based test cases for web application testing (2008) Proc. IEEE Int'l Conf. Software Testing, Verification, and Validation, pp. 141-150. , Apr; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Transactions on Software Engineering, 37 (1). , Jan/Feb; Dustin, E., Rashka, J., Paul, J., Automated software testing: Introduction (2004) Management, and Performance, , Addison-Wesley, September; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley, September; Bertolino, A., Software testing research: Achievements, challenges, dreams FOSE ' 07: 2007 Future of Software Engineering, pp. 85-103. , Washington, DC, USA, 2007. IEEE Computer Society; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source GUI applications (2006) IEEE International Conference on Software Maintenance, ICSM, pp. 145-154. , DOI 10.1109/ICSM.2006.39, 4021332, ICSM 2006 Proceedings - 22nd IEEE International Conference on Software Maintenance; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, pp. 1-35; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Memon, A., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) Proceedings - 19th International Conference on Automated Software Engineering, ASE 2004, pp. 186-195. , Proceedings - 19th International Conference on Automated Software Engineering, ASE 2004; Mathur, A.P., (2008) Foundations of Software Testing: Fundamental Algorithms and Techniques, , Pearson Education; Memon, A.M., Developing testing techniques for event-driven pervasive computing applications Proceedings of the OOPSLA 2004 Workshop on Building Software for Pervasive Computing (BSPC 2004), , Oct. 2004; Tretmans, G.J., Brinksma, H., TorX: Automated model-based testing (2003) First European Conference on Model-Driven Software Engineering, pp. 31-43. , Nuremberg, Germany, A. Hartman and K. Dussa-Ziegler, Eds., December; Ural, H., Yang, B., A test sequence selection method for protocol testing (1991) IEEE Transactions on Communications, 39 (4), pp. 514-523; Marchetto, A., Tonella, P., Search-based testing of Ajax web applications (2009) 1st International Symposium on Search Based Software Engineering, pp. 3-12. , May; Offutt, J., Liu, S., Abdurazik, A., Ammann, P., Generating test data from state-based specifications (2003) Software Testing, Verification and Reliability, 13 (1), pp. 25-53; Brooks, P., Robinson, B., Memon, A.M., An initial characterization of industrial graphical user interface systems ICST 2009: Proceedings of the 2nd IEEE International Conference on Software Testing, Verification and Validation, 2009. , Washington, DC, USA: IEEE Computer Society; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context IEEE Transaction on Software Engineering; Athanasios, I., Margaris, log file formats for parallel applications: A review (2009) Int J Parallel Prog; http://www.allinterview.com/showanswers/27975.html; http://www.marathontesting.com; http://www.abbot.sourceforge.net; http://www.jacareto.sourceforge.net; http://www.pounder.sourceforge.net; http://www.junit.sourceforge.net; http://www.jfcunit.sourceforge.net","Prabhu, J.; Sathyabama University, Chennai, India; email: jprabhuit@rediffmail.com",,,,,,,,1450216X,,,,"English","Eur. J. Sci. Res.",Article,"Final","",Scopus,2-s2.0-81755161573
"Luna Robles E., Rossi G., Garrigós I.","54080047600;7402913455;55879204700;","WebSpec: A visual language for specifying interaction and navigation requirements in web applications",2011,"Requirements Engineering","16","4",,"297","321",,20,"10.1007/s00766-011-0124-1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80355133393&doi=10.1007%2fs00766-011-0124-1&partnerID=40&md5=f1f0f0c473c59f609af650d777b886c7","LIFIA, Facultad de Informática, UNLP, La Plata, Argentina; CICPBA, Buenos Aires, Argentina; Conicet, La Plata, Argentina; Lucentia Research Group, DLSI, University of Alicante, Alicante, Spain","Luna Robles, E., LIFIA, Facultad de Informática, UNLP, La Plata, Argentina, CICPBA, Buenos Aires, Argentina; Rossi, G., Conicet, La Plata, Argentina; Garrigós, I., Lucentia Research Group, DLSI, University of Alicante, Alicante, Spain","Web application development is a complex and time-consuming process that involves different stakeholders (ranging from customers to developers); these applications have some unique characteristics like navigational access to information, sophisticated interaction features, etc. However, there have been few proposals to represent those requirements that are specific to Web applications. Consequently, validation of requirements (e. g., in acceptance tests) is usually informal and as a result troublesome. To overcome these problems, we present WebSpec, a domain-specific language for specifying the most relevant and characteristic requirements of Web applications: those involving interaction and navigation. We describe WebSpec diagrams, discussing their abstraction and expressive power. With a simple though realistic example, we show how we have used WebSpec in the context of an agile Web development approach discussing several issues such as automatic test generation, management of changes in requirements, and improving the understanding of the diagrams through application simulation. © 2011 Springer-Verlag London Limited.","Code generation; Interaction; Simulation; Testing; Web requirements","Acceptance tests; Application simulation; Automatic test generation; Code Generation; Domain specific languages; Expressive power; Interaction; Interaction features; Management of change; Simulation; Time-consuming process; Visual language; WEB application; Web application development; Web development; Web requirements; Navigation; Problem oriented languages; World Wide Web; User interfaces",,,,,,,,"McDonald, A., Welland, R., Web engineering in practice (2001) Proceedings of the Fourth WWW10 Workshop On Web Engineering, pp. 21-30; Lowe, D., Web system requirements: An overview (2003) J Requir Eng, 8 (2), pp. 102-113. , http://dx, doi. org/10. 1007/s00766-002-0153-x; Jacobson, I., (1992) Object-oriented Software Engineering: A Use Case Driven Approach, , ACM Press/Addison-Wesley, Boston; Rossi, G., Schwabe, D., Modeling and implementing web applications using OOHDM (2008) Web Engineering, Modelling and Implementing Web Applications, pp. 109-155. , In: Rossi G, Pastor O, Schwabe D, Olsina L, Springer, Heidelberg; Valderas, P., Pelechano, V., Pastor, O., A transformational approach to produce Web applications prototypes from a Web requirements model (2007) Int J Web Eng Technol IJWET, 3 (1), pp. 4-42; Koch, N., Zhang, G., Escalona, M.J., (2006) Model Transformations From Requirements to Web System Design, , ICWE'06, Palo Alto, California, USA; Ceri, S., Fraternali, P., Bongio, A., Brambilla, M., Comai, S., Materna, M., (2003) Designing Data-intensive Web Applications, , Morgan Kaufman, Waltham; Gómez, J., Cachero, C., OO-H method: extending UML to model web interfaces (2003) Information Modeling for Internet Applications, pp. 144-173. , P. Bommelvan (Ed.), Hershey: IGI Publishing; Escalona, M.J., Koch, N., Requirements engineering for web applications-a comparative study (2004) J Web Eng, 2 (3), pp. 193-212; de Troyer, O., Casteleyn, S., Modeling complex processes for web applications using WSDM (2003) Proceedings of the 3rd International Workshop On Web-oriented Software Technologies, , http://www.dsic.upv.es/~west/iwwost03/articles.htm, Oviedo, Spain; Escalona, M.J., Koch, N., Metamodeling requirements of web systems (2006) Proceedings of the International Conference On Web Information System and Technologies (WEBIST 2006), pp. 310-317. , INSTICC, Setúbal, Portugal; Garrigós, I., Mazón, J.N., Trujillo, J., A requirement analysis approach for using i* in web engineering (2009) ICWE, LNCS, 5648, pp. 151-165; Martin, R.C., (2003) Agile Software Development: Principles, Patterns, and Practices, , Upper Saddle River: Prentice Hall PTR; Beck, K., Test driven development: By example (2002) Addison-Wesley Signature Series; Zheng, J., In regression testing selection when source code is not available (2005) Proceedings of the 20th IEEE/ACM International Conference On Automated Software Engineering, pp. 752-755. , http://doi.acm.org/10.1145/1101908.1101997, (Long Beach, CA, USA, November 07-11, 2005). ASE'05. ACM, New York, NY; de Paula, M.G., da Silva, B.S., Barbosa, S.D., Using an interaction model as a resource for communication in design (2005) CHI'05 Extended Abstracts On Human Factors In Computing Systems, pp. 1713-1716. , (Portland, USA, April 02-07, 2005; Rossi, G., Pastor, O., Schwabe, D., Olsina, L., (2008) Web Engineering: Modelling and Implementing Web Applications, , Human-Computer Interaction Series, London: Springer; http://code.google.com/webtoolkit/, GWT. Available at, Accessed 2011; http://www.seaside.st/, Seaside. Available at, Accessed 2011; Fowler, M., (2010) Domain Specific Languages, , 1st edn. Addison-Wesley Professional, Boston; Claessen, K., Hughes, J., QuickCheck: A lightweight tool for random testing of Haskell programs (2000) Proceedings of the Fifth ACM SIGPLAN International Conference On Functional Programming, 35, pp. 268-279; Bondy, J.A., (1976) Graph Theory With Applications, , Elsevier Science Ltd, Amsterdam; http://www.balsamiq.com/products/mockups, Balsamiq. Available at, Accessed 2011; Axure-wireframes, , http://www.axure.com/, prototypes, specifications. Available at, Accessed 2011; Chomsky, N., Three models for the description of language (2003) Inform Theory IRE Trans, 2 (3), pp. 113-124; Duhl, J., (2003) Rich Internet Applications, , A white paper sponsored by Macromedia and Intel, IDC report; Yahoo Patterns, , http://developer.yahoo.com/ypatterns/; Moody, D., The physics of notations: Toward a scientific basis for constructing visual notations in software engineering (2009) IEEE Trans Softw Eng, 35 (6), pp. 756-779. , doi: 10. 1109/TSE. 2009. 67; Maximilien, E.M., Williams, L., Assessing test-driven development at IBM (2003) Proceedings of the 25th International Conference On Software Engineering, pp. 564-569. , (Portland, Oregon, May 03-10, 2003). International conference on software engineering. IEEE Computer Society, Washington, DC; Robles Luna, E., Grigera, J., Rossi, G., Bridging test and model-driven approaches in web engineering (2009) Proceedings of the 9th International Conference On Web Engineering, 5648, pp. 136-150. , Lecture notes in computer science, Springer, Berlin, Heidelberg; http://www.eclipse.org/modeling/emf/, Eclipse EMF. Available at, Accessed 2011; http://www.eclipse.org/modeling/gmp/, Eclipse GMF. Available at, Accessed 2011; Selenium Web Application Testing System, , http://seleniumhq.org/, Available at, Accessed 2011; jQuery: The write less, do more JavaScript Library, , http://jquery.com/, Available at, Accessed 2011; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Design Patterns: Elements of Reusable Object-Oriented Software, , Boston: Addison-Wesley Longman Publishing Co; WebDriver, , http://webdriver.googlecode.com, Available at, Accessed 2011; The WebRatio Tool Suite, , http://www.webratio.com, Available at, Accessed 2011; Uden, L., Valderas, P., Pastor, O., An activity-theory-based model to analyse Web application requirements (2008) Inform Res, 13 (2). , http://informationr.net/ir/13-2/paper340.html; Conallen, J., (2000) Building Web Applications With UML, p. 300. , Addison-Wesley, Boston; Winckler, M., Vanderdonct, J., Towards a user-centered design of web applications based on a task model (2005) Proceedings of IWWOST'2005, , Porto, Portugal, 12-13 June 2005; Flannagan, S., The paper version of the web Deeplinking, , http://deeplinking.net/paper-web/, available at; Lin, J., Newman, M.W., Hong, J.I., Landay, J.A., DENIM: Finding a tighter fit between tools and practice for Web site design (2000) Proceedings of the SIGCHI Conference On Human Factors In Computing Systems, pp. 510-517. , (The Hague, The Netherlands, 01-06 April 2000). CHI'2000. ACM, New York, NY; Escalona, M.J., Aragon, G., NDT. A model-driven approach for web requirements (2008) IEEE Trans Softw Eng, 34 (3), pp. 370-390; Yu, E.S.K., Towards modeling and reasoning support for early-phase requirements engineering (1997) Proceedings of the 3rd IEEE International Symposium On Requirements Engineering (RE'97), p. 226. , IEEE Computer Society, Washington, DC, USA; http://www.omg.org/spec/QVT/, QVT, Accessed 2011; Escalona, M.J., Koch, N., Metamodeling requirements of web systems (2006) Proceedings of the Internacional Conference On Web Information System and Technologies (WEBIST 2006), INSTICC, pp. 310-317. , Setúbal, Portugal; http://watir.com/, Watir. Available at, Accessed 2011; Robles Luna, E., Panach, J.I., Grigera, J., Rossi, G., Pastor, O., Incorporating usability requirements in a test/model-driven web engineering approach (2010) J Web Eng (JWE), 9 (2), pp. 132-156; Robles Luna, E., Rossi, G., Burella, J., Grigera, J., Incremental usability improvement in an Agile approach for web applications (2010) Proceedings of the 1st Workshop Dealing With Usabiliy In An Agile Domain, XP'2010 Workshop, p. 2010. , Trondheim, Norway; Robles Luna, E., Garrigos, I., Rossi, G., Capturing and validating personalization requirements in web applications (2010) Proceedings of the 1st Workshop On the Web and Requirements Engineering (WeRE 2010), , Sydney, Australia; Robles Luna, E., Garrigos, I., Mazon, J.-N., Trujillo, J., Rossi, G., An i*-based approach for modeling and tesing web requirements (2010) J Web Eng (JWE), 9 (4), pp. 302-326; Alencar, F.M.R., Castro JFB (1999) Integrating early and late-phase requirements: A factory case study (1999) Proceedings of XIII Brazilian Symposium On Software Engineering-SBES99, pp. 47-61. , Florianopólis, SC, Brasil, Outubro; Rivero, J.M., Rossi, G., Grigera, J., Burella, J., Robles Luna, E., Gordillo, S., From mockups to user interface models: an extensible model driven approach (2010) Proceedings of the 6th model-driven web engineering workshop (MDWE 2010), , Vienna, Austria","Luna Robles, E.; LIFIA, Facultad de Informática, , La Plata, Argentina; email: esteban.robles@lifia.info.unlp.edu.ar",,,,,,,,09473602,,,,"English","Requir. Eng.",Article,"Final","",Scopus,2-s2.0-80355133393
"Törsel A.-M.","25929671200;","Automated test case generation for web applications from a domain specific model",2011,"Proceedings - International Computer Software and Applications Conference",,, 6032227,"137","142",,13,"10.1109/COMPSACW.2011.32","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80055005783&doi=10.1109%2fCOMPSACW.2011.32&partnerID=40&md5=65d469eb40a8e37d496ba955e24400d4","Fachhochschule Stralsund, Zur Schwedenschanze 15, 18435, Stralsund, Germany","Törsel, A.-M., Fachhochschule Stralsund, Zur Schwedenschanze 15, 18435, Stralsund, Germany","Model-based testing is a promising technique for test case design that is used in an increasing number of application domains. However, to fully gain efficiency advantages, intuitive domain-specific notations with comfortable tool support as well as a high degree of automation in the whole testing process are required. In this paper, a model-based testing approach for web application black box testing is presented. A notation for web application control flow models augmented with data flow information is introduced. The described research prototype demonstrates the fully automated generation of ready to use test case scripts for common test automation tools including test oracles from the model. © 2011 IEEE.","Automated test oracles; Model-based testing; Test automation; Web applications","Application domains; Automated generation; Automated test; Automated test case generation; Black-box testing; Data-flow information; Degree of automation; Domain specific; Gain efficiency; Model based testing; Research prototype; Test Automation; Test automation tool; Test case; Test oracles; Testing process; Tool support; WEB application; Automation; Computer applications; Data flow analysis; User interfaces; World Wide Web; Software testing",,,,,,,,"Kaner, C., Pettichord, B., Bach, J., (2001) Lessons Learned in Software Testing, , Wiley; Andrews, A.A., Offutt, J., Alexander, R.T., Testing Web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , DOI 10.1007/s10270-004-0077-7; Linschulte, M., Belli, F., On 'negative' tests of web applications (2007) Proceedings of the 3rd South-East European Workshop on Formal Methods, , SEEFM Thessaloniki, Greece, 2007; Wang, W., Sampath, S., Lei, Y., Kacker, R., An interaction-based test sequence generation approach for testing web applications (2008) High-assurance Systems Engineering, , IEEE International Symposium on; Ernits, J., Roo, R., Jacky, J., Veanes, M., (2009) Testing of Software and Communication Systems, pp. 211-216. , Springer ch. Model-Based Testing of Web Applications Using NModel; Grieskamp, W., Multi-paradigmatic model based testing (2006) Microsoft, Tech. Rep.; Utting, M., Legeard, B., (2007) Practical Model-based Testing: A Tools Approach, , Morgan-Kaufmann; Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) FoSE 2007: Future of Software Engineering, pp. 85-103. , DOI 10.1109/FOSE.2007.25, 4221614, FoSE 2007: Future of Software Engineering; Pretschner, A., Utting, M., Legeard, B., A taxonomy of model-based testing (2006) University of Waikato, Tech. Rep., , Department of Computer Science; Alalfi, M.H., Cordy, J.R., Dean, T.R., Modelling methods for web application verification and testing: State of the art (2009) Softw. Test. Verif. Reliab., 19, pp. 265-296; Conallen, J., Modeling web application architectures with UML (1999) Communications of the ACM, 42 (10), pp. 63-70; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) Proceedings - International Conference on Software Engineering, pp. 25-34; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user-session data to support web application testing (2005) IEEE Transactions on Software Engineering, 31 (3), pp. 187-202. , DOI 10.1109/TSE.2005.36; Sant, J., Souter, A., Greenwald, L., An exploration of statistical models for automated test case generation (2005) WODA '05: Proceedings of the Third International Workshop on Dynamic Analysis, pp. 1-7. , New York, NY, USA: ACM; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Greenwald, A.S., Applying concept analysis to user-session-based testing of web applications (2007) IEEE Transactions on Software Engineering, 33 (10), pp. 643-658. , DOI 10.1109/TSE.2007.70723; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) ICST '08: Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation, pp. 121-130. , Washington, DC, USA: IEEE Computer Society; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of ajax user interfaces (2009) ICSE '09: Proceedings of the 31st International Conference on Software Engineering, pp. 210-220. , Washington, DC, USA: IEEE Computer Society; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Transactions on Software Engineering, 37, pp. 48-64; Sampath, S., Bryce, R.C., Viswanath, G., Kandimalla, V., Koru, A.G., Prioritizing user-session-based test cases for web applications testing (2008) Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation, pp. 141-150. , Washington, DC, USA: IEEE Computer Society; Halfond, W.G., Anand, S., Orso, A., Precise interface identification to improve testing and analysis of web applications (2009) ISSTA '09: Proceedings of the Eighteenth International Symposium on Software Testing and Analysis, pp. 285-296. , New York, NY, USA: ACM; Wang, M., Yuan, J., Miao, H., Tan, G., A static analysis approach for automatic generating test cases for web applications (2008) Computer Science and Software Engineering, 2, pp. 751-754. , International Conference on; Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A., Ernst, M.D., Finding bugs in web applications using dynamic test generation and explicit state model checking (2010) IEEE Transactions on Software Engineering, 36 (4), pp. 474-494","Törsel, A.-M.; Fachhochschule Stralsund, Zur Schwedenschanze 15, 18435, Stralsund, Germany; email: Arne-Michael.Toersel@fh-stralsund.de",,"IEEE;IEEE Computer Society",,"35th Annual IEEE International Computer Software and Applications Conference Workshops, COMPSACW 2011","18 July 2011 through 21 July 2011","Munich",87007,07303157,9780769544595,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-80055005783
"Peng X., Lu L.","44661651600;55312142100;","A new approach for session-based test case generation by GA",2011,"2011 IEEE 3rd International Conference on Communication Software and Networks, ICCSN 2011",,, 6014682,"91","96",,4,"10.1109/ICCSN.2011.6014682","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80053140899&doi=10.1109%2fICCSN.2011.6014682&partnerID=40&md5=7fceffd53bf27ad00e2dd846fcc89776","Department of Computer Science and Engineering, South China University of Technology, Guangzhou, China","Peng, X., Department of Computer Science and Engineering, South China University of Technology, Guangzhou, China; Lu, L., Department of Computer Science and Engineering, South China University of Technology, Guangzhou, China","User-session-based testing which relies on capturing and replaying real user sessions is an effective approach to test web applications. However, as a black-box testing, test case generation totally based on user session data may not be qualified for ensuring the reliability of web applications. This paper proposes an approach named US-RDG in terms of gray-box testing, combining User Session data with Request Dependence Graph (RDG) of web application, to automatically generate test cases with the using of GA. Simulation results indicate that US-RDG effects better than the traditional user-session-based testing, and attains higher path coverage and fault detection rate within small size of test suite. © 2011 IEEE.","automatic test case generation; genetic algorithm; request rependence graph; user session; web application testing","Automatic testcase generation; Black-box testing; Dependence graphs; Fault detection rate; Path coverage; request rependence graph; Small size; Test case; Test case generation; User sessions; WEB application; Web application testing; Communication; Fault detection; Genetic algorithms; User interfaces; World Wide Web; Software testing",,,,,,,,"Ammann, P., Offutt, J., (2009) Introduction to Software Testing, pp. 256-267. , China Machine Press, Beijing, China; Sprenkle, S., Sampath, S., Gibson, E., Pollock, L., Souter, A., An empirical comparison of test suite reduction techniques for usersession-based testing of Web applications (2005) Proceedings of the 21st IEEE International Conference on Software Maintenance (lCSM'05), pp. 587-596. , IEEE Press, Sept., doi:10.1109/ICSM. 2005.18; Elbaum, S., Rothermel, G., Karre, S., Fisher Ii, M., Leveraging user-session data to support Web application testing (2005) IEEE Transactions on Software Engineering, 31, pp. 187-202. , April, doi:10.11091TSE. 2005.36; Lucca Di, G.A., Fasolino, A.R., Tramontana, P., A technique for reducing user session data sets in web application testing (2006) Eighth IEEE International Symposium on Web Site Evolution, pp. 7-13. , IEEE Press, Sept., doi:10.1109/WSE. 2006.1; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) Proceedings 25th International Conference on Software Engineering, pp. 49-59. , IEEE Press, May. doi:10.1109/ICSE.2003.1201187; Elbaum, S., Karre, S., Gibson, E., Pollock, L., An empirical comparison of test suite reduction techniques for user-session-based testing of Web applications (2005) Proceedings of the 21st IEEE International Conference on Software Maintenance (lCSM05), pp. 587-596. , IEEE Press, Sept., doi:10.1109/ICSM. 2005.18; Sampath, S., Mihaylov, V., Souter, A., Pollock, L., A scalable approach to user-session based testing of Web applications through concept analysis (2004) Proceedings of the 19th International Conference on Automated Software Engineering (ASE'04), pp. 132-141. , IEEE Press, Sept., doi:10.1109/ASE.2004.1342731; Sampath, S., Sprenkle, S., Applying concept analysis to usersession- based testing of web applications (2007) IEEE Transactions on Software Engineering, 33, pp. 643-658. , Oct., doi: 10.1109/TSE.2007. 70723; Sampath, S., Bryce, R.C., Viswanath, G., Kandimalla, V., Koru, A.G., Prioritizing user-session-based test cases for web applications testing (2008) 1st International Conference on Software Testing (LCST 2008), pp. 141-150. , IEEE Press, April, doi: 10.1109/ICST.2008.42; Chen, M.H., Song, C., Luo, X.M., Zheng, X.Y., http://www.cs.albany.edu/~mhc/WebMTAldocs/tool.Pdf, last accessed on 22 Jan. 2011; Holland, J., (1975) Adaptation in Natural and Artificial Systems, pp. 66-72. , University of Michigan Press, Ann Arbor, USA; Michalewicz, Z., (1999) Genetic Algorithms + Data Structures = Evolution Programs, pp. 33-44. , 3rd ed., Springer, London, UK; HttpClient, , http://www.innovation.ch/javaIHTTPClientl, Last accessed on 22 Jan. 2011; Luo, X.M., Ping, F., Chen, M.H., Clustering and tailoring user session data for testing web applications (2009) 2nd International Conference on Software Testing Verification and Validation (ICST '09), pp. 336-345. , IEEE Press, April, doi:10.1109/ICST.2009.51","Peng, X.; Department of Computer Science and Engineering, , Guangzhou, China; email: p.xuan02@mail.scut.edu.cn",,,,"2011 IEEE 3rd International Conference on Communication Software and Networks, ICCSN 2011","27 May 2011 through 29 May 2011","Xi'an",86671,,9781612844855,,,"English","IEEE Int. Conf. Commun. Softw. Networks, ICCSN",Conference Paper,"Final","",Scopus,2-s2.0-80053140899
"Bauersfeld S., Wappler S., Wegener J.","48161076300;15043248100;57090080200;","A metaheuristic approach to test sequence generation for applications with a GUI",2011,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","6956 LNCS",,,"173","187",,16,"10.1007/978-3-642-23716-4_17","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052899954&doi=10.1007%2f978-3-642-23716-4_17&partnerID=40&md5=cb4411d152ffde80a1c928c69e9327e3","Berner und Mattner Systemtechnik GmbH, Gutenbergstr. 15, 10587 Berlin, Germany","Bauersfeld, S., Berner und Mattner Systemtechnik GmbH, Gutenbergstr. 15, 10587 Berlin, Germany; Wappler, S., Berner und Mattner Systemtechnik GmbH, Gutenbergstr. 15, 10587 Berlin, Germany; Wegener, J., Berner und Mattner Systemtechnik GmbH, Gutenbergstr. 15, 10587 Berlin, Germany","As the majority of today's software applications employ a graphical user interface (GUI), it is an important though challenging task to thoroughly test those interfaces. Unfortunately few tools exist to help automating the process of testing. Despite of their well-known deficits, scripting- and capture and replay applications remain among the most common tools in the industry. In this paper we will present an approach where we treat the problem of generating test sequences to GUIs as an optimization problem. We employ ant colony optimization and a relatively new metric called MCT (Maximum Call Tree) to search fault-sensitive test cases. We therefore implemented a test environment for Java SWT applications and will present first results of our experiments with a graphical editor as our main application under test. © 2011 Springer-Verlag.","ant colony optimization; gui testing; search-based software testing","Ant-colony optimization; Application under tests; Graphical editors; gui testing; Meta-heuristic approach; Optimization problems; Search-based; Software applications; Test case; Test Environment; Test sequence; Algorithms; Artificial intelligence; Graphical user interfaces; Java programming language; Optimization; Software engineering; Software testing",,,,,,,,"Baresel, A., Sthamer, H., Schmidt, M., Fitness function design to improve evolutionary structural testing (2002) GECCO, pp. 1329-1336. , Langdon, W.B., Cantú-Paz, E., Mathias, K.E., Roy, R., Davis, D., Poli, R., Balakrishnan, K., Honavar, V., Rudolph, G., Wegener, J., Bull, L., Potter, M.A., Schultz, A.C., Miller, J.F., Burke, E.K., Jonoska, N. (eds.) Morgan Kaufmann, San Francisco; Binder, W., Hulaas, J., Moret, P., Villazón, A., (2008) Platform-independent Profiling in A Virtual Execution Environment, , Software: Practice and Experience; Cohen, M.B., Gibbons, P.B., Mugridge, W.B., Colbourn, C.J., Constructing test suites for interaction testing (2003) Proceedings of the 25th International Conference on Software Engineering, ICSE 2003, pp. 38-48. , IEEE Computer Society Press, Washington, DC, USA; Dorigo, M., Blum, C., Ant colony optimization theory: A survey (2005) Theor. Comput. Sci., 344, pp. 243-278; Garvin, B.J., Cohen, M.B., Dwyer, M.B., An improved meta-heuristic search for constrained interaction testing (2009) Proceedings of the 2009 1st International Symposium on Search Based Software Engineering, SSBSE 2009, pp. 13-22. , IEEE Computer Society Press, Washington, DC, USA; Huang, S., Cohen, M.B., Memon, A.M., Repairing gui test suites using a genetic algorithm (2010) ICST 2010: Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation, pp. 245-254. , IEEE Computer Society Press, Washington, DC, USA; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) CHI 1996: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 244-251. , ACM, New York; Kurzyniec, D., Sunderam, V., Efficient cooperation between java and native codes - Jni performance benchmark The 2001 International Conference on Parallel and Distributed Processing Techniques and Applications (2001); Lu, Y., Yan, D., Nie, S., Wang, C., Development of an improved gui automation test system based on event-flow graph (2008) International Conference on Computer Science and Software Engineering, 2, pp. 712-715; Luke, S., (2009) Essentials of Metaheuristics, , http://cs.gmu.edu/~sean/book/metaheuristics/, Lulu; McMaster, S., Memon, A., Call-stack coverage for gui test suite reduction (2008) IEEE Transactions on Software Engineering, 34, pp. 99-115; McMinn, P., Search-based software test data generation: A survey: Research articles (2004) Softw. Test. Verif. Reliab., 14, pp. 105-156; Memon, A., Banerjee, I., Nagarajan, A., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, WCRE 2003, , IEEE Computer Society Press, Washington, DC, USA; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D, Advisors: Mary Lou Soffa and Martha Pollack; Committee members: Prof. Rajiv Gupta (University of Arizona), Prof. Adele E. Howe (Colorado State University), Prof. Lori Pollock (University of Delaware); Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) ESEC/FSE-9: Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267. , ACM, New York; Rauf, A., Anwar, S., Jaffer, M.A., Shahid, A.A., Automated gui test coverage analysis using ga (2010) Third International Conference on Information Technology: New Generations, pp. 1057-1062; Wappler, S., Wegener, J., Evolutionary unit testing of object-oriented software using strongly-typed genetic programming (2006) GECCO 2006 - Genetic and Evolutionary Computation Conference, 2, pp. 1925-1932. , GECCO 2006 - Genetic and Evolutionary Computation Conference","Bauersfeld, S.; Berner und Mattner Systemtechnik GmbH, Gutenbergstr. 15, 10587 Berlin, Germany; email: sebastian.bauersfeld@berner-mattner.com",,"Berner and Mattner;IBM;FITTEST Project;Softeam;Sulake",,"3rd International Symposium on Search-Based Software Engineering, SSBSE 2011","10 September 2011 through 12 September 2011","Szeged",86491,03029743,9783642237157,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-80052899954
"Özkinaci M.E., Can A.B.","49964364100;16033213800;","Detecting execution and html errors in ASP .NET web applications",2011,"ICSOFT 2011 - Proceedings of the 6th International Conference on Software and Database Technologies","2",,,"172","178",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052585844&partnerID=40&md5=e47ed87ac63cc9cc7b36f054acc1c570","Informatics Institute, Middle East Technical University, Ankara, Turkey","Özkinaci, M.E., Informatics Institute, Middle East Technical University, Ankara, Turkey; Can, A.B., Informatics Institute, Middle East Technical University, Ankara, Turkey","Dynamic web applications are becoming widespread nearly in every area. ASP.NET is one of the popular development technologies in this domain. The errors in these web applications can reduce the credibility of the site and cause possible loss of a number of clients. Therefore, testing these applications becomes significant. We present an automated tool to test ASP.NET web applications against execution errors and HTML errors that cause displaying inaccurate and incomplete information. Our tool, called Mamoste, adapts concolic testing technique which interleaves concrete and symbolic execution to generate test inputs dynamically. Mamoste also considers page events as inputs which cannot be handled with concolic testing. We have performed experiments on a subset of a heavily used ASP.NET application of a government office. We have found 366 HTML errors and a faulty component which is used almost every page in this application. In addition, Mamoste discovered that a common user control is misused in several dynamically generated pages.","ASP .NET; Automated testing; Concolic testing; Dynamic web pages","ASP. NET; Automated testing; Automated tools; Concolic testing; Development technology; Dynamic web applications; Dynamic web pages; Execution errors; Government offices; Incomplete information; Symbolic execution; Test inputs; Testing technique; User control; WEB application; Concrete testing; Errors; HTML; Testing; User interfaces; Websites; Web services",,,,,,,,"Pex, , http://research.microsoft.com/en-us/projects/pex/; MSS, , http://www.solverfoundation.com; MSR, , http://research.microsoft.com; Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A., Ernst, M.D., Finding bugs in web applications using dynamic test generation and explicit state model checking (2010) IEEE TSE, 36 (4), pp. 474-494; Emmi, M., Majumdar, R., Sen, K., Dynamic test input generation for database applications (2007) Proc. of ISSTA; Fu, X., Lu, X., Peltsverger, B., Chen, S., A static analysis framework for detecting sql injection vulnerabilities (2007) Proc. of Computer Software and Applications Conference, pp. 87-96; Godefroid, P., Klarlund, N., Sen, K., Dart: Directed automated random testing (2005) Proc. of PLDI; Halfond, W.G., Anand, S., Orso, A., Precise interface identification to improve testing and analysis of web applications (2009) Proc. of ISSTA; Sen, K., Marinov, D., Agha, G., Cute: A con-colic unit testing engine for c (2005) Proc. of ESEC/FSE; Wassermann, G., Yu, D., Chander, A., Dhurjati, D., Inamura, H., Su, Z., Dynamic test input generation for web applications (2008) Proc. of ISSTA","Özkinaci, M.E.; Informatics Institute, , Ankara, Turkey; email: e123752@metu.edu.tr",,"Inst. Syst. Technol. Inf., Control Commun. (INSTICC)",,"6th International Conference on Software and Database Technologies, ICSOFT 2011","18 July 2011 through 21 July 2011","Seville",86389,,9789898425775,,,"English","ICSOFT - Proc. Int. Conf. Softw. Database Technol.",Conference Paper,"Final","",Scopus,2-s2.0-80052585844
"Hauptmann B., Junker M.","48861598700;48861390600;","Utilizing user interface models for automated instantiation and execution of system tests",2011,"2011 International Workshop on End-to-End Test Script Engineering, ETSE 2011 - Proceedings",,,,"8","15",,2,"10.1145/2002931.2002933","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052147484&doi=10.1145%2f2002931.2002933&partnerID=40&md5=2223b6f8edc19508110b4261c5fe9bc8","Technische Universität, München, Germany","Hauptmann, B., Technische Universität, München, Germany; Junker, M., Technische Universität, München, Germany","Scripts for automated system tests often contain technical knowledge about the user interface (UI). This makes test scripts brittle and hard to maintain which leads to high maintenance costs. As a consequence, automation of system tests is often abandoned. We present a model-driven approach that separates UI knowledge from test scripts. Tests are defined on a higher level, abstracting from UI usage. During test instantiation, abstract tests are enriched with UI information and executed against the system. We demonstrate the application of our approach to graphical UIs (GUIs) such as rich clients and web applications. To show the feasibility, we present a prototypical implementation testing the open-source application Bugzilla. Copyright 2011 ACM.","Model-based; Testing; User interface","Automated systems; Maintenance cost; Model driven approach; Model-based; Open-source; Prototypical implementation; Rich client; System test; Test scripts; User interface models; WEB application; Abstracting; Automation; Computer software selection and evaluation; Maintenance; Models; Testing; User interfaces; Software testing",,,,,,,,"(1991) A Compilation of IEEE Standard Computer Glossaries, , IEEE Standard Computer Dictionary, IEEE Std 610; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) Proceedings of the 27th International Conference on Software Engineering (ICSE'05); Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) Future of Software Engineering (FOSE'07); Botterweck, G., A model-driven approach to the engineering of multiple user interfaces (2006) Proceedings of the Workshop on Model-driven Development of Advanced User Interfaces (MDDAUI'06); Calvary, G., Coutaz, J., Thevenin, D., Limbourg, Q., Souchon, N., Bouillon, L., Florins, M., Vanderdonckt, J., Plasticity of user interfaces: A revised reference framework (2002) Proceedings of the First International Workshop on Task Models and Diagrams for User Interface Design; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley; Grandy, H., Benz, S., Specification based testing of automotive human machine interfaces (2009) GI Jahrestagung; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE'09); Harrold, M.J., Orso, A., Retesting software during development and maintenance (2008) Proceedings of the Frontiers of Software Maintenance (FoSM'08); Hauptmann, B., Model-based test instantiation for applications with user interfaces (2011) Proc. Doctoral Symposium at the International Conference on Product Focused Software Development and Process Improvement (PROFES'11); Hussmann, H., Meixner, G., Zuehlke, D., (2011) Model-Driven Development of Advanced User Interfaces, , editors, Springer; Katara, M., Kervinen, A., Maunumaa, M., Paakkonen, T., Satama, M., Towards deploying model-based testing with a domain-specific modeling approach (2006) Proceedings of the Testing: Academic & Industrial Conference on Practice and Research Techniques; Memon, A.M., Nguyen, B.N., Advances in automated model-based system testing of software applications with a GUI front-end (2010) Advances in Computers, 80. , M. V. Zelkowitz, editor; Paiva, A.C.R., Tillmann, N., Faria, J.C.P., Vidal, R.F.A.M., Modeling and testing hierarchical GUIs (2005) Proceedings of the 12th International Workshop on Abstract State Machines; Paternò, F., Mancini, C., Meniconi, S., Concurtasktrees: A diagrammatic notation for specifying task models (1997) Proceedings of the IFIP TC13 Interantional Conference on Human-Computer Interaction (INTERACT'97); Pimenta, A., (2006) Automated Specification Based Testing of Graphical User Interfaces, , PhD thesis, Engineering Faculty of Porto University, Department of Electrical and Computer Engineering; Prenninger, W., El-Ramly, M., Horstmann, M., Case studies (2005) Model-Based Testing of Reactive Systems, 3472. , M. Broy, B. Jonsson, J.-P. Katoen, M. Leucker, and A. Pretschner, editors, of Lecture Notes in Computer Science, Springer; Prenninger, W., Pretschner, A., Abstractions for model-based testing (2005) Electron. Notes Theor. Comput. Sci., 116. , January; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th International Symposium on Fault-Tolerant Computing (FTCS '97); Szekely, P.A., Retrospective and challenges for modelbased interface development (1996) Proceedings of the Second International Workshop on Computer-Aided Design of User Interfaces (CADUI'96); Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann; Utting, M., Pretschner, A., Legeard, B., A taxonomy of model-based testing (2006) Technical Report, , The University of Waikato, April; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-based testing of object-oriented reactive systems with spec explorer (2008) Formal Methods and Testing; Winter, S., (2009) Modellbasierte Analyse Von Nutzerschnittstellen, , Dissertation, Technische Universiẗat M̈unchen, M̈unchen","Hauptmann, B.; Technische Universität, München, Germany; email: benedikt.hauptmann@in.tum.de",,"ACM Special Interest Group on Software Engineering (SIGSOFT);ACM Special Interest Group on Programming Languages (SIGPLAN)",,"1st International Workshop on End-to-End Test Script Engineering, ETSE 2011, Co-located with the 2011 International Symposium on Software Testing and Analysis","17 July 2011 through 17 July 2011","Toronto, ON",86178,,9781450308083,,,"English","Int. Workshop End-to-End Test Scr. Eng., ETSE - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-80052147484
"Choudhary S.R., Zhao D., Versee H., Orso A.","26967580500;57199971329;36675697900;6603901617;","WATER: Web application TEst repair",2011,"2011 International Workshop on End-to-End Test Script Engineering, ETSE 2011 - Proceedings",,,,"24","29",,44,"10.1145/2002931.2002935","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052146445&doi=10.1145%2f2002931.2002935&partnerID=40&md5=d5326859a8afee8137f2dd507831afe8","Georgia Institute of Technology, College of Computing, Atlanta, GA, United States; College of Information Science and Engineering, Hunan University, Changsha, Hunan, China","Choudhary, S.R., Georgia Institute of Technology, College of Computing, Atlanta, GA, United States; Zhao, D., Georgia Institute of Technology, College of Computing, Atlanta, GA, United States, College of Information Science and Engineering, Hunan University, Changsha, Hunan, China; Versee, H., Georgia Institute of Technology, College of Computing, Atlanta, GA, United States; Orso, A., Georgia Institute of Technology, College of Computing, Atlanta, GA, United States","Web applications tend to evolve quickly, resulting in errors and failures in test automation scripts that exercise them. Repairing such scripts to work on the updated application is essential for maintaining the quality of the test suite. Updating such scripts manually is a time consuming task, which is often difficult and is prone to errors if not performed carefully. In this paper, we propose a technique to automatically suggest repairs for such web application test scripts. Our technique is based on differential testing and compares the behavior of the test case on two successive versions of the web application: first version in which the test script runs successfully and the second version in which the script results in an error or failure. By analyzing the difference between these two executions, our technique suggests repairs that can be applied to repair the scripts. To evaluate our technique, we implemented it in a tool called WATER and exercised it on real web applications with test cases. Our experiments show that WATER can suggest meaningful repairs for practical test cases, many of which correspond to those made later by developers themselves. Copyright 2011 ACM.","Test repair; Web testing","Differential testing; Practical tests; Test Automation; Test case; Test repair; Test scripts; Time-consuming tasks; WEB application; Web testing; Computer software selection and evaluation; Errors; Repair; Testing; User interfaces; World Wide Web; Software testing",,,,,,,,"Alshahwan, N., Harman, M., Automated session data repair for web application regression testing (2008) Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation, pp. 298-307. , Washington, DC, USA, IEEE Computer Society; (2011) The Apache Open for Business Project, , http://ofbiz.apache.org/, Apr; Daniel, B., Gvero, T., Marinov, D., On test repair using symbolic execution (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis, ISSTA '10, pp. 207-218. , New York, NY, USA, ACM; Daniel, B., Jagannath, V., Dig, D., Marinov, D., Reassert: Suggesting repairs for broken unit tests (2009) Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering, ASE'09, pp. 433-444. , Washington, DC, USA, IEEE Computer Society; Dobolyi, K., Weimer, W., Harnessing web-based application similarities to aid in regression testing (2009) Proceedings of the 20th IEEE International Conference on Software Reliability Engineering, ISSRE'09, pp. 71-80. , Piscataway, NJ, USA, IEEE Press; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) Proceedings of the 31st International Conference on Software Engineering, ICSE'09, pp. 408-418. , Washington, DC, USA, IEEE Computer Society; (2011) Coscripter, , http://coscripter.researchlabs.ibm.com/coscripter/, Apr; Leshed, G., Haber, E.M., Matthews, T., Lau, T., Coscripter: Automating & sharing how-to knowledge in the enterprise (2008) Proceeding of the Twenty-sixth Annual SIGCHI Conference on Human Factors in Computing Systems, CHI'08, pp. 1719-1728. , New York, NY, USA, ACM; Memon, A.M., Soffa, M.L., Regression testing of guis (2003) Proceedings of the 9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/FSE-11, pp. 118-127. , New York, NY, USA, ACM; (2011) Open Source Matters, , http://joomla.org/, Apr; (2010) Selenium Web Application Testing System, , http://seleniumhq.org/, May; Roest, D., Mesbah, A., Deursen, A.V., Regression testing ajax applications: Coping with dynamism (2010) Software Testing, Verification and Validation (ICST), 2010 Third International Conference on, 6-10, pp. 127-136","Choudhary, S.R.; Georgia Institute of Technology, , Atlanta, GA, United States; email: shauvik@cc.gatech.edu",,"ACM Special Interest Group on Software Engineering (SIGSOFT);ACM Special Interest Group on Programming Languages (SIGPLAN)",,"1st International Workshop on End-to-End Test Script Engineering, ETSE 2011, Co-located with the 2011 International Symposium on Software Testing and Analysis","17 July 2011 through 17 July 2011","Toronto, ON",86178,,9781450308083,,,"English","Int. Workshop End-to-End Test Scr. Eng., ETSE - Proc.",Conference Paper,"Final","",Scopus,2-s2.0-80052146445
"Li J., Tian H., Xing D.","57196156927;52063885000;43262234400;","Clustering user session data for web applications test",2011,"Journal of Computational Information Systems","7","9",,"3174","3181",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052796453&partnerID=40&md5=08e019c6fb2457eee267c01bc8f31cae","College of Information Engineering, Qingdao University, Qingdao 266071, China","Li, J., College of Information Engineering, Qingdao University, Qingdao 266071, China; Tian, H., College of Information Engineering, Qingdao University, Qingdao 266071, China; Xing, D., College of Information Engineering, Qingdao University, Qingdao 266071, China","Testing a web application is difficult and time consuming due to its distributed composition, user dependent dynamics and easy alterability. Web log files provide a promising way of generating test data for web applications. User session data are extracted from web log files and then constructed into test data. The paper defines a user session that represents the user interaction with a web application as a sequence of client requests with name-value pairs. We address the problem of effective and efficient generating test data from a large set of user session data. K-medoids algorithm is adopted as a reduction mechanism to partition user session data into a set of clusters. Each cluster represents similar scenarios of user interactions with a web application. Samples of each cluster are selected and constructed into test data for web applications test. The solutions to the key issues of non-numeric data type of user sessions and their dissimilarity definition are described. The metrics of clustering quality and code coverage with the generated test data are defined. The usefulness and effectiveness of our method is validated with the metrics in an empirical study. © 2005 by Binary Information Press.","Cluster algorithm; Dissimilarity definition; User session; Web application test","Client request; Cluster algorithms; Clustering quality; Code coverage; Data type; Dissimilarity definition; Empirical studies; K-medoids; Reduction mechanisms; Test data; User interaction; User sessions; User-dependent; WEB application; Web log file; Algorithms; Testing; World Wide Web; User interfaces",,,,,,,,"DiLucca, G.A., Fasolino, A.R., Testing Web-based applications: The state of the art and future trends (2006) Information and Software Technology, pp. 1172-1186; Hieatt, E., Mee, R., Going faster: Testing the Web application (2002) IEEE Software, pp. 60-65; Anneliese, J.O., Andrews, A., Alexander, R.T., Testing web applications by modeling with FSMs (2005) Software and Systems Modeling, pp. 326-345; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user session data to support web applications testing (2005) IEEE Transactions on Software Engineering, pp. 187-202; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Souter, A., Applying concept analysis to user-session-based testing of web applications (2007) IEEE Transactions on Software Engineering, 33, pp. 643-658; http://httpd.apache.org/docs/current/logs.html; Gan, G., Ma, C., Wu, J., Data clustering: Theory, algorithms, and applications (2007) SIAM-ASA, , Alexandria, VA; Xu, R., Wunsch II, D., Survey of clustering algorithms (2005) IEEE Transactions on Neural Networks, pp. 645-678; Budayan, C., Dikmen, I., Talat, B.M., Comparing the performance of traditional cluster analysis, self-organizing maps and fuzzy C-means method for strategic grouping (2009) Expert Systems with Applications, pp. 11772-11781; Li, J.H., Xing, D.D., User session data based web applications test with cluster analysis (2011) Proceeding of International Conference on Computer and Information Engineering(CSIE-2011), pp. 415-421; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., A case study of automatically creating test suites from web application field data (2006) Workshop on Testing, Analysis, and Verification of Web Services and Applications, pp. 1-9. , Portland, Maine; Stenmark, D., Identifying clusters of user behaviour in intranet search engine log files (2008) Journal of the American Society for Information Science and Technology, pp. 2232-2243; Bianco, A., Mardente, G., Mellia, M., Munafò, M., Muscariello, L., Web user session characterization via clustering techniques (2005) Global Telecommunications Conference (GLOBECOM'05), , 28 Nov.-2 Dec. IEEE, 28 Nov.-2 Dec; Yang, Y., Guan, X., You, J., CLOPE: A fast and effective clustering algorithm for transactional data (2002) Proceedings of the Eighth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 682-68","Li, J.; College of Information Engineering, , Qingdao 266071, China; email: lijh@qdu.edu.cn",,,,,,,,15539105,,,,"English","J. Comput. Inf. Syst.",Article,"Final","",Scopus,2-s2.0-80052796453
"Bauersfeld S., Wappler S., Wegener J.","48161076300;15043248100;57090080200;","An approach to automatic input sequence generation for GUI testing using ant colony optimization",2011,"Genetic and Evolutionary Computation Conference, GECCO'11 - Companion Publication",,,,"251","252",,8,"10.1145/2001858.2001999","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051946939&doi=10.1145%2f2001858.2001999&partnerID=40&md5=56074d172e7a832bd7e1fca5010ccf99","Berner and Mattner GmbH, Gutenbergstr. 15, 10587 Berlin, Germany","Bauersfeld, S., Berner and Mattner GmbH, Gutenbergstr. 15, 10587 Berlin, Germany; Wappler, S., Berner and Mattner GmbH, Gutenbergstr. 15, 10587 Berlin, Germany; Wegener, J., Berner and Mattner GmbH, Gutenbergstr. 15, 10587 Berlin, Germany","Testing applications with a graphical user interface (GUI) is an important, though challenging and time consuming task. The state of the art in the industry are still capture and replay tools, which greatly simplify the recording and execution of input sequences, but do not support the tester in finding fault-sensitive test cases. While search-based test case generation strategies, such as evolutionary testing, are well researched for various areas of testing, relatively little work has been done on applying these techniques to an entire GUI of an application. This paper presents an approach to finding input sequences for GUIs using ant colony optimization and a relatively new metric called maximum call stacks for use within the fitness function. © 2011 Authors.","ant colony optimization; automated test case generation; gui testing; metaheuristics","Ant-colony optimization; Automated test case generation; Evolutionary testing; Fitness functions; gui testing; Input sequence; Meta heuristics; Search-based; State of the art; Test case; Test case generation; Time-consuming tasks; Algorithms; Artificial intelligence; Optimization; Graphical user interfaces",,,,,,,,"http://www.berner-mattner.com/en/berner-mattner-home/products/cte/ index-cte-ueberblick.html; Huang, S., Cohen, M.B., Memon, A.M., Repairing gui test suites using a genetic algorithm ICST '10: Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation, pp. 245-254. , Washington, DC, USA, 2010. IEEE Computer Society; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) CHI '96: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 244-251. , New York, NY, USA, ACM; McMaster, S., Memon, A., Call-stack coverage for gui test suite reduction (2008) IEEE Transactions on Software Engineering, 34, pp. 99-115; McMinn, P., Search-based software test data generation: A survey: Research articles (2004) Softw. Test. Verif. Reliab., 14, pp. 105-156. , June; Wappler, S., Wegener, J., Evolutionary unit testing of object-oriented software using strongly-typed genetic programming (2006) GECCO, pp. 1925-1932. , M. Cattolico, editor, ACM","Bauersfeld, S.; Berner and Mattner GmbH, Gutenbergstr. 15, 10587 Berlin, Germany; email: sebastian.bauersfeld@berner-mattner.com",,"Assoc. Comput. Mach., Spec. Interest;Group Genet. Evol. Comput. (ACM SIGEVO)",,"13th Annual Genetic and Evolutionary Computation Conference, GECCO'11","12 July 2011 through 16 July 2011","Dublin",86136,,9781450306904,,,"English","Genet. Evol. Comput. Conf., GECCO - Companion Publ.",Conference Paper,"Final","",Scopus,2-s2.0-80051946939
"Herbold S., Grabowski J., Waack S., Bünting U.","35226400600;22334240800;55976438900;55178656200;","Improved bug reporting and reproduction through non-intrusive GUI usage monitoring and automated replaying",2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011",,, 5954414,"232","241",,14,"10.1109/ICSTW.2011.66","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051657071&doi=10.1109%2fICSTW.2011.66&partnerID=40&md5=a941a2edab0517102696985a7aa7e46f","Institute of Computer Science, University of Göttingen, Germany; Mahr GmbH Göttingen, Carl-Mahr-Str. 1, 37073 Göttingen, Germany","Herbold, S., Institute of Computer Science, University of Göttingen, Germany; Grabowski, J., Institute of Computer Science, University of Göttingen, Germany; Waack, S., Institute of Computer Science, University of Göttingen, Germany; Bünting, U., Mahr GmbH Göttingen, Carl-Mahr-Str. 1, 37073 Göttingen, Germany","Most software systems are operated using a Graphical User Interface (GUI). Therefore, bugs are often triggered by user interaction with the software's GUI. Hence, accurate and reliable GUI usage information is an important tool for bug fixing, as the reproduction of a bug is the first important step towards fixing it. To support bug reproduction, a generic, easy to integrate, non-intrusive GUI usage monitoring mechanism is introduced in this paper. As supplement for the monitoring, a method for automatically replaying the monitored usage logs is provided. The feasibility of both is demonstrated through proof-of-concept implementations. A case-study shows that the monitoring mechanism can be integrated into large-scale software products without significant effort and that the logs are replayable. Additionally, a usage-based end-to-end GUI testing approach is outlined, in which the monitoring and replaying play major roles. © 2011 IEEE.",,"Bug-fixing; GUI testing; Non-intrusive; Proof of concept; Software products; Software systems; User interaction; Computer software selection and evaluation; Program debugging; Software testing; Verification; Graphical user interfaces",,,,,,,,"Bettenburg, N., Just, S., Schr̈oter, A., Weiss, C., Premraj, R., Zimmermann, T., What makes a good bug report? (2008) SIGSOFT '08/FSE-16: Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 308-318. , New York, NY, USA, ACM; Brooks, P.A., Memon, A.M., Automated gui testing guided by usage profiles (2007) ASE '07: Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering, pp. 333-342. , New York, NY, USA, ACM; Cleary John, G., Witten Ian, H., Data compression using adaptive coding and partial string matching (1984) IEEE Transactions on Communications, COM-32 (4), pp. 396-402; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user-session data to support web application testing (2005) IEEE Transactions on Software Engineering, 31 (3), pp. 187-202. , DOI 10.1109/TSE.2005.36; (2010) HP Functional Testing, , Hewlet-Packard Company; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction Human Factors and Ergonomics Society 37th Annual Meeting, pp. 1042-1993. , volume 2 of Special Sessions; Memon, A., Banerjee, I., Nagarajan, A., Ripping, G., Gui ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE '03: Proceedings of the 10th Working Conference on Reverse Engineering, p. 260. , Washington, DC, USA, IEEE Computer Society; Memon, A.M., Gui testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 87-88; Nagarajan, A., Memon, A., Refactoring using event-based profiling (2003) Proceedings of the First International Workshop on REFactoring: Achievements, Challenges, Effects (REFACE); Orso, A., Kennedy, B., Selective capture and replay of program executions (2005) WODA '05: Proceedings of the Third International Workshop on Dynamic Analysis, pp. 1-7. , New York, NY, USA, ACM; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.A.M., A model-to-implementation mapping tool for automated model-based GUI testing (2005) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 3785, pp. 450-464. , DOI 10.1007/11576280-31, Formal Methods and Software Engineering - 7th International Conference on Formal Engineering Methods, ICFEM 2005, Proceedings; Sant, J., Souter, A., Greenwald, L., An exploration of statistical models for automated test case generation (2005) WODA '05: Proceedings of the Third International Workshop on Dynamic Analysis, pp. 1-7. , New York, NY, USA, ACM; Steven, J., Chandra, P., Fleck, B., Podgurski, A., Rapture: A capture/replay tool for observation-based testing (2000) SIGSOFT Software Engineering Notes, 25 (5), pp. 158-167; Tonella, P., Ricca, F., Statistical testing of web applications (2004) Journal of Software Maintenance and Evolution, 16 (1-2), pp. 103-127; Willems, F., Shtarkov, Y., Tjalkens, T., The context-tree weighting method: Basic properties (1995) IEEE Transactions on Information Theory, 41 (3), pp. 653-664. , 241","Herbold, S.; Institute of Computer Science, Germany; email: herbold@cs.uni-goettingen.de",,"IEEE Computer Society",,"4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011","21 March 2011 through 25 March 2011","Berlin",86023,,9780769543451,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-80051657071
"Gove R., Faytong J.","26642390300;47060929900;","Identifying infeasible GUI test cases using support vector machines and induced grammars",2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011",,, 5954411,"202","211",,14,"10.1109/ICSTW.2011.73","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051656116&doi=10.1109%2fICSTW.2011.73&partnerID=40&md5=1c50e133ffba0d54df676d570c88efc0","Human-Computer Interaction Lab, University of Maryland, College Park, MD, United States; Institute for Advanced Computer Studies, University of Maryland, College Park, MD, United States; Department of Computer Science, University of Maryland, College Park, MD, United States","Gove, R., Human-Computer Interaction Lab, University of Maryland, College Park, MD, United States, Institute for Advanced Computer Studies, University of Maryland, College Park, MD, United States, Department of Computer Science, University of Maryland, College Park, MD, United States; Faytong, J., Department of Computer Science, University of Maryland, College Park, MD, United States","Model-based GUI software testing is an emerging paradigm for automatically generating test suites. In the context of GUIs, a test case is a sequence of events to be executed which may detect faults in the application. However, a test case may be infeasible if one or more of the events in the event sequence are disabled or made inaccessible by a previously executed event (e.g., a button may be disabled until another GUI widget enables it). These infeasible test cases terminate prematurely and waste resources, so software testers would like to modify the test suite execution to run only feasible test cases. Current techniques focus on repairing the test cases to make them feasible, but this relies on executing all test cases, attempting to repair the test cases, and then repeating this process until a stopping condition has been met. We propose avoiding infeasible test cases altogether by predicting which test cases are infeasible using two supervised machine learning methods: support vector machines (SVMs) and grammar induction. We experiment with three feature extraction techniques and demonstrate the success of the machine learning algorithms for classifying infeasible GUI test cases in several subject applications. We further demonstrate a level of robustness in the algorithms when training and classifying test cases of different lengths. © 2011 IEEE.","Event based testing; Grammar induction; GUI testing; Machine learning; Software testing; Support vector machines","Event based testing; Grammar induction; GUI testing; Machine-learning; Support vector; Automatic test pattern generation; Computational grammars; Computer software selection and evaluation; Feature extraction; Graphical user interfaces; Learning algorithms; Support vector machines; Testing; Verification; Software testing",,,,,,,,"Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Huang, S., Cohen, M., Memon, A.M., Repairing GUI test suites using a genetic algorithm (2010) Proc. 3rd IEEE Int. Conf. Software Testing, Verification and Validation, , Washington, DC, USA: IEEE Computer Society; Vapnik, V.N., (1995) The Nature of Statistical Learning Theory., , New York, NY, USA: Springer-Verlag New York, Inc; Hipp, J., Güntzer, U., Nakhaeizadeh, G., Algorithms for association rule mining - A general survey and comparison (2000) SIGKDD Explor. Newsl., 2 (1), pp. 58-64; Porat, S., Feldman, J.A., Learning automata from ordered examples (1991) Machine Learning, 7, pp. 109-138. , http://dx.doi.org/10.1023/A:1022642911489, 10.1023/A:1022642911489. [Online]; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.A.M., A model-to-implementation mapping tool for automated model-based GUI testing (2005) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 3785, pp. 450-464. , DOI 10.1007/11576280-31, Formal Methods and Software Engineering - 7th International Conference on Formal Engineering Methods, ICFEM 2005, Proceedings; Hoefel, G., Elkan, C., Learning a two-stage SVM/CRF sequence classifier (2008) Proc. 17th ACM Conf. Information and Knowledge Management, pp. 271-278. , New York, NY, USA: ACM; Chen, H., Zhou, H.-X., Hu, X., Yoo, I., Classification comparison of prediction of solvent accessibility from protein sequences (2004) Proc. 2nd Conf. Asia-Pacific Bioinformatics, pp. 333-338. , Darlinghurst, Australia, Australia: Australian Computer Society, Inc; Liao, L., Noble, W.S., Combining pairwise sequence similarity and support vector machines for remote protein homology detection (2002) Proc. 6th Annu. Int. Conf. Computational Biology, pp. 225-232. , New York, NY, USA: ACM; Baskiotis, N., Sebag, M., Gaudel, M.-C., Gouraud, S., A machine learning approach for statistical software testing (2007) Proc. 20th Int. Joint Conf. Artifical Intelligence, pp. 2274-2279. , San Francisco, CA, USA: Morgan Kaufmann Publishers Inc; Briand, L.C., Labiche, Y., Bawar, Z., Spido, N.T., Using machine learning to refine category-partition test specifications and test suites (2009) Information and Software Technology, 51 (11), pp. 1551-1564. , third IEEE International Workshop on Automation of Software Test (AST 2008); Briand, L.C., Labiche, Y., Bawar, Z., Spido, N.T., Using machine learning to refine category-partition test specifications and test suites Eighth International Conference on Quality Software (QSIC 2008), , http://www.sciencedirect.com/science/article/B6V0B-4WP47MR-1/2/ e46ad361823030f7cb6d8407ab60101a, Online; Gondra, I., Applying machine learning to software fault-proneness prediction (2008) Journal of Systems and Software, 81 (2), pp. 186-195. , DOI 10.1016/j.jss.2007.05.035, PII S0164121207001240; Yilmaz, C., Cohen, M.B., Porter, A.A., Covering arrays for efficient fault characterization in complex configuration spaces (2006) IEEE Transactions on Software Engineering, 32 (1), pp. 20-34. , DOI 10.1109/TSE.2006.8; Weiss, G.M., Timeweaver: A genetic algorithm for identifying predictive patterns in sequences of events (1999) Proc. Genetic and Evolutionary Computation Conf. Morgan Kaufmann, pp. 718-725; Giordana, A., Terenziani, P., Botta, M., Recognizing and discovering complex events in sequences (2002) Proc. 13th Int. Symp. Foundations of Intelligent Systems, pp. 374-382. , London, UK: Springer-Verlag; Galassi, U., Giordana, A., Learning regular expressions from noisy sequences (2005) Proc. 6th Int. Symp. Abstraction, Reformulation and Approximation, pp. 92-106; Bex, G.J., Neven, F., Schwentick, T., Vansummeren, S., Inference of concise regular expressions and DTDs (2010) ACM Trans. Database Syst., 35 (2), pp. 1-47; Ferenc, R., Beszedes, A., Fulop, L., Lele, J., Design pattern mining enhanced by machine learning (2005) IEEE International Conference on Software Maintenance, ICSM, 2005, pp. 295-304. , DOI 10.1109/ICSM.2005.40, 1510125, Proceedings of the 21st IEEE International Conference on Software Maintenance, ICSM 2005; Dietterich, T.G., Machine learning for sequential data: A review (2002) Proc. Joint IAPR Int. Workshop Structural, Syntactic, and Statistical Pattern Recognition., pp. 15-30. , London, UK: Springer-Verlag; Hopcroft, J., Ullman, J., (1979) Introduction to Automata Theory, Languages, and Computation, , Reading, Massachusetts: Addison-Wesley; Unold, O., Grammar-based classifier system: A universal tool for grammatical inference (2008) W. Trans. on Comp., 7, pp. 1584-1593. , http://portal.acm.org/citation.cfm?id=1486693.1486700, October, Online; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007) Proc. 22nd IEEE Int. Conf. Automated Software Engineering, , Washington, DC, USA: IEEE Computer Society, 211","Gove, R.; Human-Computer Interaction Lab, , College Park, MD, United States; email: rpgove@cs.umd.edu",,"IEEE Computer Society",,"4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011","21 March 2011 through 25 March 2011","Berlin",86023,,9780769543451,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-80051656116
"Arlt S., Bertolini C., Schäf M.","47060904400;56274935100;35186406200;","Behind the scenes: An approach to incorporate context in GUI test case generation",2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011",,, 5954413,"222","231",,9,"10.1109/ICSTW.2011.70","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051650473&doi=10.1109%2fICSTW.2011.70&partnerID=40&md5=fb6b86706e08a1b9841d33966863ca9f","University of Freiburg, Germany; United Nations University, International Institute for Software Technology, Macau","Arlt, S., University of Freiburg, Germany; Bertolini, C., United Nations University, International Institute for Software Technology, Macau; Schäf, M., United Nations University, International Institute for Software Technology, Macau","Graphical user interfaces (GUIs) are a common way to interact with software. To ensure the quality of such software it is important to test the possible interactions with its user interface. GUI testing is a challenging task as they can allow, in general, infinitely many different sequences of interactions with the software. As it is only possible to test a limited amount of possible user interactions, it is crucial for the quality of GUI testing to identify relevant sequences and avoid improper ones. In this paper we propose a model for better GUI testing. Our model is created based on two observations. It is a common case that different user interactions result in the execution of the same code fragments. That is, it is sufficient to test only interactions that execute different code fragments. Our second observation is that user interactions are context-sensitive. That is, the control flow that is taken in a program fragment handling a user interaction depends on the order of some preceding user interactions. We show that these observations are relevant in practice. We present a preliminary implementation that utilizes these observations for test case generation. © 2011 IEEE.","Automated testing; Grey-box testing; GUI testing; Model-based testing","Automated testing; Code fragments; Context-sensitive; Control flows; Grey-box; GUI testing; Model based testing; Program fragments; Test case generation; User interaction; Computer software selection and evaluation; Graphical user interfaces; Testing; Verification; Software testing",,,,,,,,"White Lee, Almezen Husain, Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, ISSRE, pp. 110-121; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Bertolini, C., Mota, A., Aranha, E., Ferraz, C., GUI testing techniques evaluation by designed experiments (2010) International Conference on Software Testing, Verification and Validation (ICST), pp. 235-244. , Los Alamitos, CA, USA: IEEE Computer Society; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Zhao, L., Cai, K.-Y., Event handler-based coverage for GUI testing (2010) International Conference on Quality Software, pp. 326-331. , vol. 0. Los Alamitos, CA, USA: IEEE Computer Society; Grilo, A., Paiva, A., Faria, J., Reverse engineering of GUI models for testing (2010) 5th Iberian Conference on Information Systems and Technologies (CISTI), pp. 1-6. , IEEE Computer Society; Silva, J.A.C., Silva, C.C., Gonçalo, R.D., Saraiva, J.A., Campos, J.C., The GUISurfer Tool: Towards a language independent approach to reverse engineering GUI Code (2010) 2nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, pp. 181-186. , New York, NY, USA: ACM; Bryce, R.C., Sampath, S., Memon, A.M., Developing a single model and test prioritization strategies for event-driven software (2011) IEEE Transactions on Software Engineering, 37 (1), pp. 48-64; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Inf. Softw. Technol., 52 (5), pp. 559-575; Nguyen, D.H., Strooper, P., Suess, J.G., Model-based testing of multiple GUI variants using the GUI test generator (2010) AST '10: Proceedings of the 5th Workshop on Automation of Software Test, pp. 24-30. , New York, NY, USA: ACM; Tillmann, N., De Halleux, J., Pex-white box test generation for .NET (2008) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 4966, pp. 134-153. , DOI 10.1007/978-3-540-79124-9-10, Tests and Proofs - Second International Conference, TAP 2008, Proceedings; Nagappan, N., Zeller, A., Zimmermann, T., Herzig, K., Murphy, B., Change bursts as defect predictors (2010) 21st IEEE International Symposium on Software Reliability Engineering (ISSRE), pp. 309-318. , November; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing? (2003) International Conference on Automated Software Engineering, pp. 164-173","Arlt, S.; University of FreiburgGermany; email: arlt@informatik.uni-freiburg.de",,"IEEE Computer Society",,"4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011","21 March 2011 through 25 March 2011","Berlin",86023,,9780769543451,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-80051650473
"Amalfitano D., Fasolino A.R., Tramontana P.","25926238800;7006159957;8879739800;","A GUI crawling-based technique for android mobile application testing",2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011",,, 5954416,"252","261",,137,"10.1109/ICSTW.2011.77","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051613634&doi=10.1109%2fICSTW.2011.77&partnerID=40&md5=250d9412d1ddcc35bc803e690e2af327","Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy","Amalfitano, D., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Fasolino, A.R., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy; Tramontana, P., Dipartimento di Informatica e Sistemistica, Università di Napoli Federico II, Via Claudio 21, 80125 Napoli, Italy","As mobile applications become more complex, specific development tools and frameworks as well as cost-effective testing techniques and tools will be essential to assure the development of secure, high-quality mobile applications. This paper addresses the problem of automatic testing of mobile applications developed for the Google Android platform, and presents a technique for rapid crash testing and regression testing of Android applications. The technique is based on a crawler that automatically builds a model of the application GUI and obtains test cases that can be automatically executed. The technique is supported by a tool for both crawling the application and generating the test cases. In the paper we present an example of using the technique and the tool for testing a real small size Android application that preliminary shows the effectiveness and usability of the proposed testing approach. © 2011 IEEE.",,"Crash testing; Development tools; High quality; Mobile applications; Regression testing; Small size; Test case; Testing technique; Automatic testing; Computer software selection and evaluation; Graphical user interfaces; Mobile telecommunication systems; Robots; Verification; Software testing",,,,,,,,"Amalfitano, D., Fasolino, A.R., Tramontana, P., Rich internet application testing using execution trace data Proc. of Second International Workshop on TESTing Techniques & Experimentation Benchmarks for Event-Driven Software (TESTBEDS 2010), pp. 274-283. , IEEE CS Press; The Developer's Guide, , http://developer.android.com, Last accessed Jan. 08, 2011; Android Emulator, , http://developer.android.com/guide/developing/tools/emulator.html, available at:, Last accessed January 8, 2011; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study (2006) Software Testing Verification and Reliability, 16 (1), pp. 3-32. , DOI 10.1002/stvr.335; Delamaro, M.E., Vincenzi, A.M.R., Maldonado, J.C., A strategy to perform coverage testing of mobile applications Proceedings of the 2006 International Workshop on Automation of Software Test (AST '06), pp. 118-124. , ACM, New York, NY, USA; Gartner Newsroom. Gartner Says Android to Become No. 2 Worldwide Mobile Operating System in 2010 and Challenge Symbian for No. 1 Position by 2014, , http://www.gartner.com/it/page.jsp?id=1434613, Last accessed Jan. 08, 2011; Gavalas, D., Economou, D., Development platforms for mobile applications: Status and trends (2011) IEEE Software, 28 (1), pp. 77-86; Junit Resources for Test Driven Development, , http://www.junit.org, accessed Jan. 08, 2011; Kim, H., Choi, B., Wong, W.E., Performance testing of mobile applications at the unit test level Proc. of 2009 Third IEEE International Conference on Secure Software Integration and Reliability Improvement, pp. 171-181. , IEEE Comp. Soc. Press; Liu, Z., Gao, X., Long, X., Adaptive random testing of mobile application Proc. of 2010 2nd International Conference on Computer Engineering and Technology (ICCET), pp. 297-301. , IEEE Comp. Soc. Press; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) Proc. of 2008 Int. Conf. on Software Testing, Verification and Validation, pp. 121-130. , IEEE CS Press; Memon, A., Banerjee, L., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE 2003), pp. 260-269. , IEEE CS Press; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Memon, A.M., Xie., Q., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1). , ACM Press; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of AJAX user interfaces (2009) Proc. of International Conference on Software Engineering (ICSE 2009), pp. 210-220. , IEEE CS Press; Android Developers UI Application Exerciser Monkey, , http://developer.android.com/guide/developing/tools/monkey.html, Last accessed Jan. 08, 2011; Android Developers Monkeyrunner., , http://developer.android.com/guide/developing/tools/ monkeyrunner_concepts.html, Last accessed Jan. 08, 2011; Google Code. Robotium, , http://code.google.com/p/robotium/, Last accessed on Jan. 08, 2011; Satoh, I., A testing framework for mobile computing software (2003) IEEE Trans. Softw. Eng., 29 (12), pp. 1112-1121. , December; Satoh, I., Software testing for wireless mobile application (2004) IEEE Wireless Communications, pp. 58-64. , Oct; She, S., Sivapalan, S., Warren, I., Hermes: A tool for testing mobile device applications Proc. of 2009 Australian Software Engineering Conference, pp. 123-130. , IEEE Comp. Soc. Press; Wasserman, A., Software engineering issues for mobile application development Proc. of the FSE/SDP Workshop on Future of Software Engineering Research, FOSER 2010, pp. 397-400. , IEEE Comp. Soc. Press","Amalfitano, D.; Dipartimento di Informatica e Sistemistica, Via Claudio 21, 80125 Napoli, Italy; email: domenico.amalfitano@unina.it",,"IEEE Computer Society",,"4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011","21 March 2011 through 25 March 2011","Berlin",86023,,9780769543451,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-80051613634
"Yuan X., Cohen M.B., Memon A.M.","55469919200;8719004300;35599876500;","GUI interaction testing: Incorporating event context",2011,"IEEE Transactions on Software Engineering","37","4", 5444885,"559","574",,116,"10.1109/TSE.2010.50","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79961036254&doi=10.1109%2fTSE.2010.50&partnerID=40&md5=670a4698f1ad67575b14cee4720c157f","Department of Computer Science, 4115 A.V. Williams Building, University of Maryland, College Park, MD, United States; Department of Computer Science and Engineering, 364 Avery Hall, University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States","Yuan, X., Department of Computer Science, 4115 A.V. Williams Building, University of Maryland, College Park, MD, United States; Cohen, M.B., Department of Computer Science and Engineering, 364 Avery Hall, University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; Memon, A.M., Department of Computer Science, 4115 A.V. Williams Building, University of Maryland, College Park, MD, United States","Graphical user interfaces (GUIs), due to their event-driven nature, present an enormous and potentially unbounded way for users to interact with software. During testing, it is important to ""adequately cover"" this interaction space. In this paper, we develop a new family of coverage criteria for GUI testing grounded in combinatorial interaction testing. The key motivation of using combinatorial techniques is that they enable us to incorporate context into the criteria in terms of event combinations, sequence length, and by including all possible positions for each event. Our new criteria range in both efficiency (measured by the size of the test suite) and effectiveness (the ability of the test suites to detect faults). In a case study on eight applications, we automatically generate test cases and systematically explore the impact of context, as captured by our new criteria. Our study shows that by increasing the event combinations tested and by controlling the relative positions of events defined by the new criteria, we can detect a large number of faults that were undetectable by earlier techniques. © 2006 IEEE.","automated testing; combinatorial interaction testing; GUI testing; GUITAR testing system; model-based testing","Automated testing; Combinatorial interaction testing; GUI testing; GUITAR testing system; Model based testing; Ability testing; Graphical user interfaces; Software testing",,,,,"N00014-05-1-0421

National Science Foundation, NSF: CCF-0447864, CCF-0747009, CNS-0855055, CNS-0855139

Air Force Office of Scientific Research, AFOSR: FA9550-09-1-0129

Defense Advanced Research Projects Agency, DARPA: HR0011-09-0031","The authors would like to thank the anonymous reviewers for all of their feedback, insights, and comments on this paper. This work was partially supported by the US National Science Foundation (NSF) under grants CCF-0747009, CCF-0447864, CNS-0855139, and CNS-0855055, the US Air Force Office of Scientific Research through award FA9550-09-1-0129, the US Office of Naval Research grant N00014-05-1-0421 and by the US Defense Advanced Research Projects Agency (DARPA) through award HR0011-09-0031. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the",,"Mathur, A.P., (2008) Foundations of Software Testing: Fundamental Algorithms and Techniques, , Pearson Education; Xie, Q., Memon, A.M., Using a pilot study to derive a gui model for automated testing (2008) ACM Trans. Software Eng. and Methodology, 18, pp. 1-35; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Memon, A., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) Proceedings - 19th International Conference on Automated Software Engineering, ASE 2004, pp. 186-195. , Proceedings - 19th International Conference on Automated Software Engineering, ASE 2004; Memon, A.M., Developing testing techniques for event-driven pervasive computing applications (2004) Proc. Object-Oriented Programming, Systems, Languages, and Applications Workshop Building Software for Pervasive Computing, , Oct; Tretmans, G.J., Brinksma, H., TorX: Automated model-based testing (2003) Proc. First European Conf. Model-Driven Software Eng., A. Hartman and K. Dussa-Ziegler, eds, pp. 31-43. , Dec; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-based testing of object-oriented reactive systems with spec explorer (2008) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 4949, pp. 39-76. , DOI 10.1007/978-3-540-78917-8-2, Formal Methods and Testing - An Outcome of the FORTEST Network, Revised Selected Papers; Ural, H., Yang, B., A test sequence selection method for protocol testing (1991) IEEE Trans. Comm, 39 (4), pp. 514-523. , Apr; Marchetto, A., Tonella, P., Search-based testing of ajax web applications (2009) Proc. First Int'l Symp. Search Based Software Eng, pp. 3-12. , May; Offutt, J., Liu, S., Abdurazik, A., Ammann, P., Generating test data from state-based specifications (2003) The J. Software Testing, Verification and Reliability, 13 (1), pp. 25-53; Brooks, P., Robinson, B., Memon, A.M., An initial characterization of industrial graphical user interface systems (2009) Proc. First IEEE Int'l Conf. Software Testing, Verification and Validation; (2009) FreeMind-Free Mind-Mapping Software, , http://freemind.sourceforge.net; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 256-267; Zhu, H., Hall, P.A.V., May, J.H.R., Software unit test coverage and adequacy (1997) ACM Computing Surveys, 29 (4), pp. 366-427; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated gui testing (2007) Proc. IEEE/ACM Int'l Conf. Automated Software Eng, pp. 405-408; Cohen, D.M., Dalal, S.R., Fredman, M.L., Patton, G.C., The AETG system: An approach to testing based on combinatorial design (1997) IEEE Transactions on Software Engineering, 23 (7), pp. 437-444; Cohen, M.B., Colbourn, C.J., Gibbons, P.B., Mugridge, W.B., Constructing test suites for interaction testing (2003) Proc. Int'l Conf. Software Eng, pp. 38-48. , May; Strecker, J., Memon, A.M., Relationships between test suites, faults, and fault detection in gui testing (2008) Proc. First Int'l Conf. Software Testing, Verification, and Validation, pp. 12-21; Xun, Y., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings - International Conference on Software Engineering, pp. 396-405. , DOI 10.1109/ICSE.2007.94, 4222601, Proceedings - 29th International Conference on Software Engineering, ICSE 2007; Daniels, F.J., Tai, K.C., Measuring the effectiveness of method test sequences derived from sequencing constraints (1999) Proc. Technology of Object-Oriented Languages and Systems, pp. 74-83; Farooq, U., Lam, C.P., Li, H., Towards automated test sequence generation (2008) Proc. Australian Software Eng. Conf, pp. 441-450; Inkumsah, K., Xie, T., Improving structural testing of object-oriented programs via integrating evolutionary testing and symbolic execution (2008) Proc. IEEE/ACM Int'l Conf. Automated Software Eng, pp. 297-306; Gallagher, L., Offutt, J., Test sequence generation for integration testing of component software (2007) The Computer J, 52, pp. 514-529; Gargantini, A., Riccobene, E., ASM-based testing: Coverage criteria and automatic test sequence generation (2001) Journal of Universal Computer Science, 7 (11), pp. 1050-1067; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proc. Int'l Symp. Fault-Tolerant Computing, pp. 80-88; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; White Lee, Almezen Husain, Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, ISSRE, pp. 110-121; McMaster, S., Memon, A., Call-stack coverage for GUI test suite reduction (2008) IEEE Transactions on Software Engineering, 34 (1), pp. 99-115. , DOI 10.1109/TSE.2007.70756; Xie, Q., Memon, A.M., Rapid ""crash testing"" for continuously evolving GUI-based software applications (2005) IEEE International Conference on Software Maintenance, ICSM, 2005, pp. 473-482. , 1510142, Proceedings of the 21st IEEE International Conference on Software Maintenance, ICSM 2005; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proceedings of the International Symposium on Software Reliability Engineering, ISSRE, pp. 34-43; White, L.J., Regression testing of gui event interactions (1996) Proc. Int'l Conf. Software Maintenance, pp. 350-358; (2010) JUnit, Testing Resources for Extreme Programming, , http://junit.org/news/extension/gui/index.htm; (2003) Mercury Interactive WinRunner, , http://www.mercuryinteractive.com/products/winrunner; Brownlie, R., Prowse, J., Phadke, M.S., Robust testing of at&t pmx/starmail using oats (1992) AT&T Technical J, 71 (3), pp. 41-47; Dunietz, I.S., Ehrlich, W.K., Szablak, B.D., Mallows, C.L., Iannino, A., Applying design of experiments to software testing (1997) Proc. Int'l Conf. Software Eng, pp. 205-215; Kuhn, D., Wallace, D.R., Gallo, A.M., Software fault interactions and implications for software testing (2004) IEEE Trans. Software Eng, 30 (6), pp. 418-421. , June; Yilmaz, C., Cohen, M.B., Porter, A.A., Covering arrays for efficient fault characterization in complex configuration spaces (2006) IEEE Transactions on Software Engineering, 32 (1), pp. 20-34. , DOI 10.1109/TSE.2006.8; Qu, X., Cohen, M.B., Rothermel, G., Configuration-aware regression testing: An empirical study of sampling and prioritization (2008) Proc. Int'l Symp. Software Testing and Analysis, pp. 75-85. , July; Cohen, M.B., Dwyer, M.B., Jiangfan, S., Coverage and adequacy in software product line testing (2006) Proceedings of the ISSTA 2006 Workshop on Role of Software Architecture for Testing and Analysis, ROSATEA '06, 2006, pp. 53-63. , DOI 10.1145/1147249.1147257, Proceedings of the ISSTA 2006 workshop on Role of Software Architecture for Testing and Analysis, ROSATEA '06; Chays, D., Dan, S., Deng, Y., Vokolos, F.I., Frankl, P.G., Weyuker, E.J., (2002) AGENDA: A Test Case Generator for Relational Database Applications, , technical report, Polytechnic Univ; Bryce, R.C., Rajan, A., Heimdahl, M.P.E., Interaction testing in model-based development: Effect on model-coverage (2006) Proc. Asia Pacific Software Eng. Conf, pp. 259-268; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source GUI applications (2006) IEEE International Conference on Software Maintenance, ICSM, pp. 145-154. , DOI 10.1109/ICSM.2006.39, 4021332, ICSM 2006 Proceedings - 22nd IEEE International Conference on Software Maintenance; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM SIGPLAN Notices, 39 (12), pp. 92-106. , DOI 10.1145/1052883.1052895; Yuan, X., Cohen, M., Memon, A.M., Towards dynamic adaptive automated test generation for graphical user interfaces (2009) Proc. First Int'l Workshop TESTing Techniques & Experimentation Benchmarks for Event-Driven Software, pp. 1-4","Yuan, X.; Department of Computer Science, , College Park, MD, United States; email: xyuan@cs.umd.edu",,,,,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-79961036254
"Alsmadi I.","17433667400;","Activities and trends in testing graphical user interfaces automatically",2011,"Journal of Software Engineering","5","1",,"1","19",,3,"10.3923/jse.2011.1.19","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960861937&doi=10.3923%2fjse.2011.1.19&partnerID=40&md5=65330274d6b1b4c676623928a4f651e1","Department of Information Technology, Faculty of Computer and Information Technology, Yarmouk University, Irbid, Jordan","Alsmadi, I., Department of Information Technology, Faculty of Computer and Information Technology, Yarmouk University, Irbid, Jordan","This study introduced some new approaches for software test automation in general and testing graphical user interfaces in particular. The study presented ideas in the different stages of the test automation framework. Test automation framework main activities include test case generation, execution and verification. Other umbrella activities include modeling, critical paths selection and some others. In modeling, a methodology is presented to transform the user interface of applications into XML (i.e., extensible Markup Language) files. The purpose of this intermediate transformation is to enable producing test automation components in a format that is easier to deal with (in terms of testing). Test cases are generated from this model, executed and verified on the actual implementation. The transformation of products' Graphical User Interface (GUI) into XML files also enables the documentation and storage of the interface description. There are several cases where we need to have a stored documented format of the GUI. Having it in XML universal format, allows it to be retrieved and reused in other places. XML Files in their hierarchical structure make it possible and easy to preserve the hierarchical structure of the user interface. Several GUI structural metrics are also introduced to evaluate the user interface from testing perspectives. Those metrics can be collected automatically using the developed tool with no need for user intervention. © 2011 Academic Jourmals Inc.","GUI; Modeling; Software testing; Test automation; Test case execution; Test case generation; Test case reduction","Critical Paths; Hierarchical structures; Interface descriptions; Software test automation; Structural metrics; Test Automation; Test automation frameworks; Test case; Test case generation; Test case reduction; User intervention; XML files; Automation; Computer software selection and evaluation; Hypertext systems; Software testing; Testing; Verification; XML; Graphical user interfaces",,,,,,,,"Alsmadi, I., Magel, K., GUI path oriented test generation algorithms (2007) Proceeding of IASTED (569) Human-Computer Interaction, pp. 216-219. , March 14-16, Chamonix, France; Alsmadi, I., The utilization of user sessions in testing (2008) Proceedings of the 7th IEEE/ACIS International Conference on Computer and Information Science, pp. 581-585. , May 14-16, Portland, OR; Ames, A.K., Jie, H., (2004) Critical Paths for GUI Regression Testing, , University of California, Santa Cruz; Godase, S., (2005), http://www.indicthreads.com/1329/an-introduction-to-software-test-automation/#, An introduction to software test automation; Hanna, S., Abu All, A., Platform effect on web services robustness testing (2011) J. Applied Sci., 11, pp. 360-366; Makedonov, Y., (2005) Managers guide to GUI test automation, , Software Test and Performance Conference; Mao, Y., Boqin, F., Zhenfang, H., Li, Z., Important usage paths selection for GUI software testing (2006) Inform. Technol. J., 5, pp. 648-654; Memon, A.M., (2001) A comprehensive framework for testing graphical user interfaces, , Ph.D. Thesis, University of Pittsburgh, USA; Memon, A.M., GUI testing: Pitfall and process (2002) Software Technol, 35, pp. 87-88; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 118-127. , Sept. 1-5, Helsinki, Finland; Memom, A., Banerejee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269. , Nov. 13-16, Computer Soiety; Memon, A.M., (2004) Developing testing techniques for event-driven pervasive computing applications, , http://www.cs.umd.edu/~atif/papers/MemonBSPC2004.pdf, Department of Computer Science. University of Maryland; Memon, A., Xie, Q., Studying the fault detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Software Eng., 31, pp. 884-896; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) Proceedings of ACM Transactions on Software Engineering and Methodology (TOSEM), pp. 1-35. , November 2008, New York, USA; Mustafa, G., Shah, A.A., Asif, K.H., Ah, A., A strategy for testing of web based software (2007) Inform. Technol. J., 6, pp. 74-81; Nistonca, G., (2005), http://www.perl.com/pub/2005/08/11/win32guitest.html, Automated GUI testing; Sampath, S., (2006) Cost effective techniques for user session based testing of web applications, , Ph.D. Thesis, University of Delaware; Sengupta, G.J., Regression testing method based on XML schema for GUI components (2010) J. Software Eng., 4, pp. 137-146; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for web applications (2005) Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, pp. 253-262. , Nov. 7-11, Long Beach, USA; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) Proceedings of the 28th International Conference on Software Engineering, pp. 997-1000. , May 20-28, Shanghai, China; Xin, W., Feng-Yan, H., Zheng, Q., Software reliability testing data generation approach based on a mixture model (2010) Inform. Technol. J., 9, pp. 1038-1043","Alsmadi, I.; Department of Information Technology, , Irbid, Jordan",,,,,,,,18194311,,,,"English","J. Softw. Eng.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-79960861937
"Frajták K., Bureš M., Jelínek I.","48861099800;14015114200;7003865724;","Manual testing of web software systems supported by direct guidance of the tester based on design model",2011,"World Academy of Science, Engineering and Technology","80",,,"243","246",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052142179&partnerID=40&md5=ca9f1b2640771d2d9fa65b921a3efa20","Department of Computer Science and Engineering, Faculty of Electrical Engineering, Czech Technical University, Prague, Czech Republic","Frajták, K., Department of Computer Science and Engineering, Faculty of Electrical Engineering, Czech Technical University, Prague, Czech Republic; Bureš, M., Department of Computer Science and Engineering, Faculty of Electrical Engineering, Czech Technical University, Prague, Czech Republic; Jelínek, I., Department of Computer Science and Engineering, Faculty of Electrical Engineering, Czech Technical University, Prague, Czech Republic","Software testing is important stage of software development cycle. Current testing process involves tester and electronic documents with test case scenarios. In this paper we focus on new approach to testing process using automated test case generation and tester guidance through the system based on the model of the system. Test case generation and model-based testing is not possible without proper system model. We aim on providing better feedback from the testing process thus eliminating the unnecessary paperwork.","Model based testing; Test automation; Test generating; Tester support","Automated test case generation; Current testing; Design models; Electronic document; Model based testing; Software development cycles; System models; System-based; Test automation; Test case; Test case generation; Test generating; Tester support; Testing process; Web software; Test Automation; Automatic test pattern generation; Computer software selection and evaluation; Model checking; Software design; User interfaces; Word processing; World Wide Web; Software testing; Software testing; Testing",,,,,,,,"Tretmans, J., Model-Based Testing and Some Steps towards Test-Based Modelling (2011) Formal Methods for Eternal Networked Software Systems, 6659, pp. 297-326. , in, Springer Berlin/Heidelberg; Sawant, V., Shah, K., Construction of Test Cases from UML Models (2011) Technology Systems and Management, 145, pp. 61-68. , in, Springer Berlin/Heidelberg; Nayak, A., Debasis, S., Synthesis of test scenarios using UML activity diagrams (2011) Software and Systems Modeling, 10, pp. 63-89. , in, Springer Berlin/Heidelberg; Brambilla, M., Comai, S., Fraternali, P., Matera, M., Designing Web Applications with WebML and WebRatio (2007) Web Engineering: Modelling and Implementing Web Applications, , in, (Human-Computer Interaction Series), G. Rossi, O. Pastor, D. Schwabe, L. Olsina (Eds.). Springer, October; Yue, T., Ali, S., Briand, L., Automated Transition from Use Cases to UML State Machines to Support State-Based Testing (2011) Modelling Foundations and Applications, 6698, pp. 115-131. , in, Springer Berlin/Heidelberg; Deutsch, A., Sui, L., Vianu, V., Specification and verification of data-driven Web applications (2007) Journal of Computer and System Sciences-JCSS, 73 (3), pp. 442-474. , in, Los Angeles; Fraternali, P., Tisi, M., Multi-level Tests for Model Driven Web Applications (2010) Web Engineering, Lecture Notes in Computer Science, 6189, pp. 158-172. , in, Springer Berlin/Heidelberg; Vilkomir, S., Bowen, J., Reinforced Condition/Decision Coverage (RC/DC): A New Criterion for Software Testing (2002) ZB 2002:Formal Specification and Development in Z and B, 2272, pp. 229-239. , in, Springer Berlin/Heidelberg v80-47","Frajták, K.; Department of Computer Science and Engineering, , Prague, Czech Republic; email: frajtak@fel.cvut.cz",,,,,,,,2010376X,,,,"English","World Acad. Sci. Eng. Technol.",Article,"Final","",Scopus,2-s2.0-80052142179
"Brach P., Chrza̧szcz J., Jabłonowski J., Światły J.","43660922400;22733519300;35955925000;43661688500;","Cartographer: Architecture of a distributed system for automated GUI map generation",2011,"IMECS 2011 - International MultiConference of Engineers and Computer Scientists 2011","1",,,"761","766",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960593397&partnerID=40&md5=1eeba804f22f2c9c5435c6e216778657","Institute of Informatics, University of Warsaw, Poland","Brach, P., Institute of Informatics, University of Warsaw, Poland; Chrza̧szcz, J., Institute of Informatics, University of Warsaw, Poland; Jabłonowski, J., Institute of Informatics, University of Warsaw, Poland; Światły, J., Institute of Informatics, University of Warsaw, Poland","Vast majority of contemporary computer programs come with a complex Graphical User Interface. To facilitate automatic GUI testing, we propose Cartographer, a system for automatic generation of GUI maps. In comparison to existing solutions Cartographer has many important improvements: it is easily adaptable to particular application and technology and it is highly scalable, as it is based on a distributed system of independent Workers.","Automatic GUI map generator; Automatic program testing; GUI; GUI map","Automatic Generation; Automatic GUI map generator; Automatic programs; Distributed systems; GUI testing; Map generation; Automatic programming; Computer architecture; Distributed computer systems; Engineers; Interfaces (computer); Software testing; Graphical user interfaces",,,,,,,,"Dix, A., Finlay, J.E., Abowd, G.D., Beale, R., (2003) Human-Computer Interaction, , Prentice Hall; Gerrard, P., Testing GUI Applications (1997) EuroSTAR '97, , http://www.gerrardconsulting.com/GUI/TestGui.html, November [Online]. Available; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) ICSE '07 Proceedings of the 29th International Conference on Software Engineering; Memon, A.M., Using reverse engineering for automated usability evaluation of GUI-based applications (2009) Software Engineering Models, Patterns and Architectures for HCI, , Springer-Verlag London Ltd; Memon, A.M., Gui ripping: Reverse engineering of graphical user interfaces for testing Proceedings of the 10th Working Conference on Reverse Engineering, 2003, pp. 260-269; David, D.T., Skillicom, B., Models and languages for parallel computation (1998) ACM Computing Surveys (CSUR), , ACM; Smith, J., (2007) Inside Windows Communication Foundation, , Microsoft Press; Troelsen, A., Exploring the.NET universe using curly brackets (2010) Pro C# 2010 and The.NET 4 Platform, , Apress; Carr, H., The PEPt service oriented architecture 2nd International Conference on Service Oriented Computing New York City. ICSOC, 2004; Reed, P.R., (2004) Reference Architecture: The Best of Best Practice, , Published on IBM Website","Brach, P.; Institute of Informatics, Poland; email: p.brach@mimuw.edu.pl",,"IAENG Society of Artificial Intelligence;IAENG Society of Bioinformatics;IAENG Society of Computer Science;IAENG Society of Data Mining;IAENG Society of Electrical Engineering",,"International MultiConference of Engineers and Computer Scientists 2011, IMECS 2011","16 March 2011 through 18 March 2011","Kowloon",85583,,9789881821034,,,"English","IMECS - Int. MultiConference Eng. Comput. Scientists",Conference Paper,"Final","",Scopus,2-s2.0-79960593397
"Li J.-H., Xing D.-D.","57196156927;43262234400;","User session data based web applications test with cluster analysis",2011,"Communications in Computer and Information Science","152 CCIS","PART 1",,"415","421",,4,"10.1007/978-3-642-21402-8_66","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960393807&doi=10.1007%2f978-3-642-21402-8_66&partnerID=40&md5=9cdd95835a6c131a24215fe51b880e5e","College of Information Engineering, Qingdao University, Ningxia Road 308, Qingdao 266071, China","Li, J.-H., College of Information Engineering, Qingdao University, Ningxia Road 308, Qingdao 266071, China; Xing, D.-D., College of Information Engineering, Qingdao University, Ningxia Road 308, Qingdao 266071, China","The special features of heterogeneous components, frequent user interactions and the system dynamics cause new problems of testing web applications. With a little modification of the server configuration, log files that contain user interactions with a web application can be collected and used for the test purpose. The great issues of user session based software testing are how to effectively select an appropriate set of test data generated from such log files. The paper describes a method of using cluster techniques to partition user session data and to generate test cases for web applications. The key problems of object data types and dissimilarity definition for the special data of user sessions are elaborated. An algorithm of generating test cases from user session data is presented. The experiment with a real web application demonstrated the method's effectiveness in the code coverage and in the data reduction. © 2011 Springer-Verlag.","cluster analysis; software test; user session; web application","Code coverage; Heterogeneous component; Log file; Object data; software test; System Dynamics; Test case; Test data; Test purpose; User interaction; User sessions; WEB application; Cluster analysis; Computer science; Computer software selection and evaluation; User interfaces; World Wide Web; Software testing",,,,,,,,"DiLucca, G.A., Fasolino, A.R., Testing Web-based applications: The state of the art and future trends (2006) Information and Software Technology, 48, pp. 1172-1186; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user session data to support web applications testing (2005) IEEE Transactions on Software Engineering, 31 (3), pp. 187-202; Wang, W.H., Sampath, S., Lei, Y., Kacker, R., An Interaction-Based Test Sequence Generation Approach for Testing Web Applications (2008) 11th IEEE High Assurance Systems Engineering Symposium, Nanjing, China, pp. 2009-2018; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., A Case Study of Automatically Creating Test Suites from Web Application Field Data (2006) Workshop on Testing, Analysis, and Verification of Web Services and Applications, Portland, Maine, pp. 1-9; Gan, G., Ma, C., Wu, J., (2007) Data Clustering: Theory, Algorithms, and Applications, , SIAM-ASA, Philadelphia; Xu, R., Wunsch II, D., Survey of clustering algorithms (2005) IEEE Transactions on Neural Networks, 16 (3), pp. 645-678; Budayan, C., Dikmen, I., Talat, B.M., Comparing the performance of traditional cluster analysis, self-organizing maps and fuzzy C-means method for strategic grouping (2009) Expert Systems with Applications, 36, pp. 11772-11781; Spike PHPCoverage, , http://gcov.php.net; Send HTTP Tool, , http://soft-net.net/SendHTTPTool.aspx","Li, J.-H.; College of Information Engineering, Ningxia Road 308, Qingdao 266071, China; email: lijh@qdu.edu.cn",,"International Science and Education Researcher Association (ISER);Yellow River Conservancy Technical Institute;VIP Information Conference Center;Beijing Gireida Education Co. Ltd.",,"International Conference on Advanced Research on Computer Science and Information Engineering, CSIE 2011","21 May 2011 through 22 May 2011","Zhengzhou",85618,18650929,9783642214011,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-79960393807
"Barbosa A., Paiva A.C.R., Campos J.C.","57213812718;7102683763;7201617369;","Test case generation from mutated task models",2011,"Proceedings of the 2011 SIGCHI Symposium on Engineering Interactive Computing Systems, EICS 2011",,,,"175","184",,14,"10.1145/1996461.1996516","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960154943&doi=10.1145%2f1996461.1996516&partnerID=40&md5=a7392bad473ff52b5e948a744eb59a04","Universidade do Porto, Faculdade de Engenharia, Departamento de Engenharia Informática, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; Departamento de Informática/CCTC, Universidade do Minho, Campus de Gualtar, 4710-057 Braga, Portugal","Barbosa, A., Universidade do Porto, Faculdade de Engenharia, Departamento de Engenharia Informática, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; Paiva, A.C.R., Universidade do Porto, Faculdade de Engenharia, Departamento de Engenharia Informática, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; Campos, J.C., Departamento de Informática/CCTC, Universidade do Minho, Campus de Gualtar, 4710-057 Braga, Portugal","This paper describes an approach to the model-based testing of graphical user interfaces from task models. Starting from a task model of the system under test, oracles are generated whose behaviour is compared with the execution of the running system. The use of task models means that the effort of producing the test oracles is reduced. It does also mean, however, that the oracles are confined to the set of expected user behaviours for the system. The paper focuses on solving this problem. It shows how task mutations can be generated automatically, enabling a broader range of user behaviours to be considered. A tool, based on a classification of user errors, generates these mutations. A number of examples illustrate the approach. Copyright 2011 ACM.","Model based GUI testing; Task models","GUI testing; Model based testing; Running systems; System under test; Task models; Test case generation; Test oracles; User behaviour; Behavioral research; Computer systems; Graphical user interfaces; Models; Mathematical models",,,,,,,,"(1998) Ergonomic Requirements for Office Work with Visual Display Terminals (VDTs) - Part 11: Guidance on Usability, , ISO 9241-11, First Edition ed. International Organization for Standardization; Ivory, M.Y., Hearst, M.A., The state of the art in automating usability evaluation of user interfaces (2001) ACM Computing Surveys, 33 (4), pp. 470-516; Paiva, A.C.R., Automated specification-based testing of graphical user interfaces (2007) Department of Electrical and Computer Engineering, p. 228. , Engineering Faculty of Porto University (Ph.D thesis): Porto; Silva, J.L., Campos, J.C., Paiva, A.C.R., Modelbased user interface testing with Spec Explorer and ConcurTaskTrees (2007) 2nd International Workshop on Formal Methods for Interactive Systems, , Lancaster, UK; Paternò, F., (1999) Model-Based Design and Evaluation of Interactive Applications, , London, UK: Springer-Verlag; Mugridge, R., Cunningham, W., (2005) Fit for Developing Software: Framework for Integrated Tests, 384. , 1st Edition Ed.: Prentice Hall; Card, S.K., Moran, T.P., Newell, A., (1986) The Psychology of Human-Computer Interaction, 469. , Lawrence Erlbaum Associates; Hamilton, F., Predictive evaluation using task knowledge structures (1996) Conference Companion on Human Factors in Computing Systems: Common Ground, pp. 261-262. , ACM Vancouver, British Columbia, Canada; Mori, G., Paternò, F., Santoro, C., CTTE: Support for developing and analyzing task models for interactive system design (2002) IEEE Transactions on Software Engineering, 28, p. 9; Bolognesi, T., Brinksma, E., Introduction to the ISO specification language LOTOS (1987) Computer Networks and ISDN Systems - Special Issue: Protocol Specification and Testing, 14, p. 1; Hartman, A., Nagin, K., The AGEDIS tools for model based testing (2004) ISSTA'04, , Boston, Massachusetts, USA: Springer; Jacky, J., (2007) Model-Based Software Testing and Analysis with C#, p. 366. , Cambridge University Press; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proceedings of the 22nd IEEE International Conference on Automated Software Engineering (ASE'07), pp. 333-342. , IEEE CS: Washington, DC, USA; Memon, A., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering (WCRE'03), , Washington, DC, USA: IEEE CS; Paiva, A.C.R., A model-to-implementation mapping tool for automated model-based GUI testing (2005) Proceedings of the 7th International Conferece on Formal Engineering Methods (ICFEM'05); Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for GUI modelling and testing: VAN4GUIM (2008) Proceedings of the 3rd International Conference on Software and Data Technologies (ICSOFT'08), , J. Cordeiro, et al., Editors, INSTICC Press: Gaia, Portugal; Cunha, M., PETTool: A pattern-based GUI testing tool (2010) 2nd International Conference on Software Technology and Engineering (ICSTE'10), pp. 202-206; Reason, J., (1990) Human Error, , Cambridge University Press; Paterno, F., Santoro, C., Mantyjarvi, J., Mori, G., Sansone, S., Authoring pervasive multimodal user interfaces (2008) International Journal of Web Engineering and Technology, 4 (2), pp. 235-261. , DOI 10.1504/IJWET.2008.018099; Campos, J.C., Silva, J.L., Paiva, A.C.R., (2009) Task Models in the Model-based Testing of User Interfaces, , Technical Report, Universidade do Minho; Veans, M., Model-based testing of objectoriented reactive systems with Spec Explorer (2008) Formal Methods and Testing: An Outcome of the FORTEST Network, pp. 39-76. , Springer-Verlag; Barnett, M., Leino, K.R.M., Schulte, W., The Spec# programming system: An overview (2004) CASSIS'04 - International Workshop on Construction and Analysis of Safe Secure and Interoperable Smart Devices, , Marseille","Barbosa, A.; Universidade do Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; email: ei05089@fe.up.pt",,"ACM SIGCHI",,"3rd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, EICS'11","13 June 2011 through 16 June 2011","Pisa",85412,,9781450307789,,,"English","Proc. SIGCHI Symp. Eng. Interact. Comput. Syst., EICS",Conference Paper,"Final","",Scopus,2-s2.0-79960154943
"Xu D.","7404073618;","A tool for automated test code generation from high-level Petri nets",2011,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","6709 LNCS",,,"308","317",,28,"10.1007/978-3-642-21834-7_17","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960085275&doi=10.1007%2f978-3-642-21834-7_17&partnerID=40&md5=0c7d6585434c764f815829072ed09880","National Center for the Protection of the Financial Infrastructure, Dakota State University, Madison, SD 57042, United States","Xu, D., National Center for the Protection of the Financial Infrastructure, Dakota State University, Madison, SD 57042, United States","Automated software testing has gained much attention because it is expected to improve testing productivity and reduce testing cost. Automated generation and execution of tests, however, are still very limited. This paper presents a tool, ISTA (Integration and System Test Automation), for automated test generation and execution by using high-level Petri nets as finite state test models. ISTA has several unique features. It allows executable test code to be generated automatically from a MID (Model-Implementation Description) specification - including a high-level Petri net as the test model and a mapping from the Petri net elements to implementation constructs. The test code can be executed immediately against the system under test. It supports a variety of languages of test code, including Java, C/C++, C#, VB, and html/Selenium IDE (for web applications). It also supports automated test generation for various coverage criteria of Petri nets. ISTA is useful not only for function testing but also for security testing by using Petri nets as threat models. It has been applied to several industry-strength systems. © 2011 Springer-Verlag.","model-based testing; Petri nets; predicate/transition nets; security testing; software testing","Automated generation; Automated software testing; Automated test; Automated test generations; Coverage criteria; Finite state; High-level Petri nets; Model based testing; Net elements; Predicate/Transition net; security testing; System test; System under test; Test code; Test models; Unique features; WEB application; Automatic test pattern generation; Automation; Computer software selection and evaluation; Java programming language; Model checking; Petri nets; Testing; User interfaces; Software testing",,,,,,,,"Desel, J., Oberweis, A., Zimmer, T., Zimmermann, G., Validation of Information System Models: Petri Nets and Test Case Generation (1997) Proc. of SMC 1997, pp. 3401-3406; Genrich, H.J., Predicate/Transition Nets (1987) LNCS, 254, pp. 207-247. , Brauer, W., Reisig, W., Rozenberg, G. (eds.) APN 1986. Springer, Heidelberg; Jensen, K., Kristensen, L.M., Wells, L., Coloured Petri Nets and CPN Tools for Modelling and Validation of Concurrent Systems (2007) International Journal on Software Tools for Technology Transfer, 9, pp. 213-254; Murata, T., Petri Nets: Properties, Analysis and Applications (1989) Proc. of the IEEE, 77 (4), pp. 541-580; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann, San Francisco; Wang, C.C., Pai, W.C., Chiang, D.-J., Using Petri Net Model Approach to Object-Oriented Class Testing (1999) Proc. of SMC 1999, pp. 824-828; Xu, D., Nygard, K.E., Threat-Driven Modeling and Verification of Secure Software Using Aspect-Oriented Petri Nets (2006) IEEE Trans. on Software Engineering, 32 (4), pp. 265-278; Xu, D., Volz, R.A., Ioerger, T.R., Yen, J., Modeling and Analyzing Multi-Agent Behaviors Using Predicate/Transition Nets (2003) International Journal of Software Engineering and Knowledge Engineering, 13 (1), pp. 103-124; Xu, D., Xu, W., Wong, W.E., Automated Test Code Generation from Class State Models (2009) International J. of Software Engineering and Knowledge Engineering, 19 (4), pp. 599-623; Xu, D., Software Security (2009) Encyclopedia of Computer Science and Engineering, 5, pp. 2703-2716. , Wah, B.W. (ed.) Wiley John Wiley & Sons, Inc, Hoboken; Zhu, H., He, X., A Methodology for Testing High-Level Petri Nets (2002) Information and Software Technology, 44, pp. 473-489","Xu, D.; National Center for the Protection of the Financial Infrastructure, , Madison, SD 57042, United States; email: dianxiang.xu@dsu.edu",,,,"32nd International Conference on Applications and Theory of Petri Nets and Other Models of Concurrency, PETRI NETS 2011","20 June 2011 through 24 June 2011","Newcastle",85474,03029743,9783642218330,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-79960085275
"Mariani L., Pezzè M., Riganelli O., Santoro M.","8965048200;35581208100;14020561200;55154486300;","AutoBlackTest: A tool for automatic black-box testing",2011,"Proceedings - International Conference on Software Engineering",,,,"1013","1015",,29,"10.1145/1985793.1985979","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959900644&doi=10.1145%2f1985793.1985979&partnerID=40&md5=34ae97563addd7c01b0e993fcc934550","Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy; Faculty of Informatics, University of Lugano, Lugano, Switzerland","Mariani, L., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy; Pezzè, M., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy, Faculty of Informatics, University of Lugano, Lugano, Switzerland; Riganelli, O., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy; Santoro, M., Department of Informatics, Systems and Communications, University of Milano Bicocca, Milano, Italy","In this paper we present AutoBlackTest, a tool for the automatic generation of test cases for interactive applications. AutoBlackTest interacts with the application though its GUI, and uses reinforcement learning techniques to understand the interaction modalities and to generate relevant testing scenarios. Early results show that the tool has the potential of automatically discovering bugs and generating useful system and regression test suites. © 2011 Authors.","black-box testing; q-learning; test automation","Automatic Generation; Black-box testing; Interactive applications; Q-learning; Regression tests; Reinforcement learning techniques; test automation; Test case; Automatic test pattern generation; Program debugging; Software engineering; Software testing",,,,,,,,"Bowring, J.F., Rehg, J.M., Harrold, M.J., Active learning for automatic classification of software behavior (2004) SIGSOFT Software Engineering Notes, 29, pp. 195-205; Ertel, W., Schneider, M., Cubek, R., Tokic, M., The teaching-box: A universal robot learning framework Proceedings of the International Conference on Advanced Robotics, 2009; Halleux, J.D., Tillmann, N., Parameterized unit testing with Pex Proceedings of the International Conference on Tests and Proofs, 2008; IBM Rational Functional Tester, , http://www-01.ibm.com/software/awdtools/tester/functional/, visited in 2010; Memon, A., Pollack, M.E., Soffa, M.L., Hierarchical gui test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Peled, D., Vardi, M.Y., Yannakakis, M., Black box checking (2002) Journal of Automata, Languages and Combinatorics, 7 (2), pp. 225-246; Rodenburg, L., Twitthere, , http://twitthere.wordpress.com, visited in 2010; Sutton, R., Barto, A., (1998) Reinforcement Learning: An Introduction, , MIT Press; Veanes, M., Roy, P., Campbell, C., Online testing with reinforcement learning Proceedings of the International Workshop on Formal Approaches to Software Testing and Runtime Verification, 2006","Mariani, L.; Department of Informatics, Systems and Communications, , Milano, Italy; email: mariani@disco.unimib.it",,"Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT);IEEE Computer Society;Technical Council on Software Engineering (TCSE)",,"33rd International Conference on Software Engineering, ICSE 2011","21 May 2011 through 28 May 2011","Waikiki, Honolulu, HI",85380,02705257,9781450304450,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-79959900644
"Mesbah A., Prasad M.R.","17345931800;7201465637;","Automated cross-browser compatibility testing",2011,"Proceedings - International Conference on Software Engineering",,,,"561","570",,84,"10.1145/1985793.1985870","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959896356&doi=10.1145%2f1985793.1985870&partnerID=40&md5=175bdcf87a649cc36ac79bb97b1c2f57","Electrical and Computer Engineering, University of British Columbia, Vancouver, BC, Canada; Trusted Systems Innovation Group, Fujitsu Laboratories of America, Sunnyvale, CA, United States","Mesbah, A., Electrical and Computer Engineering, University of British Columbia, Vancouver, BC, Canada; Prasad, M.R., Trusted Systems Innovation Group, Fujitsu Laboratories of America, Sunnyvale, CA, United States","With the advent of Web 2.0 applications and new browsers, the cross-browser compatibility issue is becoming increasingly important. Although the problem is widely recognized among web developers, no systematic approach to tackle it exists today. None of the current tools, which provide screenshots or emulation environments, specifies any notion of cross-browser compatibility, much less check it automatically. In this paper, we pose the problem of cross-browser compatibility testing of modern web applications as a 'functional consistency' check of web application behavior across different web browsers and present an automated solution for it. Our approach consists of (1) automatically analyzing the given web application under different browser environments and capturing the behavior as a finite-state machine; (2) formally comparing the generated models for equivalence on a pairwise-basis and exposing any observed discrepancies. We validate our approach on several open-source and industrial case studies to demonstrate its effectiveness and real-world relevance. © 2011 ACM.","cross-browser compatibility; dynamic analysis; web testing","Automated solutions; cross-browser compatibility; Industrial case study; Open-source; Screenshots; Web 2.0 applications; WEB application; Web developers; Web testing; Dynamic analysis; Software engineering; Software testing; User interfaces; World Wide Web; Web browsers",,,,,,,,"Acid 3, , http://en.wikipedia.org/wiki/Acid3, Retrieved 4 Mar 2010; http://www.acidtests.org; BrowserCam, , http://www.browsercam.com; BrowserCamp, , http://www.browsrcamp.com; Adobe BrowserLab, , https://browserlab.adobe.com; Browser Photo, , http://www.netmechanic.com/products/browser-index.shtml; http://browsershots.org; Choudhary, S.R., Versee, H., Orso, A., Webdiff: Automated identification of cross-browser issues in web applications (2010) Proc. of the 26th IEEE Int. Conf. on Softw. Maintenance (ICSM'10), pp. 1-10; CrossBrowserTesting, , http://www.crosbrowsertesting.com; Dolson, J., What Is ""Cross-browser Compatibility?"", , http://www.joedolson.com/articles/2008/03/what-is-cross-browser- compatibility/; Eaton, C., Memon, A.M., An empirical approach to evaluating web application compliance across diverse client platform configurations (2007) International Journal of Web Engineering and Technology, 3 (3), pp. 227-253. , DOI 10.1504/IJWET.2007.012055; Garrett, J.J., (2005) Ajax: A New Approach to Web Applications, , http://www.adaptivepath.com/publications/essays/archives/000385.php, February; Hopcroft, J.E., Ullman, J.D., (1979) Introduction to Automata Theory, Language and Computation, , Addision-Wesley; ieCapture, , http://www.iecapture.com; IE NetRenderer, , http://ipinfo.info/netrenderer/; IETester, , http://www.my-debugbar.com/wiki/IETester/HomePage; iPhoney, , http://sourceforge.net/projects/iphonesimulator/; Kiciman, E., Livshits, B., AjaxScope: A platform for remotely monitoring the client-side behavior of Web 2.0 applications (2007) Proc. 21st Symp. on Operating Sys. Principles (SOSP'07), pp. 17-30; Kitchenham, B., Pickard, L., Pfleeger, S.L., Case studies for method and tool evaluation (1995) IEEE Softw., 12 (4), pp. 52-62; Litmus, , http://litmusapp.com; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing Proc. of the 10th Working Conf. on Reverse Engineering, Nov. 2003; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling Ajax by inferring user interface state changes (2008) Proc. 8th Int. Conference on Web Engineering (ICWE'08), pp. 122-134. , IEEE Computer Society; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of Ajax user interfaces (2009) Proc. 31st Int. Conference on Software Engineering (ICSE'09), pp. 210-220. , IEEE Computer Society; Ramler, R., Weippl, E., Winterer, M., Schwinger, W., Altmann, J., A quality-driven approach to web testing (2002) Proceedings of 2nd Conf. on Web Engineering (ICWE'02); Ricca, F., Tonella, P., Web testing: A roadmap for the empirical research (2005) Proc. Int. Symp. on Web Site Evolution (WSE '05), pp. 63-70; Rode, J., Rosson, M.A.P.-Q.M.B., (2002) The Challenges of Web Engineering and Requirements for Better Tool Support, , Technical Report TR-05-01, Computer Science Department, Virginia Tech; Roest, D., Mesbah, A., Van Deursen, A., Regression testing Ajax applications: Coping with dynamism (2010) Proc. 3rd Int. Conference on Softw. Testing, Verification and Validation (ICST'10), pp. 128-136. , IEEE Computer Society; Soechting, E., Dobolyi, K., Weimer, W., Syntactic regression testing for tree-structured output (2009) Proc. Int. Symp. on Web Systems Evolution (WSE'09), , IEEE Computer Society; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for web applications (2005) Proc. 20th Int. Conference on Aut. Softw. Eng. (ASE'05), pp. 253-262. , ACM; SputnikTests, , http://code.google.com/p/sputniktests/; List of Web Browsers, , http://en.wikipedia.org/wiki/List_of_web_browsers; Xenocode Browser Sandbox, , http://spoon.net/browsers/; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1), p. 4; Zammetti, F.W., (2006) Practical Ajax Projects with Java Technology, , Apress","Mesbah, A.; Electrical and Computer Engineering, , Vancouver, BC, Canada; email: amesbah@ece.ubc.ca",,"Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT);IEEE Computer Society;Technical Council on Software Engineering (TCSE)",,"33rd International Conference on Software Engineering, ICSE 2011","21 May 2011 through 28 May 2011","Waikiki, Honolulu, HI",85380,02705257,9781450304450,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-79959896356
"Artzi S., Dolby J., Jensen S.H., Møller A., Tip F.","23134814500;8837002700;35102247400;57195116933;57203108250;","A framework for automated testing of JavaScript web applications",2011,"Proceedings - International Conference on Software Engineering",,,,"571","580",,130,"10.1145/1985793.1985871","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959887904&doi=10.1145%2f1985793.1985871&partnerID=40&md5=8f1aacf4338a8956647e4bd13a0cca95","IBM Research, Yorktown Heights, NY, United States; Aarhus University, Aarhus, Denmark","Artzi, S., IBM Research, Yorktown Heights, NY, United States; Dolby, J., IBM Research, Yorktown Heights, NY, United States; Jensen, S.H., Aarhus University, Aarhus, Denmark; Møller, A., Aarhus University, Aarhus, Denmark; Tip, F., IBM Research, Yorktown Heights, NY, United States","Current practice in testing JavaScript web applications requires manual construction of test cases, which is difficult and tedious. We present a framework for feedback-directed automated test generation for JavaScript in which execution is monitored to collect information that directs the test generator towards inputs that yield increased coverage. We implemented several instantiations of the framework, corresponding to variations on feedback-directed random testing, in a tool called Artemis. Experiments on a suite of JavaScript applications demonstrate that a simple instantiation of the framework that uses event handler registrations as feedback information produces surprisingly good coverage if enough tests are generated. By also using coverage information and read-write sets as feedback information, a slightly better level of coverage can be achieved, and sometimes with many fewer tests. The generated tests can be used for detecting HTML validity problems and other programming errors. © 2011 ACM.","ajax; automated testing; debugging; event driven; javascript; random testing; web applications","ajax; Automated testing; event driven; Javascript; Random testing; WEB application; Automation; High level languages; Java programming language; Random errors; Software engineering; Testing; User interfaces; World Wide Web; Software testing",,,,,,,,"Artzi, S., Dolby, J., Tip, F., Pistoia, M., Practical fault localization for dynamic web applications Proc. 32nd Int. Conf. on Software Engineering, ICSE '10, May 2010; Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A.M., Ernst, M.D., Finding bugs in dynamic web applications Proc. Int. Symp. on Software Testing and Analysis, ISSTA '08, July 2008; Boonstoppel, P., Cadar, C., Engler, D.R., RWset: Attacking path explosion in constraint-based test generation Proc. 14th Int. Conf. on Tools and Algorithms for the Construction and Analysis of Systems, TACAS '08, March-April 2008; Bryce, R.C., Memon, A.M., Test suite prioritization by interaction coverage Proc. Workshop on Domain Specific Approaches to Software Test Automation, DOSTA '07, September 2007; Duda, C., Frey, G., Kossmann, D., Matter, R., Zhou, C., AJAX crawl: Making AJAX applications searchable Proc. 25th Int. Conf. on Data Engineering, ICDE '09, March-April 2009; ECMAScript Language Specification, , ECMA. 3rd edition. ECMA-262; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing Proc. ACM SIGPLAN Conf. on Programming Language Design and Implementation, PLDI '05, June 2005; Guarnieri, S., Livshits, B., Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code Proc. 18th USENIX Security Symposium, August 2009; Guha, A., Krishnamurthi, S., Jim, T., Using static analysis for Ajax intrusion detection Proc. 18th Int. Conf. on World Wide Web, WWW '09, April 2009; Heidegger, P., Thiemann, P., JSConTest: Contract-driven testing of JavaScript code (2010) LNCS, , Proc. 48th Int. Conf. on Objects, Components, Models and Patterns, TOOLS '10, Springer, June-July; Hsu, H.-Y., Orso, A., MINTS: A general framework and tool for supporting test-suite minimization Proc. 31st Int. Conf. on Software Engineering, ICSE '09, May 2009; Jensen, S.H., Møller, A., Thiemann, P., Type analysis for JavaScript (2009) LNCS, 5673. , Proc. 16th Int. Static Analysis Symposium, SAS '09, Springer, August; Le Hors, A., (2004) Document Object Model (DOM) Level 3 Core Specification, , http://www.w3.org/TR/DOM-Level-3-Core/, April; Marchetto, A., Tonella, P., Search-based testing of Ajax web applications Proc. 1st Int. Symp. on Search Based Software Engineering, SSBSE '09, May 2009; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications Proc. 1st Int. Conf. on Software Testing, Verification, and Validation, ICST '08, April 2008; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification & Reliability, 17 (3), pp. 137-157; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling AJAX by inferring user interface state changes Proc. 8th Int. Conf. on Web Engineering, ICWE '08, July 2008; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of AJAX user interfaces Proc. 31st Int. Conf. on Software Engineering, ICSE '09, May 2009; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback-directed random test generation Proc. 29th Int. Conf. on Software Engineering, ICSE '07, May 2007; Richards, G., Lebresne, S., Burg, B., Vitek, J., An analysis of the dynamic behavior of JavaScript programs Proc. ACM SIGPLAN Conf. on Programming Language Design and Implementation, PLDI '10, June 2010; Rothermel, G., Untch, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) IEEE Trans. on Software Engineering, 27 (10), pp. 929-948; Saxena, P., Akhawe, D., Hanna, S., McCamant, S., Song, D., Mao, F., A symbolic execution framework for JavaScript Proc. 31st IEEE Symp. on Security and Privacy, S&P '10, May 2010; Schepers, D., Document Object Model (DOM) level 3 events specification (2009) W3C Working Draft, , http://www.w3.org/TR/DOM-Level-3-Events/, September; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C Proc. 10th European Software Engineering Conf. / 13th ACM SIGSOFT Int. Symp. on Foundations of Software Engineering, ESEC/FSE '05, September 2005; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Trans. on Software Engineering, 36 (1), pp. 81-95; Yuan, X., Memon, A.M., Iterative execution-feedback model-directed GUI testing (2010) Information & Software Technology, 52 (5), pp. 559-575","Artzi, S.; IBM Research, Yorktown Heights, NY, United States; email: artzi@us.ibm.com",,"Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT);IEEE Computer Society;Technical Council on Software Engineering (TCSE)",,"33rd International Conference on Software Engineering, ICSE 2011","21 May 2011 through 28 May 2011","Waikiki, Honolulu, HI",85380,02705257,9781450304450,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-79959887904
"Song B., Chen S.","35243826200;36650204400;","Testing web applications with web frameset and browser interactions",2011,"Information Technology Journal","10","7",,"1305","1314",,,"10.3923/itj.2011.1305.1314","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959572797&doi=10.3923%2fitj.2011.1305.1314&partnerID=40&md5=72158676cd8d00c9c1ba32e360d1b099","College of Information Science and Technology, Qingdao University of Science and Technology, 266061 Qingdao, China; Shanghai Key Laboratory of Computer Software Evaluating and Testing, 201112 Shanghai, China; School of Computer Engineering and Science, Shanghai University, 200072 Shanghai, China","Song, B., College of Information Science and Technology, Qingdao University of Science and Technology, 266061 Qingdao, China, Shanghai Key Laboratory of Computer Software Evaluating and Testing, 201112 Shanghai, China; Chen, S., School of Computer Engineering and Science, Shanghai University, 200072 Shanghai, China","Software testing is a difficult task and testing Web applications may be more difficult, due to their characteristics. Web application is an interactive one since it came into being. How to model and test Web interactions is a challenge in software engineering. Web navigation models are useful to clarify requirements and specify implementation behaviors. Web frameset and Web browser's interactions are wildly used in today's Web applications. The behaviors of Web frameset and Web browser interactions changed the traditional Web navigation and influence the functionalities of Web applications. In this study, we took Web frameset and Web browser's interactions into account and proposed an approach to modeling the Web application's navigation and generating tests with Web framesets and browser's interactions. The construction formal semantics of structure compositionof Web frameset is give out. Based on the formal semantics, the Web navigation with Web framesets is modeled. The Extended Browser Loading Model with Web frameset (EBLM) and the extended FSMis employed to formalize the navigation models with Web framesets and browser's interactions andaFSM Test-Tree (FSM-TT) is constructed using present construction algorithm. At last, test generation is given out which satisfies the corresponding coverage criteria. This study resolves the following research problems: (1) propose an approach tomodeling Web applications with Web framesets and Web browser's interactions, (2) give the formal construction semantics of Web frameset and (3) formalize the navigation model and generatingtests. © 2011 Asian Network for Scientific Information.","FSM; Navigation model; Software modeling; Test generation; Test tree","FSM; Navigation model; Software modeling; Test generations; Test tree; Computer software selection and evaluation; Formal methods; Navigation; Plant extracts; Semantic Web; Semantics; Software testing; Testing; Trees (mathematics); User interfaces; Web browsers; World Wide Web",,,,,,,,"Andrews, A., Offutt, J., Alexander, R., Testing web applications by modeling with FSMs (2004) Software Syst. Modeling, 4, pp. 326-345; Chen, J., Zhao, X., Formal models for web navigations with session control and browser cache (2004) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 3308, pp. 46-60; Dargham, J., Nasrawi, S.A., FSM behavioral modeling approach for hypermedia web applications: FBM-FfWA approach (2006) Proceedings of the Advanced International Conference on Telecommunications and International Conference on Internet and Web Applications and Services, pp. 199-204. , Feb. 19-25, Guadeloupe, French Caribbean; Di Lucca, G.A., Fasolino, A.R., Testing Web-based applications: The state of the art and future trends (2006) Information and Software Technology, 48 (12), pp. 1172-1186. , DOI 10.1016/j.infsof.2006.06.006, PII S0950584906000851; Di Lucca, G.A., Di Penta, M., Considering browser interaction in web application testing (2003) Proceedings of the 5th IEEE International Workshop on Web Site Evolution, pp. 74-81. , Sept. 22, IEEE Press, New York, USA; Fajuyigbe, O., Balogun, V.F., Obembe, O.M., Web-based Geographical Information System (GIS) for tourism in Oyo State, Nigeria (2007) Information Technology Journal, 6 (5), pp. 613-622; Hieatt, E., Mee, R., Going faster: Testing the Web application (2002) IEEE Software, 19 (2), pp. 60-65. , DOI 10.1109/52.991333; Kosindrdecha, N., Daengdej, J., A test case generation process and technique (2010) J. Software Eng., 4, pp. 265-287; Layachi-Badri, S., Structural test of a data basis oriented object after phase of conception (2006) Inform. Technol. J., 5, pp. 753-758; Leung Karl, R.P.H., Hui Lucas, C.K., Yiu, S.M., Tang Ricky, W.M., Modeling web navigation by statechart (2000) Proceedings - IEEE Computer Society's International Computer Software and Applications Conference, pp. 41-47; Miao, H., Qian, Z., He, T., Modeling web browser interactions using FSM (2007) Proceedings of the 2nd IEEE Asia-Pacific Service Computing Conference, pp. 211-217. , Dec. 11-14, Tsukuba, Japan; Mustafa, G., Shah, A.A., Asif, K.H., Ali, A., A strategy for testing of web based software (2007) Information Technology Journal, 6 (1), pp. 74-81; Nielsen, J., (1995) Multimedia and Hypertext: The Internet and Beyond, , 2nd Edn., Morgan Kaufmann, San Francisco; De Oliveira, M.C.F., Turine, M.A.S., Masiero, P.C., A statechart-based model for hypermedia applications (2001) ACM Transactions on Information Systems, 19 (1), pp. 28-52; Roongruangsuwan, S., Daengdej, J., A test case prioritization method with practical weight factors (2010) J. Software Eng., 4, pp. 193-214; Song, B., Miao, H.K., Modeling web applications and generating tests: A combination and interactions-guided approach (2009) Proceedings of the 3rd IEEE International Symposium on Theoretical Aspects of Software Engineering, pp. 174-181. , July 29-31, Tianjin, China; Song, B., Miao, H., Chen, S., Modeling web browser interactions and generating tests (2008) Proceedings of the 4th International Conference on Computational Intelligence and Security, pp. 399-404. , Dec. 13-17, Suzhou, China; Turine, M.A.S., Oliveira, M.C.F., Masiero, P.C., A navigation-oriented hypertext model based on statecharts (1997) Proceedings of the 8th ACM Conference on Hypertext, pp. 102-111. , April 6-11, Southamption, UK; http://www.w3.org/TR/html401, W3C, 1999. HTML 4.01 Specification; Zeng, H., Miao, H., Liu, J., Specification-based test generation and optimization using model checking (2007) First Joint IEEE/IFIP Symposium on Theoretical Aspects of Software Engineering, TASE '07, pp. 349-355. , DOI 10.1109/TASE.2007.46, 4239978, First Joint IEEE/IFIP Symposium on Theoretical Aspects of Software Engineering, TASE '07","Song, B.; College of Information Science and Technology, , 266061 Qingdao, China",,,,,,,,18125638,,,,"English","Inf. Technol. J.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-79959572797
"Zenarosa G.L., Leonard R.J.","34881220900;41261626200;","Towards automated oracles for GUI input validation",2011,"Proceedings - International Conference on Software Engineering",,,,"113","114",,1,"10.1145/1982595.1982623","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959477312&doi=10.1145%2f1982595.1982623&partnerID=40&md5=734b3f22e4d0b406725c600f748488ea","Department of Industrial Engineering, University of Pittsburgh, 1048 Benedum Hall, 3700 O'Hara Street, Pittsburgh, PA 15261, United States; National Surgical Adjuvant Breast and Bowel Project, University of Pittsburgh, One Sterling Plaza, 201 North Craig Street, Pittsburgh, PA 15213, United States","Zenarosa, G.L., Department of Industrial Engineering, University of Pittsburgh, 1048 Benedum Hall, 3700 O'Hara Street, Pittsburgh, PA 15261, United States; Leonard, R.J., National Surgical Adjuvant Breast and Bowel Project, University of Pittsburgh, One Sterling Plaza, 201 North Craig Street, Pittsburgh, PA 15213, United States","Testing input validation in web applications from specifications is a challenging and laborious process. GUI testing tools - with their record-and-playback and data-driven capabilities - ease the pains of testing through automation. Out-of-the-box, however, these tools have some scaling limitations as setup costs are incurred for every distinct web application to test. In environments where a line of many web applications are regularly created for various customers and purposes, scaling the test automation to span the entire product line is extremely valuable. In this paper, we report on our experience in generalizing the automatic specification-based testing of input validation in a line of web applications. Our approach is based on a nonstandard use of a GUI testing tool enabled by adjustments to coding standards and the requirements specification writing process. © 2011 Authors.","input validation; specification-based testing; test automation; web applications","Coding standards; Data-driven; GUI testing; Input validation; Product-lines; Requirements specifications; Scaling limitation; Setup costs; Specification Based Testing; Test Automation; WEB application; Writing process; Automation; Graphical user interfaces; Health care; Software engineering; Specifications; Standards; Technical writing; World Wide Web; Software testing",,,,,,,,"Offutt, J., Wang, Q., Ordille, J., An Industrial Case Study of Bypass Testing on Web Applications (2008) Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation, pp. 465-474. , Washington, DC, USA, IEEE Computer Society; Offutt, J., Wu, Y., Du, X., Huang, H., Bypass Testing of Web Applications (2004) Proceedings of the 15th International Symposium on Software Reliability Engineering, pp. 187-197. , Washington, DC, USA, IEEE Computer Society; Pichler, J., Ramler, R., How to Test the Intangible Properties of Graphical User Interfaces? Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation, 2008, pp. 494-497. , Washington, DC, USA, IEEE Computer Society","Zenarosa, G. L.; Department of Industrial Engineering, 3700 O'Hara Street, Pittsburgh, PA 15261, United States; email: glz5@pitt.edu",,"ACM SIGSOFT;IEEE CS",,"6th International Workshop on Automation of Software Test, AST 2011, Co-located with ICSE 2011","22 May 2011 through 23 May 2011","Waikiki, Honolulu, HI",85238,02705257,9781450305853,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-79959477312
"Hu C., Neamtiu I.","40661267400;10041674000;","A GUI bug finding framework for Android applications",2011,"Proceedings of the ACM Symposium on Applied Computing",,,,"1490","1491",,12,"10.1145/1982185.1982504","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959324083&doi=10.1145%2f1982185.1982504&partnerID=40&md5=f293683963bc1a942f69698f18d428b2","Department of Computer Science and Engineering, University of California, Riverside, CA, United States","Hu, C., Department of Computer Science and Engineering, University of California, Riverside, CA, United States; Neamtiu, I., Department of Computer Science and Engineering, University of California, Riverside, CA, United States","Users increasingly rely on mobile applications for computational needs. Google Android is a popular mobile platform, hence the correctness of Android applications is becoming increasingly important. Many Android correctness issues, however, fall outside the scope of traditional verification techniques, as they are due to the novelty of the platform and its activity- and event-oriented application construction paradigm. In this paper we present an approach for verifying Android applications with a focus on GUI bugs. We present techniques for detecting GUI bugs by automatic generation of test cases, feeding the application random events, instrumenting the VM, producing log/trace files and analyzing them post-run. These techniques have helped re-discover existing bugs and finding new bugs in Android applications. © 2011 Authors.","dynamic analysis; Google Android; GUI testing; test case generation","Automatic Generation; Bug finding; Event-oriented; Google Android; GUI testing; Mobile applications; Mobile platform; Test case; Test case generation; Verification techniques; Dynamic analysis; Graphical user interfaces; Robots",,,,,,,,"List of Android Devices, , en.wikipedia.org/wiki/List-of-Android-devices; (2010) Android Market, , http://androidfeeder.com/, April; (2010), http://www.junit.org/, May; (2010) Monkey UI/Application Exerciser, , http://developer.android.com/guide/developing/tools/monkey.html, May; (2010) Android Soars, but Iphone Still Most Desired As Smartphones Grab 25 Percents of U.S. Mobile Market, , http://blog.nielsen.com/nielsenwire/online_mobile/android-soars-but- iphone-still-most-desired\-as-smartphones-grab-25-of-u-s-mobile-market/, August","Hu, C.; Department of Computer Science and Engineering, , Riverside, CA, United States; email: huc@cs.ucr.edu",,"ACM Special Interest Group on Applied Computing (SIGAPP);Tunghai University;Taiwan Ministry of Education;Taiwan Bureau of Foreign Trade;Taiwan National Science Council (NSC)",,"26th Annual ACM Symposium on Applied Computing, SAC 2011","21 March 2011 through 24 March 2011","TaiChung",85134,,9781450301138,,,"English","Proc ACM Symp Appl Computing",Conference Paper,"Final","",Scopus,2-s2.0-79959324083
"Sprenkle S., Pollock L., Simko L.","13613671200;7005623618;57220410145;","A study of usage-based navigation models and generated abstract test cases for web applications",2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation, ICST 2011",,, 5770612,"230","239",,16,"10.1109/ICST.2011.34","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958717563&doi=10.1109%2fICST.2011.34&partnerID=40&md5=964942e6ff878bff7b2bde3e48083838","Dept. of Computer Science, Washington and Lee University, Lexington, VA, United States; Dept. of Computer and Information Sciences, University of Delaware, Newark, DE, United States","Sprenkle, S., Dept. of Computer Science, Washington and Lee University, Lexington, VA, United States; Pollock, L., Dept. of Computer and Information Sciences, University of Delaware, Newark, DE, United States; Simko, L., Dept. of Computer Science, Washington and Lee University, Lexington, VA, United States","While web applications expand in usage and complexity, testing demands are growing without corresponding automated support. One promising approach to automatic test generation is statistical model-based testing, where logged user behavior is used to build a usage-based model of web application navigation, from which abstract test cases are generated. Executable test cases are then created by adding parameter values to the abstract test cases. Several researchers have proposed variations of this approach, however, no one has empirically examined the tradeoffs and implications of the different ways to represent user behavior in a navigation model and the characteristics of the automatically generated test cases from different models. We report on our exploratory study of automatically generated abstract test cases and the underlying usage-based navigation models constructed from over 3500 user sessions across five publicly deployed web applications. Our results suggest how web testers can easily tune statistical model-based automatic test case generators for web applications toward generating tests closely related to user behavior or toward new navigations without using large additional test resources. © 2011 IEEE.","navigation models; test-case generation; web application","Automated support; Automatic test; Automatic test generation; Automatically generated; Exploratory studies; Model based testing; Navigation model; Parameter values; Test case; Test case generation; User behaviors; User sessions; WEB application; Abstracting; Behavioral research; Computer software selection and evaluation; Navigation; Software testing; User interfaces; Verification; World Wide Web; Automatic test pattern generation",,,,,,,,"Alalfi, M.H., Cordy, J.R., Dean, T.R., Modelling methods for web application verification and testing: State of the art (2009) Software Testing, Verification, and Reliability, 19 (4), pp. 265-296; Andrews, A.A., Offutt, J., Dyreson, C., Mallery, C.J., Jerath, K., Alexander, R., Scalability issues with using FSMs to test web applications (2009) Information and Software Technology; Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A., Ernst, M.D., Finding bugs in dynamic web applications Int'l Symp. on Software Testing and Analysis, July 2008; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles International Conference on Automated Software Engineering (ASE), 2007; (2010), http://cobertura.sourceforge.net/; Di Lucca, G., Fasolino, A., Faralli, F., Carlini, U., Testing web applications International Conference on Software Maintenance, 2002; (2010), http://www.dspace.org/; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user session data to support web application testing (2005) IEEE Trans. on Software Engineering, 31 (3); (2003) Open Source Web Applications with Source Code, , http://www.gotocode.com; Halfond, W.G.J., Orso, A., Improving test case generation for web applications using automated interface discovery (2007) Foundations of Software Engineering; Halle, S., Ettema, T., Bunch, C., Bultan, T., Eliminating navigation errors in web applications via model checking and runtime enforcement of navigation state machines (2010) Automated Software Engineering; Kallepalli, C., Tian, J., Measuring and modeling usage and reliability for statistical web testing (2001) IEEE Transactions on Software Engineering, 27 (11), pp. 1023-1036. , DOI 10.1109/32.965342; Liu, C.-H., C, K.D., Hsia, P., Hsu, C.-T., Structural testing of web applications International Symposium on Software Reliability Engineering (ISSRE), 2000; Ricca, F., Tonella, P., Analysis and testing of web applications Int'l Conf. on Software Engineering (ICSE), 2001; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Web application testing with customized test requirements - An experimental comparison study International Symposium on Software Reliability Engineering (ISSRE), 2006; Sampath, S., Sprenkle, S., Gibson, E., Pollock, L., Greenwald, A.S., Applying concept analysis to user-sessionbased testing of web applications (2007) Transactions on Software Engineering, 33 (10), pp. 643-658. , October; Sant, J., Souter, A., Greenwald, L., An exploration of statistical models of automated test case generation International Workshop on Dynamic Analysis, May 2005; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., A case study of automatically creating test suites from web application field data Workshop on Testing, Analysis, and Verification of Web Services and Applications, 2006; Tonella, P., Ricca, F., Statistical testing of web applications (2004) Journal of Software Maintenance and Evolution, 16 (1-2), pp. 103-127; Wang, W., Lei, Y., Sampath, S., Kacker, R., Kuhn, R., Lawrence, J., A combinatorial approach to building navigation graphs for dynamic web applications International Conference on Software Maintenance, 2009; Wassermann, G., Yu, D., Chander, A., Dhurjati, D., Inamura, H., Su, Z., Dynamic test input generation for web applications Int'l Symp. on Software Testing and Analysis, 2008","Sprenkle, S.; Dept. of Computer Science, , Lexington, VA, United States; email: sprenkles@wlu.edu",,"IEEE Computer Society;Google;Berner and Mattner;Centre for Research on Evolution, Search and Testing (CREST);Ericsson",,"4th IEEE International Conference on Software Testing, Verification, and Validation, ICST 2011","21 March 2011 through 25 March 2011","Berlin",85144,,9780769543420,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-79958717563
"Navarro P.L.M., Pérez G.M., Ruiz D.S.","36521389600;7203067256;57197985146;","Towards software quality and user satisfaction through user interfaces",2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation, ICST 2011",,, 5770632,"415","418",,1,"10.1109/ICST.2011.13","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79958694539&doi=10.1109%2fICST.2011.13&partnerID=40&md5=3df4650f7957fd58b57a86c844bcb597","Departamento de Ingeniería de la Información Y Las Comunicaciones (DIIC), University of Murcia, 30.071 Murcia, Spain; Departamento de Ingeniería Y Tecnología de Los Computadores (DITEC), University of Murcia, 30.071 Murcia, Spain","Navarro, P.L.M., Departamento de Ingeniería de la Información Y Las Comunicaciones (DIIC), University of Murcia, 30.071 Murcia, Spain, Departamento de Ingeniería Y Tecnología de Los Computadores (DITEC), University of Murcia, 30.071 Murcia, Spain; Pérez, G.M., Departamento de Ingeniería de la Información Y Las Comunicaciones (DIIC), University of Murcia, 30.071 Murcia, Spain; Ruiz, D.S., Departamento de Ingeniería Y Tecnología de Los Computadores (DITEC), University of Murcia, 30.071 Murcia, Spain","With this PhD we expect to provide the community and the industry with a solid basis for the development, integration, and deployment of software testing tools. As a solid basis we mean, on one hand, a set of guidelines, recommendations, and clues to better comprehend, analyze, and perform software testing processes, and on the other hand, a set of robust software frameworks that serve as a starting point for the development of future testing tools. © 2011 IEEE.","automatic test case generation; GUI testing; GUI-data verification; software testing; usability evaluation; user experience evaluation","Automatic testcase generation; GUI testing; GUI-data verification; Usability evaluation; User experience; Computer software selection and evaluation; Graphical user interfaces; Software testing",,,,,,,,"Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Open HMI Tester: An Open and Cross-Platform Architecture for GUI Testing and Certification (2010) International Journal of Computer Systems Science and Engineering (IJCSSE), Special Issue on Open Source Certification, 25 (4), pp. 283-296. , July; Orso, A., Kennedy, B., Selective capture and replay of program executions (2005) ACM SIGSOFT Software Engineering Notes, 30 (4), pp. 1-7. , http://dblp.uni-trier.de/db/journals/sigsoft/sigsoft30.html#OrsoK05, Online. Available; Nasika, R., Dasgupta, P., Transparent Migration of Distributed Communicating Processes 13th ISCA International Conference on Parallel and Distributed Computing Systems (PDCS), Las Vegas, Nevada, USA, November 2000; Memon, A.M., Banerjee, I., Hashmi, N., Nagarajan, A., Dart: A framework for regression testing ""nightly/daily builds"" of gui applications (2003) ICSM. IEEE Computer Society, pp. 410-419. , http://dblp.uni-trier.de/db/conf/icsm/icsm2003.html#MemonBHN03, Online. Available; (2009) OpenHMI-Tester Prototype, , http://sourceforge.net/projects/openhmitester, Cátedra SAES - University of Murcia; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., A Proposal for Automatic Testing of GUIs Based on Annotated Use Cases (2010) Advances in Software Engineering, 2010. , no. 671284; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Automated GUI Testing Validation Guided by Annotated Use Cases (2009) GI Jahrestagung, Ser. LNI, 154, pp. 2796-2804. , http://dblp.uni-trier.de/db/conf/gi/gi2009.html#NavarroRP09, S. Fischer, E. Maehle, and R. Reischuk, Eds., GI, Online. Available; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source gui applications (2006) ICSM. IEEE Computer Society, pp. 145-154. , http://dblp.uni-trier.de/db/conf/icsm/icsm2006.html#XieM06, Online. Available; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for gui-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1). , http://dblp.uni-trier.de/db/journals/tosem/tosem16.html#XieM07, Online. Available; (2010) OHT Plus Product Family, , https://sourceforge.net/projects/ohtpinspectorOHT+Experience, Cátedra SAES - University of Murcia OHT+Inspector https://sourceforge.net/projects/ohtpexperience OHT+Behavior: https://sourceforge.net/projects/ohtpbehavior; Molich, R., Wilson, C., Tips and Tricks for Avoiding Common Problems in Usability Test Facilitation (2008) CHI '08: CHI '08 Extended Abstracts on Human Factors in Computing Systems, pp. 2379-2382. , New York, NY, USA: ACM; Bach, P.M., Kirschner, B., Carroll, J.M., Usability and Free/Libre/Open Source osftware SIG: HCI expertise and Design Rationale (2007) CHI Extended Abstracts, pp. 2097-2100. , http://dblp.uni-trier.de/db/conf/chi/chi2007a.html#BachKC07, M. B. Rosson and D. J. Gilmore, Eds. ACM, Online. Available; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Verificación de Datos en la GUI como un Aspecto Separado de las Aplicaciones (2010) Actas de Los Talleres de Las Jornadas de Ingeniería del Software Y Bases de Datos; Chen, F., Roşu, G., Mop: An efficient and generic runtime verification framework (2007) OOPSLA '07: Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications, pp. 569-588. , New York, NY, USA: ACM; Bodden, E., J-LO-A tool for runtime-checking temporal assertions (2008) AOSD'08: Proceedings of the 7th International Conference on Aspect-oriented Software Development, pp. 36-47. , nUfhttp://www.bodden.de/pubs/bodden05jlo.pdfg, ACM Online. Available; Ieee 1012-2004 - Ieee standard for software verification and validation IEEE. IEEE, June 2005, pp. 0-110. , nUfhttp://ieeexplore.ieee.org/servlet/opac?punumber=9958g, I. of Electrical and E. Engineers revision of IEEE Std 1012-1998. [Online]. Available; (2010) Aspect-Oriented GUI Verification Framework, , https://sourceforge.net/projects/guiverification, Cátedra SAES - University of Murcia; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Aplicación de Open HMI Tester como framework open-source para herramientas de pruebas de software (2009) REICIS: Revista Espaola de Innovación, Calidad e Ingeniería del Software, 5 (4). , December; Navarro, P.L.M., Ruiz, D.S., Pérez, G.M., Open HMI Tester: Un Framework Open-source para Herramientas de Pruebas de Software (2009) Actas de Los Talleres de Las Jornadas de Ingeniería del Software Y Bases de Datos, 3 (4); (2009) Open Tester for Usability Prototype, , http://sourceforge.net/projects/ohtu, Cátedra SAES - University of Murcia; (2010) Open HMI Tester Plus Architecture, , https://sourceforge.net/projects/ohtplus","Navarro, P. L. M.; Departamento de Ingeniería de la Información Y Las Comunicaciones (DIIC), , 30.071 Murcia, Spain; email: pedromateo@um.es",,"IEEE Computer Society;Google;Berner and Mattner;Centre for Research on Evolution, Search and Testing (CREST);Ericsson",,"4th IEEE International Conference on Software Testing, Verification, and Validation, ICST 2011","21 March 2011 through 25 March 2011","Berlin",85144,,9780769543420,,,"English","Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-79958694539
"Rauf A., Jaffar A., Shahid A.A.","57194106980;35173140800;24725536800;","Fully automated gui testing and coverage analysis using genetic algorithms",2011,"International Journal of Innovative Computing, Information and Control","7","6",,"3281","3294",,7,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-79956099839&partnerID=40&md5=811a2568a051089578c3db05bb6068f3","Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan","Rauf, A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Jaffar, A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Shahid, A.A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan","Graphical user interface (GUI), is a graphical front-end to a software system, contains graphical objects with certain distinct values whose purpose is to ascertain the state of the GUI at any time. In order to ensure that the quality of the software is par excellence, software developing organizations endeavor to test the software meticulously. Nevertheless, the process of testing a GUI application calls for a colossal effort, owing on account of the intricacy entailed in such applications. Subsequently, organizations were spurred to initiate the automation of GUI testing, thereby proposing various techniques to achieve this end. A GUI model event-flow graph, an innovative technique being utilized in the field of automated GUI testing, represents, likewise control ow graph, all promising progressions of events that can be executed on GUI. The search for utmost quality insurance for software, through the introduction of automated software testing, raises yet another challenging question, that of the ""amount"" of testing required so as procuring the best results. In the course of the development of the techniques for the automation of the software testing procedure, a few measures can be employed to provide guidance on the quality of an automatic test suite. Based on some predefined test criterion, genetic algorithm searches for the best possible test parameter combinations. Usually, this test criterion corresponds to a ""coverage function"" that measures how much of the automatically generated optimization parameters satisfies the given test criterion. In this paper, we have attempted to exploit the event driven nature of GUI. Based on this nature, we have presented a GUI testing and coverage analysis technique centered on genetic algorithms. © 2011 ICIC International.","Automation testing; Coverage analysis; Coverage criterion; Event flow; Genetic algorithm; GUI testing; Test data generation; Test path","Automation testing; Coverage analysis; Coverage criterion; Event flow; GUI testing; Test data generation; Test path; Automatic test pattern generation; Automation; Computer software selection and evaluation; Curricula; Genetic algorithms; Graphical user interfaces; Software testing",,,,,,,,"Bertolino, A., (2008) Software testing forever: Old and New Processes and Techniques for Validating ToDay's Applications, , Monte Porzio Catone; Testing: A roadmap (2000) International Conference on Software Engineering, Proc. of the Conference on the Future of Software Engineering, pp. 61-72. , Limerick, Ireland; An event-flow model of GUI-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab, 17 (3), pp. 137-157. , http://dx.doi.org/10.1002/stvr.v17:3; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. on Software Engineering and Methodology, 18 (2); Korel, B., Automated software test data generation (1990) IEEE Trans. on Software Engineering, 16 (8), pp. 870-879; Kasik, D.J., George, H.G., (1996) Toward Automatic Generation of Novice User Test Scripts, pp. 244-251. , New York; Vaysburg, B., Tahat, L.H., Korel, B., (2002) Dependence Analysis in Reduction of Requirement Based Test Suites, pp. 107-111; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. Thesis, University of Pittsburgh, Pittsburgh, PA; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. on Software Engineering, 31 (10), pp. 884-896; Memon, A.M., Soffa, M.L., Pollack, M.E., (2001) Coverage Criteria for GUI Testing, , Vienna, Austria; Kasik, D.J., George, H.G., (1996) Toward Automatic Generation of Novice User Test Scripts, pp. 244-251. , Vancouver, British Columbia, Canada; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interaction (2001) Proc. of the International Symposium on Software Reliability Engineering, pp. 54-63; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc. of the International Symposium on Software Reliability Engineering, pp. 110-121; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proc. of the 21st International Conference on Software Engineering, pp. 257-266; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test-case generation using automated planning (2001) IEEE Trans. on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proc. of the 8th International Symposium on the Foundations of Software Engineering, pp. 30-39; White, L., Regression testing of GUI event interactions (1996) Proc. of the International Conference on Software Maintenance, pp. 350-358; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proc. of the 9th European Software Engineering Conference and the 11th ACM SIGSOFT International Symposium on The Foundations of Software Engineering, pp. 118-127; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proc. of the 8th European Software Engineering Conference and the 9th ACM SIGSOFT International Symposium on The Foundations of Software Engineering, pp. 256-267; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; (1998) Automated Test Generation from a Behavioural Model, , Portland, OR; Chow, T.S., Testing software design modelled by finite-state machines (1978) IEEE Trans. on Software Engineering, 4 (3), pp. 178-187; Esmelioglu, S., Apfelbaum, L., Automated test generation, execution, and reporting (1997) Proc. of Pacific Northwest Software Quality Conference; Bernhard, P.J., A reduced test suite for protocol conformance testing (1994) ACM Trans. on Software Engineering and Methodology, 3 (3), pp. 201-220; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proc. of the 27th Annual International Symposium on Fault-Tolerant Computing, pp. 80-88; Jones, B.F., Eyres, D.E., Sthamer, H.H., A strategy for using genetic algorithms to automate branch and fault-based testing (1998) The Computer Journal, 41 (2), pp. 98-107; Jones, B.F., Sthamer, H.H., Eyers, D.E., Automatic structural testing using genetic algorithms (1996) The Software Engineering Journal, 11 (5), pp. 299-306; Michael, C.C., McGraw, G., Schatz, M.A., Generating software test data by evolution (2001) IEEE Trans. on Software Engineering, 27 (12), pp. 1085-1110; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Journal of Software Testing, Verification and Reliability, 9 (4), pp. 263-282; Tracey, N., Clark, J., Mander, K., McDermid, J., Automated test-data generation for exception conditions (2000) Software Practice and Experience, 30 (1), pp. 61-79; Lu, Y., Yan, D., Nie, S., Wang, C., (2008) Development of An Improved GUI Automation Test System Based on Event-ow Graph; Holland, J.H., (1992) Adaptation in Natural and Artificial Systems, , MIT Press; Memon, A.M., Soffa, M.L., Pollack, M.E., (2001) Coverage Criteria for GUI Testing, , Vienna, Austria; Memon, A.M., (2002) Determining the Adequacy of GUI Test Case, , University of Maryland; Ganov, S., Killmar, C., Khurshid, S., Perry, D., (2008) Test Generation for Graphical User Interfaces Based on Symbolic Execution, , Leipzig, Germany; Paiva, A.C.R., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for GUI testing (2007) Electr. Notes Theor. Comput. Sci, 190 (2), pp. 99-111; Rauf, A., Anwar, S., Jaffer, M.A., Shahid, A.A., (2010) Automated GUI Test Coverage Analysis Using GA, , Las Vegas, NV; Ono, S., Hirotani, Y., Nakayama, S., (2009) A Memetic Algorithm for Robust Optimal Solution Search -Hybridization of Multi-objective Genetic Algorithm and Quasi-Newton Method, 5 (12 B), pp. 5011-5020; Chang, J.-F., (2009) A Performance Comparison Between Genetic Algorithms and Particle Swarm Optimization Applied in Constructing Equity Portfolios, 5 (12 B), pp. 5069-5080; Wu, Y., Ji, P., Wang, T., An empirical study of a pure genetic algorithm to solve the capacitated vehicle routing problem (2008) ICIC Express Letters, 2 (1), pp. 41-45; Wang, Y., Fuzzy clustering analysis by using genetic algorithm (2008) ICIC Express Letters, 2 (4), pp. 331-337; Kushida, J.-I., Nakaoka, I., Kamei, K., Hoshino, Y., (2009) Application of Co-evolutionary System for Strategy Developments of Teams in the Same Generation to Team Match-up Games, 5 (11 A), pp. 3667-3676; Yao, K.C., Single input virtual digital multi-meter design and implementation (2008) International Journal of Innovative Computing, Information and Control, 4 (12), pp. 3101-3110; Borji, A., Hamidi, M., A new approach to global optimization motivated by parliamentary political competitions (2009) International Journal of Innovative Computing, Information and Control, 5 (6), pp. 1643-1653; Liu, C., New evolutionary algorithm for multi-objective constrained optimization (2008) ICIC Express Letters, 2 (4), pp. 339-344","Rauf, A.; Department of Computer Science, , Islamabad, Pakistan; email: a.rauf@nu.edu.pk",,,,,,,,13494198,,,,"English","Int. J. Innov. Comput. Inf. Control",Article,"Final","",Scopus,2-s2.0-79956099839
"Appasami G., Mohan Raj V., Zubair M.","37088262300;37089174800;57220511315;","Automated testing of Silverlight and Moonlight applications",2011,"Proceedings of National Conference on Innovations in Emerging Technology, NCOIET'11",,, 5738832,"49","54",,,"10.1109/NCOIET.2011.5738832","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79954566498&doi=10.1109%2fNCOIET.2011.5738832&partnerID=40&md5=b2b25d20a8671a985a4ffa9f56fbaee4","Department of Computer Science and Engineering, Dr. Pauls Engineering College, Villupuram, Tamilnadu, India","Appasami, G., Department of Computer Science and Engineering, Dr. Pauls Engineering College, Villupuram, Tamilnadu, India; Mohan Raj, V., Department of Computer Science and Engineering, Dr. Pauls Engineering College, Villupuram, Tamilnadu, India; Zubair, M., Department of Computer Science and Engineering, Dr. Pauls Engineering College, Villupuram, Tamilnadu, India","This paper presents User Interface Test Automation of Silverlight and Moonlight web applications. Silverlight is a new technology in Dot Net 3.5 framework developed by Microsoft. Moonlight is an equivalent technology for Linux operating system. Now a day most of the interactive and attractive web pages are developed using Silverlight and Moonlight. So in is paper we initially concentrating on user interface automation and then testing and then imputation technique to find missing data. Passing huge volume data from User Interface layer to Data access layer with verifying business layer is considered as User Interface Automation. Testing is the process of checking the passed values are successfully updated or not. Imputation of missing data are Finding, generating and updating the missing values. © 2011 IEEE.","Imputation of missing data and Silverlight Automation; User Interface Automation; User Interface Testing","Automated testing; Data access layers; Imputation of missing data and Silverlight Automation; Imputation techniques; Interface layer; LINUX- operating system; MicroSoft; Missing data; Missing values; New technologies; Test Automation; User Interface Testing; Volume data; WEB application; Web page; Automation; Computer operating systems; Innovation; Technology; World Wide Web; User interfaces",,,,,,,,"Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1), pp. 4-es. , February; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Xiaochun, Z., Bo, Z., Juefeng, L., Qiu, G., A test automation solution on GUI functional test (2008) IEEE Conference on Software Maintenance, 6 (2), pp. 1413-1418. , july; White Lee, Almezen Husain, Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, ISSRE, pp. 110-121; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the International Symposium on Software Reliability Engineering, ISSRE, pp. 54-63; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution, 17 (1 SPEC. ISSUE), pp. 27-64. , DOI 10.1002/smr.305; Derezinska, A., Malek, T., Experiences in testing automation of a family of functional- and GUI-similar Programs (2007) International Journal of Computer Science & Applications, Technomathematics Research Foundation, 4 (1), pp. 13-26. , June; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software Applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1), p. 4; Xun, Y., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings - International Conference on Software Engineering, pp. 396-405. , DOI 10.1109/ICSE.2007.94, 4222601, Proceedings - 29th International Conference on Software Engineering, ICSE 2007; Appasami, G., Suresh Joseph, K., Automationpeer - User interface test automation for silverlight applications (2009) International Journal of Advanced Computing, , IETech publications June; Pickles, Andrew, Missing data, problems and solutions (2005) Encyclopedia of Social Measurement, pp. 689-694. , Kimberly Kempf-Leonard, ed., Amsterdam: Elsevier; Fewster, (1999) Software Test Automation, , Addison Wesley; Li, K., Wu, M., (2005) Effective GUI Test Automation: Developing An Automated GUI Testing Tool, , SYBEX Inc; Li, K., Wu, M., (2004) Effective Software Test Automation: Developing An Automated Software Testing Tool, , ISBN:0782143202 Sybex Inc; Arnold, T., Hopton, D., Leonard, A., Frost, M., (2007) Professional Software Testing with Visual Studio® 2005 Team System, , Wiley Publishing, Inc; Dustin, E., (2003) Effective Software Testing, , Pearson Education Inc; Dayley, B., Dayley, L.D., (2008) Silverlight™ 2 Bible, , Wiley Publishing, Inc; MacDonald, M., (2008) Silverlight 2 Visual Essentials, , Firstpress; Allison, P.D., (2001) Missing Data, , Thousand Oaks, CA: Sage Publications; http://www.silverlight.net; http://code.msdn.microsoft.com/silverlightut; http://silverlight.net/learn/tutorials/controls.aspx; http://www.jeff.wilcox.name/2008/03/silverlight2-unit-testing/; http://msdn.microsoft.com/en-us/library/cc645045(VS.95).aspx; http://weblogs.asp.net/scottgu/archive/2008/04/02/unit-testingwith- silverlight.aspx; http://dotnetslackers.com/Patterns_and_Practices/ UI_Automation_Testing_with_UIA_Veify.aspx; http://dotnetslackers.com/Silverlight/re- 146496_UI_Automation_Accessibility_in_Silverlight_2_tools_and_resources_summary. aspx","Appasami, G.; Department of Computer Science and Engineering, , Villupuram, Tamilnadu, India; email: appas_9g@yahoo.com",,"IEEE Madras Section;URC Construction Pvt. Ltd.",,"National Conference on Innovations in Emerging Technology, NCOIET'11","17 February 2011 through 18 February 2011","Perundurai, Erode",84555,,9781612848082,,,"English","Proc. Natl. Conf. Innovations Emerg. Technol., NCOIET",Conference Paper,"Final","",Scopus,2-s2.0-79954566498
"Alsmadi I., Al-Kabi M.","17433667400;36929981600;","GUI structural metrics",2011,"International Arab Journal of Information Technology","8","2",,"124","129",,6,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052589276&partnerID=40&md5=f4813f80f75e80cc0a118dfa46b1e598","Department of Computer Science, Information Technology and Yarmouk University, Jordan","Alsmadi, I., Department of Computer Science, Information Technology and Yarmouk University, Jordan; Al-Kabi, M., Department of Computer Science, Information Technology and Yarmouk University, Jordan","User interfaces have special characteristics that differentiate them from the rest of the software code. Typical software metrics that indicate its complexity and quality may not be able to distinguish a complex GUI or a high quality one from another that is not. This paper is about suggesting and introducing some GUI structural metrics that can be gathered dynamically using a test automation tool. Rather than measuring quality or usability, the goal of those developed metrics is to measure the GUI testability, or how much it is hard, or easy to test a particular user interface. We evaluate GUIs for several reasons such as usability and testability. In usability, users evaluate a particular user interface for how much easy, convenient, and fast it is to deal with it. In our testability evaluation, we want to automate the process of measuring the complexity of the user interface from testing perspectives. Such metrics can be used as a tool to estimate required resources to test a particular application.","GUI metrics; Interface usability; Layout complexity",,,,,,,,,"Alsmadi, I., Kenneth, M., GUI Path Oriented Test Generation Algorithms (2007) Proceedings of IASTED HCI, pp. 465-469. , France; Alsmadi, I., Kenneth, M., GUI Test Automation Framework (2007) Proceedings of the International Conference On Software Engineering Research and Practice; Alsmadi, I., Kenneth, M., GUI Path Oriented Test Case Generation (2007) Proceedings of the International Conference On Software Engineering Theory and Practice, pp. 179-185; Balbo, S., Automatic Evaluation of User Interface Usability: Dream or Reality (1995) Proceedings of the Queensland Computer- Human Interaction Symposium, pp. 44-46. , Australia; Beirekdar, A., Jean, V., Monique, N., (2002) KWARESMI1: Knowledge-Based Web Automated Evaluation With Reconfigurable Guidelines Optimization, , citeseer.ist.psu.edu/article-/beirekdar 02kwaresmi.html, Last Visited; Comber, T., Maltby, R., Investigating Layout Complexity (1996) Proceedings of 3rd International Eurographics Workshop On Design, Specification and Verification of Interactive Systems, pp. 209-227. , Belgium; Deshpande, M., George, K., Selective Markov Models for Predicting Web-Page Accesses (2004) Computer Journal ACM Transactions On Internet Technology, 4 (2), pp. 163-184; Farenc, C., Palanque, P., A Generic Framework Based on Ergonomic Rules for Computer-Aided Design of User Interface (1999) Proceedings of the 3rd International Conference On Computer-Aided Design of User Interfaces, , http://lis.univtlse1fr/farenc/papers/-cadui-9.ps, Last Visited; Farenc, C., Palanque, P., Bastide, R., Embedding Ergonomic Rules as Generic Requirements in the Development Process of Interactive Software (1999) Proceedings of the 7th IFIP Conference On Human-Computer Interaction Interact'99, , http://lis.univtlse1fr/farenc/-papers/interact-99.ps, UK, Last Visited; Goetz, P., (2006) Too Many Clicks! Unit-Based Interfaces Considered Harmful, , http://gamasutra.com/features/20060823/goetz_01.shtml, Gamastura, Last Visited; Ivory, M., Marti, H., The State of the Art in Automating Usability Evaluation of User Interfaces (2001) Computer Journal of ACM Computing Surveys, 33 (4), pp. 470-516; (2006) User Interface Metrics, , http://zone.ni.com/reference-/enXX/help/371361B01/lvhowto/userinterface_statistics/, LabView 8.2 Help, National Instruments, Last Visited; Magel, K., Izzat, A., GUI Structural Metrics and Testability Testing (2007) Proceedings of IASTED SEA, pp. 159-163. , USA; Pastel, R., (2007) Human-Computer Interactions Design and Practice, , http://www.csl.mtu.edu-/cs4760/www/, Course, Last Visited; Raskin, J., (2000) Humane Interface: New Directions For Designing Interactive Systems, , Addison-Wesley, USA; Ritter, F., Dirk, R., Robert, A., A User Modeling Design Tool for Comparing Interfaces (2002) Proceedings of the 4th International Conference On Computer-Aided Design of User Interfaces (CADUI'2002), pp. 111-118. , citeseer.ist.psu.edu-/450618. html; Robins, K., (2006) User Interfaces and Usability Lectures, , http://vip.cs.utsa.edu/-classes/cs623s2006/, Last Visited; Thomas, C., Bevan, N., (1996) Usability Context Analysis: A Practical Guide, , Teddington, UK; Tullis, T., (1988) Handbook of Human-Computer Interaction, , Elsevier Science Publishers; Tullis, T., A System for Evaluating Screen Formats (1988) Proceedings For Advances In Human-Computer Interaction, pp. 214-286; Tullis, T., The Formatting of Alphanumeric Displays: A Review and Analysis (1983) Computer Journal of Human Factors, 22 (2), pp. 657-683","Alsmadi, I.; Department of Computer Science, Jordan",,,,,,,,16833198,,,,"English","Int. Arab J. of Info. Tech.",Article,"Final","",Scopus,2-s2.0-80052589276
"Marchetto A., Tonella P.","23971457800;7003489194;","Using search-based algorithms for Ajax event sequence generation during testing",2011,"Empirical Software Engineering","16","1",,"103","140",,29,"10.1007/s10664-010-9149-1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951512547&doi=10.1007%2fs10664-010-9149-1&partnerID=40&md5=512d412124d6bd85249569aa259526bc","Fondazione Bruno Kessler-IRST, Povo, Trento 38050, Italy","Marchetto, A., Fondazione Bruno Kessler-IRST, Povo, Trento 38050, Italy; Tonella, P., Fondazione Bruno Kessler-IRST, Povo, Trento 38050, Italy","Modern Web applications offer a rich and unique user experience by taking advantages of the so called Web 2.0 technologies, among which Ajax. Ajax supports the intensive use of asynchronous communication between client-pages and the Web server and it allows on-the-fly manipulations of client-pages content and structure to realize a rich, dynamic and interactive user interface. Correspondingly, new types of faults that cannot be easily revealed by existing Web testing techniques are associated with modern Ajax-based applications. In our previous investigations, we used state-based testing for event sequence generation and it proved to be quite effective in exposing Ajax specific faults. However, the search space of the semantically interacting event sequences is huge, as it can grow exponentially with the event sequence length. In this paper, we apply search-based algorithms, namely hill climbing and simulated annealing, to the problem of generating maximally diverse event sequences of various lengths. In this way, we control the size of the generated test suites, while keeping the included test cases as diverse as possible. We evaluate the performance of the algorithms on two open source Ajax applications. © 2010 Springer Science+Business Media, LLC.","Ajax applications; Search-based software engineering; Web testing","Ajax applications; Asynchronous communication; Content and structure; Event sequence; Hill climbing; Interactive user interfaces; On-the-fly; Open sources; Search spaces; Search-based algorithms; Search-based software engineering; State-based testing; Test case; User experience; Web 2.0; WEB application; Web servers; Web testing; Algorithms; Graphical user interfaces; Simulated annealing; Software engineering; Testing; World Wide Web",,,,,,,,"Andrews, A.A., Offutt, J., Alexander, R.T., Testing Web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , DOI 10.1007/s10270-004-0077-7; Bozdag, E., Mesbah, A., Van Deursen, A., Performance testing of data delivery techniques for ajax applications (2009) J Web Eng, 8 (4), pp. 477-492; Cheon, Y., Kim, M.Y., Perumandla, A., A complete automation of unit testing for Java programs (2005) Proc. of the International Conference on Software Engineering Research and Practice (SERP05), pp. 290-295. , USA; Dallmeier, V., Lindig, C., Wasylkowski, A., Zeller, A., Mining object behavior with ADABU (2006) Proc. of the International Workshop on Dynamic Analysis (WODA), pp. 17-24. , Shangai, China; Elbaum, S., Rothermel, G., Karre, S., Fisher II, M., Leveraging user-session data to support web application testing (2005) IEEE Transactions on Software Engineering, 31 (3), pp. 187-202. , DOI 10.1109/TSE.2005.36; Gatlin, K.S., Trials and tribulations of debugging concurrency (2004) ACM Queue, 2 (7), pp. 67-73. , 10.1145/1035594.1035623; Kirkpatrick, S., Gelatt, C.D., Vecchi, M.P., Optimization by simulated annealing (1983) Science, 220 (4598), pp. 671-680. , 10.1126/science.220.4598.671 702485; Marchetto, A., Tonella, P., Search-based testing of ajax web applications (2009) Proc. of IEEE International Symposium on Search Based Software Engineering (SSBSE), pp. 3-13. , IEEE Computer Society, Windsor; Marchetto, A., Tonella, P., Ricca, F., A case study-based comparison of web testing techniques applied to ajax web applications (2008) Int J Softw Tools Technol Transf (STTT), 10 (6), pp. 477-492. , 10.1007/s10009-008-0086-x; Marchetto, A., Tonella, P., Ricca, F., State-based testing of ajax web applications (2008) Proc. of IEEE International Conference on Software Testing (ICST), pp. 121-131. , Lillehammer, Norway; Marchetto, A., Tonella, P., Ricca, F., Under and over approximation of state models for ajax applications (2010) Proc. of IEEE European Conference on Software Maintenance and Reengineering (CSMR), pp. 241-245. , Madrid, Spain; McMinn, P., Seach-based software test data generation: A survey (2004) Software Testing, Verification and Reliability, Wiley; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of ajax user interfaces (2009) Proc. of the International Conference on Software Engineering (ICSE), pp. 210-220. , IEEE Computer Society, Vancouver; Nikolik, B., Test diversity (2006) Information and Software Technology, 48 (11), pp. 1083-1094. , DOI 10.1016/j.infsof.2006.02.001, PII S0950584906000255; Pargas, R.P., Harrold, M.J., Peck, R.R., Test-data generation using genetic algorithms (1999) Software Testing Verification and Reliability, 9 (4), pp. 263-282. , DOI 10.1002/(SICI)1099-1689(19991 2)9:4<263::AID-STVR190>3.0.CO;2-Y; Patton, R.M., Wu, A.S., Walton, G.H., A genetic algorithm approach to focused software usage testing (2003) Software Engineering with Computational Intelligence, , Kluwer Academic; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) Proceedings - International Conference on Software Engineering, pp. 25-34; Russell, S.J., Norvig, P., (2003) Artificial Intelligence: A Modern Approach, , Prentice-Hall NJ; Suman, B., Kumar, P., A survey of simulated annealing as a tool for single and multiobjective optimization (2006) Journal of the Operational Research Society, 57 (10), pp. 1143-1160. , DOI 10.1057/palgrave.jors.2602068, PII 2602068; Turner, C.D., Robson, D.J., The state-based testing of object-oriented programs (1993) Proc. of the International Conference on Software Maintenance (ICSM), pp. 302-310; Xiong, J., Williams, M., Price, J., Testing Ajax applications with Selenium (2006) InfoQ Magazine., , http://www.infoq.com/articles/testing-ajax-selenium(lastvisit:2010); Yuan, X., Memon, A., Alternating gui test generation and execution (2008) Proc. of IEEE Testing: Academic and Industrial Conference (TAIC PART), pp. 23-33. , IEEE Computer Society, Washington; Xun, Y., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings - International Conference on Software Engineering, pp. 396-405. , DOI 10.1109/ICSE.2007.94, 4222601, Proceedings - 29th International Conference on Software Engineering, ICSE 2007","Marchetto, A.; Fondazione Bruno Kessler-IRST, Povo, Trento 38050, Italy; email: marchetto@fbk.eu",,,,,,,,13823256,,ESENF,,"English","Empir Software Eng",Article,"Final","",Scopus,2-s2.0-79951512547
"Li H., Guo H., Chen F., Yang H., Yang Y.","36053007600;7404404347;57193337135;35070638900;55719919000;","Using ontology to generate test cases for GUI testing",2011,"International Journal of Computer Applications in Technology","42","2-3",,"213","224",,7,"10.1504/IJCAT.2011.045407","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863122861&doi=10.1504%2fIJCAT.2011.045407&partnerID=40&md5=8b3c2ab55eb3eaa00e1e9e7802f0a556","School of Computer Science and Technology, Dalian University of Technology, 116023 Dalian, China; School of Software, Dalian University of Technology, Development Area, 116620 Dalian, China; Faculty of Technology (FoT), De Montfort University, Leicester, LE1 9BH, United Kingdom","Li, H., School of Computer Science and Technology, Dalian University of Technology, 116023 Dalian, China; Guo, H., School of Software, Dalian University of Technology, Development Area, 116620 Dalian, China; Chen, F., Faculty of Technology (FoT), De Montfort University, Leicester, LE1 9BH, United Kingdom; Yang, H., Faculty of Technology (FoT), De Montfort University, Leicester, LE1 9BH, United Kingdom; Yang, Y., School of Computer Science and Technology, Dalian University of Technology, 116023 Dalian, China","Graphical User Interface (GUI) testing is a knowledge-intensive process. In this paper, ontology is introduced to generate user-centric GUI test cases. First, GUI and non-GUI components are captured by reverse engineering techniques. Next, relations among GUI components are analysed and a GUI ontology is constructed by representing all analysed results. Then, test case generation rules are defined and used to simplify test cases. After that, a case study is demonstrated on a general communication application, which shows that the proposed approach is technically feasible and ontology can facilitate GUI testing by utilising knowledge of GUI systems and experience of testers. Copyright © 2011 Inderscience Enterprises Ltd.","Component relation; GUI testing; Ontology; Test case","Embedded systems; Ontology; Reverse engineering; Testing; Communication application; Component relations; Graphical user interfaces (GUI); GUI testing; Knowledge intensive process; Reverse engineering techniques; Test case; Test case generation; Graphical user interfaces",,,,,,,,"Baader, F., Calvanese, D., McGuinness, D., Nardi, D., Schneider, P.P., (2003) The Description Logic Handbook: Theory, Implementation and Application, , Cambridge University Press, Cambridge; Bai, X., Lee, S., Tsai, W., Chen, Y., Ontology-based test modeling and partition testing of web services (2008) 2008 IEEE International Conference on Web Services (ICWS'08), pp. 465-472. , 23-26 September, Beijing, China; Chainbi, W., An ontology-based multi-agent system conceptual model (2008) International Journal of Computer Applications in Technology, 31 (1-2), pp. 35-44. , DOI 10.1504/IJCAT.2008.017717; Chen, Z., Xu, B., Yang, H., Test coverage analysis based on program slicing (2003) 2003 IEEE International Conference on Information Reuse and Integration (IRI'03), pp. 559-565. , 27-29 October, las Vegas, NV, USA; Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) 30th International Conference on Software Engineering (ICSE'08), pp. 959-960. , 10-18 May, Leipzig, Germany; (2010) Wikipedia, , http://en.wikipedia.org/wiki/Knowledge, viewed 13 September 2010; Kosindrdecha, N., Roongruangsuwan, S., Reducing test case created by path oriented test case generation (2007) AIAA Infotech@Aerospace 2007 Conference and Exhibit, p. 2979. , 7-10 May, California, USA; Li, H., Chen, F., Yang, H., Guo, H., Chu, W.C., An ontology-based approach for GUI testing (2009) 33rd Annual IEEE International Computer Software and Applications Conference (COMPSAC'09), pp. 632-633. , 20-24 July, Seattle, Washington, USA; Li, Y., Yang, H., Chu, W.C., A concept-oriented belief revision approach to domain knowledge recovery from source code (2001) Journal of Software Maintenance: Research and Practice, 13 (1), pp. 31-52; Li, Z., Reformat, M., A schema for ontology-based concept definition and identification (2010) International Journal of Computer Applications in Technology, 38 (4), pp. 333-345; Maxon, L., (2010) Nunit Forms, , http://nunitforms.sourceforge.net, Obtained through the internet:, Accessed 19/1/2010; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) 10th Working Conference on Reverse Engineering (WCRE'03), p. 260. , 13-16 November, Victoria, Canada; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157. , DOI 10.1002/stvr.364; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 256-267; Meszaros, X.G., Agile regression testing using record and playback (2003) 18th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages and Applications (OOPSLA'03), pp. 353-360. , 26-30 October, Anaheim, CA, USA; Nguyen, C.D., Perini, A., Tonella, P., Ontology-based test generation for multiagent systems (2008) 7th International Conference on Autonomous Agents and Multiagent Systems (AAMAS'08), pp. 1315-1318. , 12-16 May, Estoril, Portugal; Da Silva Simao, A., De Mello, R.F., Senger, L.J., A technique to reduce the test case suites for regression testing based on a self-organizing neural network architecture (2006) Proceedings - International Computer Software and Applications Conference, 2, pp. 93-96. , DOI 10.1109/COMPSAC.2006.103, 4020148, Proceedings - 30th Annual International Computer Software and Applications Conference, COMPSAC 2006 - Short Papers/Workshops/Fast Abstracts/Doctoral Symposium; Sowa, J.F., (2000) Knowledge Representation: Logical, Philosophical, and Computational Foundations, , Brooks/Cole Publishing Co., Pacific Grove; Suryanarayanan, M.G., Selvaraju, S., Irulappan, A., Mirinda, P., Gnanasekaran, M.H., Ontology-based relevance analysis for automatic reference tracking (2009) International Journal of Computer Applications in Technology, 35 (2-4), pp. 165-173; Vieira, M., Ledue, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a model-driven approach (2006) International Workshop on Automation of Software Test (AST'06), pp. 9-14. , 23 May, Shanghai, China; Wang, Y., Bai, X., Li, J., Huang, R., Ontology-based test case generation for testing web services (2007) Proceedings - Eighth International Symposium on Autonomous Decentralized Systems, ISADS 2007, pp. 43-50. , DOI 10.1109/ISADS.2007.54, 4144652, Proceedings - Eighth International Symposium on Autonomous Decentralized Systems, ISADS 2007; Yang, H., Cui, Z., O'Brien, P., Extracting ontologies from legacy systems for understanding and re-engineering (1999) 23rd Annual International Computer Software and Applications Conference (COMPSAC'99), p. 21. , 27-29 October, Phoenix, USA; Yang, H., Liu, X., Zedan, H., Abstraction: A key notion for reverse engineering in a system reengineering approach (2000) Journal of Software Maintenance, 12 (4), pp. 197-228. , DOI 10.1002/1096-908X(200007/08)12:4<197::AID-SMR211>3.0.CO;2-X; Yuan, X., Cohen, M.B., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007) 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE'07), pp. 405-408. , 5-9 November, Atlanta, Georgia, USA; Zhang, Y., Zhu, H., Ontology for service oriented testing of web services (2008) 2008 IEEE International Symposium on Service-oriented System Engineering (SOSE 2008), pp. 129-134. , 18-19 December, Taiwan; Zhou, H., Kang, J., Chen, F., Yang, H., OPTIMA: An ontology-based platform-specific software migration approach (2007) 7th International Conference on Quality Software (QSIC'07), pp. 143-152. , 11-12 October, Portland, Oregon, USA","Li, H.; School of Computer Science and Technology, , 116023 Dalian, China; email: lihan409@gmail.com",,,"Inderscience Publishers",,,,,09528091,,IJCTE,,"English","Int J Comput Appl Technol",Article,"Final","",Scopus,2-s2.0-84863122861
"Aho P., Menz N., Räty T., Schieferdecker I.","35188652400;46461640500;16550820200;57030660000;","Automated java GUI modeling for model-based testing purposes",2011,"Proceedings - 2011 8th International Conference on Information Technology: New Generations, ITNG 2011",,, 5945245,"268","273",,21,"10.1109/ITNG.2011.54","https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051500610&doi=10.1109%2fITNG.2011.54&partnerID=40&md5=131d516d736c4fef129dc1426bc409ae","VTT Technical Research Centre of Finland, Finland; Fraunhofer FOKUS, Finland","Aho, P., VTT Technical Research Centre of Finland, Finland; Menz, N., Fraunhofer FOKUS, Finland; Räty, T., VTT Technical Research Centre of Finland, Finland; Schieferdecker, I., Fraunhofer FOKUS, Finland","Advanced methods and tools for GUI software development allow a rapid and iterative process of prototyping and usability testing. Unfortunately, even with the support of test automation tools, testing of GUI software requires a lot of manual work, especially when the application under test is changing rapidly. In this paper we present an improved method and tool support for automated test modeling of Java GUI applications for model-based testing (MBT) purposes. The implemented GUI Driver tool generates structural models combined with a GUI state model presenting the behavior of the GUI application that is executed and observed automatically. The GUI Driver tool is combined with an open source MBT tool to form a tool chain to support automated testing of Java GUI applications. The models generated by the GUI Driver are used to generate test sequences with MBT tool, and the test sequences are then executed with the GUI Driver to generate a test report. © 2011 IEEE.","automatic model generation; GUI state model; GUI testing; model-based testing; tool chain","Application programs; Automation; Graphical user interfaces; Iterative methods; Java programming language; Model checking; Open source software; Software design; Software prototyping; Application under tests; Automatic model generation; GUI testing; Model based testing; State modeling; Structural models; Test automation tool; Usability testing; Software testing",,,,,,,,"Myers, B.A., (1996) UIMSs, Toolkits, Interface Builders, , Human Computer Interaction Institute, Carnegie Mellon University, May; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI Testing Using a Model-driven Approach Proceedings of the 2006 International Workshop on Automation of Software Test, International Conference on Software Engineering, Shanghai, China, 2006, pp. 9-14; Myers, B.A., Hudson, S.E., Pausch, R., Past, present, and future of user interface software tools (2000) ACM Transactions on Computer-Human Interaction (TOCHI), 7 (1), pp. 3-28. , March; Kanstrén, T., A Framework for Observation-Based Modelling in Model-Based Testing (2010) VTT Publications, 727. , Espoo, Finland; Santos-Neto, P., Resende, R., Pâdua, C., Requirements for information systems model-based testing Proceedings of the 2007 ACM Symposium on Applied Computing, pp. 1409-1415; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Satama, M., Towards Deploying Model-Based Testing with a Domain-Specific Modeling Approach (2006) Proceedings of Testing: Academic & Industrial Conference (TAIC PART 2006), Windsor, UK, pp. 81-89. , IEEE CS Press; http://sourceforge.net/projects/guitar/, accessed 6th of October 2010; Li, K., Wu, M., (2004) Effective GUI Test Automation: Developing An Automated GUI Testing Tool, , SYBEX Inc., Alameda, CA; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology (TOSEM), 18 (2). , November Article No. 4; Grechanik, M., Xie, Q., Fu, C., Maintaining and Evolving GUI-Directed Test Scripts Proceedings of the 2009 IEEE 31st International Conference on Software Engineering (ICSE 2009), pp. 408-418; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification & Reliability, 17 (3), pp. 137-157. , September; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann Publishers Inc, San Francisco, CA, USA; Bertolino, A., Polini, A., Inverardi, P., Muccini, H., Towards Anti-Model-based Testing Proceedings of International Conference on Dependable Systems and Networks (DSN2004), Florence, 2004; Silva, J.C., Silva, C.C., Gonçalo, R.D., Saraiva, J., Campos, J.C., The GUISurfer tool: Towards a language independent approach to reverse engineering GUI code Proceedings of the 2nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems, Berlin, 2010, Germany, pp. 181-186; Grilo, A.M.P., Paiva, A.C.R., Faria, J.P., Reverse Engineering of GUI Models for Testing 5th Iberian Conference on Information Systems and Technologies (CISTI), Santiago de Compostela, Spain, 2010; http://www.yworks.com/en/products_yed_about.html, accessed 6th of October 2010; http://mbt.tigris.org/, accessed 6th of October 2010; http://jung.sourceforge.net/, accessed 6th of October 2010; http://sourceforge.net/projects/crosswordsage/, accessed 7th of October","Aho, P.; VTT Technical Research Centre of FinlandFinland",,,"IEEE Computer Society",,,,,,9780769543673,,,"English","Proc. - Int. Conf. Inf. Technol.: New Gener., ITNG",Conference Paper,"Final","",Scopus,2-s2.0-80051500610
"Ušaniov A., Motiejunas K.","36136199200;8454736500;","A method for automated testing of software interface",2011,"Information Technology and Control","40","2",,"99","109",,3,"10.5755/j01.itc.40.2.424","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959798302&doi=10.5755%2fj01.itc.40.2.424&partnerID=40&md5=6087227d3d14a90371fd68785468c3d0","Software Engineering Department, Kaunas University of Technology, Studentu St. 50-406, LT-51368 Kaunas, Lithuania","Ušaniov, A., Software Engineering Department, Kaunas University of Technology, Studentu St. 50-406, LT-51368 Kaunas, Lithuania; Motiejunas, K., Software Engineering Department, Kaunas University of Technology, Studentu St. 50-406, LT-51368 Kaunas, Lithuania","More than 50% of all software development resources are consumed by testing of software. Today the majority of software has a graphical user interface. The most popular way to test software functions is to test them through a user interface. Automation allows testing costs to be reduced and more extensive testing of software to be performed, thus resulting in more bugs being found and increasing the quality of software. Automation includes automatic generation of test case, tests execution and verification of result. Most popular testing methods automate on-ly certain phases of testing. A method for automated testing of software, which covers all phases of testing, provides means for modelling end user actions, feeds test data into test model and also verifies test results, is presented in this paper.","GUI testing; Software interface; Software testing; Testing automation; Tests model",,,,,,,,,"Li, K., Mengqi, W., (2005) Effective GUI Test Automation: Developing an Automated GUI Testing Tool, , Sybex; Baker, P., Dai, Z.R., Grabowski, J., Haugen, O., Lucio, S., Samuelsson, E., Schieferdecker, I., Williams, C.E., The UML 2.0 Testing Profile (2004) Proceedings of the'8th Conference on Quality Engineering in Software Technology, pp. 181-189. , Nuremberg (Germany); Corno, F., Sanchez, E., Reorda, M.S., Squillero, G., Automatic test program generation: A case study (2004) Design & Test of Computers, 21 (2), pp. 102-109; Knowles, R., (1976) Automatic Testing: Systems and Appli-cations, , McGraw-Hill; Tracey, N., Clark, J., Mander, K., McDermid, J., Automated test-data generation for exception conditions (2000) Software: Practice and Experience, 30 (1), pp. 61-79; Kheng, W., Siau Cheng, L.K., Yi, S., Automated generation of test programs from closed specifications of classes and test cases (2004) Proceedings of the 26th International Conference on Software Engineering, pp. 96-105; Xin, W., Zhi, C., Qi Shuhao, L., An optimized method for automatic test oracle generation from real-time specification (2005) Proceedings of the 10th IEEE Interna-tional Conference on Engineering of Complex Com-puter Systems, pp. 79-85. , (ICECCS'05); Elfriede, D., (2002) Effective Software Testing: 50 Ways to Improve Your Software Testing, p. 240. , Addison-Wes-ley; Ray, M., Barpanda, S.S., Mohapatra, D.P., Test Case Design Using Conditioned Slicing of Activity Diagram (2009) International Journal of Recent Trends in Engineering (IJRTE), 1, pp. 117-120. , (Issue on Computer Science); Memon, A.M., (2001) A Comprehensive Framework for Tes-ting Graphical User Interfaces, p. 139. , PhD thesis, University of Pittsburgh, Faculty Of Arts And Sciences; Kundu, D., Samanta, D., A Novel Approach to Gene-rate Test Cases from UML Activity Diagrams (2009) Journal of Object Technology, 8, pp. 65-83; Ryser, J., Glinz, M., A Scenario-Based Approach to Validating and Testing Software Systems Using Statecharts (1999) Proceedings of the 12th International Conference on Software and Systems Engineering and their Applications ICSSEA'99, , Paris; Jesus, M.A.-J., Luis, I., Designing GUI Components for UML Use Cases (2005) Proceedings of the 12th IEEE International Conference and Workshops on Engineering of Computer-Based Systems; Wang, L., Generating Test Cases from UML Activity Diagram based on Gray-Box Method (2004) Proceedings of the Software Engineering Conference, , 11th Asia-Pacific; Chen, M., Qiu, X., Li, X., Automatic test case gene-ration for UML activity diagrams (2006) Proceedings of the 2006 International Workshop on Automation of Soft-ware Test, pp. 2-8. , ACM. Shanghai, China; Packevičius, Š., Ušaniov, A., Bareiša, E., The use of model constraints as imprecise software test oracles (2007) Information Technology and Control, 36 (2), pp. 246-252; Meszaros, G., Agile regression testing using record & playback (2003) Proceedings of the Conference on Object Oriented Programming Systems Languages and Applications, pp. 353-360. , Anaheim, CA, USA; Memon, A., Banerjee, I., Nagarajan, A., What Test Oracle Should I Use for Effective GUI Testing? (2003) Pro-ceedings of the 18th IEEE International Conference on Automated Software Engineering, pp. 164-173; Barisas, D., Bareiša, E., A Software Testing Approach Based on Behavioral UML Models (2009) Information Technology and Control, 38 (2), pp. 119-124; Packevičius, Š., (2009) Unit Tests Generation Using Software Models with Imprecise Constraints, p. 140. , PhD thesis, Kaunas University of Technology, Faculty of Informa-tics; Diestel, R., (2005) Graph Theory, , Third Edition. Springer-Verlag; Yanhong, S., Edward, L.J., Specification-driven auto-mated testing of GUI-based Java programs (2004) Pro-ceedings of the 42nd Annual Southeast Regional Conference, pp. 140-145. , Huntsville, Alabama, USA; Binder, R.V., (1999) Testing Object-oriented Systems: Models, Patterns, and Tools, , Addison-Wesley","Motiejunas, K.; Software Engineering Department, Studentu St. 50-406, LT-51368 Kaunas, Lithuania; email: kestutis.motiejunas@soften.ktu.lt",,,"Kauno Technologijos Universitetas",,,,,1392124X,,,,"English","Inf. Technol. Control",Article,"Final","",Scopus,2-s2.0-79959798302
"Heinecke A., Griebe T., Gruhn V., Flemig H.","7005906667;17834438600;7003995554;13204477300;","Business process-based testing of web applications",2011,"Lecture Notes in Business Information Processing","66 LNBIP",,,"603","614",,3,"10.1007/978-3-642-20511-8_55","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79957465435&doi=10.1007%2f978-3-642-20511-8_55&partnerID=40&md5=e7ed0658686a54041bfe2f2d23f05033","Applied Telematics and e-Business Group, University of Leipzig, Department of Computer Science, Klostergasse 3, 04109 Leipzig, Germany; Software Engineering Group, University of Duisburg-Essen, Paluno - the Ruhr Institute of Software Technology, Gerlingstraße 16, 45127 Essen, Germany; itCampus GmbH (A Software AG Company), Nonnenstraße 42, 04229 Leipzig, Germany","Heinecke, A., Applied Telematics and e-Business Group, University of Leipzig, Department of Computer Science, Klostergasse 3, 04109 Leipzig, Germany; Griebe, T., Software Engineering Group, University of Duisburg-Essen, Paluno - the Ruhr Institute of Software Technology, Gerlingstraße 16, 45127 Essen, Germany; Gruhn, V., Software Engineering Group, University of Duisburg-Essen, Paluno - the Ruhr Institute of Software Technology, Gerlingstraße 16, 45127 Essen, Germany; Flemig, H., itCampus GmbH (A Software AG Company), Nonnenstraße 42, 04229 Leipzig, Germany","Software testing claims a big amount of software development costs as a rule. Particularly, manually operated software tests are on the critical path during realising a software product since the execution of these tests is very time-consuming. Furthermore, it is cumbersome for domain experts to participate in the development process since they have a low level of software engineering knowledge. However, their participation is important and a crucial factor to success since they have the domain expertise. In this paper we propose an approach that enables domain experts to generate test cases alongside business processes. Our contribution targets a holistic approach that supports the modelling of the graphical user interface (GUI) for web-based information systems, the generation of test cases from modelled business processes, the automated execution of the generated test cases, and the reporting of test results, which includes a backtracking of the results to the respective elements within the workflows of the business process. © 2011 Springer-Verlag.",,"Automatic test pattern generation; Computer software selection and evaluation; Enterprise resource management; Expert systems; Graphical user interfaces; Software design; Testing; World Wide Web; Business Process; Critical Paths; Development process; Domain expertise; Domain experts; Engineering knowledge; Holistic approach; Low level; Software development costs; Software products; Software test; Test case; Test results; WEB application; Web based information systems; Work-flows; Software testing",,,,,,,,"Reza, H., Ogaard, K., Malge, A., A model based testing technique to test web applications using statecharts (2008) ITNG 2008: Proceedings of the Fifth International Conference on Information Technology: New Generations, pp. 183-188. , IEEE Computer Society, Washington, DC; Raffelt, H., Margaria, T., Steffen, B., Merten, M., Hybrid test of web applications with webtest (2008) TAV-WEB 2008: Proceedings of the 2008 Workshop on Testing, Analysis, and Verification of Web Services and Applications, pp. 1-7. , ACM, New York; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) International Conference on Software Engineering, 23, pp. 25-36; Beizer, B., (1990) Software Testing Techniques, , 2nd edn. Van Nostrand Reinhold Co., New York; Andrews, A., Offutt, J., Alexander, R., Testing web applications (2004) Software and Systems Modeling, , January; Heinecke, A., Brueckmann, T., Griebe, T., Gruhn, V., Generating test plans for acceptance tests from uml activity diagrams Proceedings of the 17th International Conference on Engineering Computer-Based Systems. IEEE, Los Alamitos (2010); Web2test - Web Application Test Tool, , itCampus; Franke, B., Die hohe Kunst der GUI-bezogenen Testautomatisierung (2009) Javaspektrum, (2); Book, M., Brückmann, T., Gruhn, V., Hülder, M., A conceptual framework for user input evaluation in rich internet applications (2009) LNCS, 5648, pp. 275-282. , Gaedke, M., Grossniklaus, M., Díaz, O. (eds.) ICWE 2009. Springer, Heidelberg; Batsukh, N., Book, M., Brückmann, T., Geier, J., Gruhn, V., Klebeck, A., Schäfer, C., Automatic generation of ruler-based user interfaces of web applications (2008) Proceedings of the 2008 Third International Conference on Internet and Web Applications and Services, pp. 103-108; Book, M., Brückmann, T., Gruhn, V., Hülder, M., Specification and control of interface responses to user input in rich internet applications 24th IEEE/ACM International Conference on Automated Software Engineering, ASE 2009 (January 2009)","Heinecke, A.; Applied Telematics and e-Business Group, University of Leipzig, Department of Computer Science, Klostergasse 3, 04109 Leipzig, Germany; email: heinecke@ebus.informatik.uni-leipzig.de",,,"Springer Verlag",,,,,18651348,9783642205101,,,"English","Lect. Notes Bus. Inf. Process.",Conference Paper,"Final","",Scopus,2-s2.0-79957465435
"Amalfitano D., Fasolino A.R., Tramontana P.","25926238800;7006159957;8879739800;","Techniques and tools for rich internet applications testing",2010,"Proceedings - 12th IEEE International Symposium on Web Systems Evolution, WSE 2010",,, 5623569,"63","72",,13,"10.1109/WSE.2010.5623569","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650498080&doi=10.1109%2fWSE.2010.5623569&partnerID=40&md5=fbc636fcc258347b1c677987ab15b661","Dipartimento di Informatica e Sistemistica, University of Naples Federico II, Naples, Italy","Amalfitano, D., Dipartimento di Informatica e Sistemistica, University of Naples Federico II, Naples, Italy; Fasolino, A.R., Dipartimento di Informatica e Sistemistica, University of Naples Federico II, Naples, Italy; Tramontana, P., Dipartimento di Informatica e Sistemistica, University of Naples Federico II, Naples, Italy","The User Interfaces of Rich Internet Applications (RIAs) present a richer functionality and enhanced usability than the ones of traditional Web applications which are obtained by means of a successful combination of heterogeneous technologies, frameworks, and communication models. Due to its increased complexity, dynamicity, and responsiveness, testing the user interfaces of an RIA is more complex than testing the user interfaces of a traditional Web application and requires that effective and efficient testing techniques are proposed and validated. In this paper we analyse the most critical open issues in RIA testing automation and propose a classification framework that characterizes existing RIA testing techniques from four different perspectives. Driven by this classification, we present a set of testing techniques that can be used for automatically and semi-automatically generating test cases, for executing them and evaluating their results. Some examples of applying the proposed techniques for testing real Ajax applications will also be shown in the paper. © 2010 IEEE.","Dynamic analysis; Rich internet applications testing; Testing automation","Classification framework; Communication models; Heterogeneous technology; Rich Internet Applications; Test case; Testing automation; Testing technique; WEB application; Automatic test pattern generation; Automation; Dynamic analysis; Information theory; Internet; System theory; Testing; World Wide Web; User interfaces",,,,,,,,"(2010), http://www.adobe.com/products/flex/, available from July 26th; Amalfitano, D., Fasolino, A.R., Tramontana, P., Reverse Engineering Finite State Machines from Rich Internet Applications (2008) Proc. of Working Conference on Reverse Engineering (WCRE 2008), pp. 69-73. , IEEE CS Press; Amalfitano, D., Fasolino, A.R., Tramontana, P., Experimenting a Reverse Engineering Technique for Modelling the Behavior of Rich Internet Applications (2009) Proc. of Int. Conf. on Software Maintenance (ICSM 2009), pp. 571-574. , IEEE CS Press; Amalfitano, D., Fasolino, A.R., Tramontana, P., An Iterative Approach for the Reverse Engineering of Rich Internet Applications Proc. of the 5th International Conference on Internet and Web Applications and Services, IARIA ICIW 2010, pp. 401-410. , IEEE CS Press; Amalfitano, D., Fasolino, A.R., Tramontana, P., Rich Internet Application Testing Using Execution Trace Data Third International Conference on Software Testing, Verification, and Validation Workshops, 2010 (TESTBEDS 2010), pp. 274-283. , IEEE CS Press; Amalfitano, D., Fasolino, A.R., Polcaro, A., Tramontana, P., DynaRIA: A Tool for Ajax Web Application Comprehension Proc. of the IEEE International Conference on Program Comprehension, ICPC 2010, , IEEE CS Press; Andrews, A., Offutt, J., Alexander, R.T., Testing Web Applications by Modeling with FSMs (2005) Software Systems and Modeling, 4 (2), pp. 326-345. , Springer Verlag Ed; Binder, R.V., (1999) Testing Object-Oriented Systems. Models, Patterns, and Tools, , Addison Wesley; (2010), http://crawljax.com/, available from July 26th; Delgado, D., Quiroz Gates, A., Roach, S., A taxonomy and catalog of Runtime software-fault monitoring tools (2004) IEEE Trans. On Software Engineering, 30 (12), pp. 859-872; Di Lucca, G.A., Fasolino, A.R., Testing Web-Based Applications: The State of the Art and Future Trends (2006) Information and Software Technology Journal, 48 (12), pp. 1172-1186. , Dec. Elsevier inc; Di Lucca, G.A., Fasolino, A.R., Tramontana, P., Web Pages Classification using Concept Analysis IEEE International Conference on Software Maintenance, ICSM 2007, 2007, pp. 385-394. , IEEE CS Press; Document Object Model (DOM), , http://www.w3.org/DOM/, available from July 26th, 2010; Elbaum, S., Karre, S., Rothermel, G., Improving Web Application Testing with User Session Data (2003) Proceedings of International Conference on Software Engineering, pp. 49-59. , IEEE Comp. Society Press; Elbaum, S., Rothermel, G., Karre, S., Fisher, M., Leveraging User-Session Data to support Web Application Testing (2005) IEEE Transactions on Software Engineering, 31 (3), pp. 187-202; Garrett, J., (2005) AJAX: A New Approach to Web Applications, , Adaptive Path; Guo, Y., Sampath, S., Web application fault classification - An exploratory study (2008) Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement (Kaiserslautern, Germany, October 09-10, 2008). ESEM '08, pp. 303-305. , ACM, New York, NY; Kaner, C., What is a good test case? Software Testing Analysis & Review Conference (STAR) East, Orlando, FL, May 12-16, 2003; Marchetto, A., Ricca, F., Tonella, P., Empirical Validation of a Web Fault Taxonomy and its usage for Fault Seeding (2007) IEEE Int. Symposium on Web Site Evolution, pp. 31-38; Marchetto, A., Ricca, F., Tonella, P., An Empirical Validation of a Web Fault Taxonomy and its usage for Web Testing (2009) Journal of Web Engineering, 8 (4), pp. 316-345; Marchetto, A., Tonella, P., Ricca, F., State-Based Testing of Ajax Web Applications Proc. of 2008 Int. Conf. on Software Testing, Verification and Validation, 2008, pp. 121-130. , IEEE CS Press; Marchetto, A., Tonella, P., Search-Based Testing of Ajax Web Applications Proc. of 1st International Symposium on Search Based Software Engineering, 2009, pp. 3-12. , IEEE CS Press; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling AJAX by Inferring User Interface State Changes (2008) Proc. of Eight Int. Conference on Web Engineering (ICWE 2008), pp. 122-134. , IEEE CS Press; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of AJAX user interfaces (2009) Proc. of International Conference on Software Engineering (ICSE 2009), pp. 210-220. , IEEE CS Press; Ricca, F., Tonella, P., Analysis and Testing of Web Applications (2001) Proc. of International Conference on Software Engineering, pp. 25-34. , IEEE Computer Society Press; Roest, D., Mesbah, A., Van Deursen, A., Regression Testing Ajax Applications: Coping with Dynamism (2010) Proceedings of the 3rd International Conference on Software Testing, Verification and Validation (ICST'10), pp. 127-136. , IEEE Computer Society; Sampath, S., Mihaylov, V., Souter, A., Pollock, L., A Scalable approach to user-session based testing of Web applications through Concept Analysis (2004) Proc. of 19th Int. Conf. on Automated Software Engineering, pp. 132-141. , IEEE CS Press; Sampath, S., Sprenkle, S., Gibson, E., Souter, A., Pollock, L., Applying concept analysis to user-session based testing of Web applications (2007) IEEE Trans. on Software Engineering, 33 (10), pp. 643-658. , Oct. 2007; (2010), http://seleniumhq.org/, available from July 26th; (2010) Microsoft Silverlight, , http://silverlight.net/, available from July 26th; (2010), http://validator.w3.org/, available from July 26th; (2010) Complete List of Web Accessibility Evaluation Tools, , http://www.w3.org/WAI/ER/tools/complete.html, available from July 26th","Amalfitano, D.; Dipartimento di Informatica e Sistemistica, , Naples, Italy; email: domenico.amalfitano@unina.it",,"IEEE Computer Society",,"12th IEEE International Symposium on Web Systems Evolution, WSE 2010","17 September 2010 through 18 September 2010","Timisoara",82869,,9781424486366,,,"English","Proc. - IEEE Int. Symp. Web Syst. Evol., WSE",Conference Paper,"Final","",Scopus,2-s2.0-78650498080
"Rauf A., Anwar S., Ramzan M., Ur Rehman S., Shahid A.A.","57194106980;57212662725;24721962000;24476727800;24725536800;","Ontology driven semantic annotation based GUI testing",2010,"Proceedings - 2010 6th International Conference on Emerging Technologies, ICET 2010",,, 5638479,"261","264",,4,"10.1109/ICET.2010.5638479","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650348627&doi=10.1109%2fICET.2010.5638479&partnerID=40&md5=251dafc2190860b4afe5abf9e9b4d1ef","Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan","Rauf, A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Anwar, S., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Ramzan, M., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Ur Rehman, S., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Shahid, A.A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan","One major agreed upon factor responsible for popularity of software systems, is graphical user interface. Besides the efforts and desires of development organizations, testing a graphical user interface thoroughly, is still almost a nightmare. Manual effort required to complete this task is very large. One major breakthrough to automate this manual effort of GUI testing is to map GUI events with some models and graphs. Event-flow graph is relatively a fresh and useful addition to cope up with automation of GUI testing. In this paper we are presenting an idea of using ontology for GUI testing. This ontology is supposed to work on the basis of semantics of possible events and then annotations will be used to generate the test cases and work as an oracle for verification of the output of testing effort. This work still is based on theoretical concepts and needs practical verification, which will be completed in short time. © 2010 IEEE.","Annotations; Automation testing; Event flow; GUI testing; Ontology; Semantic; Test data generation","Annotations; Automation testing; Event flow; GUI testing; Test data generation; Automation; Data communication systems; Ontology; Semantics; Graphical user interfaces",,,,,,,,"Erdmann, M., Maedche, A., Schnurr, H.-P., Staab, S., From Manual to Semi-automatic Semantic Annotation: About Ontologybased Text Annotation Tools, , Institute AIFB Karlsruhe University 76128 Karlsruhe, Germany; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for gui testing (2001) ESEC/FSE-9: Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267. , New York, NY, USA, ACM Press; Jeff, F., Improving software quality with static analysis and annotations for software (2007) 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, , San Diego, California, June 13-14; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2010) IEEE Transactions on Software Engineering, , IEEE Computer Society,Los Alamitos, CA, USA; Dill, S., Eiron, N., Gibson, D., Gruhl, D., Guha, R., Jhingran, A., Kanungo, T., Zien, J., A case for automated large scale semantic annotation (2003) Journal of Web Semantics, 1 (1), pp. 115-132. , Elsevier Press (invited paper); Luis, P., Navarro, M., A proposal for automatic testing of GUIs based on annotated use cases Advances in Software Engineering, 2010. , Article ID 671284, 8 pages 2010; Barbosa, E.F., Nakagawa, E.Y., Maldonado, J.C., Towards the establishment of an ontology of software testing SEKE 2006, pp. 522-525; Zhu, H., Huo, Q., Developing a software testing ontology in UML for a software growth environment of web-based applications (2004) Software Evolution with UML and XML, , Idea Group; Neurath, O., Carnap, R., Morris, C.F.W., (1955) International Encyclopedia of Unified Science, , Chicago, IL: University of Chicago Press; Li, J., Zhang, L., Yu, Y., Learning to generate semantic annotation for domain specific sentences (2001) K-CAP 2001 Workshop on Knowledge Markup and Semantic Annotation, , Victoria, BC, Canada, 21 October; Anton, T., Lyudmila, L., Software testing and documenting automation (2008) International Journal ITK, Institute of Information Theories and Applications FOI ITHEA, 2 (3); Noy, N.F., McGuinness, D.L., (2001) Ontology Development 101: A Guide to Creating Your First Ontology, , Stanford Knowledge Systems Laboratory Technical Report KSL-01-05 and Stanford Medical Informatics Technical Report SMI-2001-0880, March; Molukanele, T.T., Rabana, R., Berman, S., Developing & using ontologies for the semantic web: An inspirational and a synthetic approach to ontological engineering & utilizing wordnet in information retrieval (2005) Technical Report CS05-12-00, Department of Computer Science, University of Cape Town; Liu, L., Tamer Özsu, M., (2009) Ontology by Tom Gruber in the Encyclopedia of Database Systems, , Springer-Verlag; Horrocks, I., Ontologies and the semantic Web (2008) Communications of the ACM, 51 (12). , December; Rauf, A., Automated GUI test coverage analysis using GA 2010 Seventh International Conference on Information Technology (ITNG 2010), , to be held12-14 April 2010 in Las Vegas, Nevada, USA; Memon, A.M., An event-flow model of GUI-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , http://dx.doi.org/10.1002/stvr.v17:3, (Sep. 2007). DOI=; Musen, M.A., Dimensions of knowledge sharing and reuse (1992) Computers and Biomedical Research, 25, pp. 435-467; Stein, M., Heimdahl, M.P., Riedl, J., A general framework for interconnecting annotations of software systems (1998) Proceedings of the 22nd International Computer Software and Applications Conference, pp. 421-429. , (August 19 - 21, 1998). COMPSAC. IEEE Computer Society, Washington, DC; Knuth, D.E., Literate programming (1984) The Computer Journal, 27, pp. 97-111; McMaster, S., (2009) Advances in Coverage Based Test Suite Reduction, , PowerPoint Presentation For Mathematical And Computational Sciences Division Seminar, National Institute Of Standards And Technology., April 24, Gaithersburg; Rauf, A., Multi objective GUI testing and coverage analysis The International Conference on Information Science and Applications (ICISA 2010), , to be held on April 21st - 23rd, 2010 in Seoul, Korea [Submitted]; Handschuh, S., Staab, S., Ciravegna, F., S-CREAM - Semi-automatic CREAtion of Metadata (2002) EKAW, pp. 358-372; Cranefield, S., Haustein, S., Purvis, M., UML-based ontology modelling for software agents (2001) Proceedings of Ontologies in Agent Systems Workshop, pp. 21-28. , August 2001, Montreal","Rauf, A.; Department of Computer Science, , Islamabad, Pakistan; email: a.rauf@nu.edu.pk",,"National University of Computer and Emerging Sciences;Institute of Electrical and Electronics Engineers (IEEE);Foundation for Advancement of Science and Technology (FAST)",,"6th International Conference on Emerging Technologies, ICET 2010","18 October 2010 through 19 October 2010","Islamabad",82993,,9781424480586,,,"English","Proc. - Int. Conf. Emerg. Technol., ICET",Conference Paper,"Final","",Scopus,2-s2.0-78650348627
"Cunha M., Paiva A.C.R., Ferreira H.S., Abreu R.","36668504500;7102683763;35188804100;16479696600;","PETTool: A pattern-based GUI testing tool",2010,"ICSTE 2010 - 2010 2nd International Conference on Software Technology and Engineering, Proceedings","1",, 5608882,"V1202","V1206",,15,"10.1109/ICSTE.2010.5608882","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650003322&doi=10.1109%2fICSTE.2010.5608882&partnerID=40&md5=d02066fe6f407d7c8d6abd4d4b10bbf6","Department of Informatics Engineering, Faculty of Engineering, University of Porto, Portugal; INESC Porto, Porto, Portugal","Cunha, M., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Portugal; Paiva, A.C.R., INESC Porto, Porto, Portugal; Ferreira, H.S.; Abreu, R., Department of Informatics Engineering, Faculty of Engineering, University of Porto, Portugal","Nowadays, the usage of graphical user interfaces (GUIs) in order to ease the interaction with software applications is preferred over command line interfaces. Despite recent advances in software testing, GUIs are still tested in a complete ad-hoc, manual fashion, with little support from (industrial) testing tools. Automating the process of testing GUIs has additional challenges when compared to command-line applications. This paper presents an approach for GUI (semi-automated) testing which uses knowledge of the common behaviour of a GUI. To do so, the most common aspects in a GUI are identified and then a suite of test cases is automatically generated and executed. To validate our approach, we have run it against well known web-based applications, such as GMail. © 2010 IEEE.","Graphical user interfaces; Patterns; Software testing","Automatically generated; Command line interface; GUI testing; Manual fashion; Patterns; Semi-automated; Software applications; Test case; Testing tools; Web-based applications; Automatic test pattern generation; Computer software selection and evaluation; Software testing; Graphical user interfaces",,,,,,,,"Brooks, P., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proceedings of the 22nd IEEE International Conference on Automated Software Engineering (ASE'07), , Washington, DC, USA IEEE CS; Burnstein, I., (2003) Practical Software Testing: A Process-Oriented Approach, , Springer Inc; Hartman, A., Nagin, K., The agedis tools for model based testing (2004) UML Modeling Languages and Applications, Volume 3297 of Lecture Notes in Computer Science, pp. 277-280. , Springer; Jacky, J., Veanes, M., Campbell, C., Schulte, W., (2007) Modelbased Software Testing and Analysis with C, , Cambridge University Press; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE '03: Proceedings of the 10th Working Conference on Reverse Engineering, , Washington, DC, USA IEEE CS; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the International Conference on Software Engineering (ICSE'99), , New York, NY, USA ACM; Moreira, R.M.L.M., Paiva, A.C.R., Visual abstract notation for GUI modelling and testing - VAN4GUIM (2008) ICSOFT (SE/MUSE/GSDCA), , J. Cordeiro, B. Shishkov, A. Ranchordas, and M. Helfert, editors INSTICC Press; Oy, P.F., http://uipatternfactory.com/, accessed in April 2010; Paiva, A., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M., A model-to-implementation mapping tool for automated modelbased GUI testing (2005) Proceedings of the 7th International Conference on Formal Engineering Methods (ICFEM'05), pp. 450-464; Van Welie, M., Patterns in Interaction Design, , http://www.welie.com/patterns/index.php, accessed in May 2010; White, L.J., Regression testing of GUI event interactions (1996) Proceedings of the 1996 International Conference on Software Maintenance (ICSM '96), pp. 350-358. , Washington, DC, USA IEEE CS","Cunha, M.; Department of Informatics Engineering, Portugal; email: ei05048@fe.up.pt",,"Int. Assoc. Comput. Sci. Inf. Technol. (IACSIT);Polytechnic University of Puerto Rico",,"2010 2nd International Conference on Software Technology and Engineering, ICSTE 2010","3 October 2010 through 5 October 2010","San Juan, PR",82725,,9781424486656,,,"English","ICSTE - Int. Conf. Softw. Technol. Eng., Proc.",Conference Paper,"Final","",Scopus,2-s2.0-78650003322
"Duan L., Höfer A., Hussmann H.","36662242800;36662256900;23389275800;","Model-based testing of infotainment systems on the basis of a graphical human-machine interface",2010,"Proceedings - 2nd International Conference on Advances in System Testing and Validation Lifecycle, VALID 2010",,, 5617165,"5","9",,3,"10.1109/VALID.2010.11","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78649811482&doi=10.1109%2fVALID.2010.11&partnerID=40&md5=d95cec24fdbfd5e4c159131bf1adfa66","AUDI AG and Ludwig-Maximilians, Universität München, Germany; AUDI AG, Infotainment System Development and Testing, Auto-Union-Str., 85055 Ingolstadt, Germany; Ludwig-Maximilians, Universität München, Institut für Informatik, Amalienstraße 17, 80333 Munich, Germany","Duan, L., AUDI AG and Ludwig-Maximilians, Universität München, Germany; Höfer, A., AUDI AG, Infotainment System Development and Testing, Auto-Union-Str., 85055 Ingolstadt, Germany; Hussmann, H., Ludwig-Maximilians, Universität München, Institut für Informatik, Amalienstraße 17, 80333 Munich, Germany","Automotive infotainment systems were getting more and more features in recent years. The usability of their HMIs (human-machine interfaces) has been improved considerably. However the complexity of the HMI software is growing. Testing the HMI became very demanding and time consuming. Because of multiplicity of HMI variants, a better code coverage is a goal for the development process of most manufacturers. Model-based testing is one way to achieve a better code coverage and keep the costs and complexity acceptable. However, the existing research approaches in the area of model-based HMI testing can not satisfy the needs for our testing purposes. In the work a model-based testing approach will be proposed for testing both the logical behavior and the graphical interface of the automotive infotainment HMI. As an important part of the testing approach a test-oriented HMI specification model will be designed. It is a model, which describes the required behavior of the HMI and contains the necessary information for the testing process. Test generation methods and the design of tests will also be proposed. These results can be generally used for testing advanced GUI-driven applications. Specific coverage criteria for infotainment HMIs, methods for automatic test generation and verification of the system behavior are also focuses of the work. The paper introduces the ideas and the goals of our model-based testing approach for infotainment HMIs. © 2010 IEEE.","Automated HMI testing; Infotainment system tests; Model-based testing","Automated HMI testing; Automatic test generation; Code coverage; Coverage criteria; Development process; Graphical interface; HMI software; Human Machine Interface; Infotainment; Infotainment systems; Logical behavior; Model-based; Model-based testing; Research approach; Specification models; System behaviors; Test generations; Testing process; Man machine systems; System theory; Testing",,,,,,,,"(2005) Ready for the Future: Software Trends for In-Car Infotainment Systems, , http://www.epn-online.com/page/18329, Q. S. S. GmbH [Online]. Available; Hammontree, M.L., Hendrickson, J.J., Billy, W., Integrated data capture and analysis tools for research and testing on graphical user interfaces (1992) CHI '92: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 431-432. , H; Lou, S.M., Hierarchical gui test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155. , M. A. M., P. M. E; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) ISSRE '01: Proceedings of the 12th International Symposium on Software Reliability Engineering, p. 34. , Washington, DC, USA: IEEE Computer Society; An event-flow model of gui-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , M.A.M; Chinnapongse, V., Lee, I., Sokolsky, O., Wang, S., Jones, P.L., Model-based testing of gui-driven applications (2009) Software Technologies for Embedded and Ubiquitous Systems, 5860 (2009), pp. 203-214. , Springer-verlag New York Inc 7th IFIP WG 10.2 International Workshop, SEUS 2009 Newport Beach, CA, USA, 2009 Proceedings; Mössenböck, H., (1998) Objektorientierte Programmierung in Oberon-2, , Springer-Verlag, Oktober; Harel, D., Statecharts: A visual formalism for complex systems (1987) Sci. Comput. Program, 8 (3), pp. 231-274; Wegner, G., Endt, P., Angelski, C., Das elektrische lastenheft als mittel zur kostenreduktion bei der entwicklung der menschen-machine-schnittstelle von infotinament-systemen im fahrzeug (2004) Infotainment Telematik im Fahrzeug, pp. 38-45. , Expert-Verlag GmbH; Gaston, C., Seifert, D., Evaluating coverage based testing (2005) Model-Based Testing of Reactive Systems, , Springer-Verlag New York, LLC","Duan, L.; AUDI AG and Ludwig-Maximilians, Germany; email: linshu.duan@audi.de",,"IARIA",,"2nd International Conference on Advances in System Testing and Validation Lifecycle, VALID 2010","22 August 2010 through 27 August 2010","Nice",82823,,9780769541464,,,"English","Proc. - Int. Conf. Adv. Syst. Test. Validation Lifecycle, VALID",Conference Paper,"Final","",Scopus,2-s2.0-78649811482
"Rauf A., Khan N.K., Khan S.A., Rehman S.U., Shahid A.A.","57194106980;36164870300;55848080000;57210004507;24725536800;","Maximizing GUI test coverage through particle swarm optimization",2010,"19th International Conference on Software Engineering and Data Engineering 2010, SEDE 2010",,,,"51","56",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883652240&partnerID=40&md5=3a91f0e3502d9f9e3d7be4858922046d","Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, 44000, Pakistan","Rauf, A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, 44000, Pakistan; Khan, N.K., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, 44000, Pakistan; Khan, S.A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, 44000, Pakistan; Rehman, S.U., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, 44000, Pakistan; Shahid, A.A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, 44000, Pakistan","At the present age everyone is well aware of Graphical User Interface and its importance. Software industry is taking intense measures to ensure the correctness of applications and products as well as to ensure that software quality is as being supreme. Model based testing has proved to be a success in traditional software testing, hence efforts were made in GUI domain as well to model GUI so that testing can be made based on these models. One of the recent modeling techniques is based on flow graph of events (control flow graph). On the other hand, the looking to ensure software quality by means of the automated software testing has put forward exigent questions of determining the ""quality"" as well as ""quantity"" of the software testing. To address the first concern, evolutionary algorithms can be used to evaluate and extend the information about the quality of a test suite based on some predefined criteria or rules of automated software testing process. This test criterion usually keeps up a correspondence to a ""coverage function"" that quantifies that how much the automatically generated optimization parameters are satisfying the given test criterion. Hence it addresses our second concern of quantity of testing process. Keeping all these factors in mind, we have tried to develop a technique which can help us in finding maximum benefits in automation of graphical user interface testing. In this paper, we have attempted to exploit the event driven nature of GUI. Based on this nature, we have presented a GUI testing and coverage analysis technique centered on Binary Particle Swarm Optimization (PSO).",,"Automated software testing; Automatically generated; Binary particle swarm optimization; Control flow graphs; Coverage analysis; Model based testing; Modeling technique; Optimization parameter; Automatic test pattern generation; Automation; Computer software selection and evaluation; Data flow analysis; Graphic methods; Particle swarm optimization (PSO); Software engineering; Software testing; Graphical user interfaces",,,,,,,,"Bertolino, A., Software testing forever: Old and new processes and techniques for validating today's applications (2008) Keynote at 9th International Conference Product-Focused Software Process Improvement (PROFES 2008), , Monte Porzio Catone, June LNCS 5089, 2008; Limerick, I., Testing: A roadmap, international conference on software engineering (2000) Proceedings of the Conference on the Future of Software Engineering, pp. 61-72. , Year of Publication; Memon, A.M., An event-flow model of GUI-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , (Sep. 2007) DOI=http://dx.doi.org/10.1002/stvr.v17:3; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2). , November Article No. 7 Year of Publication: 2008 ISSN:1049-331X; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , New York, 13-18 Apr. ACM Press; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , April 13-18 Vancouver, British Columbia, Canada [doi>10.1145/238386. 238519]; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interaction (2001) Proceedings of the International Symposium on Software Reliability Engineering, pp. 54-63. , 8-11 November IEEE Computer Society Press: Piscataway, NJ, 2001; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), pp. 118-127. , September ACM Press: New York, 2003; Memon, A.M., Soffa, M.L., Pollack, M.E., (2001) Coverage Criteria for GUI Testing. Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , September ACM Press: New York, 2001; Michael, G., McGraw, M.S., Generating software test data by evolution (2001) IEEE Transactions on Software Engineering, 27 (12), pp. 1085-1110; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Journal of Software Testing, Verification and Reliability, 9 (4), pp. 263-282; Lu, Y., Yan, D., Nie, S., Wang, C., Development of an improved GUI automation test system based on event-flow graph (2008) International Conference on Computer Science and Software Engineering, , Date: 12-14 Dec; Afzal, W., Torkar, R., Feldt, R., A systematic review of search-based testing for non-functional system properties (2009) Inf. Softw. Technol., 51 (6), pp. 957-976. , (Jun. 2009) DOI=http://dx.doi.org/10.1016/j.infsof.2008.12.005; Windisch, A., Wappler, S., Wegener, J., Applying particle swarm optimization to software testing (2007) GECCO '07: Proceedings of the 9th Annual Conference on Genetic and Evolutionary Computation, pp. 1121-1128. , ACM: New York, NY, USA doi:http://doi.acm.org/10.1145/1276958.1277178; Hla, K.H.S., Choi, Y.S., Park, J.S., Applying particle swarm optimization to prioritizing test cases for embedded real time software retesting (2008) Computer and Information Technology, pp. 527-532. , IEEE 8th International Conference on 2008 IEEE 8th International Conference on Computer and Information Technology Workshops; Li, K., Zilu, Z., Kou, J., Breeding software test data with genetic-particle swarm mixed algorithm (2010) To be Appeared in Journal of Computers, 5 (2). , February; Kennedy, J., Eberhart, R.C., Particle swarm optimization (1995) Proc. IEEE Int. Conf. Neural Networks, pp. 1942-1948; Rauf, A., Automated GUI test coverage analysis using GA (2010) 2010 Seventh International Conference on Information Technology (ITNG 2010), , to be held 12-14 April in Las Vegas, Nevada, USA; Kennedy, J., Eberhart, R.C., A discrete binary version of the particle swarm algorithm (1997) Proceedings of the 1997 IEEE International Conference on Systems, Man, and Cybernetics, , Orlando, FL, USA","Department of Computer Science, , Islamabad, 44000, Pakistan",,,,"19th International Conference on Software Engineering and Data Engineering 2010, SEDE 2010","16 June 2010 through 18 June 2010","San Francisco, CA",99068,,9781617386077,,,"English","Int. Conf. Softw. Eng. Data Eng., SEDE",Conference Paper,"Final","",Scopus,2-s2.0-84883652240
"Nguyen D.H., Strooper P., Süß J.G.","56662331100;6603950473;8701350500;","Automated functionality testing through GUIs",2010,"Conferences in Research and Practice in Information Technology Series","102",,,"153","162",,4,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84868692250&partnerID=40&md5=16ec7deb09840782947dbf92b97875ac","School of Information Technology and Electrical Engineering, University of Queensland, QLD 4072, Australia","Nguyen, D.H., School of Information Technology and Electrical Engineering, University of Queensland, QLD 4072, Australia; Strooper, P., School of Information Technology and Electrical Engineering, University of Queensland, QLD 4072, Australia; Süß, J.G., School of Information Technology and Electrical Engineering, University of Queensland, QLD 4072, Australia","Model-based GUI testing (MGT) is emerging as a promising approach for testing applications with a graphical user interface (GUI). Currently, test models in MGT approaches are close to the GUI implementation with limited ability to represent abstract actions. This paper introduces the Action-Event Framework (AEF), a MGT framework. This framework helps testers abstract away from low-level details of the GUI under test and generate test cases in a behaviour-oriented way. In this framework, testers can perform both business logic testing and GUI testing in a reusable manner. At the core of AEF is a mapping language that allows test engineers to map abstract actions to GUI implementations. The paper proposes several coverage criteria based on links between abstract actions and event sequences. Tool support is provided for several steps of the framework. To evaluate AEF, a case study on a task manager is conducted to determine the time necessary to test the GUI, the types of defects that can be detected, and the correlation between the proposed coverage criteria and code coverage. Copyright © 2010, Australian Computer Society, Inc.","GUI testing; Model-based testing","Behaviour-oriented; Business logic; Code coverage; Coverage criteria; Event sequence; GUI testing; Mapping Language; Model based testing; Task managers; Test case; Test engineers; Test models; Tool support; Computer science; Graphical user interfaces",,,,,,,,"Andrews, A.A., Offutt, J., Alexander, R.T., Testing Web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , DOI 10.1007/s10270-004-0077-7; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Model-based testing of object-oriented reactive systems with spec explorer (2005) Technical Report, Microsoft Research; Daboczi, T., Kollar, I., Simon, G., Megyeri, T., How to test graphical user unterfaces (2003) IEEE Instrumentation & Measurement Magazine, 6, pp. 27-33; Fewster, M., Graham, D., (1999) Software Test Automation, , Addison-Wesley Professional; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001) Proceedings of 2nd International Conference on Extreme Programming and Flexible Processes in Software Engineering, pp. 114-117; Ganov, S., Khurshid, S., Perry, D., A case for GUI testing using symbolic execution (2007) Testing: Academic and Industrial Conference Practice and Research Techniques; Hartman, A., Model Based Test Generation Tools, , http://www.agedis.de/documents/ModelBasedTestGenerationTools_cs.pdf, accessed 20 August, 2008; Hetzel, B., (1988) The Complete Guide to Software Testing, , Wiley, New York; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2006) Proceedings of Formal Approches to Testing of Softwares Conference (FATES 2005); Li, K., Wu, M., (2004) Effective GUI Test Automation: Developing An Automated GUI Testing Tool, , Sybex; Memon, A., (2001) A Comprehensive Framework for Testing GUI, , Ph.D. dissertation, Department of Computer Science, University of Pittsburgh, Pittsburgh; Memon, A., GUI testing pitfalls and process (2002) IEEE Computer Society Press, 35, pp. 87-88; Memon, A., Banerjee, A., Nagarajan, I., GUI ripping reverse engineering of graphical user interfaces for testing (2003) Proceedings of 10th Working Conference on Reverse Engineering, pp. 260-269; Memon, A., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI (2003) Proceedings of 8th European Software Engineering Conference, pp. 256-267; Neto, A., Subramanyan, R., Vieira, M., Travassos, G., A survey on model-based testing approaches: A systematic review (2007) Proceedings of 22nd ACM International Conference on Automated Software Engineering (ASE 2007); Paiva, A.C.R., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for GUI testing (2007) Electronic Notes in Theoretical Computer Science, 190 (2 SPEC. ISSUE), pp. 99-111. , DOI 10.1016/j.entcs.2007.08.010, PII S1571066107005440; Perry, W., (1995) Effective Methods for Software Testing, , Wiley, New York; Reza, H., Endapally, S., Grant, E., A model-based approach for testing GUI using hierarchical predicate transition nets (2007) Proceedings - International Conference on Information Technology-New Generations, ITNG 2007, pp. 366-370. , DOI 10.1109/ITNG.2007.9, 4151711, Proceedings - International Conference on Information Technology-New Generations, ITNG 2007; Strelzoff, A., Petzold, L., Decision tree organization for GUI generation (2003) Proceedings of IEEE/NASA Software Engineering Workshop; Thommen, K., http://sourceforge.net/projects/todo-managercs, (accessed 20 August, 2008): To Do Manager; Utting, M., Legeard, B., (2007) Practical Modelbased Testing, , Morgan Kaufmann; White Lee, Almezen Husain, Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, ISSRE, pp. 110-121","Nguyen, D.H.; School of Information Technology and Electrical Engineering, , QLD 4072, Australia; email: ducnh@itee.uq.edu.au",,"Computing Research and Education (CORE);Queensland University of Technology (QUT);Australian Computer Society (ACS);CEED;CSIRO ICT Centre",,"33rd Australasian Computer Science Conference, ACSC 2010","18 January 2010 through 22 January 2010","Brisbane, QLD",93744,14451336,9781920682835,,,"English","Conf. Res. Pract. Inf. Technol. Ser.",Conference Paper,"Final","",Scopus,2-s2.0-84868692250
"Bykau A.A., Piletsky I.I.","37461131500;37461789200;","Internet applications testing automation through probabilistic-network programming",2010,"Proceedings of IEEE East-West Design and Test Symposium, EWDTS'10",,, 5742061,"362","365",,,"10.1109/EWDTS.2010.5742061","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79955971601&doi=10.1109%2fEWDTS.2010.5742061&partnerID=40&md5=2fa4354c7fea76bf8c65c6fea493818d","EPAM Systems, IBA, Russian Federation","Bykau, A.A., EPAM Systems, IBA, Russian Federation; Piletsky, I.I., EPAM Systems, IBA, Russian Federation","The paper considers the programming technology, which allows partially automate the testing of Internet applications. It allows you to develop a system of testing, as an expert systems. The testing system developing based on the proposed probabilistic-network approach. It allows to implement adaptive testing system, to achieve complete descriptions, improve the reliability of testing and reduce development time. Also this paper describes the ways of automatically generating elements of probabilistic networks by recording an expert tester's actions and convert a probabilistic network elements in to UML diagrams. The paper contains example how automate functional testing of Web applications through its interface using probabilistic-network, despite that it contains some known and unknown defects. © 2010 IEEE.",,"Adaptive testing systems; Development time; Functional testing; Internet application; Probabilistic network; Programming technology; Testing automation; Testing systems; UML diagrams; WEB application; Expert systems; Instruments; Internet; Telecommunication networks; User interfaces; Computer systems programming",,,,,,,,"Myers, G.J., (2004) The Art of Software Testing, , Word Association, United States of America; Russell, S., Norvig, P., (2003) Artificial Intelligence: A Modern Approach, , Prentice Hall United States of America; Giarratano, J.C., Riley, G.D., (1998) Expert Systems: Principles and Programming, Course Technology, , United States of America","Bykau, A. A.; EPAM Systems, Russian Federation; email: anton.bukov@gmail.com",,"IEEE Computer Society Test Technology Technical Council",,"IEEE East-West Design and Test Symposium, EWDTS'10","17 September 2010 through 20 September 2010","St. Petersburg",84788,,9781424495566,,,"English","Proc. IEEE East-West Des. Test Symp., EWDTS",Conference Paper,"Final","",Scopus,2-s2.0-79955971601
"Miao Y., Yang X.","7101982230;36109586700;","An FSM based GUI test automation model",2010,"11th International Conference on Control, Automation, Robotics and Vision, ICARCV 2010",,, 5707766,"120","126",,18,"10.1109/ICARCV.2010.5707766","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952427403&doi=10.1109%2fICARCV.2010.5707766&partnerID=40&md5=374c5b7de8c191879cbe0d5a6785e806","School of Engineering and Science, Victoria University, Melbourne, VIC, Australia","Miao, Y., School of Engineering and Science, Victoria University, Melbourne, VIC, Australia; Yang, X., School of Engineering and Science, Victoria University, Melbourne, VIC, Australia","Graphical User Interfaces (GUIs) constitute a large proportion of today's software and are becoming more and more complex. Testing the correctness of GUIs and their underlying software is paramount for providing quality software products. Manual testing is extremely slow and unacceptably expensive. We present a new technique which enables the process of generating test cases and testing automation, based on an innovative model. Given a GUI based application, the set of GUI states and their running logic is modeled as a finite state machine (FSM). The efficiency of the model is formally analyzed and compared with event flow graph (EFG) model. The results show that our model is more efficient in storage. © 2010 IEEE.","Event flow graph; Finite state machine; GUI test automation","Event-flow graph; Finite state machine; Finite state machines; GUI test automation; Innovative models; Quality software; Test Automation; Test case; Testing automation; Computer vision; Contour followers; Graphic methods; Graphical user interfaces; Robotics",,,,,,,,"Brooks, P., Robinson, B., Memon, A.M., An initial characterization of industrial graphical user interface systems (2009) ICST 2009: Proceedings of the 2nd IEEE International Conference on Software Testing, Verification and Validation, , Washington, DC, USA: IEEE Computer Society; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Myers, B.A., (1993) Why Are Human-Computer Interfaces Difficult to Design and Implement?, , Technical Report CS-93-183, School of Computer Science, Carnegie Mellon Univ., July; Wittel, W.I., Lewis, T.G., (1991) Integrating the MVC Paradigm into an Object-Oriented Framework to Accelerate GUI Application Development, , Technical Report 91-60-06, Dept. of Computer Science, Oregon State Univ., Dec; Anderson, J., Bache, G., The video store revisited yet again: Adventures in GUI acceptance testing (2004) LNCS, 3092, pp. 1-10. , Proceedings of the 5th International Conference on eXtreme Programming and Agile Processes in Software Engineering; Dutta, S., Abbot - A friendly JUnit extension for GUI testing (2003) Java Developer Journal, 8, pp. 8-12; McMaster, S., Memon, A.M., An Extensible Heuristic-Based Framework for GUI Test Case Maintenance IEEE International Conference on Software Testing, Verification, and Validation Workshops, 2009, pp. 251-254. , icstw; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , IEEE Press, Washington - Brussels - Tokyo; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) ISSRE '00: Proceedings of the 11th International Symposium on Software Reliability Engineering (ISSRE'00), p. 110. , IEEE Computer Society, Washington, DC, USA; Offutt, A.J., Hayes, J.H., A semantic model of program faults (1996) ISSTA '96: Proceedings of the 1996 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 195-200. , ACM Press, New York, NY, USA; Paiva, A.C.R., Tillmann, N., Faria, J.C.P., Vidal, R.F.A.M., Modeling and Testing Hierarchical GUIs (2005) Proceedings of the 12th International Workshop on Abstract State Machines; Paiva, A.C.R., Automated GUI Testing in Informática (2009) XIII Convención Y Feria Internacional; Yuan, X., Memon, A.M., Generating Event Sequence-Based Test Cases Using GUI Runtime State Feedback (2010) IEEE Transactions on Software Enginerring, 36 (1). , January/February 2010; Memon, A.M., An Event-Flow Model to Test EDS (2009) Software Engineering and Development, , Enrique A. Belini, ed; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage Criteria for GUI Testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, Vienna, Austria, pp. 256-267. , 2001; Memon, A.M., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing (2003) Proc. 10th Working Conf. Reverse Eng., pp. 260-269. , Nov; Xie, Q., Memon, A.M., Automated model-based testing of community-driven open source GUI applications (2006) ICSM '06: Proceedings of the 22nd IEEE International Conference on Software Maintenance, pp. 145-154. , IEEE Computer Society, Washington, DC, USA; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Zhu, H., Wong, W.E., Belli, F., Advancing test automation technology to meet the challenges of model-driven software development: Report on the 3rd workshop on automation of software test (2008) ICSE; Belli, F., Finite-State Testing and Analysis of Graphical User Interfaces (2001) ISSRE","Miao, Y.; School of Engineering and Science, , Melbourne, VIC, Australia; email: yuan.miao@vu.edu.au",,,,"11th International Conference on Control, Automation, Robotics and Vision, ICARCV 2010","7 December 2010 through 10 December 2010","Singapore",84059,,9781424478132,,,"English","Int. Conf. Control, Autom., Rob. Vis., ICARCV",Conference Paper,"Final","",Scopus,2-s2.0-79952427403
"Goldin S.E., Luengwitayakorn T., Supadarattanawong S.","25031113800;36975989600;36976521200;","Test-driven development for graphical UIs: A multi-platform toolset",2010,"IEEE Region 10 Annual International Conference, Proceedings/TENCON",,, 5685916,"2429","2433",,,"10.1109/TENCON.2010.5685916","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951623099&doi=10.1109%2fTENCON.2010.5685916&partnerID=40&md5=3ca5daab5c389e9590da9cc656299a06","Department of Computer Engineering, King Mongkut's University of Technology, Thonburi, Bangkok, Thailand","Goldin, S.E., Department of Computer Engineering, King Mongkut's University of Technology, Thonburi, Bangkok, Thailand; Luengwitayakorn, T., Department of Computer Engineering, King Mongkut's University of Technology, Thonburi, Bangkok, Thailand; Supadarattanawong, S., Department of Computer Engineering, King Mongkut's University of Technology, Thonburi, Bangkok, Thailand","Test-driven development (TDD) is the practice of creating automated unit tests that exercise planned software functionality, before writing the software itself. TDD leads to higher quality software by encouraging developers to analyze individual units of behavior before coding and by allowing easy detection of problems introduced by software change. However, few tools effectively support TDD for graphical user interfaces. Those that do are platform-specific and require developers to express all tests as executable code for the target platform. This paper describes UIT (User Interface Tester), a toolset designed to support TDD for interactive applications. UIT addresses the weaknesses of existing solutions by using human-readable declarative test scripts and by generating skeleton GUIs from test scripts so that tests can be created first. It also supports driving GUIs that target different platforms. We present details of the scripting language, an overview of the UIT architecture with a focus on its multi-platform capabilities, and a discussion of current status and future plans. We believe that as UIT matures, it can assist developers in reaping the benefits of TDD. ©2010 IEEE.",,"Automated units; Current status; Executable codes; Higher quality softwares; Human-readable; Interactive applications; Multi-platform; Scripting languages; Software change; Software functionality; Test driven development; Test scripts; Toolsets; Testing; Graphical user interfaces",,,,,,,,"Beck, K., (2003) Test-Driven Development by Example, , Pearson Education; Beck, K., Andres, C., (2004) eXtreme Programming Explained: Embrace Change (2nd Ed.), , Addison-Wesley Professional; Meszaros, G., (2007) xUnit Test Patterns: Refactoring Test Code, , Addison-Wesley Professional; TestComplete, , http://www.automatedqa.com/products/testcomplete/, accessed 25 May 2010; WinRunner, LoadRunner, Quick Test Professional, , http://www.hp.com, accessed 25 May 2010; QF-TEST, , http://www.qfs.de/index4.htm, accessed 25 May 2010; TestingAnywhere, , http://www.automationanywhere.com/Testing/solutions/automated-guitesting. htm, accessed 25 May 2010; SeleniumHQ Web Application Testing System, , http://seleniumhq.org, accessed 25 May 2010; Abbot Java GUI Test Framework, , http://abbot.sourceforge.net/doc/overview.shtml; Goldin, S.E., Rudahl, K.T., Software process in the classroom: A comparative study (2009) Proceedings of the International Symposium on Communications and Information Technology (ISCIT 2009), , Incheon, Korea. September 28-30; Kruchten, P., (2003) The Rational Unified Process: An Introduction, , Addison-Wesley Professional; wxWidgets GUI Framework, , http://www.wxwidgets.org, accessed 25 May 2010; Qt GUI Framework, , http://qt.nokia.com/products, accessed 25 May 2010; (2004) XML Schema Part 0: Primer Second Edition, , http://www.w3.org/TR/2004/REC-xmlschema-0-20041028, 28 October, accessed 26 May 2010; Bray, T., (2008) Extensible Markup Language (XML) 1.0 (Fifth Edition), , http://www.w3.org/XML, editors, November, access 26 May 2010","Goldin, S. E.; Department of Computer Engineering, , Thonburi, Bangkok, Thailand; email: sally@cpe.kmutt.ac.th",,"IEEE Fukuoka Section;IEEE Region 10",,"2010 IEEE Region 10 Conference, TENCON 2010","21 November 2010 through 24 November 2010","Fukuoka",83758,,9781424468904,85QXA,,"English","IEEE Reg 10 Annu Int Conf Proc TENCON",Conference Paper,"Final","",Scopus,2-s2.0-79951623099
"Ferreira R.D.F., Faria J.P., Paiva A.C.R.","16425517100;35219959000;7102683763;","Test coverage analysis of UML activity diagrams for interactive systems",2010,"Proceedings - 7th International Conference on the Quality of Information and Communications Technology, QUATIC 2010",,, 5655571,"268","273",,2,"10.1109/QUATIC.2010.51","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78751531876&doi=10.1109%2fQUATIC.2010.51&partnerID=40&md5=8db50c7118e190069d9678b3ce62813b","Departamento de Engenharia Informática, Faculdade de Engenharia da Universidade do Porto, Portugal; INESC Porto, Porto, Portugal","Ferreira, R.D.F., Departamento de Engenharia Informática, Faculdade de Engenharia da Universidade do Porto, Portugal; Faria, J.P., Departamento de Engenharia Informática, Faculdade de Engenharia da Universidade do Porto, Portugal, INESC Porto, Porto, Portugal; Paiva, A.C.R., Departamento de Engenharia Informática, Faculdade de Engenharia da Universidade do Porto, Portugal","User interface testing is a very important but time consuming activity. To automate and systematize the testing process, models can be used to derive test cases automatically - a technique known as model-based testing. Given a model representing the intended system behavior and a test suite derived from the model or produced manually, the coverage of the test suite over the model is an important early indicator of the quality and completeness of the test suite. This paper presents a novel tool that shows visually the coverage achieved by a test suite over an UML model of an interactive system. This model is based on activity and class diagrams, with special user interface modeling features (stereotypes and keywords) inspired in ConcurTaskTrees and Canonical Abstract Prototypes. The tool receives a UML model file and a test suite, determines the model coverage by simulating the execution of the test suite over the model, and produces a colored UML model showing the elements covered. An example is presented to illustrate the approach. © 2010 IEEE.","Coverage analysis; Model-based testing; UML activity diagrams","Class diagrams; Concurtasktrees; Coverage analysis; Interactive system; Interface modeling; Interface testings; Model coverage; Model-based testing; System behaviors; Test case; Test coverage; Testing process; UML activity diagrams; UML Model; Graphic methods; Information technology; Testing; Unified Modeling Language; User interfaces; Mathematical models",,,,,,,,"Apfelbaum, L., Doyle, J., Model based testing (1997) Software Quality Week Conference; Paiva, A.C.R., Modeling and testing hierarchical GUIs (2005) ASM 2005 - 12th International Workshop on Abstract State Machines, , Paris, France; Paiva, A.C.R., (2006) Automated Specification-Based Testing of Graphical User Interfaces, , Ph.D. dissertation, U.Porto, Porto, Portugal; Barnett, M., The Spec# programming system: Challenges and directions (2005) VSTTE2005; Veanes, M., (2008) Model-Based Testing of Object-Oriented Reactive Systems with Spec Explorer, pp. 39-76. , Springer Verlag; Faria, J.P., Paiva, A.C.R., www.fe.up.pt/~softeng/wiki/doku.php?id=projects:amber-itest:start, [cited 2010 January], Available from; Ferreira, R., Faria, J.P., Paiva, A.C.R., Test coverage analysis of UML state machines (2010) Second International Workshop on TESTing Techniques & Experimentation Benchmarks for Event-Driven Software (TESTBEDS 2010), , Paris, France, April 6; Paternò, F., Mancini, C., Meniconi, S., ConcurTaskTrees: A diagrammatic notation for specifying task models (1997) Interact'97; Paiva, A.C.R., A model-to-implementation mapping tool for automated model-based GUI Testing (2005) ICFEM'05; Constantine, L., Canonical abstract prototypes for visual and interaction design (2003) Interactive Systems. Design, Specification and Verification DSV-IS'03, , Springer LNCS 2844; Seifert, D., Gaston, C., (2005) Evaluating Coverage Based Testing, 3472 (2005), pp. 293-322. , Springer Berlin/Heidelberg; Gargantini, A., Riccobene, E., ASM-based testing: Coverage criteria and automatic test sequence generation (2001) Journal of Universal Computer Science, 7 (11), pp. 1050-1067; Zhu, H., Hall, P.A.V., May, J.H.R., Software unit test coverage and adequacy (1997) ACM Computing Surveys (CSUR), 29 (4), pp. 366-427; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , San Francisco: Morgan Kaufmann Publisher; Enterprise Architect, , www.sparxsystems.com.au, [cited 2010 March], Available from; Blankenhorn, K., (2004) A UML Profile for GUI Layout, , in Department of Digital Media., University of Applied Sciences Furtwangen; Silva, P., Paton, N., UMLi: The unified modeling language for interactive applications (2000) Third International Conference UML2000 - The Unified Modeling Language - Advancing the Standard; Nunes, N., Cunha, J., Towards a UML profile for interaction design: The Wisdom approach (2000) Third International Conference UML2000 - The Unified Modeling Language, , York, UK: Springer; Moreira, R., Paiva, A., Visual abstract notation for GUI modelling and testing: VAN4GUIM (2008) 3rd International Conference on Software and Data Technologies (ICSOFT'08), , Springer: Gaia, Portugal; Nóbrega, L., Nunes, N., Coelho, H., Mapping ConcurTaskTrees into UML 2.0 (2005) Proceedings of DSV-IS 2005, pp. 237-248. , Springer; Paternò, F., Towards a UML for interactive systems (2001) EHCI 2001, pp. 7-18. , LNCS 2254; Basanieri, F., Bertolino, A., Marchetti, E., The cow-suite approach to planning and deriving test suites in UML projects Fifth International Conference on the Unified Modeling Language, UML 2002, pp. 383-397. , Dresden, Germany; Weißleder, S., Sokenou, D., Automatic test case generation from UML models and OCL expressions (2008) Test-Workshop at SE 2008, pp. 423-426. , Munich, Germany; Conformiq, , www.conformiq.com, [cited 2010 14th of January], Available from","Ferreira, R. D. F.; Departamento de Engenharia Informática, Portugal; email: ricardo.daniel@fe.up.pt",,"StrongStep;INESC Porto;Microsoft;TICE.PT;IBM",,"7th International Conference on the Quality of Information and Communications Technology, QUATIC 2010","29 September 2010 through 2 October 2010","Porto",83358,,9780769542416,,,"English","Proc. - Int. Conf. Qual. Inf. Commun. Technol., QUATIC",Conference Paper,"Final","",Scopus,2-s2.0-78751531876
"Sengupta G.J.","55158163500;","Regression testing method based on XML schema for GUI components",2010,"Journal of Software Engineering","4","2",,"137","146",,5,"10.3923/jse.2010.137.146","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78651346414&doi=10.3923%2fjse.2010.137.146&partnerID=40&md5=4cc39f22a7e4f3f430b6aae946403419","Department of Computer Science, Punjabi University, Patiala, India","Sengupta, G.J., Department of Computer Science, Punjabi University, Patiala, India","Today XML (extensible Mark-up Language) is being accepted as an effective medium in data exchange over the web due to its modeling ability to support multiple inheritance and querying capabilities. In this study, we extend XML Schema based approach for testing software components. Component based software development emphasizes the design and construction of software using reusable components. The reliability and robustness of the software depends on testing the functional correctness of components. However, due to lack of information about the externally developed components, system testers generally can't perform effective testing (especially regression testing). It involves testing the modified program with some test cases in order to re-establish confidence that the program will perform according to the new specifications. The new version should behave exactly as the old except where new behavior is intended. In today's scenario, Graphical User Interface (GUI) is by far the most popular means used to interact with software. An important aspect in GUI testing is specification of system behavior and generation of test scripts. We have proposed XML schema based formalization approach for specifying and testing GUI components; as they combine the great potential of describing input data in open and standard form, with testing activity. We have worked upon specification of GUI component in XML which is validated. A Regression Testing Engine based on XML schema has been designed that generates test sequences based on specific coverage criteria, compares the two schemas for different versions of component and finally generates the regression test suite. Results have been validated for different case studies. © 2010 Academic Journals Inc.","Component; Event sequence; Graphical user interface; Regression testing; XML","Component; Component-based software development; Coverage criteria; Design and construction; Effective medium; Effective testing; Event sequence; GUI testing; Input datas; Modeling abilities; Multiple inheritance; Regression testing; Regression tests; Reliability and robustness; Reusable components; Schemas; Standard form; System behaviors; Test case; Test scripts; Test sequence; Testing software; XML schemas; Computer software reusability; Electronic data interchange; Graphical user interfaces; Specifications; XML; Software testing",,,,,,,,"Bai, X., Dong, W., Tsai, W.T., Chen, Y., WSDL-based automatic test case generation for web services testing (2005) Proceedings of IEEE International Workshop on Service-Oriented System Engineering, pp. 215-220. , Oct. 20-21, IEEE Computer Society, Washington DC, USA; Bertolino, A., Gao, J., Marchetti, E., Polini, A., Automatic test data generation for XML schema-based partition testing (2007) Proceedings of the 2nd International Workshop on Automation of Software Test, International Conference on Software Engineering, pp. 1-4. , May 20-26, IEEE Computer Society Washington, DC, USA; Bertolino, A., Gao, J., Marchetti, E., Polini, A., Systematic Generation of XML Instances to Test Complex Software Applications (2007) Rapid Integration of Software Engineering Techniques, pp. 114-129. , Guelfi, N. andD. Buchs (Eds.). LN CS. 4401, Springer-Verlag, Berlin, Heidelberg, ISBN-13: 978-3-540-71875-8; Haw, S.C., Lee, C.S., Structural query optimization in native XML databases: A hybrid approach (2007) J. Applied Sci., 7, pp. 2934-2946; Mao, Y., Boqm, F., Zhenfang, H., Li, Z., Important usage paths selection for GUI software testing (2006) Inform. Technol. J., 5, pp. 648-654; McDowell, A., Schmidt, C., Yue, K., Analysis and metrics of XML schema (2004) Proceedings of the International Conference on Software Engineering Research and Practice, pp. 538-544. , June 21-24, CSREA Press; Memon, A., (2001) A comprehensive framework for testing graphical user interfaces, p. 2001. , Ph.D. Thesis, University of Pittsburgh, USA; Memon, A., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, pp. 256-267. , Sept. 10-14, Vienna, Austria; Wang, G., Han, D., Qiao, B., Wang, B., Extending XML schema with object-oriented features (2005) Inform. Technol. J., 4, pp. 44-54","Sengupta, G.J.; Department of Computer Science, , Patiala, India",,,,,,,,18194311,,,,"English","J. Softw. Eng.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-78651346414
"Liu X., Lan Y., Ma L.","36632741000;24831495500;56332188200;","Design and implementation of automated testing framework for linux software GUI testing",2010,"2010 6th International Conference on Wireless Communications, Networking and Mobile Computing, WiCOM 2010",,, 5600880,"","",,,"10.1109/WICOM.2010.5600880","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78549257826&doi=10.1109%2fWICOM.2010.5600880&partnerID=40&md5=3e280580180da22b19914c19e36486f9","Software Engineering Institute, School of Computer Science, BeiHang University, Beijing, China","Liu, X., Software Engineering Institute, School of Computer Science, BeiHang University, Beijing, China; Lan, Y., Software Engineering Institute, School of Computer Science, BeiHang University, Beijing, China; Ma, L., Software Engineering Institute, School of Computer Science, BeiHang University, Beijing, China","It is complicated but important for the Linux software GUI testing. However, the industry is still lack of the useful testing tools for the Linux software GUI testing. This paper designed and implemented a testing tool based on OSGI. The automated testing framework supports the keyword-driven test script management and implementation, and also supports the distributed testing management. It had been proved that the testing tool is quite suitable for the Linux software GUI testing. © 2010 IEEE.","Automated testing framework; Keyword-driven script; Linux software GUI testing; OSGi","Automated testing; Distributed testing; GUI testing; Keyword-driven script; OSGi; Test scripts; Testing tools; Automation; Computer operating systems; Graphical user interfaces; Mobile computing; Wireless telecommunication systems; Wireless networks",,,,,,,,"Fewster, M., Graham, D., (1999) Software Test Automation Technology and Example, pp. 333-342. , BeiJing Electronic Industry Press; Patton, R., (2002) Software Testing, pp. 12-50. , BeiJing Machine Press; Renjie, Z., (1992) Computer Testing Technology, , TsingHua University Press; OSGi[EB/OL], , zh.wikipedia.org/wiki/OSGi; Specification Describes of OSGi [EB/OL], , http://developer.51cto.com/art/200906/126270.html, 51CTO; Introduction of the OSGi and Bundle [EB/OL], , http://www.blogjava.net/mlh123caoer/archive/2007/08/29/140762.html, Caoer; Pei, L., (2007) Keyword-Driven Automated Testing Framework[D], , BeiJing BeiHang University; Domain-Specific Language [EB/OL], , http://en.wikipedia.org/wiki/Domain-specific_language; Graphical Modeling Framework[EB/OL], , http://wiki.eclipse.org/index.php/Graphical_Modeling_Framework; Yip, S.W.L., Robson, D.J., Graphical user interfaces validation: A problem analysis and a strategy to solution[J] (1991) System Sciences, pp. 91-100","Liu, X.; Software Engineering Institute, , Beijing, China; email: xiaohui@cse.buaa.edu.cn",,"IEEE Antennas and Propagation Society;IEEE Communications Society;Southwest Jiaotong University;University of Electronic Science and Technology of China;Wuhan University",,"2010 6th International Conference on Wireless Communications, Networking and Mobile Computing, WiCOM 2010","23 September 2010 through 25 September 2010","Chengdu",82436,,9781424437092,,,"English","Int. Conf. Wirel. Commun., Networking Mob. Comput., WiCOM",Conference Paper,"Final","",Scopus,2-s2.0-78549257826
"Alsmadi I.","17433667400;","Using Genetic Algorithms for test case generation and selection optimization",2010,"Canadian Conference on Electrical and Computer Engineering",,, 5575262,"","",,6,"10.1109/CCECE.2010.5575262","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78049339664&doi=10.1109%2fCCECE.2010.5575262&partnerID=40&md5=e07a0346a4e4adbf6ba68aeffbac4738","Yarmouk University, Jordan","Alsmadi, I., Yarmouk University, Jordan","Genetic Algorithms (GAs) are adaptive search techniques that imitate the processes of evolution to solve optimization problems when traditional methods are considered too costly in terms of processing time and output effectiveness. In this research, we will use the concept of genetic algorithms to optimize the generation of test cases from the application user interfaces. This is accomplished through encoding the location of each control in the GUI graph to be uniquely represented and forming the GUI controls' graph. After generating a test case, the binary sequence of its controls is saved to be compared with future sequences. This is implemented to ensure that the algorithm will generate a unique test case or path through the GUI flow graph every time.","And test automation; Genetic Algorithms; GUI controls' graph; Test case generation","Adaptive search; Flow graph; GUI controls' graph; Optimization problems; Processing Time; Test Automation; Test case; Test case generation; Binary sequences; Genetic algorithms; Graphical user interfaces; Optimization; Testing",,,,,,,,"Memon, A., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, pp. 144-155; Berndt, D., Fisher, J., Johnson, L., Pinglikar, J., Watkins, A., Breeding software test cases with genetic algorithms (2003) Proceedings of the 36th Annual Hawaii International Conference on System Sciences (HICSS'03), p. 338. , Hawaii, USA; Alsmadi, I., Magel, K., An object oriented framework for user interface test automation (2007) MICS07; Huang, G.-D., Wang, F., (2005) Automatic Test Case Generation with Region-Related Coverage Annotations for Real-Time Systems, , Springer; Avritzer, A., Weyuker, E.J., The automatic generation of load test suites and the assessment of the resulting software (1995) IEEE Transactions on Software Engineering; Yuan, X., (2008) Feedback-Directed Model-Based GUI Test Case Generation, , Phd dissertation; Goldberg, D., (1989) Genetic Algorithm in Search, Optimization, and Machine Learning, , Addison-Wesely; Holland, J.H., (1975) Adaptation in Natural and Artificial Systems, , The university of Michigan press; Jones, B.F., Sthamer, H.-H., Yang, X., Eyres, D.E., The automatic generation of software test data sets using adaptive search techniques (1999) Third International Conference on Software Quality Management, pp. 435-444. , Seville, BCSICMP; Jones, S.B.F., Eyres, D.E., Sthamer, H.-H., A strategy for using genetic algorithms to automate branch and fault- based testing (1998) The Computer Journal, 41, pp. 98-107; Lin, J.-C., Yeh, P.-L., Using genetic algorithms for test case generation in path testing (2000) 9th Asian Test Symposium (ATS'00)","Alsmadi, I.; Yarmouk UniversityJordan",,,,"2010 23rd Canadian Conference on Electrical and Computer Engineering, CCECE 2010","2 May 2010 through 5 May 2010","Calgary, AB",82048,08407789,9781424453764,CCCEF,,"English","Can Conf Electr Comput Eng",Conference Paper,"Final","",Scopus,2-s2.0-78049339664
"Ni J., Wang M., Wang J.","36601219600;56518455200;36601726500;","Realization on intelligent GUI automation testing based-on .NET",2010,"Proceedings - 2010 3rd IEEE International Conference on Computer Science and Information Technology, ICCSIT 2010","1",, 5563862,"14","17",,2,"10.1109/ICCSIT.2010.5563862","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77958592646&doi=10.1109%2fICCSIT.2010.5563862&partnerID=40&md5=3fb9b39e660ba80d69d9604424ace054","School of Physics and Electronic, Henan University, Kaifeng, China; Shenyang Institute of Automation, Chinese Academy of Science, Shenyang, China; School of Computer Science, South-Central University for Ethnic, Shenyang, China","Ni, J., School of Physics and Electronic, Henan University, Kaifeng, China; Wang, M., Shenyang Institute of Automation, Chinese Academy of Science, Shenyang, China; Wang, J., School of Computer Science, South-Central University for Ethnic, Shenyang, China","Points out the obvious deficiencies in capture/playback mechanism at present, aiming at difficulties of maintenance and extension in constantly altered GUI elements, presents a new GUI automation testing solution-BuDding AUILibrary. It can search, identify all the controls, trigger aU kinds of mouse and keyboard events, execute data driving verification roundly and accurately, trace and record execution process and save the locale when exception occurs, implement flexible and effective GUI automation testing indeed. © 2010 IEEE.","Automation; GUI; Software testing","Automation testing; Execution process; GUI; Automation; Computer science; Computer software maintenance; Computer software selection and evaluation; Information technology; Software testing; Graphical user interfaces",,,,,,,,"Li, K., Wu, M., Effective Software Test Automation: Developing An Automated Software Testing Tool, , Alameda, Calif. Sybex, 2004.02; Memon, A., GUI testing : Pitfalls and process (2002) Software Teclmologies, pp. 87-88; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automation planning (2001) IEEE Trans. Software Eng., 27 (2), pp. 144-155; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequence (2000) Int. Symp. on Software Reliability Engineering, pp. 110-121. , San Jose CA; Lee, W., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc of Int SymP on Software Reliability Engineering, pp. 110-121. , San Jose CA; Rosenblum, D.S., Weyuker, E.J., Using coverage information to predict the cost effectiveness of regression testing strategies (1997) IEEE Transactions on Software Engineering, 23 (3), pp. 146-156. , Mar; Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210; Binkley, D., Semantics guided regression test cost reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516. , Aug; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, Volume 2 of SPECIAL SESSIONS: Demonstrations, p. 1042; Effective Software Test Automation: Developing An Automated Software Testing Tool, , Alameda, Calif., Sybex, 2004.09; http://msdn.microsoft.com/zh-cn/library/ms788733.aspx; http://msdn.microsoft.com/zh-cn/library/accessibility.iaccessible.as","Ni, J.; School of Physics and Electronic, , Kaifeng, China; email: janexx@sina.com",,,,"2010 3rd IEEE International Conference on Computer Science and Information Technology, ICCSIT 2010","9 July 2010 through 11 July 2010","Chengdu",81988,,9781424455386,,,"English","Proc. - IEEE Int. Conf. Comput. Sci. Inf. Technol., ICCSIT",Conference Paper,"Final","",Scopus,2-s2.0-77958592646
"Grilo A.M.P., Paiva A.C.R., Faria J.P.","36550249900;7102683763;35219959000;","Reverse engineering of GUI models for testing",2010,"Proceedings of the 5th Iberian Conference on Information Systems and Technologies, CISTI 2010",,, 5556690,"","",,28,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-77957824541&partnerID=40&md5=d2aac97909a1b95c19af6b97f03cfaa7","Departamento de Engenharia Informática, Faculdade de Engenharia, Universidade do Porto, Portugal; INESC Porto, Portugal","Grilo, A.M.P., Departamento de Engenharia Informática, Faculdade de Engenharia, Universidade do Porto, Portugal; Paiva, A.C.R., Departamento de Engenharia Informática, Faculdade de Engenharia, Universidade do Porto, Portugal; Faria, J.P., Departamento de Engenharia Informática, Faculdade de Engenharia, Universidade do Porto, Portugal, INESC Porto, Portugal","The incorrect behaviour of Graphical User Interfaces (GUIs) can compromise the effective use of the overall software application. One way to discover defects and increase the quality of GUIs is through testing. Test cases can be created manually or produced automatically from a model of the GUI. The size and complexity of GUIs makes it unpractical to do extensive manual testing. However, creating a model of the GUI in order to generate automatically test cases is also a laborious task. This paper presents a reverse engineering approach for diminishing the effort required for constructing the model of an existing GUI. The GUI is exercised by a combination of manual and automatic exploration, and information about its structure and some of its behaviour is automatically extracted, resulting in an incomplete GUI model. This model is subsequently completed manually, validated and used as input for automatic test generation and execution.","GUI modelling; GUI testing; Reverse engineering","Automatic test generation; Automatically test; GUI modelling; GUI testing; Software applications; Test case; Information systems; Models; Reverse engineering; Graphical user interfaces",,,,,,,,"(2009) UI Automation. Msdn, , http://msdn.microsoft.com/en-us/accessibility/bb892133.aspx, cited 2009; Available from; Hamill, P., (2004) Unit Test Frameworks, p. 216. , O'Reilly Media, November, ISBN: 9780596006891; Hendrickson, E., Making the right choice (1999) Software Testing & Quality Engineering, pp. 21-25; Nyman, N., Using monkey test tools (2000) Software Testing & Quality Engineering, pp. 18-21; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, , ACM: Vienna, Austria; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, , ACM: Los Angeles, California, United States; Paiva, A.C.R., A model-to-implementation mapping tool for automated model-based GUI testing (2005) ICFEM'05; Chikofsky, E.J., Cross II, J.H., Reverse engineering and design recovery: A taxonomy (1990) Software, IEEE, pp. 13-17; Moore, M.M., Rule-based detection for reverse engineering user interfaces (1996) Proceedings of the Third Working Conference on Reverse Engineering; Mori, G., Paterno, F., Santoro, C., CTTE: Support for developing and analyzing task models for interactive system design (2002) Software Engineering, IEEE Transactions on, 28 (8), pp. 797-813; Csaba, L., Experience with user interface reengineering transferring DOS panels to windows (1997) Proceedings of the 1st Euromicro Working Conference on Software Maintenance and Reengineering (CSMR '97), , IEEE Computer Society; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Reverse Engineering, 2003. WCRE 2003. Proceedings. 10th Working Conference on; Stroulia, E., El-Ramly, M., Kong, L., Sorenson, P., Matichuk, B., Reverse engineering legacy interfaces: An interaction-driven approach (1999) Reverse Engineering - Working Conference Proceedings, pp. 292-302; Ricca, F., Tonella, P., Baxter, I.D., Restructuring web applications via transformation rules (2001) Source Code Analysis and Manipulation, 2001. Proceedings. First IEEE International Workshop on; Paiva, A.C.R., Faria, J.C.P., Mendes, P., Reverse engineering formal models for GUI testing (2007) 12th International Workshop on Formal Methods for Industrial Critical Systems (FMICS), , Berlin, Germany; Paiva, A.C.R., (2007) Automated Specification-Based Testing of Graphical User Interfaces, , Department of Electrical and Computer Engineering, Ph.D; Veanes, M., (2008) Model-based Testing of Object-oriented Reactive Systems with Spec Explorer, pp. 39-76. , Springer Verlag; Barnett, M., Leino, K.R.M., Schulte, W., The spec# programming system: An overview (2005) Lecture Notes in Computer Science, 3362, pp. 49-69. , Construction and Analysis of Safe, Secure, and Interoperable Smart Devices - International Workshop, CASSIS 2004","Grilo, A. M. P.; Departamento de Engenharia Informática, Portugal; email: andre.grilo@fe.up.pt",,,,"5th Iberian Conference on Information Systems and Technologies, CISTI 2010","16 June 2010 through 19 June 2010","Santiago de Compostela",81806,,9789899624733,,,"English","Proc. Iberian Conf. Inf. Syst. Technol., CISTI",Conference Paper,"Final","",Scopus,2-s2.0-77957824541
"Rauf A., Anwar S., Kazim N., Shahid A.A.","57194106980;57212662725;36499366300;24725536800;","Evolutionary based automated coverage analysis for GUI testing",2010,"Communications in Computer and Information Science","94 CCIS","PART 1",,"456","466",,2,"10.1007/978-3-642-14834-7_43","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956990094&doi=10.1007%2f978-3-642-14834-7_43&partnerID=40&md5=6136d72a334354e6af7fc30c04ae0c19","Department of Computer Science, National University of Computer and Emerging Sciences (NUCES), Islamabad, Pakistan","Rauf, A., Department of Computer Science, National University of Computer and Emerging Sciences (NUCES), Islamabad, Pakistan; Anwar, S., Department of Computer Science, National University of Computer and Emerging Sciences (NUCES), Islamabad, Pakistan; Kazim, N., Department of Computer Science, National University of Computer and Emerging Sciences (NUCES), Islamabad, Pakistan; Shahid, A.A., Department of Computer Science, National University of Computer and Emerging Sciences (NUCES), Islamabad, Pakistan","In recent times, software industry has seen the immense expansion in its popularity. Graphical user interface (GUI) is of the most important and ground breaking factor behind the exponential growth of acceptance of software systems. Beside this popularity, software organizations are trying best to optimize the quality of delivered products. In software development life cycle, software testing is one major phase having focus towards improved software quality. Increased attention towards GUI in development helped in materialization of GUI testing as a vital branch of software testing. Manual efforts to test GUI have revealed a lot of problems, which, ultimately led towards automation of GUI testing. This paper presents a novel approach towards automation of GUI test coverage analysis based on an evolutionary algorithm, Particle Swarm Optimization (PSO). Another objective that has been tried to achieve is keeping number of test cases at minimum side. © 2010 Springer-Verlag Berlin Heidelberg.","Coverage Analysis; Coverage Criterion; GUI Testing; Multi Objective PSO; Multi-objective optimization","Coverage analysis; Coverage criteria; Exponential growth; GUI testing; Multi objective; Software development life cycle; Software industry; Software organization; Software Quality; Software systems; Test case; Test coverage; Automation; Computer software selection and evaluation; Multiobjective optimization; Particle swarm optimization (PSO); Software design; Software testing; Graphical user interfaces",,,,,,,,"Hackner, D.R., Memon, A.M., Test case generator for GUITAR (2008) Companion of the 30th International Conference on Software Engineering, ICSE Companion 2008, pp. 959-960. , ACM, New York; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Rauf, A., Automated GUI test coverage analysis using GA (2010) Seventh International Conference on Information Technology (ITNG 2010), , Las Vegas, Nevada, USA; Coello Coello, C.A., Lamont, G.B., Van Veldhuizen, D.A., (2006) Evolutionary Algorithms for Solving Multi-Objective Problems, , Springer, New York; Osyczka, A., (1985) Multicriteria Optimization for Engineering Design in Design Optimization, pp. 193-227. , Academic Press, London; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software, 27 (2), pp. 144-155; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2-7); Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Doctoral Thesis. University of Pittsburgh; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference, , Vienna, Austria; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, , Vancouver, British Columbia, Canada; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interaction (2001) Proceedings of the International Symposium on Software Reliability Engineering, pp. 54-63. , IEEE Computer Society Press, Piscataway; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121. , IEEE Computer Society Press, Piscataway; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, New York; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference, pp. 256-267. , Vienna, Austria ACM, New York; Jones, B.F., Eyres, D.E., Sthamer, H.H., A strategy for using genetic algorithms to automate branch and fault-based testing (1998) The Computer Journal, 41, pp. 98-107; Jones, B.F., Sthamer, H.H., Eyers, D.E., Automatic structural testing using genetic algorithms (1996) The Software Engineering Journal, 11, pp. 299-306; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Journal of Software Testing, Verification and Reliability, 9 (4), pp. 263-282; Tracey, N., Clark, J., Mander, K., McDermid, J., Automated test-data generation for exception conditions (2000) Software Practice and Experience, 30 (1), pp. 61-79; Lu, Y., Yan, D., Nie, S., Wang, C., Development of an improved GUI automation test system based on event-flow graph (2008) Proceedings of the 2008 International Conference on Computer Science and Software Engineering, , IEEE Computer Society, Washington; Afzal, W., Torkar, R., Feldt, R., A systematic review of search-based testing for nonfunctional system properties (2009) Information and Software Technology, 51, pp. 957-976; Ferligoj, A., Batagelj, V., Direct multicriterion clustering (1992) J. Classification, 9, pp. 43-61; Coello Coello, C.A., Theoretical and numerical constraint-handling techniques used with evolutionary algorithms: A survey of the state of the art (2002) Computer Methods in Applied Mechanics and Engineering, 191 (1112), pp. 1245-1287; (2004) Applications of Multi-Objective Evolutionary Algorithms, , Coello Coello, C.A., Lamont, G.B. (eds.) World Scientific, Singapore; Van Veldhuizen, D.A., (1999) Multiobjective Evolutionary Algorithms: Classifications, Analyses, and New Innovations, , Doctoral thesis. Air Force Institute of Technology, Wright-Patterson AFB, Ohio; Kennedy, J., Eberhart, R.C., Particle swarm optimization (1995) Proc. IEEE International Conference on Neural Networks, pp. 1942-1948. , Perth; Coello, C.A.C., Evolutionary multiobjective optimization: A historical view of the field (2006) IEEE Computational Intelligence Magazine, pp. 28-36; Windisch, A., Wappler, S., Wegener, J., Applying particle swarm optimization to software testing (2007) Proceedings of the 9th Annual Conference on Genetic and Evolutionary Computation, pp. 1121-1128. , ACM, New York; Hla, K.H.S., Choi, Y.S., Park, J.S., Applying particle swarm optimization to prioritizing test cases for embedded real time software retesting (2008) IEEE 8th International Conference on Computer and Information Technology, pp. 527-532; Kennedy, J., Eberhart, R.C., Particle swarm optimization (1995) Proceedings of IEEE Int. Conference on Neural Networks, pp. 1942-1948","Rauf, A.; Department of Computer Science, , Islamabad, Pakistan; email: a.rauf@nu.edu.pk",,,,"3rd International Conference on Contemporary Computing, IC3 2010","9 August 2010 through 11 August 2010","Noida",81747,18650929,3642148336; 9783642148330,,,"English","Commun. Comput. Info. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-77956990094
"Chen W.-K., Shen Z.-W.","9735579700;36471050900;","GUI test-case generation with macro-event contracts",2010,"2nd International Conference on Software Engineering and Data Mining, SEDM 2010",,, 5542936,"145","151",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956554537&partnerID=40&md5=ecf098a4a92c5f98416c327ca8e75124","Department of Computer Science and Information Engineering, National Taipei University of Technology, Taipei, Taiwan","Chen, W.-K., Department of Computer Science and Information Engineering, National Taipei University of Technology, Taipei, Taiwan; Shen, Z.-W., Department of Computer Science and Information Engineering, National Taipei University of Technology, Taipei, Taiwan","To perform a comprehensive GUI testing, a large number of test cases are needed. This paper proposes a GUI test-case generation approach that is suitable for system testing. The key idea is to extend high-level GUI scenarios with contracts and use the contracts to infer the ordering dependencies of the scenarios. From the ordering dependencies, a state machine of the system is constructed and used to generate test cases automatically. A case study is conducted to investigate the quality of the test cases generated by the proposed approach. The results showed that, in comparison to creating test cases manually, the proposed approach can detect more faults with less human effort.","Contract-based testing; Event contract; GUI testing; System testing; Test-case generation","Event contract; GUI testing; State machine; System testing; Test case; Test-case generation; Data mining; Graphical user interfaces; Software engineering; System theory; Testing",,,,,,,,"Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution, 17 (1), pp. 27-64. , Jan; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability; Strecker, J., Memon, A.M., Testing graphical user interfaces (2009) Encyclopedia of Information Science and Technology, , Second ed. IGI Global; Silva, J.L., Campos, J.C., Paiva, A., Model-based user interface testing with spec explorer and concurtasktrees 2nd International Workshop on Formal Methods for Interactive Systems (FMIS1 2007, 208 (2008), pp. 77-93. , ser. Electronic Notes in Theorectical Computer Science, P. Curzon and A. Cerone, Eds; Chen, J., Expressing graphical user's input for test specifications (2002) EDCIS, 2480, pp. 347-359. , ser. Lecture Notes in Computer Science, Y. Han, S. Tai, and D. Wikarski, Eds., Springer; Chen, J., Subramaniam, S., Specification-based testing for GUI-based applications (2002) Software Quality Journal, 10 (3), pp. 205-224; Chen, W.-K., Shen, Z.-W., Chang, C.-M., GUI test script organization with component abstraction IEEE International Conference on Secure System Integration and Reliability Improvement (SSIRI 2008, 2008, pp. 128-134; Chen, W.-K., Shen, Z.-W., Tsai, T.-H., Integration of specification-based and cr-based approaches for GUI testing (2008) J. Inf. Sci. Eng., 24 (5), pp. 1293-1307; Nebut, C., Fleurey, F., Traon, Y.L., Jézéquel, J.-M., Automatic test generation: A use case driven approach (2006) IEEE Trans. Software Eng., 32 (3), pp. 140-155; http://sourceforge.net/projects/crosswordsage/, B. Westgarth. Crossword sage. Jul. 1, 2008 [Online]. Available. [Online] Available: http://crosswordsage.sourceforge.net; Offutt, J., Liu, S., Abdurazik, A., Ammann, P., Generating test data from state-based specifications (2003) The Journal of Software Testing, Verification and Reliability, 13, pp. 25-53; Robinson, M., Vorobiev, P., (2003) Swing, Second Edition, , Manning Publications; http://sourceforge.net/projects/sudokumania/, R. Odell. Sudoku mania. Jul. 1, 2008 [Online]. Available; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source GUI applications (2006) IEEE International Conference on Software Maintenance, ICSM, pp. 145-154. , DOI 10.1109/ICSM.2006.39, 4021332, ICSM 2006 Proceedings - 22nd IEEE International Conference on Software Maintenance; Brooks, P., Memon, A.M., Automated gui testing guided by usage profiles (2007) ASE '07: Proceedings of the 22nd IEEE International Conference on Automated Software Engineering, , Washington, DC, USA: IEEE Computer Society; Strecker, J., Memon, A.M., Relationships between test suites, faults, and fault detection in gui testing (2008) ICST '08: Proceedings of the First International Conference on Software Testing, Verification, and Validation, , Washington, DC, USA: IEEE Computer Society; Xie, Q., Memon, A.M., Using a pilot study to derive a gui model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2); Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Trans. on Softw. Eng. and Method.; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI run-time state feedback IEEE Transactions on Software Engineering, 2010 NN (N); Zhu, H., Hall, P.A.V., May, J.H.R., Software unit test coverage and adequacy (1997) ACM Comput. Surv., 29 (4), pp. 366-427; Andrews, J.H., Briand, L.C., Labiche, Y., Is mutation an appropriate tool for testing experiments?"" in (2005) ICSE, pp. 402-411. , G.-C. Roman, W. G. Griswold, and B. Nuseibeh, Eds. ACM; Andrews, J.H., Briand, L.C., Labiche, Y., Namin, A.S., Using mutation analysis for assessing and comparing testing coverage criteria (2006) IEEE Trans. Software Eng., 32 (8), pp. 608-624; Ma, Y.-S., Offutt, J., Kwon, Y.R., MuJava: An automated class mutation system (2005) Softw. Test., Verif. Reliab., 15 (2), pp. 97-133; Shehady, R.K., Siewiorek, D.P., A methodology to automate user interface testing using variable finite state machines (1997) Proc. the Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97, pp. 80-88. , Seattle, Washington, USA: IEEE Computer Society, June; White, L.J., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc. 11th International Symposium on Software Reliability Engineering (ISSRE'00, pp. 110-123. , San Jose, CA, USA: IEEE Computer Society, October; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proc. 12th International Symposium on Software Reliability Engineering (ISSRE'01, p. 34; Memon, A.M., Pollack, M.E., Soffa, M.L., A planning-based approach to GUI testing (2000) Proceedings of the 13th International Software/Internet Quality Week, , May; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Paiva, A., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for GUI testing (2007) Electr. Notes Theor. Comput. Sci., 190 (2), pp. 99-111","Chen, W.-K.; Department of Computer Science and Information Engineering, , Taipei, Taiwan; email: wkchen@ntut.edu.tw",,"Int. Assoc. Inf., Cult., Hum. Ind. Techno. (AICIT);Inst. Electr. Electro. Eng., Inc.;Inst. Electr. Electron. Eng.(IEEE), Chengdu Sect.;National Natural Science Foundation of China(NSFC);University of Electronic Science and Technology of China (UESTC);et. al.",,"2nd International Conference on Software Engineering and Data Mining, SEDM 2010","23 June 2010 through 25 June 2010","Chengdu",81677,,9788988678213,,,"English","Int. Conf. Softw. Eng. Data Min., SEDM",Conference Paper,"Final","",Scopus,2-s2.0-77956554537
"Abdul R., Ejaz N., Abbas Q., Rehman S.U., Shahid A.A.","36068850600;57195540723;24828970300;57210004507;24725536800;","PSO based test coverage analysis for event driven software",2010,"2nd International Conference on Software Engineering and Data Mining, SEDM 2010",,, 5542921,"219","224",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956519344&partnerID=40&md5=57cd512aa46d4be8f258366e2249a630","National University of Computer and Emerging Sciences, Islamabad, Pakistan; Department of Computer Science, Iqra University, Islamabad, Pakistan","Abdul, R., National University of Computer and Emerging Sciences, Islamabad, Pakistan; Ejaz, N., National University of Computer and Emerging Sciences, Islamabad, Pakistan; Abbas, Q., Department of Computer Science, Iqra University, Islamabad, Pakistan; Rehman, S.U., National University of Computer and Emerging Sciences, Islamabad, Pakistan; Shahid, A.A., National University of Computer and Emerging Sciences, Islamabad, Pakistan","Graphical User Interface (GUI) includes graphical objects for certain functionalities and features that will determine the state of the GUI at any time. To ensure that software quality is par excellence, software development organizations have made a lot of efforts to test the software with care. However, the process of the examination of a GUI application requires, a huge effort, because of the complexity of these applications. As a result, these organizations have started to provide various automated testing techniques to achieve this goal. Flow graph of events (control flow graph) is an innovative technology being used in the automated GUI testing. The search for the ultimate guarantee for software quality through the introduction of automated software testing raises a more difficult question of ""quantity"" of tests necessary to ensure the best results. During automated software testing process, evolutionary algorithms can be used to endow with knowledge about the quality of automated test suite based on preset criterion. Usually this test criterion corresponds to a ""coverage function"" that measures how much of the automatically generated optimization parameters satisfies the given test criterion. In this paper, we have attempted to exploit the event driven nature of GUI. Based on this nature, we have presented a GUI testing and coverage analysis technique centered on Particle Swarm Optimization (PSO).","Coverage criterion; Event flow; GUI testing; Particle swarm optimization; Test data","Automated software testing; Automated test; Automated testing; Automatically generated; Control flow graphs; Coverage analysis; Coverage criteria; Event driven; Event flow; Event-driven softwares; Flow graph; Graphical objects; GUI applications; GUI testing; Innovative technology; Optimization parameter; Software development organizations; Software Quality; Test coverage; Test criteria; Test data; Automatic test pattern generation; Automation; Data mining; Graphic methods; Graphical user interfaces; Innovation; Particle swarm optimization (PSO); Software design; Software testing; Testing; Computer software selection and evaluation",,,,,,,,"Bertolino, A., Software testing forever: Old and new processes and techniques for validating today's applications (2008) 9th International Conference on Product Focused Software Process Improvement, pp. 1-1. , Monte Porzio Catone, June; Harrold, M.J., Testing: A roadmap (2000) International Conference on Software Engineering, Proceedings of the Conference on the Future of Software Engineering (ICSE 00), pp. 61-72. , Limerick, Ireland; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab, pp. 137-157. , Sep; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2), pp. 1-35. , no. 7, Nov; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proc. SIGCHI Conference on Human Factors in Computing Systems, pp. 244-251; Kasik, D.J., A user interface management system (1982) Proc. 9th Annual Conference on Computer Graphics and Interactive Techniques, pp. 26-30. , Boston, Massachusetts, United States, July; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interaction (2001) Proc. International Symposium on Software Reliability Engineering, pp. 54-63. , IEEE Computer Society Press; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proc. 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), pp. 118-127. , ACM Press; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proc. 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , ACM Press; Michael, G., McGraw, Schatz, M., Generating software test data by evolution (2001) IEEE Transactions on Software Engineering, pp. 1085-1110; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Journal of Software Testing, Verification and Reliability, 9 (4), pp. 263-282; Lu, Y., Yan, D., Nie, S., Wang, C., Development of an improved GUI automation test system based on event-flow graph (2008) International Conference on Computer Science and Software Engineering, Csse, 2, pp. 712-715; Afzal, W., Torkar, R., Feldt, R., A systematic review of search-based testing for non-functional system properties (2009) Information and Software Technology, 51 (6), pp. 957-976. , Jun; Windisch, A., Wappler, S., Wegener, J., Applying particle swarm optimization to software testing (2007) Proc. 9th Annual Conference on Genetic and Evolutionary Computation, pp. 1121-1128; Hla, K.H., Choi, Y., Park, J.S., Applying particlen swarm optimization to prioritizing test cases for embedded real time software retesting (2008) Proc. 8th International Conference on Computer and Information Technology Workshops, pp. 527-532. , Washington, DC, July; Li, K., Zhang, Z., Kou, J., Breeding software test data with genetic-particle swarm mixed algorithm (2010) J. Comput, 5 (2), pp. 258-265. , Feb; Kennedy, J., Eberhart, R.C., Particle swarm optimization (1995) Proc. IEEE International Conference on Neural Networks, pp. 1942-1948. , Perth, Australia","Abdul, R.; National University of Computer and Emerging Sciences, Islamabad, Pakistan; email: a.rauf@nu.edu.pk",,"Int. Assoc. Inf., Cult., Hum. Ind. Techno. (AICIT);Inst. Electr. Electro. Eng., Inc.;Inst. Electr. Electron. Eng.(IEEE), Chengdu Sect.;National Natural Science Foundation of China(NSFC);University of Electronic Science and Technology of China (UESTC);et. al.",,"2nd International Conference on Software Engineering and Data Mining, SEDM 2010","23 June 2010 through 25 June 2010","Chengdu",81677,,9788988678213,,,"English","Int. Conf. Softw. Eng. Data Min., SEDM",Conference Paper,"Final","",Scopus,2-s2.0-77956519344
"Wei Z., Xiaoxue W.","26633219700;36471455900;","Graph theory model based automatic test platform design",2010,"2nd International Conference on Software Engineering and Data Mining, SEDM 2010",,, 5542913,"263","267",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956497655&partnerID=40&md5=eb94de29b38f5e5771a1a9fbe573119d","College of Software and Microelectronics, Northwestern Polytechnical University, Xi'an, 710072, China","Wei, Z., College of Software and Microelectronics, Northwestern Polytechnical University, Xi'an, 710072, China; Xiaoxue, W., College of Software and Microelectronics, Northwestern Polytechnical University, Xi'an, 710072, China","Traditional functional testing tools are always based on recording/playback mode, this need to rely on the reality of system GUI and source code, test activities has to wait to begin until the end of software development life cycle, the cost for fixing bugs is very... With the present and widely accept of test-first concept, model-based testing has be presented. This paper designs an automatic test platform which based on graph theory model. In this platform, System requirement is formulized described based on graph theory using UML, and abstracted into a graph model. This makes it possible to automatically check the requirement correctness according to model checking technique; the generated test cases could also be used in integration test phase.","Automatic test platform; Graph theory model; Test case generation","Automatic test; Functional testing; Graph model; Integration tests; Model based testing; Model-checking techniques; Software development life cycle; Source codes; System requirements; Test case; Test case generation; Theory model; Data mining; Graph theory; Model checking; Program debugging; Software design; Testing; Automatic test pattern generation",,,,,,,,"Clarke, E.M., Model checking[M] (1997) Lecture Notes in Computer Science, pp. 54-56; Heimdahl, M.P., George, D., On the effect of test-suite reduction on automatically generated model-based tests[J] (2007) Automated Software Engineering; Rayadurgam, S., Heimdahl, M.P., Coverage based test-case generation using model checkers[Z] (2001) Proceedings of the 8th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (ECBS), pp. 83-91; Baydeda, S., Gruhn, V., BINTEST - Binary search-based test case generation (2003) Computer Software and Applications Conference (COMPSAC), , IEEE Computer Society Press, 2003; Naslavsky, L., Ziv, H., Towards traceability of model- based testing artifacts (2007) AMOST'07, , July 9-12, London, UK 2007, ACM, 978-1-59593-850-3/07/0007; Vieira, M., Song, X., Matos, G., Storck, S., Tanikella, R., Hasling, B., (2008) ICSE'08, , May 10-18, ACM, 978-1-60558-079-1/08/05; Mlynarski, M., Güldali, B., Späth, M., Gregor engels from design models to test models by means of test ideas (2009) MoDeVVa'09, , October 5, ACM, 978-1-60558-876-6/09/10","Wei, Z.; College of Software and Microelectronics, , Xi'an, 710072, China",,"Int. Assoc. Inf., Cult., Hum. Ind. Techno. (AICIT);Inst. Electr. Electro. Eng., Inc.;Inst. Electr. Electron. Eng.(IEEE), Chengdu Sect.;National Natural Science Foundation of China(NSFC);University of Electronic Science and Technology of China (UESTC);et. al.",,"2nd International Conference on Software Engineering and Data Mining, SEDM 2010","23 June 2010 through 25 June 2010","Chengdu",81677,,9788988678213,,,"English","Int. Conf. Softw. Eng. Data Min., SEDM",Conference Paper,"Final","",Scopus,2-s2.0-77956497655
"Gao F., Zhao L., Liu C.","56420973900;57199020768;57184506500;","GUI testing techniques based on event interactive graph tree model",2010,"2010 IEEE International Conference on Information and Automation, ICIA 2010",,, 5512455,"823","827",,1,"10.1109/ICINFA.2010.5512455","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77955723844&doi=10.1109%2fICINFA.2010.5512455&partnerID=40&md5=8db76b2454cab4d9fe4b1cce9f061c9d","Department of Automation, University of Harbin Engineering, Harbin, Heilongjiang, China","Gao, F., Department of Automation, University of Harbin Engineering, Harbin, Heilongjiang, China; Zhao, L., Department of Automation, University of Harbin Engineering, Harbin, Heilongjiang, China; Liu, C., Department of Automation, University of Harbin Engineering, Harbin, Heilongjiang, China","Aimed at the GUI (graphical user interface) software testing the existence of the complexity and inefficiency issues, propose an Event Interactive Graph tree model. The structural events and system interactive events separate to establish component interactive graph tree and event interactive model, and gives a detailed GUI software modeling methods, and according to the model designed to test coverage criteria and test cases generation method. Finally applied to achieve good results in the actual system has greatly enhanced the quality and efficiency of GUI testing. ©2010 IEEE.","Component tree graph; Event interactive graph; GUI; Software testing","Actual system; Component tree; Event interactive graph; Graph trees; GUI; GUI software; GUI testing; Interactive models; Test cases generation; Test coverage criteria; Computer software selection and evaluation; Graphical user interfaces; Software testing; Testing; Trees (mathematics)",,,,,,,,"Zhu, D., Jianrong, T., Lu, G.-D., Associated with map-based interface to build the software functional testing techniques (2002) Computer Research and Development, 39 (2), pp. 148-152. , J; Memon, A., Banerjee, I., Hashmi, N., DART: A Framework for Regression Testing ""Nightly / daily Builds"" of GUI Applications Proceedings of the International Conference on Software Maintenance (ICSM'03). Washington DC., USA, 2003, pp. 410-419. , C; Song, Y., Su, Z.S., Automated software testing (2001) Applied Science and Technology, 4, pp. 24-25. , J; Jiang, X., Hou, G.-D., Based on functional diagram of the functional Automatic Test Data Generation Technology Research and Implementation (1991) Harbin Engineering University, 3, pp. 330-339. , J; Qing, X., Memon, A.M., Model-Based Testing of Community-Driven Open-Source GUI Applications 22nd IEEE International Conference on Software Maintenance (ICSM'06). Philadelphia, USA, 2006, pp. 145-154. , C; Chen, Y., Liu, Q., Chen, Y.-J., GUI-based regression testing of object-oriented software technology research (2006) Computer Application Research, 5, pp. 49-51. , J; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; Guo, Q., (2006) Flow Diagram of the GUI Event-based Testing [D], , Dalian: Dalian University of Technology","Gao, F.; Department of Automation, , Harbin, Heilongjiang, China; email: gaofeng19@hrbeu.edu.cn",,,,"2010 IEEE International Conference on Information and Automation, ICIA 2010","20 June 2010 through 23 June 2010","Harbin, Heilongjiang",81420,,9781424457021,,,"English","IEEE Int. Conf. Inf. Autom., ICIA",Conference Paper,"Final","",Scopus,2-s2.0-77955723844
"Rauf A., Anwar S., Jaffer M.A., Shahid A.A.","57194106980;57212662725;6602856709;24725536800;","Automated GUI test coverage analysis using GA",2010,"ITNG2010 - 7th International Conference on Information Technology: New Generations",,, 5501493,"1057","1062",,21,"10.1109/ITNG.2010.95","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77955286443&doi=10.1109%2fITNG.2010.95&partnerID=40&md5=7657570dd3a00040e735448a8d669da1","Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan","Rauf, A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Anwar, S., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Jaffer, M.A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan; Shahid, A.A., Department of Computer Science, National University of Computer and Emerging Sciences, Islamabad, Pakistan","A Graphical User Interface (GUI) is a graphical front-end to a software system. A GUI contains graphical objects with certain distinct values which can be used to determine the state of the GUI at any time. Software developing organizations always desire to test the software thoroughly to get maximum confidence about its quality. But this requires gigantic effort to test a GUI application due to the complexity involved in such applications. This problem has led to the automation of GUI testing and different techniques have been proposed for automated GUI Testing. Event-flow graph is a fresh technique being used in the field of automated GUI testing. Just as control-flow graph, another GUI model that represents all possible execution paths in a program, event-flow model, in the same way, represents all promising progressions of events that can be executed on the GUI. Another challenging question in software testing is, ""How much testing is enough?"" As development proceeds, there are fewer measures available that can be used to provide guidance on the quality of an automatic test suite. Genetic algorithm searches for the best possible test parameter combinations that are according to some predefined test criterion. Usually this test criterion corresponds to a ""coverage function"" that measures how much of the automatically generated optimization parameters satisfies the given test criterion. In this paper, we have attempted to exploit the event driven nature of GUI. Based on this nature, we have presented a GUI testing and coverage analysis technique centered on genetic algorithms. © 2010 IEEE.","Automation testing; Coverage analysis; Coverage criterion; Event flow; Genetic algorithm; GUI testing; Test data generation; Test path","Automation testing; Coverage analysis; Coverage criteria; Coverage criterion; GUI testing; Test data generation; Automatic test pattern generation; Automation; Computer software selection and evaluation; Data communication systems; Data flow analysis; Genetic algorithms; Graphic methods; Information technology; Software testing; Test facilities; Testing; Graphical user interfaces",,,,,,,,"Bertolino, Software Testing Forever: Old and New processes and techniques for Validating Today's Applications (2008) LNCS, 5089. , Keynote at 9th International Conference Product-Focused Software process Improvement (PROFES 2008), Monte Porzio Catone, June 2008; Testing: A roadmap, International Conference on Software Engineering (2000) Proceedings of the Conference on the Future of Software Engineering, pp. 61-72. , Limerick, Ireland Year of Publication; Memon, A.M., An event-flow model of GUI-based applications for testing: Research Articles (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157. , http://dx.doi.org/10.1002/stvr.v17:3, Sep. 2007; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2). , November Article No. 7 Year of Publication: 2008 ISSN:1049-331X; Korel, B., Automated software test data generation (1990) IEEE Transactions on Software Engineering, 16 (8), pp. 870-879. , DOI 10.1109/32.57624; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , New York, 13-18 Apr. ACM Press; Vaysburg, B., Tahat, L.H., Korel, B., Dependence Analysis in Reduction of Requirement Based Test Suites (2002) Proceedings of the 2002 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA'02), pp. 107-111; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. dissertation. Department of Computer Science, University of Pittsburgh, Pittsburgh, PA; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , DOI 10.1109/TSE.2005.117; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing Proceedings of the 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, September 10-14, 2001, Vienna, Austria; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , April 13-18, Vancouver, British Columbia, Canada [doi〉10.1145/ 238386.238519]; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interaction (2001) Proceedings of the International Symposium on Software Reliability Engineering, 8-11 November 2001, pp. 54-63. , IEEE Computer Society Press: Piscataway, NJ; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, 8-11 October 2000, pp. 110-121. , IEEE Computer Society Press: Piscataway, NJ; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, May 1999, pp. 257-266. , ACM Press: New York; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test-case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACMSIGSOFT 8th International Mposium on the Foundations of Software Engineering (FSE-8), 8-10 November 2000, pp. 30-39. , ACM Press: New York; White, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, 4-8 November 1996, pp. 350-358. , IEEE Computer Society Press: Piscataway, NJ; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), September 2003, pp. 118-127. , ACM Press: New York; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), September 2001, pp. 256-267. , ACM Press: New York; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution, 17 (1 SPEC. ISS), pp. 27-64. , DOI 10.1002/smr.305; Clarke, J.M., Automated test generation from a behavioural model (1998) Proceedings of Pacific Northwest Software Quality Conference, May 1998, , PNSQC: Portland, OR; Chow Tsun, S., TESTING SOFTWARE DESIGN MODELED by FINITE-STATE MACHINES (1978) IEEE Transactions on Software Engineering, SE-4 (3), pp. 178-187; Esmelioglu, S., Apfelbaum, L., Automated test generation, execution, and reporting (1997) Proceedings of Pacific Northwest, Software Quality Conference, October 1997, , IEEE Press: Piscataway, NJ; Bernhard, P.J., A reduced test suite for protocol conformance testing (1994) ACM Transactions on Software Engineering and Methodology, 3 (3), pp. 201-220; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th Annual International Symposium on Fault-Tolerant Computing (FTCS'97), June 1997, pp. 80-88. , IEEE Computer Society Press: Piscataway, NJ; Jones, B.F., Eyres, D.E., Sthamer, H.-H., A Strategy for using Genetic Algorithms to Automate Branch and Fault-based Testing (1998) Computer Journal, 41 (2), pp. 98-107; Jones, B.F., Sthamer, H.-H., Eyres, D.E., Automatic structural testing using genetic algorithms (1996) Software Engineering Journal, 11 (5), pp. 299-306; Michael, C.C., McGraw, G., Schatz, M.A., Generating software test data by evolution (2001) IEEE Transactions on Software Engineering, 27 (12), pp. 1085-1110. , DOI 10.1109/32.988709; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Journal of Software Testing, Verification and Reliability, 9 (4), pp. 263-282; Tracey, N., Clark, J., Mander, K., McDermid, J., Automated test-data generation for exception conditions (2000) Software Practice and Experience, 30 (1), pp. 61-79; Lu, Y., Yan, D., Nie, S., Wang, C., Development of an Improved GUI Automation Test System Based on Event-Flow Graph International Conference on Computer Science and Software Engineering, Date: 12-14 Dec. 2008; Holland, J.H., (1992) Adaptation in Natural and Artificial Systems, , MIT Press April","Rauf, A.; Department of Computer Science, , Islamabad, Pakistan; email: a.rauf@nu.edu.pk",,"Premier Hall for Advancing Science and Engineering, Inc. (PHASE)",,"7th International Conference on Information Technology - New Generations, ITNG 2010","12 April 2010 through 14 April 2010","Las Vegas, NV",81329,,9780769539843,,,"English","ITNG - Int. Conf. Inf. Technol.: New Generations",Conference Paper,"Final","",Scopus,2-s2.0-77955286443
"El Ariss O., Xu D., Dandey S., Vender B., McClean P., Slator B.","24829151700;7404073618;36238724600;15319856600;7005958110;6602278523;","A systematic capture and replay strategy for testing complex GUI based java applications",2010,"ITNG2010 - 7th International Conference on Information Technology: New Generations",,, 5501494,"1038","1043",,15,"10.1109/ITNG.2010.216","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77955286095&doi=10.1109%2fITNG.2010.216&partnerID=40&md5=950cf3d84a729d0a8b77a40ef2a1fe5a","Department of Computer Science, North Dakota State University, Fargo, ND 58108, United States; National Center for the Protection of the Financial Infrastructure, Dakota State University, Madison, SD 57042, United States; Department of Plant Science, North Dakota State University, Fargo, ND 58108, United States","El Ariss, O., Department of Computer Science, North Dakota State University, Fargo, ND 58108, United States; Xu, D., National Center for the Protection of the Financial Infrastructure, Dakota State University, Madison, SD 57042, United States; Dandey, S., Department of Computer Science, North Dakota State University, Fargo, ND 58108, United States; Vender, B., Department of Computer Science, North Dakota State University, Fargo, ND 58108, United States; McClean, P., Department of Plant Science, North Dakota State University, Fargo, ND 58108, United States; Slator, B., Department of Computer Science, North Dakota State University, Fargo, ND 58108, United States","In this paper we propose a testing strategy that targets Java applications with complex GUI structure and event interactions. We present a capture and replay testing technique which can be employed for different testing purposes: GUI convergence, functional testing and regression testing. The proposed strategy drastically improves, and from different aspects, on standard capture and replay tools. This is done by combining both a model based testing approach with the capture and replay approach and by implementing different automated test oracles. We first model the behavior of the system from the functional specifications or from a trusted version of the system. Tests are then derived from this model to exercise the system in order to ensure correct functional behavior and to cover goal oriented interactions. The case study applies the test strategy on a role-based, multi-user computer game to demonstrate the usefulness and importance of this approach. © 2010 IEEE.","Capture and replay; Decision trees; Function trees; GUI-based testing; Model based testing","Automated test; Capture and replay; Computer game; Functional behaviors; Functional specification; Functional testing; Goal-oriented; Java applications; Model based testing; Multi-user; Regression testing; Role-based; Test strategies; Testing models; Testing strategies; Testing technique; Decision trees; Graphical user interfaces; Information technology; Java programming language; Software testing; Testing; Mathematical models",,,,,,,,"Xie, Q., Memon, A., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. on Softw. Eng. and Methodology, 18 (2), pp. 1-35. , Oct; Hammontree, M., Hendrickson, J., Hensley, B., Integrated data capture and analysis tools for research and testing on graphical user interfaces Proc. of the SIGCHI Conference on Human Factors in Computing Systems, May 1992, pp. 431-432; HP QuickTest Professional Software, , https://h10078.www1.hp.com/cda/hpms/display/main/hpms_content.jsp?zn= bto&cp=1-11-127-24%5e1352_4000_100_; Rational Robot, , http://www-01.ibm.com/software/awdtools/tester/robot/index.html; TestWorks, , http://soft.com/TestWorks/index.html; Ostrand, T., Anodide, A., Foster, H., Andgoradia, T., Visual test development environment for GUI systems (1998) Proc. of the ACM SIGSOFT International Symp. on Softw. Testing and Analysis, pp. 82-92. , ACM Press, NY; Paiva, A., Tillmann, N., Faria, J., Vidal, R., Modeling and testing hierarchical GUIs Proc. of ASM 2005 12th International Workshop on Abstract State Machines. Paris, France, 2005; Paiva, A., Faria, J., Vidal, R., Towards the integration of visual and formal models for GUI testing (2007) Electr. Notes Theor. Comput. Sci., 190, pp. 99-111; Memon, A., Pollack, M., Soffa, M., Using a Goal-driven Approach to Generate Test Cases for GUIs (1999) Proc. of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, New York, NY, May; Memon, A., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. dissertation. University of Pittsburgh, Pittsburgh, PA; Memon, A., Pollack, M., Soffa, M., Coverage criteria for GUI testing Proc. of the 8th European Software Engineering Conference, Sep. 2001, pp. 256-267; Caswell, M., Aravamudhan, V., Wilson, K., (2004) Introduction to JfcUnit, , http://jfcunit.sourceforge.net/; Caswell, M., Aravamudhan, V., Wilson, K., Recording with JfcUnit, , http://jfcunit.sourceforge.net/capturingdataexample.html; Binder, R.V., (1999) Testing Object-Oriented Systems: Models, Patterns, and Tools, , Addison-Wesley Longman Publishing Co., Inc., Boston, MA; Virtual Cell, , http://vcell.ndsu.nodak.edu/","El Ariss, O.; Department of Computer Science, , Fargo, ND 58108, United States; email: omar.elariss@ndsu.edu",,"Premier Hall for Advancing Science and Engineering, Inc. (PHASE)",,"7th International Conference on Information Technology - New Generations, ITNG 2010","12 April 2010 through 14 April 2010","Las Vegas, NV",81329,,9780769539843,,,"English","ITNG - Int. Conf. Inf. Technol.: New Generations",Conference Paper,"Final","",Scopus,2-s2.0-77955286095
"Nguyen D.H., Strooper P., Suess J.G.","56662331100;6603950473;36186070600;","Model-based testing of multiple GUI variants using the GUI test generator",2010,"Proceedings - International Conference on Software Engineering",,,,"24","30",,7,"10.1145/1808266.1808270","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954917633&doi=10.1145%2f1808266.1808270&partnerID=40&md5=fbcfd00b30716d40d2182b15627233df","School of Information Technology and Electrical Engineering, University of Queensland, QLD 4067, Australia","Nguyen, D.H., School of Information Technology and Electrical Engineering, University of Queensland, QLD 4067, Australia; Strooper, P., School of Information Technology and Electrical Engineering, University of Queensland, QLD 4067, Australia; Suess, J.G., School of Information Technology and Electrical Engineering, University of Queensland, QLD 4067, Australia","Many modern application development frameworks separate presentation logic and business logic into layers. However, urrent model-based GUI testing tools do not model and test presentation logic and business logic separately. This paper proposes to separate business logic from the GUI behaviour model. The business logic is modelled using traditional model-based testing tools like Spec Explorer while the presentation logic is recorded by a capture/replay tool. The two parts are connected via a mapping model. This paper proposes a new approach to test multiple GUI variants of an application in a reusable manner and introduces the GUI Test Generator (GTG). GTG is a tool which allows testers to define a mapping from business logic to presentation logic. Based on the mapping, GTG converts business logic test cases into presentation logic test cases. GTG is particularly useful for testing applications with a single business logic core and multiple variants of the user interface. This paper introduces the architecture of GTG and presents a case study for testing two different front-ends of an email client. Copyright 2010 ACM.","Business logic layer; GUI testing; Model-based testing; Spec explorer","Behaviour models; Business logic; Business logic layers; Capture/replay; Email clients; GUI testing; Mapping model; Model based testing; Model-based; Model-based testing tool; Modern applications; Multiple variants; New approaches; Test case; Computer software reusability; Mapping; Software engineering; Testing; Graphical user interfaces",,,,,,,,"Hoffer, J.A., George, J.F., Valacich, J.S., (1999) Modern System Analysis and Design, , Addison-Wesley; Li, K., Wu, M., (2004) Effective GUI Test Automation: Developing An Automated GUI Testing Tool, , Sybex; Utting, M., Legeard, B., (2007) Practical Model-based Testing, , Morgan Kaufmann; Mirosoft Research, , http://research.microsoft.com/specexplorer, accessed 10 October 2008; Lalwani, T., (2009) QuickTest Professional Unplugged, KnowledgeInbox; Nguyen, D.H., Strooper, P., Suess, J.G., Automated functionality testing through GUIs (2010) Proceedings of Australasian Computer Science Conference; Memon, A., (2001) A Comprehensive Framework for Testing GUI, , Ph.D dissertation, Department of Computer Science, University of Pittsburgh; Memon, A., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI (2003) Proceedings of 8th European Software Engineering Conference, pp. 256-267; Memon, A., Automated test oracles for GUI (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering, 25 (6), pp. 30-39; Hackner, D., Memon, A., Test case generator for GUITAR (2008) Demonstration Track Paper at the 30th International Conference on Software Engineering; Paiva, A., Towards the integration of visual and formal models for GUI testing (2007) Proceedings of European Joint Conferences on Theory and Practice of Software/Model Based Testing Workshop; Paiva, A., Faria, J., Tillmann, N., A model-to- implementation mapping tool for automated model-based GUI testing (2005) Proceedings of 7th Conference on Formal Engineering Methods, pp. 450-464; Andrews, A., Offutt, J., Alexander, R.T., Testing web applications by modeling with FSMs (2005) Software and Systems Modeling, pp. 326-345; Kervinen, A., Maunumaa, M., Pääkkönen, T., Model- based testing through a GUI (2006) Proceedings of Formal Approaches to Testing of Softwares Conference; Kervinen, A., (2008) Towards Practical Model-based Testing: Improvements in Modelling and Test Generation, , Ph.D dissertation, Department of Software Systems, Tampere University of Technology; Nguyen, D.H., http://www.itee.uq.edu.au/~ducnh/, accessed 10th December 2009; SQA Forum, , http://www.sqaforums.com/ubbthreads.php, accessed 10 December 2009","Nguyen, D. H.; School of Information Technology and Electrical Engineering, , QLD 4067, Australia; email: ducnh@itee.uq.edu.au",,"Computer Society (IEEE-CS);ACM Special Interest Group on Software Engineering (SIGSOFT)",,"5th Workshop on Automation of Software Test, AST 2010, in Conjunction with the 32nd ACM/IEEE International Conference on Software Engineering, ICSE 2010","2 May 2010 through 8 May 2010","Cape Town",81178,02705257,9781605589701,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-77954917633
"Jovic M., Adamoli A., Zaparanuks D., Hauswirth M.","23985192500;35174281700;23986618700;6701681841;","Automating performance testing of interactive Java applications",2010,"Proceedings - International Conference on Software Engineering",,,,"8","15",,17,"10.1145/1808266.1808268","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954894910&doi=10.1145%2f1808266.1808268&partnerID=40&md5=64362853edd73d817e9671c4f0f2097c","Faculty of Informatics, University of Lugano, Switzerland","Jovic, M., Faculty of Informatics, University of Lugano, Switzerland; Adamoli, A., Faculty of Informatics, University of Lugano, Switzerland; Zaparanuks, D., Faculty of Informatics, University of Lugano, Switzerland; Hauswirth, M., Faculty of Informatics, University of Lugano, Switzerland","Interactive applications with graphical user interfaces are prevalent in today's environment: Everybody with access to any kind of computer constantly uses them. A significant body of prior work has devised approaches for automating the functional testing of such applications. However, no such work exists for automatically testing their performance. Performance testing imposes additional requirements upon GUI test automation tools: the tools have to be able to replay complex interactive sessions, and they have to avoid perturbing the application's performance. We study the feasibility of using five Java GUI capture & replay tools for GUI performance test automation. Besides confirming the severity of the previously known GUI element identification problem, we also identify a related problem, the temporal synchronization problem, which is of increasing importance for GUI applications that use timer-driven activity. We find that most of the tools we study have severe limitations when used for recording and replaying realistic sessions of real-world Java applications, and that all of them suffer from the temporal synchronization problem. However, we find that the most reliable tool, Pounder, causes only limited perturbation, and thus can be used to automate performance testing. Besides the significance of our findings to GUI performance testing, the results are also relevant to capture & replay-based functional GUI test automation approaches. Copyright 2010 ACM.",,"Functional testing; GUI applications; Identification problem; Interactive applications; Interactive Java applications; Interactive session; Java applications; Performance testing; Performance tests; Real-world; Temporal synchronization; Test Automation; Test automation tool; Automation; Computer software; Interfaces (computer); Java programming language; Testing; Graphical user interfaces",,,,,,,,"Alsmadi, I., The utilization of user sessions in testing (2008) ICIS '08: Proceedings of the Seventh IEEE/ACIS International Conference on Computer and Information Science (icis 2008), pp. 581-585. , Washington, DC, USA, IEEE Computer Society; Brooks, P.A., Memon, A.M., Automated gui testing guided by usage profiles (2007) ASE '07: Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering, pp. 333-342. , New York, NY, USA, ACM; De Oliveira, D.A.S., Crandall, J.R., Wassermann, G., Wu, S.F., Su, Z., Chong, F.T., Execrecorder: Vm-based full-system replay for attack analysis and system recovery (2006) ASID '06: Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability, pp. 66-71. , New York, NY, USA, ACM; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) ICSE '09: Proceedings of the 2009 IEEE 31st International Conference on Software Engineering, pp. 408-418. , Washington, DC, USA, IEEE Computer Society; Jovic, M., Hauswirth, M., Measuring the performance of interactive applications with listener latency profiling (2008) PPPJ '08: Proceedings of the 6th International Symposium on Principles and Practice of Programming in Java, pp. 137-146. , New York, NY, USA, ACM; Liu, H., Jin, H., Liao, X., Hu, L., Yu, C., Live migration of virtual machine based on full system trace and replay (2009) HPDC '09: Proceedings of the 18th ACM International Symposium on High Performance Distributed Computing, pp. 101-110. , New York, NY, USA, ACM; Mcmaster, S., Memon, A.M., An extensible heuristic-based framework for gui test case maintenance (2009) TESTBEDS '09: Proceedings of the First International Workshop on TESTing Techniques & Experimentation Benchmarks for Event-driven Software; Memon, A.M., Automatically repairing event sequence-based gui test suites for regression testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 1-36; Narayanasamy, S., Pokam, G., Calder, B., Bugnet: Continuously recording program execution for deterministic replay debugging (2005) ISCA '05: Proceedings of the 32nd Annual International Symposium on Computer Architecture, pp. 284-295. , Washington, DC, USA, IEEE Computer Society; Ronsse, M., Bosschere, K.D., Recplay: A fully integrated practical record/replay system (1999) ACM Trans. Comput. Syst., 17 (2), pp. 133-152; Ronsse, M., Bosschere, K.D., Christiaens, M., De Kergommeaux, J.C., Kranzlmüller, D., Record/replay for nondeterministic program executions (2003) Commun. ACM, 46 (9), pp. 62-67; Steven, J., Chandra, P., Fleck, B., Podgurski, A., JRapture: A Capture/Replay tool for observation-based testing (2000) SIGSOFT Softw. Eng. Notes, 25 (5), pp. 158-167","Jovic, M.; Faculty of Informatics, Switzerland; email: milan.jovic@usi.ch",,"Computer Society (IEEE-CS);ACM Special Interest Group on Software Engineering (SIGSOFT)",,"5th Workshop on Automation of Software Test, AST 2010, in Conjunction with the 32nd ACM/IEEE International Conference on Software Engineering, ICSE 2010","2 May 2010 through 8 May 2010","Cape Town",81178,02705257,9781605589701,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77954894910
"Bertolini C., Mota A., Aranha E., Ferraz C.","56274935100;8886017800;18433677500;23484656200;","GUI testing techniques evaluation by designed experiments",2010,"ICST 2010 - 3rd International Conference on Software Testing, Verification and Validation",,, 5477081,"235","244",,10,"10.1109/ICST.2010.41","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954529360&doi=10.1109%2fICST.2010.41&partnerID=40&md5=dea9af5bf227b86bc697219f631ab1a1","Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; Federal University of Rio Grande do Norte, P.O. Box 1524, 59072-970, Rio Grande do Norte-RN, Brazil; Statistics Department, Federal University of Pernambuco, 50730-700, Av. Prof. Luiz Freire, s/n, Recife-PE, Brazil","Bertolini, C., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; Mota, A., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; Aranha, E., Federal University of Rio Grande do Norte, P.O. Box 1524, 59072-970, Rio Grande do Norte-RN, Brazil; Ferraz, C., Statistics Department, Federal University of Pernambuco, 50730-700, Av. Prof. Luiz Freire, s/n, Recife-PE, Brazil","Industry uses different testing techniques for test case generation and execution. But in general no systematic evaluation is performed to identify which technique is better (for instance, to find bugs faster). This paper presents a statistical assessment of two GUI testing techniques, BxT and DH, which are used on Motorola phone applications. These techniques test applications by pressing certain phone keys, from certain screens and during some amount of time. We consider three exploration parameters for each technique in our design and analysis of experiments: Driven determines whether a test case always starts from a single initial state (screen) or set of initial states; KeyProb associates an occurrence probability for each phone key; and SizeTC refers to the number of steps a test can have (a fourth parameter is the Technique itself). As conclusions, we show that BxT is better than DH and the SizeTC and the Technique parameters and the combination Driven *SizeTC have significant effects on the time to find a bug. © 2010 IEEE.",,"Design and analysis; Designed experiments; GUI testing; Industry use; Initial state; Motorola; Occurrence probability; Phone applications; Statistical assessment; Systematic evaluation; Test applications; Test case; Test case generation; Testing technique; Computer software selection and evaluation; Graphical user interfaces; Probability density function; Software testing; Telephone sets; Testing; Verification",,,,,,,,"Bertolini, C., Peres, G., D'Amorim, M., Mota, A., An empirical evaluation of automated black box testing techniques for crashing GUIs (2009) ICST 2009, pp. 21-30. , IEEE, Apr; Dwyer, M.B., Elbaum, S., Person, S., Purandare, R., Parallel randomized state-space search (2007) ICSE, pp. 3-12. , Washington, DC, USA IEEE Computer Society; Easterbrook, S., (2007) Empirical Research Methods for Software Engineering, , Springer; Esipchuk, I., Validov, D., PTF-based test automation for JAVA applications on mobile phones (2006) Proceedings of the IEEE 10th International Symposium on Consumer Electronics (ISCE), pp. 1-3; Frankl, P.G., Weyuker, E.J., An analytical comparison of the fault-detecting ability of data flow testing techniques (1993) ICSE, pp. 415-424; Pelánek, R., Hanžl, T., Černá, I., Brim, L., Enhancing random walk state space exploration (2005) FMICS, pp. 98-105. , New York, NY, USA ACM; Sall, J., Creighton, L., Lehman, A., (2007) JMP Start Statistics: A Guide to Statistics and Data Analysis Using Jmp, , Fourth Edition. SAS Publishing; Shull, F.J., Carver, J.C., Vegas, S., Juristo, N., The role of replications in empirical software engineering (2008) Empirical Softw. Engg., 13 (2), pp. 211-218; Sjoberg, D.I., Hannay, J.E., Hansen, O., Kampenes, V.B., Karahasanovic, A., Liborg, N.-K., Rekdal, A.C., A survey of controlled experiments in software engineering (2005) IEEE Transactions on Software Engineering, 31 (9), pp. 733-753; Sjoberg, D.I.K., Dyba, T., Jorgensen, M., The future of empirical methods in software engineering research FOSE '07: 2007 Future of Software Engineering, pp. 358-378. , Washington, DC, USA, 2007. IEEE Computer Society; Steven, J., Chandra, P., Fleck, B., Podgurski, A., JRapture: A capture/replay tool for observation-based testing (2000) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), pp. 158-167; Van Solingen, R., Berghout, E., Integrating goal-oriented measurement in industrial software engineering: Industrial experiences with and additions to the goal/question/metric method (GQM) (2001) IEEE METRICS, pp. 246-258; Weyuker, E.J., Evaluation techniques for improving the quality of very large software systems in a cost-effective way (1999) Journal of Systems and Software, 47 (2-3), pp. 97-103; Weyuker, E.J., Empirical studies as a basis for technology transfer (2006) Empirical Software Engineering Issues, pp. 125-127; Weyuker, E.J., Comparing the effectiveness of testing techniques (2008) Formal Methods and Testing, pp. 271-291. , Lecture Notes in Computer Science; Weyuker, E.J., Weiss, S.N., Hamlet, R.G., Comparison of program testing strategies (1991) Symposium on Testing, Analysis, and Verification, pp. 1-10; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) ICSE, pp. 396-405. , Washington, DC, USA IEEE Computer Society; Zelkowitz, M.V., An update to experimental models for validating computer technology (2009) J. Syst. Softw., 82 (3), pp. 373-376","Bertolini, C.; Center of Informatics, P.O. Box 7851, 50732-970, Recife-PE, Brazil; email: cbertolini@cin.ufpe.br",,"CNRS;Digiteo;Institut Telecom;Google;Groupe de Recherche GPL",,"3rd International Conference on Software Testing, Verification and Validation, ICST 2010","7 April 2010 through 9 April 2010","Paris",81067,,9780769539904,,,"English","ICST - Int. Conf. Softw. Test., Verif. Validation",Conference Paper,"Final","",Scopus,2-s2.0-77954529360
"Belli F., Linschulte M., Budnik C.J., Stieber H.A.","57200611344;24829072900;8958239900;6508157638;","Fault detection likelihood of test sequence length",2010,"ICST 2010 - 3rd International Conference on Software Testing, Verification and Validation",,, 5477061,"402","411",,3,"10.1109/ICST.2010.51","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954523114&doi=10.1109%2fICST.2010.51&partnerID=40&md5=c20de4a2e1bb35011642ca959b281fea","University of Paderborn, Germany; Siemens Corporation, Corporate Research, Princeton, NJ 08540, United States; University of Applied Sciences, Nuremberg, Germany","Belli, F., University of Paderborn, Germany; Linschulte, M., University of Paderborn, Germany; Budnik, C.J., Siemens Corporation, Corporate Research, Princeton, NJ 08540, United States; Stieber, H.A., University of Applied Sciences, Nuremberg, Germany","Testing of graphical user interfaces is important due to its potential to reveal faults in operation and performance of the system under consideration. Most existing test approaches generate test cases as sequences of events of different length. The cost of the test process depends on the number and total length of those test sequences. One of the problems to be encountered is the determination of the test sequence length. Widely accepted hypothesis is that the longer the test sequences, the higher the chances to detect faults. However, there is no evidence that an increase of the test sequence length really affect the fault detection. This paper introduces a reliability theoretical approach to analyze the problem in the light of real-life case studies. Based on a reliability growth model the expected number of additional faults is predicted that will be detected when increasing the length of test sequences. © 2010 IEEE.","Event sequence graphs; Graphical user interfaces; Software reliability; Software testing","Event sequence graphs; Reliability growth model; Test case; Test process; Test sequence; Theoretical approach; Total length; Computer software selection and evaluation; Fault detection; Graphical user interfaces; Quality assurance; Software testing; Testing; Verification; Software reliability",,,,,,,,"Amman, P., Offutt, J., (2008) Introduction to Software Testing, , Cambridge, UK: Cambridge University Press; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proc. ISSRE'01, IEEE Computer Society, pp. 34-43; Belli, F., Budnik, C.J., Test minimization for HumanComputer interaction (2007) Applied Intelligence, 26 (2), pp. 161-174; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study (2006) Softw. Test. Verif. Reliab, 16 (1), pp. 3-32; Belli, F., Linschulte, M., On negative tests of web applications (2007) Annals of Mathematics, Computing & Teleinformatics, 1 (5), pp. 44-56; Belli, F., Jedrzejowicz, P., Software reliability - Modelling and optimization (1988) Journal of Information Processing and Cybernetics - EIK, 9, pp. 133-141; Birolini, A., (2007) Reliability Engineering, , 5th ed., Springer, Berlin; Bochmann, G.V., Petrenko, A., Protocol testing: Review of methods and relevance for software testing (1994) Softw. Eng. Notes, ACM SIGSOFT, pp. 109-124; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Trans. on Software Engineering, 4 (3), pp. 178-187; Cox, D.R., Isham, V., (1992) Point Processes, , Chapman Hall; Korel, B., Automated test data generation for programs with procedures (1996) Proc. ISSTA '96, pp. 209-215; Lyu, M., (1996) Handbook of Software Reliability Engineering, , McGraw-Hill, New York; Mathur, A., (2008) Foundations of Software Testing, , Addison-Wesley Longman, Amsterdam; Meeker, W.Q., Escobar, L.A., (1998) Statistical Methods for Reliability Data, , Wiley, New York; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Reliab., 17 (3), pp. 137-157; Memon, A.M., Pollack, M., Soffa, E.M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Musa, J.D., Iannino, A., Okumoto, K., (1987) Software Reliability: Measurement, Prediction, Application, , McGraw-Hill, New York; Sabnani, K., Dahbura, A., A protocol test generation procedure (1998) Computer Networks and ISDN Systems, 15, pp. 285-297. , North-Holland; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proc. 27th Int. Symp. Fault-Tolerant Computing FTCS, pp. 80-88; Stieber, H.A., A family of software reliability growth models (2007) Proc. COMPSAC'07, Workshop Papers, pp. 217-224; Tai, K., Lei, Y., A test generation strategy for pairwise testing (2002) IEEE Trans. on Softw. Eng., 28 (1), pp. 109-111; Memon, A., Xie, Q., Empirical evaluation of the fault-detection effectiveness of smoke regression test cases for GUI-based software (2004) Proc. of the 20th IEEE International Conference on Software Maintenance, pp. 8-17; Isik's System for Enterprise-Level Web-Centric Tourist Applications, , http://www.iselta.com, URL; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proc. 8th European Software Engineering Conference Held Jointly with 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267; http://www.scientific.de, Maple, URL","Belli, F.; University of PaderbornGermany; email: belli@upb.de",,"CNRS;Digiteo;Institut Telecom;Google;Groupe de Recherche GPL",,"3rd International Conference on Software Testing, Verification and Validation, ICST 2010","7 April 2010 through 9 April 2010","Paris",81067,,9780769539904,,,"English","ICST - Int. Conf. Softw. Test., Verif. Validation",Conference Paper,"Final","",Scopus,2-s2.0-77954523114
"Heiskanen H., Jääskeläinen A., Katara M.","36166742400;24923055000;7801543558;","Debug support for model-based GUI testing",2010,"ICST 2010 - 3rd International Conference on Software Testing, Verification and Validation",,, 5477102,"25","34",,5,"10.1109/ICST.2010.36","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954520136&doi=10.1109%2fICST.2010.36&partnerID=40&md5=500b5bf7abbb9c29ac460b0e7302a963","Department of Software Systems, Tampere University of Technology, Finland","Heiskanen, H., Department of Software Systems, Tampere University of Technology, Finland; Jääskeläinen, A., Department of Software Systems, Tampere University of Technology, Finland; Katara, M., Department of Software Systems, Tampere University of Technology, Finland","The fact that model-based testing has not yet attained a high rate of adoption in industry can in part be attributed to the perceived difficulty of debugging long error traces often produced by the online version of this technology. Given the extensive manual labor commonly involved in the debugging phase, automating parts of this process could yield considerable productivity benefits. This paper presents viable debugging strategies applicable in model-based graphical user interface testing, from which two methods were refined and experimented with. The first is based on superimposing log-derived, synchronized subtitles on recorded test run footage, while the second addresses error trace shortening. The results obtained from applying these methods in real-life case studies demonstrate the practical utility of these methods. © 2010 IEEE.",,"GUI testing; High rate; Manual labors; Model based testing; Model-based; Online versions; Computer software selection and evaluation; Graphical user interfaces; Software testing; Verification",,,,,,,,"Kaner, C., Bach, J., Pettichord, B., (2001) Lessons Learned in Software Testing: A Context-Driven Approach, , Wiley; Utting, M., Legeard, B., (2007) Practical Model-Based Testing -A Tools Approach, , Morgan Kaufmann; Robinson, H., Obstacles and opportunities for model-based testing in an industrial software environment (2003) Proc. 1st European Conference on Model-Driven Software Engineering (2003), pp. 118-127. , Nuremberg, Germany Dec; Hartman, A., (2010) AGEDIS Project Final Report, 2004, , http://www.agedis.de/documents/FinalPublicReport(D1.6).PDF, Available at Cited Jan; Veanes, M., Campbell, C., Grieskamp, W., Schulte, W., Tillmann, N., Nachmanson, L., Model-based testing of object-oriented reactive systems with spec explorer Formal Methods and Testing, (4949), pp. 39-76. , ser. LNCS, 2008; (2010) Conformiq Qtronic Homepage, , http://www.conformiq.com, Conformiq Software At URL Cited Jan; Jaaskelainen, A., Katara, M., Kervinen, A., Heiskanen, H., Maunumaa, M., Pääkkönen, T., Model-based testing service on the web (2008) Proc. TESTCOM/FATES 2008, (5047), pp. 38-53. , ser. LNCS. Springer Jun; Agrawal, H., (1992) Towards Automatic Debugging of Computer Programs, , Ph.D. dissertation, Purdue University, West Lafayette IN, USA; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Transactions on Software Engineering, 28, pp. 183-200; Katara, M., Kervinen, A., Making model-based testing more agile: A use case driven approach (2007) Proc. Haifa Verification Conference 2006, (4383). , ser. LNCS Springer; Buwalda, H., (2003) Action Figures, pp. 42-47. , STQE Magazine, March/April; Leitner, A., Oriol, M., Zeller, A., Ciupa, I., Meyer, B., Efficient unit test case minimization (2007) Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering, pp. 417-420. , Atlanta, Georgia, USA November; Whitaker, A., Cox, R.S., Gribble, S.D., Configuration debugging as search: Finding the needle in the haystack (2004) OSDI'04: Proceedings of the 6th Conference on Symposium on Operating Systems Design & Implementation, pp. 6-6. , Berkeley, CA, USA: USENIX Association; Chang, K.-H., Bertacco, V., Markov, I.L., Simulation-based bug trace minimization with BMC-based refinement (2005) ICCAD '05: Proceedings of the 2005 IEEE/ACM International Conference on Computer-Aided Design, pp. 1045-1051. , Washington, DC, USA: IEEE Computer Society; (2010) MPlayer Homepage, , http://www.mplayerhq.hu/, Cited Jan; Jääskeläinen, A., Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Takala, T., Virtanen, H., Automatic GUI test generation for smart phone applications - An evaluation (2009) Proc. of the Software Engineering in Practice Track of the 31st International Conference on Software Engineering (ICSE 2009), pp. 112-122. , IEEE Computer Society companion volume","Heiskanen, H.; Department of Software Systems, Finland; email: henri.heiskanen@tut.fi",,"CNRS;Digiteo;Institut Telecom;Google;Groupe de Recherche GPL",,"3rd International Conference on Software Testing, Verification and Validation, ICST 2010","7 April 2010 through 9 April 2010","Paris",81067,,9780769539904,,,"English","ICST - Int. Conf. Softw. Test., Verif. Validation",Conference Paper,"Final","",Scopus,2-s2.0-77954520136
"Sinnig D., Khendek F., Chalin P.","16646958000;6602511025;6508317879;","A formal model for generating integrated functional and user interface test cases",2010,"ICST 2010 - 3rd International Conference on Software Testing, Verification and Validation",,, 5477079,"255","264",,3,"10.1109/ICST.2010.56","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954498651&doi=10.1109%2fICST.2010.56&partnerID=40&md5=71d153d9db69312cfb695b0550dcc750","Department of Software Engineering, Institute of Computer Science, University of Rostock, Germany; Faculty of Engineering and Computer Science, Concordia University, Montreal, QC, Canada","Sinnig, D., Department of Software Engineering, Institute of Computer Science, University of Rostock, Germany; Khendek, F., Faculty of Engineering and Computer Science, Concordia University, Montreal, QC, Canada; Chalin, P., Faculty of Engineering and Computer Science, Concordia University, Montreal, QC, Canada","Black box testing focuses on the core functionality of the system, while user interface testing is concerned with details of user interactions. Functional and user interface test cases are usually generated from two distinct system models, one for the functionality and one for the user interface. As a result, test cases derived from either model capture only partial system behavior and as such, are inadequate for testing full system behavior. We propose a method for formally integrating the model for the system functionality and the model for the user interface. The resulting composite model is then used to generate more complete test cases, capturing detailed user interactions as well as secondary system interactions. In this paper we employ use cases for modeling system functionality, and task models for describing user interfaces. © 2010 IEEE.","Functional testing; Labeled transition systems; Task models; Use case models; User interface testing","Functional testing; Labeled transition systems; Task models; Use case model; Use case models; Computer software selection and evaluation; Model structures; Software testing; User interfaces; Verification; Mathematical models",,,,,,,,"Briand, L., Labiche, Y., A UML-based approach to system testing (2001) Proc. of UML 2001 - The Unified Modeling Language, Modeling Languages, Concepts, and Tools, pp. 194-208. , Toronto, Canada; Fröhlich, P., Link, J., Automated test case generation from dynamic models (2000) Proc. of ECOOP'00, Sophia Antipolis and Cannes, pp. 472-492. , France; Nebut, C., Fleurey, F., Le Traon, Y., Jezequel, J., Automatic test generation:A use case driven approach (2006) IEEE Trans. Softw. Eng., 32 (3), pp. 140-155; Benz, S., Combining test case generation for component and integration testing (2007) Proc. of AMOST'07, pp. 23-33. , London, UK; Paternò, F., (2000) Model-Based Design and Evaluation of Interactive Applications, , Springer; Silva, J., Campos, J.C., Paiva, A., Model-based user interface testing with spec explorer and ConcorTaskTrees (2007) Proc. of Formal Methods for Interactive Systems, , Macau, China; Brinksma, E., Scollo, G., LOTOS specifications, their implementations, and their tests (1987) Proc. of IFIP Workshop Protocol Specification, Testing, and Verification VI, pp. 349-360. , Steenbergen; White, L., Almezen, H., Sastry, S., Firewall regression testing of GUI sequences and their interactions (2003) Proc. of International Conference on Software Maintenance, pp. 398-410. , Amsterdam, NL, IEEE Computer Society; Broy, M., Jonsson, B., Katoen, J.-P., Leucker, M., Pretschner, A., (2005), Model-Based Testing of Reactive Systems, Springer; Lee, D., Yannakakis, Principles and methods of testing finite-state machines-A survey (1996) Proceedings of IEEE, 84 (8), pp. 1089-1123; Sinnig, D., (2008) Use Case and Task Models: Formal Unification and Integrated Development Methodology, , PhD thesis in Department of Computer Science and Software Engineering, Concordia University, Montreal; Sinnig, D., Chalin, P., Khendek, F., LTS semantics for use case models (2009) Proc. of ACM - SAC 2009, , Honolulu, HI; Jacobson, I., (1992) Object-Oriented Software Engineering: A use Case Driven Approach, , ACM Press, New York; Cockburn, A., (2001) Writing Effective use Cases, Addison-Wesley, , Boston; Larman, C., (2004) Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development, , (3rd Edition), Prentice Hall PTR; Selic, B., The pragmatics of model-driven development (2003) IEEE Software, 20 (5), pp. 19-25; Butler, G., Grogono, P., Khendek, F., A Z Specification of use cases (1998) Proc. of APSEC 1998, pp. 94-101; Barnett, M., Grieskamp, W., Schulte, W., Tillmann, N., Veanes, M., Validating use-cases with the AsmL test tool (2003) Proc. of Quality Software 2003, pp. 238-246; Mizouni, R., Salah, A., Kolahi, S., Dssouli, R., Merging partial system behaviours: Composition of use-case automata (2007) Software, IET, 1 (4), pp. 143-160; Sinnig, D., Chalin, P., Khendek, F., Consistency between task models and use cases (2007) Proc. of DSV-IS 2007, , Salamanca; Sinnig, D., Chalin, P., Khendek, F., Common semantics for use cases and task models (2007) Proc. of Integrated Formal Methods, pp. 579-598. , Oxford, England; Souchon, N., Limbourg, Q., Vanderdonckt, J., Task modelling in multiple contexts of use (2002) Proc. of DSV-IS, pp. 59-73. , Rostock, Germany; Card, S., Moran, T.P., Newell, A., (1983) The Psychology of Human Computer Interaction; Dittmar, A., Forbrig, F., Stoiber, S., Stary, C., Tool support for task modelling - A constructive exploration (2004) Proc. of DSV-IS 2004, , July; Annett, J., Duncan, K.D., (1967) Task Analysis and Training Design, in Occupational Psychology, 41, pp. 211-221; Sinnig, D., Wurdel, M., Forbrig, P., Chalin, P., Khendek, F., Practical extensions for task models (2007) Proc. of TaMoDia '07, , Toulouse, France Springer; (1987) ISO 8807: LOTOS - A Formal Description Technique Based on the Temporal Ordering of Observational Behaviour, , Interactions, I.-I. P. S.-O. S; Keller, R., Formal verification of parallel programs (1976) Communications of the ACM, 19, pp. 561-572; Kassel, N., An approach to automate test case generation from structured use cases (2006) Thesis in Computer Science, , Clemson University, Clemson, South Carolina; Uchitel, S., Chechik, M., Merging partial behavioural models (2004) SIGSOFT Softw. Eng. Notes, 29 (6), pp. 43-52","Sinnig, D.; Department of Software Engineering, Germany; email: dasin@informatik.uni-rostock.de",,"CNRS;Digiteo;Institut Telecom;Google;Groupe de Recherche GPL",,"3rd International Conference on Software Testing, Verification and Validation, ICST 2010","7 April 2010 through 9 April 2010","Paris",81067,,9780769539904,,,"English","ICST - Int. Conf. Softw. Test., Verif. Validation",Conference Paper,"Final","",Scopus,2-s2.0-77954498651
"Huang S., Cohen M.B., Memon A.M.","56140320500;8719004300;35599876500;","Repairing GUI test suites using a genetic algorithm",2010,"ICST 2010 - 3rd International Conference on Software Testing, Verification and Validation",,, 5477078,"245","254",,71,"10.1109/ICST.2010.39","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954494484&doi=10.1109%2fICST.2010.39&partnerID=40&md5=769ba2ac254739e2b40786e470ba0007","Dept. of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; Dept. of Computer Science, Institute for Advanced Computer Studies, University of Maryland, College Park, MD 20742, United States","Huang, S., Dept. of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; Cohen, M.B., Dept. of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE 68588-0115, United States; Memon, A.M., Dept. of Computer Science, Institute for Advanced Computer Studies, University of Maryland, College Park, MD 20742, United States","Recent advances in automated functional testing of Graphical User Interfaces (GUIs) rely on deriving graph models that approximate all possible sequences of events that may be executed on the GUI, and then use the graphs to generate test cases (event sequences) that achieve a specified coverage goal. However, because these models are only approximations of the actual event flows, the generated test cases may suffer from problems of infeasibility, i.e., some events may not be available for execution causing the test case to terminate prematurely. In this paper we develop a method to automatically repair GUI test suites, generating new test cases that are feasible. We use a genetic algorithm to evolve new test cases that increase our test suite's coverage while avoiding infeasible sequences. We experiment with this algorithm on a set of synthetic programs containing different types of constraints and for test sequences of varying lengths. Our results suggest that we can generate new test cases to cover most of the feasible coverage and that the genetic algorithm outperforms a random algorithm trying to achieve the same goal in almost all cases. © 2010 IEEE.",,"Automated functional testing; Event sequence; Graph model; Random algorithms; Test case; Test sequence; Computer software selection and evaluation; Genetic algorithms; Graphical user interfaces; Repair; Software testing; Testing; Verification; Automatic test pattern generation",,,,,,,,"Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Transactions on Software Engineering and Methodology, pp. 1-35; Tuglular, T., Muftuoglu, C.A., Kaya, O., Belli, F., Linschulte, M., GUI-based testing of boundary overflow vulnerability (2009) Annual International Computer Software and Applications Conference, pp. 539-544; Brooks, P., Robinson, B., Memon, A.M., An initial characterization of industrial graphical user interface systems (2009) International Conference on Software Testing, Verification and Validation, pp. 11-20; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) International Conference on Software Engineering, pp. 396-405; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007) International Conference on Automated Software Engineering, pp. 405-408; Yuan, X., Cohen, M.B., Memon, A.M., GUI interaction testing: Incorporating event context (2010) IEEE Transactions on Software Engineering, , to appear; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology, pp. 1-36; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Software Testing, Verification and Reliability, 9 (3), pp. 263-282; Arcuri, A., Yao, X., A novel co-evolutionary approach to automatic software bug fixing (2008) IEEE Congress on Evolutionary Computation, pp. 162-168; Weimer, W., Nguyen, T., Le Goues, C., Forrest, S., Automatically finding patches using genetic programming (2009) International Conference on Software Engineering, pp. 364-374; Robinson, B., White, L., Testing of user-configurable software systems using firewalls (2008) International Symposium on Software Reliability Engineering, pp. 177-186; Li, P., Huynh, T., Reformat, M., Miller, J., A practical approach to testing GUI systems (2007) Empirical Software Engineering, 12 (4), pp. 331-357; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Cohen, M.B., Colbourn, C.J., Gibbons, P.B., Mugridge, W.B., Constructing test suites for interaction testing (2003) International Conference on Software Engineering, pp. 38-48; Korel Bogdan, Automated software test data generation (1990) IEEE Transactions on Software Engineering, 16 (8), pp. 870-879. , DOI 10.1109/32.57624; McMinn, P., Search-based software test data generation: A survey (2004) Software Testing, Verification and Reliability, 14 (2), pp. 105-156; Marchetto, A., Tonella, P., Search-based testing of ajax web applications (2009) International Symposium on Search Based Software Engineering, pp. 3-12; Stardom, J., (2001) MEtaheuristics and the Search for Covering and Packing Arrays, , Master's thesis, Simon Fraser University; Garvin, B.J., Cohen, M.B., Dwyer, M.B., An improved meta-heuristic search for constrained interaction testing (2009) International Symposium on Search Based Software Engineering, pp. 13-22; (2009) GUITAR - A GUI Testing FrAmewoRk, , http://guitar.sourceforge.net, website","Huang, S.; Dept. of Computer Science and Engineering, , Lincoln, NE 68588-0115, United States; email: shuang@cse.unl.edu",,"CNRS;Digiteo;Institut Telecom;Google;Groupe de Recherche GPL",,"3rd International Conference on Software Testing, Verification and Validation, ICST 2010","7 April 2010 through 9 April 2010","Paris",81067,,9780769539904,,,"English","ICST - Int. Conf. Softw. Test., Verif. Validation",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77954494484
"Roest D., Mesbah A., Van Deursen A.","36167097800;17345931800;7003969355;","Regression testing Ajax applications: Coping with dynamism",2010,"ICST 2010 - 3rd International Conference on Software Testing, Verification and Validation",,, 5477090,"127","136",,44,"10.1109/ICST.2010.59","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954489841&doi=10.1109%2fICST.2010.59&partnerID=40&md5=b1d55d09acfbb9486e49e33777ae1285","Delft University of Technology, Netherlands","Roest, D., Delft University of Technology, Netherlands; Mesbah, A., Delft University of Technology, Netherlands; Van Deursen, A., Delft University of Technology, Netherlands","There is a growing trend to move desktop applications towards the web using advances made in web technologies such as AJAX. One common way to provide assurance about the correctness of such complex and evolving systems is through regression testing. Regression testing classical web applications has already been a notoriously daunting task because of the dynamism in web interfaces. AJAX applications pose an even greater challenge since the test case fragility degree is higher due to extensive run-time manipulation of the DOM tree and asynchronous client/server interactions. In this paper, we propose a technique, in which we automatically generate test cases and apply pipelined oracle comparators along with generated DOM templates, to deal with dynamic non-deterministic behavior in AJAX user interfaces. Our approach, implemented in CRAWLJAX, is open source and provides a set of generic oracle comparators, template generators, and visualizations of test failure output. We describe two case studies evaluating the effectiveness, scalability, and required manual effort of the approach. © 2010 IEEE.","Ajax; Regression testing; Web applications","Client/server; Desktop applications; Deterministic behavior; DOM tree; Evolving systems; Fragility degree; Open sources; Regression testing; Runtimes; Test case; Test failure; WEB application; Web interface; Web technologies; Automatic test pattern generation; Comparators (optical); Computer software selection and evaluation; Regression analysis; User interfaces; Verification; Visualization; World Wide Web; Software testing",,,,,,,,"Alshahwan, N., Harman, M., Automated session data repair for web application regression testing (2008) Proceedings of the 1st International Conference on Software Testing, Verification, and Validation (ICST'08), pp. 298-307. , IEEE Computer Society; Bezemer, C.-P., Mesbah, A., Van Deursen, A., Automated security testing of web widget interactions (2009) Proceedings of the 7th Joint Meeting of the European Eoftware Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC-FSE'09), pp. 81-91. , ACM; Binder, R.V., (1999) Testing Object-Oriented Systems: Models, Patterns, and Tools, , Addison-Wesley; Elbaum, S., Chilakamarri, K.-R., Gopal, B., Rothermel, G., Helping end-users 'engineer' dependable web applications (2005) Proceedings of the 16th IEEE International Symposium on Software Reliability Engineering (ISSRE'05), pp. 31-40. , IEEE Computer Society; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) Proc. 25th Int Conf. on Software Engineering (ICSE'03), pp. 49-59. , IEEE Computer Society; Garrett, J., (2005) Ajax: A New Approach to Web Applications, , http://www.adaptivepath.com/publications/essays/archives/000385.php, February; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) Proc. 1st IEEE Int. Conference on Sw. Testing Verification and Validation (ICST'08), pp. 121-130. , IEEE Computer Society; McDowell, C.E., Helmbold, D.P., Debugging concurrent programs (1989) ACM Comput. Surv., 21 (4), pp. 593-622; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) ESEC/FSE-11: Proceedings of the 9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 118-127. , New York, NY, USA ACM; Mesbah, A., Bozdag, E., Van Deursen, A., Crawling Ajax by inferring user interface state changes (2008) Proc. 8th Int. Conference on Web Engineering (ICWE'08), pp. 122-134. , IEEE Computer Society; Mesbah, A., Van Deursen, A., A component- and push-based architectural style for Ajax applications (2008) Journal of Systems and Software, 81 (12), pp. 2194-2209; Mesbah, A., Van Deursen, A., Invariant-based automatic testing of Ajax user interfaces (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE'09), pp. 210-220. , IEEE Computer Society; Offutt, J., Quality attributes of web software applications (2002) IEEE Softw., 19 (2), pp. 25-32; Orso, A., Shi, N., Harrold, M.J., Scaling regression testing to large software systems (2004) Proceedings of the 12th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE 2004), pp. 241-252; Soechting, E., Dobolyi, K., Weimer, W., Syntactic regression testing for tree-structured output (2009) Proceedings of the 11th IEEE International Symposium on Web Systems Evolution (WSE'09), , IEEE Computer Society; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for web applications (2005) ASE'05: Proc. 20th IEEE/ACM Int. Conf. on Automated Sw. Eng., pp. 253-262. , ACM; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing web applications (2007) Proc. 18th IEEE Int. Symp. on Sw. Reliability (ISSRE'07), pp. 117-126. , IEEE Computer Society; Tarhini, A., Ismail, Z., Mansour, N., Regression testing web applications (2008) International Conference on Advanced Computer Theory and Engineering, pp. 902-906. , IEEE Computer Society; Xu, L., Xu, B., Chen, Z., Jiang, J., Chen, H., Regression testing for web applications based on slicing (2003) Proceedings of the 27th Annual International Conference on Computer Software and Applications (COMPSAC'03), pp. 652-656. , IEEE Computer Society; Yin, R.K., (2003) Case Study Research: Design and Methods, , SAGE Publications Inc, 3d edition","Roest, D.; Delft University of TechnologyNetherlands; email: D.Roest@student.tudelft.nl",,"CNRS;Digiteo;Institut Telecom;Google;Groupe de Recherche GPL",,"3rd International Conference on Software Testing, Verification and Validation, ICST 2010","7 April 2010 through 9 April 2010","Paris",81067,,9780769539904,,,"English","ICST - Int. Conf. Softw. Test., Verif. Validation",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77954489841
"Chang T.-H., Yeh T., Miller R.C.","35179131400;57194267314;57216196948;","GUI testing using computer vision",2010,"Conference on Human Factors in Computing Systems - Proceedings","3",,,"1535","1544",,117,"10.1145/1753326.1753555","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953968759&doi=10.1145%2f1753326.1753555&partnerID=40&md5=e82535bae2f157fe284643076f9af88c","MIT CSAIL; UMIACS, HCIL, University of Maryland, United States","Chang, T.-H., MIT CSAIL; Yeh, T., UMIACS, HCIL, University of Maryland, United States; Miller, R.C., MIT CSAIL","Testing a GUI's visual behavior typically requires human testers to interact with the GUI and to observe whether the expected results of interaction are presented. This paper presents a new approach to GUI testing using computer vision for testers to automate their tasks. Testers can write a visual test script that uses images to specify which GUI components to interact with and what visual feedback to be observed. Testers can also generate visual test scripts by demonstration. By recording both input events and screen images, it is possible to extract the images of components interacted with and the visual feedback seen by the demonstrator, and generate a visual test script automatically. We show that a variety of GUI behavior can be tested using this approach. Also, we show how this approach can facilitate good testing practices such as unit testing, regression testing, and test-driven development. © 2010 ACM.","gui automation; gui testing; test by demonstration","GUI testing; New approaches; Regression testing; test by demonstration; Test driven development; Test scripts; Unit testing; Visual behavior; Visual feedback; Computer vision; Demonstrations; Graphical user interfaces; Human engineering; Software testing; Testing; Visual communication; Computer testing",,,,,,,,"(1999), http://www.autoitscript.com/autoit3/; Boshernitsan, M., Graham, S.L., Hearst, M.A., Aligning development tools with the way programmers think about code changes (2007) CHI '07, pp. 567-576. , New York, NY, USA, ACM; HP Mercury Interactive, , http://www.winrunner.com; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) CHI '96, pp. 244-251. , New York, NY, USA, ACM; Ko, A.J., Myers, B.A., Designing the whyline: A debugging interface for asking questions about program behavior (2004) CHI '04, pp. 151-158. , New York, NY, USA, ACM; Ko, A.J., Myers, B.A., Finding causes of program output with the java whyline (2009) CHI '09, pp. 1569-1578. , New York, NY, USA, ACM; Leshed, G., Haber, E.M., Matthews, T., Lau, T., Coscripter: Automating & sharing how-to knowledge in the enterprise (2008) CHI '08, pp. 1719-1728. , New York, NY, USA, ACM; Little, G., Lau, T.A., Cypher, A., Lin, J., Haber, E.M., Kandogan, E., Koala: Capture, share, automate, personalize business processes on the web (2007) CHI '07, pp. 943-946. , New York, NY, USA, ACM; Memon, A., GUI testing: Pitfalls and process (2002) Computer, 35 (8), pp. 87-88. , Aug; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Reverse Engineering, 2003. WCRE 2003. Proceedings. 10th Working Conference on, pp. 260-269. , Nov; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for GUI systems (1998) SIGSOFT Softw. Eng. Notes, 23 (2), pp. 82-92; Singh, G., Cuie, Z., Sage: Creating reusable, modularized interactive behaviors by demonstration (1994) CHI '94, pp. 297-298. , New York, NY, USA, ACM; (1999) Capbak, , http://soft.com; St. Amant, R., Lieberman, H., Potter, R., Zettlemoyer, L., Programming by example: Visual generalization in programming by example (2000) Commun. ACM, 43 (3), pp. 107-114; Subrahmaniyan, N., Beckwith, L., Grigoreanu, V., Burnett, M., Wiedenbeck, S., Narayanan, V., Bucht, K., Fern, X., Testing vs. code inspection vs. what else?: Male and female end users' debugging strategies (2008) CHI '08, pp. 617-626. , New York, NY, USA, ACM; Wilcox, E.M., Atwood, J.W., Burnett, M.M., Cadiz, J.J., Cook, C.R., Does continuous visual feedback aid debugging in direct-manipulation programming systems? (1997) CHI '97, pp. 258-265. , New York, NY, USA, ACM; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1), p. 4; Yeh, T., Chang, T.-H., Miller, R.C., Sikuli: Using GUI screenshots for search and automation (2009) UIST '09, pp. 183-192. , ACM; Zettlemoyer, L.S., St. Amant, R., A visual medium for programmatic control of interactive applications (1999) CHI '99, pp. 199-206. , New York, NY, USA, ACM","Chang, T.-H.; MIT CSAILemail: vgod@mit.edu",,"ACM Spec. Interest Group Comput.-Hum. Interact. (SIGCHI)",,"28th Annual CHI Conference on Human Factors in Computing Systems, CHI 2010","10 April 2010 through 15 April 2010","Atlanta, GA",80836,,9781605589299,,,"English","Conf Hum Fact Comput Syst Proc",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77953968759
"Bertolini C., Mota A.","56274935100;8886017800;","A framework for GUI testing based on use case design",2010,"ICSTW 2010 - 3rd International Conference on Software Testing, Verification, and Validation Workshops",,, 5463656,"252","259",,5,"10.1109/ICSTW.2010.37","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953761290&doi=10.1109%2fICSTW.2010.37&partnerID=40&md5=6b15b27bb8f69a6387928d1241c50d7e","Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil","Bertolini, C., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; Mota, A., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil","Today GUIs are not exclusive of desktops and web applications. They can be found in a widely variety of embedded systems such as cellular phones, TVs, cars, etc. GUI testing is an emergent approach to assure software quality. In this paper, we show how to evaluate some GUI testing techniques and the importance of controlled experiments in order to have statistical confidence. Furthermore, as GUI design changes often during the development process, test cases need to be updated as well. Therefore, we also propose a general framework to GUI test case design and generation based on model-based testing and GUI capturereplay tools. The framework is easily extended to support different test case generation algorithms and script languages. It also allows one to explore functional as well as non-functional requirements, such as usability, accessibility, reliability, and so on. © 2010 IEEE.",,"Capture-replay; Cellular Phone; Controlled experiment; Design change; Development process; GUI testing; Model based testing; Non-functional requirements; Script Languages; Software Quality; Statistical confidence; Test case; Test case generation; WEB application; Computer software selection and evaluation; Design; Embedded software; Embedded systems; Software testing; Testing; Verification; Graphical user interfaces",,,,,,,,"Bad Boy: Capture Replay Tool, , http://www.badboy.com/; GUITAR: A GUI Testing FrAmewoRk, , http://guitar.sourceforge.net/; Apfelbaum, L., Doyle, J., (1997) Model Based Testing. in Software Quality Week Conference, pp. 296-300; Beizer, B., (1990) Software Testing Techniques, , International Thomson Computer Press; Bertolini, C., Farina, A.G., Fernandes, P., Oliveira, F.M., Test case generation using stochastic automata networks: Quantitative analysis (2004) Second IEEE International Conference on Software Engineering and Formal Methods, pp. 251-260. , Beijing, China, IEEE Computer Society; Bertolini, C., Mota, A., Using refinement checking as system testing (2008) 11th Iberoamerican Workshop on Requirements Engineering and Software Environments (IDEAS 2008), pp. 17-30. , Recife, Brazil, February; Bertolini, C., Mota, A., Using probabilisticmodel checking to evaluate GUI testing techniques (2009) SEFM 2009, , IEEE, Nov; Bertolini, C., Mota, A., Aranha, E., Ferraz, C., GUI testing techniques evaluation by designed experiments (2010) ICST 2010, , IEEE, Apr; Bertolini, C., Peres, G., D'amorim, M., Mota, A., An empirical evaluation of automated black box testing techniques for crashing guis (2009) ICST 2009, pp. 21-30. , IEEE, Apr; Borba, P., Torres, D., Marques, R., Wetzel, L., TaRGeT: Test and requirements generation tool (2007) InMotorola's Innovation Conference (IC'2007), Software Expo Session, , Lombard, Illinois, USA; Cabral, G., Sampaio, A., Formal specification generation from requirement documents (2008) Electron. Notes Theor. Comput. Sci., 195, pp. 171-188; Frankl, P.G., Weyuker, E.J., An analytical comparison of the fault-detecting ability of data flow testing techniques (1993) ICSE, pp. 415-424; Gadelha, E., Machado, P., Neto, F., On the use of a similarity function for test case selection in the context of model-based testing (2009) Software Testing, Verification and Reliability Journal; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2005) FATES, pp. 16-31; Lee, D., Yannakakis, M., Principles and methods of testing finite state machines - A survey (1996) Proceeding of the IEEE, 84, pp. 1090-1123. , Aug; Mcmaster, S., Memon, A.M., An extensible heuristicbased framework for gui test case maintenance (2009) Software Testing Verification and Validation Workshop, IEEE International Conference on, pp. 251-254. , 0; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. University of Pittsburgh, Pittsburgh, PA, July; Myers, G.J., (1979) Art of Software Testing, , John Wiley & Sons, Inc; Nogueira, S., Cartaxo, E.G., Torres, D.T., Aranha, E.H.S., Marques, R., Model based test generation: An industrial experience (2007) 1st Brazilian Workshop on Systematic and Automated Software Testing, , Joao Pessoa, Brazil; Paiva, A., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M., A model-to-implementation mapping tool for automated model-based gui testing (2005) ICFEM, pp. 450-464; Sjoberg, D.I., Hannay, J.E., Hansen, O., Kampenes, V.B., Karahasanovic, A., Liborg, N.-K., Rekdal, A.C., A survey of controlled experiments in software engineering (2005) IEEE Transactions on Software Engineering, 31 (9), pp. 733-753; Steven, J., Chandra, P., Fleck, B., Podgurski, A., Jrapture: A capture/replay tool for observation-based testing (2000) SIGSOFT Softw. Eng. Notes, 25 (5), pp. 158-167; Solingen, R.V., Berghout, E., Integrating goal-oriented measurement in industrial software engineering: Industrial experiences with and additions to the Goal/Question/Metric Method (GQM) (2001) IEEE METRICS, pp. 246-258; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of gui testing using a model-driven approach (2006) AST, pp. 9-14. , New York, NY, USA, ACM; Visser, W., Pasareanu, C.S., Pelanek, R., Test input generation for java containers using state matching (2006) ISSTA, pp. 37-48; Weyuker, E.J., Evaluation techniques for improving the quality of very large software systems in a cost-effective way (1999) Journal of Systems and Software, 47 (2-3), pp. 97-103; Weyuker, E.J., Comparing the effectiveness of testing techniques (2008) Formal Methods and Testing, pp. 271-291. , Lecture Notes in Computer Science; Weyuker, E.J., Weiss, S.N., Hamlet, R.G., Comparison of program testing strategies (1991) Symposium on Testing, Analysis, and Verification, pp. 1-10; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) Proceedings - International Conference on Software Engineering, 2006, pp. 997-1000. , Proceeding of the 28th International Conference on Software Engineering 2006, ICSE '06; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications (2005) ICSM, pp. 473-482","Bertolini, C.; Center of Informatics, P.O. Box 7851, 50732-970, Recife-PE, Brazil; email: cbertolini@cin.ufpe.br",,,,"3rd International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2010","6 April 2010 through 10 April 2010","Paris",80675,,9780769540504,,,"English","ICSTW - Int. Conf. Softw. Test., Verif., Validation Workshops",Conference Paper,"Final","",Scopus,2-s2.0-77953761290
"Yuan X., Memon A.M.","55469919200;35599876500;","Iterative execution-feedback model-directed GUI testing",2010,"Information and Software Technology","52","5",,"559","575",,30,"10.1016/j.infsof.2009.11.009","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949492047&doi=10.1016%2fj.infsof.2009.11.009&partnerID=40&md5=a281f71427d3fa1fe088c3b9a8d1fa93","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Yuan, X., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Current fully automatic model-based test-case generation techniques for GUIs employ a static model. Therefore they are unable to leverage certain state-based relationships between GUI events (e.g., one enables the other, one alters the other's execution) that are revealed at run-time and non-trivial to infer statically. We present ALT - a new technique to generate GUI test cases in batches. Because of its ""alternating"" nature, ALT enhances the next batch by using GUI run-time information from the current batch. An empirical study on four fielded GUI-based applications demonstrated that ALT was able to detect new 4- and 5-way GUI interaction faults; in contrast, previous techniques, due to their requirement of too many test cases, were unable to even test 4- and 5-way GUI interactions. © 2009 Elsevier B.V. All rights reserved.","Event-driven software; Event-flow graphs; GUI testing; Model-based testing; Test-case generation","Automatic models; Empirical studies; Event-driven softwares; Feedback model; GUI testing; Non-trivial; Run-time information; Runtimes; State-based; Static model; Test case; Test case generation; Computer software; Embedded systems; Testing; Graphical user interfaces",,,,,"National Science Foundation, NSF: CCF-0447864

Office of Naval Research, ONR: N00014-05-1-0421","This work was partially supported by the US National Science Foundation under NSF Grant CCF-0447864 and the Office of Naval Research Grant N00014-05-1-0421 .",,"Alessandro Marchetto, P.T., Ricca, F., State-based testing of Ajax web applications (2008) Proceedings of the 1st International Conference on Software Testing, Verification, and Validation, pp. 121-130. , April 9-11; Boyapati, C., Khurshid, S., Marinov, D., Korat: Automated testing based on Java predicates (2002) Proceedings of International Symposium on Software Testing and Analysis (ISSTA '02), pp. 123-133; Dwyer, M.B., Carr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) Lecture Notes in Computer Science, 1301, pp. 244-261. , Proceedings of the ACM SIGSOFT 6th International Symposium on the Foundations of Software Engineering: ESEC/FSE '97. Jazayeri M., and Schauer H. (Eds), Springer/ACM Press; Ferguson, R., Korel, B., The chaining approach for software test data generation (1996) ACM Transactions on Software Engineering and Methodology, 5 (1), pp. 63-86; M. Finsterwalder, Automating acceptance tests for GUI applications in an extreme programming environment, in: Proceedings of the 2nd International Conference on Extreme Programming and Flexible Processes in Software Engineering, May 2001, pp. 114-117; Gallagher, M.J., Narasimhan, V.L., Adtest: a test data generation suite for Ada software systems (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 473-484; Gupta, N., Mathur, A.P., Soffa, M.L., Automated test data generation using an iterative relaxation method Proceedings of the ACM SIGSOFT 6th International Symposium on the Foundations of Software Engineering, FSE-6, pp. 1998-2244,231; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, Special Sessions: Demonstrations, 2, p. 1042; Hierons, R.M., Ural, H., Optimizing the length of checking sequences (2006) IEEE Transactions on Computers, 55 (5), pp. 618-629; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM SIGPLAN Notices, 39 (12), pp. 92-106; Testing Resources for Extreme Programming, , http://junit.org/news/extension/gui/index.htm; Korel, B., Automated software test data generation (1990) IEEE Transactions on Software Engineering, 16 (8), pp. 870-879; Masri, W., Podgurski, A., Leon, D., An empirical study of test case filtering techniques based on exercising information flows (2007) IEEE Transactions on Software Engineering, 33 (7), pp. 454-477; McMinn, P., Search-based software test data generation: a survey: research articles (2004) Software Testing, Verification and Reliability, 14 (2), pp. 105-156; McMinn, P., Harman, M., Binkley, D., Tonella, P., The species per path approach to search-based test data generation (2006) Proceedings of International Symposium on Software Testing and Analysis (ISSTA '06), pp. 13-24; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. Thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2), pp. 1-36; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of The 10th Working Conference on Reverse Engineering, , November; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Michael, C.C., McGraw, G., Schatz, M., Generating software test data by evolution (2001) IEEE Transactions on Software Engineering, 27 (12), pp. 1085-1110; Miller, W., Spooner, D.L., Automatic generation of floating-point test data (1976) IEEE Transactions on Software Engineering, 2 (3), pp. 223-226; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback-directed random test generation (2007) Proceedings of the 29th International Conference on Software Engineering (ICSE '07), pp. 396-405. , May 23-25; Rountev, A., Kagan, S., Gibas, M., Evaluating the imprecision of static analysis (2004) Workshop on Program Analysis for Software Tools and Engineering, pp. 14-16; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of The Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , Washington/Brussels/Tokyo, June, IEEE Press, pp; L. White, H. Almezen, Generating test cases for GUI responsibilities using complete interaction sequences, in: Proceedings of the International Symposium on Software Reliability Engineering, October 2000, pp. 110-121; White, L., AlMezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63; White, L., Almezen, H., Sastry, S., Firewall regression testing of GUI sequences and their interactions (2003) Proceedings of the International Conference on Software Maintenance, pp. 398-409. , The Netherlands, September 22-26; Xie, T., Notkin, D., Mutually enhancing test generation and specification inference (2003) Lecture Notes in Computer Science, 2931, pp. 60-69. , Formal Approaches to Software Testing, Third International Workshop on Formal Approaches to Testing of Software, FATES 2003. Petrenko A., and Ulrich A. (Eds), Springer; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proceedings of the 29th International Conference on Software Engineering (ICSE '07), pp. 396-405. , May 23-25","Memon, A.M.; Department of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,,,,,,,09505849,,ISOTE,,"English","Inf Software Technol",Article,"Final","",Scopus,2-s2.0-77949492047
"de Matos E.C.B., Sousa T.C.","35271812800;35273470800;","From formal requirements to automated web testing and prototyping",2010,"Innovations in Systems and Software Engineering","6","1",,"163","169",,5,"10.1007/s11334-009-0112-5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949300606&doi=10.1007%2fs11334-009-0112-5&partnerID=40&md5=3454f70e18fe81f34430986f80b6eaa5","Unified Teaching Center of Teresina, Joel da Cunha Mendes Street, 790. E-403, Teresina, PI 64017-260, Brazil; University of São Paulo, São Vicente de Paula, 199. Apartment 11, São Paulo, SP 01229-010, Brazil","de Matos, E.C.B., Unified Teaching Center of Teresina, Joel da Cunha Mendes Street, 790. E-403, Teresina, PI 64017-260, Brazil; Sousa, T.C., University of São Paulo, São Vicente de Paula, 199. Apartment 11, São Paulo, SP 01229-010, Brazil","Use cases and user interface prototypes are agile techniques used to specify required functionalities of an object-oriented system. Testing can find most errors of the software and ensure that the requirement specifications are satisfied by the application. We can derive test cases from use cases and run them in user interfaces, but we do it in a mechanical way. In this paper, we propose a new approach for automating the generation of user interface prototypes and test cases for web applications. Starting from a formalization of the requirements based on controlled use cases extended with the system glossary and the user interface specifications, we automatically generate web pages and test cases which are passed as parameters for an automated web testing tool. © Springer-Verlag London Limited 2010.","Automation; Requirements engineering; Software prototyping; Software testing","New approaches; Object-oriented system; Prototyping; Required functionalities; Requirement specification; Techniques used; Test case; User interface prototypes; WEB application; Web page; Web testing; Automation; Computer software selection and evaluation; Requirements engineering; Software testing; Specifications; User interfaces; World Wide Web; Software prototyping",,,,,,,,"Beck, K., Andres, C., (2004) Extreme Programming Explained: Embrace Change, , Reading: Addison-Wesley; Astels, D., (2003) Test-Driven Development: A Practical Guide, , Upper Saddle River: Prentice Hall; Jacobson, I., (1992) Object-Oriented Software Engineering: A Use Case Driven Approach, , 1, Reading: Addison-Wesley; Carroll, J.M., Five reasons for scenario-based design (1999) 32nd Hawaii International Conference on System Sciences; Myers, J., (1979) The Art of Software Testing, , New York: Wiley; http://www.w3.org/XML/, World Wide Web Consortium. Extensible markup language, Accessed 20 Nov 2009; Xiaochun, Z., Bo, Z., Juefeng, L., Qui, G., A test automation solution on gui functional test (2008) The IEEE International Conference on Industrial Informatics; Huang, C., Chen, H.Y., A tool to support automated testing for web application scenario (2008) The IEEE International Conference on Systems, Man and Cybernetics; Jacobson, I., Booch, G., Rumbaugh, J., (2005) The Unified Modeling Language User Guide, , Reading: Addison-Wesley; Li, L., Miao, H., An approach to modeling and testing web applications based on use cases (2008) 2008 International Symposium on Information Science and Engineering; Beck, K., (2009) Agile Manifesto, , http://www.agilemanifesto.org/, Accessed 20 Nov 2009; (2009) Selenium Framework, , http://www.seleniumhq.org/, Open QA, Accessed 20 Nov 2009; Elkoutbi, M., Khriss, I., Keller, R.K., Automated prototyping of user interfaces based on uml scenarios (2006) Automated Software Engineering; Olek, L., Michalik, B., Nawrocki, J., Ochodek, M., Quick prototyping of web applications (2007) Balancing Agility and Formalism in Software Engineering; Parr, T., (2009) Antlr-another Tool for Language Recognitio, , http://www.antlr.org/, Accessed 20 Nov 2009; Schwitter, R., English as a formal specification language 13th International Workshop on Database and Expert System Applications","de Matos, E. C. B.; Unified Teaching Center of Teresina, Joel da Cunha Mendes Street, 790. E-403, Teresina, PI 64017-260, Brazil; email: ernestocid@ceut.com.br",,,,,,,,16145046,,,,"English","Innov. Syst. Softw. Eng.",Article,"Final","",Scopus,2-s2.0-77949300606
"Yuan X., Memon A.M.","55469919200;35599876500;","Generating event sequence-based test cases using GUI runtime state feedback",2010,"IEEE Transactions on Software Engineering","36","1", 5306073,"81","95",,89,"10.1109/TSE.2009.68","https://www.scopus.com/inward/record.uri?eid=2-s2.0-76749087925&doi=10.1109%2fTSE.2009.68&partnerID=40&md5=d929344ab93c12aa39ebdc611f22f851","Department of Computer Science, University of Maryland, 4115 A.V. Williams Building, College Park, MD 20742, United States","Yuan, X., Department of Computer Science, University of Maryland, 4115 A.V. Williams Building, College Park, MD 20742, United States; Memon, A.M., Department of Computer Science, University of Maryland, 4115 A.V. Williams Building, College Park, MD 20742, United States","This paper presents a fully automatic model-driven technique to generate test cases for Graphical user interfaces (GUIs)-based applications. The technique uses feedback from the execution of a seed test suite, which is generated automatically using an existing structural event interaction graph model of the GUI. During its execution, the runtime effect of each GUI event on all other events pinpoints event semantic interaction (ESI) relationships, which are used to automatically generate new test cases. Two studies on eight applications demonstrate that the feedback-based technique 1) is able to significantly improve existing techniques and helps identify serious problems in the software and 2) the ESI relationships captured via GUI state yield test suites that most often detect more faults than their code, event, and event-interaction-coverage equivalent counterparts. © 2010 IEEE.","Automated testing; GUI testing; GUITAR testing system.; Model-based testing","Automated testing; Automatic models; Event semantics; Event sequence; GUI testing; Interaction graphs; Model based testing; Runtimes; Test case; Testing systems; Yield test; Automatic test pattern generation; Feedback; Instruments; State feedback; Testing; Graphical user interfaces",,,,,"CCF-0447864

N00014-05-1-0421","The authors thank the anonymous reviewers whose comments and suggestions helped to extend the second empirical study, reshape its results, and improve the flow of the text. This work was partially supported by the US National Science Foundation under grant CCF-0447864 and the US Office of Naval Research under grant N00014-05-1-0421.",,"Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing: Introduction Management and Performance, , Addison-Wesley Professional; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proc. 27th Int'l Symp. Fault-Tolerant Computing, pp. 80-88; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc. 11th Int'l Symp. Software Reliability Eng., p. 110; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Software Eng., 31 (10), pp. 884-896. , Oct; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Proc. 29th Int'l Conf. Software Eng., pp. 396-405. , May; D'Amorim, M., Pacheco, C., Xie, T., Marinov, D., Ernst, M.D., An empirical comparison of automated generation and classification techniques for object-oriented unit testing (2006) Proc. 21st IEEE/ACM Int'l Conf. Automated Software Eng.; Xie, T., Notkin, D., Tool-assisted unit-test generation and selection based on operational abstractions (2006) Automated Software Eng., 13 (3), pp. 345-371; Ferguson, R., Korel, B., The chaining approach for software test data generation (1996) ACM Trans. Software Eng. Methodolgy, 5 (1), pp. 63-86; Gallagher, M.J., Narasimhan, V.L., Adtest: A test data generation suite for ada software systems (1997) IEEE Trans. Software Eng., 23 (8), pp. 473-484. , Aug; Korel Bogdan, Automated software test data generation (1990) IEEE Transactions on Software Engineering, 16 (8), pp. 870-879. , DOI 10.1109/32.57624; Michael, C.C., Mc Graw, G., Schatz, M., Generating software test data by evolution (2001) IEEE Trans. Software Eng., 27 (12), pp. 1085-1110. , Dec; Boyapati, C., Khurshid, S., Marinov, D., Korat: Automated testing based on java predicates (2002) Proc. 2002 ACM SIGSOFT Int'l Symp. Software Testing and Analysis, pp. 123-133; Gupta, N., Mathur, A.P., Soffa, M.L., Automated test data generation using an iterative relaxation method (1998) Proc. Sixth ACM SIGSOFT Int'l Symp. Foundations of Software Eng., pp. 231-244; Miller, W., Spooner, D.L., Automatic generation of floating- Point test data (1976) IEEE Trans. Software Eng., 2 (3), pp. 223-226. , Sept; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedback- Directed random test generation (2007) Proc. 29th Int'l Conf. Software Eng., pp. 396-405. , May; Myers, B.A., Rosson, M.B., Survey on user interface programming (1992) Proc. ACM SIGCHI Conf. Human Factors in Computing Systems, pp. 195-202; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study: Research articles (2006) Software Testing, Verification, and Reliability, 16 (1), pp. 3-32; Clarke, J.M., Automated test generation from a behavioral model (1998) Proc. Pacific Northwest Software Quality Conf., , May; Esmelioglu, S., Apfelbaum, L., Automated test generation, execution, and reporting (1997) Proc. Pacific Northwest Software Quality Conf., pp. 127-142. , Oct; Bernhard, P.J., A reduced test suite for protocol conformance testing (1994) ACM Trans. Software Eng. and Methodology, 3 (3), pp. 201-220. , July; Chen, W.-H., Lu, C.-S., Brozovsky, E.R., Wang, J.-T., An optimization technique for protocol conformance testing using multiple UIO sequences (1990) Information Processing Letters, 36 (1), pp. 7-11; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Trans. Software Eng., 4 (3), pp. 178-187. , May; Von Mayrhauser, A., Mraz, R.T., Walls, J., Domain based regression testing (1994) Proc. Int'l Conf. Software Maintenance, pp. 26-35; Maurer, P.M., Generating test data with enhanced context-free grammars (1990) IEEE Software, 7 (4), pp. 50-55. , July; Auguston, M., Michael, J.B., Shing, M.-T., Environment behavior models for scenario generation and testing automation (2005) Proc. First Int'l Workshop Advances in Model-Based Testing, pp. 1-6; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Software Eng., 27 (2), pp. 144-155. , Feb; Howe, A., Von Mayrhauser, A., Mraz, R.T., Test case generation as an ai planning problem (1997) Automated Software Eng., 4, pp. 77-106; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proc. Conf. Human Factors in Computing Systems: Common Ground, pp. 244-251. , Apr; Woit, D.M., Specifying operational profiles for modules (1993) Proc. ACM SIGSOFT Int'l Symp. Software Testing and Analysis, pp. 2-10; Sarikaya, B., Conformance testing: Architectures and test sequences (1989) Computer Networks and ISDN Systems, 17 (2), pp. 111-126; Ipate, F., Holcombe, M., Complete testing from a stream xmachine specification (2004) Fundamenta Informaticae, 64 (1-4), pp. 205-216; Barnett, M., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Towards a tool environment for model-based testing with AsmL (2003) Proc. Int'l Workshop Formal Approach to Software Testing, pp. 252-266; Farchi, E., Hartman, A., Pinter, S.S., Using a model-based test generator to test for standard conformance (2002) IBM Systems J., 41 (1), pp. 89-110; Hong, H.S., Kwon, Y.R., Cha, S.D., Testing of object-oriented programs based on finite state machines (1995) Proc. Asia Pacific Software Eng. Conf., pp. 234-241; Apfelbaum, L., Automated functional test generation (1995) Proc. Int'l Automatic Testing Conf.; Lucio, L., Pedro, L., Buchs, D., A methodology and a framework for model-based testing (2005) Rapid Integration of Software Eng. Techniques, pp. 57-70. , N. Guelfi, ed. Springer; Whittaker, J.A., Stochastic software testing (1997) Ann. Software Eng., 4, pp. 115-131; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Model-based testing of object- Oriented reactive systems with spec explorer (2008) Formal Methods and Testing, pp. 39-76. , Springer; Koopman, P.W.M., Plasmeijer, R., Achten, P., Model-based testing of thin-client web applications (2006) Proc. Int'l Workshop Formal Approaches to Testing and Runtime Verification, pp. 115-132; Lee, N.H., Cha, S.D., Generating test sequences from a set of MSCs (2003) Computer Networks, 42 (3), pp. 405-417; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proc. 12th Int'l Symp. Software Reliability Eng., pp. 34-43; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM SIGPLAN Notices, 39 (12), pp. 92-106; Yuan, X., Memon, A.M., (2009) Using GUI Run-Time State As Feedback for Test Automation, , http://hdl.handle.net/1903/9416, technical report, Univ. of Maryland http://hdl.handle. net/1903/9416, Aug; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Software Eng. and Methodology, 16 (1), p. 4; Briand, L.C., Labiche, Y., Wang, Y., Using simulation to empirically investigate test coverage criteria based on statechart (2004) Proc. 26th Int'l Conf. Software Eng., pp. 86-95; Rothermel, G., Elbaum, S., Malishevsky, A.G., Kallakuri, P., Qiu, X., On test suite composition and cost-effective regression testing (2004) ACM Trans. Software Eng. Methodology, 13 (3), pp. 277-331; Richardson, D.J., Thompson, M.C., An analysis of test data selection criteria using the relay model of fault detection (1993) IEEE Trans. Software Eng., 19 (6), pp. 533-553. , June; Belli, F., Budnik, C.J., Test minimization for human-computer interaction (2007) Applied Intelligence, 26 (2), pp. 161-174; Alessandro Marchetto, P.T., Ricca, F., State-based testing of ajax web applications (2008) Proc. First Int'l Conf. Software Testing, Verification, and Validation, pp. 121-130. , Apr","Yuan, X.; Department of Computer Science, , College Park, MD 20742, United States; email: xyuan@cs.umd.edu",,,,,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-76749087925
"Memon A.M., Nguyen B.N.","35599876500;57220847012;","Advances in Automated Model-Based System Testing of Software Applications with a GUI Front-End",2010,"Advances in Computers","80","C",,"121","162",,28,"10.1016/S0065-2458(10)80003-8","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85015600482&doi=10.1016%2fS0065-2458%2810%2980003-8&partnerID=40&md5=8e02075e547fefb91955acaa6bff2618","Department of Computer Science, University of Maryland, Maryland, United States","Memon, A.M., Department of Computer Science, University of Maryland, Maryland, United States; Nguyen, B.N., Department of Computer Science, University of Maryland, Maryland, United States","Despite the ubiquity of software applications that employ a graphical-user interface (GUI) front-end, functional system testing of these applications has remained, until recently, an understudied research area. During “GUI testing,” test cases, modeled as sequences of user input events, are created and executed on the software by exercising the GUI's widgets. Because each possible sequence of user events may potentially be a test case and today's GUIs offer enormous flexibility to end-users, in principle, GUI testing requires a prohibitively large number of test cases. Any practical test-case generation technique must sample the vast GUI input space. Existing techniques are largely manual, and hence extremely resource intensive. Several new automated model-based techniques have been developed in the past decade. All these techniques develop, either manually or automatically, a model of the GUI and employ it to generate test cases. This chapter presents the first detailed taxonomy of these techniques. A small GUI application is used as a running example to demonstrate each technique and illustrate its relative strengths and weaknesses. © 2010 Elsevier Inc.",,,,,,,,,,"Myers, B.A., User interface software tools (1995) ACM Trans. Comput. Hum. Interact., 2 (1), pp. 64-103; Grechanik, M., Batory, D.S., Perry, D.E., Integrating and reusing GUI-driven applications (2002), pp. 1-16. , ICSR-7: Proceedings of the 7th International Conference on Software Reuse Springer-Verlag London, UK; Shneiderman, B., Plaisant, C., Cohen, M., Jacobs, S., Designing the User Interface: Strategies for Effective Human–Computer Interaction (2009), Addison-Wesley Boston, MA; Dwyer, M.B., Carr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997), pp. 244-261. , ESEC '97/FSE-5: Proceedings of the 6th European SOFTWARE ENGINEERING Conference held Jointly with the 5th ACM SIGSOFT International Symposium on Foundations of Software Engineering Springer-Verlag New York New York, NY; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2009) IEEE Trans. Softw. Eng., 36, pp. 81-95; Chen, J., Formal modelling of Java GUI event handling (2002), pp. 359-370. , ICFEM '02: Proceedings of the 4th International Conference on Formal Engineering Methods Springer-Verlag London, UK; Ammann, P., Offutt, J., Introduction to Software Testing (2008), Cambridge University Press New York, NY; Harrold, M.J., Testing: a roadmap (2000), pp. 61-72. , ICSE '00: Proceedings of the Conference on The Future of Software Engineering ACM New York, NY; McConnell, S., Best practices: daily build and smoke test (1996) IEEE Softw., 13 (4), pp. 143-144. , July; Esmelioglu, S., Apfelbaum, L., Automated test generation, execution, and reporting (1997), Proceedings of Pacific Northwest Software Quality Conference IEEE Press Portland, Oregon; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001), p. 54. , ISSRE '01: Proceedings of the 12th International Symposium on Software Reliability Engineering IEEE Computer Society Washington, DC; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: approach and case study (2006) Softw. Test. Verif. Reliab., 16 (1), pp. 3-32; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007), pp. 405-408. , ASE '07: Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering ACM New York, NY; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001), pp. 114-117. , Proceedings of the 2nd International Conference on eX-treme Programming and Flexible Processes in Software Engineering May; Introduction to jfcUnit (2009), http://jfcunit.sourceforge.net; Abbot framework for automated testing of Java GUI components and programs (2009), http://jfcunit.sourceforge.net; Pounder Java GUI testing utility (2009), http://pounder.sourceforge.net; Jemmy module (2009), https://jemmy.dev.java.net; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human–computer interaction (1993), p. 1042. , Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting vol. 2 of SPECIAL SESSIONS: Demonstrations; Marathon integrated testing environment (2009), http://www.marathontesting.com; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009), pp. 408-418. , ICSE '09: Proceedings of the 2009 IEEE 31st International Conference on Software Engineering IEEE Computer Society Washington, DC; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997), pp. 80-88. , Proceedings of The Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97) June IEEE Press June Washington/Brussels/Tokyo; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000), pp. 110-121. , Proceedings of the International Symposium on Software Reliability Engineering, Oct. 8-11; Cohen, M.B., Gibbons, P.B., Mugridge, W.B., Colbourn, C.J., Constructing test suites for interaction testing (2003), pp. 38-48. , ICSE '03: Proceedings of the 25th International Conference on Software Engineering IEEE Computer Society Washington, DC; Allen, F.E., Control flow analysis (1970) SIGPLAN Not., 5 (7), pp. 1-19; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: reverse engineering of graphical user interfaces for testing (2003), p. 260. , WCRE '03: Proceedings of the 10th Working Conference on Reverse Engineering IEEE Computer Society Washington, DC; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1), p. 4; White, L., Regression testing of GUI event interactions (1996), pp. 350-358. , Proceedings of the International Conference on Software Maintenance (Washington), Nov. 4-8; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2), pp. 1-35; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996), pp. 244-251. , CHI '96: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems ACM New York, NY; Brooks, P.A., Memon, A.M., Automated GUI testing guided by usage profiles (2007), pp. 333-342. , ASE '07: Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering ACM New York, NY; Bryce, R.C., Colbourn, C.J., Cohen, M.B., A framework of greedy methods for constructing interaction test suites (2005), pp. 146-155. , ICSE '05: Proceedings of the 27th International Conference on Software Engineering ACM New York, NY; Cohen, D.M., Dalal, S.R., Fredman, M.L., Patton, G.C., The AETG system: an approach to testing based on combinatorial design (1997) IEEE Trans. Softw. Eng., 23 (7), pp. 437-444; Cohen, D.M., Dalal, S.R., Kajla, A., Patton, G.C., The automatic efficient test generator (AETG) system (1994), pp. 303-309. , Proceedings of the Fifth International Symposium on Software Reliability Engineering IEEE Computer Society Press Monterey, CA; Hartman, A., Software and hardware testing using combinatorial covering suites (2005) Graph Theory, Combinatorics and Algorithms: Interdisciplinary Applications, pp. 327-366; Kervinen, A., Maunumaa, M., Pakkonen, T., Katara, M., Model-based testing through a GUI (2006), pp. 16-31. , Proceedings of the 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005) Springer Berlin number 3997 in Lecture Notes in Computer Science; Paiva, A., Tillmann, N., Faria, J., Vidal, R., Modeling and testing hierarchical GUIs (2005), Proceedings of the 12th International Workshop on Abstract State Machines (ASM 2005), Paris, France. Springer Inc. March 8-11; Paiva, A., Faria, J., Vidal, R., Towards the integration of visual and formal models for GUI testing (2007) Electronic Notes Theor. Comput. Sci., 190 (2), pp. 99-111; Buwalda, H., Action figure (2003) STQE Mag.; Barnett, M., Leino, K., Schulte, W., The Spec# programming system: an overview (2005) Lect. Notes Comput. Sci., 3362, pp. 49-69",,,,,,,,,00652458,,,,"English","Adv. Comput.",Book Chapter,"Final","",Scopus,2-s2.0-85015600482
"Hou Y., Chen R., Du Z.","56420115000;56927156900;35274979500;","Automated GUI testing for J2ME software based on FSM",2009,"International Conference on Scalable Computing and Communications - The 8th International Conference on Embedded Computing, ScalCom-EmbeddedCom 2009",,, 5341641,"341","346",,6,"10.1109/EmbeddedCom-ScalCom.2009.67","https://www.scopus.com/inward/record.uri?eid=2-s2.0-72449165426&doi=10.1109%2fEmbeddedCom-ScalCom.2009.67&partnerID=40&md5=6aa72be40fecbe2b46c201d8569434db","School of Information Science and Technology, Dalian Maritime University, Dalian, China","Hou, Y., School of Information Science and Technology, Dalian Maritime University, Dalian, China; Chen, R., School of Information Science and Technology, Dalian Maritime University, Dalian, China; Du, Z., School of Information Science and Technology, Dalian Maritime University, Dalian, China","J2ME (Java 2 Micro Edition) software is playing a more and more significant role in embedded systems. However, with the growing complexity and function enhancement of J2ME software, its GUI (Graphical User Interface) testing is facing with great challenges. This paper proposes a new automated GUI testing method for J2ME software, which adopts an automated test case generation means based on FSM model and uses a unique program instrumentation scheme. Test cases are translated to the test script, which drives the J2ME program under test, and generates test report. In our experiments the automated testing system is implemented. Example Results show this testing method can automatically generate test cases for GUI based on the specification of the J2ME program and can also drive the running of the tests in the automated way. The testing method is more effective than the traditional ones; it has advantages, such as higher automation level, full fault-detection capability and general applicability. So, this method can see its applicable prospect in J2ME software testing. © 2009 IEEE.","FSM; GUI; J2ME; Software testing","Automated test case generation; Automated testing; Automation levels; FSM; GUI testing; Java 2 micro editions; Software-based; Test case; Test reports; Test scripts; Testing method; Automation; Computer science; Computer software selection and evaluation; Drives; Embedded systems; Fault detection; Graphical user interfaces; Instruments; Java programming language; Software testing; Testing; Embedded software",,,,,,,,"Memon, A., Automatically requiring event sequence-based GUI test suites for regression testing (2008) ACM Transactions on Software Engineering and Methodology, 18 (2). , Article 4, October; Banerjee, I., Nagarajan, A., GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing (2003) Proceedings of the 2003 10 working Conference on Reverse Engineering (WCRE'03), pp. 260-269. , Victoria, Canda, Nov; Q. Hua, b. Wang, L. Chen, Testing Object-Oriented System; Yan, J., Wang, J., Chen, H., Survey of Model-Based Software Testing (2004) Computer Techonlogy; E. John, Hopcroft and D. Jeffrey, Ullman. Introduction to automata theory, languages, and computation, Addison-Wesley,1979; Beizer, B., (1995) Black-Box Testing: Techinques for Functional Testing of Software and Systems, , New York: Wiley; Fujiwara, S., Bochmann, G., Khendek, F., Test selection based on finite state models (1991) IEEE-transactions on Software Engineering, 17 (6), pp. 591-603; Rosaria, S., Robinson, H., (2000) Applying models in your testing process, 42 (12), pp. 815-854. , Information and Software Technique; Whittaker, J., Stochastic software testing (1997) The Annals of Software Engineering, 4, pp. 115-131; Liu, C., Richardson, D., Using application states in software testing (2000) ICSE'00, , Ireland; Naito, S., Tsunoyama, M., Fault detection for seqential machines by transition tours (1981) Proc. IEEE Fault Tolerant Comput.Conf; Krishan, S., Anton, D., A Protocol Test Generation Procesure (1988) Computer Networks and ISDN System, 15, pp. 285-297; Gonenc, G., A method for design of fault detection experiment (1970) IEEE Transactions on Computer, C-19, pp. 518-558; Chow, T., Testing software design modeled by finite machines (1978) IEEE Transactions on Software Engineering, 4, pp. 178-187","Hou, Y.; School of Information Science and Technology, , Dalian, China",,"IEEE Computer Society",,"International Conference on Scalable Computing and Communications- 8th International Conference on Embedded Computing, ScalCom-EmbeddedCom 2009","25 September 2009 through 27 September 2009","Dalian",78938,,9780769538259,,,"English","Int. Conf. Scalable Comput. Commun. - Int. Conf. Embedded Comput., ScalCom-EmbeddedCom",Conference Paper,"Final","",Scopus,2-s2.0-72449165426
"Grechanik M., Xie Q., Fu C.","55904114500;35761589700;7402803185;","Experimental assessment of manual versus tool-based maintenance of GUI-directed test scripts",2009,"IEEE International Conference on Software Maintenance, ICSM",,, 5306345,"9","18",,17,"10.1109/ICSM.2009.5306345","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70849120782&doi=10.1109%2fICSM.2009.5306345&partnerID=40&md5=78053044fda64bfb8032fc34557dd010","Accenture Technology Labs, Chicago IL 60601, United States","Grechanik, M., Accenture Technology Labs, Chicago IL 60601, United States; Xie, Q., Accenture Technology Labs, Chicago IL 60601, United States; Fu, C., Accenture Technology Labs, Chicago IL 60601, United States","Since manual black-box testing of GUI-based APplications (GAPs) is tedious and laborious, test engineers create test scripts to automate the testing process. These test scripts interact with GAPs by performing actions on their GUI objects. As GAPs evolve, testers should fix their corresponding test scripts so that they can reuse them to test successive releases of GAPs. Currently, there are two main modes of maintaining test scripts: tool-based and manual. In practice, there is no consensus what approach testers should use to maintain test scripts. Test managers make their decisions ad hoc, based on their personal experience and perceived benefits of the tool-based approach versus the manual. In this paper we describe a case study with forty five professional programmers and test engineers to experimentally assess the tool-based approach for maintaining GUIdirected test scripts versus the manual approach. Based on the results of our case study and considering the high cost of the programmers' time and the lower cost of the time of test engineers, and considering that programmers often modify GAP objects in the process of developing software we recommend organizations to supply programmers with testing tools that enable them to fix test scripts faster so that these scripts can unit test software. The other side of our recommendation is that experienced test engineers are likely to be as productive with the manual approach as with the tool-based approach, and we consequently recommend that organizations do not need to provide each tester with an expensive tool license to fix test scripts.",,"Black-box testing; Experimental assessment; High costs; Lower cost; Main mode; Perceived benefits; Personal experience; Professional programmers; Test engineers; Test scripts; Testing process; Testing tools; Unit tests; Computer software; Computer software maintenance; Graphical user interfaces; Research; Test facilities; Testing",,,,,,,,"The economic impacts of inadequate infrastructure for software testing (2002) Planning Report 02-3. NIST, , May; Ball, T., On the limit of control flow analysis for regression test selection (1998) Proceedings of ISSTA-98, pp. 134-142. , volume 23, 2 of ACM Software Engineering Notes, New York, Mar.2-5; Ballou, M.-C., Worldwide distributed automated software quality tools: 2007-2011 forecast and 2006 vendor shares: Dominating quality (2007) IDC Report 210132, 1. , Dec; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) ICSE '05, pp. 571-579. , New York, NY, USA; Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) FOSE '07: 2007 Future of Software Engineering, pp. 85-103. , Washington, DC, USA, IEEE Computer Society; Bible, J., Rothermel, G., Rosenblum., D.S., A comparative study of coarse and fine-grained safe regression test-selection techniques (2001) ACMTrans. Softw. Eng. Methodol., 10 (2), pp. 149-183; Binkley, D., Reducing the cost of regression testing by semantics guided test case selection (1995) ICSM, pp. 251-263. , In G. Caldiera and K. Bennett, editors, Washington, Oct; Do, H., Rothermel, G., An empirical study of regression testing techniques incorporating context and lifetime factors and improved cost-benefit models (2006) FSE'06, pp. 141-151; Dustin, E., Rashka, J., Paul., J., (2004) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley, September; Elbaum, S.G., Malishevsky, A.G., Rothermel, G., Prioritizing test cases for regression testing (2000) ISSTA' 00, pp. 102-112; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison- Wesley, September; Graves, T.L., Harrold, M.J., Kim, J.-M., Porter, A., Rothermel, G., An empirical study of regression test selection techniques (2001) ACM Transactions on Software Engineering and Methodology, 10 (2), pp. 184-208. , DOI 10.1145/367008.367020; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving GUI-directed test scripts (2009) ICSE '09, , New York, NY, USA; Harrold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions of Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Kaner, C., Improving the maintainability of automated test suites (1997) Software QA, 4 (4); Kim, J.-M., Porter., A.A., A history-based test prioritization technique for regression testing in resource constrained environments (2002) ICSE, pp. 119-129; Kim, J.-M., Porter, A.A., Rothermel, G., An empirical study of regression test application frequency (2000) ICSE'00, pp. 126-135; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1). , 21-31, Jan; Li, K., Wu., M., (2004) Effective GUI Testing Automation: Developing An Automated GUI Testing Tool, , Sybex Publications, November; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces., , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the ESEC and FSE-11, pp. 118-127. , Sept; Myers, B.A., (1993) Why Are Human-computer Interfaces Difficult to Design and Implement?, , Technical report, Pittsburgh, PA, USA; Ren, X., Shah, F., Tip, F., Ryder, B.G., Chesley., O., Chianti: A tool for change impact analysis of java programs (2004) OOPSLA, pp. 432-448; Rothermel, G., Elbaum, S.G., Malishevsky, A.G., Kallakuri, P., Davia, B., The impact of test suite granularity on the cost-effectiveness of regression testing (2002) ICSE'02, pp. 130-140; Rothermel, G., Harrold, M.J., Empirical studies of a safe regression test selection technique (1998) IEEE Trans. Software Eng., 24 (6), pp. 401-419; Rothermel, G., Untch, R.H., Chu, C., Harrold., M.J., Test case prioritization: An empirical study (1999) ICSM '99: Proceedings of the IEEE International Conference on SoftwareMaintenance, pp. 179-188. , Washington, DC, USA, IEEE Computer Society; Santelices, R.A., Chittimalli, P.K., Apiwattanapong, T., Orso, A., Harrold, M.J., Test-suite augmentation for evolving software (2008) ASE, pp. 218-227; Sirkin, R.M., (2005) Statistics for the Social Sciences, , Sage Publications, third edition, August; Wohlin, C., Runeson, P., Host, M., (2000) Experimentation In Software Engineering: An Introduction, , Springer","Grechanik, M.; Accenture Technology Labs, Chicago IL 60601, United States; email: mark.grechanik@accenture.com",,,,"2009 IEEE International Conference on Software Maintenance, ICSM 2009","20 September 2009 through 26 September 2009","Edmonton, AB",78644,,9781424448289,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-70849120782
"Xie Q., Grechanik M., Fu C., Cumby C.","35761589700;55904114500;7402803185;7801359589;","GUIDE: A GUI DifferEntiator",2009,"IEEE International Conference on Software Maintenance, ICSM",,, 5306286,"395","396",,10,"10.1109/ICSM.2009.5306286","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70849119932&doi=10.1109%2fICSM.2009.5306286&partnerID=40&md5=3590d547ced639e70062679a223d71c6","Accenture Technology Labs, Chicago, IL 60601, United States","Xie, Q., Accenture Technology Labs, Chicago, IL 60601, United States; Grechanik, M., Accenture Technology Labs, Chicago, IL 60601, United States; Fu, C., Accenture Technology Labs, Chicago, IL 60601, United States; Cumby, C., Accenture Technology Labs, Chicago, IL 60601, United States","Applications with Graphical User Interfaces (GUIs) are ubiquitous. Nontrivial GUI-based applications (GAPs) evolve frequently, and understanding how GUIs of different versions of GAPs differ is crucial for various tasks such as testing and project effort estimation. We offer a novel approach for comparing GUIs. We built a tool called GUI DifferEntiator (GUIDE) that allows users to visualize differences between GUIs of running GAPs automatically, so that the identified changes can be served as guidance to test the new release of th e GAP or to estimate the effort of a project.",,"Differentiators; Project effort estimation; Computer software; Computer software maintenance; Graphical user interfaces",,,,,,,,"Section 508 of the Rehabilitation Act, , http://www.accessboard.gov/508.htm; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, 2nd edition; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) ICSE '05, pp. 571-579. , ACM; Boehm, B.W., Gray, T.E., Seewaldt, T., Prototyping vs. Specifying: A multi-project experiment (1984) ICSE '84, pp. 473-484. , IEEE Press; Kaner, C., Improving the maintainability of automated test suites (1997) Software QA, 4 (4); Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) FSE'03, pp. 118-127. , Sept","Xie, Q.; Accenture Technology Labs, Chicago, IL 60601, United States; email: qing.xie@accenture.com",,,,"2009 IEEE International Conference on Software Maintenance, ICSM 2009","20 September 2009 through 26 September 2009","Edmonton, AB",78644,,9781424448289,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-70849119932
"Hjort U.H., Illum J., Larsen K.G., Petersen M.A., Skou A.","35219050200;35186125300;7202662806;35219201400;55886824400;","Model-based GUI testing using UPPAAL at Novo Nordisk",2009,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","5850 LNCS",,,"814","818",,1,"10.1007/978-3-642-05089-3_53","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70649096933&doi=10.1007%2f978-3-642-05089-3_53&partnerID=40&md5=6b4633ae6cbdb8855e9b3f7c99431024","Department of Computer Science, Aalborg University, Denmark; Novo Nordisk A/S, Hillerød, Denmark","Hjort, U.H., Novo Nordisk A/S, Hillerød, Denmark; Illum, J., Department of Computer Science, Aalborg University, Denmark; Larsen, K.G., Department of Computer Science, Aalborg University, Denmark; Petersen, M.A., Novo Nordisk A/S, Hillerød, Denmark; Skou, A., Department of Computer Science, Aalborg University, Denmark","This paper details a collaboration between Aalborg University and Novo Nordiskin developing an automatic model-based test generation tool for system testing of the graphical user interface of a medical device on an embedded platform. The tool takes as input an UML Statemachine model and generates a test suite satisfying some testing criterion, such as edge or state coverage, and converts the individual test case into a scripting language that can be automatically executed against the target. The tool has significantly reduced the time required for test construction and generation, and reduced the number of test scripts while increasing the coverage. © 2009 Springer-Verlag Berlin Heidelberg.",,"Aalborg University; Automatic models; Embedded platforms; GUI testing; Medical Devices; Model-based; Novo nordisk; Scripting languages; State coverage; State machine models; System testing; Test case; Test scripts; Testing criteria; Embedded systems; Formal methods; Graphical user interfaces; Java programming language; Testing",,,,,,,,"Behrmann, G., Brinksma, E., Hendriks, M., Mader, A., Scheduling lacquer production by reachability analysis - a case study (2005) Workshop on Parallel and Distributed Real-Time Systems, , IEEE Computer Society, Los Alamitos; Behrmann, G., David, A., Larsen, K.G.: A tutorial on UPPAAL. In: Bernardo, M., Corradini, F. (eds.) SFM-RT 2004. LNCS, 3185, pp. 200-236. Springer, Heidelberg (2004); Behrmann, G., Larsen, K.G., Rasmussen, J.I., Optimal scheduling using priced timed automata (2005) ACM SIGMETRICS Perform. Eval. Rev, 32 (4), pp. 34-40; (2009), http://www.reactive-systems.com, Reactis by Reactive Systems Inc, July; Cassez, F., Jessen, J.J., Larsen, K.G., Raskin, J.-F., Reynier, P.-A., Automatic synthesis of robust and optimal controllers - an industrial case study (2009) LNCS, 5469, pp. 90-104. , In: HSCC, Springer, Heidelberg; (2003) Model Driven Architecture: Applying MDA to Enterprise Computing, , Frankel, D.S, ed, John Wiley & Sons, Chichester; Jessen, J.J., Rasmussen, J.I., Larsen, K.G., David, A., Guided controller synthesis for climate controller using UPPAAL TIGA (2007) LNCS, 4763, pp. 227-240. , Raskin, J.-F, Thiagarajan, P.S, eds, FORMATS 2007, Springer, Heidelberg; (2009), http://www.smartesting.com, July","Hjort, U. H.; Novo Nordisk A/S, Hillerød, Denmark",,"FME;SAP;SPRINGER",,"2nd World Congress on Formal Methods, FM 2009","2 November 2009 through 6 November 2009","Eindhoven",78798,03029743,3642050883; 9783642050886,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-70649096933
"Navarro P.L.M., Ruiz D.S., Perez G.M.","36521389600;57197985146;7203067256;","Automated GUI testing validation guided by annotated use cases",2009,"INFORMATIK 2009 - Im Focus das Leben, Beitrage der 39. Jahrestagung der Gesellschaft fur Informatik e.V. (GI)",,,,"2796","2804",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84874339867&partnerID=40&md5=12111316311a013a46263219bb90f2c7","Departamento de Ingeniería de la Informacion y Las Comunicaciones, Departamento de Ingeniería y Tecnología de Computadores, University of Murcia, 30.071 Murcia, Spain","Navarro, P.L.M., Departamento de Ingeniería de la Informacion y Las Comunicaciones, Departamento de Ingeniería y Tecnología de Computadores, University of Murcia, 30.071 Murcia, Spain; Ruiz, D.S., Departamento de Ingeniería de la Informacion y Las Comunicaciones, Departamento de Ingeniería y Tecnología de Computadores, University of Murcia, 30.071 Murcia, Spain; Perez, G.M., Departamento de Ingeniería de la Informacion y Las Comunicaciones, Departamento de Ingeniería y Tecnología de Computadores, University of Murcia, 30.071 Murcia, Spain","This paper presents a new approach to Automatic GUI Test Case Generation and Validation: a use case-guided technique to reduce the effort required in GUI modeling and test coverage analysis. The test case generation process is initially guided by use cases describing the GUI behavior, recorded as a series of interactions with the application widgets (e.g. widgets being clicked, data input, etc.) These use cases (modeled as a set of initial test cases) are annotated by the tester to signal interesting variations in widget values (ranges, valid or invalid values) and validation rules with expected results. Annotations and validation rules allow this approach to automatically generate new test cases and expected results, easily expanding the test coverage. Also, the process allows narrowing the GUI model testing to precisely the set of widgets, interactions, and values the tester is interested in.","GUI Testing; GUI Verification; Model Based Testing; Test Case Auto Generation","Auto generations; Data input; GUI testing; Model based testing; Model testing; New approaches; Test case; Test case generation; Test coverage; Test-case generation process; Graphical user interfaces",,,,,,,,"Memon, A., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing ""nightly/daily builds"" of gui applications (2003) IEEE Internacional Conference on Software Maintenance (ICSM'03); Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) IEEE 10th Working Conference on Reverse Engineering (WCRE'03); Memon, A., Xie, Q., Studing the fault-detection effectiveness of gui test cases for rapidly envolving software (2005) IEEE Computer Society; Paiva, A.C.R., Faria, J.C.P., Vidal, R.F.A.M., Towards the integration of visual and formal models for gui testing (2007) Elsevier: Electronic Notes in Theoretical Computer Science, 190, pp. 99-111; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of gui testing using a model-driven approach (2006) Siemens Corporate Research; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source gui applications (2006) IEEE International Conference on Software Maintenance (ICSM'06); Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUIbased software applications (2007) ACM Trans. Softw. Eng. Methodol., 16 (1), p. 4; Yuan, X., Memon, A.M., Using gui run-time state as feedback to generate test cases (2007) 29th International Conference on Software Engineering (ICSE'07); Zybin, R.S., Kuliamin, V.V., Ponomarenko, A.V., Rubanov, V.V., Chernov, E.S., (2008) Automation of Broad Sanity Test Generation, 34. , ISSN 0361-7688, Programming and Computer Software","Navarro, P.L.M.; Departamento de Ingeniería de la Informacion y Las Comunicaciones, , 30.071 Murcia, Spain; email: pedromateo@um.es",,,,"39th Jahrestagung der Gesellschaft fur Informatik e.V. (GI): Im Focus das Leben, INFORMATIK 2009 39th Annual Meeting of the German Informatics Society (GI): Focus on Life, INFORMATIK 2009","28 September 2009 through 2 October 2009","Lubeck",95691,,9783885792482,,,"English","INFORMATIK - Focus Leben, Beitrage Jahrestag. Ges. Inform. e.V. (GI)",Conference Paper,"Final","",Scopus,2-s2.0-84874339867
"Ganov S., Killmar C., Khurshid S., Perry D.E.","24478598800;36701745900;56231912700;7202212797;","Event listener analysis and symbolic execution for testing GUI applications",2009,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","5885 LNCS",,,"69","87",,25,"10.1007/978-3-642-10373-5_4","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650587718&doi=10.1007%2f978-3-642-10373-5_4&partnerID=40&md5=54550986148a76077ce9c4c9c75d5477","University of Texas at Austin, Austin TX, United States","Ganov, S., University of Texas at Austin, Austin TX, United States; Killmar, C., University of Texas at Austin, Austin TX, United States; Khurshid, S., University of Texas at Austin, Austin TX, United States; Perry, D.E., University of Texas at Austin, Austin TX, United States","Graphical User Interfaces (GUIs) are composed of virtual objects, widgets, which respond to events triggered by user actions. Therefore, test inputs for GUIs are event sequences that mimic user interaction. The nature of these sequences and the values for certain widgets, such as textboxes, causes a two-dimensional combinatorial explosion. In this paper we present Barad, a GUI testing framework that uniformly addresses event-flow and data-flow in GUI applications generating tests in the form of event sequences and data inputs. Barad tackles the two-dimensional combinatorial explosion by pruning regions of the event and data input space. For event sequence generation we consider only events with registered event listeners, thus pruning regions of the event input space. We introduce symbolic widgets which allow us to obtain an executable symbolic version of the GUI. By symbolically executing the chain of listeners registered for the events in a generated event sequence we obtain data inputs, thus pruning regions in the data input space. Barad generates fewer tests and improves branch and statement coverage compared to traditional GUI testing techniques. © Springer-Verlag Berlin Heidelberg 2009.","GUI testing; Symbolic execution; Test input generation","Combinatorial explosion; Data input; Dataflow; Event sequence; GUI applications; GUI testing; Input space; Statement coverage; Symbolic execution; Test inputs; User action; User interaction; Virtual objects; Formal methods; Testing; Two dimensional; Graphical user interfaces",,,,,,,,"ASM: Java Bytecode Manipulation and Analysis Framework, , http://asm.objectweb.org/; Choco: Java Library for Constraint Solving, , http://sourceforge.net/projects/choco/; Dweyer, M., Carr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) ESEC 1997 and ESEC-FSE 1997, pp. 244-261. , Jazayeri, M. (ed.), LNCS, vol. 1301, Springer, Heidelberg; Emma: Java Code Coverage Tool, , http://emma.sourceforge.net/; Ganov, S., Killmar, C., Khurshid, S., Perry, D., Test generation for graphical user interfaces based on symbolic execution (2008) AST; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) ICSE; King, J., Symbolic execution and program testing (1976) Communications of the ACM; Lori, C., A system to generate test data and symbolically execute programs (1976) IEEE Transactions on Software Engineering; Memon, A., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. Thesis, University of Pittsburgh; Memon, A., Using tasks to automate regression testing of GUIs (2004) AIA; Memon, A., Banarjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WRCE; Memon, A., Banarjee, I., Nagarajan, A., DART: A framework for regression testing nightly/daily builds of GUI applications (2003) ICSM; Memon, A., Banarjee, I., Nagarajan, A., What test oracle should i use for effective GUI testing? (2003) ASE; Memon, A., McMaster, S., Call stack coverage for gui test-suite reduction (2006) ISSRE; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) PLDI; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C (2005) ESEC/FSE 2005; Ramamoorthy, V., Siu-Bun, H., Chen, W., On the automated generation of program test data (1976) IEEE TSE; Shehady, R., Siewiorek, D., A method to automate user interface testing using variable finite state machines (1997) FTCS; Shannon, D., Hajra, S., Lee, A., Zhan, D., Khurshid, S., Abstracting symbolic execution with string analysis (2007) Taicpart-Mutation; SWT: The Standard Widget Toolkit, , http://www.eclipse.org/SWT; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) ISSRE; Xie, Q., Atif, M., Using a pilot study to derive a GUI model for automated testing (2008) TOSEM; Zhang, J., Xu, C., Wang, X., Path-oriented test data generation using symbolic execution and constraint solving techniques (2004) SEFM","Ganov, S.; University of Texas at Austin, Austin TX, United States; email: svetoslavganov@mail.utexas.edu",,,,"11th International Conference on Formal Engineering Methods, ICFEM 2009","9 December 2009 through 12 December 2009","Rio de Janeiro",83110,03029743,3642103723; 9783642103728,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-78650587718
"Chinnapongse V., Lee I., Sokolsky O., Wang S., Jones P.L.","36696027900;36071144900;6701505144;57191711360;7408263210;","Model-based testing of GUI-driven applications",2009,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","5860 LNCS",,,"203","214",,15,"10.1007/978-3-642-10265-3_19","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650464475&doi=10.1007%2f978-3-642-10265-3_19&partnerID=40&md5=b2725c9d2a12799242bae0d6d7e85fb9","University of Pennsylvania, United States; U.S. Food and Drug Administration, United States","Chinnapongse, V., University of Pennsylvania, United States; Lee, I., University of Pennsylvania, United States; Sokolsky, O., University of Pennsylvania, United States; Wang, S., University of Pennsylvania, United States; Jones, P.L., U.S. Food and Drug Administration, United States","While thorough testing of reactive systems is essential to ensure device safety, few testing methods center on GUI-driven applications. In this paper we present one approach for the model-based testing of such systems. Using the AHLTA-Mobile case study to demonstrate our approach, we first introduce a high-level method of modeling the expected behavior of GUI-driven applications. We show how to use the NModel tool to generate test cases from this model and present a way to execute these tests within the application, highlighting the challenges of using an API-geared tool in a GUI-based setting. Finally we present the results of our case study. © IFIP International Federation for Information Processing 2009.",,"High-level methods; Model based testing; Reactive system; Test case; Testing method; Device safeties; High-level methods; Model based testing; Reactive system; Test case; Testing method; Application programming interfaces (API); Embedded software; Graphical user interfaces; Safety testing; Application programming interfaces (API); Embedded systems; Graphical user interfaces; Model checking; Embedded systems; Safety testing",,,,,,,,"Alur, R., Arney, D., Gunter, E.L., Lee, I., Lee, J., Nam, W., Pearce, F., Zhou, J., Formal specifications and analysis of the computer-assisted resuscitation algorithm (CARA) infusion pump control system (2004) Software Tools for Technology Transfer, 5 (4), pp. 308-319; Medical Communications for Combat Casualty Care, , https://www.mc4.army.mil/AHLTA-Mobile.asp, AHLTA-Mobile fact sheet. Web Site; Arney, D., Jetley, R., Jones, P., Lee, I., Sokolsky, O., Formal methods based development of a PCA infusion pump reference model: The generic infusion pump (GIP) project (2007) Joint Workshop on High-confidence Medical Devices, Software and Systems and Medical Device Plug-and-Play Interoperability, pp. 23-33. , July 2007; Brooks, P., Memon, A.M., Automated GUI testing guided by usage profiles (2007) Proceedings of the 22nd IEEE International Conference on Automated Software Engineering (ASE 2007), , November; Cheng, K.T., Krishnakumar, A.S., Automatic functional test generation using the extended finite state machine model (1993) Proceedings of the 30th International Conference on Design Automation (DAC 1993), pp. 86-91. , June 1993; (2009) NModel, , http://www.codeplex.com/NModel, Microsoft Corporation. website; Jacky, J., Veanes, M., Campbell, C., Schulte, W., (2008) Model-based Software Testing and Analysis with C#, , Cambridge University Press, Cambridge; Jard, C., Jéron, T., TGV: Theory, principles and algorithms. A tool for the automatic synthesis of conformance test cases for non-deterministic reactive systems (2004) Software Tools for Technology Transfer; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2006) FATES 2005, pp. 16-31. , Grieskamp, W. Weise, C. (eds.), LNCS, vol. 3997, Springer, Heidelberg; Legrenzi, P., Girotto, V., Mental models in reasoning and decision making (1996) Mental Models in Cognitive Science, pp. 95-118. , Garnham, A. Oakhill, J. (eds.); Lewis, C., A model of mental model construction (1986) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI 1986), pp. 306-313; Paiva, A., Faria, J., Tillmann, N., Vidal, R., A model-to-implementation mapping tool for automated model-based GUI testing (2005) ICFEM 2005, pp. 450-464. , Lau, K.-K. Banach, R. (eds.), LNCS, vol. 3785, Springer, Heidelberg; Reza, H., Endapally, S., Grant, E.S., A model-based approach for testing gui using hierarchical predicate transition nets (2007) ITNG, pp. 366-370; Silva, J.L., Campos, J.C., Paiva, A.C.R., Model-based user interface testing with spec explorer and concurtasktrees (2008) Electronic Notes in Theoretical Computer Science, 208, pp. 77-93; Tretmans, J., Test generation with inputs, outputs and repetitive quiescence (1996) Software - Concepts and Tools, 17 (3), pp. 103-120; AHLTA-Mobile User Manual, , U.S. Army Medical Research & Material Command, Mobile Computing Group, Telemedicine and Advanced Technology Research Center, Fort Detrick, Maryland., v2.2.61; Wasserman, A.I., Extending state transition diagrams for the specification of human-computer interaction (1985) IEEE Transactions on Software Engineering, 11 (8), pp. 699-713; Xie, Q., Memon, A., Model-based testing of community-driven driven open source GUI applications (2006) 22nd International Conference on Software Maintenance (ICSM 2006), pp. 145-154","Chinnapongse, V.; University of PennsylvaniaUnited States; email: vichi@cis.upenn.edu",,,,"7th IFIP WG 10.2 International Workshop on Software Technologies for Embedded and Ubiquitous Systems, SEUS 2009","16 November 2009 through 18 November 2009","Newport Beach, CA",83037,03029743,3642102646; 9783642102646,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze, Green",Scopus,2-s2.0-78650464475
"Pei S., Wu C., Ding Y., Wu B.","20434779000;57206251765;9243597700;7403590589;","Effective GUI-oriented automated testing platform for pervasive computing software environment",2009,"2009 Joint Conferences on Pervasive Computing, JCPC 2009",,, 5420122,"557","560",,,"10.1109/JCPC.2009.5420122","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951267306&doi=10.1109%2fJCPC.2009.5420122&partnerID=40&md5=e9a03332f93cd72f5d82cf61fbbc8f07","Dept. of Computer Science and Engineering, University of Shanghai for Science and Technology, Shanghai 200093, China; Shanghai Key Laboratory of Integrate Administration Technologies for Information Security, Shanghai 200240, China; School of Computer Science, Fudan University, Shanghai 200433, China","Pei, S., Dept. of Computer Science and Engineering, University of Shanghai for Science and Technology, Shanghai 200093, China; Wu, C., Dept. of Computer Science and Engineering, University of Shanghai for Science and Technology, Shanghai 200093, China; Ding, Y., Dept. of Computer Science and Engineering, University of Shanghai for Science and Technology, Shanghai 200093, China, Shanghai Key Laboratory of Integrate Administration Technologies for Information Security, Shanghai 200240, China; Wu, B., School of Computer Science, Fudan University, Shanghai 200433, China","Graphical User Interfaces (GUIs) are critical components of software environment for pervasive computing and applications. A systemic solution called GUI Testing Architecture (GUITA) for automated testing oriented GUIs is proposed in this paper, which is built on the platform that integrating ATS and WinRunner™ by a socket interface. By parsing configure file and loading GUI map successfully, it can invoke and accomplish the corresponding test case automatically. The solution is verified as an effective and feasible approach to GUI-oriented automated regression testing, which greatly improves the efficiency and profit over traditional manual testing. ©2009 IEEE.","ATS; Automated testing; Automated testing system; GUI testing","Automated regression testing; Automated testing; Critical component; GUI testing; Pervasive computing; Software environments; Test case; Automation; Instruments; Profitability; Software testing; Graphical user interfaces",,,,,,,,"Graves, T.L., Harrold, M.J., Kim, J.-M., Porter, A., Rothermel, G., An empirical study of regression test selection techniques (2001) ACM Transactions on Software Engineering and Methodology, 10 (2), pp. 184-208. , DOI 10.1145/367008.367020; Fewster, M., (1999) Software Test Automation, , Addison Wesley, New York; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Memon, A.M., Automated test oracles for GUIs (2000) ACM SIGSOFT Software Engineering Notes, 25 (6), pp. 30-39; Xie, P.Q., Atif, M.M., Designing and Comparing Automated Test Oracles for GUI-Based Software Applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1), pp. 1-36; Vieira, M., Automation of GUI Testing Using a Model-driven Approach Proceedings of the 2006 International Workshop on Automation of Software Test, 2006, pp. 9-14; Pei, S., Wu, B., Zhu, K., Yu, Q., Novel Software Automated Testing System Based on J2EE (2007) Tsinghua Science and Technology, 12 (SUPPL. 1), pp. 51-56. , DOI 10.1016/S1007-0214(07)70008-1, PII S1007021407700834; Pei, S., Wu, B., Novel Collaborative Automated Testing Framework Using DDF Proceedings of 4th International Conference on Cooperative Design, Visualization, and Engineering(CDVE), 2007, pp. 385-395; Welch, B.B., (1997) Practical Programming in Tcl and Tk, , Prentice Hall PTR, New Jersey; (2000) TSL Online Reference, , Mercury Interactive Inc., Mercury Interactive Inc","Pei, S.; Dept. of Computer Science and Engineering, , Shanghai 200093, China; email: swpei@usst.edu.en",,,,"2009 Joint Conferences on Pervasive Computing, JCPC 2009","3 December 2009 through 5 December 2009","Tamsui, Taipei",79948,,9781424452279,,,"English","Jt. Conf. Pervasive Comput., JCPC",Conference Paper,"Final","",Scopus,2-s2.0-77951267306
"Merchant C., Tellez M., Venkatesan J.","36012021000;57197991553;36012228700;","A browser agnostic web application UI test framework: Motivation, architecture, and design",2009,"ITNG 2009 - 6th International Conference on Information Technology: New Generations",,, 5070710,"748","751",,1,"10.1109/ITNG.2009.97","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951135037&doi=10.1109%2fITNG.2009.97&partnerID=40&md5=426202faa1af2076212ee69369269fff","Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States","Merchant, C., Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States; Tellez, M., Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States; Venkatesan, J., Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States","There are several approaches available for creating Web application UI test automation. This paper describes the motivation for creating a new Web application test framework, and briefly describes the architecture and design of the framework. The framework is browser agnostic, easy to use, employs a high level programming language and development environment allowing integrated debugging and object oriented design, permits low level access to UI controls, and is resilient to UI changes in the application under test. The architecture of the framework features a two-layer design which isolates all browser specific functionality, allowing test scenario developers to focus on testing related issues rather than on implementation details. The architecture of the framework can be used with most modern operating system platforms. Early experience with the framework has been promising. © 2009 IEEE.","Automatic testing; Programming environments; Software libraries; Software quality; Software testing","Application under tests; Development environment; High-level programming language; Low level; Object oriented design; Operating systems; Programming environment; Software libraries; Software Quality; Test Automation; Test framework; Test scenario; Two layers; WEB application; Automatic testing; Computer operating systems; Computer software selection and evaluation; Design; Information technology; Motivation; Software testing; World Wide Web; Object oriented programming",,,,,,,,"Kung, D.C., Liu, C.H., Hsia, P., An Object-Oriented Web Test Model for Testing Web Applications Proceedings of the First Asia-Pacific Conference on Software Quality, 2000, pp. 111-120; McCaffrey, J.D., Lightweight UI Test Automation for ASP.NET Web Applications (2005) MSDN Magazine, 20 (4), pp. 35-40. , April; McCaffrey, J.D., Low-Level Web Application UI Test Automation (2005) MSDN Magazine, 20 (10), pp. 37-42. , October; Meszaros, G., Agile Regression Testing using Record and Playback Conference on Object Oriented Programming Systems Languages and Applications, 2003, pp. 353-360; Tellez, M., Venkatesan, J., Merchant, C., Web UI Automation - A Browser Agnostic Harness for Web UI Testing Proceedings of the Pacific Northwest Software Quality Conference, 2008, pp. 371-395","Merchant, C.; Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States",,"Premier Hall for Advancing Science and Engineering",,"6th International Conference on Information Technology: New Generations, ITNG 2009","27 April 2009 through 29 April 2009","Las Vegas, NV",79848,,9780769535968,,,"English","ITNG - Int. Conf. Inf. Technol.: New Gener.",Conference Paper,"Final","",Scopus,2-s2.0-77951135037
"Triou E., Abbas Z., Kothapalle S.","25825627700;36011599900;35810789800;","Declarative testing: A paradigm for testing software applications",2009,"ITNG 2009 - 6th International Conference on Information Technology: New Generations",,, 5070714,"769","773",,5,"10.1109/ITNG.2009.85","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951114167&doi=10.1109%2fITNG.2009.85&partnerID=40&md5=cfaa8ffe6bdb3bb38bd0478ff3c0d79f","Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States","Triou, E., Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States; Abbas, Z., Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States; Kothapalle, S., Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States","Traditional techniques to test a software application through the application's graphical user interface have a number of weaknesses. Manual testing is slow, expensive, and does not scale well as the size and complexity of the application increases. Software test automation which exercises an application through the application's UI using an API set can be difficult to maintain. We propose a software testing paradigm called declarative testing. In declarative testing, a test scenario focuses on what to accomplish rather than on the imperative details of how to manipulate the state of an application under test and verify the final application state against an expected state. Declarative testing is a test design paradigm which separates test automation code into conceptual Answer, Executor, and Verifier entities. Preliminary experience with declarative testing suggests that the modular characteristics of the paradigm may significantly enhance the ability of a testing effort to keep pace with the evolution of a software application during the application's development process. © 2009 IEEE.","Automatic testing; Programming environments; Programming theory; Software quality; Software testing","Application under tests; Development process; Programming environment; Programming environments; Software applications; Software Quality; Software test automation; Test Automation; Test designs; Test scenario; Testing effort; Testing software; Traditional techniques; Ability testing; Application programming interfaces (API); Automatic testing; Graphical user interfaces; Information technology; Software testing; Computer software selection and evaluation",,,,,,,,"McCaffrey, J.D., Low-Level UI Test Automation (2005) MSDN Magazine, 20 (9), pp. 41-47. , September; McCaffrey, J.D., The Microsoft UI Automation Library (2008) MSDN Magazine, 23 (2), pp. 115-121. , February; McCaffrey, J.D., (2006) .NET Test Automation Recipes: A Problem Solution Approach, , Apress Publishing, New York; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; Offutt, J., Liu, S., Abdurazik, A., Ammann, P., Generating Test Data from State-Based Specifications (2003) Journal of Software Testing, Verification and Reliability, 13 (1), pp. 25-53; Paddison, C., Tibbits, M., Damani, I., A Proposed Architecture for Integrating Accessibility Test Tools (2005) IBM Systems Journal, 44 (3), pp. 537-555; Ruiz, A., Price, Y.W., Test-Driven GUI Development with TestNG and Abbot (2007) IEEE Software, 24 (3), pp. 51-57; Shao, D., Khurshid, S., Perry, D.E., A Case for White-box Testing Using Declarative Specifications Proceedings of the Testing: Academic and Industrial Conference Practice and Research Techniques, 2007, p. 137; (2008) An Automation Layer on Top of UI Automation, , http://www.codeplex.com/white","Triou, E.; Microsoft Corporation, One Microsoft Way, Redmond, WA 98052, United States",,"Premier Hall for Advancing Science and Engineering",,"6th International Conference on Information Technology: New Generations, ITNG 2009","27 April 2009 through 29 April 2009","Las Vegas, NV",79848,,9780769535968,,,"English","ITNG - Int. Conf. Inf. Technol.: New Gener.",Conference Paper,"Final","",Scopus,2-s2.0-77951114167
"Li M., Wang J., Damata L.","57219136054;55878854200;35810035300;","TAO project: An intuitive application UI test toolset",2009,"ITNG 2009 - 6th International Conference on Information Technology: New Generations",,, 5070719,"796","800",,,"10.1109/ITNG.2009.86","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951113782&doi=10.1109%2fITNG.2009.86&partnerID=40&md5=fc62e2d5a991137ac62a21e12cdd4d39","Microsoft China, China; Microsoft Corporation, United States","Li, M., Microsoft China, China; Wang, J., Microsoft China, China; Damata, L., Microsoft Corporation, United States","This paper describes a GUI testing toolset. This toolset was designed to augment the primary testing activities found in a normal GUI testing cycle. It includes an automatic test case and test automation generator, static binary analysis, a GUI change tracking tool and a comprehensive reporting mechanism. An empirical study on a complex system demonstrates that the toolset could greatly reduce the effort spent on developing test automation and tracking GUI changes during a software products development cycle. © 2009 IEEE.","Automatic testing; Programming environments; Programming theory; Software quality; Software testing","Automatic test; Binary analysis; Change tracking; Complex systems; Development cycle; Empirical studies; GUI testing; Programming environment; Programming environments; Software products; Software Quality; Test Automation; Toolsets; Automatic testing; Graphical user interfaces; Information technology; Software testing; Computer software selection and evaluation",,,,,,,,"Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. Dissertation, Department of Computer Science, University of Pittsburgh, July; Binkley, D., Semantics Guided Regression Test Cost Reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516. , Aug; Hackner, D., Memon, A.M., Test Case Generator for GUITAR ICSE '08: Research Demonstration Track: International Conference on Software Engineering, Washington D.C., USA, 2008; Microsoft Management Console, , http://technet.microsoft.com/en-us/library/bb742441.aspx; Lao-Tzu, Ni, H.C., (1995) The Complete Works of Lao Tzu: Tao Teh Ching and Hua Hu Ching / Translation and Elucidation by Hua-Ching, , Seven Star Communication Group Inc. Los Angeles, CA; McCaffrey, J.D., The Microsoft UI Automation Library (2008) MSDN Magazine, 23 (2), pp. 115-121. , February; McCaffrey, J.D., (2006) .NET Test Automation Recipes: A Problem Solution Approach, , Apress Publishing, New York","Li, M.; Microsoft ChinaChina",,"Premier Hall for Advancing Science and Engineering",,"6th International Conference on Information Technology: New Generations, ITNG 2009","27 April 2009 through 29 April 2009","Las Vegas, NV",79848,,9780769535968,,,"English","ITNG - Int. Conf. Inf. Technol.: New Gener.",Conference Paper,"Final","",Scopus,2-s2.0-77951113782
"Takala T., Maunumaa M., Katara M.","35079469200;14056610700;7801543558;","An adapter framework for keyword-driven testing",2009,"Proceedings - International Conference on Quality Software",,, 5381466,"201","210",,5,"10.1109/QSIC.2009.35","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77950625334&doi=10.1109%2fQSIC.2009.35&partnerID=40&md5=76df24b09ffd95e3403618db21bfb1f1","Department of Software Systems, Tampere University of Technology, Finland","Takala, T., Department of Software Systems, Tampere University of Technology, Finland; Maunumaa, M., Department of Software Systems, Tampere University of Technology, Finland; Katara, M., Department of Software Systems, Tampere University of Technology, Finland","Tool adaptation is a reoccurring problem in model-based testing. Tests can be generated based on formal models, but they also need to be executed on the actual SUTs. We introduce a generic open-source adapter framework for facilitating the integration of model-based test generators with test execution tools. The framework is based on the popular keyword concept and is seen as especially applicable in online testing, which requires continuous message passing between the generator and SUT. The architecture is based on plug-ins, similar to the Eclipse integrated development environment, enabling easy extension. We also discuss experiences in using the adapter framework to integrate our test generator for S60 smartphone GUI testing with the ASTE tool from Nokia. © 2009 IEEE.",,"Eclipse Integrated Development Environment; Formal model; GUI testing; Model based testing; Model-based test; On-line testing; Open-source; Plug-ins; Smart phones; Test execution; Computer software; Message passing; Web services",,,,,,,,"Utting, M., Legeard, B., (2007) Practical Model-Based Testing - A Tools Approach, , Morgan Kaufmann; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools., , Addison-Wesley; Buwalda, H., Action figures (2003) STQE Magazine, pp. 42-47. , March/April; (2009), http://www.eclipse.org/, Cited Feb; Nikkanen, M., (2005) Use Case Based Automatic User Interface Testing in Mobile Devices, , Master's Thesis, Helsinki University of Technology, May; Jääskeläinen, A., Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Takala, T., Virtanen, H., Automatic GUI test generation for smartphone applications - An evaluation (2009) Proc. Software Engineering in Practice Track of the 31st International Conference on Software Engineering (ICSE 2009), pp. 112-122. , IEEE CS, May (companion volume); (2008) OSGi Service Platform Core Specification, Release 4.1, , http://www.osgi.org/Specifications/HomePage, Available at Cited Feb; (2009), http://www.osgi.org/, Cited Feb; McAffer, J., Lemieux, J.-M., (2006) Eclipse Rich Client Platform, , Addison-Wesley; Nachmanson, L., Veanes, M., Schulte, W., Tillmann, N., Grieskamp, W., Optimal strategies for testing nondeterministic systems (2004) ISSTA '04: Proc. 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 55-64. , ACM, Jul; Hartman, A., Katara, M., Olvovsky, S., Choosing a test modeling language: A survey (2007) Proc. Haifa Verification Conference 2006, (4383). , ser. LNCS Springer; Jääskeläinen, A., Katara, M., Kervinen, A., Heiskanen, H., Maunumaa, M., Pääkkönen, T., Model-based testing service on the web (2008) Proc. TESTCOM/FATES 2008, (5047), pp. 38-53. , ser. LNCS. Springer, Jun; Jääskeläinen, A., Kervinen, A., Katara, M., Creating a test model library for GUI testing of smartphone applications (2008) Proc. 8th International Conference on Quality Software (QSIQ 2008) (Short Paper), pp. 276-282. , IEEE CS, Aug; (2009), http://java.sun.com/javase/, Cited Feb; (2009) Mobile Information Device Profile, , http://java.sun.com/products/midp/, Cited Feb; (2009), http://felix.apache.org/site/index.html, Cited Feb; (2009), http://www.knopflerfish.org/, Cited Feb; (2009), http://www.eclipse.org/equinox/, Cited Feb","Takala, T.; Department of Software Systems, Finland; email: firstname.lastname@tut.fi",,"Software Engineering Society of Korean;Institute for Information Scientists and Engineers;IEEE Reliability Society;KAIST (Korea Advanced Institute of Science and Technology);Korea Information Promotion Agency;Samsung SDS",,"9th International Conference on Quality Software, QSIC 2009","24 August 2009 through 25 August 2009","Jeju",79738,15506002,9780769538280,,,"English","Proc. Int. Conf. Qual. Softw.",Conference Paper,"Final","",Scopus,2-s2.0-77950625334
"Grechanik M., Xie Q., Fu C.","55904114500;35761589700;7402803185;","Maintaining and evolving GUI-directed test scripts",2009,"Proceedings - International Conference on Software Engineering",,, 5070540,"408","418",,104,"10.1109/ICSE.2009.5070540","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949894202&doi=10.1109%2fICSE.2009.5070540&partnerID=40&md5=ac4ab2260c6f13d08e03df1c330c74dc","Accenture Technology Labs., Chicago, IL, United States","Grechanik, M., Accenture Technology Labs., Chicago, IL, United States; Xie, Q., Accenture Technology Labs., Chicago, IL, United States; Fu, C., Accenture Technology Labs., Chicago, IL, United States","Since manual black-box testing of GUI-based APplications (GAPs) is tedious and laborious, test engineers create test scripts to automate the testing process. These test scripts interact with GAPs by performing actions on their GUI objects. An extra effort that test engineers put in writing test scripts is paid off when these scripts are run repeatedly. Unfortunately, releasing new versions of GAPs with modified GUIs breaks their corresponding test scripts thereby obliterating benefits of test automation. We offer a novel approach for maintaining and evolving test scripts so that they can test new versions of their respective GAPs. We built a tool to implement our approach, and we conducted a case study with forty five professional programmers and test engineers to evaluate this tool. The results show with strong statistical significance that users find more failures and report fewer false positives (p < 0.02) in test scripts with our tool than with a flagship industry product and a baseline manual approach. Our tool is lightweight and it takes less than eight seconds to analyze approximately 1KLOC of test scripts © 2009 IEEE.",,"Black-box testing; False positive; Industry products; Professional programmers; Statistical significance; Test Automation; Test engineers; Test scripts; Testing process; Computer software; Graphical user interfaces; Test facilities; Testing",,,,,,,,"Section 508 of the Rehabilitation Act, , http://www.access-board.gov/508.htm; T. Ball. On the limit of control flow analysis for regression test selection. In Proceedings of ISSTA-98, 23,2 of ACM Software Engineering Notes, pages 134-142, New York, Mar.2-5 1998; M.-C. Ballou. Worldwide distributed automated software quality tools: 2007-2011 forecast and 2006 vendor shares: Dominating quality. IDC Report 210132, 1, Dec. 2007; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, 2nd edition; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) ICSE '05, pp. 571-579. , New York, NY, USA; A. Bertolino. Software testing research: Achievements, challenges, dreams. In FOSE '07: 2007 Future of Software Engineering, pages 85-103, Washington, DC, USA, 2007. IEEE Computer Society; Bible, J., Rothermel, G., Rosenblum, D.S., A comparative study of coarse- and fine-grained safe regression test-selection techniques (2001) ACM Trans. Softw. Eng. Methodol, 10 (2), pp. 149-183; Binkley, D., Reducing the cost of regression testing by semantics guided test case selection (1995) ICSM, pp. 251-263. , G. Caldiera and K. Bennett, editors, Washington, Oct; Dustin, E., Rashka, J., Paul, J., (2004) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley, September; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley, September; Harrold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions of Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Kaner, C., Improving the maintainability of automated test suites (1997) Software QA, 4 (4); Kim, J.-M., Porter, A.A., A history-based test prioritization technique for regression testing in resource constrained environments (2002) ICSE, pp. 119-129; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31. , Jan; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the ESEC and FSE-11, pp. 118-127. , Sept; B. A. Myers. Why are human-computer interfaces difficult to design and implement? Technical report, Pittsburgh, PA, USA, 1993; Ren, X., Shah, F., Tip, F., Ryder, B.G., Chesley, O., Chianti: A tool for change impact analysis of java programs (2004) OOPSLA, pp. 432-448; Santelices, R.A., Chittimalli, P.K., Apiwattanapong, T., Orso, A., Harrold, M.J., Test-suite augmentation for evolving software (2008) ASE, pp. 218-227; Sirkin, R.M., (2005) Statistics for the Social Sciences, , Sage Publications, third edition, August; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source GUI applications (2006) ICSM, pp. 145-154","Grechanik, M.; Accenture Technology Labs., Chicago, IL, United States; email: mark.grechanik@accenture.com",,"ACM - Association for Computing Machinery;IEEE;IEEE Computer Society;SIGSOFT - Special Interest Group on Software Engineering",,"2009 31st International Conference on Software Engineering, ICSE 2009","16 May 2009 through 24 May 2009","Vancouver, BC",79629,02705257,9781424434527,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-77949894202
"Li L., Wang D., Shen X., Yang M.","57142735900;57198728846;7402721641;55703285600;","A method for combinatorial explosion avoidance of AI planner and the application on test case generation",2009,"Proceedings - 2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009",,, 5365557,"","",,2,"10.1109/CISE.2009.5365557","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949738272&doi=10.1109%2fCISE.2009.5365557&partnerID=40&md5=9d637c13cfcc4adf331e96f28c594b6b","Changchun Institute of Optics, Fine Mechanics and Physics, Chinese Academy of Sciences, Changchun, China; Graduate University of Chinese Academy of Science, Beijing, China; Computer Center, Liaoning University, Shenyang, China; JiLin Business and Technology College, Information Engineering Branch, Changchun, China","Li, L., Changchun Institute of Optics, Fine Mechanics and Physics, Chinese Academy of Sciences, Changchun, China, Graduate University of Chinese Academy of Science, Beijing, China; Wang, D., Computer Center, Liaoning University, Shenyang, China; Shen, X., Changchun Institute of Optics, Fine Mechanics and Physics, Chinese Academy of Sciences, Changchun, China; Yang, M., JiLin Business and Technology College, Information Engineering Branch, Changchun, China","Combinatorial explosion is a key issue that leads to failures of planning for many planners. To avoid it, we modified the planner of IPP and divided its fact file into several small parts, and the method is called goal-decompounded. We also expanded the arithmetic of IPP. The modified planner we called MF-IPP able to handle multiple fact files, which avoided the combinatorial explosion. We applied the method on the GUI test case generation. The main idea was to produce the initial test case from planner firstly, and then propose a way of solution expanding to reinforce the generation. At last, we compared the performance of the two planners, and the result showed that MF-IPP can avoid the combinatorial explosion well. ©2009 IEEE.","Automated test-case generation; Combinatorial explosion; Goal-decompounded; GUI testing; Intelligent planning; MF-IPP; Solution expending","Automated test; Combinatorial explosion; GUI testing; Intelligent planning; Key issues; Test case; Test case generation; Artificial intelligence; Computer software; Explosions; Explosives; Graphical user interfaces; Pension plans; Testing; Planning",,,,,,,,"Blum, L., Furst, M.L., Fast planning through planning graph analysis (1997) Artificial Intelligence, 90 (1-2), pp. 279-298; Gu, W., Li, X., Zhang, X., Research and Advances on Intelligent Planning in the Graphplan Framework [J] (2005) World Sci-tech R & D, 27 (4), pp. 21-28. , in Chinese; Koehler, J., (1999) Handling of Conditional Effects and Negative Goals in IPP, , Technical Report: report00128. Freiburg: Albert-Ludwigs University; Memon, A.M., Pollack, M.E., Soffa, M.L., A Planning-based Approach to GUI Testing (2000) The 13th International Software/Internet Quality Week; Gupta, M., Bastani, F., Khan, L., Yen, I.L., Rapid Goal-Oriented Automated Software Testing using MEA-Graph Planning (2007) Software Quality Journal, 15 (3), pp. 241-263; Jorgensen, P.C., (2002) Software Testing: A Craftsman's Approach (Second Edition), , Boca Raton: CRC Press LLC, in Chinese","Li, L.; Changchun Institute of Optics, Fine Mechanics and Physics, , Changchun, China; email: xf1590@sina.com",,"IEEE Wuhan Section;Wuhan University;James Madison University;University of Wisconsin at La Crosse;Microsoft Research Asia",,"2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009","11 December 2009 through 13 December 2009","Wuhan",79559,,9781424445073,,,"English","Proc. - Int. Conf. Comput. Intell. Softw. Eng., CiSE",Conference Paper,"Final","",Scopus,2-s2.0-77949738272
"Jin H., Wang S., Chen N.-W., Ye Z.","35756083900;57191712509;26422839200;57199227375;","Finite state machine for automatic GUI testing",2009,"Proceedings - 2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009",,, 5364314,"","",,3,"10.1109/CISE.2009.5364314","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949703801&doi=10.1109%2fCISE.2009.5364314&partnerID=40&md5=e5502188e3929702c4930c44008df022","Computer Science Department, Chengdu University of Information Technology, Chengdu, China","Jin, H., Computer Science Department, Chengdu University of Information Technology, Chengdu, China; Wang, S., Computer Science Department, Chengdu University of Information Technology, Chengdu, China; Chen, N.-W., Computer Science Department, Chengdu University of Information Technology, Chengdu, China; Ye, Z., Computer Science Department, Chengdu University of Information Technology, Chengdu, China","Finite State Machine is an effective method commonly used in software designing and developing. It is also of great value in the process of software testing. As interactive activities with users are more primary for up to date software applications, the implementation of program logic correctness is then the main concern for both the end users and vendors. This issue presents novel automatic software testing with FSM methodology, and the main problems are discussed as follows: firstly, introduces state analytical method often used in software design and development. Secondly, represents operational profiles of the program with the events-states transferring sequences thus is fit for state space analysis. Thirdly, conducts automatic testing process based on previous operational profiles. Lastly, designs experiments to validate the effectiveness of this method. This issue concludes FSA is a very efficient method in testing the inner logic errors in GUI software. ©2009 IEEE.","Automatic testing; Finite state automata; Graphic user interface; Operational profile; Software testing","Analytical method; Efficient method; End users; Finite state automata; Finite state machines; Graphic user interface; GUI software; GUI testing; Logic errors; Operational profile; Program logic; Software applications; Software design and development; State-space analysis; Artificial intelligence; Automatic testing; Computer software selection and evaluation; Contour followers; Finite automata; Graphical user interfaces; Logic circuits; Software testing; Translation (languages); Software design",,,,,,,,"Shaw, M., Garlan, D., (1996) Perstectives On An Emerging Discipline, pp. 1-17. , Software Architecture:, Prentice Hall, Inc; Juristo, N., Moreno, A.M., Introduction: Software Testing Practices in Industry (2006) IEEE trans. Software, 23 (4), pp. 19-21. , July; Weyuker, E.J., Evaluation Techniques for Improving the Quality of Very Large Software Systems in a Cost-effective Way, Elsevier Science Inc (1999) Journal of Systems and Software, 47 (2-3), pp. 97-103; G. Herrin, Linux IP Networking: A Guide to the Implementation and Modification of the Linux Protocol Stack, TR 00-04, 2000. http://www.cs.unh.edu/cnrg/people/gherrin/linux-net.html; R. Stevens, TCP/IP Illustration (Volumn 1): the Protocols, Addison Wesley, 1994, pp. 174-198; Jian, P., Yin, C.L., (2008) Embedded System Design, pp. 19-38. , ChongQing University Press; Vahid, F., Givargis, T., (2002) Embedded System Design: A Unified Hardware/Software Introduction, pp. 191-226. , John Wiley & Sons, Inc; Memon, A., Banerjee, I., Nagarajan, A., What Test Oracle Should I Use for Effective GUI Testing (2003) Proceedings. 18th IEEE International Conference on Automated Software Engineering, pp. 164-173; Petrenko, A., Boroday, S., Groz, R., Confirming Configurations in EFSM (2004) IEEE Transactions on Software Engineering, 30, pp. 29-42; Kung, D., Lu, Y., Venugopalan, N., Hsia, P., Object State Testing and Fault Analysis for Reliable Software Systems (1996) Proceedings 7 th International Symposium on Software Reliability Engineering, pp. 76-85; Sipser, M., (1997) Introduction to the Theory of Computation, pp. 29-44. , PWS Publishing Company; Alur, R., Henzinger, T.A., Automatic Symbolic Verification of Embedded Systems (1996) IEEE Transactions on Software Engineering, 22, pp. 181-201; Woit, D.M., (1994) Operational Profile Specification, Test Case Generation, and Reliability Estimation for Modules, pp. 6-15. , Queen's University, Kingston, Ontario, Canada, pp; Li, N.X., Malaiya, Y.K., On Input Profile Selection For Software Testing (1994) Proceedings 5th International Symposium on Software Reliability Engineering, pp. 196-205; Michael, C., An Analytical Investigation of Software Sensitivity to Operational Profile Changes (1997), pp. 1-10. , Technical Report RSTR-003-97-10, pp; Musa, J.D., Operational Profiles in Software-Reliability Engineering (1993) IEEE Software Magazine, 10 (2), pp. 14-32; Musa, J.D., The Operational Profile in Software Reliability Engineering: An Overview (1992) Proceedings of International Symposium on Software Reliability Engineering, pp. 140-154; Cobb, R.H., Mills, H.D., Engineering Software Under Statistical Quality Control (1990) IEEE transactions on Software, 7 (6), pp. 45-54","Jin, H.; Computer Science Department, , Chengdu, China; email: cn_jh@cuit.edu.cn",,"IEEE Wuhan Section;Wuhan University;James Madison University;University of Wisconsin at La Crosse;Microsoft Research Asia",,"2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009","11 December 2009 through 13 December 2009","Wuhan",79559,,9781424445073,,,"English","Proc. - Int. Conf. Comput. Intell. Softw. Eng., CiSE",Conference Paper,"Final","",Scopus,2-s2.0-77949703801
"Xing X., Jiang F.","24577964200;56875101800;","GUI test case definition with TTCN-3",2009,"Proceedings - 2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009",,, 5364183,"","",,,"10.1109/CISE.2009.5364183","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949691552&doi=10.1109%2fCISE.2009.5364183&partnerID=40&md5=2ce135613af4c384264938dabed3d7cd","Department of Computer Science and Technology, University of Science and Technology of China, Hefei, China","Xing, X., Department of Computer Science and Technology, University of Science and Technology of China, Hefei, China; Jiang, F., Department of Computer Science and Technology, University of Science and Technology of China, Hefei, China","GUI test case definition is the core issue in automatic or semi-automatic GUI testing. We use TTCN-3 language to define GUI test cases. The test specifications under this definition are easy to maintain, evaluate and assess. The time related test specifications 1are covered; few of current works cover this kind of testing. It's easy and flexible to create test oracles by this approach thanks to TTCN-3 template matching mechanisms. Meanwhile the TTCN-3 characteristic of software development independent will steadily push GUI test engineer. The experiment shows the feasibility and flexibility of our approach. ©2009 IEEE.","GUI test; Test case definition; TTCN-3","GUI testing; Semi-automatics; Software development; Template matching mechanism; Test case; Test engineers; Test oracles; Test specifications; Artificial intelligence; Computer software; Graphical user interfaces; Specifications; Template matching; Testing",,,,,,,,"Myers, B.A., User interface software tools (1995) Acm Transactions on Computer-Human Interaction, 2, p. 39; Q. Xie, Developing Cost-Effective Model-Based Techniques for GUI Testing, In proceedings of International Conference of Software Engineer (ICSE'06), May 20-28, 2006; Memon, A.M., A comprehensive framework for testing graphic user interface, (2001), Ph.D. thesis, Department of Computer Science, University of Pittsburgh; Memon, A., Banerjee, I., Nagarajan, A., (2003) What test oracle should I use for effective GUI testing; K.-Y. Cai, L. Zhao, H. Hu, and C.-H. Jiang, On the Test Case Definition for GUI Testing, In proceedings of the Fifth International Conference on Quality Software(QSIC'05), SEP 19-20, 2005; T. T. Suite, http://www.telelogic.com/; http://www.openttcn.com, OpenTTCN; TTworkbench, http://www.testingtech.com; Fan, J., Xiangdong, J., Fanping, Z., Design and Implementation of TTCN-3 Test System (2005) Jisuanji Gongcheng/Computer Engineering; http://mail.ustc.edu.cn/~xxzh/GUI-Testing.rar; Memon, A., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing ""nightly/daily builds"" of GUI applications (2003) International Conference on Software Maintenance, Proceedings, pp. 410-419; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27, pp. 144-155. , Feb; http://jfcunit.sourceforge.net; http://www.mercury.com, WinRunner","Xing, X.; Department of Computer Science and Technology, , Hefei, China; email: xxzh@mail.ustc.edu.cn",,"IEEE Wuhan Section;Wuhan University;James Madison University;University of Wisconsin at La Crosse;Microsoft Research Asia",,"2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009","11 December 2009 through 13 December 2009","Wuhan",79559,,9781424445073,,,"English","Proc. - Int. Conf. Comput. Intell. Softw. Eng., CiSE",Conference Paper,"Final","",Scopus,2-s2.0-77949691552
"Mesbah A., Van Deursen A.","17345931800;7003969355;","Invariant-based automatic testing of Ajax user interfaces",2009,"Proceedings - International Conference on Software Engineering",,, 5070522,"210","220",,141,"10.1109/ICSE.2009.5070522","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77249160785&doi=10.1109%2fICSE.2009.5070522&partnerID=40&md5=d53b1a67c424a111b7fdfabdf84e4d80","Software Engineering Research Group, Delft University of Technology, Netherlands","Mesbah, A., Software Engineering Research Group, Delft University of Technology, Netherlands; Van Deursen, A., Software Engineering Research Group, Delft University of Technology, Netherlands","AJAX-based Web 2.0 applications rely on stateful asynchronous client/server communication, and client-side runtime manipulation of the DOM tree. This not only makes them fundamentally different from traditional web applications, but also more error-prone and harder to test. We propose a method for testing AJAX applications automatically, based on a crawler to infer a flow graph for all (client-side) user interface states. We identify AJAX-specific faults that can occur in such states (related to DOM validity, error messages, discoverability, back-button compatibility, etc.) as well as DOM-tree invariants that can serve as oracle to detect such faults. We implemented our approach in ATUSA, a tool offering generic invariant checking components, a plugin-mechanism to add application-specific state validators, and generation of a test suite covering the paths obtained during crawling. We describe two case studies evaluating the fault revealing capabilities, scalability, required manual effort and level of automation of our approach. © 2009 IEEE.",,"Application-Specific; Back-button; Client/server; DOM tree; Error messages; Error prones; Flow graph; Invariant checking; Plug-ins; Runtimes; Web 2.0 applications; WEB application; Automatic testing; Biological materials; Computer software; User interfaces; World Wide Web; Java programming language",,,,,,,,"Andrews, A., Offutt, J., Alexander, R., Testing web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , July; S. Artzi, A. Kie?zun, J. Dolby, F. Tip, D. Dig, A. Paradkar, and M. D. Ernst. Finding bugs in dynamic web applications. In Proc. Int. Symp. on Software Testing and Analysis (ISSTA'08), pages 261-272. ACM, 2008; Benedikt, M., Freire, J., Godefroid, P., VeriWeb: Automatically testing dynamic web sites (2002) Proc. 11th Int. Conf. on World Wide Web (WWW'02); Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) ICSE Future of Software Engineering (FOSE'07), pp. 85-103. , IEEE Computer Society; Binder, R.V., (1999) Testing object-oriented systems: Models, patterns, and tools, , Addison-Wesley; E. Bozdag, A. Mesbah, and A. van Deursen. Performance testing of data delivery techniques for Ajax applications. Journal of Web Engineering, 0(0), 2009. To appear; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) Proc. 25th Int Conf. on Software Engineering (ICSE'03), pp. 49-59. , IEEE Computer Society; Garrett, J., (2005) Ajax: A new approach to web applications, , http://www.adaptivepath.com/publications/essays/archives/000385.php, Adaptive path, February; Halfond, W., Orso, A., Improving test case generation for web applications using automated interface discovery (2007) Proceedings of the ESEC/FSE conference, pp. 145-154. , ACM; Huang, Y.-W., Tsai, C.-H., Lin, T.-P., Huang, S.-K., Lee, D.T., Kuo, S.-Y., A testing framework for web application security assessment (2005) Journal of Computer Networks, 48 (5), pp. 739-761; Kals, S., Kirda, E., Kruegel, C., Jovanovic, N., Secubat: A web vulnerability scanner (2006) Proc. 15th int. conf. on World Wide Web (WWW'06), pp. 247-256. , ACM; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) Proc. 1st IEEE Int. Conference on Sw. Testing Verification and Validation (ICST'08), pp. 121-130. , IEEE Computer Society; Memon, A., An event-flow model of GUI-based applications for testing: Research articles (2007) Softw. Test. Verif. Reliab, 17 (3), pp. 137-157; Mesbah, A., Bozdag, E., van Deursen, A., Crawling Ajax by inferring user interface state changes (2008) Proc. 8th Int. Conference on Web Engineering (ICWE'08), pp. 122-134. , IEEE Computer Society; Mesbah, A., van Deursen, A., Migrating multi-page web applications to single-page Ajax interfaces (2007) Proc. 11th Eur. Conf. on Sw. Maintenance and Reengineering (CSMR'07), pp. 181-190. , IEEE Computer Society; Mesbah, A., van Deursen, A., A component- and pushbased architectural style for Ajax applications (2008) Journal of Systems and Software, 81 (12), pp. 2194-2209; Meyer, B., Seven principles of software testing (2008) IEEE Computer, 41 (8), pp. 99-101. , August; Morell, L., Theoretical insights into fault-based testing (1988) Proc. 2nd Workshop on Software Testing, Verification, and Analysis, pp. 45-62; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) ICSE'01: 23rd Int. Conf. on Sw. Eng, pp. 25-34. , IEEE Computer Society; Richardson, D., Thompson, M., The RELAY model of error detection and its application (1988) Proc. 2nd Workshop on Software Testing, Verification, and Analysis, pp. 223-230; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and failure detection for web applications (2005) ASE'05: Proc. 20th IEEE/ACM Int. Conf. on Automated Sw. Eng, pp. 253-262. , ACM; Sprenkle, S., Pollock, L., Esquivel, H., Hazelwood, B., Ecott, S., Automated oracle comparators for testing web applications (2007) Proc. 18th IEEE Int. Symp. on Sw. Reliability (ISSRE'07), pp. 117-126. , IEEE Computer Society; Stepien, B., Peyton, L., Xiong, P., Framework testing of web applications using TTCN-3 (2008) Int. Journal on Software Tools for Technology Transfer, 10 (4), pp. 371-381; Weyuker, E.J., On testing non-testable programs (1982) The Computer Journal, 25 (4), pp. 465-470; Yen, J.Y., Finding the k shortest loopless paths in a network (1971) Manag. Sci, 17 (11), pp. 712-716; Yin, R.K., (2003) Case Study Research: Design and Methods, , SAGE Publications Inc, 3d edition","Mesbah, A.; Software Engineering Research Group, Netherlands; email: A.Mesbah@tudelft.nl",,"ACM - Association for Computing Machinery;IEEE;IEEE Computer Society;SIGSOFT - Special Interest Group on Software Engineering",,"2009 31st International Conference on Software Engineering, ICSE 2009","16 May 2009 through 24 May 2009","Vancouver, BC",79629,02705257,9781424434527,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77249160785
"Bezemer C.-P., Mesbah A., Van Deursen A.","35742992600;17345931800;7003969355;","Automated security testing of web widget interactions",2009,"ESEC-FSE'09 - Proceedings of the Joint 12th European Software Engineering Conference and 17th ACM SIGSOFT Symposium on the Foundations of Software Engineering",,,,"81","90",,27,"10.1145/1595696.1595711","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77249093633&doi=10.1145%2f1595696.1595711&partnerID=40&md5=35b3a47ade6ddbbee9186f917c45a1eb","Delft Univ. of Technology and Exact Software, Netherlands; Delft Univ. of Technology, Netherlands","Bezemer, C.-P., Delft Univ. of Technology and Exact Software, Netherlands; Mesbah, A., Delft Univ. of Technology, Netherlands; Van Deursen, A., Delft Univ. of Technology, Netherlands","We present a technique for automatically detecting security vulnerabilities in client-side self-contained components, called web widgets, that can co-exist independently on a single web page. In this paper we focus on two security scenarios, namely the case in which (1) a malicious widget changes the content (DOM) of another widget, and (2) a widget steals data from another widget and sends it to the server via an HTTP request. We propose a dynamic analysis approach for automatically executing the web application and analyzing the runtime changes in the user interface, as well as the outgoing HTTP calls, to detect inter-widget interaction violations. Our approach, implemented in a number of open source ATUSA plugins, called DIVA, requires no modification of application code, and has few false positives. We discuss the results of an empirical evaluation of the violation revealing capabilities, performance, and scalability of our approach, by means of two case studies, on the Exact Widget Framework and Pageflakes, a commercial, widely used widget framework. Copyright 2009 ACM.","Security testing; Web applications","Application codes; Empirical evaluations; False positive; Open sources; Plug-ins; Runtimes; Security testing; Security vulnerabilities; WEB application; Web page; Computer software; Dynamic analysis; HTTP; User interfaces; World Wide Web; Security of data",,,,,,,,"Carzaniga, A., Picco, G.P., Vigna, G., Designing distributed applications with mobile code paradigms (1997) Proceedings of the 19th International Conference on Software Engineering (ICSE'97), pp. 22-32. , ACM Press; Garrett, J., (2005) Ajax: A new approach to web applications, , http://www.adaptivepath.com/publications/essays/archives/000385.php, Adaptive path, February; Halfond, W.G.J., Orso, A., Manolios, P., Using positive tainting and syntax-aware evaluation to counter sql injection attacks (2006) Proceedings of the 14th International Symposium on Foundations of software engineering (FSE'06), pp. 175-185. , ACM; Huang, Y.-W., Tsai, C.-H., Lin, T.-P., Huang, S.-K., Lee, D.T., Kuo, S.-Y., A testing framework for web application security assessment (2005) J. of Computer Networks, 48 (5), pp. 739-761; Huang, Y.-W., Yu, F., Hang, C., Tsai, C.-H., Lee, D.-T., Kuo, S.-Y., Securing web application code by static analysis and runtime protection (2004) Proceedings of the 13th international conference on World Wide Web (WWW'04), pp. 40-52. , New York, NY, USA, ACM; Jackson, C., Wang, H.J., Subspace: Secure cross-domain communication for web mashups (2007) WWW '07: Proceedings of the 16th international conference on World Wide Web, pp. 611-620. , New York, NY, USA, ACM; N. Jovanovic, E. Kirda, and C. Kruegel. Preventing Cross Site Request Forgery Attacks. Securecomm and Workshops, 2006, pages 1-10, 28 2006-Sept. 1 2006; S. Kals, E. Kirda, C. Kruegel, and N. Jovanovic. Secubat: a web vulnerability scanner. In Proc. 15th int. conf. on World Wide Web (WWW'06), pages 247-256. ACM, 2006; Kiezun, A., Guo, P.J., Jayaraman, K., Ernst, M.D., Automatic creation of SQL injection and cross-site scripting attacks (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE'09), , IEEE Computer Society; Kirda, E., Kruegel, C., Vigna, G., Jovanovic, N., Noxes: A client-side solution for mitigating cross-site scripting attacks (2006) Proceedings of the 2006 ACM symposium on Applied computing (SAC'06), pp. 330-337. , ACM; Livshits, B., Guarnieri, S., Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code (2009), Technical Report MSR-TR-2009-43, Microsoft Research; Mesbah, A., Bozdag, E., van Deursen, A., Crawling Ajax by inferring user interface state changes (2008) Proc. 8th Int. Conference on Web Engineering (ICWE'08), pp. 122-134. , IEEE Computer Society; Mesbah, A., van Deursen, A., A component- and push-based architectural style for Ajax applications (2008) Journal of Systems and Software, 81 (12), pp. 2194-2209; Mesbah, A., van Deursen, A., Invariant-based automatic testing of Ajax user interfaces (2009) Proceedings of the 31st International Conference on Software Engineering (ICSE'09), Research Papers, pp. 210-220. , IEEE Computer Society; Ruderman, J., (2001) The Same Origin Policy, , http://www.mozilla.org/projects/security/components/same-origin.html; Scott, D., Sharp, R., Abstracting application-level web security (2002) Proceedings of the 11th international conference on World Wide Web (WWW'02), pp. 396-407. , New York, NY, USA, ACM; Stefano Di Paola, G.F., Subverting Ajax (2006) 23rd Chaos Communication Congress; W3C. The global structure of an html document, , http://www.w3.org/TR/REC-html40/struct/global.html; Wang, H.J., Fan, X., Howell, J., Jackson, C., Protection and communication abstractions for web browsers in MashupOS (2007) Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles (SOSP'07), pp. 1-16. , ACM; Wassermann, G., Su, Z., Static detection of cross-site scripting vulnerabilities (2008) Proceedings of the 30th international conference on Software engineering (ICSE'08), pp. 171-180. , ACM; Yin, R.K., (2003) Case Study Research: Design and Methods, , SAGE Publications Inc, 3d edition","Bezemer, C.-P.; Delft Univ. of Technology and Exact SoftwareNetherlands; email: c.bezemer@tudelft.nl",,"ACM SIGSOFT",,"Joint 12th European Software Engineering Conference and 17th ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC-FSE'09","24 August 2009 through 28 August 2009","Amsterdam",79503,,9781605580012,,,"English","ESEC-FSE - Proc. Jt. Eur. Softw. Eng. Conf. ACM SIGSOFT Symp. Found. Softw. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77249093633
"Mu B., Zhan M., Hu L.","24335706300;35243808300;56288374400;","Design and implementation of GUI automated testing framework based on XML",2009,"2009 WRI World Congress on Software Engineering, WCSE 2009","4",, 5319534,"194","199",,5,"10.1109/WCSE.2009.91","https://www.scopus.com/inward/record.uri?eid=2-s2.0-72849146974&doi=10.1109%2fWCSE.2009.91&partnerID=40&md5=71e3c8936b1720d62dea8124f3e95da3","Tongji University, Shanghai 200092, China","Mu, B., Tongji University, Shanghai 200092, China; Zhan, M., Tongji University, Shanghai 200092, China; Hu, L., Tongji University, Shanghai 200092, China","By combining data-driven and keyword-driven technologies and using XML format to store testing data, this paper shows how to design and implement a GUI automated testing framework with strong reusability, expandability and robustness. The separation of scripts, data and business logic divides personnel into framework developers and testers. In this case, testers could concentrate on the design of test case and the development of data file, helping to improve test quality and simplifying the skills required for automated testing. Furthermore, detailed description about how to use XML to express test case and how to revert the XML to scripts executed by automated testing tool are also demonstrated by the paper. © 2009 IEEE.","Automated testing; GUI; XML","Automated testing; Automated testing tools; Business logic; Data files; Data-driven; Expandability; Test case; Test quality; Testing data; XML format; Computer software; Graphical user interfaces; Markup languages; Reusability; XML; Automation",,,,,,,,"Assem, M., Keshk, A., Ismail, N., Nassar, H., Specification-Driven Automated Testing of Java Swing GUIs Using XML (2007) 2007 ITI 5th International Conference on Information and Communications Technology(ICICT 2007), , Cairo, Egypt; Bagnasco, A., Chirico, M., Scapolla, A.M., Amodei, E., XML data representation for testing automation (2002) 2002 IEEE AUTOTESTCON Proceedings. Systems Readiness Technology Conference, , Huntsville, AL, USA; Nagle, C.J., Test Automation Frameworks, , http://safsdev.sourceforge.net/DataDrivenTestAutomationFrameworks.htm; Pettichord, B., (2001) Success with Test Automation, , http://www.io.com/~wazmo/succpap.htm; Bertolino, A., Gao, J., Marchetti, E., Polini, A., TAXI - A Tool for XML-Based Testing (2007) 29th International Conference on Software Engineering(ICSE 2007), , Minneapolis, MN, USA; Damm, L.-O., Lundberg, L., Olsson, D., Introducing Test Automation and Test - Driven Development: An Experience Report (2005) Electronic Notes in Theoretical Computer Science; Abdel Salam, M.A., Keshk, A.E., Ismail, N.A., Nassar, H.M., Automated Testing of Java Menu-Based GUIs Using XML Visual Editor (2007) 2007 International Conference on Computer Engineering and Systems(ICCES 2007), , Cairo, Egypt; Johnson, D.J., Rosclli, P., Using XML As a Flexible, Portable Test Script Language (2003) IEEE Systems Readiness Technology Conference (AUTOTESTCON 2003), , Anaheim, CA, USA; Bertolino, A., Gao, J., Marchetti, E., Polini, A., Automatic Test Data Generation for XML Schema-based Partition Testing (2007) 29th International Conference on Software Engineering(ICSE 2007), , Minneapolis, MN, USA","Mu, B.; Tongji University, Shanghai 200092, China; email: binmu99@163.com",,"WRI",,"2009 WRI World Congress on Software Engineering, WCSE 2009","19 May 2009 through 21 May 2009","Xiamen",78770,,9780769535708,,,"English","WRI World Congr. Softw. Eng., WCSE",Conference Paper,"Final","",Scopus,2-s2.0-72849146974
"Wandan Z., Ningkang J., Xubo Z.","35180765500;24335862400;35209382900;","Design and implementation of a web application automation testing framework",2009,"Proceedings - 2009 9th International Conference on Hybrid Intelligent Systems, HIS 2009","2",, 5254473,"316","318",,3,"10.1109/HIS.2009.175","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70450202608&doi=10.1109%2fHIS.2009.175&partnerID=40&md5=3dcea68b9799d81392349bb58a3a4c52","Software Institute of East China, Normal University, Shanghai, China","Wandan, Z., Software Institute of East China, Normal University, Shanghai, China; Ningkang, J., Software Institute of East China, Normal University, Shanghai, China; Xubo, Z., Software Institute of East China, Normal University, Shanghai, China","In this paper the problems in the automation testing of GUI based Web applications are discussed. A new automation testing framework based on the concept of object feature set and dynamic searching policy is proposed. The design and implementation of it are both given. The framework working using result shows that it makes the testing more convenient and efficient with less resources and time cost but higher testing coverage. The ability of maintenance and stability are both improved. © 2009 IEEE.","Automation testing framework; Dynamic searching technology; Web application testing","Automation testing; Dynamic searching; Dynamic searching technology; Feature sets; Time cost; WEB application; Web application testing; Intelligent systems; World Wide Web; Automation",,,,,,,,"Coda, F., Ghezzi, C., Vigna, G., Towards a Software Engineering Approach to Web Site Development (1998) Proc of the Ninth International Workshop on Software Specification and Design. Ise-Shirna, pp. 8-17. , Japan: IEEE Computer Society Press, April 16-18; Ji-Tzay Yang, Jiun-Long Huang, Feng-Jian Wang, and William C. Chu. An Object-Oriented Architecture Supporting Web Application Testing. In: Proc. Of IEEE 23rd Annual International Computer Software and Application Conference COMPSAC2000, Phoenix Arizona USA: IEEE Computer Society Press, Oct 2000,122-127; Ricca, F., Tonella, P., Analysis and Testing of Web Applications (2001) Proc. of the International Software Engineering Conference, pp. 25-34. , Toronto Canada: IEEE Computer Society Press, May; D. Kung, C. H. Liu and P. Hsia. An Object-Oriented Web Test for Testing Web Applications. In: Proc. of IEEE 24th Annual International Computer Software and Application ConferenceCOMPSA2000, Taipei Taiwai: IEEE Computer Society Press, Oct. 2000, 111-121; D. C. Kung, N. Suchak, J. Gao et al. On Object State Testing. In: Proc. of Computer Software and Application Conference. Taipei Taiwai: IEEE Computer Society Press, 1994 222-227; Wu, Y., Offutt, J., Modeling and Testing Web-based Applications (2002) GNU ISE Technical, ISE-TR-02-08, pp. 21-32. , November; Li, J., Chen, J., Chen, P., Modeling Web Application Architecture with UML (2000) Proc. Of 36th International Conference on Technology of Object-Oriented Languages and Systems (TOOLS-Asia'00), pp. 265-274. , Xi'an, China: IEEE Computer Society Press, Oct","Wandan, Z.; Software Institute of East China, , Shanghai, China; email: ddzeng@sei.ecnu.edu.cn",,,,"2009 9th International Conference on Hybrid Intelligent Systems, HIS 2009","12 August 2009 through 14 August 2009","Shenyang",78414,,9780769537450,,,"English","Proc. - Int. Conf. Hybrid Intelligent Syst., HIS",Conference Paper,"Final","",Scopus,2-s2.0-70450202608
"Li H., Chen F., Yang H., Guo H., Chu W.C.-C., Yang Y.","36053007600;57193337135;35070638900;7404404347;16021243700;55719919000;","An ontology-based approach for GUI testing",2009,"Proceedings - International Computer Software and Applications Conference","1",, 5254200,"632","633",,11,"10.1109/COMPSAC.2009.92","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70449674758&doi=10.1109%2fCOMPSAC.2009.92&partnerID=40&md5=86735b62822c53a0a0a2cba6950d8a10","School of Electronic and Information Engineering, Dalian University of Technology, Dalian 116023, China; Software Technology Research Laboratory, De Montfort University, Leicester, LE1 9BH, United Kingdom; Department of Computer Science and Information Engineering, Tunghai University, Taiwan","Li, H., School of Electronic and Information Engineering, Dalian University of Technology, Dalian 116023, China, Software Technology Research Laboratory, De Montfort University, Leicester, LE1 9BH, United Kingdom; Chen, F., Software Technology Research Laboratory, De Montfort University, Leicester, LE1 9BH, United Kingdom; Yang, H., Software Technology Research Laboratory, De Montfort University, Leicester, LE1 9BH, United Kingdom; Guo, H., School of Electronic and Information Engineering, Dalian University of Technology, Dalian 116023, China; Chu, W.C.-C., Department of Computer Science and Information Engineering, Tunghai University, Taiwan; Yang, Y., School of Electronic and Information Engineering, Dalian University of Technology, Dalian 116023, China","As Graphical User Interfaces (GUIs) have almost become ubiquitous for users to interacting with software system, GUI testing becomes an essential task. GUI testing, whose basic steps are test case generation and execution result validation, is a knowledge intensive process that requires both knowledge of GUI systems and testers' experience. In this paper, an ontology-based approach is proposed to make test case generation much effective by involving testers' experience. The approach first establishes a GUI testing ontology by analysing source code with reverse engineering techniques. Next test case generation rules which used to generate test cases are extracted from testers' experience. Then the proposed approach is evaluated. Finally conclusions are drawn and further research directions are speculated. © 2009 IEEE.","GUI testing; Ontology; Reverse engineering; Test case generation rules","GUI testing; Knowledge intensive process; Ontology-based; Research directions; Software systems; Source codes; Test case; Test case generation; Computer applications; Computer software; Ontology; Reengineering; Reverse engineering; Testing; Word processing; Graphical user interfaces",,,,,,,,"Bai, X., Ontology-based test modeling and partition testing of web services (2008) IEEE International Conference on Web Services (ICWS'08), , Beijing, China; Kosindrdecha, N., Reducing test case created by path oriented test case generation (2007) AIAA Infotech@Aerospace 2007 Conference and Exhibit, , California, USA; Li, Y., Yang, H., Chu, W.C., Fusing ambiguous domain knowledge slices in a reverse engineering process (2000) 7th Asia-Pacific Software Engineering Conference (APSEC'00), , Singapore; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Nguyen, C.D., Ontology-based test generation for multiagent systems (2008) 7th International Conference on Autonomous Agents and Multiagent Systems (ICMAS'08), , Estoril, Portugal; Yang, H., Cui, Z., O'Brien, P., Extracting ontologies from legacy systems for understanding and re-engineering (1999) 23rd Annual International Computer Software and Applications Conference (COMPSAC'99), , Phoenix, AZ; Zhou, H., Kang, J., Chen, F., Yang, H., OPTIMA: An ontology-based PlaTform-specIfic software migration approach (2007) 7th International Conference on Quality Software (QSIC'07), , Portland, Oregon, USA, Oct","Li, H.; School of Electronic and Information Engineering, , Dalian 116023, China",,"IEEE;IEEE Computer Society",,"2009 33rd Annual IEEE International Computer Software and Applications Conference, COMPSAC 2009","20 July 2009 through 24 July 2009","Seattle, WA",78413,07303157,9780769537269,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-70449674758
"Tuglular T., Muftuoglu C.A., Kaya O., Belli F., Linschulte M.","14627984700;35174907400;35174532000;57200611344;24829072900;","GUI-based testing of boundary overflow vulnerability",2009,"Proceedings - International Computer Software and Applications Conference","2",, 5254083,"539","544",,4,"10.1109/COMPSAC.2009.189","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70449638993&doi=10.1109%2fCOMPSAC.2009.189&partnerID=40&md5=08ab25391d94eacac03aa2e1af119c12","Department of Computer Engineering, Izmir Institute of Technology, Urla, Izmir 35430, Turkey; Department of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Germany","Tuglular, T., Department of Computer Engineering, Izmir Institute of Technology, Urla, Izmir 35430, Turkey; Muftuoglu, C.A., Department of Computer Engineering, Izmir Institute of Technology, Urla, Izmir 35430, Turkey; Kaya, O., Department of Computer Engineering, Izmir Institute of Technology, Urla, Izmir 35430, Turkey; Belli, F., Department of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Germany; Linschulte, M., Department of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Germany","Boundary overflows are caused by violation of constraints, mostly limiting the range of internal values of a program, and can be provoked by an intruder to gain control of or access to stored data. In order to countermeasure this well-known vulnerability issue, this paper focuses on input validation of graphical user interfaces (GUI). The approach proposed generates test cases for numerical inputs based on GUI specification through decision tables. If boundary overflow error(s) are detected, the source code will be analyzed to localize and correct the encountered error(s) automatically. © 2009 IEEE.",,"Input validation; Overflow errors; Source codes; Test case; Violation of constraints; Access control; Computer applications; Computer software; Decision tables; Word processing; Graphical user interfaces",,,,,,,,"Specification of single-hit decision tables (1984) Information Processing, , I. 5806; Amman, P., Offutt, J., (2008) Introduction to Software Testing; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, pp. 34-43. , Washington, DC, USA. IEEE; Belli, F., Hollmann, A., Nissanke, N., Modeling analysis and testing of safety issues-an event-based approach and case study (2007) Proceedings of the 26th Int. Conf. Computer Safety, Reliability, and Security, pp. 276-282. , Springer; Belli, F., Linschulte, M., On negative tests of web applications (2007) Annals of Mathematics, Computing and Teleinformatics, 1 (5), pp. 44-56; Hayes, J.H., Offutt, J., Input validation analysis and testing (2006) Empirical Software Engineering, 11 (4), pp. 493-522; Jorgensen, P., (2002) Software Testing: A Craftman's Approach, p. 359. , CRC Press; Liu, H., Tan, H.B.K., Covering code behavior on input validation in functional testing (2009) Information and Software Technology, 51 (2), pp. 546-553; Mell, P., Tracy, M.C., Procedures for handling security patches (2002) NIST Special Publication, 800 (40); Meyer, B., Applying design by contract (1992) Computer, 25 (10), pp. 40-51; (2009) Design Guidelines for Secure Web Application, , http://msdn.microsoft.com/library/default.asp?url=/library/enus/secmod/ html/secmod77.asp; Myers, G.J., (1979) The Art of Software Testing, , John Wiley and Sons; (2009) Netdefender Firewall, , http://www.codeplex.com/netdefender, Netdefender, version 1.5; (2008), http://www.gimpel.com/html/pcl.htm, Pc-lint; Rinard, M., Cadar, C., Dumitran, D., Roy, D.M., Leu, T., A dynamic technique for eliminating buffer overflow vulnerabilities (and other memory errors) (2004) Proceedings of the 20th ACSAC Conference, pp. 82-90; Tuglular, T., Test case generation for firewall implementation testing using software testing techniques (2007) Proceedings of the International Conference on Security of Inform. and Networks, pp. 196-203. , N. Cyprus; Zheng, W., Bundell, G., Test by contract for uml-based software component testing (2008) Proceedings of the Int. Sym. on Comp. Sci. and Its Appl, pp. 377-382. , IEEE","Tuglular, T.; Department of Computer Engineering, , Urla, Izmir 35430, Turkey; email: tugkantuglular@iyte.edu.tr",,"IEEE;IEEE Computer Society",,"2009 33rd Annual IEEE International Computer Software and Applications Conference, COMPSAC 2009","20 July 2009 through 24 July 2009","Seattle, WA",78413,07303157,9780769537269,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-70449638993
"McMahon C.","55887655100;","History of a large test automation project using selenium",2009,"Proceedings - 2009 Agile Conference, AGILE 2009",,, 5261058,"363","368",,7,"10.1109/AGILE.2009.9","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70449625959&doi=10.1109%2fAGILE.2009.9&partnerID=40&md5=bde1deaf4330540a1f52cce404f6933e",,"McMahon, C.","In 2007 I started work as a tester for a company called Socialtext. When I joined the company there was already a Selenium-based test framework in place, but there were only a couple of automated test cases created; we had about 400 test steps, or individual assertions about the behavior of the application. When I left Socialtext two years later, we had just surpassed 10,000 test steps in the main set of regression tests. We also had browserspecific test sets in place, an automated test case for visually checking the application, and a Continuous-Integration-like script that ran all day and all night against the latest version of the code. At about 4000 test steps, regression bugs released to production dropped essentially to zero. The other 6000 test steps covered ongoing new features in the project, and more robust testing of the older application functions. This report discusses how I helped grow this system, and the things we learned along the way that helped it be such a successful ongoing project. The report covers initial conditions and test design; discusses issues in application feature coverage; how and when to grow the system quickly; a couple of test design smells that caused us problems along the way; how we treat Continuous Integration in a system like this; and how we coped when significant parts of the User Interface were completely re-engineered.",,"Application functions; Automated test; Initial conditions; Regression tests; Socialtext; Test Automation; Test designs; Test framework; Test sets; Agile manufacturing systems; Automation; Selenium; User interfaces; Testing",,,,,,,,,"email: christopher.mcmahon@gmail.com",,,,"2009 Agile Conference, AGILE 2009","24 August 2009 through 28 August 2009","Chicago, IL",78441,,9780769537689,,,"English","Proc. - Agile Conf., AGILE",Conference Paper,"Final","",Scopus,2-s2.0-70449625959
"Qian S., Jiang F.","35119573900;56875101800;","An event interaction structure for GUI test case generation",2009,"Proceedings - 2009 2nd IEEE International Conference on Computer Science and Information Technology, ICCSIT 2009",,, 5234773,"619","622",,6,"10.1109/ICCSIT.2009.5234773","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70449124372&doi=10.1109%2fICCSIT.2009.5234773&partnerID=40&md5=30ace6aaf56835339adf92d775286077","School of Computer Science and Technology, University of Science and Technology of China, Hefei 230027, China","Qian, S., School of Computer Science and Technology, University of Science and Technology of China, Hefei 230027, China; Jiang, F., School of Computer Science and Technology, University of Science and Technology of China, Hefei 230027, China","Graphical User Interface (GUI) has become an important part of current software. But it is difficult for conventional test methods to test GUI due to the large number of states and the complexity among the events interaction. This paper presents an event interaction structure to model GUI and an algorithm to generate GUI interactive test cases. In this structure, the interaction relationships among events focus on the sharing variables or data or exchange messages of the event-handlers. Then the GUI interactive test cases are generated by analyzing the reading or writing operations of events or sending and receiving messages between events. Experiment shows that, under the condition of assuring eventbased coverage rate, the number of effective GUI interactive test cases generated by our method is about 10 percent of the number of test cases generated by permutation and combination method. © 2009 IEEE.","GUI software test; Interactive test case; Test case generation","Combination method; Coverage rate; Event-based; Event-handlers; GUI software test; Interaction relationship; Interaction structures; Interactive test case; Number of state; Test case; Test case generation; Test method; Computer science; Computer software; Graphical user interfaces; Information technology; Testing",,,,,,,,"Memon, A.M., A comprehensive framework for testing graphical user interfaces (2001), Ph.D. thesis, Department of Computer Science, University of Pittsburgh; Yuan, X., Memon, A.M., Alternating GUI test generation and execution (2008) The IEEE Testing: Academic and Industrial Conference, pp. 23-32. , doi: 10.1109/TAICPART. 2008.10; Memon, A.M., GUI testing: Pitfalls and Process (2002) Computer, pp. 87-88. , doi: 10.1109/MC.2002.1023795; Memon, A.M., Automatically repairing event sequence-based GUI test suites for regressing testing (2008) ACM transactions on software engineering and methodology, , doi: 10.1145/1416563.1416564; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) The 12th International Symposium on Software Reliability Engineering, pp. 34-43; Chen, J., Subramaniam, S., A GUI environment to Manipulate FSMs for Testing GUI-based Application in Java (2001) The 34th Annual Hawaii International Conference on System Sciences; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) The 27th Annual International Symposium on Fault-Tolerant Computing, pp. 80-88. , IEEE Press. June, doi: 10.1109/FTCS.1997.614080; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) The 29th International Conference on Software Engineering, pp. 396-405. , doi: 10.1109/ICSE.2007.94; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Research Articles, Software Testing, Verification & Reliability, pp. 137-157. , doi: 10.1002/stvr.364; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test case for rapidly evolving software (2005) IEEE Trans. Softw. Eng, 31 (10), pp. 884-896. , doi: 10.1109/TSE.2005.117","Qian, S.; School of Computer Science and Technology, , Hefei 230027, China; email: syqian@mail.ustc.edu.cn",,,,"2009 2nd IEEE International Conference on Computer Science and Information Technology, ICCSIT 2009","8 August 2009 through 11 August 2009","Beijing",78148,,9781424445196,,,"English","Proc. - IEEE Int. Conf. Comput Sci. Inf. Technol., ICCSIT",Conference Paper,"Final","",Scopus,2-s2.0-70449124372
"Chai T., Wang Z., Wang J.","36105738100;35119695100;55742634500;","Automated universal testing and tutoring system forweb application",2009,"Proceedings - 2009 2nd IEEE International Conference on Computer Science and Information Technology, ICCSIT 2009",,, 5234417,"188","192",,,"10.1109/ICCSIT.2009.5234417","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70449113143&doi=10.1109%2fICCSIT.2009.5234417&partnerID=40&md5=1779cf9cec95c461cd3408f3d72451c0","Dept of Computer Science, Southern Polytechnic State University, Marietta, GA, United States","Chai, T., Dept of Computer Science, Southern Polytechnic State University, Marietta, GA, United States; Wang, Z., Dept of Computer Science, Southern Polytechnic State University, Marietta, GA, United States; Wang, J., Dept of Computer Science, Southern Polytechnic State University, Marietta, GA, United States","this paper presents an Automated Universal Testing and tutoring system for WEB application(AUTOWEB) for grading and tutoring on-line assignments. Based on WATIR, a retrogression testing tool, the system simulates actions of human being and automatically interprets and executes test cases specified for tutoring students. AUTOWEB can automatically generate an animation demo for each failed test case, showing step by step how a student submission fails a requirement. Further textual hint (prepared by faculty) will be shown to students. In addition, the system can dynamically demonstrate the project requirement specification online that shows the page layouts and functionalities required. For collaboration, students can also design and upload their own test cases in addition to those prepared by instructors. AUTOWEB is unique in its ability to interact with web GUI applications developed in any languages and deployed on any platforms, that is the reason why we call it universal system. AUTOWEB provides instant feedback to students, which enriches their learning experiences significantly. © 2009 IEEE.","Automatic; Component; Tutoring; Webbased","Automatic; Component; Feedback to students; GUI applications; Human being; Learning experiences; Line assignments; Page layouts; Project requirement; Step-by-step; Test case; Testing tools; Tutoring; Tutoring system; WEB application; Webbased; Animation; Computer science; Information technology; Students",,,,,,,,"Liu, M.C., Chen, L.C., Tung, S.C., the implementation and study of the Web-based thematic learning model (2002) Proceeding of the 6th Global Chinese Conference on Computers in Education, , Beijing; Reek, K.A., A software infrastructure to support introductory computer science courses Proceedings 27th SIGCSE Technical Symposium on Computer Science Education, 1517, pp. 1996-2129,125. , Philadelphia, USA, February; Jackson, D., Usher, M., Grading student programs using ASSYST (1997) Proceedings 28th SIGCSE Technical Symposium on Computer Science Education, San Jose, California, USA, February 27March, 1, pp. 335-339; Huang, C.-J., Liu, M.-C., Chu, S.-S., Cheng, C.-L., Application of Machine Learning Techniques to Web-based Intelligent Learning Diagnosis System; Morris, D.S., Automatic grading of student's programming assignments: An interactive process and suite of programs (2003) Proceedings 33rd ASEE/IEEE Frontiers in Education Conference, pp. 112-116. , Boulder, CO, USA, November 5-8; Cheang, B., Kurnia, A., Lim, A., Oon, W.-C., On automated grading of programming assignments in an academic institution (2003) Computers & Education, 41, pp. 121-131; Sun, H., Jones, E.L., Specification-driven automated testing of GUI-based Java programs (2004) Proceedings 42nd ACM Southeastern Regional Conference, pp. 140-145. , Huntsville, Alabama, USA, April 2-3; Feng, M.Y., McAllister, A., A Tool for Automated GUI Program Grading (2006) 36th ASEE/IEEE Frontiers in Education Conference, , October 28-31, Session S1F; WATIR library User, , http://wtr.rubyforge.org/watir-user-guide.html, Guide; http://www.rubydoc.org/stdlib/libdoc/win32ole/rdoc/index.html, WIN32OLE library Documentation; X. Fu, K. Qian, L. Tao, J. Liu, APOGEE - Automated Project Grading and Instant Feedback System for Web Based Computing, pp. 77-91, ACM SIGCSE 2008, 03/2008; M. Sztipanovits, K. Qian, X. Fu, The Automated Web Application Testing (AWAT) System, pp.88-93, ACMSE 2008, 03/2008","Chai, T.; Dept of Computer Science, , Marietta, GA, United States; email: tchai@spsu.edu",,,,"2009 2nd IEEE International Conference on Computer Science and Information Technology, ICCSIT 2009","8 August 2009 through 11 August 2009","Beijing",78148,,9781424445196,,,"English","Proc. - IEEE Int. Conf. Comput Sci. Inf. Technol., ICCSIT",Conference Paper,"Final","",Scopus,2-s2.0-70449113143
"Wu T., Wan Y., Xi Y., Chen C.","57188983336;35184390300;35184452100;9746315500;","Study on the automatic test framework based on three-tier data driven mechanism",2009,"Proceedings of the 2009 8th IEEE/ACIS International Conference on Computer and Information Science, ICIS 2009",,, 5223223,"996","1001",,1,"10.1109/ICIS.2009.26","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70350702900&doi=10.1109%2fICIS.2009.26&partnerID=40&md5=096e4214711ba1b74efafc0d9ea25fcb","Software College, Huazhong University of Science and Technology, Wuhan, China","Wu, T., Software College, Huazhong University of Science and Technology, Wuhan, China; Wan, Y., Software College, Huazhong University of Science and Technology, Wuhan, China; Xi, Y., Software College, Huazhong University of Science and Technology, Wuhan, China; Chen, C., Software College, Huazhong University of Science and Technology, Wuhan, China","Through analyzing on work principle of GUI automated testing tools, automatic test script language, characteristic of graphical user interface application and analysis of testing process, this paper presents an automatic test framework based on three-tier data driven mechanism. This framework provides optimized automatic test template and support library, decreases developing time of automatic test script, implements script and user defined function reuse, and does test aiming at different test size. The experiment shows that it has higher test efficiency than DDE automatic test framework. © 2009 IEEE.","Automatic test; Data driven mechanism; Test framework","Automated testing tools; Automatic test; Data driven; Data driven mechanism; Support libraries; Test efficiency; Test framework; Test size; Testing process; User Defined Functions; Work principle; Graphical user interfaces; Information science; Testing",,,,,,,,"Krause, M.H., A maturity model for automated software testing (1994) Medical Device and Diagnostic Industry Magazine, (3); Dustin, E., Rashka, J., Paul, J., (2003) Automated Software Testing: Introduction, Management, and Performance, pp. 10-11. , Addison-Wesley Longman Publishing Co., Inc; Hancock, J., (1998) When to Automate Testing A Cost-benefit Analysis, , www.veritest.com/testers'network, June, Testers' NetWork; Kaner, C., Improving the maintainability of automated test suites (1997) Software QA, 4 (4); Mosley, D.J., Posey, B.A., (2003) Just Enough Software Test Automation, pp. 94-95. , Prentice Hall PTR; Carl, N., (2000) Test Automation Frameworks, , Published at members.aol.com; Powers, M., (1997) Styles for Making Test Automation Work, , www.veritest.com, Published at, January; Keith, Z., Totally data-driven automated testing, using key-word input to drive the automated testing process Whitepaper, Automated Testing Specialist(ATS)","Wu, T.; Software College, , Wuhan, China; email: wutaooptal@126.com",,"IEEE Computer Society;International Association for;Computer and Information Science, ACIS",,"8th IEEE/ACIS International Conference on Computer and Information Science, ICIS 2009","1 June 2009 through 3 June 2009","Shanghai",78070,,9780769536415,,,"English","Proc. IEEE/ACIS Int. Conf. Comput. Inform. Sci., ICIS",Conference Paper,"Final","",Scopus,2-s2.0-70350702900
"Qian K., Sztipanovits M., Fu X.","7102668427;35114137600;36809595300;","Automated testing and smart tutoring system for web application",2009,"2008 International Workshop on Education Technology and Training and 2008 International Workshop on Geoscience and Remote Sensing, ETT and GRS 2008","2",, 5070433,"582","585",,,"10.1109/ETTandGRS.2008.232","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70350694445&doi=10.1109%2fETTandGRS.2008.232&partnerID=40&md5=293c01989ad57ad5f23b299c0a8ee597","Dept of CSWE, SPSU, 1100 South Marietta Parkway, Marietta GA 30060, United States; Dept. of Computer Science, Hofstra University Adams Hall, Hempstead NY 11549, United States","Qian, K., Dept of CSWE, SPSU, 1100 South Marietta Parkway, Marietta GA 30060, United States; Sztipanovits, M., Dept of CSWE, SPSU, 1100 South Marietta Parkway, Marietta GA 30060, United States; Fu, X., Dept. of Computer Science, Hofstra University Adams Hall, Hempstead NY 11549, United States","This paper presents an automated testing and tutoring system called AWAT for teaching dynamic web applications. Based on Watir, a retrogression testing tool, the system simulates actions of human being and automatically interprets and executes tests cases specified in Excel spreadsheets. AWAT is able to demo to students, step by step, how a submitted project fails a functional or non-functional requirement. Further textual hint (prepared by faculty) can be shown to students. AWAT is unique in its ability to interact with web GUI applications developed in any languages and deployed on any platforms. AWAT provides instant feedback to students, which enriches their learning experiences significantly. © 2008 IEEE.",,"Automated testing; Dynamic web applications; Excel spreadsheets; Feedback to students; GUI applications; Human being; Learning experiences; Non-functional requirements; Step-by-step; Testing tools; Tutoring system; WEB application; Geology; Remote sensing; Spreadsheets; Technical presentations; World Wide Web; Students",,,,,,,,"Reek, K.A., The TRY system - or - how to avoid testing student programs (1989) ACM SIGCSE Bulletin, 21 (1), pp. 112-116; Reek, K.A., A software infrastructure to support introductory computer science courses Proceedings 27th SIGCSE Technical Symposium on Computer Science Education, 1517, pp. 1996-2129,125. , Philadelphia, USA, February; Jackson, D., Usher, M., Grading student programs using ASSYST (1997) Proceedings 28th SIGCSE Technical Symposium on Computer Science Education, pp. 335-339. , San Jose, California, USA, February 27March 1; Jones, E.L., Grading student programs - a software testing approach (2001) Journal of Computing in Small Colleges, 16 (2), pp. 185-192. , January; Morris, D.S., Automatic grading of student's programming assignments: An interactive process and suite of programs (2003) Proceedings 33rd ASEE/IEEE Frontiers in Education Conference, pp. 112-116. , Boulder, CO, USA, November 5-8; Cheang, B., Kurnia, A., Lim, A., Oon, W.-C., On automated grading of programming assignments in an academic institution (2003) Computers & Education, 41, pp. 121-131; Sun, H., Jones, E.L., Specification-driven automated testing of GUI-based Java programs (2004) Proceedings 42nd ACM Southeastern Regional Conference, pp. 140-145. , Huntsville, Alabama, USA, April 2-3; Feng, M.Y., McAllister, A., A Tool for Automated GUI Program Grading (2006) 36th ASEE/IEEE Frontiers in Education Conference, , October 28-31, Session S1F; Watir library User, , http://wtr.rubyforge.org/Watir-user-guide.html, Guide; http://www.rubydoc.org/stdlib/libdoc/win32ole/rdoc/index.html, WIN32OLE library Documentation; Fu, X., Peltsverger, B., Qian, K., Tao, L., Liu, J., APOGEE: Automated project grading and instant feedback system for web based computing (2008) Proceedings of the 39th ACM SIGCSE Symposium on Computer Science Education (SIGCSE'2008), pp. 77-81. , Portland, March","Qian, K.; Dept of CSWE, 1100 South Marietta Parkway, Marietta GA 30060, United States; email: kqian@spsu.edu",,"Institute of Electrical and Electronics Engineers;IEEE Circuits and Systems Society;Intell. Inf. Technol. Appl. Res. Assoc.;International Symposium on Intelligent;Information Technology Application",,"2008 International Workshop on Education Technology and Training and 2008 International Workshop on Geoscience and Remote Sensing, ETT and GRS 2008","21 December 2008 through 22 December 2008","Shanghai",78327,,9780769535630,,,"English","Int. Workshop Educ. Technol. Train. Int. Workshop Geosci. Remote Sens., ETT GRS",Conference Paper,"Final","",Scopus,2-s2.0-70350694445
"Jääskeläinen A., Katara M., Kervinen A., Maunumaa M., Pääkkönen T., Takala T., Virtanen H.","24923055000;7801543558;6507407206;14056610700;14056661800;35079469200;57188870991;","Automatic GUI test generation for smartphone applications - An evaluation",2009,"2009 31st International Conference on Software Engineering - Companion Volume, ICSE 2009",,, 5070969,"112","122",,25,"10.1109/ICSE-COMPANION.2009.5070969","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70349669432&doi=10.1109%2fICSE-COMPANION.2009.5070969&partnerID=40&md5=50eaca35899811fd0e579c2cbe386e83","Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland; Nokia Devices, P.O. Box 1000, FI-33721 Tampere, Finland","Jääskeläinen, A., Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland; Katara, M., Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland; Kervinen, A., Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland; Maunumaa, M., Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland; Pääkkönen, T., Nokia Devices, P.O. Box 1000, FI-33721 Tampere, Finland; Takala, T., Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland; Virtanen, H., Dept. of Software Systems, Tampere Univ. of Technology, P.O. Box 553, FI-33101 Tampere, Finland","We present the results of an evaluation where we studied the effectiveness of automatic test generation for graphical user interface (GUI) testing of smartphone applications. To describe the context of our evaluation, the tools and the test model library we have developed for the evaluation are also presented. The library contains test models for basic S60 applications, such as camera, contacts, etc. The tools include an on-line test generator that produces sequences of so called keywords to be executed on the test targets. In our evaluation, we managed to find over 20 defects from applications that had been on the market for several months. We also describe the problems we faced during the evaluation. © 2009 IEEE.",,"Automatic test generation; On-line tests; Smart phones; Test generations; Test models; Computer software; Graphical user interfaces; Signal encoding; Testing",,,,,,,,"(2008) AGEDIS Consortium, , Availableathttp://www.agedis.de/, AGEDIS project homepage. Cited Oct; Belli, F., Finite-state testing of graphical user interfaces Proc. 12th International Symposium on Software Reliability Engineering (ISSRE 2001), pp. 34-43. , IEEE CS; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: Approach and case study (2006) Software Testing, Verification and Reliability, 16 (1), pp. 3-32; Bouquet, F., Jaffuel, E., Legeard, B., Peureux, F., Utting, M., Requirements traceability in automated test generation - Application to smart card software validation Proc. ICSE 2005 Workshop on Advances in Model-Based Software Testing (A-MOST), , ACM; Buwalda, H., Action figures (2003) STQE Magazine, pp. 42-47. , March/April 2003; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Testing concurrent objectoriented systems with spec explorer Proc. Formal Methods 2005, Number 3582 in Lecture Notes in Computer Science, pp. 542-547. , Springer; (2008) Domain-Specific Modelling Forum, , http://www.dsmforum.org/cases.html, DSM case studies and examples. Available at Cited Oct; Fewster, M., Graham, D., (1999) Software Test Automation: Effective use of Test Execution Tools, , Addison-Wesley; Fowler, M., (2008) Continuous Integration, , http://www.martinfowler.com/articles/continuousIntegration.html, Available at Cited Oct; Hansen, H., Virtanen, H., Valmari, A., Merging statebased and action-based verification (2003) Proceedings of ACSD 2003, the Third International Conference on Application of Concurrency to System Design, pp. 150-156. , IEEE CS; Hartman, A., (2004) AGEDIS Project Final Report, , http://www.agedis.de/documents/FinalPublicReport%28D1.6%29.PDF, Available at Cited Oct 2008; Hartman, A., Katara, M., Olvovsky, S., Choosing a test modeling language: A survey (2007) Proc. Haifa Verification Conference 2006, Number 4383 in Lecture Notes in Computer Science, pp. 204-218. , Springer; Jääskeläinen, A., (2008) A Domain-specific Tool for Creation and Management of Test Models, , Master's thesis, Tampere University of Technology, Jan; Jääskeläinen, A., Katara, M., Kervinen, A., Heiskanen, H., Maunumaa, M., Pääkkönen, T., Model-based testing service on the web Proc. TESTCOM/FATES 2008, Number 5047 in Lecture Notes in Computer Science, pp. 38-53. , Springer; Jääskeläinen, A., Kervinen, A., Katara, M., Creating a test model library for GUI testing of smartphone applications Proc. 8th International Conference on Quality Software (QSIQ 2008) (short Paper), , IEEE CS; Jard, C., Jéron, T., TGV: Theory, principles and algorithms - A tool for the automatic synthesis of conformance test cases for non-deterministic reactive systems (2005) STTT, 7 (4), pp. 297-315; Kaner, C., Bach, J., Pettichord, B., (2001) Lessons Learned in Software Testing: A Context-Driven Approach, , Wiley; Karsisto, K., (2003) A new Parallel Composition Operator for Verification Tools, , Doctoral dissertation, Tampere University of Technology (number 420 in publications); Katara, M., Kervinen, A., Making model-based testing more agile: A use case driven approach (2007) Proc. Haifa Verification Conference 2006, Number 4383 in Lecture Notes in Computer Science, pp. 219-234. , Springer; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Satama, M., Towards deploying model-based testing with a domain-specific modeling approach (2006) Proc. TAIC PART - Testing: Academic & Industrial Conference, pp. 81-89. , Windsor, UK, Aug. IEEE CS; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2006) Proc. 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005), Number 3997 in Lecture Notes in Computer Science, pp. 16-31. , Springer; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis, University of Pittsburgh; Nachmanson, L., Veanes, M., Schulte, W., Tillmann, N., Grieskamp, W., Optimal strategies for testing nondeterministic systems ISSTA '04: Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 55-64. , ACM; Neto, A.D., Subramanyan, R., Vieira, M., Travassos, G.H., Shull, F., Improving evidence about software technologies: A look at model-based testing (2008) IEEE Software, pp. 10-13. , May/June; Nikkanen, M., (2005) Use Case Based Automatic User Interface Testing in Mobile Devices, , Master's thesis, Helsinki University of Technology, May; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for GUI systems ISSTA '98: Proc. 1998 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 82-92; Pretschner, A., Prenninger, W., Wagner, S., Kühnel, C., Baumgartner, M., Sostawa, B., Zölch, R., Stauner, T., One evaluation of model-based testing and its automation ICSE '05: Proc. 27th International Conference on Software Engineering, pp. 392-401. , ACM; (2008) Python Programming Language Homepage, , http://python.org/, Cited Oct; Robinson, H., Finite state model-based testing on a shoestring (2008) Software Testing, Analysis, and Review Conference (STARWEST) 1999, , URLhttp://www.geocities.com/model_based_testing/shoestring.htm, At Cited Oct; Robinson, H., Obstacles and opportunities for model-based testing in an industrial software environment (2003) Proc. 1st European Conference on Model-Driven Software Engineering, pp. 118-127. , Nuremberg, Germany, Dec; Roscoe, A.W., (1998) The Theory and Practice of Concurrency, , Prentice Hall; (2008), http://www.s60.com, Cited Oct; Satama, M., (2006) Event Capturing Tool for Model-based GUI Test Automation, , Master's thesis, Tampere University of Technology, Sept; (2008) Software Product Lines, , http://www.sei.cmu.edu/productlines/, Software Engineering Institute. Cited Oct; (2008) Symbian Signed, , http://www.symbiansigned.com/, Cited Oct; Tevanlinna, A., Taina, J., Kauppinen, R., Product family testing: A survey (2004) SIGSOFT Softw. Eng. Notes, 29 (2), pp. 12-12; Utting, M., Pretschner, A., Legeard, B., (2006) A Taxonomy of Model-based Testing, , Working paper series 4, Department of Computer Science, University of Waikato, New Zealand; Valmari, A., The state explosion problem (1998) Lectures on Petri Nets I: Basic Models, Number 1491 in Lecture Notes in Computer Science, pp. 429-528","Jääskeläinen, A.; Dept. of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; email: antti.m.jaaskelainen@tut.fi",,"Association for Computing Machinery, ACM;IEEE;IEEE Computer Society;SIGSOFT",,"2009 31st International Conference on Software Engineering, ICSE 2009","16 May 2009 through 24 May 2009","Vancouver, BC",77505,,9781424434947,,,"English","Int. Conf. Softw. Eng. - Companion Vol., ICSE",Conference Paper,"Final","",Scopus,2-s2.0-70349669432
"Hofer B., Peischl B., Wotawa F.","7005768844;6507036919;6603677377;","GUI savvy end-to-end testing with smart Monkeys",2009,"Proceedings of the 2009 ICSE Workshop on Automation of Software Test, AST 2009",,, 5069051,"130","137",,13,"10.1109/IWAST.2009.5069051","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70349654123&doi=10.1109%2fIWAST.2009.5069051&partnerID=40&md5=f7beb021cd7109b1a57012580b5439c5","Technische Universität Graz, Institute for Software Technology, Inffeldgasse 16b/2, A-8010 Graz, Austria","Hofer, B., Technische Universität Graz, Institute for Software Technology, Inffeldgasse 16b/2, A-8010 Graz, Austria; Peischl, B., Technische Universität Graz, Institute for Software Technology, Inffeldgasse 16b/2, A-8010 Graz, Austria; Wotawa, F., Technische Universität Graz, Institute for Software Technology, Inffeldgasse 16b/2, A-8010 Graz, Austria","In this article we report on the development of a graphical user interface-savvy test monkey and its successful application to the Windows calculator. Our novel test monkey allows for a pragmatic approach in providing an abstract model of the GUI relevant behavior of the application under test and relies on a readily available GUI automation tool. Besides of outlining the employed test oracles we explain our novel decision-based state machine model, the associated language and the random test algorithm. Moreover we outline the pragmatic model creation concept and report on its concrete application in an end-to-end test setting with a Windows Vista front-end. Notably in this speci.c scenario, our novel monkey was able to identify a misbehavior in a well-established application and provided valuable insight for reproducing the detected fault.",,"Abstract models; Application under tests; Automation tools; Concrete applications; End-to-end tests; Pragmatic model; Random tests; State machine models; Test oracles; Windows Vista; Automation; Computer operating systems; Graphical user interfaces; Windows; Testing",,,,,,,,"Arnold, T.R., (1998) Visual Test 6 Bible, , IDG Books Worldwide, Inc., Foster City, CA, USA; Baker, R., A decision table based methodology for the analysis of complex conditional actions (2004) Methods & Tools, Volume 12 - Number 3, , Fall; Beer, A., Mohacsi, S., Stary, C., IDATG: An open tool for automated testing of interactive software (1998) Proceedings of the 22nd International Computer Software and Applications Conference (COMPSAC), pp. 470-475. , August; Beizer, B., (1995) Black-box Testing: Techniques for Functional Testing of Software and Systems, , John Wiley & Sons, Inc., New York, NY, USA; Davis, A.M., A comparison of techniques for the specification of external system behavior (1988) Commun. ACM, 31 (9), pp. 1098-1115; El-Far, I.K., Whittaker, J.A., Model-based software testing (2001) Encyclopedia on Software Engineering; Fodeh, J.A., (2003) Test Monkeys - The new Members of Your Team? Presented at the SIGiST Conference, , The Followship of the Test', February 11th, British Computer Society, UK; Forrester, J.E., Miller, B.P., An empirical study of the robustness of windows nt applications using random testing (2000) Proceedings of the 4th USENIX Windows System Symposium, pp. 59-68; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , PhD thesis, University of Pittsburgh, Adviser-Mary Lou Soffa; Memon, A.M., An event-.ow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability, 17 (3), pp. 137-157; Nyman, N., Using monkey test tools (2000) Software Testing & Quality Enineering Magazine, , January/February; Whittaker, J.A., Stochastic software testing (1997) Ann. Softw. Eng., 4, pp. 115-131; Whittaker, J.A., What is software testing? And why is it so difficult (2000) IEEE Software, 17 (1), pp. 70-79. , January/February; Xie, Q., Developing cost-effective model-based techniques for GUI testing (2006) Proceedings - International Conference on Software Engineering, 2006, pp. 997-1000. , Proceeding of the 28th International Conference on Software Engineering 2006, ICSE '06; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Transactions on Software Engineering, 28 (2), pp. 183-200. , February","Hofer, B.; Technische Universität Graz, Inffeldgasse 16b/2, A-8010 Graz, Austria; email: hofer@ist.tugraz.at",,"Association for Computing Machinery, ACM;IEEE;IEEE Computer Society;SIGSOFT",,"2009 ICSE Workshop on Automation of Software Test, AST 2009","16 May 2009 through 24 May 2009","Vancouver, BC",77442,,9781424437436,,,"English","Proc. ICSE Workshop Autom. Softw. Tes., AST",Conference Paper,"Final","",Scopus,2-s2.0-70349654123
"Yuan X., Cohen M.B., Memon A.M.","55469919200;8719004300;35599876500;","Towards dynamic adaptive automated test generation for graphical user interfaces",2009,"IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2009",,, 4976395,"263","266",,14,"10.1109/ICSTW.2009.26","https://www.scopus.com/inward/record.uri?eid=2-s2.0-69949092065&doi=10.1109%2fICSTW.2009.26&partnerID=40&md5=d27decbd78ef52a1b31d16ea48e9965e","Dept. of Computer Science, Univ. of Maryland, College Park, MD, United States; Dept. of Computer Science and Engineering, Univ. of Nebraska-Lincoln, Lincoln, NE, United States; Dept. of Computer Science, UMIACS, Univ. of Maryland, College Park, MD, United States","Yuan, X., Dept. of Computer Science, Univ. of Maryland, College Park, MD, United States; Cohen, M.B., Dept. of Computer Science and Engineering, Univ. of Nebraska-Lincoln, Lincoln, NE, United States; Memon, A.M., Dept. of Computer Science, UMIACS, Univ. of Maryland, College Park, MD, United States","Graphical user interfaces (GUIs) present an enormous number of potential event sequences to users. During testing it is necessary to cover this space, however the complexity of modern GUIs has made this an increasingly difficult task. Our past work has demonstrated that it is important to incorporate ""context"" into GUI test cases, in terms of event combinations, event sequence length, and by considering all possible starting and ending positions for each event. Despite the use of our most refined modeling techniques, many of the generated test cases remain unexecutable. In this paper, we posit that due to the dynamic state-based nature of GUIs, it is important to incorporate feedback from the execution of tests into test case generation algorithms. We propose the use of an evolutionary algorithm to generate test suites with fewer unexecutable test cases and higher event interaction coverage. © 2009 IEEE.",,"Automated test generations; Dynamic state; Event sequence; Modeling technique; Test case; Test case generation; Computer software selection and evaluation; Evolutionary algorithms; Software testing; State feedback; Technical presentations; Testing; Verification; Graphical user interfaces",,,,,,,,"Cohen, D.M., Dalal, S.R., Fredman, M.L., Patton, G.C., The AETG system: An approach to testing based on combinatorial design (1997) IEEE Trans. on Soft. Eng, 23 (7), pp. 437-444; Harman, M., The current state and future of search based software engineering (2007) Future of Soft. Eng, pp. 342-357; Korel, B., Automated software test data generation (1990) IEEE Trans. on Soft. Eng, 16 (8), pp. 870-879; McMinn, P., Search-based software test data generation: A survey (2004) Soft. Test., Verif. and Rel, 14 (2), pp. 105-156; Pargas, R., Harrold, M.J., Peck, R., Test-data generation using genetic algorithms (1999) Soft. Test., Verif. and Rel, 9 (3), pp. 263-282; Strecker, J., Memon, A.M., Testing graphical user interfaces (2009) Enc. of Info. Sci. and Tech., Second ed, , IGI Global; White, L.J., Regression testing of GUI event interactions (1996) Intl. Conf. on Soft. Maint, pp. 350-358; Yilmaz, C., Cohen, M.B., Porter, A., Covering arrays for efficient fault characterization in complex configuration spaces (2006) IEEE Trans. on Soft. Eng, 31 (1), pp. 20-34; Yuan, X., Cohen, M., Memon, A.M., Covering array sampling of input event sequences for automated GUI testing (2007) Intl. Conf. on Auto. Soft. Eng, pp. 405-408; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) Intl. Conf. on Soft. Eng, pp. 396-405. , may","Yuan, X.; Dept. of Computer Science, , College Park, MD, United States; email: xyuan@cs.umd.edu",,"IEEE Computer Society;Microsoft;IEEE;FedEx Institute of Technology;IBM Research",,"IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2009","1 April 2009 through 4 April 2009","Denver, CO",76734,,9780769536712,,,"English","IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-69949092065
"Grechanik M., Xie Q., Fu C.","55904114500;35761589700;7402803185;","Creating GUI testing tools using accessibility technologies",2009,"IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2009",,, 4976392,"243","250",,23,"10.1109/ICSTW.2009.31","https://www.scopus.com/inward/record.uri?eid=2-s2.0-69949085056&doi=10.1109%2fICSTW.2009.31&partnerID=40&md5=3b02f0c25bf3b32e45d00aaf17920d28","Accenture Technology Labs., Chicago, IL 60601, United States","Grechanik, M., Accenture Technology Labs., Chicago, IL 60601, United States; Xie, Q., Accenture Technology Labs., Chicago, IL 60601, United States; Fu, C., Accenture Technology Labs., Chicago, IL 60601, United States","Since manual black-box testing of GUI-based APplications (GAPs) is tedious and laborious, and existing tools do not fully address different aspects of the testing process, test engineers create custom testing tools to automate the testing process. These tools interact with GAPs by performing actions on their GUI objects. An extra effort that test engineers put in writing test tools is paid off when these tools are run repeatedly on different GAPs. Unfortunately, creating custom GUI testing tools is a laborious and intellectually intensive process, during which test engineers use platform-specific libraries and techniques. As a result, these tools are expensive, difficult to maintain and evolve, and they often run only on specific platforms. We offer a universal approach for creating custom testing GUI tools. This approach is lightweight, portable, non-intrusive, universal, and cheap, and it combines a non-standard use of accessibility technologies for accessing and controlling GAPs in a uniform way with a visualization mechanism that enables test personnel to interact with GUI objects by performing point-and-click, drag-and-drop operations on GAPs. We describe how we used this approach to create various GUI testing tools, delve into technical features of accessibility technologies, and review our experience with this approach. © 2009 IEEE.",,"Black-box testing; Drag-and-drop; GUI testing; GUI tools; Non-intrusive; Technical features; Test engineers; Test tools; Testing process; Testing tools; Universal approach; Computer software selection and evaluation; Software testing; Technical presentations; Test facilities; Testing; Verification; Graphical user interfaces",,,,,,,,"Screen scraping, , http://en.wikipedia.org/wiki, Screen-scraping entry in Wikipedia; Section 508 of the Rehabilitation Act, , http://www.access-board.gov/508.htm; T. Ball. On the limit of control flow analysis for regression test selection. In Proceedings of ISSTA-98, 23,2 of ACM Software Engineering Notes, pages 134-142, New York, Mar.2-5 1998; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, 2nd edition; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) ICSE '05, pp. 571-579. , New York, NY, USA; A. Bertolino. Software testing research: Achievements, challenges, dreams. In FOSE '07: 2007 Future of Software Engineering, pages 85-103, Washington, DC, USA, 2007. IEEE Computer Society; Bible, J., Rothermel, G., Rosenblum, D.S., A comparative study of coarse- and fine-grained safe regression test-selection techniques (2001) ACMTrans. Softw. Eng. Methodol, 10 (2), pp. 149-183; Binkley, D., Reducing the cost of regression testing by semantics guided test case selection (1995) ICSM, pp. 251-263. , G. Caldiera and K. Bennett, editors, Washington, Oct; Conroy, K.M., Grechanik, M., Hellige, M., Liongosari, E.S., Xie, Q., Automatic test generation from gui applications for testing web services (2007) ICSM, pp. 345-354; Dustin, E., Rashka, J., Paul, J., (2004) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley, September; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley, September; Grechanik, M., Xie, Q., Fu, C., Maintaining and evolving gui-directed test scripts (2009) ICSE '09, pp. 571-579; Harrold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions of Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Kaner, C., Improving the maintainability of automated test suites (1997) Software QA, 4 (4); Kim, J.-M., Porter, A.A., A history-based test prioritization technique for regression testing in resource constrained environments (2002) ICSE, pp. 119-129; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31. , Jan; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the ESEC and FSE-11, pp. 118-127. , Sept; Miller, R.C., End-user programming for web users (2003) End User Development Workshop, Conference on Human Factors in Computer Systems; B. A. Myers. Why are human-computer interfaces difficult to design and implement? Technical report, Pittsburgh, PA, USA, 1993; Ren, X., Shah, F., Tip, F., Ryder, B.G., Chesley, O., Chianti: A tool for change impact analysis of java programs (2004) OOPSLA, pp. 432-448; Santelices, R.A., Chittimalli, P.K., Apiwattanapong, T., Orso, A., Harrold, M.J., Test-suite augmentation for evolving software (2008) ASE, pp. 218-227; Xie, Q., Memon, A.M., Model-based testing of community-driven open-source GUI applications (2006) ICSM, pp. 145-154","Grechanik, M.; Accenture Technology Labs., Chicago, IL 60601, United States; email: mark.grechanik@accenture.com",,"IEEE Computer Society;Microsoft;IEEE;FedEx Institute of Technology;IBM Research",,"IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2009","1 April 2009 through 4 April 2009","Denver, CO",76734,,9780769536712,,,"English","IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,"Final","",Scopus,2-s2.0-69949085056
"Sama M., Harty J.","25723632100;28267640900;","Using code instrumentation to enhance testing on J2ME: A lesson learned with Jinjector",2009,"Proceedings of the 10th Workshop on Mobile Computing Systems and Applications, HotMobile'09",,, 15,"","",,1,"10.1145/1514411.1514424","https://www.scopus.com/inward/record.uri?eid=2-s2.0-67651012795&doi=10.1145%2f1514411.1514424&partnerID=40&md5=60e6a957d45084af324f4e1f8dc17555","Google, London, United Kingdom","Sama, M., Google, London, United Kingdom; Harty, J., Google, London, United Kingdom","A wide range of J2ME applications are GUI-driven with significant code dedicated to handle the graphical user interface (GUI). To maximize the chances of detecting bugs, effective testing of such applications require end-to-end testing on devices; as some bugs are related to specific devices. Unfortunately there are few software tools, such as code coverage and GUI testing tools, suitable for testing J2ME applications. A tool which we implemented, JInjector, instruments the system under test (SUT) in order to run automated tests in emulators and on the actual devices we need to support. In this paper we discuss the theory behind two features of JInjector: code coverage, and end-to-end testing, and the results from testing a fully-featured commercial application. © 2009 ACM.","Code Coverage; Design; Instrumentation; Java 2 micro edition; Testing; Verification","Automated test; Code Coverage; Code instrumentation; Commercial applications; Detecting bugs; Effective testing; GUI testing; Instrumentation; Java 2 micro edition; Software tool; System under test; Computer science; Computer systems; Instruments; Java programming language; Mobile computing; Graphical user interfaces",,,,,,,,"Apache, , http://ant.apache.org/; http://cobertura.sourceforge.net/, M. Doliner; Google Code, , http://code.google.com/p/jinjector/; Harty, J., Gaillard, O., Sama, M., Jinjector: A code coverage and End-To-End testing framework for J2ME and RIM (2008) Google Testing Automation Conference, , Google, October; http://developer.apple.com/iphone/, A. Inc; Java Community Process, , http://jcp.org/en/jsr/detail?id=185; Java Community Process, , http://jcp.org/en/jsr/overview; Nokia Forum, , http://wiki.forum.nokia.com/index.php/ KIS000802\_-\_Repeated\_WLAN\_connection\_causes\_memory\_allocation\_failure; Objectweb, , http://asm.objectweb.org/; http://antenna.sourceforge.net/, J. Pleumann and O; http://na.blackberry.com/eng/developers/, Research In Motion Ltd; Selenium, , http://openqa.org; Sourceforge, , http://j2meunit.sourceforge.net/; Sourceforge, , http://ltp.sourceforge.net/coverage/lcov.php; http://developers.sun.com/mobility/midp/articles/models/, Sun Microsystems Inc; http://developers.sun.com/mobility/midp/articles/security/, Sun Microsystems Inc; http://java.sun.com/products/sjwtoolkit/download.html, Sun Microsystems Inc; WebDriver, , http://code.google.com/p/webdriver/; Weiss, D., Zduniak, M., Automated integration tests for mobile applications in Java 2 micro edition (2007) Proceedings of the 10th International Conference on Business Information Systems, Poznań, Poland, pp. 478-487. , 4439 of Lecture Notes in Computer Science, Springer","Sama, M.; Google, London, United Kingdom; email: rax@google.com",,,,"10th Workshop on Mobile Computing Systems and Applications, HotMobile'09","23 February 2009 through 24 February 2009","Santa Cruz, CA",76371,,9781605582832,,,"English","Proc. Workshop Mobile Comput. Syst. Appl., HotMobile",Conference Paper,"Final","",Scopus,2-s2.0-67651012795
"Jääskeläinen A., Kervinen A., Katara M., Valmari A., Virtanen H.","24923055000;6507407206;7801543558;14831947400;57188870991;","Synthesizing test models from test cases",2009,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","5394 LNCS",,,"179","193",,11,"10.1007/978-3-642-01702-5_18","https://www.scopus.com/inward/record.uri?eid=2-s2.0-67650302048&doi=10.1007%2f978-3-642-01702-5_18&partnerID=40&md5=fc04ef4c9cb3dd29c636d24423413615","Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland","Jääskeläinen, A., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Kervinen, A., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Katara, M., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Valmari, A., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Virtanen, H., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland","In this paper we describe a methodology for synthesizing test models from test cases. The context of our approach is model-based graphical user interface (GUI) testing of smartphone applications. To facilitate the deployment of model-based testing practices, existing assets in test automation should be utilized. While companies are interested in the benefits of new approaches, they may have already invested heavily in conventional test suites. The approach presented in this paper enables using such suites for creating complex test models that should have better defect detection capability. The synthesis is illustrated with examples from two small case studies conducted using real test cases from industry. Our approach is semi-automatic requiring user interaction. We also outline planned tool support to enable efficient synthesis process. © Springer-Verlag Berlin Heidelberg 2009.",,"Defect detection; Efficient synthesis; Model based testing; Model-based; New approaches; Semi-automatic; Smart phones; Test Automation; Test case; Test models; Tool support; User interaction; Graphical user interfaces; Synthesis (chemical); Verification; Testing",,,,,,,,"Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann, San Francisco; Kaner, C., Bach, J., Pettichord, B., (2001) Lessons Learned in Software Testing: A Context-Driven Approach, , Wiley, Chichester; Robinson, H., Obstacles and opportunities for model-based testing in an industrial software environment (2003) Proceedings of the 1st European Conference on Model-Driven Software Engineering, pp. 118-127. , Nuremberg, Germany; Hartman, A., (2004) AGEDIS Project Final Report, , http://www.agedis.de/documents/FinalPublicReport%28D1.6%29.PDF, cited June 2008; (2008) S60, , http://www.s60.com, Cited June; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Satama, M., Towards deploying model-based testing with a domain-specific modeling approach (2006) Proceedings of TAIC PART - Testing: Academic & Industrial Conference, pp. 81-89. , Windsor, UK, IEEE Computer Society, Los Alamitos; Jääskeläinen, A., Katara, M., Kervinen, A., Heiskanen, H., Maunumaa, M., Pääkkönen, T., Model-based testing service on the web (2008) TestCom/FATES 2008, 5047, pp. 38-53. , Suzuki, K., Higashino, T., Ulrich, A., Hasegawa, T. (eds.), LNCS, Springer, Heidelberg; Nachmanson, L., Veanes, M., Schulte, W., Tillmann, N., Grieskamp, W., Optimal strategies for testing nondeterministic systems (2004) ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 55-64. , ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis; Jääskeläinen, A., Kervinen, A., Katara, M., Creating a test model library for GUI testing of smartphone applications (2008) Proceedings of the 8th International Conference on Quality Software (QSIQ 2008), pp. 276-282. , IEEE Computer Society, Los Alamitos; Fewster, M., Graham, D., (1999) Software Test Automation: Effective use of test execution tools, , Addison Wesley, Reading; Buwalda, H., Action figures (2003) STQE Magazine, pp. 42-47. , March/April; Hansen, H., Virtanen, H., Valmari, A., Merging state-based and action-based verification (2003) Proceedings of ACSD 2003, the Third International Conference on Application of Concurrency to System Design, pp. 150-156. , IEEE, Los Alamitos; Virtanen, H., Hansen, H., Valmari, A., Nieminen, J., Erkkila, T., Tampere Verification Tool (2004) LECTURE NOTES IN COMPUTER SCIENCE, (2988), pp. 153-157. , Tools and Algorithms for the Construction and Analysis of Systems; Amyot, D., Eberlein, A., An Evaluation of Scenario Notations and Construction Approaches for Telecommunication Systems Development (2003) Telecommunication Systems, 24 (1), pp. 61-94. , DOI 10.1023/A:1025890110119; Liang, H., Dingel, J., Diskin, Z., A comparative survey of scenario-based to state-based model synthesis approaches (2006) Proceedings of the 2006 International Workshop on Scenarios and State Machines: Models, Algorithms, and Tools (SCESM 2006), pp. 5-12; Makinen, E., Systa, T., MAS - an interactive synthesizer to support behavioral modeling in UML (2001) Proceedings - International Conference on Software Engineering, pp. 15-24","Jääskeläinen, A.; Tampere University of Technology, P.O.Box 553, FI-33101 Tampere, Finland; email: antti.m.jaaskelainen@tut.fi",,"IBM Haifa Research Lab",,"4th International Haifa Verification Conference, HVC 2008","27 October 2008 through 30 October 2008","Haifa",76574,03029743,3642017010; 9783642017018,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-67650302048
"Bertolini C., Peres G., D́amorim M., Mota A.","56274935100;26967906900;26967454300;8886017800;","An empirical evaluation of automated black-box testing techniques for crashing GUIs",2009,"Proceedings - 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009",,, 4815334,"21","30",,11,"10.1109/ICST.2009.27","https://www.scopus.com/inward/record.uri?eid=2-s2.0-67650158913&doi=10.1109%2fICST.2009.27&partnerID=40&md5=6b0d9025ce7bb69cf238a57f14e3aacc","Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil","Bertolini, C., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; Peres, G., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; D́amorim, M., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil; Mota, A., Center of Informatics, Federal University of Pernambuco, P.O. Box 7851, 50732-970, Recife-PE, Brazil","This paper reports an empirical evaluation of four blackbox testing techniques for crashing programs through their GUI interface: SH, AF, DH, and BxT. The techniques vary in their level of automation and the results they offer. The experiments we conducted quantify execution time and the capability of finding a crash for each technique on 8 different cellular phone configurations with historical (real) errors. The results show that AF and BxT offered better precision (i.e., the fraction of runs that end in a crash out of the total number of runs) than SH and DH (AF and BxT found crashes in all 8 configurations), and BxT crashes the application the fastest more often (5 out of 8 cases). The experiments reveal that the selection of the random seed to AF and BxT results in a high variance of execution time (i.e., the time the technique takes to either crash the application or timeout in 40h): the mean (across 8 phone configurations) of the standard deviation of execution times (for 10 runs per each phone configuration) is 7.79h for AF and 5.21h for BxT. Despite this fact, AF and BxT could crash the application consistently: the mean of the precision (fraction of the 10 runs that results in a crash) is 74%for AF and 69% for BxT.",,"Black-box testing; Cellular Phone; Empirical evaluations; Execution time; Random seeds; Standard deviation; Computer software selection and evaluation; Graphical user interfaces; Software testing; Telephone sets; Testing; Verification",,,,,,,,"James Bach - Satisfice, Inc, , http://www.satisfice.com/tools/pairs.zip; Linux Java, , http://www.motorola.com/motomagx/; Symbian, , http://www.symbian.org; Apfelbaum, L., Doyle, J., Model based testing (1997) In Software Quality Week Conference, pp. 296-300; Beizer, B., (1990) Software Testing Techniques, , International Thomson Computer Press; Brooks, A.P., Memon, M.A., Automated gui testing guided by usage profiles (2007) In ASE '07, pp. 333-342. , New York, NY, USA,. ACM; Gotlieb, A., Exploiting symmetries to test programs (2003) In ISSRE, , Denver, Colorado, November; Harman, M., Wegener, J., Getting results from searchbased approaches to software engineering (2004) In ICSE, pp. 728-729; Iosif, R., Exploiting heap symmetries in explicit-state model checking of software (2001) In ASE, p. 254. , Washington, DC, USA, IEEE Computer Society; Lee, D., Yannakakis, M., Principles and methods of testing finite state machines - A survey (1996) Proceedings of the IEEE, 84 (8), pp. 1090-1123. , PII S0018921996055247; Memon, M.A., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing? (2003) In ASE, pp. 164-173; Myers, J.G., (1979) Art of Software Testing., , John Wiley & Sons,Inc; Hailpern, B., Santhanam, P., Software debugging, testing, and verification (2002) IBM Systems Journal, 41 (1), pp. 4-12; Visser, W., Pasareanu, S.C., Pelanek, R., Test input generation for Java containers using state matching (2006) In ISSTA, pp. 37-48; Yuan, X., Memon, M.A., Using gui run-time state as feedback to generate test cases (2007) In ICSE, pp. 396-405. , Washington, DC, USA, IEEE Computer Society","Bertolini, C.; Center of Informatics, P.O. Box 7851, 50732-970, Recife-PE, Brazil; email: cbertolini@cin.ufpe.br",,"IEEE Computer Society",,"2nd International Conference on Software Testing, Verification, and Validation, ICST 2009","1 April 2009 through 4 April 2009","Denver, CO",76415,,9780769536019,,,"English","Proc. - Int. Conf. Softw. Test., Verif., Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-67650158913
"Fu C., Grechanik M., Xie Q.","7402803185;55904114500;35761589700;","Inferring types of references to GUI objects in test scripts",2009,"Proceedings - 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009",,, 4815332,"1","10",,12,"10.1109/ICST.2009.12","https://www.scopus.com/inward/record.uri?eid=2-s2.0-67650154734&doi=10.1109%2fICST.2009.12&partnerID=40&md5=6bbbc84ed2dc95bd5bb537d11680b82c","Accenture Technology Labs, Chicago, IL 60601, United States","Fu, C., Accenture Technology Labs, Chicago, IL 60601, United States; Grechanik, M., Accenture Technology Labs, Chicago, IL 60601, United States; Xie, Q., Accenture Technology Labs, Chicago, IL 60601, United States","Since manual black-box testing of GUI-based APplications (GAPs) is tedious and laborious, test engineers create test scripts to automate the testing process. These test scripts interact with GAPs by performing actions on their GUI objects. Unlike conventional languages that require programmers to declare types of variables explicitly, test script statements reference GUI objects using their properties (e.g., location, color, size, etc). The absence of type information exacerbates the process of understanding test scripts, making maintenance and evolution of these scripts expensive and prohibitive, thus obliterating benefits of test automation. We offer a novel approach for Type Inference of GUI Object References (TIGOR) in test scripts. TIGOR makes types of GUI objects explicit in the source code of scripts, enabling test engineers to reason more effectively about the interactions between operations in complex test scripts and GUI objects that these operations reference. We describe our implementation and give an algorithm for automatically inferring types of GUI objects. We built a tool and evaluated it on different GAPs. Our experience suggests that TIGOR is practical and efficient, and it yields appropriate types of GUI objects.",,"Black-box testing; Object reference; Source codes; Test Automation; Test engineers; Test scripts; Testing process; Type inferences; Type information; Computer software maintenance; Computer software selection and evaluation; Graphical user interfaces; Software testing; Verification; Testing",,,,,,,,"Private communications with managers and teamlead-ers at the Accenture testing practice; Section 508 of the Rehabilitation Act., , http://www.access-board.gov/508.htm; Ball, T., On the limit of control flow analysis for regression test selection (1998) Proceedings of ISSTA-98, 23 (2), pp. 134-142. , ACM Software Engineering Notes, New York, Mar.2-5; Ballou, M.-C., Worldwide distributed automated software quality tools: 2007-2011 forecast and 2006 vendor shares: Dominating quality (2007) IDC Report, p. 210132. , 1, Dec; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, 2nd edition; Berner, S., Weber, R., Keller, R.K., Observations and lessons learned from automated testing (2005) ICSE '05, pp. 571-579. , New York, NY, USA; Bertolino, A., Software testing research: Achievements, challenges, dreams (2007) FoSE 2007: Future of Software Engineering, pp. 85-103. , DOI 10.1109/FOSE.2007.25, 4221614, FoSE 2007: Future of Software Engineering; Bible, J., Rothermel, G., Rosenblum, D.S., A comparative study of coarse- and fine-grained safe regression test-selection techniques (2001) ACM Transactions on Software Engineering and Methodology, 10 (2), pp. 149-183. , DOI 10.1145/367008.367015; Binkley, D., Reducing the cost of regression testing by semantics guided test case selection (1995) ICSM, pp. 251-263. , In G. Caldiera and K. Bennett, editors, Washington, Oct; Dustin, E., Rashka, J., Paul, J., (2004) Automated Software Testing: Introduction, Management, and Performance, , Addison-Wesley, September; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley, September; Harrold Mary Jean, Gupta Rajiv, Soffa Mary Lou, Methodology for controlling the size of a test suite (1993) ACM Transactions on Software Engineering and Methodology, 2 (3), pp. 270-285. , DOI 10.1145/152388.152391; Kaner, C., Improving the maintainability of automated test suites (1997) Software QA, 4 (4); Kim, J.-M., Porter, A., A history-based test prioritization technique for regression testing in resource constrained environments (2002) Proceedings - International Conference on Software Engineering, pp. 119-129; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31. , Jan; Leijen, D., Wxhaskell, W., (2004) Proceedings of the 2004 ACM SIGPLAN workshop on Haskell, p. 2222. , Snowbird, Utah; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings ofthe ESEC and FSE-11, pp. 118-127. , Sept; Myers, B.A., Why are human-computer interfaces difficult to design and implement (1993) Technical Report, , Pittsburgh, PA, USA; Peterson, J., Courtney, A., Robinson, B., Can gui programming be liberated from the io monad (2004) Proceedings of the 2004 ACM SIGPLAN workshop on Haskell, pp. 22-22. , Snowbird, Utah; Pierce, B.C., (2002) Types and Programming Languages, , MIT Press; Ren, X., Shah, F., Tip, F., Ryder, B.G., Ches-ley, O., Chianti: a tool for change impact analysis of java programs (2004) OOPSLA, pp. 432-448; Taylor, C.J., A theory of core fudgets (1999) SIGPLAN Notices (ACM Special Interest Group on Programming Languages), 34 (1), pp. 75-85","Fu, C.; Accenture Technology Labs, Chicago, IL 60601, United States; email: chen.fu@accenture.com",,"IEEE Computer Society",,"2nd International Conference on Software Testing, Verification, and Validation, ICST 2009","1 April 2009 through 4 April 2009","Denver, CO",76415,,9780769536019,,,"English","Proc. - Int. Conf. Softw. Test., Verif., Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-67650154734
"Mathew R., Spraetz R.","57220533465;26968064400;","Test automation on a SaaS platform",2009,"Proceedings - 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009",,, 4815365,"317","325",,17,"10.1109/ICST.2009.46","https://www.scopus.com/inward/record.uri?eid=2-s2.0-67650154716&doi=10.1109%2fICST.2009.46&partnerID=40&md5=35f939c9b223ec0584ecac0d15961518","Salesforce.com, 1 Market Street, San Francisco, CA 94105, United States","Mathew, R., Salesforce.com, 1 Market Street, San Francisco, CA 94105, United States; Spraetz, R., Salesforce.com, 1 Market Street, San Francisco, CA 94105, United States","Force.com is a Platform-as-a-Service (PaaS) offering that provides the infrastructure and benefits of a Softwareas- a-Service (SaaS) model as well as the enhanced ability for 3rd party developers, partners, and customers to create and deploy applications. Apex Code is a Java-based, strongly typed, object-oriented programming language that enables developers to create and customize business logic on the Force.com platform. The on-demand model frees developers to focus on developing solutions that deliver real business value by eliminating many of the problems related to traditional application development. The Force.com platform provides the Apex test framework, which contains built-in support for test creation and execution. Apex tests can be used to automate unit tests for the Apex Code as well as functional tests that simulate user actions through the user interface (UI) or Force.com Web Services API. The Apex test framework enables developers to focus on testing without worrying about any additional testing infrastructure. This paper illustrates the major features of the Apex test framework and enhancements made to improve testing capabilities on a SaaS platform.",,"Application development; Business logic; Business value; Developing solutions; Functional test; Object-oriented programming languages; On-Demand; Software-as-a-Service; Test Automation; Test framework; Testing infrastructure; Unit tests; User action; Application programming interfaces (API); Computer software selection and evaluation; Java programming language; Software testing; Testing; User interfaces; Verification; Object oriented programming",,,,,,,,"Fisher, S., The architecture of the apex platform, salesforce.com's platform for building on-demand applications (2007) Proceedings - International Conference on Software Engineering, p. 3. , DOI 10.1109/ICSECOMPANION.2007.76, 4222660, Proceedings - 29th International Conference on Software Engineering, ICSE 2007; Companion Volume; (2009), http://www.salesforce.com/us/developer/docs/apexcode/index.htm, Salesforce.com. Apex language reference. Available at; (2009), http://wiki.apexdevnet.com/index.php/Packaging, Salesforce.com. How to create and register a package. Available at; (2009), http://www.salesforce.com/us/developer/docs/pages/index.htm, Salesforce.com. Visualforce reference. Available at","Mathew, R.; Salesforce.com, 1 Market Street, San Francisco, CA 94105, United States; email: rmathew@salesforce.com",,"IEEE Computer Society",,"2nd International Conference on Software Testing, Verification, and Validation, ICST 2009","1 April 2009 through 4 April 2009","Denver, CO",76415,,9780769536019,,,"English","Proc. - Int. Conf. Softw. Test., Verif., Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-67650154716
"Fraiwan A., Samarah S., Alsmadi I.","56095846900;17435507700;17433667400;","GUI's test cases reduction using sequential patterns",2009,"3rd Mosharaka International Conference on Communications, Signals and Coding, MIC-CSC 2009",,,,"","",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897541066&partnerID=40&md5=e48caf6b8bab40327de3d57acd1dacd4","Yarmouk University, Jordan","Fraiwan, A., Yarmouk University, Jordan; Samarah, S., Yarmouk University, Jordan; Alsmadi, I., Yarmouk University, Jordan","The continuous development and enhancement of software tools and programming languages enabled developers to produce more rich and complex Graphical User Interfaces (GUIs). However, this complexity led to a significant increase in the cost of testing the software in general and its GUI in particular, as more test cases are needed to sustain acceptable coverage. In this paper, we propose a reduction technique to reduce the number of the test cases needed in the testing process, while maintaining an acceptable level of coverage. The proposed technique, namely, sequential patterns, is inherited from the data mining world. To evaluate the effectiveness of the proposed technique, several experiments are conducted using the source code of different .NET applications. Test cases are generated and executed using an automation tool.","And sequential patterns; Data mining; GUI testing; Test case generation; Test case reduction","Data mining; Graphical user interfaces; Testing; Automation tools; Continuous development; Graphical user interface (GUIs); GUI testing; Reduction techniques; Sequential patterns; Test case generation; Test case reduction; Software testing",,,,,,,,"Bertolino, A., Software testing research: Achievements, challenges, dreams (2006) Proceedings of the Future of Software Engineering at ICSE, pp. 85-103. , IEEE-CS Press; Gregory, M., Kapfhammer, G., Software testing (2004) The Computer Science Handbook, , CRC Press; Hoffman, D., (1999) Test Automation Architectures: Planning for Test Automation, Software Quality Methods, LLC3; Alsmadi, I., Magel, K., (2006) Generating Test Cases from the GUI Model, Word Scientific and Engineering Academy and Society; Jeffrey, D., Test suite reduction with selective redundancy (2005) IEEE International Conference on Software Maintenance (ICSM) 2005, IEEE Computer Society, pp. 549-558; Mahapatra, R., Singh, J., (2008) Improving the Effectiveness of Software Testing Through Test Case Reduction; Saraph, P., Last, M., Kandel, A., Test case generation and reduction by automated input-output analysis (2003) IEEE International Conference, 1, pp. 768-773; Agrawal, R., Srikant, R., Mining sequential patterns (1995) Proceeding of the 11th International Conference Data Engineering (ICDE 95), pp. 3-14. , Taipei; Master, S., Memon, A., Call stack coverage for GUI test-suite reduction (2006) Proceedings of the 17th IEEE International Symposium on Software Reliability Engineering (ISSRE 2006), pp. 33-44; Ganov, S., Khurshid, S., Perry, D., (2004) Symbolic Execution for GUI Testing, Testing, Academic & Industrial Conference-Practice and Research Techniques (TAIC-PART); Memon, A., Pollack, M., Sofa, M., Using a goal-driven approach to generate test cases for GUIs (1999) International Conference on Software Engineering. in Proceedings of the 21st International Conference on Software Engineering. Los Angeles, USA, pp. 257-266; Memon, A., Pollack, A., Soffa, M., Automated test oracles for GUIs (2000) SIGSOFT Eighth International Symposium on the Foundations of Software Engineering, San Diego, pp. 30-39; Memon, A., Pollack, M., Soffa, M., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A., (2007) An Event-flow Model of GUI-based Applications for Testing, Software Testing, Verification and Reliability, 17, pp. 137-157; Ames, A., Jie, H., (2004) Critical Paths for GUI Regression Testing, , http://www.cse.ucsc.edu/-sasha/proj/gui_testing.pdf, university of california, santa cruz; Alsmadi, I., Magel, K., (2007) An Object Oriented Framework for User Interface Test Automation, MICS 2007, , Grand Forks USA; Alsmadi, I., Magel, K., GUI path oriented test case generation (2007) International Conference on Software Engineering Theory and Practice (SETP-07) Orlando, , Florida, USA; Fayyad, U., Piatetsky-Shapiro, G., Smyth, P., From data mining to knowledge discovery: An overview (1996) Advances in Knowledge Discovery and Data Mining, pp. 1-34; Garboni, C., Massiglia, F., Trousse, T., (2005) Sequential Pattern Mining for Structure-based XML Document Classification, 3977, pp. 458-468. , Springer Berlin / Heidelberg; Chen, J., Cook, T., Mining contiguous sequential patterns from web logs (2007) International World Wide Web Conference Proceedings of the 16th International Conference on World Wide Web, pp. 1177-1178. , ACM, New York, USA; Samarah, S., Boukerche, A., Chronological tree - A compressed structure for mining behavioral patterns from wireless sensor networks (2008) Journal of Interconnection Networks, 9 (3), pp. 255-276; Last, M., Friedman, M., Kandel, A., The data mining approach to automated software testing (2003) Proceedings of the Ninth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, Washington; Alsmadi, I., Magel, K., Building a user interface test automation framework (2007) International Journal of Software Engineering (JSE), 1 (2). , University of Lahore, Pakistan; www.codeproject.com, available on 16-April-2009 at 10:00 PM",,,"","Academy Publisher Inc.","3rd Mosharaka International Conference on Communications, Signals and Coding, MIC-CSC 2009","19 November 2009 through 21 November 2009","Amman",104166,,,,,"English","Int. Conf. Commun., Signals Coding, MIC-CSC",Conference Paper,"Final","",Scopus,2-s2.0-84897541066
"Bowen J., Reeves S.","8725498700;7102635636;","UI-design driven model-based testing",2009,"Electronic Communications of the EASST","22",,,"","",16,5,"10.14279/tuj.eceasst.22.314.311","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84881528907&doi=10.14279%2ftuj.eceasst.22.314.311&partnerID=40&md5=add3490d2d1ae5199cc9b407ee960063","University of Waikato, Hamilton, New Zealand","Bowen, J., University of Waikato, Hamilton, New Zealand; Reeves, S., University of Waikato, Hamilton, New Zealand","Testing interactive systems is notoriously difficult. Not only do we need to ensure that the functionality of the developed system is correct with respect to the requirements and specifications, we also need to ensure that the user interface to the system is correct (enables a user to access the functionality correctly) and is usable. These different requirements of interactive system testing are not easily combined within a single testing strategy. We investigate the use of models of interactive systems, which have been derived from design artefacts, as the basis for generating tests for an implemented system. We give a model-based method for testing interactive systems which has low overhead in terms of the models required and which enables testing of UI and system functionality from the perspective of user interaction. © Formal Methods for Interactive Systems 2009.","Formal methods; Prototyping; Unit testing; User interface",,,,,,,,,"Alles, M., Crosby, D., Erickson, C., Harleton, B., Marsiglia, M., Pattison, G., Stienstra, C., Presenter First: Organizing Complex GUI Applications for Test-Driven Development (2006) AGILE Conference, pp. 276-288; Belli, F., Finite-State Testing and Analysis of Graphical User Interfaces (2001) ISSRE '01: Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSRE'01), pp. 34-43. , IEEE Computer Society, Washington, DC, USA; Belli, F., (2003) A Holistic View for Finite-State Modeling and Testing of User Interactions, , Technical Report 2003/1, Institute for Electrical Engineering and Information Technology, The University of Paderborn, April 2003; Bowen, J., Formal Models and Refinement for Graphical User Interface Design (2008) PhD thesis, , University of Waikato, Department of Computer Science; Bowen, J., Reeves, S., Formal Models for Informal GUI Designs (2006) In 1st International Workshop on Formal Methods for Interactive Systems, 183, pp. 57-72. , Macau SAR China, 31 October. Electronic Notes in Theoretical Computer Science, Elsevier, 2006; Bowen, J., Reeves, S., Formal Models for User Interface design artefacts (2008) Innovations in Systems and Software Engineering, 4 (2), pp. 125-141; Bowen, J., Reeves, S., Refinement for User Interface Designs (2008) Electronic Notes Theoretical Computer Science, 208, pp. 5-22; (2009) FEST (Fixtures for Easy Software Testing), , http://fest.easytesting.org/wiki/pmwiki.php; ISO/IEC 9646-1-Information Technology-Open Systems Interconnection-Conformance Testing Methodology and Framework, Part 1: General Concepts (1994) International Standards Organisation, , ISO/IEC, first edition; (2002) Prentice-Hall International series in computer science, , ISO/IEC, first edition; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing Verification and Reliability, 17 (3), pp. 137-157; Memon, A.M., Using Reverse Engineering for Automated Usability Evaluation of GUI-Based Applications (2009) In Software Engineering Models, Patterns and Architectures for HCI, , Springer-Verlag London Ltd; Paiva, A., Faria, J.C.P., Vidal, R.F.A.M., Towards the Integration of Visual and Formal Models for GUI Testing (2007) Electronic Notes Theoretical Computer Science, 190 (2), pp. 99-111; Paiva, A., Tillmann, N., Faria, J., Vidal, R., (2005) Modeling and testing hierarchical GUIs, , In D. Beauquier, E. Borger, and A. Slissenko, editors, ASM05. Universite de Paris; Ruiz, A., Price, Y.W., Test-Driven GUI Development with TestNG and Abbot (2007) IEEE Software, 24 (3), pp. 51-57; http://research.microsoft.com/specsharp/; Utting, M., Legeard, B., (2006) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann Publishers Inc., San Francisco, CA, USA; White, L., Almezen, H., Generating Test Cases for GUI Responsibilities Using Complete Interaction Sequences (2000) In ISSRE '00: Proceedings of the 11th International Symposium on Software Reliability Engineering, p. 110. , IEEE Computer Society, Washington, DC, USA; Xie, Q., Memon, A.M., Model-Based Testing of Community-Driven Open-Source GUI Applications (2006) ICSM '06: Proceedings of the 22nd IEEE International Conference on Software Maintenance, pp. 145-154. , IEEE Computer Society, Washington, DC, USA; Yuan, X., Cohen, M.B., Memon, A.M., Towards Dynamic Adaptive Automated Test Generation for Graphical User Interfaces (2009) ICSTW '09: Proceedings of the IEEE International Conference on Software Testing, Verification, and Validation Workshops, pp. 263-266. , IEEE Computer Society, Washington, DC, USA",,,,"Universitatsbibliothek TU Berlin",,,,,18632122,,,,"English","Electron. Commun. EASST",Article,"Final","",Scopus,2-s2.0-84881528907
"Xie Q., Grechanik M., Fu C.","35761589700;55904114500;7402803185;","REST: A tool for reducing effort in script-based testing",2008,"IEEE International Conference on Software Maintenance, ICSM",,, 4658108,"468","469",,14,"10.1109/ICSM.2008.4658108","https://www.scopus.com/inward/record.uri?eid=2-s2.0-57849095373&doi=10.1109%2fICSM.2008.4658108&partnerID=40&md5=4eb4e140735a0fb446c4fd35774f9550","Accenture Technology Labs., Chicago, IL 60601, United States","Xie, Q., Accenture Technology Labs., Chicago, IL 60601, United States; Grechanik, M., Accenture Technology Labs., Chicago, IL 60601, United States; Fu, C., Accenture Technology Labs., Chicago, IL 60601, United States","Since manual black-box testing of GUI-based APplications (GAPs) is tedious and laborious, test engineers create test scripts to automate the testing process. These test scripts interact with GAPs by performing actions on their GUI objects. An extra effort that test engineers put in writing test scripts is paid off when these scripts are run repeatedly. Unfortunately, releasing new versions of GAPs breaks their corresponding test scripts thereby obliterating benefits of test automation. We propose a tool called Reducing Effort in Script-based Testing (REST) for guiding test personnel through changes in test scripts so that they can use these modified scripts to test new versions of their respective GAPs. During demonstration of REST we will show how this tool enables test personnel to maintain and evolve test scripts with a high degree of automation and precision. © 2008 IEEE.",,"Computer programming languages; Computer software maintenance; Graphical user interfaces; Maintenance; Personnel; Personnel testing; Black boxes; Degree of automations; Test automations; Test engineers; Testing processes; Testing",,,,,,,,"Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley ACM Press, September; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the ESEC and FSE-11, pp. 118-127. , Sept","Xie, Q.; Accenture Technology Labs., Chicago, IL 60601, United States; email: qing.xie@accenture.com",,"IEEE;IEEE Computer Society;IEEE Computer Society Technical Council on Software Engineering",,"24th IEEE International Conference on Software Maintenance, ICSM 2008","28 September 2008 through 4 October 2008","Beijing",74519,,9781424426140,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-57849095373
"Moreira R.M.L.M., Paiva A.C.R.","25925193000;7102683763;","Visual abstract notation for gui modelling and testing: VAN4GUIM",2008,"ICSOFT 2008 - Proceedings of the 3rd International Conference on Software and Data Technologies","SE","GSDCA/M/-",,"104","111",,12,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-57649210773&partnerID=40&md5=66834b69de34a5dc741d6973d0ad396c","Faculty of Engineering, University of Porto, Informatics Engineering Department, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal","Moreira, R.M.L.M., Faculty of Engineering, University of Porto, Informatics Engineering Department, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; Paiva, A.C.R., Faculty of Engineering, University of Porto, Informatics Engineering Department, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal","This paper presents a new Visual Notation for GUI Modelling and testing (VAN4GUIM) which aims to hide, as much as possible, formalism details inherent to models used in model-based testing (MBT) approaches and to promote the use of MBT in industrial environments providing a visual front-end for modelling which is more attractive to testers than textual notation. This visual notation is developed as five different UML profiles and based on three notations/concepts: Canonical Abstract Prototyping notation; ConcurTaskTrees (CTT) notation; and the Window Manager concept. A set of translation rules was defined in order to automatically perform conversion from VAN4GUIM to Spec#. GUI models are developed with VAN4GUIM notation then translated automatically to Spec# that can be then completed manually with additional behaviour not included in the visual model. As soon as a Spec# model is completed, it can be used as input to Spec Explorer (model-based testing tool) which generates test cases and executes those tests automatically.","GUI modelling; GUI testing; Test coverage criteria; UML profiles; Visual GUI modelling","GUI modelling; GUI testing; Test coverage criteria; UML profiles; Visual GUI modelling; Abstracting; Testing; Graphical user interfaces",,,,,,,,"Barnett, M., Deline, R., Jacobs, B., Fähndrich, M., Leino, K.R.M., Schulte, W., Venter, H., Programming System: Challenges and Directions (2005), The Spec; Blankenhorn, K., A UML Profile for GUI Layout (2004) Department of Digital Media, , University of Applied Sciences Furtwangen; Blankenhorn, K. & Walter, W. (2004) Extending UML to GUI Modeling. IN R. KEIL-SLAWIK, H. S., G. SZWILLUS (Ed.) Mensch & Computer 2004. Allgegenwärtige Interaktion, München, Oldenbourg Verlag; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., (2005) Model-Based Testing of Object-Oriented Reactive Systems with Spec Explorer, , Microsoft Research; Constantine, L.L., Canonical Abstract Prototypes for Visual and Interaction Design. Interactive Systems. Design, Specification and Verification DSV-IS'03 (2003) Springer LNCS, p. 2844; Nunes, N. J. & Cunha, J. F. E. (2000) Towards a UML profile for interaction design: the Wisdom approach. IN SELIC, A. E. A. S. K. A. B. (Ed.) Third International Conference. York, UK, Springer; Paiva, A. C. R. (2007) Automated Specification-Based Testing of Graphical User Interfaces. Department of Electrical and Computer Engineering. Porto, Engineering Faculty of Porto University (Ph.D thesis); Paterno, F., Mancini, C., Meniconi, S., ConcurTaskTrees: A Diagrammatic Notation for Specifying Task Models (1997) Interact, 97; Silva, J.L., Campos, J.C., Paiva, A.C.R., Model-based user interface testing with Spec Explorer and ConcurTaskTrees (2007) 2nd International Workshop on Formal Methods for Interactive Systems, , Lancaster, UK; Silva, P.P.D., Paton, N.W., UMLi: The Unified Modeling Language for Interactive Applications (2000) Third International Conference UML2000 - The Unified Modeling Language. Advancing the Standard; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , San Francisco, Morgan Kaufmann Publisher; Vanderdonckt, J., Limbourg, Q., Michotte, B., Bouillon, L., Trevisan, D., Florins, M., USIXML: A User Interface Description Language for Specifying Multimodal User Interfaces (2004) WMI'04: Proceedings of the W3C Workshop on Multimodal Web Applications","Moreira, R. M. L. M.; Faculty of Engineering, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; email: ei04093@fe.up.pt",,"WfMC - Workflow Management Coalition - Process Thought Leadership",,"3rd International Conference on Software and Data Technologies, ICSOFT 2008","5 July 2008 through 8 July 2008","Porto",74309,,9789898111524,,,"English","ICSOFT - Int. Conf. Softw. Data Technol., Proc.",Conference Paper,"Final","",Scopus,2-s2.0-57649210773
"Yuan X., Memon A.M.","55469919200;35599876500;","Alternating GUI test generation and execution",2008,"Proceedings - Testing: Academic and Industrial Conference Practice and Research Techniques, TAIC PART 2008",,, 4670297,"23","32",,14,"10.1109/TAIC-PART.2008.10","https://www.scopus.com/inward/record.uri?eid=2-s2.0-57649187334&doi=10.1109%2fTAIC-PART.2008.10&partnerID=40&md5=edc3b58aff31c0a1acc2e1f4869073a0","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Yuan, X., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Users of today's software perform tasks by interacting with a graphical user interface (GUI) front-end via sequences of input events. Due to the flexibility offered by most GUIs, the number of event sequences grows exponentially with length. One ubiquitous challenge of GUI testing is to selectively generate those sequences that lead to potentially problematic states. This paper presents ALT, a new technique that generates GUI test cases in batches, by leveraging GUI run-time information from a previously run batch to obtain the next batch. Each successive batch consists of ""longer"" test cases that expand the state space to be explored, yet prune the ""unimportant"" states. The ""alternating"" nature of ALT allows it to enhance the next batch by leveraging certain relationships between GUI events (e.g., one enables the other, one alters the other's execution) that are revealed only at run-time and non-trivial to infer statically. An empirical study on four fielded GUI-based applications demonstrates that ALT is successful at identifying complex failure-causing interactions between GUI events.",,"Complex failures; Empirical studies; Event sequences; GUI testing; GUI tests; Input events; New techniques; State spaces; TEst cases; Time informations; Graphical user interfaces",,,,,,,,"Alessandro Marchetto, P.T., Ricca, F., State-based testing of Ajax web applications (2008) Proceedings of the 1st International Conference on Software Testing, Verification, and Valication, pp. 121-130. , April 9-11; Boyapati, C., Khurshid, S., Marinov, D., Korat: Automated testing based on java predicates (2002) ISSTA '02, pp. 123-133; d'Amorim, M., Pacheco, C., Xie, T., Marinov, D., Ernst, M.D., An empirical comparison of automated generation and classification techniques for object-oriented unit testing (2006) Proceedings of the 21 st IEEE/ACM International Conference on Automated Software Engineering; Dwyer, M.B., Canrr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) ESEC/FSE '97, pp. 244-261; Grosso, C.D., Antoniol, G., Merlo, E., Galinier, P., Detecting buffer overflow via automatic test input data generation (2008) Comput. Open Res, 35 (10), pp. 3125-3143; Hierons, R.M., Ural, H., Optimizing the length of checking sequences (2006) IEEE Transactions on Computers, 55 (5), pp. 618-629; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) SIGPLAN Not, 39 (12), pp. 92-106; Masri, W., Podgurski, A., Leon, D., An empirical study of test case filtering techniques based on exercising information flows (2007) IEEE Trans. on Soft. Eng, 33 (7), pp. 454-477; McMinn, P., Harman, M., Binkley, D., Tonella, P., The species per path approach to search-based test data generation (2006) ISSTA '06, pp. 13-24; Memon, A.M., Automatically repairing event sequencebased GUI test suites for regression testing (2008) ACM Trans. on Softw. Eng. and Method; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of The 10th Working Conference on Reverse Engineering, , November; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng, 31 (10), pp. 884-896; Miller, W., Spooner, D.L., Automatic generation of floating-point test data (1976) IEEE Trans. Software Eng, 2 (3), pp. 223-226; Pacheco, C., Lahiri, S.K., Ernst, M.D., Ball, T., Feedbackdirected random test generation (2007) ICSE '07, pp. 396-405. , May 23-25; Rountev, A., Kagan, S., Gibas, M., Evaluating the imprecision of static analysis (2004) Workshop on Program analysis for software tools and eng, pp. 14-16; Xie, T., Notkin, D., Tool-assisted unit-test generation and selection based on operational abstractions (2006) Autom. Softw. Eng, 13 (3), pp. 345-371; X. Yuan and A. M. Memon. Using GUI run-time state as feedback to generate test cases. In ICSE '07, pages 396-405. May 23-25, 2007","Yuan, X.; Department of Computer Science, , College Park, MD 20742, United States; email: xyuan@cs.umd.edu",,"EPSRC;Gerrard Consulting;LDRA",,"Testing: Academic and Industrial Conference Practice and Research Techniques, TAIC PART 2008","29 August 2008 through 31 August 2008","Windsor",74687,,9780769533834,,,"English","Proc. - Test.: Acad. Ind. Conf. Pract. Res. Tech., TAIC PART",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-57649187334
"Thornton M., Edwards S.H., Tan R.P., Pérez-Quiñones M.","36973073700;7401520439;24823307500;57084427900;","Supporting student-written tests of GUI programs",2008,"SIGCSE'08 - Proceedings of the 39th ACM Technical Symposium on Computer Science Education",,,,"537","541",,22,"10.1145/1352135.1352316","https://www.scopus.com/inward/record.uri?eid=2-s2.0-57349155450&doi=10.1145%2f1352135.1352316&partnerID=40&md5=4c9b45ac9232afc381ec10ab0b730be7","Dept. of Computer Science, Virginia Tech., 660 McBryde Hall, Mail Stop 0106, Blacksburg, VA 24061, United States","Thornton, M., Dept. of Computer Science, Virginia Tech., 660 McBryde Hall, Mail Stop 0106, Blacksburg, VA 24061, United States; Edwards, S.H., Dept. of Computer Science, Virginia Tech., 660 McBryde Hall, Mail Stop 0106, Blacksburg, VA 24061, United States; Tan, R.P., Dept. of Computer Science, Virginia Tech., 660 McBryde Hall, Mail Stop 0106, Blacksburg, VA 24061, United States; Pérez-Quiñones, M., Dept. of Computer Science, Virginia Tech., 660 McBryde Hall, Mail Stop 0106, Blacksburg, VA 24061, United States","Tools like JUnit and its relatives are making software testing reachable even for introductory students. At the same time, however, many introductory computer sciences courses use graphical interfaces as an ""attention grabber"" for students and as a metaphor for teaching object-oriented programming. Unfortunately, developing software tests for programs that have significant graphical user interfaces is beyond the abilities of typical students (and, for that matter, many educators). This paper describes a framework for combining readily available tools to create an infrastructure for writing tests for Java programs that have graphical user interfaces. These tests are level-appropriate for introductory students and fit in with current approaches in computer science education that incorporate testing in programming assignments. An analysis of data collected during actual student use of the framework in a CS1 course is presented. Copyright 2008 ACM.","Automated grading; Junit; Objectdraw; Test-driven development; Test-first coding; Unit testing; Web-CAT","Automated grading; Junit; Objectdraw; Unit testing; Web-CAT; Computer science; Computer software; Computer software selection and evaluation; Computer systems; Computer testing; Computers; Education computing; Graphical user interfaces; Interfaces (computer); Java programming language; Object oriented programming; Programming theory; Software testing; Students; Surface chemistry; Testing; Unmanned aerial vehicles (UAV); User interfaces; Teaching",,,,,,,,"Vegso, J., Interest in CS as a major drops among incoming freshmen (2005) Computing Research News, 17 (3); Edwards, S.H., Improving student performance by evaluating how well students test their own programs (2003) J. Educational Resources in Computing, 3 (3), pp. 1-24; JUnit Website, , http://www.junit.org/index.htm, Available from; Wick, M., Stevenson, D., Wagner, P., Using testing and JUnit across the curriculum (2005) Proc. 36th SIGCSE Tech. Symp. Computer Science Education, , ACM; Allowatt, A., Edwards, S.H., IDE support for test-driven development and automated grading in both Java and C++ Proc. 2005 OOPSLA Workshop on Eclipse Tech. Exchange, pp. 100-104. , ACM Press, New York, NY, pp; Bruce, K., Danyluk, A., Murtagh, T., A library to support a graphics-based object-first approach to CS1 (2001) 32nd SIGCSE Tech. Symp. Computer Science Education, , ACM; Bruce, K., Danyluk, A., Murtagh, T., (2005) Java: An Eventful Approach, , Prentice-Hall: Upper Saddle River, NJ; Goldwasser, M.H., A gimmick to integrate software testing throughout the curriculum (2002) Proc. 33rd SIGCSE Tech. Symp. Computer Science Education, , ACM; Jones, C.G., Test-driven development goes to school (2004) J. Computing in Small Colleges, 20 (1), pp. 220-231; Jones, E.L., Software testing in computer science curriculum-A holistic approach (2000) Proc. Autralasian Computing Education Conf, , ACM Press; Edwards, S.H., Rethinking computer science Education from a test-first perspective (2003) Addendum to 2003 Proc. Conf. Object-Oriented Programming, Systems, Languages, and Applications, , ACM; Abbot Java GUI Test Framework Home Page, , http://abbot.sourceforge.net, Available from; Dutta, S. Abbot-A friendly JUnit extension for GUI testing. Java Developer Journal. April 2003, p. 8-12; BlueJ-The Interactive Java Environment. Available from: http://www.bluej.org/","Thornton, M.; Dept. of Computer Science, Mail Stop 0106, Blacksburg, VA 24061, United States; email: thorntom@cs.vt.edu",,"ACM SIGCSE",,"39th ACM Technical Symposium on Computer Science Education, SIGCSE 2008","12 March 2008 through 15 March 2008","Portland, OR",74451,,9781595937995,,,"English","SIGCSE - Proc. ACM Tech. Symp. Comput. Sci. Educ.",Conference Paper,"Final","",Scopus,2-s2.0-57349155450
"Hackner D.R., Memon A.M.","25825061800;35599876500;","Test case generator for guitar",2008,"Proceedings - International Conference on Software Engineering",,,,"959","960",,34,"10.1145/1370175.1370207","https://www.scopus.com/inward/record.uri?eid=2-s2.0-57349199300&doi=10.1145%2f1370175.1370207&partnerID=40&md5=e08964003be5beef5123802335680551","Department of Computer Science University of Maryland, College Park, MD 20742, United States","Hackner, D.R., Department of Computer Science University of Maryland, College Park, MD 20742, United States; Memon, A.M., Department of Computer Science University of Maryland, College Park, MD 20742, United States","As GUIs become more popular, the need for GUI testing tools becomes greater. Many current GUI test generation techniques require proprietary tools and can be hard to use to their fullest potential. This paper outlines a new test case generation strategy, which enables testers to automatically produce cases in a widely used format. We hope that this strategy will encourage more complete GUI testing.","Reliability and Verification","GUI testing; Reliability and Verification; Test case generators; Test generations; Test-case generations; Test case generation; Software engineering; Graphical user interfaces",,,,,,,,"http://www.cs.umd.edu/~atif/GUITARWeb; Memon, A.M., An event-flow model of GUI-based applications for testing: Research Articles (2007) Softw. Test. Verif. Reliab, , http://dx.doi.org/10.1002/stvr.vl7:3, 17, 3 Sep., 137-157. DOI; Memon, A. M., Pollack, M. E., and Soffa, M. L. 1999. Using a goal-driven approach to generate test cases for GUIs. In Proceedings of the 21st international Conference on Software Engineering (Los Angeles, California, United States, May 16 - 22, 1999). International Conference on Software Engineering. IEEE Computer Society Press, Los Alamitos, CA, 257-266; Memon, A., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, , November 13-17, WCRE. IEEE Computer Society, Washington, DC, 260; Memon, Proceedings of the 10th Working Conference on Reverse Engineering, p. 2; Memon, ; http://www.cs.umd.edu/~atif/GUITARWeb/guitar-process-test-case-generation.htm","Hackner, D. R.; Department of Computer Science University of Maryland, College Park, MD 20742, United States; email: dhackner@umd.edu",,"ACM SIGSOFT;IEEE CSE",,"30th International Conference on Software Engineering 2008, ICSE'08","10 May 2008 through 18 May 2008","Leipzig",74416,02705257,9781605580791,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-57349199300
"Ganov S.R., Killmar C., Khurshid S., Perry D.E.","24478598800;36701745900;56231912700;7202212797;","Test generation for graphical user interfaces based on symbolic execution",2008,"Proceedings - International Conference on Software Engineering",,,,"33","40",,20,"10.1145/1370042.1370050","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960599509&doi=10.1145%2f1370042.1370050&partnerID=40&md5=40aecf5108443eb7c0e50224e9486495","University of Texas at Austin, Laboratory of Experimental Software Engineering, Austin, TX 78712, United States; iTKO Inc., Dallas, TX 75234, United States; University of Texas at Austin, Software Testing and Verification Group, Austin, TX 78712, United States","Ganov, S.R., University of Texas at Austin, Laboratory of Experimental Software Engineering, Austin, TX 78712, United States; Killmar, C., iTKO Inc., Dallas, TX 75234, United States; Khurshid, S., University of Texas at Austin, Software Testing and Verification Group, Austin, TX 78712, United States; Perry, D.E., University of Texas at Austin, Laboratory of Experimental Software Engineering, Austin, TX 78712, United States","While Graphical User Interfaces (GUIs) have become ubiquitous, testing them remains largely ad-hoc. Since the state of a GUI is defined by a sequence of events on the GUI's widgets, a test input for a GUI is such an event sequence. Due to the combinatorial nature of the sequences, testing a GUI thoroughly is problematic and time-consuming. Moreover, the wide range of possible values for certain GUI widgets, such as a textbox, compounds the problem. This paper presents a novel test generation approach based on symbolic execution to obtain data inputs and enumerate event sequences that are likely to maximize code coverage of a GUI application. Key contributions are introducing the technique of symbolic execution in GUI testing (addressing a common weakness of traditional GUI testing frameworks) and performing symbolic execution over strings (in addition to primitives). Doing so minimizes the number of event sequences that form the resulting test suite. To determine feasibility of path conditions that arise in symbolic execution, we implement a solver for constraints over strings (in addition to primitives). We evaluate our test generation approach. Copyright 2008 ACM.","GUI testing; symbolic execution; test input generation","Code coverage; Data input; Event sequence; GUI applications; GUI testing; Path condition; Sequence of events; Symbolic execution; Test generations; Test inputs; Software engineering; Software testing; Testing; Graphical user interfaces",,,,,,,,"Møller, A., Brics Automaton Library, , http://www.brics.dk/automaton; http://asm.objectweb.org/, Retrieved on November 1, 2007 from ASM; http://choco-solver.net/index.php?title=Main_Page, Retrieved on January 25, 2008 from ASM; Christensen, A.S., Møller, A., Schwartzbach, M.I., Precise Analysis of String Expressions (2003) SAS 2003, pp. 1-18; King, J., Symbolic execution and program testing (1976) Communications of the ACM, 19 (7), pp. 385-394; Lori, C., A system to generate test data and symbolically execute programs (1976) IEEE Transactions on Software Engineering, 2 (3), pp. 215-222. , September; Memon, A., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. Thesis, University of Pittsburgh, Pittsburgh; Memon, A., Using Tasks to Automate Regression Testing of GUIs International Conference on Artificial Intelligence and Applications (AIA 2004), Innsbruck, Austria, Feb. 16-18, 2004, , BibTeX; Memon, A., Banarjee, I., Nagarajan, A., GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing Reverse Engineering, 2003, WRCE 2003. Proceedings. 10th Working Conference On, November 13-16, 2003, pp. 260-269; Memon, A., Banarjee, I., Nagarajan, A., DART: A Framework for Regression Testing Nightly/Daily Builds of GUI Applications International Conference on Software Maintenance 2003 (ICSM'03), Amsterdam, the Netherlands, Sep. 22-26, 2003, pp. 410-419. , BibTeX; Memon, A., Banarjee, I., Nagarajan, A., What Test Oracle Should I use for Effective GUI Testing? IEEE International Conference on Automated Software Engineering (ASE'03), Montreal, Quebec, Canada, Oct. 6-10 2003, pp. 164-173. , BibTeX; Memon, A., McMaster, S., Call Stack Coverage for GUI Test-Suite Reduction Proceedings of the 17th IEEE International Symposium on Software Reliability Engineering (ISSRE 2006), Raleigh, NC, USA, Nov. 6-10 2006; Ramamoorthy, V., Siu-Bun, H., Chen, W., On the automated generation of program test data (1976) IEEE Transactions TSE, 2 (4), pp. 293-300; Shannon, D., Hajra, S., Lee, A., Zhan, D., Khurshid, S., Abstracting Symbolic Execution with String Analysis Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION, 2007. TAICPART-MUTATION 2007; Shehady, R.K., Siewiorek, D.P., A Method to Automate User Interface Testing Using Variable Finite State Machines (1997) 27th International Symposium on Fault-Tolerant Computing (FTCS '97), p. 80; Squish, , http://www.froglogic.com/pg?id=Products&category=squish&sub= overview&subsub=overview, Retrieved on January 25, 2008 from FrogLogic; White, L., Almezen, H., Generating Test Cases for GUI Responsibilities Using Complete Interaction Sequences (2000) 11th International Symposium on Software Reliability Engineering (ISSRE'00), p. 110; Xie, Q., Atif, M., Memon, Using a Pilot Study to Derive a GUI Model for Automated Testing (2008) ACM Trans. on Softw. Eng. and Method.; Zhang, J., Xu, C., Wang, X., Path-Oriented Test Data Generation Using Symbolic Execution and Constraint Solving Techniques (2004) Software Engineering and Formal Methods (SEFM 2004), pp. 242-250; White, L., Almezen, H., Generating Test Cases for GUI Responsibilities Using Complete Interaction Sequences (2000) 11th International Symposium on Software Reliability Engineering (ISSRE'00), p. 110; Xie, Q., Atif, M., Memon, Using a Pilot Study to Derive a GUI Model for Automated Testing (2008) ACM Trans. on Softw. Eng. and Method; Zhang, J., Xu, C., Wang, X., Path-Oriented Test Data Generation Using Symbolic Execution and Constraint Solving Techniques (2004) Software Engineering and Formal Methods (SEFM 2004), pp. 242-250","Ganov, S.R.; University of Texas at Austin, , Austin, TX 78712, United States; email: svetoslavganov@mail.utexas.edu",,"Assoc. Comput. Mach., Spec. Interest;Group Softw. Eng. (ACM SIGSOFT)",,"3rd International Workshop on Automation of Software Test, AST 2008, held in Conjunction with the 30th International Conference on Software Engineering, ICSE 2008","11 May 2008 through 11 May 2008","Leipzig",85665,02705257,9781605580302,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-79960599509
"Yongzhong L., Danping Y., Songlin N., Chun W.","36968415600;36997808300;36998102000;56253634900;","Development of an improved GUI automation test system based on Event-flow graph",2008,"Proceedings - International Conference on Computer Science and Software Engineering, CSSE 2008","2",, 4722150,"712","715",,14,"10.1109/CSSE.2008.1336","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79551630238&doi=10.1109%2fCSSE.2008.1336&partnerID=40&md5=e5cefc5ffdd5c1c89a685982e776a1b9","School of Software Engineering, Huazhong University of Science and Technology, Wuhan 430074, China; School of Public Administration, Huazhong University of Science and Technology, Wuhan 430074, China; School of Mechanical Science and Engineering, Huazhong University of Science and Technology, Wuhan 430074, China","Yongzhong, L., School of Software Engineering, Huazhong University of Science and Technology, Wuhan 430074, China; Danping, Y., School of Public Administration, Huazhong University of Science and Technology, Wuhan 430074, China; Songlin, N., School of Mechanical Science and Engineering, Huazhong University of Science and Technology, Wuhan 430074, China; Chun, W., School of Software Engineering, Huazhong University of Science and Technology, Wuhan 430074, China","A more highly automated graphic user interface (GUI) test model, which is based on the event-flow graph, is proposed. In the model, an automation tool is first used to carry out reverse engineering for a GUI test sample so as to obtain the event-flow graph. Then an improved ant colony optimization algorithm and a goal-directed searching approach are adopted to create GUI test sample cases. Moreover, a corresponding prototype system based on Microsoft UI automation framework is developed. © 2008 IEEE.",,"Automation tools; Event-flow graph; Graphic user interface; Improved ant colony optimization; MicroSoft; Prototype system; Test models; Test samples; Test systems; Automation; Graphic methods; Reverse engineering; Software engineering; Graphical user interfaces",,,,,,,,"","Yongzhong, L.; School of Software Engineering, , Wuhan 430074, China; email: hotmailuser@163.com",,,,"International Conference on Computer Science and Software Engineering, CSSE 2008","12 December 2008 through 14 December 2008","Wuhan, Hubei",75355,,9780769533360,,,"English","Proc. - Int. Conf. Comput. Sci. Softw. Eng., CSSE",Conference Paper,"Final","",Scopus,2-s2.0-79551630238
"Sztipanovits M., Qian K., Fu X.","35114137600;7102668427;36809595300;","The automated web application testing (AWAT) system",2008,"Proceedings of the 46th Annual Southeast Regional Conference on XX, ACM-SE 46",,, 1593128,"88","93",,11,"10.1145/1593105.1593128","https://www.scopus.com/inward/record.uri?eid=2-s2.0-70449912544&doi=10.1145%2f1593105.1593128&partnerID=40&md5=1627727ad3d84c9daec79df6a381ec67","SPSU, Department of Software Engineering, 1100 South Marietta, GA, 30060-2896, United States; SPSU, Department of Computer Science, 1100 Southern Marietta, GA, 30060-2896, United States; Georgia SouthWestern State University, Department of Computer Science, Crawford Wheatley Hall, United States","Sztipanovits, M., SPSU, Department of Software Engineering, 1100 South Marietta, GA, 30060-2896, United States; Qian, K., SPSU, Department of Computer Science, 1100 Southern Marietta, GA, 30060-2896, United States; Fu, X., Georgia SouthWestern State University, Department of Computer Science, Crawford Wheatley Hall, United States","In this paper we propose an Automated Web application Testing (AWAT) system which can be used by instructors to effectively evaluate student web programming projects automatically based on the test cases specified on Excel. The AWAT is driven by WATIR and simulates the actions of human testers to extract information from Web pages, and verify expected outcome based on the test case specification. The system is unique in its ability to interact with web GUI and its portability to work with any client side or server side web application on any platforms. The preliminary experiments have been conducted and We found that the system can provide fairness to the grading of large scaled student projects and can greatly help elevate faculty productivity. Copyright 2008 ACM.","Automated testing; Test cases; Web applications","Automated testing; Student project; Test case; WEB application; Web application testing; Web page; Web programming; Automation; Spontaneous emission; Spreadsheets; World Wide Web",,,,,,,,"Reek, K.A., The TRY system - or - how to avoid testing student programs (1989) ACM SIGCSE Bulletin, 21 (1), pp. 112-116; Reek, K.A., A software infrastructure to support introductory computer science courses (1996) Proceedings 27 th SIGCSE Technical Symposium on Computer Science Education, pp. 125-129. , Philadelphia, USA, February 15-17; Jackson, D., Usher, M., Grading student programs using ASSYST (1997) Proceedings 28 th SIGCSE Technical Symposium on Computer Science Education, pp. 335-339. , San Jose, California, USA, February 27-March 1; Jones, E.L., Grading student programs - a software testing approach (2001) Journal of Computing in Small Colleges, 16 (2), pp. 185-192. , January; Morris, D.S., Automatic grading of student's programming assignments: An interactive process and suite of programs (2003) Proceedings 33 rd ASEE/IEEE Frontiers in Education Conference, pp. 112-116. , Boulder, CO, USA, November 5-8; Cheang, B., Kurnia, A., Lim, A., Oon, W.-C., On automated grading of programming assignments in an academic institution (2003) Computers & Education, 41, pp. 121-131; Sun, H., Jones, E.L., Specification-driven automated testing of GUI-based Java programs (2004) Proceedings 42 nd ACM Southeastern Regional Conference, pp. 140-145. , Huntsville, Alabama, USA, April 2-3; Feng, M.Y., McAllister, A., A Tool for Automated GUI Program Grading (2006) 36 th ASEE/IEEE Frontiers in Education Conference, , October 28-31, Session S1F; WATIR library User, , http://wtr.rubyforge.org/watir-user-guide.html, Guide; http://www.ruby-doc. org/stdlib/libdoc/win32ole/rdoc/index.html, WIN32OLE library Documentation; Excel Test Data Format, Sheet Format, from the internet site, , http://www.ddsteps.org/display/doc/Excel+Test+Data+Format","Sztipanovits, M.; SPSU, 1100 South Marietta, GA, 30060-2896, United States; email: sztipam@gmail.com",,,,"46th Annual Southeast Regional Conference on XX, ACM-SE 46","28 March 2009 through 29 March 2009","Auburn, AL",77926,,9781605581057,,,"English","Proc. Annu. Southeast Reg. Conf. XX, ACM-SE",Conference Paper,"Final","",Scopus,2-s2.0-70449912544
"Udgata S.K., Vanam S., Madhav M.N.V.","6505814190;36710898600;26423153600;","Regression based automated test tool for web portals",2008,"IEEE Region 10 Annual International Conference, Proceedings/TENCON",,, 4766818,"","",,3,"10.1109/TENCON.2008.4766818","https://www.scopus.com/inward/record.uri?eid=2-s2.0-63049117602&doi=10.1109%2fTENCON.2008.4766818&partnerID=40&md5=2be0c8879f653a56c7dcfb34d04e7944","Department of Computer and Information Sciences, University of Hyderabad, India","Udgata, S.K., Department of Computer and Information Sciences, University of Hyderabad, India; Vanam, S., Department of Computer and Information Sciences, University of Hyderabad, India; Madhav, M.N.V., Department of Computer and Information Sciences, University of Hyderabad, India","As more and more services and information are made available over the Internet and Intranet, web portals are gaining in popularity and have become extraordinarily complex to test for their functionality. These web portals usually have thousands of hyper links, images, multimedia files, data files, audio files among many others. Web pages are modified frequently viz. adding links, making user specific customizations, adding new features and many other functionalities. Many a times these consist of hundreds of files of different types to be navigated by the users. Due to this, conventional software testing methods and tools are not adequate for these Web portals. In this paper, we propose an automated test tool which will test such a web portal for all the missing links, file type mismatches, unreachable files etc. It also reports errors in Java Script and PHP modules embedded in the HTML documents. The tool will have a dry run to identify all these features and will generate a complete report regarding the web portal for the ease of maintenance. This tool is supposed to work on both static and dynamic web pages. Dynamic content include filling up the forms, entering login information etc. This tool generates test cases for running over the web portal which uses regression testing techniques. It also provides GUI for easy interaction with the portal. The methodology used includes the Global Data Flow Analysis, use-definition chains, construction of Control Flow Graph and Regression Testing.",,"Audio files; Automated test tools; Control flow graphs; Data files; Dynamic contents; File types; Global datum; Html documents; Hyper links; Multimedia files; Regression testing; Regression testing techniques; Static and dynamics; Test case; Web pages; Web-portals; Computer software selection and evaluation; Data flow analysis; Markup languages; Portals; Regression analysis; Software testing; Testing; World Wide Web",,,,,,,,"Xu, L., Xu, B., Jiang, J., Testing web applications focusing on their specialties (2005) ACM SIGSOFT Software Engineering, 30 (1). , January; Gao, J., Chen, C., Toyoshima, Y., Leung, D., Engineering on the internet for global software production (1999) IEEE Computer, 32 (5), pp. 32-47. , May; Hao, J., Mendes, E., Usage-based statistical testing of web applications (2006) Proceedings of the ICWE'06, July; Ricca, F., Tonellao, P., Detecting anomaly and failure in web applications (2006) IEEE Multimedia, 13 (2), pp. 44-51; Tzay yang, J., Long Huang, J., Jian Wang, F., A tool set to support web application testing (1998) International Computer Symposium(ICS), , October; Benedikt, M., Freire, J., Godefroid, P., Veriweb: Automatically testing dynamic web sites (2002) Proceedings of the 11th international world wide web conference (WWW2002); Ricca, F., Tonellao, P., Understanding and restructuring web sites with reweb (2001) IEEE Multimedia, 8 (2), pp. 40-51; Silverstein, M., (2003) Logical capture/replay tool; Baowen Xu Lei Xu, Zhenqiang Chen, Jixiang Jiang, and Huowang Chen. Regression testing for web applications based on slicing. In In Proceedings of the 27th Annual International Conference on Computer Software and Applications (COMPSAC), page 652, 2003. [10] Yih-Farn Chen, David S.Rosenblum, and Kiem phong Vo. A system for selective regression testing. In Proceedings of the 16th International Conference on Software Engineering, pages 211-222, 1994. [11] Gregg Rothermel and Mary Jean Harrold. A system for selective regression testing. ACM Transaction on Software Engineering and Methodology, 1997","Udgata, S. K.; Department of Computer and Information Sciences, India; email: udgatacs@uohyd.ernet.in",,,,"2008 IEEE Region 10 Conference, TENCON 2008","19 November 2008 through 21 November 2008","Hyderabad",75688,,1424424089; 9781424424085,85QXA,,"English","IEEE Reg 10 Annu Int Conf Proc TENCON",Conference Paper,"Final","",Scopus,2-s2.0-63049117602
"Hwang S.-M., Chae H.-C.","14015774400;25640731500;","Design and implementation of mobile GUI testing tool",2008,"Proceedings - 2008 International Conference on Convergence and Hybrid Information Technology, ICHIT 2008",,, 4622910,"704","707",,8,"10.1109/ICHIT.2008.230","https://www.scopus.com/inward/record.uri?eid=2-s2.0-55849101674&doi=10.1109%2fICHIT.2008.230&partnerID=40&md5=c6f3bbe1c7b9a006cbf6ce9c6bc6e02d","Dept. Computer Engineering, Daejeon University, South Korea","Hwang, S.-M., Dept. Computer Engineering, Daejeon University, South Korea; Chae, H.-C., Dept. Computer Engineering, Daejeon University, South Korea","GUI of mobile application software has been used as important elements that users easely operate the software functions. Since it becomes established as an important factor of software success, GUI test is required for the software success. But its test takes much efforts and time. Therefore, we propose a method and automatic tool for mobile GUI test. © 2008 IEEE.",,"Information technology; Automatic tools; GUI testing; GUI tests; Mobile application softwares; Software functions; Graphical user interfaces",,,,,,,,"Myers, G., Sandler, C., Badgett, T., Thomas, T., (2004) The Art of software Testing, , Second Edition, John Wiley & sons; IEEE Standard Glossary of Software Engineering Terminology, IEEE std 610.12-1990, The Institute of Electrical and Electronics Engineers, 1990; Pressman, R., (2003) A Practitioner's Approach, , Software Engineering:, McGraw-Hill; BREW White Paper, BREW and J2ME-A Complete Wireless Solution for Operators Committed to Java, QUALCOMM; Fewster, M., Graham, D., (1999) Software Test automation, , Addision-Wesley; McGregor, J.D., Korson, T.D., Integrated Object-Oriented Testing and Development Process (1994) CACM, 37 (9). , September; Patton, R., (2000) Software Testing, , Sams; http://java.sun.com/j2me/docs/index.html, J2ME Documentation, Available at URL; Fewster, M., Graham, D., (1999) Software Test automation, , Addision-Wesley; XCE Developer Site API Document, , http://www.developerzone.co.kr/release/release_api.asp, URL; QtUnit(Software development testing framework) Introduction Manual","Hwang, S.-M.; Dept. Computer Engineering, South Korea; email: sunhwang@dju.ac.kr",,,,"2008 International Conference on Convergence and Hybrid Information Technology, ICHIT 2008","28 August 2008 through 29 August 2008","Daejeon",73976,,9780769533285,,,"English","Proc. - Int. Conf. Convergence Hybrid Inf. Technol., ICHIT",Conference Paper,"Final","",Scopus,2-s2.0-55849101674
"Xie Q., Memon A.M.","35761589700;35599876500;","Using a pilot study to derive a GUI model for automated testing",2008,"ACM Transactions on Software Engineering and Methodology","18","2", 7,"","",,75,"10.1145/1416563.1416567","https://www.scopus.com/inward/record.uri?eid=2-s2.0-56149124049&doi=10.1145%2f1416563.1416567&partnerID=40&md5=576303e3a35735866c366a8fdfd233ce","Accenture Technology Labs., Chicago, United States; University of Maryland, College Park, United States; Accenture Technology Labs., 161 North Clark Street, Chicago, IL 60601, United States; 4115 A. V.Williams Building, Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Xie, Q., Accenture Technology Labs., Chicago, United States, Accenture Technology Labs., 161 North Clark Street, Chicago, IL 60601, United States; Memon, A.M., University of Maryland, College Park, United States, 4115 A. V.Williams Building, Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Graphical user interfaces (GUIs) are one of the most commonly used parts of today's software. Despite their ubiquity, testing GUIs for functional correctness remains an understudied area. A typical GUI gives many degrees of freedom to an end-user, leading to an enormous input event interaction space that needs to be tested. GUI test designers generate and execute test cases (modeled as sequences of user events) to traverse its parts; targeting a subspace in order to maximize fault detection is a nontrivial task. In this vein, in previous work, we used informal GUI code examination and personal intuition to develop an event-interaction graph (EIG). In this article we empirically derive the EIG model via a pilot study, and the resulting EIG validates our intuition used in previous work; the empirical derivation process also allows for model evolution as our understanding of GUI faults improves. Results of the pilot study show that events interact in complex ways; a GUI's response to an event may vary depending on the context established by preceding events and their execution order. The EIG model helps testers to understand the nature of interactions between GUI events when executed in test cases and why certain events detect faults, so that they can better traverse the event space. New test adequacy criteria are defined for the EIG; new algorithms use these criteria and EIG to systematically generate test cases that are shown to be effective on four fielded open-source applications. © 2008 ACM.","Graphical user interfaces; Model-based testing; Test minimization; Test suite management","Applications.; Degrees of freedoms; Event spaces; Functional correctnesses; GUI tests; Input events; Interaction graphs; Interaction spaces; Model evolutions; Model-based testing; New algorithms; Nontrivial tasks; Pilot studies; Sub spaces; Test adequacy criterions; TEst cases; Test minimization; Test suite management; Computer systems; Fault detection; Flow interactions; Testing; User interfaces; Graphical user interfaces",,,,,,,,"ANDREWS, J.H., BRIAND, L.C., LABICHE, Y., Is mutation an appropriate tool for testing experiments? (2005) ICSE '05: Proceedings of the 27th International, Conference on Software Engineering, pp. 402-411. , ACM Press, New York, NY; AUGUSTON, M., MICHAEL, J.B., SHING, M.-T., Environment behavior models for scenario genera tion and testing automation (2005) A-MOST '05: Proceedings of the 1st International Workshop on Advances in Model-Based Testing, pp. 1-6. , ACM Press, New York, NY; BERNHARD, P.J., A reduced test suite for protocol conformance testing (1994) ACM Trans. Softw. Eng. Methodol, 3 (3), pp. 201-220. , July; CHOW, T.S., Testing software design modeled by finite-state machines (1978) IEEE Trans. Softw. Eng, SE-4 (3), pp. 178-187; CLARKE, J.M., Automated test generation from a behavioral model (1998) Proceedings of the Pacific Northwest Software Quality Conference, , PNSQC/Pacific Agenda, Portland, OR; ESMELIOGLU, S., APFELBAUM, L., Automated test generation, execution, and reporting (1997) Proceedings of the Pacific Northwest Software Quality Conference, pp. 127-142. , PNSQC/Pacific Agenda, Portland, OR; HARROLD, M. J., OFFUT, A. J., AND TEWARY, K. 1997. An approach to fault modelling and fault seeding using the program dependence graph. J. Syst. Softw. 36, 3 (Mar.), 273-296; HICINBOTHOM, J. H. AND ZACHARY, W. W. 1993. A tool for automatically generating transcripts of human-computer interaction. In Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting. Special Sessions: Demonstrations, 2. Human Factors and Ergonomics Society, Santa Monica, CA, 1042; HOWE, A., VON MAYRHAUSER, A., MRAZ, R.T., Test case generation as an AI planning problem (1997) Automat. Softw. Eng, 4, pp. 77-106; IMANIAN, J.A., (2005) Automatic test case generation for reactive software systems based on environment models, , Ph.D. dissertation. Naval Postgraduate School, Monterey, CA; JORGENSEN, P.C., ERICKSON, C., Object-oriented integration testing (1994) Commun. ACM, 37 (9), pp. 30-38; KASIK, D.J., GEORGE, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , ACM Press, New York, NY; LEOW, W.K., KHOO, S.C., SUN, Y., Automated generation of test programs from closed specifications of classes and test cases (2004) ICSE '04: Proceedings of the 26th International Conference on Software Engineering, pp. 96-105. , IEEE Computer Society Press, Los Alamitos, CA; MAURER, P.M., Generating test data with enhanced context-free grammars (1990) IEEE Softw, 7 (4), pp. 50-55. , July; MEMON, A., BANERJEE, I., NAGARAJAN, A., GUI Ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE '03: Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269. , IEEE Computer Society Press, Los Alamitos, CA; MEMON, A.M., (2001) A comprehensive framework for testing graphical user interfaces, , Ph.D. dissertation. Department of Computer Science, University of Pittsburgh, Pittsburgh, PA; MEMON, A. M. 2002. GUI testing: Pitfalls and process. IEEE Comput. 35, 8 (Aug.), 90-91; MEMON, A.M., Advances in GUI testing (2003) Advances in Computers, 58, pp. 150-203. , M. V. Zelkowitz, Ed. Elsevier, Amsterdam, The Netherlands; MEMON, A.M., NAGARAJAN, A., XIE, Q., Automating regression testing for evolving GUI software (2005) J. Softw. Maint, 17 (1), pp. 27-64; MEMON, A.M., POLLACK, M.E., SOFFA, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) ICSE '99: Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , IEEE Computer Society Press, Los Alamitos, CA; MEMON, A.M., POLLACK, M.E., SOFFA, M.L., Automated test oracles for GUIs (2000) SIG-SOFT '00/FSE-8: Proceedings of the 8th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 30-39. , ACM Press, New York, NY; MEMON, A. M., POLLACK, M. E., AND SOFFA, M. L. 2001a. Hierarchical GUI test case generation using automated planning. IEEE Trans. Softw. Eng. 27, 2 (Feb.), 144-155; MEMON, A.M., SOFFA, M.L., Regression testing of GUIs (2003) ESEC/FSE-11: Proceedings of the 9th European Software Engineering Conference Held Jointly with the 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 118-127. , ACM Press, New York, NY; MEMON, A.M., SOFFA, M.L., POLLACK, M.E., Coverage criteria for GUI testing (2001) ESEC/FSE-9: Proceedings of the 8th European Software Engineering Conference Held Jointly with the 9th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 256-267. , ACM Press, New York, NY; MEMON, A. M. AND XIE, Q. 2005. Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software. IEEE Trans. Softw. Eng. 31, 10 (Oct.), 884-896; OFFUTT, A.J., HAYES, J.H., A semantic model of program faults (1996) InISSTA '96: Proceedings of the 1996 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 195-200. , ACM Press, New York, NY; RAPPS, S., WEYUKER, E.J., Data flow analysis techniques for test data selection (1982) ICSE '82: Proceedings of the 6th International Conference on Software Engineering, pp. 272-278. , IEEE Computer Society Press, Los Alamitos, CA; SCHEETZ, M., VON MAYRHAUSER, A., FRANCE, R., DAHLMAN, E., HOWE, A.E., Generating test cases from an OO model with an AI planning system (1999) Proceedings of the 10th International, Symposium on Software Reliability Engineering, pp. 250-259. , IEEE Computer Society Press, Los Alamitos, CA; SHEHADY, R.K., SIEWIOREK, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th Annual, International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , IEEE Computer Society Press, Los Alamitos, CA; SPACCO, J., HOVEMEYER, D., PUGH, W., Tracking defect warnings across versions (2006) MSR '06: Proceedings of the 2006 International Workshop on Mining Software Repositories, pp. 133-136. , ACM Press, New York, NY; VON MAYRHAUSER, A., CRAWFORD- HINES, S., Automated testing support for a robot tape library (1993) Proceedings of the 4th International Software Reliability Engineering Conference, pp. 6-14. , IEEE Computer Society Press, Los Alamitos, CA; VON MAYRHAUSER, A., MRAZ, R.T., WALLS, J., Domain based regression testing (1994) InProceedings of the International Conference on Software Maintenance, pp. 26-35. , IEEE Computer Society Press, Los Alamitos, CA; WHITE, L., ALMEZEN, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) ISSRE '00: Proceedings of the 11th International Symposium on Software Reliability Engineering, p. 110. , IEEE Computer Society Press, Los Alamitos, CA; WHITTAKER, J.A., (1992) Markov chain techniques for software testing and reliability analysis, , Ph.D. dissertation. University of Tennessee, Knoxville, TN; WHITTAKER, J.A., THOMASON, M.G., A Markov chain model for statistical software testing (1994) IEEE Trans. Softw. Eng, 20 (10), pp. 812-824; WOIT, D., Conditional-event usage testing (1998) CASCON '98: Proceedings of the 1998 Conference of the Centre for Advanced Studies on Collaborative Research, p. 23. , IBM Press, Indianapolis, IN; WOIT, D.M., Specifying operational profiles for modules (1993) ISSTA '93: Proceedings of the 1993 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 2-10. , ACM Press, New York, NY; XIE, Q., MEMON, A.M., Rapid ""crash testing"" for continuously evolving GUI-based software applications (2005) ICSM '05: Proceedings of the 21st IEEE International Conference on Soft ware Maintenance, pp. 473-482. , IEEE Computer Society Press, Los Alamitos, CA; XIE, Q., MEMON, A.M., Automated model-based testing of community-driven open source GUI applications (2006) ICSM '06: Proceedings of the 22nd IEEE International Conference on Software Maintenance, pp. 145-154. , IEEE Computer Society Press, Los Alamitos, CA; XIE, T., MARINOV, D., SCHULTE, W., NOTKIN, D., Symstra: A framework for generating object-oriented unit tests using symbolic execution (2005) Proceedings of the 11th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS 05), pp. 365-381. , Spinger, Berlin, Germany; ZELLER, A., Isolating cause-effect chains from computer programs (2002) ACM SIGSOFT Softw. Eng. Notes, 27 (6), pp. 1-10","Xie, Q.; Accenture Technology Labs., 161 North Clark Street, Chicago, IL 60601, United States",,,,,,,,1049331X,,ATSME,,"English","ACM Trans. Software Eng. Methodol.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-56149124049
"Memon A.M.","35599876500;","Automatically repairing event sequence-based GUI test suites for regression testing",2008,"ACM Transactions on Software Engineering and Methodology","18","2", 4,"","",,97,"10.1145/1416563.1416564","https://www.scopus.com/inward/record.uri?eid=2-s2.0-56149089811&doi=10.1145%2f1416563.1416564&partnerID=40&md5=59e41f84e99508ebae31de113f36bfc4","University of Maryland, College Park, United States; 4115 A. V. Williams Building, School of Computer Science, University of Maryland, College Park, MD 20742, United States","Memon, A.M., University of Maryland, College Park, United States, 4115 A. V. Williams Building, School of Computer Science, University of Maryland, College Park, MD 20742, United States","Although graphical user interfaces (GUIs) constitute a large part of the software being developed today and are typically created using rapid prototyping, there are no effective regression testing techniques for GUIs. The needs of GUI regression testing differ from those of traditional software. When the structure of a GUI is modified, test cases from the original GUI's suite are either reusable or unusable on the modified GUI. Because GUI test case generation is expensive, our goal is to make the unusable test cases usable, thereby helping to retain the suite's event coverage. The idea of reusing these unusable (obsolete) test cases has not been explored before. This article shows that a large number of test cases become unusable for GUIs. It presents a new GUI regression testing technique that first automatically determines the usable and unusable test cases from a test suite after a GUI modification, then determines the unusable test cases that can be repaired so that they can execute on the modified GUI, and finally uses repairing transformations to repair the test cases. This regression testing technique along with four repairing transformations has been implemented. An empirical study for four open-source applications demonstrates that (1) this approach is effective in that many of the test cases can be repaired, and is practical in terms of its time performance, (2) certain types of test cases are more prone to becoming unusable, and (3) certain types of ""dominator"" events, when modified, make a large number of test cases unusable. © 2008 ACM.","Graphical user interfaces; Regression testing; Repairing test cases; Test case management; Test maintenance","Empirical studies; Event sequences; GUI regression testing; GUI tests; Large parts; Regression testing; Regression testing techniques; Repairing test cases; Test case management; TEst cases; Test suites; Time performances; Traditional softwares; Computer software maintenance; Computer systems; Concurrent engineering; Job analysis; Maintenance; Rapid prototyping; Regression analysis; Repair; Software testing; Testing; User interfaces; Graphical user interfaces",,,,,,,,"Abbot Java (2003) GUI Test Framework, , http://abbot.sourceforge.net, Available online at; AGRAWAL, H., HORGAN, J.R., KRAUSER, E.W., LONDON, S.A., Incremental regression testing (1993) Proceedings of the Conference on Software Maintenance, pp. 348-357. , IEEE Computer Society Press, Los Alamitos, CA; AHO, A. V., SETHI, R., AND ULLMAN, J. D. 1986. Compilers Principles, Techniques, and Tools. Addison-Wesley, Reading, MA; BEIZER, B., (1990) Software Testing Techniques, , 2nd ed. Van Nostrand Reinhold, New York, NY; BENEDUSI, P., CIMITILE, A., DECARLINI, U., Post-maintenance testing based on path change analysis (1988) Proceedings of the IEEE Conference on Software Maintenance, pp. 352-368. , IEEE Computer Society Press, Los Alamitos, CA; BINKLEY, D. 1997. Semantics guided regression test cost reduction. IEEE Trans. Softw. Eng. 23, 8 (Aug.), 498-516; HAMMONTREE, M.L., HENDRICKSON, J.J., HENSLEY, B.W., Integrated data capture and analysis tools for research and testing an graphical user interfaces (1992) Proceedings of the Conference on Human Factors in Computing Systems, pp. 431-432. , ACM Press, New York, NY; HARROLD, M.J., GUPTA, R., SOFFA, M.L., A methodology for controlling the size of a test suite (1993) ACM Trans. Softw. Eng. Meth, 2 (3), pp. 270-285. , July; HARROLD, M.J., MCGREGOR, J.D., FITZPATRICK, K.J., Incremental testing of object-oriented class structures (1992) Proceedings of the 14th International Conference on Software Engineering, pp. 68-80. , ACM Press, New York, NY; HARROLD, M.J., SOFFA, M.L., Interprocedual data flow testing (1989) Proceedings of the ACM SIGSOFT '89 Third Symposium on Testing, Analysis, and Verification, pp. 158-167. , TAV3, ACM Press, New York, NY; HICINBOTHOM, J. H. AND ZACHARY, W. W. 1993. A tool for automatically generating transcripts of human-computer interaction. In Proceedings of the Human Factors and, Ergonomics Society 37th Annual Meeting. SPECIAL SESSIONS: Demonstrations, 2. ACM Press, New York, NY, 1042; (2005) JUnit, testing resources for extreme programming, , http://junit.org/nevs/extension/gui/index.htm, Available online at; KASIK, D.J., GEORGE, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems : Common Ground, pp. 244-251. , ACM Press, New York, NY; KEPPLE, L.R., A new paradigm for cross-platform automated GUI testing (1992) X Res, 3 (1), pp. 155-178. , June; KEPPLE, L.R., The black art of GUI testing (1994) Dr. Dobb's J. Softw. Tools, 19, p. 2. , Feb, 40; KUNG, D. C., GAO, J., HSIA, P., TOYOSHIMA, Y., AND CHEN, C. 1996. On regression testing of object-oriented programs. J. Syst. Softw. 32, 1 (Jan.), 21-31; LENGAUER, T., TARJAN, R.E., A fast algorithm for finding dominators in a flowgraph (1979) ACM Trans. Program. Lang. Syst, 1 (1), pp. 121-141; MARICK, B., Bypassing the GUI (2002) Softw. Test. Qual. Eng. Mag, 2, pp. 41-47; MEMON, A., BANERJEE, I., NAGARAJAN, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE '03: Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269. , IEEE Computer Society Press, Los Alamitos, CA; MEMON, A., NAGARAJAN, A., XIE, Q., Automating regression testing for evolving GUI software (2005) J. Softw. Maint. Evolut. Res. Pract, 17 (1), pp. 27-64; MEMON, A.M., (2001) A comprehensive framework for testing graphical user interfaces, , Ph.D. dissertation, Department of Computer Science, University of Pittsburgh, Pittsburgh, PA; MEMON, A. M. 2002. GUI testing: Pitfalls and process. IEEE Comput. 35, 8 (Aug.), 90-91; MEMON, A.M., POLLACK, M.E., SOFFA, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering, pp. 30-39. , FSE-8, ACM Press, New York, NY; MEMON, A. M., POLLACK, M. E., AND SOFFA, M. L. 2001a. Hierarchical GUI test case generation using automated planning. IEEE Trans. Softw. Eng. 27, 2 (Feb.), 144-155; MEMON, A.M., SOFFA, M.L., Regression testing of GUIs (2003) ESEC/FSE-11: Proceedings of the 9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 118-127. , ACM Press, New York, NY; MEMON, A. M., SOFFA, M. L., AND POLLACK, M. E. 2001b. Coverage criteria for GUI testing. In Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9). ACM Press, New York, NY, 256-267; MEMON, A. M. AND XIE, Q. 2005. Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software. IEEE Trans. Softw. Eng. 31, 10 (Oct.), 884-896; MYERS, B. A. 1995. User interface software tools. ACM Trans. Comput.-Hum. Interact. 2, 1, 64-103; ONOMA, A.K., TSAI, W.-T., POONAWALA, M., SUGANUMA, H., Regression testing in an industrial environment (1998) Commun. ACM, 41 (5), pp. 81-86; OSTRAND, T., ANODIDE, A., FOSTER, H., AND GORADIA, T. 1998. A visual test development environment for GUI systems. In Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA-98). ACM Press, New York, NY, 82-92; PACHECO, C., LAHIRI, S.K., ERNST, M.D., BALL, T., Feedback-directed random test generation (2007) ICSE'07, Proceedings of the 29th International Conference on Software Engineering, , ACM Press, New York, NY; POLLOCK, L. AND SOFFA, M. L. 1992. Incremental global reoptimization of programs. ACM Trans. Programm. Lang. Syst. 14, 2 (Apr.), 173-200; RATIONAL ROBOT. 2003. Rational Robot. Available online at http://www.rational.com.ar/tools/ robot.html; ROSENBERG, D. 1993. User interface prototyping paradigms in the 90's. In Proceedings of the ACM INTERCHI'93 Conference on Human Factors in Computing Systems-Adjunct Proceedings. Tutorials. ACM Press, New York, NY, 231; ROSENBLUM, D., ROTHERMEL, G., A comparative study of regression test selection techniques (1997) Proceedings of the IEEE Computer Society 2nd International Workshop on Empirical Studies of Software maintenance, pp. 89-94. , IEEE Computer Society Press, Los Alamitos, CA; ROSENBLUM, D.S., A practical approach to programming with assertions (1995) IEEE Trans. Softw. Eng, 21 (1), pp. 19-31; ROSENBLUM, D. S. AND WEYUKER, E. J. 1997. Using coverage information to predict the cost-effectiveness of regression testing strategies. IEEE Trans. Softw. Eng. 23, 3 (Mar.), 146-156; ROTHERMEL, G., HARROLD, M.J., A safe, efficient algorithm for regression test selection (1993) Proceedings of the Conference on Software Maintenance, pp. 358-369. , IEEE Computer Society Press, Los Alamitos, CA; ROTHERMEL, G. AND HARROLD, M. J. 1997. A safe, efficient regression test selection technique. ACM Trans. Softw. Eng. and Method. 6, 2 (Apr.), 173-210; ROTHERMEL, G., HARROLD, M.J., Empirical studies of a safe regression test selection technique (1998) IEEE Trans. Softw. Eng, 24 (6), pp. 401-419. , June; ROTHERMEL, G., HARROLD, M.J., OSTRIN, J., HONG, C., An empirical study of the effects of minimization on the fault detection capabilities of test suites (1998) Proceedings; International Conference on Software Maintenance, pp. 34-43. , IEEE Computer Society Press, Los Alamitos, CA; SHEHADY, R.K., SIEWIOREK, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , IEEE Press, Los Alamitos, CA; (2003) Capture-Replay Tool, , http://soft.com, Software Research, Inc, Capture-Replay Tool. Available online at; THATCHER, J., Screen reader/2-programmed access to the GUI (1994) ICCHP '94: Proceedings of the 4th International Conference on Computers for Handicapped Persons, pp. 76-88. , Springer-Verlag New York, NY; VOAS, J., How assertions can increase test effectiveness (1997), pp. 118-119. , 2, 122; WALWORTH, A., Java GUI testing (1997) Dr. Dobb's J. Softw. Tools, 22, p. 2. , Feb, 30, 32, 34; WHITE, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, pp. 350-358. , IEEE Computer Society Press, Los Alamitos, CA; WHITE, L., ALMEZEN, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121. , IEEE Computer Society Press, Los Alamitos, CA; WHITE, L., ALMEZEN, H., SASTRY, S., Firewall regression testing of gui sequences and their interactions (2003) ICSM '03: Proceedings of the International Conference on Software Maintenance, p. 398. , IEEE Computer Society Press, Los Alamitos, CA; WHITE, L., JABER, K., ROBINSON, B., Utilization of extended firewall for object-oriented regression testing (2005) ICSM '05: Proceedings of the 21st IEEE International Conference on Software Maintenance (ICSM'05), pp. 695-698. , IEEE Computer Society Press, Los Alamitos, CA; WINRUNNER, (2003) Mercury Interactive WinRunner, , http://www.mercuryinteractive.com/products/winrunner, Available online at; WITTEL JR., W.I., LEWIS, T.G., Integrating the MVC paradigm into an object-oriented framework to accelerate GUI application development (1991), Tech. rep. 91-60-06. Department of Computer Science, Oregon State University, Carvallis, OR; WOHLIN, C., RUNESON, P., HOST, M., OHLSSON, M.C., REGNELL, B., WESSLEN, A., (2000) Experimentation in software engineering: An introduction, , Kluwer Academic Publishers, Norwell, MA; XIE, Q., MEMON, A.M., Model-based testing of community-driven open-source GUI applications (2006) Proceedings of the 22nd IEEE International Conference on Software Maintenance, pp. 145-154. , IEEE Computer Society, Los Alamitos, CA; XIE, Q., MEMON, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Trans. Softw. Test. Method. 16, 1, p. 4; YUAN, X., MEMON, A.M., Using GUI run-time state as feedback to generate test cases (2007) ICSE'07, Proceedings of the 29th International Conference on Software Engineering, , ACM Press, New York, NY","Memon, A. M.; University of Maryland, College Park, United States; email: atif@cs.umd.edu",,,,,,,,1049331X,,ATSME,,"English","ACM Trans. Software Eng. Methodol.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-56149089811
"Zhu X., Zhou B., Li J., Gao Q.","55696718900;56663523300;57196167675;36915473900;","A test automation solution on gui functional test",2008,"IEEE International Conference on Industrial Informatics (INDIN)",,, 4618325,"1413","1418",,8,"10.1109/INDIN.2008.4618325","https://www.scopus.com/inward/record.uri?eid=2-s2.0-54849411456&doi=10.1109%2fINDIN.2008.4618325&partnerID=40&md5=ae2c342e1675ad45efb7c71fdc690407","College of Computer Science, Zhejiang University, Hangzhou, China; State Street Technology Zhejiang, Hangzhou, China","Zhu, X., College of Computer Science, Zhejiang University, Hangzhou, China; Zhou, B., College of Computer Science, Zhejiang University, Hangzhou, China; Li, J., College of Computer Science, Zhejiang University, Hangzhou, China; Gao, Q., State Street Technology Zhejiang, Hangzhou, China","Although it is widely believed that software quality will be improved by the use of automated testing, automation is still not well-off in industry today. There are quite a few issues of traditional software test automation mode, for example, high cost, knowledge barriers, and management troubles. In the paper, a test automation solution on GUI functional test is proposed. The solution integrates test case generation and selection, test case execution, and test reporting to facilitate testing. It introduces the concept of test driver which is designed to take over the communication between test cases and the execution engine. At last, some enhancements are proposed for future work.©2008 IEEE.",,"Automation; Computer software selection and evaluation; Graphical user interfaces; Software testing; Well testing; Execution engines; Functional tests; Future wrought; High costs; Knowledge barriers; Software qualities; Test automations; Test case generations; Test cases; Test drivers; Traditional softwares; Testing",,,,,,,,"Ng, S.P., Murnane, T., Reed, K., Grant, D., Chen"", T.Y., (2004) Software Engineering Conference, 2004. Proceedings, pp. 116-125. , A preliminary survey on software testing practices in Australia, Australian, Pages; Nagle, C.J., (2000) Test Automation Framework, , http://safsdev.sourceforge.net/FRAMESDataDrivenTestAutomationFrameworks.htm; Nai Yan Zhao, Mi Wan Shum, Technical Solution to Automate Smoke Test Using Rational Functional Tester and Virtualization Technology, Computer Software and Applications Conference, 2006. COMPSAC '06. 30th Annual International, 2, Sept. 2006 Page(s):367, 367; V. Santiago, A. S. Martins do Amaral, N. L. Vijaykumar, M. de Fatima Mattiello-Francisco, E. Martins, and O. C. Lopes, A Practical Approach for Automated Test Case Generation using Statecharts, Computer Software and Applications Conference, 2006. COMPSAC '06. 30th Annual International, 2, Sept. 2006 Page(s):183, 188; Schwitter, R., English as a formal specification language (2002) Proceedings of the 13th International Workshop on Database and Expert Systems Applications (DEXA02), pp. 228-232; Hendrick, S.D., et., al., Market Analysis: Worldwide Distributed Automated Software Quality Tools 2005-2009 Forecast and 2004 Vendor Shares, IDC (2005), July; Carroll, J., Five reasons for scenario-based design, Proc.of the IEEE Annual Hawaii International Conference on System Sciences (HICSS). Hawaii, USA, 1999; James L. Peterson, Petri Net Theory and the Modeling of System, Prentice Hall PTR, 1981; Bao-Lin Li, Zhi-Shu Li, Jing-Yu Zhang, and Ji-Rong Sun, An Automated Test Case Generation Approach by Genetic Simulated Annealing Algorithm, Natural Computation, 2007. ICNC 2007. 4, 24-27 Aug. 2007 Page(s): 106 - 111; Jun-Yi Li, Jia-Guang Sun, and Ying-Ping Lu, Automated Test Data Generation Based on Program Execution, Software Engineering Research, Management and Applications, 2006. 09-11 Aug. 2006 Page(s):229-236; Jun-Yi Li, Jia-Guang Sun, Automated Test Data Generation Algorithm Based on Reversed Binary Tree, Software Engineering, Artificial Intelligence, Networking, and Parallel/Distributed Computing, 2007. SNPD 2007. Eighth ACIS International Conference, 3, July 30 2007-Aug. 1 2007 Page(s): 1124- 1128; Huang, C.-H., Yan Chen, H., A Tool to Support Automated Testing for Web Application Scenario, Systems, Man and Cybernetics, 2006. ICSMC '06 (2006) IEEE International Conference, 3, pp. 2179-2184. , 8-11 Oct, Pages; Chappell, D., (2004) Enterprise Services Bus, , O'Reilly, June; Thomas Erl, Part I: SOA and Web Services Fundamentals, Service-Oriented Architecture: Concepts, Technology, and Design, Prentice Hall, 04 Aug, 2005","Zhu, X.; College of Computer Science, , Hangzhou, China; email: xzhu@zju.edu.cn",,,,"IEEE INDIN 2008: 6th IEEE International Conference on Industrial Informatics","13 July 2008 through 16 July 2008","Daejeon",73833,19354576,9781424421718,,,"English","IEEE Int. Conf. Ind. Informatics (INDIN)",Conference Paper,"Final","",Scopus,2-s2.0-54849411456
"Jääskeläinen A., Kervinen A., Katara M.","24923055000;6507407206;7801543558;","Creating a test model library for GUI testing of smartphone applications",2008,"Proceedings - International Conference on Quality Software",,, 4601555,"276","282",,11,"10.1109/QSIC.2008.26","https://www.scopus.com/inward/record.uri?eid=2-s2.0-52449107265&doi=10.1109%2fQSIC.2008.26&partnerID=40&md5=7098e784535f84a08bfbaefb7e89e9ff","Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland","Jääskeläinen, A., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Kervinen, A., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland; Katara, M., Tampere University of Technology, Department of Software Systems, P.O.Box 553, FI-33101 Tampere, Finland","Smartphones are becoming increasingly complex, and the interactions between the different applications make testing even more difficult given the time-to-market pressures and the limits of current test automation systems. Towards these ends, we have built an open source test model library for Symbian S60 GUI testing. This paper describes and analyzes our experiences in building the library. © 2008 IEEE.",,"Chlorine compounds; Graphical user interfaces; Current testing; GUI testing; International conferences; Open sources; Quality software; Smartphones; Symbian; Test modeling; Time-to-market; Testing",,,,,,,,"(2007) Python Programming Language, , http://python.org, home. Cited Jul; Buwalda, H., Action figures (2003) STQE Magazine, March/April 2003, pp. 42-47; Conformance test specification for SIP -part 3: Abstract test suite (TTCN-3 code), , http://portal.etsi.org/docbox/EC_Files/EC_Files/ts_10202703v030101p0.zip, ETSI, Available at, 2003; Fewster, M., Graham, D., (1999) Software Test Automation: Effective use of test execution tools, , Addison-Wesley; Jääskeläinen, A., (2008) A domain-specific tool for creation and management of test models, , Master's thesis, Tampere University of Technology, Jan; Jääskeläinen, A., Katara, M., Kervinen, A., Heiskanen, H., Maunumaa, M., Pääkkönen, T., Model-based testing service on the web (2008) LNCS, , Proc. TESTCOM/FATES 2008, Tokyo, Japan, June, Springer. To appear; Katara, M., Kervinen, A., Making model-based testing more agile: A use case driven approach (2007) LNCS, 4383, pp. 219-234. , Proc. Haifa Verification Conference 2006, number in, Springer; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Satama, M., Towards deploying model-based testing with a domain-specific modeling approach (2006) Proc. TAIC PART, pp. 81-89. , Windsor, UK, Aug, IEEE CS; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2006) LNCS, 3997, pp. 16-31. , Proc. FATES 2005, number in, Springer; Symbian. http://www.symbian.eom/.CitedMay2007; Symbian, Symbian Signed, , http://www.symbiansigned.com, Cited Dec 2006; Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann; Valmari, A., The state explosion problem (1996) Lectures on Petri Nets I: Basic Models, pp. 429-528. , London, UK, Springer-Verlag","Jääskeläinen, A.; Tampere University of Technology, P.O.Box 553, FI-33101 Tampere, Finland; email: antti.m.jaaskelainen@tut.fi",,"Oxford Brookes University;The University of Hong Kong",,"8th International Conference on Quality Software, QSIC 2008","12 August 2008 through 13 August 2008","Oxford",73764,15506002,9780769533124,,,"English","Proc. Int. Conf. Qual. Softw.",Conference Paper,"Final","",Scopus,2-s2.0-52449107265
"Chen W.-K., Shen Z.-W., Chang C.-M.","9735579700;36471050900;24802118000;","GUI test script organization with component abstraction",2008,"Proceedings - The 2nd IEEE International Conference on Secure System Integration and Reliability Improvement, SSIRI 2008",,, 4579804,"128","134",,8,"10.1109/SSIRI.2008.16","https://www.scopus.com/inward/record.uri?eid=2-s2.0-51749107962&doi=10.1109%2fSSIRI.2008.16&partnerID=40&md5=8d6a167d4ceafd13cbc7fd9ec0683110","Department of Computer Science and Information Engineering, National Taipei University of Technology","Chen, W.-K., Department of Computer Science and Information Engineering, National Taipei University of Technology; Shen, Z.-W., Department of Computer Science and Information Engineering, National Taipei University of Technology; Chang, C.-M., Department of Computer Science and Information Engineering, National Taipei University of Technology","GUI (Graphical User Interface) testing plays an important role in ensuring the correctness and reliability of software applications. To perform GUI testing, a test script must be prepared (or generated by tools) so that massive user interactions and verifications can be conducted automatically. Ideally, the actions of a test script should be organized based on the structure of the GUI so that the actions are easier to extend and maintain. Unfortunately, current methodologies and tools fall short in supporting such an organization. This paper proposes an ""object-based"" approach, called component abstraction, to model the structure of a GUI. A GUI testing modeling language, GTML, is defined and a systematic approach in applying component abstraction is described. We show that a test script written in GTML is more robust and easier to maintain in comparison to an ordinary test script. In addition, we implement a visual environment for the development of GTML scripts so that testers (developers) do not need to write GTML scripts in plain-text language. © 2008 IEEE.",,"Component abstraction; International conferences; Reliability improvement; Abstracting; Computer networks; Computer programming languages; Computer systems; Linguistics; Reliability; Software reliability; Software testing; Testing; Graphical user interfaces",,,,,,,,"JFCUnit, , http://jfcunit.sourceforge.net; Andersson, J., Bache, G., The video store revisited yet again: Adventures in GUI acceptance testing (2004) LNCS, 3092, pp. 1-10. , 5th International Conference XP'04; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proc. 12th International Symposium on Software Reliability Engineering (ISSRE'01), p. 34; Chen, J., Subramaniam, S., Specification-based testing for GUI-based applications (2002) Software Quality Journal, 10 (3), pp. 205-224; Chen, W.-K., Tsai, T.-H., Chao, H.-H., Integration of Specification-Based and CR-Based Approaches for GUI Testing (2005) Proc. 19th International Conference on Advanced Information Networking and Applications (AINA'05), pp. 967-972. , March; Dutta, S., Abbot-a friendly JUnit extension for GUI testing (2003) Java Developer Journal, pp. 8-12. , Apr; HP, H., WinRunner, , http://www.mercury.com/us/products/quality-center/functional-testing/winrunner; IBM rational robot, , http://www-306.ibm.com/software/awdtools/tester/robot; Larman, C., (2004) Applying UML and Patterns, , 3rd Ed. Prentice Hall PTR; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) J. Softw. Maint. Evol.: Res. Pract, 17 (1), pp. 27-64; Memon, A., Soffa, M., Pollack, M., Coverage criteria for GUI testing (2001) 8th European Conference and 9th ACM SIGSOFT Foundation of Software Engineering, pp. 256-267; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Software Testing, Verification and Reliability; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng, 27 (2), pp. 144-155; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) ESEC/FSE-11: Proceedings of the 9th European software engineering conference held jointly with 11th ACM SIGSOFT international symposium on foundations of software engineering, pp. 118-127; Jemmy module, , http://jemmy.netbeans.org; Shehady, R.K., Siewiorek, D.P., A methodology to automate user interface testing using variable finite state machines (1997) Proc. The Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , Seattle, Washington, USA, June, IEEE Computer Society; Sun, Y., Jones, E.L., Specification-driven automated testing of GUI-based java programs (2004) ACM Southeast Regional Conference, pp. 140-145. , S.-M. Yoo and L. H. Etzkorn, editors, Huntsville, Alabama, USA, April, ACM; White, L.J., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc. 11th International Symposium on Software Reliability Engineering (ISSRE'00), pp. 110-123. , San Jose, CA, USA, October, IEEE Computer Society","Chen, W.-K.; Department of Computer Science and Information Engineering, Taiwan; email: wkchen@ntut.edu.tw",,"IEEE Reliability Society;IEEE Systems, Man, and Cybernetics Society",,"2nd IEEE International Conference on Secure System Integration and Reliability Improvement, SSIRI 2008","14 July 2008 through 17 July 2008","Yokohama",73531,,9780769532660,,,"English","Proc. - IEEE Int. Conf. Secure Syst. Integr. Reliability Improv., SSIRI",Conference Paper,"Final","",Scopus,2-s2.0-51749107962
"Mesbah A., Bozdag E., Van Deursen A.","17345931800;24802037800;7003969355;","Crawling AJAX by inferring user interface state changes",2008,"Proceedings - 8th International Conference on Web Engineering, ICWE 2008",,, 4577876,"122","134",,133,"10.1109/ICWE.2008.24","https://www.scopus.com/inward/record.uri?eid=2-s2.0-51749092434&doi=10.1109%2fICWE.2008.24&partnerID=40&md5=33b046dad4ce34b1d5616398b2d08f3d","Delft University of Technology, Netherlands; Delft Univ. of Technology and CWI, Netherlands","Mesbah, A., Delft University of Technology, Netherlands; Bozdag, E., Delft University of Technology, Netherlands; Van Deursen, A., Delft Univ. of Technology and CWI, Netherlands","AJAX is a very promising approach for improving rich interactivity and responsiveness of web applications. At the same time, AJAX techniques shatter the metaphor of a web 'page' upon which general search crawlers are based. This paper describes a novel technique for crawling AJAX applications through dynamic analysis and reconstruction of user interface state changes. Our method dynamically infers a 'state-flow graph' modeling the various navigation paths and states within an AJAX application. This reconstructed model can be used to generate linked static pages. These pages could be used to expose AJAX sites to general search engines. Moreover, we believe that the crawling techniques that are part of our solution have other applications, such as within general search engines, accessibility improvements, or in automatically exercising all user interface elements and conducting state-based testing of AJAX applications. We present our open source tool called CRAWLJAX which implements the concepts discussed in this paper. Additionally, we report a case study in which we apply our approach to a number of representative AJAX applications and elaborate on the obtained results. © 2008 IEEE.",,"Computer software; Dynamic analysis; Information retrieval; Information services; Search engines; World Wide Web; User interfaces; Web engineering; Applications",,,,,,,,"Andrews, A., Offutt, J., Alexander, R., Testing web applications by modeling with FSMs (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , July; Atterer, R., Schmidt, A., Adding usability to web engineering models and tools (2005) Proceedings of the 5th International Conferencee on Web Engineering (ICWE'05), pp. 36-41. , Springer; Backbase. Designing rich internet applications for search engine accessibility, 2005. backbase.com Whitepaper; Barbosa, L., Freire, J., An adaptive crawler for locating hidden-web entry points (2007) WWW '07: Proceedings of the 16th international conference on World Wide Web, pp. 441-450. , ACM Press; Bozdag, E., Mesbah, A., van Deursen, A., A comparison of push and pull techniques for Ajax (2007) Proceedings of the 9th IEEE International Symposium on Web Site Evolution (WSE'07), pp. 15-22. , IEEE Computer Society; Chawathe, S.S., Rajaraman, A., Garcia-Molina, H., Widom, J., Change detection in hierarchically structured information (1996) SIGMOD '96: Proceedings of the 1996 ACM SIGMOD international conference on Management of data, pp. 493-504. , ACM Press; Dasgupta, A., Ghosh, A., Kumar, R., Olston, C., Pandey, S., Tomkins, A., The discoverability of the web (2007) WWW '07: Proceedings of the 16th international conference on World Wide Web, pp. 421-430. , ACM Press; de Carvalho, A.F., Silva, F.S., Smartcrawl: A new strategy for the exploration of the hidden web (2004) WIDM '04: Proceedings of the 6th annual ACM international workshop on Web information and data management, pp. 9-15. , ACM Press; van Deursen, A., Klint, P., Visser, J., Domain-specific languages: An annotated bibliography (2000) SIGPLAN Not, 35 (6), pp. 26-36; Dijkstra, E.W., A note on two problems in connexion with graphs (1959) Numerische Mathematik, 1 (1), pp. 269-271; Fielding, R., Taylor, R.N., Principled design of the modern Web architecture (2002) ACM Trans. Inter. Tech. (TOIT), 2 (2), pp. 115-150; Florins, M., Vanderdonckt, J., Graceful degradation of user interfaces as a design method for multiplatform systems (2004) IUI '04: Proceedings of the 9th international conference on Intelligent user interfaces, pp. 140-147. , ACM Press; Garrett, J., Ajax: A new approach to web applications (2005) Adaptive path, , http://www.adaptivepath.com/publications/essays/archives/000385.php; Lage, J.P., da Silva, A.S., Golgher, P.B., Laender, A.H.F., Automatic generation of agents for collecting hidden web pages for data extraction (2004) Data Knowl. Eng, 49 (2), pp. 177-196; Levenshtein, V.L., Binary codes capable of correcting deletions, insertions, and reversals (1996) Cybernetics and Control Theory, 10, pp. 707-710; Marchetto, A., Tonella, P., Ricca, F., State-based testing of Ajax web applications (2008) Proceedings of the 1st IEEE International Conference on Software Testing Verification and Validation (ICST'08), , IEEE Computer Society; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE '03: 10th Working Conference on Reverse Engineering, pp. 260-269. , IEEE Computer Society; Memon, A., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) ESEC/FSE '01: Proceedings of the 8th European software engineering conference held jointly with 9th ACM SIGSOFT international symposium on Foundations of software engineering, pp. 256-267. , ACM Press; Mesbah, A., van Deursen, A., Migrating multi-page web applications to single-page Ajax interfaces (2007) Proceedings of the 11th European Conference on Software Maintenance and Reengineering (CSMR'07), pp. 181-190. , IEEE Computer Society; Mesbah, A., van Deursen, A., A component- and push-based architectural style for Ajax applications (2008) Journal of Systems and Software (JSS), , To appear; Ntoulas, A., Zerfos, P., Cho, J., Downloading textual hidden web content through keyword queries (2005) JCDL '05: Proceedings of the 5th ACM/IEEE-CS joint conference on Digital libraries, pp. 100-109. , ACM Press; Raghavan, S., Garcia-Molina, H., Crawling the hidden web (2001) VLDB '01: Proceedings of the 27th International Conference on Very Large Data Bases, pp. 129-138. , Morgan Kaufmann Publishers Inc; Valmari, A., The state explosion problem (1998) LNCS: Lectures on Petri Nets I, Basic Models, Advances in Petri Nets, pp. 429-528. , Springer-Verlag; Yin, R.K., (2003) Case Study Research: Design and Methods, , SAGE Publications Inc, 3d edition","Mesbah, A.; Delft University of TechnologyNetherlands; email: A.Mesbah@tudelft.nl",,,,"8th International Conference on Web Engineering, ICWE 2008","14 July 2008 through 18 July 2008","Yorktown Heights, NY",73518,,9780769532615,,,"English","Proc. - Int. Conf. Web Eng., ICWE",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-51749092434
"Kwon O.-H., Hwang S.-M.","55420625800;14015774400;","Mobile GUI testing tool based on image flow",2008,"Proceedings - 7th IEEE/ACIS International Conference on Computer and Information Science, IEEE/ACIS ICIS 2008, In conjunction with 2nd IEEE/ACIS Int. Workshop on e-Activity, IEEE/ACIS IWEA 2008",,, 4529869,"508","512",,8,"10.1109/ICIS.2008.54","https://www.scopus.com/inward/record.uri?eid=2-s2.0-51349118703&doi=10.1109%2fICIS.2008.54&partnerID=40&md5=38ea21348d9b988e59668cd741b41460","Dept. of Computer Engineering, Tongmyung University, South Korea; Dept. of Computer Engineering, Daejeon University, South Korea","Kwon, O.-H., Dept. of Computer Engineering, Tongmyung University, South Korea; Hwang, S.-M., Dept. of Computer Engineering, Daejeon University, South Korea","GUI of mobile application software has been highlighted as elements in deciding whether or not success or failure of software itself. Since it becomes established as an important factor of software success, GUI test is required for the software success. But its test takes much efforts and time. Therefore, we propose a method and automatic tool for mobile GUI test. © 2008 IEEE.",,"Communication; Computer networks; Cybernetics; Information management; Information science; GUI testing; Image flows; International conferences; Mobile application software; Computer software",,,,,,,,"Myers, G., Sandler, C., Badgett, T., Thomas, T., (2004) The Art of software Testing, , Second Edition, John Wiley & sons; IEEE Standard Glossary of Software Engineering Terminology, IEEE std 610.12-1990, The Institute of Electrical and Electronics Engineers, 1990; Pressman, R., (2003) A Practitioner's Approach, , Software Engineering:, McGraw-Hill; BREW White Paper, BREW and J2ME-A Complete Wireless Solution for Operators Committed to Java, QUALCOMM; Fewster, M., Graham, D., (1999) Software Test automation, , Addision-Wesley; McGregor, J.D., Korson, T.D., Integrated Object-Oriented Testing and Development Process (1994) CACM, 37 (9). , September; Patton, R., (2000) Software Testing, , Sams; http://java.sun.com/j2me/docs/index.html, J2ME Documentation, Available at URL; Fewster, M., Graham, D., (1999) Software Test automation, , Addision-Wesley; XCE Developer Site API Document, , http://www.developerzone.co.kr/release/release_api.asp, URL; XCE Developer Site Tech Document, , http://www.developerzone.co.kr/release/release_doc.asp, URL; QtUnit(Software development testing framework) Introduction Manual; Information Technology-software product quality-Part 1: Quality In Use Metrics, (1998), ISO/IEC, ISO/IEC9126; Information Technology-software product quality-Part2: Quality In Use Metrics, (1998), ISO/IEC, ISO/IEC9126; Information Technology-software product quality-Part3: Quality In Use Metrics, (1998), ISO/IEC, ISO/IEC9126; Information Technology-software product quality-Part4: Quality In Use Metrics, (1998), ISO/IEC, ISO/IEC9126; (2000), ISO 12119. , ISO/IEC, Information technology, Software packages -Quality requirements and testing; Beck, K., Gamma, E., JUnit Cookbook","Hwang, S.-M.; Dept. of Computer Engineering, South Korea; email: sunhwang@dju.ac.kr",,"IEEE Computer Society;Int. Association for Computer and Information Science (ACIS)",,"7th IEEE/ACIS International Conference on Computer and Information Science, IEEE/ACIS ICIS 2008","14 May 2008 through 16 May 2008","Portland, OR",73174,,9780769531311,,,"English","Proc.- IEEE/ACIS Int. Conf. Comput. Inf. Sci., IEEE/ACIS ICIS",Conference Paper,"Final","",Scopus,2-s2.0-51349118703
"Alsmadi I.","17433667400;","The utilization of user sessions in testing",2008,"Proceedings - 7th IEEE/ACIS International Conference on Computer and Information Science, IEEE/ACIS ICIS 2008, In conjunction with 2nd IEEE/ACIS Int. Workshop on e-Activity, IEEE/ACIS IWEA 2008",,, 4529880,"581","585",,6,"10.1109/ICIS.2008.14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-51349118259&doi=10.1109%2fICIS.2008.14&partnerID=40&md5=362fc17ea33bca7db6fb736725dcd383","North Dakota State University","Alsmadi, I., North Dakota State University","Software testing cost is rising with the complexity of modern applications ' user interfaces, frameworks, and technologies. However, testing stays an import software engineering stage that insures the quality of the developed software and eventually reduces the overall cost. This paper proposed utilizing user sessions for test case generation and execution. User sessions can be gathered from the application in production environments and represent user stories or scenarios. Rather than rerunning user sessions for test automation, as in record/replay tools, this research takes the track of abstracting requirements from those sessions to make them independent of the scripting language or the tool that created them. The suggested approach abstracts user sessions to make them more independent and reusable. This approach is expected to improve the utilization of user sessions from being copied and reused in the same original format, which makes it complex to edit and inflexible, to a format that can be used and utilized in different applications and platforms. © 2008 IEEE.",,"User sessions; Abstracting; Applications; Communication; Computer networks; Computer software reusability; Computer software selection and evaluation; Cybernetics; Information management; Information science; Java programming language; Software engineering; User interfaces; Software testing",,,,,,,,"Alshahwan, Nadia. Automatic regression testing of web applications. 〈http://www.dcs.kcl.ac.uk/staff/mark/PastMScProiects200 4/NadiaAlshuhwan,pdf〉, 2005; Offutt, Jeff, Ye Wu, Xiaochen Du, and Hong Huang. Bypass testing of web applications. In proceedings of the 15th international symposium on software reliability engineering (ISSRE'04) - 00. Pages: 187-197. 2004; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) proceedings of the 25th international conference on software engineering, pp. 49-59. , Oregon, USA. Pages; Hicinbothom, J. H., and W. W. Zachary. A tool for automatically generating transcripts of human-computer interaction. In proceedings of the human factors and ergonomics society 37th annual meeting, 2 of special sessions: Demonstrations. Page 1042. 1993; Sreedevi, S., (2006) Cost effective techniques for user session based testing of web applications, , Delaware.〈128.4.133.74:8080-/dspace/bitstream/123456789/168/1/sampath.dissertation06.pdf, Phd dissertation. University of; Norman, D., (1988) The psychology of everyday things, , Basic books; Gunduz, SuIe, and Tamer Oszu. A poisson model for user accesses to web pages. In Proceedings of 18th International Symposium on Computer and Information Sciences (ISCIS), Antalya, Turkey, November 2003, pages 332-339. Published as Springer LNCS 2869 /2003; Elbaum, S., Karre, S., Rothermel, G., Fisher, M., Leveraging User-Session Data to Support Web Application Testing (2005) IEEE Transactions on Software Engineering, pp. 187-202. , Pages; Yaya Wei; Chuang Lin; Fengyuan Ren; Dutkiewicz, E.; and Raad, R. Session based differentiated quality of service admission control for Web servers. Page(s): 112-116. ICCNMC2003; Alsmadi, I, and Kenneth Magel. GUI Path Oriented Test Generation Algorithms. In Proceeding of IASTED (569) Human-Computer Interaction. 2007; Alsmadi, I, and Kenneth Magel. An Object Oriented Framework for User Interface Test Automation. MICS07. 2007; Gunduz, S., Oszu, T., A user interest model for web page navigation (2003) Proceeding of International Workshop on Data Mining for Actionable Knowledge, , Seoul, Korea; Chen, E., (2005) Resource-based user interface design, , www.cs.york.ac.uk/ftpdir/reports/YCST-2005-04.ndf, Phd thesis. The university of York","Alsmadi, I.; North Dakota State UniversityUnited States; email: Izzat.alsmadi@ndsu.edn",,"IEEE Computer Society;Int. Association for Computer and Information Science (ACIS)",,"7th IEEE/ACIS International Conference on Computer and Information Science, IEEE/ACIS ICIS 2008","14 May 2008 through 16 May 2008","Portland, OR",73174,,9780769531311,,,"English","Proc.- IEEE/ACIS Int. Conf. Comput. Inf. Sci., IEEE/ACIS ICIS",Conference Paper,"Final","",Scopus,2-s2.0-51349118259
"Hao C., Beiji Z., Naizheng B., Lili P.","57188828991;16021227600;24765404700;57220249974;","A reusable component-based library for GUI regression testing",2008,"Proceedings - 1st International Workshop on Knowledge Discovery and Data Mining, WKDD",,, 4470405,"326","329",,,"10.1109/WKDD.2008.79","https://www.scopus.com/inward/record.uri?eid=2-s2.0-50949088645&doi=10.1109%2fWKDD.2008.79&partnerID=40&md5=e7cd9f649e6e39fb0e8e46565c577800","School of Information Science and Engineering, Central South University, Changsha 410083, China; Software School, Hunan University, Changsha 410082, China","Hao, C., School of Information Science and Engineering, Central South University, Changsha 410083, China, Software School, Hunan University, Changsha 410082, China; Beiji, Z., School of Information Science and Engineering, Central South University, Changsha 410083, China; Naizheng, B., Software School, Hunan University, Changsha 410082, China; Lili, P., Software School, Hunan University, Changsha 410082, China","The widespread use of Graphical user interfaces (GUIs) makes the GUIs construction more and more complicated. It makes the GUIs testing become a challenging problem. In this paper, a framework of component-based library (CBL) for GUI regression testing is proposed. Test components, which encapsulate associated properties, operations and meta-information, are defined as reusable object. Three key processes of CBL are introduced in detail. The first process is the CBL organization structure based on message mechanism. The second process is the test components regeneration guidelines for GUI testing. The third process is to divide test procedure into several phases to improve the testing efficiency. The phases include message segment capture phase, component abstract phase, regenerate test component phase and component-driven testing phase. Experimental results show that CBL model can performance well and the proposed reusable component for GUI regression testing can regenerate a large number of test cases automatically and efficiently. © 2008 IEEE.",,"Administrative data processing; Computer systems; Data mining; Decision support systems; Information management; Knowledge based systems; Mining; Phase interfaces; Regression analysis; Testing; User interfaces; Component-based; GUI regression testing; Knowledge Discovery and Data mining; Graphical user interfaces",,,,,,,,"Chen, H., Zhang, J., Zou, B., Research on eventdriven automated software testing based on message mechanism (2007) Proceedings of International symposium on computer science & technology, May; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goaldriven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, May, pp. 257-266; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , Oct; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, Oct, pp. 8-11,110-121; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of The 10th Working Conference on Reverse Engineering, November; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 8-10,30-39. , NY, Nov; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), Sept, pp. 256-267; Antoy, S., Hamlet, D., Automatically checking an implementation against its formal specification (2000) IEEE Trans. Softw. Eng, 26 (1), pp. 55-69","Hao, C.; School of Information Science and Engineering, , Changsha 410083, China; email: chenhao@hnu.cn",,"University of Adelaide;Inst. Computer Sci., Social Inf. Telecommunications Eng. (ICST);E-Forensics 2008",,"1st International Workshop on Knowledge Discovery and Data Mining, WKDD","23 January 2008 through 24 January 2008","Adelaide",73057,,0769530907; 9780769530901,,,"English","Proc. - Int. Workshop Knowl. Discov. Data Min., WKDD",Conference Paper,"Final","",Scopus,2-s2.0-50949088645
"Pichler J., Ramler R.","24822676900;23095597800;","How to test the intangible properties of graphical user interfaces?",2008,"Proceedings of the 1st International Conference on Software Testing, Verification and Validation, ICST 2008",,, 4539578,"494","497",,10,"10.1109/ICST.2008.52","https://www.scopus.com/inward/record.uri?eid=2-s2.0-50649100181&doi=10.1109%2fICST.2008.52&partnerID=40&md5=1b191831ca5f289c0258e10c91bd3a22","Software Competence Center Hagenberg GmbH, Softwarepark 21, A-4232 Hagenberg, Austria","Pichler, J., Software Competence Center Hagenberg GmbH, Softwarepark 21, A-4232 Hagenberg, Austria; Ramler, R., Software Competence Center Hagenberg GmbH, Softwarepark 21, A-4232 Hagenberg, Austria","In this paper we describe our experience from developing and testing a visual Graphical User Interface (GUI) editor for mobile and multimedia devices. Testing of the editor's highly interactive user interface is critical for its success, yet remains a challenge due to the specification of often intangible quality characteristics of the GUI and its proneness to change. The approach we provide is supporting exploratory testing of the GUI with tools integrated with the tested object. Thus a step-by-step guide for manual exploratory testing can be enhanced with automated elements that directly manipulate the status of the editor, access internal properties of the GUI, and record interactions for bug reporting. © 2008 IEEE.",,"Computer software selection and evaluation; Computer systems; User interfaces; Verification; International conferences; Software testing; Graphical user interfaces",,,,,,,,"Bach, J., Exploratory Testing (2002) The Testing Practitioner, UTN Publishers, pp. 209-221. , http://www.satisfice.com, E.v. Veenendaal ed, available from; Beer W., R. Ramler, and G. Leonhartsberger, Provision and Benefits of a Unified Bug Tracking API, Proceeding of the Session on Work in Progress at the 32nd EUROMICRO Conference on Software Engineering and Advanced Applications 2006, Cavtat, Croatia, 2006; ScriptAssure, , http://www.ibm.com/software/awdtools/tester/functional/sa.html, IBM Rational Functional Tester:, retrieved Oct. 2007; Itkonen, J., Rautiainen, K., Exploratory Testing: A Multiple Case Study (2005) Int. Symposium on Empirical Software Engineering, Noosa Heads, , Australia; Memon, A., Banerjee, I., Nagarajan, A., What Test Oracle Should I Use for Effective GUI Testing? (2003) Int. Conf. on Automated Software Eng, , Montreal, Canada; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance, 17 (1), pp. 27-64; Pichler J., Praehofer H., Reisinger G., and Leonhartsberger G., Aragon: An Industrial Strength Eclipse Tool for MMI Design for Mobile Systems. IASTED SE 2007, Innsbruck, Austria, 2007; Smale, A., Test automation experience at Microsoft (1999) Software Test Automation, pp. 537-552. , Fewster M, Graham D, ed, Addison-Wesley","Pichler, J.; Software Competence Center Hagenberg GmbH, Softwarepark 21, A-4232 Hagenberg, Austria; email: josef.pichler@scch.at",,"IEEE Computer Society;DNV;The Research Council of Norway;IBM;IEEE",,"1st International Conference on Software Testing, Verification and Validation, ICST 2008","9 April 2008 through 11 April 2008","Lillehammer",73350,,076953127X; 9780769531274,,,"English","Proc. Int. Conf. Softw. Test., Verif. Validation, ICST",Conference Paper,"Final","",Scopus,2-s2.0-50649100181
"Paiva A.C.R., Faria J.C.P., Mendes P.M.C.","7102683763;35219959000;57213629075;","Reverse engineered formal models for GUI testing",2008,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","4916 LNCS",,,"218","233",,17,"10.1007/978-3-540-79707-4_16","https://www.scopus.com/inward/record.uri?eid=2-s2.0-44649152484&doi=10.1007%2f978-3-540-79707-4_16&partnerID=40&md5=6f784f1c3f28addc61140f59cea4b868","Engineering Faculty, University of Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; INESC Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal","Paiva, A.C.R., Engineering Faculty, University of Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; Faria, J.C.P., Engineering Faculty, University of Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal, INESC Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; Mendes, P.M.C., Engineering Faculty, University of Porto, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal","This paper describes a process to reverse engineer structural and behavioural formal models of a GUI application by a dynamic technique, mixing manual with automatic exploration. The goal is to diminish the effort required to construct the model and mapping information needed in a model-based GUI testing process. A skeleton of a state machine model of the GUI, represented in a formal pre/post specification language, is generated automatically by the exploration process. Mapping information between the model and the implementation is also generated along the way. The model extracted automatically is then completed manually in order to get an executable model which can be used as a test oracle. Abstract test cases, including expected outputs, can be generated automatically from the final model and executed over the GUI application, using the mapping information generated during the exploration process. © 2008 Springer-Verlag Berlin Heidelberg.","Model-based GUI testing; Reverse engineering","Data processing; Formal methods; Graphical user interfaces; Mathematical models; Specification languages; Automatic exploration; Model-based GUI testing; State machine model; Reverse engineering",,,,,,,,"Barnett, M., Leino, K.R.M., Schulte, W.: The Spec# Programming System: An Overview. In: Barthe, G., Burdy, L., Huisman, M., Lanet, J.-L., Muntean, T. (eds.) CASSIS 2004. LNCS, 3362. Springer, Heidelberg (2005); Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., (2005) Model-Based Testing of Object-Oriented Reactive Systems with Spec Explorer, , Microsoft Research, MSR-TR-2005-59 May; Chikofsky, E.J., Cross, J.H., Reverse Engineering and Design Recovery: A Taxonomy (1990) IEEE Software, 7 (1), pp. 1-17; Kiczales, G., Lamping, J., Menhdhekar, A., Maeda, C., Lopes, C., Loingtier, J.-M., Irwin, J.: Aspect-Oriented Programming. In: M. A. a. S. M. (eds.) Proceedings of the European Conference on Object-Oriented Programming (1997); Memon, A., Banerjee, I., Nagarajan, A., GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing (2003) Proceedings of the WCRE 2003 - The 10th Working Conference on Reverse Engineering, , Victoria, British Columbia, Canada, November 13-16; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated Test Oracles for GUIs (2000) Proceedings of the FSE; Nyman, N.: In Defense of Monkey Testing (conferred in May 2006); Paiva, A.C.R.: Automated Specification-Based Testing of Graphical User Interfaces, Ph.D, Engineering Faculty of Porto University (Ph.D thesis), Department of Electrical and Computer Engineering (2007), http://www.fe.up.pt/ ∼apaiva/PhD/PhDGUITesting.pdf; Paiva, A.C.R., Faria, J.C.P., Tillmann, N., Vidal, R.F.A.M.: A Model-to-implementation Mapping Tool for Automated Model-based GUI Testing. In: Lau, K.-K., Banach, R. (eds.) ICFEM 2005. LNCS, 3785. Springer, Heidelberg (2005); Paiva, A.C.R., Tillmann, N., Faria, J.C.P., Vidal, R.F.A.M.: Modeling and Testing Hierarchical GUIs. In: Proceedings of the ASM 2005 - 12th International Workshop on Abstract State Machines, Paris - France, March 8-11 (2005); Sabbah, D., Aspect-Oriented software development (2004) Proceedings of the Third International Conference on Aspect-oriented Software Development, , Lancaster, UK; Stroulia, E., El-Ramly, M., Iglinski, P., Sorenson, P., User Interface Reverse Engineering in Support of Interface Migration to the Web (2003) Automated Software Engineering, 10, pp. 271-301; Stroulia, E., El-Ramly, M., Kong, L., Sorenson, P., Matichuk, B., Reverse Engineering Legacy Interfaces: An Interaction-Driven Approach (1999) Proceedings of the WCRE; Vanderdonckt, J., Bouillon, L., Souchon, N., Flexible Reverse Engineering of Web Pages with VAQUISTA (2001) Proceedings of the IEEE 8th Working Conf. on Reverse Engineering","Paiva, A. C. R.; Engineering Faculty, Rua Dr. Roberto Frias, s/n, 4200-465 Porto, Portugal; email: apaiva@fe.up.pt",,,,"12th International Workshop on Formal Methods for Industrial Critical Systems, FMICS 2007","1 July 2007 through 2 July 2007","Berlin",72136,03029743,3540797068; 9783540797067,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-44649152484
"Jääskeläinen A., Katara M., Kervinen A., Heiskanen H., Maunumaa M., Pääkkönen T.","24923055000;7801543558;6507407206;36166742400;14056610700;14056661800;","Model-based testing service on the web",2008,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","5047 LNCS",,,"38","53",,18,"10.1007/978-3-540-68524-1_5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871225075&doi=10.1007%2f978-3-540-68524-1_5&partnerID=40&md5=750b26cd4e1162f1586a73eb028568ef","Tampere University of Technology, Department of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; Nokia Devices, P.O. Box 68, FI-33721 Tampere, Finland","Jääskeläinen, A., Tampere University of Technology, Department of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; Katara, M., Tampere University of Technology, Department of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; Kervinen, A., Tampere University of Technology, Department of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; Heiskanen, H., Tampere University of Technology, Department of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; Maunumaa, M., Tampere University of Technology, Department of Software Systems, P.O. Box 553, FI-33101 Tampere, Finland; Pääkkönen, T., Nokia Devices, P.O. Box 68, FI-33721 Tampere, Finland","Model-based testing (MBT) seems to be technically superior to conventional test automation. However,MBT features some difficulties that can hamper its deployment in industrial contexts. We are developing a domain-specific MBT solution for graphical user interface (GUI) testing of Symbian S60 smartphone applications. We believe that such a tailor-made solution can be easier to deploy than ones that are more generic. In this paper, we present a service concept and an associated web interface that hide the inherent complexity of the test generation algorithms and large test models. The interface enables an easy-to-use MBT service based on the well-known keyword concept. With this solution, a better separation of concerns can be obtained between the test modeling tasks that often require special expertise, and test execution that can be performed by testers. We believe that this can significantly speed up the industrial transfer of model-based testing technologies, at least in this context. © IFIP International Federation for Information Processing 2008.",,"Graphical user interfaces; Model checking; Testing; Web services; Social networking (online); User interfaces; Graphical user interfaces (GUI); Industrial context; Industrial transfers; Inherent complexity; Model based testing; Separation of concerns; Smart-phone applications; Test generation algorithm; Software testing",,,,,,,,"Utting, M., Legeard, B., (2007) Practical Model-Based Testing: A Tools Approach, , Morgan Kaufmann, San Francisco; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., Testing concurrent object-oriented systems with spec explorer (2005) FM 2005. LNCS, 3582, pp. 542-547. , Fitzgerald, J.S., Hayes, I.J., Tarlecki, A. (eds.). Springer, Heidelberg; Robinson, H., Obstacles and opportunities for model-based testing in an industrial software environment (2003) Proceedings of the 1st European Conference on Model-Driven Software Engineering, pp. 118-127. , Nuremberg, Germany; Hartman, A., (2008) AGEDIS Project Final Report, , http://www.agedis.de/documents/FinalPublicReport28D1.629.PDF, Cited, March; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Satama, M., Towards deploying model-based testing with a domain-specific modeling approach (2006) Proceedings of TAIC PART -Testing: Academic & Industrial Conference, pp. 81-89. , Windsor, UK. IEEE Computer Society, Los Alamitos; (2008), http://www.symbian.com/, March; (2008), http://www.s60.com, March; (2008) UML Testing Profile, v 1.0. Cited, , http://www.omg.org/technology/documents/formal/test_profile.htm, March; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2006) FATES 2005. LNCS, 3997, pp. 16-31. , Grieskamp, W., Weise, C. (eds.) . Springer, Heidelberg; Kervinen, A., Maunumaa, M., Katara, M., Controlling testing using three-tier model architecture (2006) Proceedings of the Second Workshop on Model Based Testing (MBT 2006), 164 (4), pp. 53-66. , Vienna, Austria. Electronic Notes in Theoretical Computer Science. Elsevier, Amsterdam; Katara, M., Kervinen, A., Making model-based testing more agile: A use case driven approach (2007) HVC 2006. LNCS, 4383, pp. 219-234. , Bin, E., Ziv, A., Ur, S. (eds.). Springer, Heidelberg; Katara, M., Kervinen, A., Maunumaa, M., Pääkkönen, T., Jääskeläinen, A., Can i have some model-based GUI tests please? Providing a model-based testing service through a web interface (2007) Proceedings of the Second Annual Conference of the Association for Software Testing (CAST 2007), , Bellevue, WA, USA; Jääskeläinen, A., (2008) A Domain-specific Tool for Creation and Management of Test Models, , Master's thesis, Tampere University of Technology; Boehm, B., Turner, R., (2004) Balancing Agility and Discipline: A Guide for the Perplexed, , Addison-Wesley, Reading; Rook, P., Controlling software projects (1986) Softw. Eng. J., 1, pp. 7-16; Buwalda, H., Action figures (2003) STQE Magazine, pp. 42-47. , March/April; Fewster, M., Graham, D., (1999) Software Test Automation: Effective Use of Test Execution Tools, , Addison-Wesley, Reading; Valmari, A., The state explosion problem (1996) Lectures on Petri Nets I: Basic Models, pp. 429-528. , London, UK. Springer, Heidelberg; (2008) Python Programming Language Homepage, , http://python.org/, Cited, March; Karsisto, K., (2003) A New Parallel Composition Operator for Verification Tools, , Doctoral dissertation, Tampere University of Technology (number 420 in publications); Satama, M., (2006) Event Capturing Tool for Model-based GUI Test Automation, , http://practise.cs.tut.fi/project.php?project=tema&page=publications, Master's thesis, Tampere University of Technology, Cited March 2008; (2008) Mercury Functional Testing Homepage, , http://www.mercury.com/us/products/quality-center/functional-testing/, HP. Cited (March); Zakas, N.C., McPeak, J., Fawcett, J., (2007) Professional Ajax, , 2nd edn. Wiley, Chichester; Taipale, O., Smolander, K., Improving software testing by observing practice (2006) ISESE 2006. Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering, pp. 262-271. , ACM Press, New York; (2008) Microsoft Unveils Vision and Road Map to Simplify SOA, Bridge Software Plus Services, and Take Composite Applications Mainstream (2007-11-28), , http://www.microsoft.com/presspass/press/2007/oct07/10-30OsloPR.mspx, Cited March","Jääskeläinen, A.; Tampere University of Technology, P.O. Box 553, FI-33101 Tampere, Finland; email: antti.m.jaaskelainen@tut.fi","Suzuki K.Higashino T.Ulrich A.Hasegawa T.","International Communications Foundation;KDDI Corporation;Microsoft Research;Support Cent. Adv. Telecommun. Technol. Res., Found.","Springer Verlag","Joint 20th IFIP TC6/WG6.1 International Conference on Testing of Communicating Systems, TESTCOM 2008 and 8th International Workshop on Formal Approaches to Testing of Software, FATES 2008","10 June 2008 through 13 June 2008","Tokyo",94543,03029743,3540685146; 9783540685142,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-84871225075
"Singhera Z.U., Horowitz E., Shah A.A.","6506782210;7006515488;16022685400;","A graphical user interface (GUI) testing methodology",2008,"International Journal of Information Technology and Web Engineering","3","2",,"1","17",,7,"10.4018/jitwe.2008040101","https://www.scopus.com/inward/record.uri?eid=2-s2.0-47349092054&doi=10.4018%2fjitwe.2008040101&partnerID=40&md5=0af726cde59d0ea3b8d404db834f767b","ZAF Consulting, United States; Computer Science and Electrical Engineering Department, University of Southern California, Los Angeles, CA, United States; R and D Center of Computer Science, Pakistan","Singhera, Z.U., ZAF Consulting, United States; Horowitz, E., Computer Science and Electrical Engineering Department, University of Southern California, Los Angeles, CA, United States; Shah, A.A., R and D Center of Computer Science, Pakistan","Software testing in general and graphical user interface (GUI) testing in particular is one of the major challenges in the lifecycle of any software system. GUI testing is inherently more difficult than the traditional and command-line interface testing. Some of the factors that make GUI testing different from the traditional software testing and significantly more difficult are: a large number of objects, different look and feel of objects, many parameters associated with each object, progressive disclosure, complex inputs from multiple sources, and graphical outputs. The existing testing techniques for the creation and management of test suites need to be adapted/enhanced for GUls, and new testing techniques are desired to make the creation and management of test suites more efficient and effective. In this article, a methodology is proposed to create test suites for a GUI. The proposed methodology organizes the testing activity into various levels. The tests created at a particular level can be reused at higher levels. This methodology extends the notion of modularity and reusability to the testing phase. The organization and management of the created test suites resembles closely to the structure of the GUI under test. Copyright © 2008, IGI Global.","Methodology; Script generation; Testing GUI","Graphical user interfaces; Life cycle; Reusability; Testing; Command line interface; Graphical user interfaces (GUI); Methodology; Organization and management; Script generation; Software systems; Testing methodology; Testing technique; Software testing",,,,,,,,"Berstel, J., Reghizzi, S. C., Roussel, G., & San Pietro, P. (2001). A scalable formal method for design and automatic checking of user interfaces. In Proceedings of the 23rd International Conference on Software Engineering, (pp. 453-462); Campos, J., Harrison, M., Model checking interactor specifications (2001) Automated Software Engineering, 3 (8), pp. 275-310; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Design patterns, , Addison Wesley Publishers; Horowitz, E., Singhera, Z., Graphical user interface testing (1993) In proceedings of the Eleventh Annual Pacific Northwest Software Quality Conference; Horowitz, E., Singhera, Z., XTester -A System forTestingXApplications (1993), Technical Report No. USC-CS-93-549, Department of Computer Science, University of Southern California, Los Angeles, CA; Horowitz, E., Singhera, Z., A Graphical User Interface Testing Methodology (1993), Technical Report No. USC-CS-93-550, Department of Computer Science, University of Southern California, Los Angeles, CA; Harold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions on Software Engineering and Methodology, 2 (3), pp. 270-285; Mercury Interactive, , http://www.mercury.com, Mountain View, CA; Myers, B.A., Why are human-computer interfaces difficult to design and implement? (1993), Technical Report CS-93-183, Carnegie Mellon University, School of Computer Science; Myers, B.A., Olsen Jr., D.R., Bonar, J.G., User interface tools (1993) proceedings of ACM INTERCHI'93 Conference on Human Factors in Computing Systems, Adjunct Proceedings, p. 239. , Tutorials, p; Sommervill, I., (2001) Software engineering, , 6th ed, Addison Wesley Publishers; http://www.segue.com, Segue Software Inc, Newton, MA; Wittel Jr., W.I., Lewis, T.G., Integrating the mvc paradigm into an object-oriented framework to accelerate gui application development (1991) Technical Report91-60-D6, , Department of Computer Science, Oregon State University","Singhera, Z.U.; ZAF ConsultingUnited States",,,"IGI Publishing",,,,,15541045,,,,"English","Int. J. Inf. Technol. Web. Eng.",Article,"Final","",Scopus,2-s2.0-47349092054
"Alsmadi I., Magel K.","17433667400;7801503070;","GUI path oriented test case generation",2007,"International Conference on Software Engineering Theory and Practice 2007, SETP 2007",,,,"21","28",,3,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84878250686&partnerID=40&md5=35d2032962671ba91175e0131d4afaa0","Department of Computer Science, North Dakota State University, United States","Alsmadi, I., Department of Computer Science, North Dakota State University, United States; Magel, K., Department of Computer Science, North Dakota State University, United States","Testing software manually is a labor intensive and expensive process. Efficient automated testing can significantly reduce the overall cost of software development and maintenance. Graphical User Interface (GUI) code has some characteristics that distinguish it from the rest of the project code. Generating lest cases from the GUI code requires different algorithms from those usually applied in lest case generation. We developed several GUI test generation automated algorithms that do not need user involvement except in defining the lest inputs and pre condition. The generated test cases are used as input to test execution. The test cases are generated from an XML GUI model or tree that represents the GUI structure. This work contributes to the goal of developing a fully automates GUI lest framework using the data model approach.",,"Automated algorithms; Automated testing; Graphical user interfaces (GUI); Software development and maintenances; Test case generation; Test generations; Testing software; User involvement; Algorithms; Software engineering; Software testing; Graphical user interfaces",,,,,,,,"Tretmans, J., Test generation with inputs, outputs, and quiescence (1996) TACAS, pp. 127-146; Prasaraia, M.S.N., Venkatesan, S.R., Sundarrajan, K., A survey on automatic test case generation (2005) Academic Open Internet Journal, 15; Bdzcr, B., (1990) Software Testing Techniques, , Second Edition. New York, Van Nostrand Reinhold; Bemdt, D., Kisher, J., Johnson, L., Pinglikar, J., Watfeins, A., (2003) Breeding Software Test Cases with Genetic Algorithms, , http://www.coba.usf.edu/berndt/research/paper/hicss2003ga.pdf; GUI Software Testing, , http://en.wikipedia.org/wiki/GUL_software_testing.2007; Memon, A., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27; Tse, T.H., Chan, F.T., Chen, H.Y., An Axiom-Based Test Case Selection Strategy for Object-Oriented Programs, p. 94. , University of Hong Kong Hong Kong; Tse, T.H., Chan, F.T., Chen, H.Y., Black and White: An Integrated Approach to Object-Oriented Program Testing, 96. , University of Hong Kong, Hong Kong; Rajanna, V., Automated Software Testing Tools and Their Impact on Software Maintenance- An Experience, , Tata Consultancy Services; Mikkolainen, M., (2006) Automated Graphical User Interlace Testing, , www.cs.helsinki.fi/u/paakki/mikkolainen.pdf; Ames, A.K., Jic, H., Critical Paths for GUI Regression Testing, , www.cse.ucsc.edu/~sasha/proj/gui_testing.pdf; Kasik, D.J., George, K.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems, pp. 244-251. , Common Ground, New York, 13-18 Apr. ACM Press; Offutt, J., Liu, S., Abdurazik, A., Ammann, P., Generating test data from state based specifications (2003) The Journal of Software Testing, Verification and Reliability, 13 (1), pp. 25-53. , March; Baydeda, S., Gruhn, V., BINTEST-binary search-based test case generation (2003) Computer Software and Applications Conference (COMPSAC), , IEEE: Computer Society Press, 2003; Genetic Algorithms for Software Test Data Generation, , http://www.cigital.com/labs/projects/1008/, National science foundation; Jeffrey, V., Genetic Algorithms for Software Test Data Generation, , National science foundation","Department of Computer Science, United States",,,,"2007 International Conference on Software Engineering Theory and Practice, SETP 2007","9 July 2007 through 12 July 2007","Orlando, FL",97028,,9781615677221,,,"English","Int. Conf. Softw. Eng. Theory Pract., SETP",Conference Paper,"Final","",Scopus,2-s2.0-84878250686
"Budnik C.J., Subramanyan R., Vieira M.","8958239900;24328904300;7202140705;","Industrial requirements to benefit from test automation tools for GUI testing",2007,"INFORMATIK 2007 - Informatik Trifft Logistik, Beitrage der 37. Jahrestagung der Gesellschaft fur Informatik e.V. (GI)","2",,,"410","414",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84874253200&partnerID=40&md5=5ba1f5700ef863468942e15f93a61335","Software Engineering, Siemens Corporate Research, Inc., 755 College Road, East Princeton, NJ-08540, United States","Budnik, C.J., Software Engineering, Siemens Corporate Research, Inc., 755 College Road, East Princeton, NJ-08540, United States; Subramanyan, R., Software Engineering, Siemens Corporate Research, Inc., 755 College Road, East Princeton, NJ-08540, United States; Vieira, M., Software Engineering, Siemens Corporate Research, Inc., 755 College Road, East Princeton, NJ-08540, United States","In addition to the growing complexity of software systems, test effort takes increasing amounts of time and correspondingly more money. Testing costs may be reduced without compromising on software quality by minimizing test sets through optimal selection of test cases and introducing more powerful test tools. Attaining high levels of test automation is the objective. There are problems which make the introduction of test automation in industry quite difficult. Solution providers and tool developers often do not understand the requirements in industry for test automation. Otherwise introducing test automation could become counterproductive. This paper points out essential demands on GUI test tools for industrial purpose.",,"GUI testing; Industrial requirements; Optimal selection; Software Quality; Software systems; Solution providers; Test Automation; Test automation tool; Test case; Test efforts; Test sets; Test tools; Testing costs; Automation; Computer software selection and evaluation; Industry; Testing",,,,,,,,"Bach, J., Test automation snake oil (1996) Windows Technical Journal, pp. 40-44. , October; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) ISSRE, pp. 34-43; Belli, F., Budnik, C.J., Towards minimization of test sets for human-computer systems (2005) IEA/AIE 2005, pp. 300-309; Belli, F., Budnik, C.J., Towards self-testing of component-based software (2005) COMPSAC, (2), pp. 205-210. , 2005; Dustin, E., Lessons in test automation (1999) Software Testing & Quality Engineering Magazine, pp. 16-21. , September/Oktober; Fewster, M., Graham, D., (1999) Software Test Automation: Effective use of Test Execution Tools, , CM Press/Addison-Wesley Publishing Co., New York, NY, US; Hendrickson, E., Making the right choice: The features you need in a gui test automation tool (2003) STQE Magazine, pp. 20-25. , November/December; Kaner, C., Bach, J., Pettichord, B., (2001) Lessons Learned in Software Testing, , John Wiley & Sons, Inc., New York, NY, USA; Kelly, D., Software test automation and the product life cycle (1999) MacTech, 13. , B. Marick. When should a test be automated, 1998; Vieira, M., Leduc, J., Hasling, B., Subramanyan, R., Kazmeier, J., Automation of GUI testing using a model-driven approach (2006) Proceedings of the 2006 International Workshop on Automation of Software Test, pp. 9-14. , ACM Press; Pettichord, B., Success with test automation (2001) Quality Week, , May; Posey, B., (2002) Just Enough Software Test Automation, , Prentice Hall PTR, Upper Saddle River, NJ, USA","Budnik, C.J.; Software Engineering, 755 College Road, East Princeton, NJ-08540, United States; email: christof.budnik.ext@siemens.com",,,,"37th Jahrestagung der Gesellschaft fur Informatik e.V. (GI): Informatik Trifft Logistik, INFORMATIK 2007 37th Annual Conference of the German Informatics Society (GI): Computer Science Meets Logistics, INFORMATIK 2007","24 September 2007 through 27 September 2007","Bremen",95687,,9783885792048,,,"English","INFORMATIK - Inform. Trifft Logistik, Beitrage Jahrestag. Ges. Inform. e.V. (GI)",Conference Paper,"Final","",Scopus,2-s2.0-84874253200
"Yuan X., Cohen M., Memon A.M.","55469919200;8719004300;35599876500;","Covering array sampling of input event sequences for automated GUI testing",2007,"ASE'07 - 2007 ACM/IEEE International Conference on Automated Software Engineering",,,,"405","408",,49,"10.1145/1321631.1321695","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953963524&doi=10.1145%2f1321631.1321695&partnerID=40&md5=8ca0c2c832663d44dde70b50e63b7699","Dept. of Computer Science, University of Maryland, College Park, MD, United States; Dept. of Computer Science and Engineering, University of Nebraska - Lincoln, Lincoln, NE 68588-0115, United States; Dept. of Computer Science, Institute for Advanced Computer Studies, University of Maryland, College Park, MD, United States","Yuan, X., Dept. of Computer Science, University of Maryland, College Park, MD, United States; Cohen, M., Dept. of Computer Science and Engineering, University of Nebraska - Lincoln, Lincoln, NE 68588-0115, United States; Memon, A.M., Dept. of Computer Science, Institute for Advanced Computer Studies, University of Maryland, College Park, MD, United States","This paper describes a new automated technique to generate test cases for GUIs by using covering arrays (CAs). The key motivation is to generate long GUI event sequences that are systematically sampled at a particular coverage strength. CAs, to date, have not been effectively used in sampling event driven systems such as GUIs which maintain state. We leverage a ""stateless"" abstraction of GUIs that allows us to use CAs. Once the CAs have been generated, we reuse the abstractions to reinsert ordering relationships between GUI events, thereby creating executable test cases. A feasibility study on a well-studied GUI-based application shows that the new technique is able to detect a large number of previously undetected faults. Copyright 2007 ACM.","covering arrays; event driven software; GUI testing","Automated techniques; Covering arrays; Event sequence; Event-driven softwares; Event-driven system; Feasibility studies; GUI testing; Test case; Abstracting; Automation; Computer software; Graphical user interfaces",,,,,,,,"Cohen, D.M., Dalal, S.R., Fredman, M.L., Patton, G.C., The AETG system: An approach to testing based on combinatorial design (1997) IEEE Transactions on Software Engineering, 23 (7), pp. 437-444; Cohen, M.B., Colbourn, C.J., Gibbons, P.B., Mugridge, W.B., Constructing test suites for interaction testing (2003) Proceedings of the International Conference on Software Engineering, pp. 38-48. , May; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing Proceedings of the 10th Working Conference on Reverse Engineering, November 2003; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1), p. 4; Yilmaz, C., Cohen, M.B., Porter, A., Covering arrays for efficient fault characterization in complex configuration spaces (2006) IEEE Transactions on Software Engineering, 31 (1), pp. 20-34; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases (2007) ICSE'07, Proceedings of the 29th International Conference on Software Engineering, pp. 396-405. , Minneapolis, MN, USA, May 23-25","Yuan, X.; Dept. of Computer Science, , College Park, MD, United States; email: xyuan@cs.umd.edu",,"ACM SIGSOFT;ACM SIGART",,"22nd IEEE/ACM International Conference on Automated Software Engineering, ASE'07","5 November 2007 through 9 November 2007","Atlanta, GA",80761,,9781595938824,,,"English","ASE - ACM/IEEE Int. Conf. Autom. Softw. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77953963524
"Brooks P.A., Memon A.M.","26967469400;35599876500;","Automated GUI testing guided by usage profiles",2007,"ASE'07 - 2007 ACM/IEEE International Conference on Automated Software Engineering",,,,"333","342",,77,"10.1145/1321631.1321681","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77749231997&doi=10.1145%2f1321631.1321681&partnerID=40&md5=60c1ebf18c26d5038a995e2155963b98","Department of Computer Science, University of Maryland, College Park, MD, United States","Brooks, P.A., Department of Computer Science, University of Maryland, College Park, MD, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD, United States","Most software developed in recent years has a graphical userinterface (GUI). The only way for the end-user to interact with the software application is through the GUI. Hence, acceptance and system testing of the software requires GUI testing. This paper presents a new technique for testing of GUI applications. Information on the actual usage of the application, in the form of ""usage profiles,"" is used to ensure that a new version of the application will function correctly. Usage profiles, sequences of events that end-users execute on a GUI, are used to develop a probabilistic usage model of the application. An algorithm uses the model to generate test cases that represent events the user is most likely to execute. Reverse engineering methods are used to extract the underlying structure of the application. An empirical study on four open source GUI applications reveals that test suites generated from the probabilistic model are 0.2-22% of the size of test suites produced directly from usage profiles. Furthermore, the test suites generated from the model detect more faults per test case than those detected directly from the usage profiles, and detect faults not detected by the original profiles. Copyright 2007 ACM.","event-driven software; GUI testing; usage profiles","Empirical studies; End-users; Event-driven softwares; GUI applications; GUI testing; Open sources; Probabilistic models; Software applications; System testing; Test case; Usage models; Automation; Computer software; Reengineering; Reverse engineering; Testing; Graphical user interfaces",,,,,,,,"Berstel, J., Reghizzi, S.C., Roussel, G., Pietro, P.S., A scalable formal method for design and automatic checking of user interfaces (2005) ACM Trans. Softw. Eng. Methodol., 14 (2), pp. 124-167; Clarke, J.M., Automated test generation from a behavioral model Proc. of the Eleventh Int'l Software Quality Week, 1998, , May; Dalal, S.R., Jain, A., Karunanithi, N., Leaton, J.M., Lott, C.M., Patton, G.C., Horowitz, B.M., Model-based testing in practice (1999) Proc. of the 21st Int'l Conf on Software Engineering, pp. 285-294. , IEEE Computer Society Press; Dmitriev, M., Profiling Java applications using code hotswapping and dynamic call graph revelation (2004) Proc. of the 4th Int'l Workshop on Software and Performance, pp. 139-150. , ACM Press; Donovan, D., Dislis, C., Murphy, R., Unger, S., Kenneally, C., Young, J., Sheehan, L., Incorporating software reliability engineering into the test process for an extensive GUI-Based network management system (2001) Proc. of the 12th Int'l Symposium on Software Reliability Engineering, p. 44. , IEEE Computer Society; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) Proc. of the 25th Int'l Conf on Software Engineering, pp. 49-59. , IEEE Computer Society; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001) Proc. Second Int'l Conf. EXtreme Programming and Flexible Processes in Software Eng., pp. 114-117; (2004) Testing Resources for Extreme Programming, , http://junit.org/news/extension/gui/index.htm; Jurafsky, D., Martin, J.H., (2000) Speech and Language Processing, , Prentice-Hall; Marick, B., Bypassing the GUI (2002) Software Testing and Quality Engineering Magazine, pp. 41-47; Memon, A., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Phd, Dept. of Computer Science,Univ. of Pittsburgh, Jul; Memon, A.M., Employing usage profiles to test a new version of a gui component in its context of use (2006) Software Quality Control, 14 (4), pp. 359-377; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) ESEC/FSE-11: Proceedings of the 9th European Software Engineering Conf/11th ACM SIGSOFT Int'l Symposium on Foundations of Software Engineering, pp. 118-127. , New York, NY, USA, ACM Press; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Myers, B.A., User interface software tools (1995) ACM Trans. Comput.-Hum. Interact., 2 (1), pp. 64-103; Nagarajan, A., Memon, A.M., (2003) Refactoring Using Event-Based Profiling; Ozekici, S., Altinel, I.K., Angun, E., A general software testing model involving operational profiles (2001) Probability in the Engineering and Informational Sciences, 15 (4), pp. 519-533; Steven, J., Chandra, P., Fleck, B., Podgurski, A., JRapture: A capture/replay tool for observation-based testing (2000) Proc. of the 2000 ACM SIGSOFT Int'l Symposium on Software Testing and Analysis, pp. 158-167. , ACM Press; Walton, G.H., Poore, J.H., Generating transition probabilities to support model-based software testing (2000) Softw. Pract. Exper., 30 (10), pp. 1095-1106; Weyuker, E.J., Using operational distributions to judge testing progress (2003) Proc. of the 2003 ACM Symposium on Applied Computing, pp. 1118-1122. , ACM Press; White, L., AlMezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proc. 12th Int'l Symposium on Software Reliability Engineering, pp. 54-63; Whittaker, J.A., Thomason, M.G., A Markov chain model for statistical software testing (1994) IEEE Trans. Softw. Eng., 20 (10), pp. 812-824; Woit, D., Conditional-event usage testing (1998) CASCON '98: Proc. of the 1998 Conf of the Centre for Advanced Studies on Collaborative Research, p. 23. , IBM Press; Woit, D.M., Specifying operational profiles for modules (1993) ISSTA '93: Proc. of the 1993 ACM SIGSOFT Int'l Symposium on Software Testing and Analysis, pp. 2-10. , ACM Press; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Transactions on Software Engineering and Methodology, 16 (1), p. 4; Yuan, X., Memon, A.M., Using GUI run-time state as feedback to generate test cases ICSE'07, Proc. of the 29th Int'l Conf on Software Engineering, Minneapolis, MN, USA, May 23-25, 2007","Brooks, P. A.; Department of Computer Science, , College Park, MD, United States; email: penelope@cs.umd.edu",,"ACM SIGSOFT;ACM SIGART",,"22nd IEEE/ACM International Conference on Automated Software Engineering, ASE'07","5 November 2007 through 9 November 2007","Atlanta, GA",80761,,9781595938824,,,"English","ASE - ACM/IEEE Int. Conf. Autom. Softw. Eng.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77749231997
"Hayat M.U., Qadeer N.","24775832800;24776616100;","Intra component GUI test case generation technique",2007,"2007 International Conference on Information and Emerging Technologies, ICIET",,, 4381328,"153","156",,,"10.1109/ICIET.2007.4381328","https://www.scopus.com/inward/record.uri?eid=2-s2.0-51349168676&doi=10.1109%2fICIET.2007.4381328&partnerID=40&md5=c63e0a0e7ca3abedb5d0d44815312c55","Mohammad Ali Jinnah University, Islamabad, Pakistan; Federal Urdu University (FUUAST), Islamabad, Pakistan","Hayat, M.U., Mohammad Ali Jinnah University, Islamabad, Pakistan; Qadeer, N., Federal Urdu University (FUUAST), Islamabad, Pakistan","GUI is rapidly growing and has become the critical component for all software applications approximately. At present, GUI techniques for generating the test cases are difficult to understand and implement. GUI testing has become time consuming and hectic due to the fact that it contains lot of permutation of interactions. Since exhaustive testing is not possible, it is mandatory to optimize the testing process so that it can easily be scalable and increase the software reliability. The aim of this paper is to optimize the GUI test cases. We have proposed a technique for optimized test case generation with the help of interaction and termination events within one GUI component and present the evaluation of the technique with the help of a case study at the end of this paper.","GUI; GUI testing; Test case generation","Emerging technologies; GUI; GUI testing; Test case generation; Computer software selection and evaluation; Flow interactions; Optimization; Reliability; Semiconductor quantum dots; Software reliability; Software testing; Testing; Graphical user interfaces",,,,,,,,"Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage Criteria for GUI Testing (2001) Proceeding of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundation of Software Engineering (FSE-9), pp. 256-267. , Vienna University of Technology, Austria; A. M. Memon, M. L. Soffa, and M. E. Pollack, A Planning-based Approach to GUI Testing, In Proceeding of the 13th International Software Internet Quality Week, 27 (2), pages 144-155, 2000; Memon, A.M., Soffa, M.L., Pollack, M.E., Plan based Generation for GUI Testing (2000) Proceeding of the 5th International Conference on Artificial Intelligence Planning and Scheduling, pp. 226-235. , AAAI Press; Memon, A.M., Soffa, M.L., Pollack, M.E., Using a Goal-driven Approach to Generate Test Cases for GUIs (1999) Proceeding of 21st International Conference on Software Engineering, pp. 257-266. , ACM Press; Memon, A.M., Soffa, M.L., Pollack, M.E., Hierarchical GUI Test Case Generation Using Automated Planning (2001) IEEE transaction on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., A comprehensive framework for testing GUI, (2001), Ph.D Thesis Department of Computer Science,University of Pittsburg; Shehady, R.K., Siewiorek, D.P., A method to Automate User Interface Testing Using Variable Finite State Machine (1997) Proceeding of 27th International Symposium on Fault-Tolerant Computing (FTCS), pp. 80-88. , IEEE Press; White, L.J., Regression Testing of GUI Event Interactions (1996) Proceeding of the International Conference on Software Maintenance, ICSM, pp. 350-358. , In the, IEEE; White, L., Almezen, H., Generating Test Cases for Responsibilities Using Complete Interaction Sequence (2000) Proceeding of the 11 th International Symposium on Software Reliability Engineering, ISSRE, pp. 110-121. , In the, IEEE; Williams, A.W., Probert, R.L., A Practical Strategy for Testing Pair-wise Coverage of Network Interfaces (1996) Proceeding of the 7th International Symposium on USA. ISSRE, Department of Computer Science, Ottawa University, , In the, Ont; Belli, F., Finite State Testing and Analysis of Graphical User Interfaces (2001) Proceeding of 12th ISSRE, IEEE Comp, pp. 34-43. , In the, Press","Hayat, M. U.; Mohammad Ali Jinnah University, Islamabad, Pakistan; email: umar_h@hotmail.com",,,,"2007 International Conference on Information and Emerging Technologies, ICIET","6 July 2007 through 7 July 2007","Karachi",73152,,1424412463; 9781424412464,,,"English","Int. Conf. Inf. Emerg. Technol., ICIET",Conference Paper,"Final","",Scopus,2-s2.0-51349168676
"Abdel Salam M.A., Keshk A.E., Ismail N.A., Nassar H.M.","57197139409;6507971491;7102930199;7003638693;","Automated testing of java menu-based GUIs using XML visual editor",2007,"ICCES'07 - 2007 International Conference on Computer Engineering and Systems",,, 4447065,"313","318",,5,"10.1109/ICCES.2007.4447065","https://www.scopus.com/inward/record.uri?eid=2-s2.0-50249169890&doi=10.1109%2fICCES.2007.4447065&partnerID=40&md5=e13f30d34bf0dd3af3d07ec6ad9ca145","Faculty of Comp. and Inf., Dep. of Computer Science, Suez Canal University, Ismailia, Egypt; Faculty of Comp. and Inf., Dep. of Computer Science, Menoufia University, Shebin el Kom, Egypt","Abdel Salam, M.A., Faculty of Comp. and Inf., Dep. of Computer Science, Suez Canal University, Ismailia, Egypt; Keshk, A.E., Faculty of Comp. and Inf., Dep. of Computer Science, Menoufia University, Shebin el Kom, Egypt; Ismail, N.A., Faculty of Comp. and Inf., Dep. of Computer Science, Menoufia University, Shebin el Kom, Egypt; Nassar, H.M., Faculty of Comp. and Inf., Dep. of Computer Science, Suez Canal University, Ismailia, Egypt","A common method for GUI testing is the capture and replay (CR) technique. While the commonly used of CR technique can not be used until an Application Under Test (AUT) is completely developed. In this paper we propose a specification-driven approach to test menu-based java GUI programs as an alternative to the CR technique. We introduce a GUI-event test specification language based on XML from which an automated test engine is generated. The popularity of XML as a scripting language is ease of use and its standard format. Along with our visual test scripts editor have made writing a test script using our proposed method is easy task. Beside the ability to test AUT before being completely developed, we have implemented another visual module that can generate the test specification file for an already existing AUT by using only the executable file of the program (.class). The engine generates GUI events and captures its responses automatically to verify the results of the test cases, which are written to a test log file. This engine supports the menu-based GUIs that became very popular these days in programs interfaces.","Graphical user interfaces; GUI testing; Testing tools; XML","Computer programming languages; Computer software; Graphical user interfaces; Information management; Java programming language; Linguistics; Markup languages; Specifications; Standards; Technology; Testing; XML; Application under test; Automated testing; Computer engineering; Ease-of-use; Executable files; GUI testing; International conferences; Scripting languages; Standard format; Test cases; Test specification; Testing tools; Automatic test pattern generation",,,,,,,,"Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , February; Sun, Y., Jones, E.L., Specification-Driven Automated Testing (2004) Proceedings of the 42nd Annual Southeast Regional Conference, pp. 140-145; Chen, W.-K., Tsai, T.-H., Chao, H.-H., Integration of Specification-based and CR-based Approaches for GUI Testing (2005) Proceedings of the 19th International Conference on Advanced Information Networking and Applications (AINA'05), pp. 1-6; Newmarch, J., Testing Java Swing-based applications (1999) Proceeding of the 31st International Conference on Technology on Object-Oriented Language and Systems, pp. 156-165; Jemmy Module, , http://jemmy.4.org, at; XMLSPY Release Information, , www.altova.com/xmlspy_release_archive.html, at; Abbot project, , http://sourceforge.net/projects/abbot, at; jfcunit Documentation at http://jfcunit.sourceforge.net/; Ostrand, T., Aanodide, A., Foster, H., Goradia, T., A Visual Test Development Environment for GUI Systems (1998) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 82-92; Robinson, M., Vorobiev, P., (2004) Java Swing, , 2 nd Edition, Manning; Man, Y., McAllister, A., A Tool for Automated GUI Program Grading (2006) Proceedings of the 36th ASEE/IEEE Frontires in Education Conference, pp. S1F-S12,7. , October; Automated Syntax testing using JSynTest, , http://www.mmsindia.com/JSynTest-overview.pdf, at; Introduction to JTestCase, , http://jtestcase.sourceforge.net/introduction.html, at","Abdel Salam, M. A.; Faculty of Comp. and Inf., , Ismailia, Egypt; email: assem_d_2000@hotmail.com",,,,"2007 International Conference on Computer Engineering and Systems, ICCES'07","27 November 2007 through 29 November 2007","Cairo",73259,,1424413656; 9781424413652,,,"English","ICCES - Int. Conf. Comput. Eng. Syst.",Conference Paper,"Final","",Scopus,2-s2.0-50249169890
"Feng L., Zhuang S.","51963563500;18234374500;","Action-driven automation test framework for Graphical User Interface (GUI) software testing",2007,"AUTOTESTCON (Proceedings)",,, 4374197,"22","27",,6,"10.1109/AUTEST.2007.4374197","https://www.scopus.com/inward/record.uri?eid=2-s2.0-48049101576&doi=10.1109%2fAUTEST.2007.4374197&partnerID=40&md5=edea08e4d06b6e59df9bc1d5a8b27ddf","Sybase Software (China), Long Dong Ave. 3000#, Shanghai, 201203, China","Feng, L., Sybase Software (China), Long Dong Ave. 3000#, Shanghai, 201203, China; Zhuang, S., Sybase Software (China), Long Dong Ave. 3000#, Shanghai, 201203, China","In this paper we describe the design and implementation of an action-driven automation test framework especially for GUI software testing. The idea of action-driven automation test framework comes from the core concept of ""Quality Assurance (QA)"". Better quality can be ensured by increasing the coverage of test cases on the software but the process of creating large number of test cases has to be optimized. With this goal the framework was designed to primarily increase the efficiency and flexibility in composing test cases and simplify the process of learning the test cases. This paper describes the background, features, and implementation details of the framework.",,"GUI software; Integrated diagnostics; Quality assurance (QA); Test cases; Test framework; User interfaces; Automation; Computer software maintenance; Computer software selection and evaluation; Computer systems; Graphical user interfaces; Industrial engineering; Quality assurance; Software design; Software testing; Total quality management; Testing",,,,,,,,"Zambelich, K., (1998) Totally Data-Driven Automated Testing, , http://www.sqa-test.com/w_paper1.html; Nagle, C.J., (2002) Test Automation Frameworks, , http://safsdev.sourceforge.net/FRAIVIESDataDrivenTestAutomationFramework s.htm; Zeyu Gao, J., Jacob Tsao, H.-S., Wu, Y., (2006) Testing and Quality Assurance for Component-Based Software, , Artech House Publishers; Nagle, C., (2000) Data Driven Test Automation: For Rational Robot, pp. 1999-2000. , DDE Doc Index; Mosley, D., Posey, B., (2002) Just Enough Software Test Automation, , New Jersey: Prentice Hall PTR","Feng, L.; Sybase Software (China), Long Dong Ave. 3000#, Shanghai, 201203, China; email: Li.Feng@sybase.com",,"The Institute of Electrical and Electronics Engineers;Aerospace and Electronics Systems Society;Instrumentation and Measurement Society",,"42nd Annual IEEE AUTOTESTCON Conference 2007","17 September 2007 through 20 September 2007","Baltimore, MD",72826,,1424412390; 9781424412396,,,"English","AUTOTESTCON Proc",Conference Paper,"Final","",Scopus,2-s2.0-48049101576
"Conroy K.M., Grechanik M., Hellige M., Liongosari E.S., Xie Q.","21741892100;55904114500;24469974900;6507964679;35761589700;","Automatic test generation from GUI applications for testing web services",2007,"IEEE International Conference on Software Maintenance, ICSM",,, 4362647,"345","354",,13,"10.1109/ICSM.2007.4362647","https://www.scopus.com/inward/record.uri?eid=2-s2.0-47349095677&doi=10.1109%2fICSM.2007.4362647&partnerID=40&md5=621845a8e8d674701be56f3cdea0e1ec","Accenture Technology Labs., Chicago, IL 60601, United States","Conroy, K.M., Accenture Technology Labs., Chicago, IL 60601, United States; Grechanik, M., Accenture Technology Labs., Chicago, IL 60601, United States; Hellige, M., Accenture Technology Labs., Chicago, IL 60601, United States; Liongosari, E.S., Accenture Technology Labs., Chicago, IL 60601, United States; Xie, Q., Accenture Technology Labs., Chicago, IL 60601, United States","Graphical User Interface (GUI) APplications (GAPs) are ubiquitous and provide various services. Since many GAPs are not designed to exchange information (i.e., intemperate), companies replace legacy GAPs with web services, that are designed to intemperate over the Internet. However, it is laborious and inefficient to create unit test cases to test the web services. We propose a novel approach for generating tests for web services from legacy GAPs. This approach combines accessibility technologies for accessing and controlling GAPs in a uniform way with a visualization mechanism that enables nonprogrammers to generate unit test cases for web services by performing drag-and-drop operations on GUI elements of legacy GAPs. We built a tool based on our approach, and we used this tool to generate unit test cases from different GAPs. We believe that our approach is unique, and our evaluation suggests that our approach is effective and it can be used to generate test cases from nontrivial GAPs. © 2007 IEEE.",,"Automatic test generation; Drag-and-drop; GUI applications; International conferences; Test cases; Unit test cases; Computer software maintenance; Computer systems; Graphical user interfaces; Information services; Maintenance; Software testing; Testing; Web services; World Wide Web; Ubiquitous computing",,,,,,,,"Private conversations with Accenture project leaders working on application renewal projects; Screen_scraping, , http://en.wikipedia.org/wiki, Screen-scraping entry in Wikipedia; Section 508 of the Rehabilitation Act, , http://www.access-board.gov/508.htm; Dedene, G., Vreese, J.-P.D., Realities of off-shore reengineering (1995) IEEE Software, 12 (1), pp. 35-45; Dillon, L.K., Yu, Q., Oracles for checking temporal properties of concurrent systems (1994) Proceedings of the ACM SIGSOFT '94, pp. 140-153. , Dec; Ferris, C., Farrell, J.A., What are web services? (2003) Commun. ACM, 46 (6), p. 31; Foster, H., Uchitel, S., Magee, J., Kramer, J., Model-based verification of web service compositions (2003) ASE '03: Proceedings of the Eighteenth IEEE ASE, pp. 152-163; Fu, C., Ryder, B.G., Milanova, A., Wonnacott, D., Testing of java web services for robustness (2004) ISSTA '04: Proceedings of the 2004 ACM SIGSOFTISSTA, pp. 23-34. , New York, NY, USA, ACM Press; Groce, A., Holzmann, G.J., Joshi, R., Randomized differential testing as a prelude to formal verification (2007) ICSE, pp. 621-631; Martin, E., Basu, S., Xie, T., Automated robustness testing of web services (2006) Proceedings of the 4th SOAWS, , October; McKeeman, W.M., Differential testing for software (1998) Digital Technical Journal, 10 (1), pp. 100-107; Miller, R.C., End-user programming for web users (2003) End User Development Workshop, Conference on Human Factors in Computer Systems; Myers, B.A., User interface software technology (1996) ACM Comput. Surv, 28 (1), pp. 189-191; Narayanan, S., McIlraith, S.A., Simulation, verification and automated composition of web services (2002) WWW '02: Proceedings of the 11th international conference on World Wide Web, pp. 77-88. , New York, NY, USA, ACM Press; Peters, D., Parnas, D.L., Generating a test oracle from program documentation: Work in progress (1994) ISSTA '94: Proceedings of the 1994 ACM SIGSOFT international symposium on Software testing and analysis, pp. 58-65. , New York, NY, USA, ACM Press; Richardson, D.J., Taos: Testing with analysis and oracle support (1994) ISSTA '94: Proceedings of the 1994 ACM SIGSOFT ISSTA, pp. 138-153. , New York, NY, USA, ACM Press; Richardson, D.J., Leif-Aha, S., O'Malley, T.O., Specification-based Test Oracles for Reactive Systems (1992) Proceedings of the 14th ICSE, pp. 105-118. , May; Sneed, H.M., Huang, S., Wsdltest - a tool for testing web services (2006) WSE '06: Proceedings of the Eighth IEEE International Workshop on Web Site Evolution, pp. 14-21; Su, J., Ritter, P.R., Experience in testing the motif interface (1991) IEEE Software, 8 (2), pp. 26-33; Vogel, P.A., An integrated general purpose automated test environment (1993) ISSTA, pp. 61-69","Conroy, K. M.; Accenture Technology Labs., Chicago, IL 60601, United States; email: kevin.m.conroy@accenture.com",,,,"23rd International Conference on Software Maintenance, ICSM","2 October 2007 through 5 October 2007","Paris",72623,,1424412560; 9781424412563,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-47349095677
"Paradkar A.M., Sinha A., Williams C., Johnson R.D., Outterson S., Shriver C., Liang C.","35615865300;12779493800;14421824100;57213392606;24463970300;24463850200;24463132800;","Automated functional conformance test generation for semantic web services",2007,"Proceedings - 2007 IEEE International Conference on Web Services, ICWS 2007",,, 4279589,"110","117",,28,"10.1109/ICWS.2007.48","https://www.scopus.com/inward/record.uri?eid=2-s2.0-46849099443&doi=10.1109%2fICWS.2007.48&partnerID=40&md5=6fb069a093a43b3f092f2d55d721db93","I.B.M. Thomas J. Watson Research Center; EIS IBM Software Group; IBM Software Group Toronto","Paradkar, A.M., I.B.M. Thomas J. Watson Research Center; Sinha, A., I.B.M. Thomas J. Watson Research Center; Williams, C., I.B.M. Thomas J. Watson Research Center; Johnson, R.D., EIS IBM Software Group; Outterson, S., EIS IBM Software Group; Shriver, C., EIS IBM Software Group; Liang, C., IBM Software Group Toronto","We present an automated approach to generate functional conformance tests for semantic web services. The semantics of the web services are defined using the Inputs, Outputs, Preconditions, Effects (IOPEs) paradigm. For each web service, our approach produces testing goals which are refinements of the web service preconditions using a set of fault models. A novel planner component accepts these testing goals, along with an initial state of the world and the web service definitions to generate a sequence of web service invocations as a test case. Another salient feature of our approach is generation of verification sequences to ensure that the changes to the world produced by an effect are implemented correctly. Lastly, a given application incorporating a set of semantic web services may be accessible through several interfaces such as 1) Direct Invocation of the web services, or 2)a Graphical User Interface (GUI). Our technique allows generation of executable test cases which can be applied through both interfaces. We describe the techniques used in our test generation approach. We also present results which compare two approaches: an existing manual approach without the formal IOPEs information and the IOPEs-based approach reported in this paper. These results indicate that the approach described here leads to substantial savings in effort with comparable results for requirements coverage and fault detection effectiveness. © 2007 IEEE.","Model-based test generation; Semantics web services test generation; Services fault models","Applied (CO); Conformance testing; Fault modeling; Fault-detection effectiveness; initial states; international conferences; Salient features; Semantic Web services (SWS); Techniques used; Test cases; Test generations; Computer systems; Fault detection; Formal logic; Graphical user interfaces; Information services; Information theory; Photoacoustic effect; Semantic Web; Semantics; Testing; World Wide Web; Web services",,,,,,,,"URL: http, , www.ws-i.org; Available at: URL: http://lsdis.cs.uga.edu/projects/meteor-s/wsdl- s/examples/purchaseOrder.wsdl; Bai, X., Dong, W., Tsai, W.-T., Chen, Y., Wsdl-based automatic test case generation for web services testing (2005) Proc. IEEE International Workshop on Service-Oriented System Engineering '05, pp. 215-220; Bertolino, A., Frantzen, L., Polini, A., Tretmans, J., Audition of web services for testing conformance to open specified protocols (2006) LNCS, 3938. , R. Reussner, J. Stafford, and C. Szyperski, editors, Architecting Systems with Trustworthy Components, number in, Springer-Verlag; Blum, A.L., Furst, M.L., Fast planning through planning graph analysis (1997) Artificial Intelligence, 90 (1-2), pp. 279-298; T. O. S. Coalition. Owl-s: Semantic markup for web services, 2003. Available at URL: http://www.daml.org/services/; Heckel, R., Mariani, L., Automatic conformance testing of web services (2005) Proc. Fundamental Approaches to Software Engineering (EASE 05), pp. 34-48; Rational function tester product overview, , www.ibm.com/software/awdtools/tester/functional/index.html, Available at URL; Klinger, T., Yilmaz, C., Paradkar, A., graphplancd: Object creation and destruction in a graphplan planner (2007) In AAAI, , Submitted; Tsai, W.-T., Chen, Y., Paul, R., Huang, H., Zhou, X., Wei, X., Adaptive testing, oracle generation, and test case ranking for web services (2005) IEEE COMPSAC, pp. 101-106; Zhu, H., A web services framework for testing web services (2005) IEEE COMPSAC'2005, pp. 34-39","Paradkar, A. M.; I.B.M. Thomas J. Watson Research CenterUnited States; email: paradkar@us.ibm.com",,"IEEE Comput. Soc. Tech. Comm. Services Computing",,"2007 IEEE International Conference on Web Services, ICWS 2007","9 July 2007 through 13 July 2007","Salt Lake City, UT",72551,,0769529240; 9780769529240,,,"English","Proc. - IEEE Int. Conf. Web Serv., ICWS",Conference Paper,"Final","",Scopus,2-s2.0-46849099443
"Koopman P., Achten P., Plasmeijer R.","15755564500;22333594600;8393599800;","Model-based testing of thin-client web applications and navigation input",2007,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","4902 LNCS",,,"299","315",,4,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-38549090280&partnerID=40&md5=fb738370e790e81ba5529ab351e4ffd8","Software Technology, Nijmegen Institute for Computing and Information Sciences, Radboud University Nijmegen, Netherlands","Koopman, P., Software Technology, Nijmegen Institute for Computing and Information Sciences, Radboud University Nijmegen, Netherlands; Achten, P., Software Technology, Nijmegen Institute for Computing and Information Sciences, Radboud University Nijmegen, Netherlands; Plasmeijer, R., Software Technology, Nijmegen Institute for Computing and Information Sciences, Radboud University Nijmegen, Netherlands","More and more software systems use a browser as the universal graphical user interface. As a consequence these applications inherit browser navigation as part of their interface. Typical browser actions are the use of the back- and forward-button and the cloning of windows. Browser navigation is difficult to deal with because it has effects that are noticed indirectly by the application logic. It is easy to forget or misunderstand the consequences of this aspect in the construction of a program. Hence, testing the correct behavior of the application is very desirable, preferably with an automatic model-based test tool. For this kind of model-based testing a specification including browser navigation is needed. We introduce a transformation to lift the specification of a program without browser navigation to one with browser navigation. This reduces the specification effort considerably. The distinguishing feature of our method is that it allows the test engineer to specify only the exceptions to the general rule. We show how this lifting of specifications is used for some examples and how errors are found in real web applications. The described system builds on the model-based test tool G∀ST. © Springer-Verlag Berlin Heidelberg 2008.",,"Client server computer systems; Computer aided software engineering; Graphical user interfaces; Specification languages; Web browsers; Model-based test tools; Model-based testing; Software systems; Specification effort; Software testing",,,,,,,,"Andrews, A., Offutt, J., Alexander, R., Testing Web Applications by Modelling with FSMs (2005) Software Systems and Modeling, 4 (3). , August; Burke, E., Coyner, B., (2003) Java Extreme Programming Cookbook, , O'Reilly; Frantzen, L., Tretmans, J., Vries, R.D., Towards model-based testing of web services (2006) WS-MaTe2006. International Workshop on Web Services - Modeling and Testing, pp. 67-82. , Polini, A, ed, Palermo, Italy, pp, June 9th; Graunke, P., Findler, R., Krishnamurthi, S., Felleisen, M., Modeling Web Interactions (2003) LNCS, 2618, pp. 238-252. , Degano, P, ed, ESOP 2003 and ETAPS 2003, Springer, Heidelberg; Koopman, P., Plasmeijer, R., Testing reactive systems with GAST (2004) Trends in Functional Programming, 4, pp. 111-129. , Gilmore, S, ed; Koopman, P., Plasmeijer, R., Achten, P., Model-based testing of thin-client web applications (2006) LNCS, 4262. , Havelund, K, Núñez, M, Roşu, G, Wolff, B, eds, FATES 2006 and RV 2006, Springer, Heidelberg; Plasmeijer, R., Achten, P., iData For The World Wide Web - Programming Interconnected Web Forms (2006) LNCS, 3945. , Hagiya, M, Wadler, P, eds, FLOPS 2006, Springer, Heidelberg; http://www.cs.ru.nl/~clean, Plasmeijer, R, van Eekelen, M, Concurrent CLEAN Language Report version 2.0, December 2001; Tretmans, J., Testing Concurrent Systems: A Formal Approach (1999) LNCS, 1664, pp. 46-65. , Baeten, J.C.M, Mauw, S, eds, CONCUR 1999, Springer, Heidelberg","Koopman, P.; Software Technology, Netherlands; email: pieter@cs.ru.nl",,,,"10th International Symposium on Practical Aspects of Declarative Languages, PADL 2008","7 January 2008 through 8 January 2008","San Francisco, CA",71287,03029743,3540774416; 9783540774419,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-38549090280
"Xun Y., Memon A.M.","21744141300;35599876500;","Using GUI run-time state as feedback to generate test cases",2007,"Proceedings - International Conference on Software Engineering",,, 4222601,"396","405",,90,"10.1109/ICSE.2007.94","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548745202&doi=10.1109%2fICSE.2007.94&partnerID=40&md5=407e2291ea2b232f3c4fa2dd9d87cb5e","Department of Computer Science, University of Maryland, College Park, MD, United States","Xun, Y., Department of Computer Science, University of Maryland, College Park, MD, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD, United States","This paper presents a new automated model-driven technique to generate test cases by using feedback from the execution of a ""seed test suite"" on an application under test (AUT). The test cases in the seed suite are designed to be generated automatically and executed very quickly. During their execution, feedback obtained from the AUT's run-time state is used to generate new, ""improved"" test cases. The new test cases subsequently become part of the seed suite. This ""anytime technique"" continues iteratively, generating and executing additional test cases until resources are exhausted or testing goals have been met. The feedback-based technique is demonstrated for automated testing of graphical user interfaces (GUIs). An existing abstract model of the GUI is used to automatically generate the seed test suite. It is executed; during its execution, state changes in the GUI pinpoint important relationships between GUI events, which evolve the model and help to generate new test cases. Together with a reverseengineering algorithm used to obtain the initial model and seed suite, the feedback-based technique yields a fully automatic, end-to-end GUI testing process. A feasibility study on four large fielded open-source software (OSS) applications demonstrates that this process is able to significantly improve existing techniques and help identify/report serious problems in the OSS. In response, these problems have been fixed by the developers of the OSS in subsequent versions. © 2007 IEEE.",,"Feedback; Iterative methods; Mathematical models; Problem solving; Software design; Application under test (AUT); Open source software (OSS); Testing processes; Graphical user interfaces",,,,,,,,"Belli, F., Finite-state testing and analysis of GUIs (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, pp. 34-43; Boyapati, C., Khurshid, S., Marinov, D., Korat: Automated testing based on java predicates (2002) ISSTA '02: Proceedings of the 2002 ACM SIGSOFT international symposium on Software testing and analysis, pp. 123-133; d'Amorim, M., Pacheco, C., Xie, T., Marinov, D., Ernst, M.D., An empirical comparison of automated generation and classification techniques for object-oriented unit testing (2006) Proceedings of the 21st IEEE/ACM International Conference on Automated Software Engineering; Dustin, E., Rashka, J., Paul, J., (1999) Automated software testing: Introduction, management, and performance; Ferguson, R., Korel, B., The chaining approach for software test data generation (1996) ACM Trans. Softw. Eng. Methodol, 5 (1), pp. 63-86; Gallagher, M.J., Narasimhan, V.L., Adtest: A test data generation suite for Ada software systems (1997) IEEE Trans. Software Eng, 23 (8), pp. 477-484; Gupta, N., Mathur, A.P., Soffa, M.L., Automated test data generation using an iterative relaxation method (1998) SIGSOFTF SE, pp. 231-244; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) SIGPLAN Not, 39 (12), pp. 92-106; Korel, B., Automated software test data generation (1990) IEEE Trans. Software Eng, 16 (8), pp. 870-879; Memon, A.M., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution, 17 (1), pp. 27-64. , Jan; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng, 31 (10), pp. 884-896; Michael, C.C., McGraw, G., Schatz, M., Generating software test data by evolution (2001) IEEE Trans. Software Eng, 27 (12), pp. 1085-1110; Miller, W., Spooner, D.L., Automatic generation of floating-point test data (1976) IEEE Trans. Software Eng, 2 (3), pp. 223-226; Rountev, A., Kagan, S., Gibas, M., Evaluating the imprecision of static analysis (2004) Proceedings of the ACM-SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering, pp. 14-16; Xie, Q., Memon, A.M., Automated model-based testing of community-driven open source GUI applications (2006) Proceedings of the 22nd IEEE International Conference on Software Maintenance; Xie, T., Notkin, D., Tool-assisted unit-test generation and selection based on operational abstractions (2006) Autom. Softw. Eng, 13 (3), pp. 345-371; Yilmaz, C., Cohen, M.B., Porter, A., Covering arrays for efficient fault characterization in complex configuration spaces (2004) Proceedings of the 2004 international symposium on Software testing and analysis, pp. 45-54","Xun, Y.; Department of Computer Science, , College Park, MD, United States; email: xyuan@cs.umd.edu",,"IEEE Computer Society Technical Council on Software Engineering;ACM Special Interest Group on Software Engineering, SIGSOFT",,"29th International Conference on Software Engineering, ICSE 2007","20 May 2007 through 26 May 2007","Minneapolis, MN",70208,02705257,0769528287; 9780769528281,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-34548745202
"Memon A.M.","35599876500;","An event-flow model of GUI-based applications for testing",2007,"Software Testing Verification and Reliability","17","3",,"137","157",,193,"10.1002/stvr.364","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548415509&doi=10.1002%2fstvr.364&partnerID=40&md5=fdc918b74a125c526a0fc306eb40e65d","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Graphical user interfaces (GUIs) are by far the most popular means used to interact with today's software. The functional correctness of a GUI is required to ensure the safety, robustness and usability of an entire software system. GUI testing techniques used in practice are resource intensive; model-based automated techniques are rarely employed. A key reason for the reluctance in the adoption of model-based solutions proposed by researchers is their limited applicability; moreover, the models are expensive to create. Over the past few years, the present author has been developing different models for various aspects of GUI testing. This paper consolidates all of the models into one scalable event-flow model and outlines algorithms to semi-automatically reverse-engineer the model from an implementation. Earlier work on model-based test-case generation, test-oracle creation, coverage evaluation, and regression testing is recast in terms of this model by defining event-space exploration strategies (ESESs) and creating an end-to-end GUI testing process. Three such ESESs are described: for checking the event-flow model, test-case generation, and testoracle creation. Two demonstrational scenarios show the application of the model and the three ESESs for experimentation and application in GUI testing. Copyright © 2007 John Wiley & Sons, Ltd.","Event-driven software; Event-flow graph; Event-flow model; Graphical user interfaces; Integration tree; Model checking; Test oracles; Test-case generation","Algorithms; Computer simulation; Graphic methods; Graphical user interfaces; Model checking; Software reliability; Event-driven software; Event-flow graph; Event-flow model; Event-space exploration strategy; Software testing",,,,,,,,"Mahajan, R., Shneiderman, B., Visual and textual consistency checking tools for graphical user interfaces (1996), Technical Report CS-TR-3639, University of Maryland, College Park, MD, May; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Myers BA, Olsen DR Jr. User interface tools. Proceedings of the ACM CHI'94 Conference on Human Factors in Computing Systems, 1994, 2 of Tutorials. ACM Press: New York, 1994; 421-422; Myers, B.A., Olsen Jr, D.R., Bonar, J.G., User interface tools (1993) Proceedings of ACM INTERCHI'93 Conference on Human Factors in Computing Systems - Adjunct Proceedings, p. 239. , Tutorials. ACM Press: New York; Myers, B.A., (1993) State of the Art in User Interface Software Tools, 4, pp. 110-150. , Ablex Publishing: Westport, CT; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91; Myers, B.A., Hollan, J.D., Cruz, I.F., Strategic directions in human-computer interaction (1996) ACM Computing Surveys, 28 (4), pp. 794-809; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121. , 8-11 October, IEEE Computer Society Press: Piscataway, NJ; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interaction (2001) Proceedings of the International Symposium on Software Reliability Engineering, pp. 54-63. , 8-11 November, IEEE Computer Society Press: Piscataway, NJ; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , May, ACM Press: New York; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test-case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Memon, A.M., Pollack, M.F., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , 8-10 November, ACM Press: New York; White, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, pp. 350-358. , 4-8 November, IEEE Computer Society Press: Piscataway, NJ; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), pp. 118-127. , September, ACM Press: New York; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , September, ACM Press: New York; Allen, F.E., Control flow analysis (1970) Proceedings of a Symposium on Compiler Optimization, pp. 1-19. , ACM Press: New York; Rosen, B.K., Data flow analysis for procedural languages (1979) Journal of the ACM, 26 (2), pp. 322-344; Clarke, J.M., Automated test generation from a behavioural model (1998) Proceedings of Pacific Northwest Software Quality Conference, , May, PNSQC: Portland, OR; Chow, T.S., Testing software design modelled by finite-state machines (1978) IEEE Transactions on Software Engineering, 4 (3), pp. 178-187; Esmelioglu, S., Apfelbaum, L., Automated test generation, execution, and reporting (1997) Proceedings of Pacific Northwest Software Quality Conference, , October, IEEE Press: Piscataway, NJ; Bernhard, P.J., A reduced test suite for protocol conformance testing (1994) ACM Transactions on Software Engineering and Methodology, 3 (3), pp. 201-220; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , June, IEEE Computer Society Press: Piscataway, NJ; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , New York, 13-18 April, ACM Press: New York; Fogel, L.J., Owens, A.J., Walsh, M.J., Artificial intelligence through a simulation of evolution (1965) Biophysics and Cybernetic Systems: Proceedings of the 2nd Cybernetic Sciences Symposium, pp. 131-155. , Maxfield M, Callahan A, Fogel IJ eds, Spartan Books: Washington, DC; Fogel, L.J., Owens, A.J., Walsh, M.J., (1966) Artificial Intelligence Through Simulated Evolution, , Wiley: New York; White, L., Almezen, H., Sastry, S., Firewall regression testing of GUI sequences and their interactions (2003) Proceedings of the International Conference on Software Maintenance, pp. 398-409. , 22-26 September, IEEE Computer Society Press: Piscataway, NJ; Memon, A.M., (2003) Advances in GUI Testing (Advances in Computers, 57, pp. 149-201. , Zelkowitz MV ed, Academic Press: New York; Memon, A.M., Xie, Q., Empirical evaluation of the fault-detection effectiveness of smoke regression test cases for GUI-based software (2004) Proceedings of the Intemational Conference on Software Maintenance 2004 (ICSM'04), pp. 8-17. , September, IEEE Computer Society Press: Piscataway, NJ; Nagarajan, A., Memon, A.M., Refactoring using event-based profiling (2003) Proceedings of the 1st International Workshop on Refactoring: Achievements, Challenges, Effects (REFACE), , November, IEEE Computer Society Press: Piscataway, NJ; Pednault, E.P.D., Adl: Exploring the middle ground between strips and the situation calculus (1989) Proceedings of the 1st International Conference on Principles of Knowledge Representation and Reasoning, pp. 324-332. , San Francisco, CA, Morgan Kaufmann: San Francisco, CA; Weld, D.S., An introduction to least commitment planning (1994) AI Magazine, 15 (4), pp. 27-61; Weld, D.S., Recent advances in AI planning (1999) AI Magazine, 20 (1), pp. 55-64; Memon AM, Banerjee I, Nagarajan A. GUI ripping: Reverse engineering of graphical user interfaces for testing. Proceedings of the 10th Working Conference on Reverse Engineering, November 2003. IEEE Computer Society Press: Piscataway, NJ, 2003; 260-269; Dwyer, M.B., Carr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) Proceedings of the European Software Engineering Conference (ESEC) and ACM SIGSOFT International Symposium on the Foundations of Software Engineering, pp. 244-261. , ACM Press: New York; Memon, A.M., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) Proceedings of the International Conference on Automated Software Engineering 2004 (ASE'04), pp. 186-195. , September, IEEE Computer Society Press: Piscataway, NJ; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications (2007) ACM Transactions on Software Testing and Methodology, , to appear; Offutt, A.J., Hayes, J.H., A semantic model of program faults (1996) Proceedings of the International Symposium on Software Testing and Analysis, pp. 195-200. , ACM Press: New York; Harrold, M.J., Offutt, A.J., Tewary, K., An approach to fault modelling and fault seeding using the program dependence graph (1997) Journal of Systems and Software, 36 (3), pp. 273-296","Memon, A.M.; Department of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,,,,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Article,"Final","All Open Access, Green",Scopus,2-s2.0-34548415509
"Paiva A.C.R., Faria J.C.P., Vidal R.F.A.M.","7102683763;35219959000;19640884400;","Towards the Integration of Visual and Formal Models for GUI Testing",2007,"Electronic Notes in Theoretical Computer Science","190","2 SPEC. ISS.",,"99","111",,17,"10.1016/j.entcs.2007.08.010","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548129521&doi=10.1016%2fj.entcs.2007.08.010&partnerID=40&md5=514cf3bb24305dada73c466be5094105","Department of Electrical, Computer Engineering Engineering Faculty, Porto University Porto, Portugal; Department of Electrical, Computer Engineering Engineering Faculty, Porto University Porto, Portugal","Paiva, A.C.R., Department of Electrical, Computer Engineering Engineering Faculty, Porto University Porto, Portugal; Faria, J.C.P., Department of Electrical, Computer Engineering Engineering Faculty, Porto University Porto, Portugal; Vidal, R.F.A.M., Department of Electrical, Computer Engineering Engineering Faculty, Porto University Porto, Portugal","This paper presents an approach to diminish the effort required in GUI modelling and test coverage analysis within a model-based GUI testing process. A familiar visual notation a subset of UML with minor extensions is used to model the structure, behaviour and usage of GUIs at a high level of abstraction and to describe test adequacy criteria. The GUI visual model is translated automatically to a model-based formal specification language (e.g., Spec{music sharp sign}), hiding formal details from the testers. Then, additional behaviour may be added to the formal model to be used as a test oracle. The adequacy of the test cases generated automatically from the formal model is accessed based on the structural coverage of the UML behavioural diagrams. © 2007 Elsevier B.V. All rights reserved.","GUI modelling; GUI testing; model-based testing UML; Spec{music sharp sign}","Formal languages; Mathematical models; Model checking; Software testing; Unified Modeling Language; Formal models; GUI visual models; Model based testing; Graphical user interfaces",,,,,"Fundação para a Ciência e a Tecnologia, FCT

European Regional Development Fund, FEDER: POSC/EIA/56646/2004","1Work partially supported by FCT (Portugal) and FEDER POSC/EIA/56646/2004. 2 Email: apaiva@fe.up.pt 3 Email: jpf@fe.up.pt 4 Email: rmvidal@fe.up.pt",,"Group, O.M., Unified Modeling Language: Superstructure, version 2.0, formal/05-07-04, , http://www.uml.org, conferred in Dec 2006; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Pittsburgh; Nyman, N., Using Monkey Test Tools (2000) STQE Software Testing and Quality Engineering Magazine; ","Paiva, A.C.R.; Department of Electrical, Portugal; email: apaiva@fe.up.pt",,,"Elsevier",,,,,15710661,,,,"English","Electron. Notes Theor. Comput. Sci.",Article,"Final","All Open Access, Hybrid Gold",Scopus,2-s2.0-34548129521
"Ye M., Feng B., Zhu L.","57201574732;7202087458;35372717700;","Automated oracle based on multi-weighted neural networks for GUI testing",2007,"Information Technology Journal","6","3",,"370","375",,5,"10.3923/itj.2007.370.375","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34248166703&doi=10.3923%2fitj.2007.370.375&partnerID=40&md5=b259d5175cb5e3eeea307612dd11ba0f","School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an 710049, China; School of Software, Xi'an Jiaotong University, Xi'an 710049, China","Ye, M., School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an 710049, China; Feng, B., School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an 710049, China; Zhu, L., School of Software, Xi'an Jiaotong University, Xi'an 710049, China","Graphical User Interfaces (GUI) software has characteristics different from traditional software. The oracle for GUI software testing must validate the correctness of the GUI. An automated oracle based on multi-weighted Neural Networks (NN) is proposed in this paper to validate the GUI from users' viewpoint. In this approach the multi-weighted NN is used to learn the topological information in the feature space for the expected images of the graphical interface. The topological information is then used to verify the correctness of the GUI. By this method, trivial difference in the graphical interfaces can be ignored and GUI be automatically tested in the manner of human being. Experimental results show the method is of potential application in automated GUI testing. © 2007 Asian Network for Scientific Information.","Graphical user interfaces (GUI); Neural networks; Oracle; Software testing","Error correction; Graphical user interfaces; Software testing; Topology; Automated oracle; Feature space; Neural networks",,,,,,,,"Andersson, J., Bache, G., The Video Store Revisited Yet Again: Adventures in GUI Acceptance Testing (2004) LNCS, 3092, pp. 1-10. , Springer-Verlag Berlin Heidelberg, pp; Bousquet, L.D., Ouabdesselam, F., Richier, J.L., Zuanon, N., Lutess: A specification-driven testing environment for synchronous software (1999) Proceedings of the 21th International Conference on Software Engineering; Chen, J., Subramaniam, S., Specification-based testing for GUI-based applications (2002) Software Quality J, 10, pp. 205-224; Chen, W.K., Tsai, T.H., Chao, H.H., Integration of specification-based and CR-based approaches for GUI testing (2005) Proceedings of the 19th International Conference on Advanced Information Networking and Applications; Dillon, L.K., Ramakrishna, Y.S., Generating oracles from your favorite temporal logic specifications (1996) ACM SIGSOFT Software Engineering Notes, 21, pp. 106-117; Memon, A., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing (2003) Proceedings of the 18th IEEE International Conf. on Automated Software Engineering; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17, pp. 27-64; Ostrand, T., Anodide, A., Foste, H., A visual test development environment for GUI systems (1998) ACM SIGSOFT Software Eng. Notes, 23, pp. 82-92; Peters, D., Parnas, D.L., Generating a test oracle from program documentation (1994) Proceedings of the International Symposium on Software Testing and Analysis; Vapnik, V.N., (2000) The Nature of Statistical Learning Theory, , 2nd Edn. Springer-Verlag. New York; Wang, S.J., Bionic (topological) pattern recognition-a new model of pattern recognition theory and its applications (2002) Acta Electronica Sinica, 30, pp. 1417-1420; Wang, S.J., Xu, J., Wang, X.B., Qin, H., Multi-camera human-face personal identification system based on the biomimetic pattern recognition (2003) Acta Electronica Sinica, 31, pp. 1-3; Wang, S.J., Lai, J.L., Geometrical learning, descriptive geometry and biomimetic pattern recognition (2005) Neurocomputing, 67, pp. 9-28; White, L., Almezen, H., Sastry, S., Firewall regression testing of GUI sequences and their interactions (2003) Proceedings of the International Conference on Software Maintenance","Ye, M.; School of Electronic and Information Engineering, , Xi'an 710049, China",,,"Asian Network for Scientific Information",,,,,18125638,,,,"English","Inf. Technol. J.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-34248166703
"Xie Q., Memon A.M.","35761589700;35599876500;","Designing and comparing automated test oracles for GUI-based software applications",2007,"ACM Transactions on Software Engineering and Methodology","16","1", 4,"","",,113,"10.1145/1189748.1189752","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33847680195&doi=10.1145%2f1189748.1189752&partnerID=40&md5=32508708ec5d7d3444ee2b80b39d7559","University of Maryland, United States; Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Xie, Q., University of Maryland, United States, Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Memon, A.M., University of Maryland, United States, Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Test designers widely believe that the overall effectiveness and cost of software testing depends largely on the type and number of test cases executed on the software. This article shows that the test oracle, a mechanism that determines whether a software is executed correctly for a test case, also significantly impacts the fault detection effectiveness and cost of a test case. Graphical user interfaces (GUIs), which have become ubiquitous for interacting with today's software, have created new challenges for test oracle development. Test designers manually assert the expected values of specific properties of certain GUI widgets in each test case; during test execution, these assertions are used as test oracles to determine whether the GUI executed correctly. Since a test case for a GUI is a sequence of events, a test designer must decide: (1) what to assert; and (2) how frequently to check an assertion, for example, after each event in the test case or after the entire test case has completed execution. Variations of these two factors significantly impact the fault-detection ability and cost of a GUI test case. A technique to declaratively specify different types of automated GUI test oracles is described. Six instances of test oracles are developed and compared in an experiment on four software systems. The results show that test oracles do affect the fault detection ability of test cases in different and interesting ways: (1) Test cases significantly lose their fault detection ability when using weak test oracles; (2) in many cases, invoking a thorough oracle at the end of test case execution yields the best cost-benefit ratio; (3) certain test cases detect faults only if the oracle is invoked during a small window of opportunity during test execution; and (4) using thorough and frequently-executing test oracles can compensate for not having long test cases.","Graphical user interfaces; GUI state; GUI testing; Test oracles; User interfaces; Widgets","Test oracles; Widgets; Automata theory; Computer software; Database systems; Software engineering; Software testing; Graphical user interfaces",,,,,,,,"ANTOY, S., HAMLET, D., Automatically checking an implementation against its formal specification (2000) IEEE Trans. Softw. Eng, 26 (1), pp. 55-69; BARESI, L., YOUNG, M., Test oracles (2001), http://www.cs.uoregon.edu/michal/ pubs/oracles.html, Tech. Rep. CIS-TR-01-02, University of Oregon, Department of Computer and Information Science, Eugene, Oregon. August; BARRINGER, H., GOLDBERG, A., HAVELUND, K., SEN, K., Rule-Based runtime verification (2004) Proceedings of the 5th International Conference on Verification, Model Checking and Abstract Interpretation (VMCAI), pp. 44-57. , Venice, Springer Verlag; BEHNOT, G., GAUDEL, M.C., MAERE, B., Software testing based on formal specifications: A theory and a tool (1991) Softw. Eng. J, 6 (B), pp. 387-405; BLACKBURN, M., BUSSER, R., NAUMAN, A., Interface-Driven model-based test generation of Java test drivers (2002) Proceedings of the 16th International Software / Internet Quality Week Conference, , Software Research, San Francisco, CA; BURDY, L., CHEON, Y., COK, D., ERNST, M., KINIRY, J., LEAVENS, G.T., LEINO, K.R.M., POLL, E., An overview of JML tools and applications (2003) Proceedings of the 8th International Workshop on Formal Methods for Industrial Critical Systems (FMICS), pp. 73-89. , Elsevier Science; CHEON, Y., LEAVENS, G.T., A simple and practical approach to unit testing: The JML and JUnit way (2002) ECOOP: Proceedings of the 16th European Conference on Object-Oriented Programming, pp. 231-255. , London, Springer Verlag; DILLON, L. K. AND RAMAKHISHNA, Y S. 1996. Generating oracles from your favorite temporal logic specifications. In Proceedings of the 4th ACM SIGSOFT Symposium on the Foundations of Software Engineering. ACM Software Engineering Notes, 21. ACM Press, New York. 106-117; DILLON, L.K., YU, Q., Oracles for checking temporal properties of concurrent systems (1994) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 140-153. , New Orleans, LA, ACM Press, New York; DOONG, R.-K., FRANKL, P.G., The ASTOOT approach to testing object-oriented programs (1994) ACM Trans. Softw. Eng. Methodol, 3 (2), pp. 101-130; DU BOUSQUET, L., OUABDESSELAM, F., RICHIER, J.-L., ZUANON, N., Lutess: A specification-driven testing environment for synchronous software (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 267-276. , Los Angeles, ACM Press, New York; ELBAUM, S., KARHE, S., ROTHERMEL, G., Improving web application testing with user session data (2003) ICSE: Proceedings of the 25th International Conference on Software Engineering, pp. 49-59. , IEEE Computer Society, Washington, DC; FINSTERWALDER, M. 2001. Automating acceptance tests for GUI applications in an extreme programming environment. In Proceedings of the 2nd International Conference on eXtreme Programming and Flexible Processes in Software Engineering (Villasimius, Sardinia, Italy). Addison-Wesley. 114-117; GALL, P.L., ARNOULD, A., Formal specifications and test: Correctness and oracle (1995) COMPASS / ADT, pp. 342-358. , Springer Verlag, Oslo, Norway; GANNON, J., MCMULLIN, P., HAMLET, R., Data abstraction, implementation, specification, and testing (1981) ACM Trans. Program. Lang. Syst, 3 (3), pp. 211-223; GRAVES, T.L., HARROLD, M.J., KIM, J.-M., PORTER, A., ROTHERMEL, G., An empirical study of regression test selection techniques (2001) ACM Trans. Softw. Eng. Methodol, 10 (2), pp. 184-208; GREEN, B.S., Software test automation (2000) SIGSOFT Softw. Eng. Notes, 25 (3), p. 66; HAVELUND, K., ROU, G., An overview of the runtime verification tool Java PathExplorer (2004) Form. Methods Syst. Des, 24 (2), pp. 189-215; HICINBOTHOM, J. H. AND ZACHARY, W. W. 1993. A tool for automatically generating transcripts of human-computer interaction. In Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting. Special Sessions: Demonstrations, 2. Human Factors and Ergonomics Society, Seattle. 1042; JAGADEESAN, L.J., PORTER, A., PUCHOL, C., RAMMING, J.C., VOTTA, L.G., Specification-Based testing of reactive software: Tools and experiments: Experience report (1997) ICSE: Proceedings of the 19th International Conference on Software Engineering, pp. 525-535. , ACM Press, New York; JUNIT, J., UNIT TESTING, F., (2003) JUnit, Java unit testing framework, , http://junit.sourceforge.net; KEPPLE, L.R., The black art of GUI testing (1994) Dr. Dobb's J. Softw. Tools, 19, p. 2. , Feb, 40; KIM, M., VISWANATHAN, M., BEN-A BDALLAH, H., KANNAN, S., LEE, I., AND SOKOLSKY, O. 1998. Mac: A framework for run-time correctness assurance of real-time systems. Tech. Rep. MS-CIS-98-37, University of Pennsylvania, Department of Computer and Information Science; LUCKHAM, D., HENKE, F.W., An overview of Anna - A specification language for Ada (1985) IEEE Softw, 2 (2), pp. 9-22; MARICK, B., When should a test be automated? (1998) Proceedings of the 11th International Software / Internet Quality Week, , Software Research, San Francisco, CA; MARICK, B., Bypassing the GUI (2002) Softw. Test. Quality Eng. Mag, 4 (5), pp. 41-47; MEMON, A., BANERJEE, I., NAGARAJAN, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE: Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269. , Victoria, BC, Canada, IEEE Computer Society; MEMON, A., NAGARAJAN, A., XIE, Q., Automating regression testing for evolving GUI software (2005) J. Softw, Maintenance and Evolution: Res. Pract, 17 (1), pp. 27-64; MEMON, A.M., Advances in GUI testing (2003) Advances in Computers, 57. , Marvin V. Zelkowitz, ed. Academic Press, New York; MEMON, A.M., BANERJEE, I., NAGARAJAN, A., What test oracle should I use for effective GUI testing? (2003) Proceedings of the IEEE International Conference on Automated Software Engineering, pp. 164-173. , Montreal, Canada, IEEE Computer Society; MEMON, A. M., POLLACK, M. E., AND SOFFA, M. L. 2000. Automated test oracles for GUIs. In Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8) (Shelter Island, San Diego, CA). ACM Press, New York. 30-39; MEMON, A. M., POLLACK, M. E., AND SOFFA, M. L. 2001. Hierarchical GUI test case generation using automated planning. IEEE Trans. Softw. Eng. 27, 2 (Feb.), 144-155; MEMON, A.M., SOFFA, M.L., Regression testing of GUIs (2003) ESEC / FSE-11: Proceedings of the 9th European Software Engineering Conference held jointly with the 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 118-127. , ACM Press, New York; MEMON, A.M., SOFFA, M.L., POLLACK, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Vienna, Austria, ACM Press, New York; MEMON, A. M. AND XIE, Q. 2005. Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software. IEEE Trans. Softw. Eng. 31, 10 (Oct.), 884-896; MYEHS, B.A., User interface software tools (1995) ACM Trans. Comput. Hum. Interact. 2, 1, pp. 64-103; OSTRAND, T., ANODIDE, A., FOSTER, H., GORADIA, T., A visual test development environment for GUI systems (1998) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), pp. 82-92. , ACM Press, New York; PETERS, D., PARNAS, D.L., Generating a test oracle from program documentation: Work in progress (1994) ISSTA: Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 58-65. , ACM Press, New York; PETERS, D.K., PARNAS, D.L., Using test oracles generated from program documentation (1998) IEEE Trans. Softw. Eng, 24 (3), pp. 161-173; RICHARDSON, D.J., Taos: Testing with analysis and oracle support (1994) ISSTA: Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 138-153. , ACM Press, New York; RICHARDSON, D.J., LEIF-AHA, S., O'MALLEY, T.O., Specification-Based test oracles for reactive systems (1992) Proceedings of the 14th International Conference on Software Engineering, pp. 105-118. , Melbourne, Australia, ACM Press, New York; ROBINSON, H., (1999) Using pre-oracled, , http://www.geocities.com/harry_r-obinson.testing/pre-oracled.htm, data in model-based testing; ROSENBLUM, D.S., Specifying concurrent systems with TSL (1991) IEEE Softw, 8 (3), pp. 52-61; ROSENBLUM, D.S., Towards a method of programming with assertions (1992) ICSE: Proceedings of the 14th International Conference on Software Engineering, pp. 92-104. , ACM Press, New York; ROTHERMEL, G., ELBAUM, S., MALISHEVSKY, A.G., KALLAKURI, P., QIU, X., On test suite composition and cost-effective regression testing (2004) ACM Trans. Softw. Eng. Methodol, 13 (3), pp. 277-331; SIEPMANN, E., NEWTON, A.R., TOBAC: Test case browser for object-oriented software (1994) Proceedings of the International Symposium on Software Testing and Analysis, pp. 154-168. , ACM Press, New York; (2003) Capture-Replay tool 2003, , http://soft.com, SOFTWARE RESEARCH, INC; SU, J. AND RITTER, P. R. 1991. Experience in testing the Motif interface. IEEE Softw. 8, 2 (Mar.), 26-33; VIEIRA, M.E., DIAS, M.S., RICHARDSON, D.J., Object-Oriented specification-based testing using UML statechart diagrams (2000) Proceedings of the Workshop on Automated Program Analysis, Testing and Verification, , Limerick, Ireland, ACM Press, New York; VOGEL, P.A., An integrated general purpose automated test environment (1993) ISSTA: Proceedings of the 1993 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 61-69. , ACM Press, New York; WEYUKER, E.J., On testing non-testable programs (1982) Comput. J, 25 (4), pp. 465-470; WHITE, L., ALMEZEN, H., ALZEIDI, N., User-Based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63. , Hong Kong, IEEE Press; WOHLIN, C., RUNESON, P., HOST, M., OHLSSON, M.C., REGNELL, B., WESSLEN, A., (2000) Experimentation in Software Engineering: An Introduction, , Kluwer Academic, Norwell, MA; ZHU, H., HALL, P., AND MAY, J. 1997. Software unit test coverage and adequacy. ACM Comput. Surv. 29, 4 (Dec.), 366-427","Memon, A.M.; Department of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,,,,,,,1049331X,,ATSME,,"English","ACM Trans. Software Eng. Methodol.",Article,"Final","All Open Access, Green",Scopus,2-s2.0-33847680195
"Magel K., Alsmadi I.","7801503070;17433667400;","GUI structural metrics and testability testing",2007,"Proceedings of the 11th IASTED International Conference on Software Engineering and Applications, SEA 2007",,,,"91","95",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880846501&partnerID=40&md5=35382cf7d7d5df2b727aec67c301554f","Department of Computer Science, North Dakota State University, United States","Magel, K., Department of Computer Science, North Dakota State University, United States; Alsmadi, I., Department of Computer Science, North Dakota State University, United States","User interfaces have special characteristics that differentiate them from other software code. Software metrics suitable for suggesting the quality of other software need significant modification for user interface code. This paper introduces some structural metrics applicable to user interfaces and measurable by a test automation tool. These metrics try to measure the complexity of testing the user interface. Such metrics can be used to estimate required resources to test a certain application.","GUI metrics; GUI testing; Interface usability; Layout complexity; Test automation","Application programs; Graphical user interfaces; Software engineering; GUI testing; Interface usability; Layout complexity; Software metrics; Structural metrics; Test Automation; Test automation tool; User interface code; User interfaces",,,,,,,,"Melody, I., Hearst, M., The state of the art in automating usability evaluation of user interfaces (2001) ACM Computing Surveys (CSUR), 33 (4), pp. 470-516; Philip, G., (2006) Too Many Clicks! Unitbased Interfaces Considered Harmful, , http://gamasutra.com/features/20060823/goetz_01.shtml; Abdo, B., Vanderdonckt, J., NoirhommeFraiture, M., (2002) KWARESMI1; Knowledgebased Web Automated Evaluation with Reconfigurable Guidelines Optimization, , ""citeseer.ist.psu.edu/article/beirekdar02kwaresmi.html""; Balbo, S., Automatic evaluation of user interface usability: Dream or reality (1995) Proceeding of the Queensland Computerhuman Interaction Symposium. QCHI'95, , Bond University. Australia; Farenc, Ch., Palanque, Ph., A generic framework based on ergonomic rules for computeraided design of user interface (1999) Proceeding of the 3rd International Conference on ComputerAided Design of User Interfaces CADUI'99, , http://lis.univtlse1fr/farenc/papers/cadui99.ps; Farenc, Ch., Palanque, Ph., Bastide, R., Embedding ergonomic rules as generic requirements in the development process of interactive software (1999) Proceeding of the 7th IFIP Conference on Humancomputer Interaction interact'99.UK, , http://lis.univtlse1fr/farenc/papers/interact99.ps; LabView 8.2 Help, (2006) User Interface Metrics, , http://zone.ni.com-/reference/enXX/help/371361B01/lvhowto/userinterface_statistics/; Robins, K., (2006) Course Website. User Interfaces and Usability Lectures, , http://vip.cs.utsa.edu/classes/cs623s2006/; Frank, R., Van Rooy, D., St Amant, R., A user modeling design tool for comparing interfaces (2002) Proceeding of the 4th International Conference on ComputerAided Design of User Interfaces CADUI'2002, p. 111118. , 〈citeseer.ist.psu.edu/450618.html〉; Mukund, D., Karypis, G., Selective Markov models for predicting webpage accesses (2004) ACM Transactions on Internet Technology (TOIT), 4 (2), pp. 163-184; Robert, P., (2007) Humancomputer Interactions Design and Practice, , http://www.csl.mtu.edu/cs4760/www/, Course; Tullis, T.S., A system for evaluating screen formats (1988) Proceeding for Advances in Humancomputer Interaction, p. 214286; Tullis, T.S., The formatting of alphanumeric displays: A review and analysis (1983) Human Factors, p. 657683; Comber, T., Maltby, J.R., Investigating layout complexity (1996) 3rd International Eurographics Workshop on Design, Specification and Verification of Interactive Systems, p. 209227. , Belgium; Raskin, J., (2000) Humane Interface: New Directions for Designing Interactive Systems, , AddisonWesley, Boston, MA, USA; Thomas, C., Bevan, N., (1996) Usability Context Analysis: A Practical Guide Version 4, , National Physical Laboratory Teddington UK; Izzat, A., Magel, K., GUI path oriented test generation algorithms (2007) Proceeding of Human- Computer Interaction Conference. IASTED HCI, , Chamonix, France; Izzat, A., Magel, K., GUI test automation framework (2007) Proceeding of the International Conference on Software Engineering Research and Practice (SERP'07); Tullis, T.S., Screen design (1988) Handbook of Humancomputer Interaction, p. 377411. , Elsevier science publishers. The Netherlands; Izzat, A., Magel, K., GUI path oriented test case generation (2007) Proceeding of the International Conference on Software Engineering Theory and Practice (SETP07)",,,"","ACTA Press","11th IASTED International Conference on Software Engineering and Applications, SEA 2007","19 November 2007 through 21 November 2007",,117540,,9780889867055,,,"English","Proc. IASTED Int. Conf. Softw. Eng. Appl., SEA",Conference Paper,"Final","",Scopus,2-s2.0-84880846501
"Assem M., Keshk A., Ismail N., Nassar H.","24586849900;6507971491;7102930199;7003638693;","Specification-driven automated testing of java swing GUIs using XML",2007,"2007 ITI 5th International Conference on Information and Communications Technology, ICICT 2007",,, 4475622,"84","88",,3,"10.1109/ITICT.2007.4475622","https://www.scopus.com/inward/record.uri?eid=2-s2.0-49749142070&doi=10.1109%2fITICT.2007.4475622&partnerID=40&md5=90396d2caa3bdd2e36cb1907e8b23d0d","Faculty of Computer and Information, Suez Canal University, Ismailia, Egypt; Faculty of Computer and Information, Department of Computer Science, Menoufia University, Shebin el Kom, Egypt","Assem, M., Faculty of Computer and Information, Suez Canal University, Ismailia, Egypt; Keshk, A., Faculty of Computer and Information, Department of Computer Science, Menoufia University, Shebin el Kom, Egypt; Ismail, N., Faculty of Computer and Information, Department of Computer Science, Menoufia University, Shebin el Kom, Egypt; Nassar, H., Faculty of Computer and Information, Suez Canal University, Ismailia, Egypt","A Common method for GUI testing is the Capture and Replay (CR) technique. While commonly used this technique can not be used until an Application Under Test (AUT) is completely developed. In this paper we propose a specification-driven approach to test GUI-Based java programs as an alternative to the CR technique. We introduce a GUI-event test specification language based on XML from which an automated test engine is generated. The popularity of XML as a scripting language, its ease of use and its standard format have made writing a test script using our proposed specification language an easy task. Beside the ability to test AUT before being completely developed we have implemented a visual editor that can generate the test specification file for an already existing AUT. The engine generates GUI events and captures event responses to automatically verify the results of the test cases which are written to a test log file. This approach supports N-version testing, where each version of the application is intended to satisfy the same specification. © 2007 IEEE.","Graphical user interfaces; GUI testing; Testing tools; XML","Computer software; Engines; Graphical user interfaces; Java programming language; Specification languages; Specifications; XML; Application under tests; Automated testing; Event-response; GUI testing; Scripting languages; Test specifications; Testing tools; Visual editors; Automatic test pattern generation",,,,,,,,"Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI Test Case Generation using Automated Planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , February; Sun, Y., Jones, E.L., Specification-Driven Automated Testing (2004) Proceedings of the 42nd Annual Southeast Regional Conference, pp. 140-145; Chen, W.-K., Tsai, T.-H., Chao, H.-H., Integration of Specification-based and CR-based Approaches for GUI Testing (2005) Proceedings of the 19th International Conference on Advanced Information Networking and Applications (AINA '05), pp. 1-6; Newmarch, J., Testing Java Swing-based Applications (1999) Proceeding of the 31st International Conference on Technology on Object-Oriented Language and Systems, pp. 156-165; Jemmy Module, , http://jemmy.4.org, at; XMLSPY Release Information, , www.altova.com/xmlspy_release_archive.html, at; Abbot project, , http://sourceforge.net/projects/abbot, at; Jfcunit Documentation, , http://jfcunit.sourceforge.net, at; Ostrand, T., Aanodide, A., Foster, H., Goradia, T., A Visual Test Development Environment for GUI Systems (1998) Proceedings of the ACM SIGSOFT InternationalSymposium on Software Testing and Analysis (ISSTA-98), pp. 82-92. , March 2-5","Assem, M.; Faculty of Computer and Information, , Ismailia, Egypt; email: assem_d_2000@hotmail.com",,,"IEEE Computer Society","2007 ITI 5th International Conference on Information and Communications Technology, ICICT 2007","16 December 2007 through 18 December 2007","Cairo",73011,,142441430X; 9781424414307,,,"English","ITI Int. Conf. Inf. Commun. Technol., ICICT",Conference Paper,"Final","",Scopus,2-s2.0-49749142070
"Weiss D., Zduniak M.","8971361300;23391657200;","Automated integration tests for mobile applications in Java 2 micro edition",2007,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","4439 LNCS",,,"478","487",,9,"10.1007/978-3-540-72035-5_37","https://www.scopus.com/inward/record.uri?eid=2-s2.0-38049029342&doi=10.1007%2f978-3-540-72035-5_37&partnerID=40&md5=d2a4a6901b2bbbfcbbc65e3dd6fa2515","Poznan University of Technology, Piotrowo 2, 60-965 Poznań, Poland","Weiss, D., Poznan University of Technology, Piotrowo 2, 60-965 Poznań, Poland; Zduniak, M., Poznan University of Technology, Piotrowo 2, 60-965 Poznań, Poland","Applications written for mobile devices have become more and more complex, adjusting to the constantly improving computational power of hardware. With the growing application size comes the need for automated testing frameworks, particularly frameworks for automated testing of user interaction and graphical user interface. While such testing (also called capture-replay) has been thoroughly discussed in literature with respect to desktop applications, mobile development limits the possibilities significantly. To our best knowledge only a few solutions for creating automated tests of mobile applications exist and their functionality is very limited in general or constrained to only proprietary devices. In this paper we demonstrate preliminary results of our attempt to design and implement a framework for capturing and replaying user interaction in applications written for the Java 2 Micro Edition environment. Our evaluation test bed is a complex commercial mobile navigation system and the outcomes so far are very promising. © Springer-Verlag Berlin Heidelberg 2007.","Agile development; Mobile development; Quality assurance; Software testing","Computer hardware; Integration; Java programming language; Quality assurance; Software testing; User interfaces; Agile development; Mobile development; Mobile navigation system; Mobile devices",,,,,,,,"Kaner, C, Falk, J.L, Nguyen, H.Q, Testing Computer Software, Second Edition. John Wiley & Sons, Inc, New York, NY, USA 1999; Jeff Tian, Software Quality Engineering (2005) Testing, Quality Assurance, and Quantifiable Improvement, , John Wiley & Sons, Inc; Fowler, M., Foemmel, M., Continuous integration. Available on-line http:// martinfowler.com/articles/continuousIntegration.html; William, E., (1999) Perry: Effective Methods of Software Testing, , second edition, John Wiley & Sons, Inc; Mark Fewster and Dorothy Graham: Software Test Automation. Addison-Wesley (1999)","Weiss, D.; Poznan University of Technology, Piotrowo 2, 60-965 Poznań, Poland; email: dawid.weiss@cs.put.poznan.pl",,,"Springer Verlag","10th International Conference on Business Information Systems, BIS 2007","25 April 2007 through 27 April 2007","Poznan",71058,03029743,9783540720348,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-38049029342
"Belli F., Budnik C.J., Hollmann A.","57200611344;8958239900;23466753700;","Holistic testing of interactive systems using statecharts",2006,"Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)","P-77",,,"345","356",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84874282326&partnerID=40&md5=f098a1f3f7896c956ade2f1bbc8a7853","Department of Electrical Engineering and Information Technology, University of Paderborn, Warburger Str. 100, D-33098 Paderborn, Germany","Belli, F., Department of Electrical Engineering and Information Technology, University of Paderborn, Warburger Str. 100, D-33098 Paderborn, Germany; Budnik, C.J., Department of Electrical Engineering and Information Technology, University of Paderborn, Warburger Str. 100, D-33098 Paderborn, Germany; Hollmann, A., Department of Electrical Engineering and Information Technology, University of Paderborn, Warburger Str. 100, D-33098 Paderborn, Germany","Apart from the growing complexity of computer-based systems, their user interfaces, mostly realized graphically, are becoming more complex. Consequently, the analysis and testing of such systems demands a growing amount of effort. This paper presents an approach to generate and select test cases based on a ""statechart"" specification of the system under consideration. Statecharts are translated into (extended) regular expressions and are augmented with so-called faulty transitions. Using different test/coverage criteria test cases are generated to test the system under test. Finally the results of two case studies are compared. The novelty of the approach stems from the holistic view that takes undesirable malfunctions of the system into account as a complementary step to the modeling of the desirable functions of the system.",,"Analysis and testing; Computer-based system; Holistic view; Interactive system; Regular expressions; Statecharts; System under test; Test case; Pattern matching; User interfaces",,,,,,,,"Chow, T.S., Testing software designed modeled by finite-state machines (1978) IEEE Trans. Softw. Eng, 4, pp. 178-187; Binder, R.V., (2000) Testing Object-Oriented Systems, , Addison-Wesley; Aho, A.V., Dahbura, A.T., Lee, D., Uyar, M.U., An optimization technique for protocol conformance test generation based on UIO sequences and rural Chinese postman tours (1991) IEEE Trans. Commun, 39, pp. 1604-1615; Offutt, J., Shaoying, L., Abdurazik, A., Ammann, P., Generating test data from state-based specifications (2003) The Journal of STVR, 13 (1), pp. 25-53. , Medgeh; Parnas, D.L., On the use of transition diagrams in the design of user interface for an interactive computer system (1969) Proc. 24th ACM Nat'l. Conf, pp. 379-385; Shehady, R.K., A method to automate user interface testing using variable finite state maschines (1997) Proceedings of the FTCS'97, pp. 80-88. , D. P. S; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc ISSRE, pp. 110-119. , IEEE Comp. Press; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proc. 12th ISSRE, pp. 34-43; Tai, K., Lei, Y., A test generation strategy for pairwise testing (2002) IEEE Trans. on Softw. Eng, 28 (1), pp. 109-111; Ra, D., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for te practicing programmer (1978) Computer, 11 (4), pp. 34-41; Delamaro, M.E., Maldonado, J.C., Mathur, A., Interface mutation: An approach for integration testing (2001) IEEE Trans, on Softw. Eng., 27 (3), pp. 228-247; Bochmann, G.V., Petrenko, A., Protocol testing: Review of methods and relevance for software testing (1994) Softw. Eng. Notes, ACM SIGSOFT, pp. 109-124; Memon, A.M., Pollack, M.E., Soffa, M.X., Automated test oracles for GUIs (2000) SIGSOFT 2000, pp. 30-39; Harel, D., Statecharts: A visual approach to complex systems (1987) Science of Computer Programming, 8, pp. 231-274; Kim, Y.G., Hong, H.S., Cho, S.M., Bae, D.H., Cha, S.D., Test cases generation from UML state diagrams (1999) IEEE Proceedings Software, 146 (4), pp. 187-192; Hong, H.S., A test sequence selection method for statecharts (2000) Software Testing, Verification and Reliability 2000, 10, pp. 203-227. , Y. G. K. S. D. C. John Wiley & Sons; Burton, S., Towards automated unit testing of statechart implementations (1999) Technical Report (YCS 319), , Department of Computer Science, University of York, UK; Garg, V.K., Modeling of distributed systems by concurrent regular expressions (1989) Proceedings of FORTE '89, pp. 313-327; Okazaki, M., Aoki, T., Katayama, T., Formalizing sequence diagrams and state machines using concurrent regular expression (2003) Proceedings of SCESM'03, pp. 74-79; Jansamak, S., Surarerks, A., Formalization of UML statechart models using concurrent regular expressions (2004) ACSC 2004, pp. 83-88; Offutt, J., Abdurazik, A., Generating tests from UML specifications (1999) UML'99 - The Unified Modeling Language, pp. 416-429. , Springer; Belli, F., Budnik, Ch.J., Minimal spanning set for coverage testing of interactive systems (2004) Proc. of the ICTAC '05, 3407, pp. 220-223. , Springer Verlag, LNCS; Gill, A., (1962) Introduction to the Theory of Finite-State Machines, , McGraw-Hill; (2003) OMG Unified Modeling Language Specification, , UML Version 1.5, March; Christoph, J., Konzeptionelle Gestaltung, Anforderungsdefinition und Validierung der Benutzungsoberfläche eines Anbaugerätes zu kommunalen Grünflächenpflege (2004) Master Thesis Technical Report 2004/6, , University of Paderborn, Angew. Datentechnik","Belli, F.; Department of Electrical Engineering and Information Technology, Warburger Str. 100, D-33098 Paderborn, Germany; email: belli@adt.upb.de",,,,"SICHERHEIT 2006 - Sicherheit - Schutz und Zuverlassigkeit, Beitrage der 3. Jahrestagung des Fachbereichs Sicherheit der Gesellschaft fur Informatik e.V. (GI)- 3rd Annual Conference of the Dep. of Security of the Society for Informatics - Security","20 February 2006 through 22 February 2006","Magdeburg",95736,16175468,,,,"English","Lect. Notes Informatics (LNI), Proc. - Series Ges. Inform. (GI)",Conference Paper,"Final","",Scopus,2-s2.0-84874282326
"Derezińska A., Małek T.","6508199259;25628450400;","Unified automatic testing of a GUI applications' family on an example of RSS aggregators",2006,"Proceedings of the International Multiconference on Computer Science and Information Technology, IMCSIT","1",,,"549","559",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-83755181708&partnerID=40&md5=45573f4ced6e26c930e76702601acb44","Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, 00-665 Warsaw, Poland","Derezińska, A., Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, 00-665 Warsaw, Poland; Małek, T., Institute of Computer Science, Warsaw University of Technology, Nowowiejska 15/19, 00-665 Warsaw, Poland","This paper addresses a unification problem of automatic test scripts of GUI applications. We particularly focus on testing a family of applications related by a common functionality. The goal was to make a testing process to the most extend flexible and user independent. The capabilities and limitations of the solution are discussed. The strategy was showed on an example of an applications' family - RSS aggregators. The experiments of functional, performance and regression testing of RSS aggregators are presented. © 2006 PIPS.",,"Automatic test; GUI applications; Regression testing; Testing process; Unification problem; Automatic testing; Computer science; Data processing; Graphical user interfaces; Software testing; Information technology",,,,,,,,"Shneiderman, B., Plaisant, C., (2003) Designing the User Interface: Fourth Edition Preview, , Addison Wesley; White, L., AlMezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions Proc. of the 12th Inter. Symp. Software Reliability Engineer. (2001), pp. 54-63; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution, 17 (1 SPEC. ISS.), pp. 27-64. , DOI 10.1002/smr.305; Lowell, C., Stell-Smith, J., Successful Automation of GUI Driven Acceptance Testing (2003) LNCS, 2675, pp. 331-333. , Springer-Verlag, Heidelberg; Dutta, S., Abbot-A Friendly JUnit Extension for GUI Testing (2003) Java Developer Journal, pp. 8-12. , April; Steven, J., JRapture: A Capture/Replay Tool for Observation-Based testing (2000) Proc. of the Inter. Symposium on Software Analysis, 25 (5), pp. 158-167; IBM Rational Robot, , http://www-306.ibm.com/software/awdtools/tester/robot/; (2004) WinRunner, Test Automation for the Enterprise, , http://www.mercuryinteractive.com/products/winrunner/, Jan; Resource Hacker Homepage, , http://www.angusj.com/res; Spy++, , http://www.microsoft.com/library; Pilgrim, M., (2002) What Is RSS?, , http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html; (2005) RSS 2.0 Specification: RSS at Harvard Law, , http://blogs.law.harvard.edu/tech/rss, RSS Advisory Board; News and Information on the RSS Format, , http://blogspace.com/rss/resources, RSS Info; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; TestComplete, , http://www.automatedqa.com/products/testcomplete; (2004) RDF RichSite Summary (RSS), , http://www.oasisopen.org/cover/rss.html, Technology Reports; Active Web Reader, , http://www.deskshare.com/awr.aspx; Custom Reader, , http://www.customreader.com/; Snarfer, , http://www.snarfware.com/_; Feedreader, , http://www.feedreader.com/; RSSReader, , http://www.rssreader.com/; NewzSpider, , http://www.newzspider.com/; AgileReader, , http://www.codeproject.com/cpp/AgileReader.asp; Hill, T., Lewicki, P., (2006) Statistical Methods and Applications, , StatSoft Inc","Derezińska, A.; Institute of Computer Science, Nowowiejska 15/19, 00-665 Warsaw, Poland; email: A.Derezinska@ii.pw.edu.pl",,,,"1st International Multiconference on Computer Science and Information Technology, IMCSIT 2006. Part of 22nd Autumn Meeting of Polish Information Processing Society, PIPS","6 November 2006 through 10 November 2006","Wisla",87733,,,,,"English","Proc. Int. Multiconference Comput. Sci. Inf. Technol., IMCSIT",Conference Paper,"Final","",Scopus,2-s2.0-83755181708
"Vieira M., Leduc J., Hasling B., Subramanyan R., Kazmeier J.","7202140705;13614049300;55663194300;24328904300;16417230800;","Automation of GUI testing using a model-driven approach",2006,"Proceedings - International Conference on Software Engineering",,,,"9","14",,59,"10.1145/1138929.1138932","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953569322&doi=10.1145%2f1138929.1138932&partnerID=40&md5=1ca937c8f4953d9cba9d095c527f2472","Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States","Vieira, M., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; Leduc, J., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; Hasling, B., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; Subramanyan, R., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; Kazmeier, J., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States","This paper describes an ongoing research on test case generation based on Unified Modeling Language (UML). The described approach builds on and combines existing techniques for data and graph coverage. It first uses the Category-Partition method to introduce data into the UML model. UML Use Cases and Activity diagrams are used to respectively describe which functionalities should be tested and how to test them. This combination has the potential to create a very large number of test cases. This approach offers two ways to manage the number of tests. First, custom annotations and guards use the Category-Partition data which allows the designer tight control over possible, or impossible, paths. Second, automation allows different configurations for both the data and the graph coverage. The process of modeling UML activity diagrams, annotating them with test data requirements, and generating test scripts from the models is described. The goal of this paper is to illustrate the benefits of our model-based approach for improving automation on software testing. The approach is demonstrated and evaluated based on use cases developed for testing a graphical user interface (GUI). Copyright 2006 ACM.","GUI verification; model based testing; UML","Activity diagram; GUI testing; Model based approach; Model driven approach; Partition methods; Test case; Test case generation; Test data; Test scripts; UML activity diagrams; UML Model; UML use case; Verification model; Automation; Graphical user interfaces; Software engineering; Software testing; Systems analysis; Testing; Unified Modeling Language; Computer software selection and evaluation",,,,,,,,"Fröhlich, P., Link, J., Automated Test Case Generation from Dynamic Models (2000) Proceedings of the ECOOP 2000, pp. 472-491. , Bertino, E. (Ed.); Bertolino, A., Gnesi, S., Use case-based testing of product lines (2003) Proceedings of the ESEC / SIGSOFT FSE, pp. 355-358; Briand, L.C., Labiche, Y., A UML-Based Approach to Application Testing (2002) Software and Applications Modeling, 1 (1), pp. 10-42; Cavarra, A., Davies, J., Jeron, T., Mournier, L., Hartman, A., Olvovsky, S., Using UML for Automatic Test Generation Proceedings of ISSTA'2002, Aug. 2002; Hartmann, J., Imoberdorf, C., Meisinger, M., UML-based Integration Testing (2000) Proceedings of ISSTA'2000, pp. 60-70. , Aug; Beer, A., Mohacsi, S., Stary, C., IDATG: An Open Tool for Automated Testing of Interactive Software (1998) Proceedings of the COMPSAC '98 - 22nd International Computer Software and Applications Conference, pp. 470-475. , August 19-21; Ostrand, T., Balcer, M.J., The Category-Partition Method for Specifying and Generating Functional Tests (1988) Comm. ACM, 31 (6), pp. 676-686","Vieira, M.; Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; email: marlon.vieira@siemens.com",,"Assoc. Comput. Mach., Spec. Interest Group;Softw. Eng. (ACM SIGSOFT)",,"1st International Workshop on Automation of Software Test, AST'06, Co-located with the 28th International Conference on Software Engineering, ICSE 2009","20 May 2006 through 28 May 2006","Shanghai",80599,02705257,1595934081; 9781595934086,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-77953569322
"Katara M., Kervinen A., Maunumaa M., Pääkkönen T., Satama M.","7801543558;6507407206;14056610700;14056661800;54397731800;","Towards deploying model-based testing with a domain-specific modeling approach",2006,"Proceedings - Testing: Academic and Industrial Conference - Practice and Research Techniques, TAIC PART 2006",,, 1691673,"81","89",,19,"10.1109/TAIC-PART.2006.34","https://www.scopus.com/inward/record.uri?eid=2-s2.0-38049107184&doi=10.1109%2fTAIC-PART.2006.34&partnerID=40&md5=c3e9226958de8ad9e7271f1819415d4b","Tampere Univ. of Technology, Institute of Software Systems, P.O.Box 553, 33101 Tampere, Finland; Nokia Technology Platforms, P.O.Box 68, FI-33721 Tampere, Finland","Katara, M., Tampere Univ. of Technology, Institute of Software Systems, P.O.Box 553, 33101 Tampere, Finland; Kervinen, A., Tampere Univ. of Technology, Institute of Software Systems, P.O.Box 553, 33101 Tampere, Finland; Maunumaa, M., Tampere Univ. of Technology, Institute of Software Systems, P.O.Box 553, 33101 Tampere, Finland; Pääkkönen, T., Nokia Technology Platforms, P.O.Box 68, FI-33721 Tampere, Finland; Satama, M., Tampere Univ. of Technology, Institute of Software Systems, P.O.Box 553, 33101 Tampere, Finland","Model-based testing automating the generation of test cases is technically superior to conventional scripted testing. However, there have been difficulties in deploying the methodology in large scale industrial context. In this paper we present a domain-specific approach to model-based GUI testing that should be easier to adopt than more generic solutions. The method is based on keywords and action words that are considered as best practices in conventional GUI test automation. The basic idea is to record GUI events just like in capture/replay tools, but instead of producing scripts that can be hard to maintain, we produce sequences of keywords. These sequences are further transformed semiautomatically into Labeled Transition Systems where action words are used as transition labels. The action words model user behavior at a high level of abstraction while the keywords correspond to the GUI navigation. We also describe the associated tool set that we are developing and an example of using the approach. © 2006 IEEE.",,"Associated tool; Capture/replay; Domain specific; Domain specific modeling; Generic solutions; GUI testing; High level of abstraction; Industrial context; Labeled transition systems; Model based testing; Test Automation; Test case; Transition labels; User behaviors; Behavioral research; Graphical user interfaces; Industry; Model checking",,,,,,,,"(2001) ISEB Foundation Certificate in Software Testing Material, , British Computer Society; Buwalda, H., Action figures (2003) STQE Magazine, pp. 42-47. , March/April 2003; (2006) DSM Case Studies and Examples, , http://www.dsmforum.org/cases.html; El-Far, I.K., Enjoying the perks of model-based testing (2001) Proceedings of the Software Testing, Analysis, and Review Conference (STARWEST) 2001; M-Test Homepage, , http://www.intuwave.com; Kervinen, A., Maunumaa, M., Katara, M., Controlling testing using three-tier model architecture (2006) Proceedings of the Second Workshop on Model Based Testing (MBT 2006), , Vienna, Austria, Mar. To appear; Kervinen, A., Maunumaa, M., Pääkkönen, T., Katara, M., Model-based testing through a GUI (2005) LNCS, 3997. , Proceedings of the 5th International Workshop on Formal Approaches to Testing of Software (FATES 2005), July. To appear; QuickTest Pro Homepage, , http://www.mercury.com; Robinson, H., Obstacles and opportunities for model-based testing in an industrial software environment (2003) Proceedings of the 1st European Conference on Model-Driven Software Engineering, pp. 118-127. , http://www.model-based-testing.org/ObstaclesAndOpportunities.pdf, Nuremberg, Germany, Dec; (2006) Symbian Operating System Homepage, , http://www.symbian.com/","Katara, M.; Tampere Univ. of Technology, P.O.Box 553, 33101 Tampere, Finland; email: mika.katarav@tut.fi",,"The UK Engineering and Physical Sciences Research Council (EPSRC);DaimlerChrysler;Ericsson;IPL Information Processing Ltd.LDRA Software Technology Ltd.",,"1st Testing: Academic and Industrial Conference - Practice and Research Techniques, TAIC PART 2006","29 August 2006 through 31 August 2006","Windsor",87415,,0769526721; 9780769526720,,,"English","Proc. - Test.: Acad. Ind. Conf. - Pract. Res. Tech., TAIC PART",Conference Paper,"Final","",Scopus,2-s2.0-38049107184
"Xie Q., Memon A.M.","35761589700;35599876500;","Model-based testing of community-driven open-source GUI applications",2006,"IEEE International Conference on Software Maintenance, ICSM",,, 4021332,"145","154",,32,"10.1109/ICSM.2006.39","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34547359948&doi=10.1109%2fICSM.2006.39&partnerID=40&md5=110197565ec2d09253798e2d61b08aeb","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Xie, Q., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Although the world-wide-web (WWW) has significantly enhanced open-source software (OSS) development, it has also created new challenges for quality assurance (QA), especially for OSS with a graphical-user interface (GUI) front-end. Distributed communities of developers, connected by the WWW, work concurrently on loosely-coupled parts of the OSS and the corresponding GUI code. Due to the unprecedented code churn rates enabled by the WWW, developers may not have time to determine whether their recent modifications have caused integration problems with the overall OSS; these problems can often be detected via GUI integration testing. However, the resource-intensive nature of GUI testing prevents the application of existing automated QA techniques used during conventional OSS evolution. In this paper we develop new process support for three nested techniques that leverage developer communities interconnected by the WWW to automate model-based testing of evolving GUI-based OSS. The ""innermost"" technique (crash testing) operates on each code check-in of the GUI software and performs a quick and fully automatic integration test. The second technique (smoke testing) operates on each day's GUI build and performs functional ""reference testing"" of the newly integrated version of the GUI. The third (outermost) technique (comprehensive GUI testing) conducts detailed integration testing of a major GUI release. An empirical study involving four popular OSS shows that (1) the overall approach is useful to detect severe faults in GUI-based OSS and (2) the nesting paradigm helps to target feedback and makes effective use of the WWW by implicitly distributing QA. © 2006 IEEE.",,"Community-driven open-source GUI applications; Model-based testing; Open-source software (OSS); Codes (symbols); Distributed database systems; Graphical user interfaces; Open systems; Problem solving; Quality assurance; Software engineering",,,,,,,,"ACE+TAO software release, , http://deuce.doc.wustl.edu/Download.html; Baresi, L., Young, M., Test oracles (2001), http://www.cs.uoregon.edu/michal/pubs/oracles.html, Technical Report CIS-TR-01-02, University of Oregon, Dept. of Computer and Information Science, Eugene, Oregon, U.S.A, August; Brophy, H.F., Improving programming performance (1970) Australian Computer Journal, 2 (2), pp. 66-70; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001) Proceedings of the 2nd International Conference on eXtreme Programming and Flexible Processes in Software Engineering, pp. 114-117. , May; Herbsieb, J.D., Moitra, D., Guest Editors' introduction: Global software development (2001) IEEE Software, 18 (2), pp. 16-20. , Mar./Apr; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, volume 2 of SPECIAL SESSIONS: Demonstrations, p. 1042; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Memon, A., Porter, A., Yilmaz, C., Nagarajan, A., Schmidt, D.C., Natarajan, B., Skoll: Distributed Continuous Quality Assurance (2004) Proceedings of the 26th IEEE/ACM International Conference on Software Engineering, , Edinburgh, Scotland, May, IEEE/ACM; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of The 10th Working Conference on Reverse Engineering, pp. 260-269. , Nov; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896. , Oct; B. A. Myers. Why are human-computer interfaces difficult to design and implement? Technical Report CS-93-183, Carnegie Mellon University, School of Computer Science, July 1993; Offutt, J., Xu, W., Generating test cases for web services using data perturbation (2004) SIGSOFT Softw. Eng. Notes, 29 (5), pp. 1-10; Riecken, R.D., Koenemann-Belliveau, J., Robertson, S.P., What do expert programmers communicate by means of descriptive commenting? (1991) Empirical Studies of Programmers: Fourth Workshop, , Papers, pages 177-195; Seaman, C.B., Basili, V.R., Communication and organization: An empirical study of discussion in inspection meetings (1998) IEEE Transactions on Software Engineering, 24 (7), pp. 559-572. , July; White, L., AlMezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63; Xie, Q., Memon, A., Designing and comparing automated test oracles for gui-based software applications ACM Transactions on Software Testing and Methodology, , to appear; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications (2005) Proceedings of The International Conference on Software Maintenance 2005 (ICSM'05), pp. 473-182. , Budapest, Hungary, Sept","Xie, Q.; Department of Computer Science, , College Park, MD 20742, United States; email: qing@cs.umd.edu",,,,"ICSM 2006: 22nd IEEE International Conference on Software Maintenance","24 September 2006 through 27 September 2006","Philadelphia, PA",69975,,0769523544; 9780769523545,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-34547359948
"Holmes A., Kellogg M.","16245371400;7003434720;","Automating functional tests using selenium",2006,"Proceedings - AGILE Conference, 2006","2006",, 1667589,"270","275",,46,"10.1109/AGILE.2006.19","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247588324&doi=10.1109%2fAGILE.2006.19&partnerID=40&md5=3c0eb897172fd73e2a1611354f0b2651","Digital Focus","Holmes, A., Digital Focus; Kellogg, M., Digital Focus","Ever in search of a silver bullet for automated functional testing for Web Applications, many folks have turned to Selenium. Selenium is an open-source project for in-browser testing, originally developed by ThoughtWorks and now boasting an active community of developers and users. One of Selenium's stated goals is to become the de facto open-source replacement for proprietary tools such as WinRunner. Of particular interest to the agile community is that it offers the possibility of test-first design of web applications, red-green signals for customer acceptance tests, and an automated regression test bed for the web tier. This experience report describes the standard environment for testing with Selenium, as well as modifications we performed to incorporate our script pages into a wiki. It includes lessons we learned about continuous integration, script writing, and using the Selenium Recorder (renamed IDE). We also discuss how long it took to write and maintain the scripts in the iterative development environment, how close we came to covering all of the functional requirements with tests, how often the tests should be (and were) run, and whether additional automated functional testing below the GUI layer was still necessary and/or appropriate. While no silver bullet, Selenium has become a valuable addition to our agile testing toolkit, and is used on the majority of our web application projects. It promises to become even more valuable as it gains widespread adoption and continues to be actively developed. © 2006 IEEE.",,"Project management; Requirements engineering; Selenium; Web browsers; World Wide Web; GUI layers; Script pages; Selenium Recorder; Automatic testing",,,,,,,,"FitNesse (Web Site: http://www.fitnesse.org); Selenium, (Web Site: http://www.openqa.org/selenium); Selenium Frequently Asked Questions, (Web Site: http://wiki.openqa.org/ display/SEL/FAQ); DeWolf, D., private correspondence; FitNesse One Minute Description, (Web Site: http://www.fitnesse.org/ FitNesse.OneMinuteDescription); CruiseControl Home Page, (Web Site: http://cruisecontrol.sourceforge .net); Cobertura, (Web Site: http://cobertura.sourceforge.net)","Holmes, A.; Digital Focusemail: antawan.holmes@digitalfocus.com",,,,"AGILE Conference, 2006","23 July 2006 through 28 July 2006","Minneapolis, MN",69553,,0769525628; 9780769525624,,,"English","Proc. AGILE Conf.",Conference Paper,"Final","",Scopus,2-s2.0-34247588324
"Alava J., King T.M., Clarke P.J.","16240808400;16241488800;7401877941;","Automatic validation of java page flows using model-based coverage criteria",2006,"Proceedings - International Computer Software and Applications Conference","1",, 4020106,"439","446",,2,"10.1109/COMPSAC.2006.32","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247519228&doi=10.1109%2fCOMPSAC.2006.32&partnerID=40&md5=e2252e5d028df8ef111216cd07b28769","School of Computing and Information Sciences, Florida International University, Miami, FL 33199, United States","Alava, J., School of Computing and Information Sciences, Florida International University, Miami, FL 33199, United States; King, T.M., School of Computing and Information Sciences, Florida International University, Miami, FL 33199, United States; Clarke, P.J., School of Computing and Information Sciences, Florida International University, Miami, FL 33199, United States","There continue to be advances in the automation of Web application development, however testing these applications remains mainly a manual process. In this paper we present a methodology to test page flows using traditional test coverage criteria in conjunction with an automated testing tool. The criteria is applied in the context of page flows and transformed into: All Pages, All Actions, All Links, and All Forwards. We define a state-based model of the application using information from the page flow and then use this model as the basis for generating a script to be executed by the automated testing tool. This finite state machine (FSM) also models the various combinations of inputs associated with the user interface of the application. During execution of the script, test cases are randomly generated using the FSM along with textual input from a pre-defined data pool. The adequacy of the test coverage based on the criteria for the page flow is determined by analyzing the elements covered during execution of the test script. © 2006 IEEE.","Model validation and analysis; Testing and debugging","Automation; Mathematical models; Program debugging; Software testing; World Wide Web; Automatic validation; Java page; Model validation; Java programming language",,,,,,,,"(2005), http://incubator.apache.org/ beehive/ pageflow/pageflow_overview.html, The Apache Beehive Project, April; (2006), http://struts.apache.org, Apache Struts Project, Feb; (2006) BEA Workshop Product Family, , http://www.bea.com/framework.jsp? CNT=index.htm&FP=/content/products/workshop, Feb; Alava, J., Clarke, P.J., Model-based test criteria for validating annotated web applications (2005) 2nd MoDeVa Workshop - Model design and Validation (Models 05), , Oct; Andrews, A.A., Offutt, J., Alexander, R.T., Testing web applications by modeling with fsms (2005) Software and Systems Modeling, 4 (3), pp. 326-345. , July; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, second edition; Cavaness, C., (2004) Programming Jakarta Struts, , O'Reilly, second edition; Cormen, T.H., Leiserson, C.E., Rivest, R.L., Stein, C., (2001) Introduction to Algorithms, , MIT, and Mc-Graw Hill, Cambridge, Massachusetts, second edition edition; Ebert, J., Franzke, A., A declarative approach to graph based modeling (1994) Proceedings of the 20th International Workshop on Graph-Theoretic Concepts in Computer Science, 903, pp. 38-50. , march; El-Far, I.K., Whittaker, J.A., Model-based software testing Encyclopedia of Software, , Engineering, 2001. ed. John J. Marciniak; Feldstein, J., (2005) Model-based testing using ibm rational functional tester, , http://www-128.ibm.com/ developerworks/rational/library/05/r-3175, Feb., Jan; (2006) Rational Functional Tester, , http://www-306.ibm.com/ software/awdtools/tester/functional, IBM, Feb; Liu, C.-H., Kung, D.C., Hsia, P., Hsu, C.-T., Structural testing of web applications (2000) Proceedings of the 11th International Symposium on Software Reliability Engineering, pp. 84-95. , IEEE, Oct; T. Mens, K. Czarnecki, and P. V. Corp. 04101 discussion - a taxonomy of model transformations [online]. In Language Engineering for Model-Driven Software Development, Dagstuhl Seminar Proceedings, 2005; Rainsberger, J., (2004) Testing J2EE applications: Recipes for testing enterprise apps, , http://www. javaworld. com/j avaworld/j w-08-2004/jw-0830-testing.html, Feb., Aug; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) Proceedings of the 23rd International Conference on Software Engineering, , IEEE, May; (2004) JSR 175: A Metadata Facility for the JavaTM Programming Language, , http://www.jcp.org/en/jsr/detail?id=175, Sun Microsystems, Inc, Sept; Whittaker, J.A., Stochastic software testing (1997) Annals of Software Engineering, 4, pp. 115-131; Zhu, H., Hall, P.A.V., May, J.H.R., Software unit testing coverage and adequacy (1997) ACM Computing Surveys, 29 (4), pp. 366-427. , December","Alava, J.; School of Computing and Information Sciences, , Miami, FL 33199, United States; email: jalav001@cis.fiu.edu",,,,"30th Annual International Computer Software and Applications Conference, COMPSAC 2006","17 September 2006 through 21 September 2006","Chicago, IL",69546,07303157,0769526551; 9780769526553,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-34247519228
"Cai K.-Y., Zhao L., Wang F.","10039717300;57195627511;57219060478;","A dynamic partitioning approach for GUI testing",2006,"Proceedings - International Computer Software and Applications Conference","2",, 4020171,"223","228",,3,"10.1109/COMPSAC.2006.94","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247501790&doi=10.1109%2fCOMPSAC.2006.94&partnerID=40&md5=7c086c37527f44c47a958005fc2a39e7","Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China","Cai, K.-Y., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China; Zhao, L., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China; Wang, F., Department of Automatic Control, Beijing University of Aeronautics and Astronautics, Beijing 100083, China","Previous works on GUI testing are mainly concerned with how to define or generate GUI test cases. The issue of how to employ generated GUI test cases or primitive actions is seldom discussed. In this paper we propose a dynamic partitioning approach for GUI testing to address the issue. In this approach, the given GUI primitive actions are dynamically partitioned into two disjoint classes: one comprising prioritized primitive actions and the other comprising non-prioritized ones. The testing process is divided into two stages and contains two feedback loops. The first stage prioritizes primitive actions and the second stage selects and performs prioritized primitive actions. The first feedback loop is local and occurs in the second stage, which adjusts the memberships of primitive actions after they are performed. The second feedback loop is global and occurs between the first and second stages. It switches GUI testing from the second stage to the first stage upon no prioritized primitive actions are available. Two testing experiments with real GUI applications show that the proposed dynamic partitioning approach can really work in practice and may significantly outperform the random testing approach in the sense that the dynamic partitioning approach uses fewer primitive actions to achieve given testing goals and behaves more stable. The dynamic partitioning approach adopts explicit feedback mechanisms and contributes to the emerging area of software cybernetics that explores the interplay between software and control. © 2006 IEEE.",,"Computer control; Feedback; Graphical user interfaces; Dynamic partitioning; Feedback loops; Feedback mechanisms; Software testing",,,,,,,,"Kepple, L.R., The Black Art of GUI Testing (1994) Dr. Doob's Journal of Software Tools, 19 (2), p. 40; White, L., Almezen, H., Generating Test Cases for GUI Responsibilities Using Complete Interaction Sequences (2000) Proc. the 11 International Symposium on Software Reliability Engineering, pp. 110-121; White, L., Almezen, H., Alzeidi, N., User-Based Testing of GUI Sequences and Their Interactions (2001) Proc. the 12th International Symposium on Software Reliability Engineering, pp. 54-63; Belli, F., Finite State Testing and Analysis of Graphical User Interfaces (2001) Proc. the 12th International Symposium on Software Reliability Engineering, pp. 34-43; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI Test Case Generation Using Automated Planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Cai, K.Y., Zhao, L., Hu, H., Jiang, C.H., On the Test Case Definition of GUI Testing (2005) Proc. the 5th International Conference on Quality Software, pp. 19-26. , IEEE Computer Society Press; Ostrand, T.J., Balcer, M.J., The Category-Partition Method for Specifying and Generating Functional Tests (1988) Communication of the ACM, 31 (6), pp. 676-686; K.Y.Cai, T.Jing, C.GBai, Partition Testing with Dynamic Partitioning, Proc. Second International Workshop on Software Cybernetics; The Twenty-Ninth Annual International Computer Software and Application Conference, 2, 2005, pp113-116; (2005), http://www.borland.com/downloads/download_ cbuilder.html, November 7; (2004), http://www.moon-soft.com/download/multimedia, September 10; Cai, K.Y., Optimal Software Testing and Adaptive Software Testing in the Context of Software Cybernetics (2002) Information and Software Technology, 44, pp. 841-855; Cai, K.Y., Cangussu, J.W., DeCarlo, R.A., Mathur, A.P., An Overview of Software Cybernetics Proc. the 11th International Workshop on Software Technology and Engineering Practice, 2003, pp. 77-86. , IEEE Computer Society Press, pp","Cai, K.-Y.; Department of Automatic Control, , Beijing 100083, China; email: kycai@buaa.edu.cn",,,,"30th Annual International Computer Software and Applications Conference, COMPSAC 2006","17 September 2006 through 21 September 2006","Chicago, IL",69546,07303157,0769526551; 9780769526553,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-34247501790
"Sprenkle S., Gibson E., Sampath S., Pollock L.","13613671200;7103129464;8261561200;7005623618;","A case study of automatically creating test suites from Web application field data",2006,"Proceedings of the 2006 Workshop on Testing, Analysis, and Verification of Web Services and Applications, TAV WEB'06","2006",,,"1","9",,18,"10.1145/1145718.1145719","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247344548&doi=10.1145%2f1145718.1145719&partnerID=40&md5=74cfe907e61d936800dbaddd2676f99d","Computer and Information Sciences, University of Delaware, Newark, DE 19716, United States","Sprenkle, S., Computer and Information Sciences, University of Delaware, Newark, DE 19716, United States; Gibson, E., Computer and Information Sciences, University of Delaware, Newark, DE 19716, United States; Sampath, S., Computer and Information Sciences, University of Delaware, Newark, DE 19716, United States; Pollock, L., Computer and Information Sciences, University of Delaware, Newark, DE 19716, United States","Creating effective test cases is a difficult problem, especially for web applications. To comprehensively test a web application's functionality, test cases must test complex application state dependencies and concurrent user interactions. Rather than creating test cases manually or from a static model, field data provides an inexpensive alternative to creating such sophisticated test cases. An existing approach to using field data in testing web applications is user-session-based testing. Previous user-session-based testing approaches ignore state dependences from multi-user interactions. In this paper, we propose strategies for leveraging web application field data to automatically create test cases that test various levels of multi-user interaction and state dependencies. Results from our preliminary case study of a publicly deployed web application show that these test case creation mechanisms are a promising testing strategy for web applications. Copyright 2006 ACM.",,"Functionality; State dependencies; Static models; User interactions; Automation; Functional analysis; Interactive computer graphics; Mathematical models; Problem solving; User interfaces; World Wide Web",,,,,,,,"Andrews, A., Offutt, J., Alexander, R., Testing web applications by modeling with FSMs (2005) Software Systems and Modeling, 4 (2). , Apr; Binder, R., (2000) Testing Object-Oriented Systems, , Addison Wesley; Clover, (2006) Code coverage tool for Java, , http://www.cenqua.com/clover, 〉; DiLucca, G., Fasolino, A., Faralli, F., Carlini, U.D., Testing web applications (2002) International Conference on Software Maintenance, pp. 310-319. , Oct; (2006) DSpace Federation, , http://www.dspace.org; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 49-59; (2006), HTTPClient, V0.3-3. 〈http://www.innovation.ch/java/HTTPClient; Liblit, B., Aiken, A., Zheng, A.X., Jordan, M.I., Bug isolation via remote program sampling (2003) Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, pp. 141-154; Liu, C.-H., Kung, D.C., Hsia, P., Object-based data flow testing of web applications (2000) First Asia-Pacific Conference on Quality Software; Blumenstyk, M., (2002) Web Application Development - Bridging the Gap between QA and Development, , http://www.stickyminds.com; Offutt, J., Wu, Y., Du, X., Huang, H., Bypass testing of web applications (2004) IEEE 15th International Symposium on Software Reliability Engineering, pp. 187-197. , Nov; Orso, A., Kennedy, B., Selective capture and replay of program executions (2005) Proceedings of the Third International Workshop on Dynamic Analysis, , May; Pertet, S., Narsimhan, P., Causes of failures in web applications (2005), Technical Report CMU-PDL-05-109, Carnegie Mellon University, Dec; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) Proceedings of the 23rd International Conference on Software Engineering, pp. 25-34. , May; Sprenkle, S., Gibson, E., Sampath, S., Pollock, L., Automated replay and fault detection for web applications (2005) Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, pp. 253-262. , Nov; Sprenkle, S., Sampath, S., Gibson, E., Pollock, L., Souter, A., An empirical comparison of test suite reduction techniques for user-session-based testing of web applications (2005) Proceedings of the International Conference on Software Maintenance, pp. 587-596. , Sep","Sprenkle, S.; Computer and Information Sciences, , Newark, DE 19716, United States; email: sprenkle@cis.udel.edu",,"ACM SIGSOFT",,"2006 Workshop on Testing, Analysis, and Verification of Web Services and Applications, TAV WEB'06","17 July 2006 through 20 July 2006","Portland, ME",69534,,1595934588; 9781595934581,,,"English","Proc. Workshop Test. Anal. Verificat. Web Serv. Applic.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-34247344548
"Ye M., Feng B., Zhu L.","57201574732;7202087458;35372717700;","BPR based graphical interfaces verification for automated testing",2006,"Chinese Journal of Electronics","15","4 A",,"957","959",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-33750918535&partnerID=40&md5=a3b292bff05dc4556cedcccfc6fb2b11","School of Electronics and Information Engineering, Xi'an Jiaotong University, Xi'an 710049, China; School of Software, Xi'an Jiaotong University, Xi'an 710049, China","Ye, M., School of Electronics and Information Engineering, Xi'an Jiaotong University, Xi'an 710049, China; Feng, B., School of Electronics and Information Engineering, Xi'an Jiaotong University, Xi'an 710049, China; Zhu, L., School of Software, Xi'an Jiaotong University, Xi'an 710049, China","Graphical Interfaces verification is one of the key problems in automated Graphical user Interfaces (GUI) software testing. A new model is proposed in this paper to verify graphical interfaces from the viewpoint of users. The model is implemented by Biomimetic pattern recognition (BPR) theory. Experimental results indicate that the method Is of potential application in GUI software testing. It can save a lot of time and cost when testing the GUI software.","Biomimetic pattern recognition (BPR); Graphical user interfaces (GUI); Software testing","Computer software; Graphical user interfaces; Mathematical models; Automated testing; Biomimetic pattern recognition (BPR); Software testing; Pattern recognition",,,,,,,,"Fewster, M., Graham, D., (1999) Software Test Automation, , New York: Addison Wesley; Memon, A., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , University of Pittsburgh, USA; Tao, J., (2002) A New Approach in GUI Testing, , University of Minnesota, USA; Interactive, M., (2000) WinRunner Users Guide; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proc. 12th International Symposium on Software Reliability Engineering, pp. 34-43. , IEEE Computer Society, Piscataway: IEEE Press; White, L., Almezen, H., Sastry, S., Firewall regression testing of GUI sequences and their interactions (2003) Proc. International Conf. on Software Maintenance, pp. 398-409. , IEEE Computer Society, Piscataway: IEEE Press; Wang, S.J., Bionic (topological) pattern recognition - A new model of pattern recognition theory and its applications (2002) Acta Electronica Sinica, 30 (10), pp. 1417-1420; Wang, S.J., Chen, X., Biomimetic (topological) pattern recognition-a new model of pattern recognition theory and its application (2003) Proc. International Conf. on Neural Networks, 3, pp. 2258-2262. , Piscataway: IEEE Press; Vapnik, V.N., (2000) The Nature of Statistical Learning Theory, Second Edition, , New York, Springer-Verlag; Wang, S.J., Chen, X., Li, W.J., Object-recognition with oblique observation directions based on biomimetic pattern recognition (2005) Proc. International Conf. on Neural Networks and Brain, pp. 1498-1502. , Piscataway: IEEE Press; Wang, S.J., Xu, J., Wang, X.B., Qin, H., Multicamera human-face personal identification system based on the biomimetic pattern recognition (2003) Acta Electronica Sinica, 31 (1), pp. 1-3; Qin, H., Wang, S.J., Comparison of biomimetic pattern recognition, HMM and DTW for speaker-independent speech recognition (2005) Acta Electronica Sinica, 33 (5), pp. 957-960; Wang, S.J., A new development on ANN in China biomimetic pattern recognition and multi weight vector neurons (2003) LNAI, 8639, pp. 35-43. , Berlin, Springer-Verlag; Zhao, Y., Gao, J., Wang, R.G., Hu, J., An extended nearest neighbor method based on bionic pattern recognition (2004) Acta Electronica Sinica, 32 (12 A), pp. 196-198","Ye, M.; School of Electronics and Information Engineering, , Xi'an 710049, China",,,,,,,,10224653,,CHJEE,,"English","Chin J Electron",Article,"Final","",Scopus,2-s2.0-33750918535
"Mao Y., Boqin F., Zhenfang H., Li Z.","55459015400;7202087458;34975976600;57191700925;","Important usage paths selection for GUI software testing",2006,"Information Technology Journal","5","4",,"648","654",,4,"10.3923/itj.2006.648.654","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33749605660&doi=10.3923%2fitj.2006.648.654&partnerID=40&md5=bf4118622acc0413561b6461b62e06e3","Department of Computer Science Technology, Xi'an Jiaotong University, Xianning Road, Xi'an 710049, China; Institute of Software, Xi'an Jiaotong University, Xianning Road, Xi'an 710049, China; Department of Computer Science Technology, Xi'an Jiaotong University, Xi'an 710049, China","Mao, Y., Department of Computer Science Technology, Xi'an Jiaotong University, Xianning Road, Xi'an 710049, China, Department of Computer Science Technology, Xi'an Jiaotong University, Xi'an 710049, China; Boqin, F., Department of Computer Science Technology, Xi'an Jiaotong University, Xianning Road, Xi'an 710049, China; Zhenfang, H., Department of Computer Science Technology, Xi'an Jiaotong University, Xianning Road, Xi'an 710049, China; Li, Z., Institute of Software, Xi'an Jiaotong University, Xianning Road, Xi'an 710049, China","From the user's point of view, the reliability of software depends greatly on the manner in which the software is used. As a result, it is necessary to test the software according to some model that highlights critical usage. Windows Navigation Networks (WNN) were proposed to model the usage of GUI software. Vertexes in the model represent windows and arcs represent transitions between windows. Each transition has probability of occurrence. Algorithm was proposed to obtain the transition probability from software usage log automatically. Important paths can be selected based on the WNN. Existing testing technologies then be used to test the important paths. WNN can describe the usage of GUI software from users' view and reduce the complexity of modeling GUI software. Important usage paths of GUI software can be got from WNN. It can focus the testing to reveal more important faults. © 2006 Asian Network for Scientific Information.","GUI; Software testing; Statistical testing; Usage model; WNN model","Software testing; Statistical testing; Usage model; WNN model; Computer software; Mathematical models; Probability; Statistical methods; Graphical user interfaces",,,,,,,,"Belli, F., Finite state testing and analysis of graphical user interfaces (2001) Proc. of the 12th International Symposium on Software Reliability Engineering, pp. 34-43. , IEEE; Beyer, M., Automated TTCN-3 test case generation by means of UML sequence diagrams and Markov chains (2003) Proc. of the 12th Asian Test Symposium, pp. 102-105. , IEEE; Bjorn, R., Towards integration of use case modeling and usage-based testing (2000) Systems and Software, 50, pp. 117-130; Bogdanov, K., Holcombe, M., Refinement in statechart testing (2004) Software Testing, Verification and Reliability, 14, pp. 189-211; Chen, J., Subramaniam, S., Specification-based testing for GUI-based applications (2002) Software Quality Journal, 10, pp. 205-224; Cristiano, B., Test case generation using stochastic automata networks: Quantitative analysis (2004) Proc. of the Second International Conf. on Software Engineering and Formal Methods, pp. 251-260. , IEEE; Du, S., Software functional testing technology based on interface component relating chart (2002) China: J. Computer Res. Develop., 39, pp. 148-152; Farina, A., Representing software usage models with stochastic automata networks (2002) Proc. of the 14th International Conf. on Software Engineering and Knowledge Engineering, pp. 401-407. , ACM; Jame, W., Michael, T., A markov chain model for statistical software testing (1994) IEEE Trans. Software Eng., 20, pp. 812-824; Memon, A., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph. D Thesis, University of Pittsburgh, USA., 2001; Memon, A., Automating regression testing for evolving GUI software (2005) J. Software Maintenance and Evolu., 1, pp. 27-64; Nie, C., Xu, B., A minimal test suite generation method (2003) China: Chinese J. Comput., 26, pp. 1690-1695; Offutt, J., Generating test data from state-based specifications (2003) Software Testing, Verification and Reliability, 13, pp. 25-53; Petrenko, A., Yevtushenko, N., Testing from partial deterministic FSM specifications (2005) IEEE Trans. Comput., 54, pp. 1154-1165; Prowell, S., Using Markov chain models to test complex systems (2005) Proc. of the 38th Hawaii International Conference on System Sciences, pp. 318-323. , IEEE; Sayre, K., (1999) Improved Techniques for Software Testing Based on Markov Chain Usage Models, , Ph. D Thesis, University of Tennessee, Knoxville, USA, 1999; Shehady, R., Siewiorek, D., A method to automate user interface testing using variable finite state machines (1997) Proc. of the 27th Ann. Intl. Symposium on Fault-tolerant Computing, pp. 80-88. , IEEE; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc. of the 11th International Symposium on Software Reliability Engineering, pp. 110-121. , San Jose, CA, IEEE; White, L., Firewall regression testing of GUI sequences and their interactions (2003) Proc. of the International Conf. on Software Maintenance, pp. 398-409. , IEEE; Yan, J., Deriving software Markov chain usage model from UML models (2005) China: J. Software, 16, pp. 1386-1394; Yip, S., Robson, D., Applying formal specification and functional testing to graphical user interfaces (1991) Proc. of the 5th Annual European Conf. on Advanced Computer Technology: Reliable Systems and Applications, pp. 557-561. , IEEE","Mao, Y.; Department of Computer Science Technology, , Xi'an 710049, China",,,,,,,,18125638,,,,"English","Inf. Technol. J.",Article,"Final","All Open Access, Bronze",Scopus,2-s2.0-33749605660
"Belli F., Budnik C.J., White L.","57200611344;8958239900;7402226173;","Event-based modelling, analysis and testing of user interactions: Approach and case study",2006,"Software Testing Verification and Reliability","16","1",,"3","32",,78,"10.1002/stvr.335","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33644775514&doi=10.1002%2fstvr.335&partnerID=40&md5=bff62887559ab2aef34ed87e8ab5f3f8","Department of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Warburger Strasse 100, D-33098 Paderborn, Germany; Department of Electrical Engineering and Computer Science, Case Western Reserve University, Cleveland, OH 44106-7071, United States","Belli, F., Department of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Warburger Strasse 100, D-33098 Paderborn, Germany; Budnik, C.J., Department of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Warburger Strasse 100, D-33098 Paderborn, Germany; White, L., Department of Electrical Engineering and Computer Science, Case Western Reserve University, Cleveland, OH 44106-7071, United States","With the growing complexity of computer-based systems, their graphical user interfaces have also become more complex. Accordingly, the test and analysis process becomes more tedious and costly. This paper introduces a holistic view of fault modelling that is carried out as a complementary step to system modelling, enabling a scalability of the test process, and providing considerable potential for automation. Event-based notions and tools are used to generate and select test cases systematically. The elements of the approach are illustrated and validated by a case study. This paper does not claim to introduce a novel theoretic approach; rather, it makes use of graph-theoretic results for a practical and simple, but nevertheless powerful, view of modelling, analysis and testing of graphical user interfaces. Copyright © 2005 John Wiley & Sons, Ltd.","Event sequence graphs; Modelling/analysis/testing of graphical user interfaces","Computational complexity; Computer aided analysis; Computer simulation; Computer system recovery; Computer testing; Fault tolerant computer systems; Human computer interaction; Event sequence graphs; Fault modelling; User interactions; Graphical user interfaces",,,,,,,,"Thomas, J.J., Hamlin, G., Graphical input interaction techniques: Workshop summary (1983) ACM Computer Graphics News, 17 (1), pp. 5-30. , (eds.); Shneiderman, B., (1998) Designing the User Interface: Strategies for Effective Human-Computer Interaction, , (3rd edn). Addison-Wesley: Reading, MA; Horrocks, I., (1999) Constructing the User Interface With Statecharts, , Addison-Wesley: Reading, MA; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSRE 2001), pp. 34-43. , Hong Kong, November 2001. IEEE Computer Society Press: Los Alamitos, CA; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering (ISSRE 2001), pp. 54-63. , Hong Kong, November 2001. IEEE Computer Society Press: Los Alamitos, CA; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the 11th International Symposium on Software Reliability Engineering (ISSRE 2000), pp. 110-121. , San Jose, CA, October 2000. IEEE Computer Society Press: Los Alamitos, CA; Korel, B., Automated test data generation for programs with procedures (1996) Proceedings of the 1996 International Symposium on Software Testing and Analysis (ISSTA 1996), pp. 209-215. , San Diego, CA, January 1996. ACM Press: New York; Zhu, H., Hall, P.A.V., May, J.H.R., Software unit test coverage and adequacy (1997) ACM Computing Surveys, 29 (4), pp. 366-427; Dreyer, J., (1998) Program Segmentation for Controlling Software Testing and Analysis, , Shaker Verlag: Aachen, Germany; Martin, J.C., (1997) Introduction to Languages and the Theory of Computation, , (2nd edn). McGraw-Hill: New York; Holcombe, M., Ipate, F., (1998) Correct Systems: Building a Business Process Solution, , Springer: Berlin; Gossens, S., Enhancing system validation with behavioural types (2002) Proceedings of the 7th International Symposium on High-Assurance Systems Engineering (HASE 2002), pp. 201-208. , Tokyo, October 2002. IEEE Computer Society Press: Los Alamitos, CA; Bochmann, Gv., Petrenko, A., Protocol testing: Review of methodsl and relevance for software testing (1994) Proceedings of the 1994 International Symposium on Software Testing and Analysis (ISSTA 1994), pp. 109-124. , Seattle, WA, August 1994. ACM Press: New York; Chow, T.S., Testing software design modeled by finite-state machines (1978) IEEE Transactions on Software Engineering, 4 (3), pp. 178-187; Sarikaya, B., Conformance testing: Architectures and test sequences (1989) Computer Networks and ISDN Systems, 17 (2), pp. 111-126; Parnas, D.L., On the use of transition diagrams in the design of a user interface for an interactive computer system (1969) Proceedings of the 24th ACM National Conference, pp. 379-385. , August 1969. ACM Press: New York; Offutt, J., Liu, S., Abdurazik, A., Ammann, P., Generating test data from state-based specifications (2003) Software Testing, Verification and Reliability, 13 (1), pp. 25-53; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using finite state machines (1997) Proceedings of the 27th International Symposium on Fault-Tolerant Computing (FTCS-27), pp. 80-88. , Seattle, WA, June 1997. IEEE Computer Society Press: Los Alamitos, CA; Cohen, D.M., Dalal, S.R., Fredman, M.L., Patton, G.C., The AETG system: An approach to testing based on combinatorial design (1997) IEEE Transactions on Software Engineering, 23 (7), pp. 437-444; Tai, K.-C., Lei, Y., A test generation strategy for pairwise testing (2002) IEEE Transactions on Software Engineering, 28 (1), pp. 109-111; DeMillo, R.A., Lipton, R.J., Sayward, F.G., Hints on test data selection: Help for the practicing programmer (1978) IEEE Computer, 11 (4), pp. 34-41; Delamaro, M.E., Maldonado, J.C., Mathur, A.P., Interface mutation: An approach for integration testing (2001) IEEE Transactions on Software Engineering, 27 (3), pp. 228-247; Gargantini, A., Heitmeyer, C., Using model checking to generate tests from requirements specifications (1999) Proceedings of the 7th European Software Engineering Conference (ESEC-7) and the 7th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-7), 1687, pp. 146-162. , Toulouse, France, September 1999 (Lecture Notes in Computer Science). Springer: Berlin; Peled, D.A., (2001) Software Reliability Methods, , Springer: New York; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the 8th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , San Diego, CA, November 2000. ACM Press: New York; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Pollack, M.E., Soffa, M.L., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC-8) and the 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Vienna, September 2001. ACM Press: New York; Memon, A.M., Banerjee, I., Hashin, N., Nagarajan, A., DART: A framework for regression testing nightly/daily builds of GUI applications (2003) Proceedings of the 2003 International Conference on Software Maintenance (ICSM 2003), pp. 410-419. , Amsterdam, September 2003. IEEE Computer Society Press: Los Alamitos, CA; Aho, A.V., Dahbura, A.T., Lee, D., Uyar, M.U., An optimization technique for protocol conformance test generation based on UIO sequences and rural Chinese postman tours (1991) IEEE Transactions on Communications, 39 (11), pp. 1604-1615; Harel, D., Naamad, A., The STATEMATE semantics of statecharts (1996) ACM Transactions on Software Engineering and Methodology, 5 (4), pp. 293-333; Shen, Y.-N., Lombardi, F., Dahbura, A.T., Protocol conformance testing using multiple UIO sequences (1992) IEEE Transactions on Communications, 40 (8), pp. 1282-1287; Gill, A., (1962) Introduction to the Theory of Finite-State Machines, , McGraw-Hill: New York; Gluschkow, W.M., (1963) Theorie Der Abstrakten Automaten, , VEB Verlag der Wissensch: Berlin; (1990) IEEE Standard Glossary of Software Engineering Terminology, , IEEE STd. 610.12; Gaudel, M.-C., Testing can be formal, too (1995) Proceedings of Theory and Practice of Software Development (TAPSOFT 1995), 915, pp. 82-96. , Aarhus, Denmark, May 1995 (Lecture Notes in Computer Science). Springer: Berlin; Koufareva, I., Petrenko, A., Yevtushenko, N., Test generation driven by user-defined fault models (1999) Proceedings of the 12th IFIP International Workshop on Testing of Communicating Systems (IWTCS 1999), pp. 215-236. , Budapest, Hungary, September 1999. Kluwer Academic: Norwell, MA; Hamlet, D., Predicting dependability by testing (1996) Proceedings of the 1996 International Symposium on Software Testing and Analysis (ISSTA 1996), pp. 84-91. , San Diego, CA, January 1996. ACM Press: New York; Basili, V.R., Selby, R.W., Hutchens, D.H., Experimentation in software engineering (1986) IEEE Transactions on Software Engineering, 12 (7), pp. 733-743; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslén, A., (2000) Experimentation in Software Engineering: An Introduction, , Kluwer Academic: Norwell, MA; Lyu, M.R., (1996) Handbook of Software Reliability Engineering, , (ed.). McGraw-Hill: New York; Eggers, B., Belli, F., A theory on analysis and construction of fault-tolerant systems (in German) (1984) Proceedings, Informatik-Fachberichte, pp. 139-149. , Bonn, September 1984. Springer: Berlin; Belli, F., Grosspietsch, K.-E., Specification of fault-tolerant system issues by predicate/transition nets and regular expressions: Approach and case study (1991) IEEE Transactions on Software Engineering, 17 (6), pp. 513-526; Nissanke, N., Dammag, H., Design for safety in Safecharts with risk ordering of states (2002) Safety Science, 40 (9), pp. 753-763; Williams, T.W., Parker, K.P., Design for testability: A survey (1982) IEEE Transactions on Computers, 31 (1), pp. 2-15; Harel, D., Statecharts: A visual formalism for complex systems (1987) Science of Computer Programming, 8 (3), pp. 231-274; Kim, Y.G., Hong, H.S., Bae, D.H., Cha, S.D., Test cases generation from UML state diagrams (1999) IEE Proceedings - Software, 146 (4), pp. 187-192; Briand, L., Labiche, Y., A UML-based approach to system testing (2002) Software and System Modeling, 1 (1), pp. 10-42; Gutzeit, Th., Testcase generation from statecharts to validate graphical user interfaces (in German) (2003), Masters Thesis, University of Paderborn, Angewandte Datentechnik; Schneider, F.B., Implementing fault-tolerant services using the state machine approach: A tutorial (1990) ACM Computing Surveys, 22 (4), pp. 299-319; Raju, S.C.V., Shaw, A.C., A prototyping environment for specifying, executing and checking communicating real-time state machines (1994) Software - Practice and Experience, 24 (2), pp. 175-195","Belli, F.; Department of Computer Science, Warburger Strasse 100, D-33098 Paderborn, Germany; email: belli@upb.de",,,,,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Article,"Final","",Scopus,2-s2.0-33644775514
"Xie Q.","35761589700;","Developing cost-effective model-based techniques for GUI testing",2006,"Proceedings - International Conference on Software Engineering","2006",,,"997","1000",,24,"10.1145/1134285.1134473","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34247126594&doi=10.1145%2f1134285.1134473&partnerID=40&md5=47856051bd10b249acd128e588bb0a94","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Xie, Q., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Most of today's software users interact with the software through a, graphical user interface (GUI). While GUIs have become ubiquitous, testing of GUIs has remained until recently, a neglected research area. Existing GUI testing techniques are extremely resource intensive primarily because GUIs have very large input spaces. This research proposes to advance the state-of-the-art in GUI testing by empirically studying GUI faults, interactions between GUI events, why certain event interactions lead to faults, and use the results of these studies to develop cost-effective model-based GUI testing techniques. The novel feature of this research will be a reduced model of the GUI's event-interaction space. The model will be derived automatically from the GUI; it will be used to automatically generate focused GUI test cases that are effective at detecting GUI faults. The model will be extended to develop new test oracles, new coverage criteria for GUIs, and new regression testing techniques. Moreover, this research will empirically evaluate the developed techniques.","Experimentation; Human factors; Reliability; Verification","Cost effectiveness; Mathematical models; Regression analysis; Reliability; Verification; Event interaction space; Experimentation; Human factors; Oracles; Graphical user interfaces",,,,,,,,"Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, volume 2 of SPECIAL SESSIONS: Demonstrations, p. 1042; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing? (2003) Proceedings of the IEEE International Conference on Automated Software Engineering (ASE'03), pp. 164-173; Memon, A.M., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) Proceedings of The International Conference on Automated Software. Engineering 2004 (ASE'04), pp. 186-195; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of gui test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; Mulligan, R.M., Altom, M.W., Simkin, D.K., User interface design in the trenches: Some tips on shooting from the hip (1991) Proceedings of ACM CHI'91 Conference on Human Factors in Computing Systems, pp. 232-236. , Practical Design Methods; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of The Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , June; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121. , Oct; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications (2005) Proceedings of The International Conference on Software Maintenance 2005 (ICSM'05), pp. 473-482","Xie, Q.; Department of Computer Science, , College Park, MD 20742, United States; email: Uqing@cs.umd.edu",,"ACM Special Interest Group on Software Engineering, SIGSOFT","IEEE Computer Society","28th International Conference on Software Engineering 2006, ICSE '06","20 May 2006 through 28 May 2006","Shanghai",69469,02705257,1595933751; 9781595933751,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-34247126594
"Memon A.M.","35599876500;","Employing user profiles to test a new version of a GUI component in its context of use",2006,"Software Quality Journal","14","4",,"359","377",,6,"10.1007/s11219-006-0040-7","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33749595443&doi=10.1007%2fs11219-006-0040-7&partnerID=40&md5=61968cdf99a4d76bd42bc68f2660f236","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Advancement in reusable component technology has had a significant impact on the development of complex graphical user interfaces (GUIs), which are front-ends to most of today's software. Software developers can, with very little effort, integrate components into their software's GUI. Problems, however, arise when new versions of GUI components replace their predecessors in an implementation. Often, the inclusion of a new version of a component breaks some part of the software, i.e., tasks that end-users were able to perform before modifications were made can no longer be performed. Software developers (who also happen to be component users) are unable to perform adequate regression testing in this context because of several factors, including lack of source code, environmental side-effects on GUI rendering, event-driven nature of GUIs, and large number of possible permutations of events. This paper presents a new technique that end-users' quality assurance (QA) teams can employ to test the new version of a component in its application context by using the existing version as a baseline. The technique combines lightweight event-level dynamic profiling to collect user profiles in a transparent manner, GUI reverse engineering to extract the structure of the component's GUI, test case execution to replay the collected profiles on the new version, and GUI oracles that collect properties from the existing version. Empirical studies demonstrate the practicality, usefulness, and limitations of the technique. © Springer Science + Business Media, LLC 2006.","Automated testing; GUI testing; Software components; Test oracles; User profiles; User session data","Quality assurance; Reverse engineering; Software testing; Automated testing; GUI testing; Software component; Test oracles; User profile; User sessions; Graphical user interfaces",,,,,"National Science Foundation, NSF: CCF-0447864

Office of Naval Research, ONR: N00014-05-1-0421","Acknowledgements The authors thank the anonymous reviewers whose comments played an important role in reshaping the empirical studies and discussion of related work. The authors also thank Qing, Xie, Adithya Nagarajan and Ishan Banerjee who helped to lay the foundation for this research. This work was partially supported by the US National Science Foundation under NSF grant CCF-0447864 and the Office of Naval Research grant N00014-05-1-0421.",,"(2003) Abbot Java GUI Test Framework, , http://abbot.sourceforge.net; Bertolino, A., Polini, A., A framework for component deployment testing (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 221-231. , IEEE Computer Society; Beydeda, S., Gruhn, V., (2001) An Integrated Testing Technique for Component-based Software; (2003) Capture-replay Tool, , http://soft.com/; Dawson, S., Jahanian, F., Mitton, T., Tung, T.-L., Testing of fault-tolerant and real-time distributed systems via protocol fault Injektion (1996) Symposium on Fault-Tolerant Computing, pp. 404-414; Dillon, L.K., Ramakrishna, Y.S., Generating oracles from your favorite temporal logic specifications (1996) ACM Software Engineering Notes, 21, pp. 106-117. , Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering (New York), acknowledgementsol ACM Press; Dillon, L.K., Yu, Q., Oracles for checking temporal properties of concurrent systems (1994) Proceedings of the ACM SIGSOFT '94 Symposium on the Foundations of Software Engineering, pp. 140-153; Finsterwalder, M., Automating acceptance tests for gui applications in an extreme programming environment (2001) Proceedings of the 2nd International Conference on EXtreme Programming and Flexible Processes in Software Engineering, pp. 114-117; Hamlet, D., Mason, D., Woit, D., Theory of software reliability based on components (2001) Proceedings of the 23rd International Conference on Software Engineering, pp. 361-370. , IEEE Computer Society; Haraty, R.A., Mansour, N., Daou, B., Regression testing of database applications (2001) Proceedings of the 2001 ACM Symposium on Applied Computing, pp. 285-289. , ACM Press; Harrold, M.J., Testing: A roadmap (2000) Proceedings of the Conference on the Future Software Engineering, pp. 61-72. , ACM Press; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Special Sessions: Demonstrations, 2, p. 1042. , Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting; Huang, Y.-W., Huang, S.-K., Lin, T.-P., Tsai, C.-H., Web application security assessment by fault injection and behavior monitoring (2003) Proceedings of the Twelfth International Conference on World Wide Web, pp. 148-159. , ACM Press; Jeon, T., Seung, H.W., Lee, S., Embedding built-in tests in hot spots of an object-oriented framework (2002) SIGPLAN Not., 37 (8), pp. 25-34; http://junit.org/news/extension/gui/index.htm; Korel, B., Black-box understanding of COTS components (1999) Proceedings: Seventh International Workshop on Program Comprehension, pp. 92-99. , IEEE Computer Society Press; Kranitis, N., Paschalis, A., Gizopoulos, D., Zorian, Y., Effective software self-test methodology for processor cores (2002) Proceedings of the Conference on Design, Automation and Test in Europe, p. 592. , IEEE Computer Society; Krstic, A., Lai, W.C., Cheng, K.T., Chen, L., Dey, S., Embedded software-based self-testing for soc design (2002) Proceedings of the 39th Conference on Design Automation, pp. 355-360. , ACM Press; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31; Lee White, H.A., Alzeidi, N., User-based testing of gui sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63; Lu, G., Automatic testing for the applications with direct manipulation interfaces (1991) Congress II: Design and Implementation of Interactive Systems: Software Engineering - Methods, Techniques and Tools; Applications of Techniques and Tools, 1, pp. 602-606. , Proceedings of the Fourth International Conference on Human-Computer Interaction; Marick, B., Bypassing the GUI (2002) Software Testing and Quality Engineering Magazine, pp. 41-47; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving GUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8) (NY), pp. 30-39; Memon, A.M., Pollack, M.E., Soffa, M.L., Plan generation for GUI testing (2000) Proceedings of the Fifth International Conference on Artificial Intelligence Planning and Scheduling, pp. 226-235. , AAAI Press; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Soffa, M.L., Regression testing of guis (2003) Proceedings of the 9th European Software Engineering Conference Held Jointly with 10th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 118-127. , ACM Press; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267; Memon, A.M., Xie, Q., Using transient/persistent errors to develop automated test oracles for event-driven software (2004) Proceedings of the International Conference on Automated Software Engineering 2004 (ASE'04), pp. 186-195; Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 884-896; (2003) Mercury Interactive WinRunner, , http://www.mercuryinteractive.com/products/winrunner; Morris, J., Lam, P., Lee, G., Parker, K., Bundell, G.A., Determining component reliability using a testing index (2002) Proceedings of the Twenty-fifth Australasian Conference on Computer Science, pp. 167-176. , Australian Computer Society, Inc; Myers, B.A., Why are human-computer interfaces difficult to design and implement? (1993) Technical Report, CS-93-183. , Carnegie Mellon University, School of Computer Science; Nagarajan, A., Memon, A.M., Refactoring using event-based profiling of GUI applications (2003) Proceedings of the First International Workshop on REFactoring: Achievements, Challenges, Effects 2003; Onoma, A.K., Tsai, W.-T., Poonawala, M., Suganuma, H., Regression testing in an industrial environment (1998) Commun. ACM, 41 (5), pp. 81-86; Orso, A., Harrold, M.J., Rosenblum, D.S., Component metadata for software engineering tasks (2001) Revised Papers from the Second International Workshop on Engineering Distributed Objects, pp. 129-144. , Springer-Verlag; Orso, A., Harrold, M.J., Rosenblum, D.S., Rothermel, G., Soffa, M.L., Do, H., Using component metadata to support the regression testing of component -based software (2001) Proceedings of the IEEE International Conference on Software Maintenance; (2003), http://www.rational.com.ar/tools/robot.html; Richardson, D.J., Leif-Aha, S., Omalley, T.O., Specification-based test oracles for reactive systems (1992) Proceedings of the 14th International Conference on Software Engineering, pp. 105-118; Sparling, M., Lessons learned through six years of component-based development (2000) Communication ACM, 43 (10), pp. 47-53; Ulrich, A., Chrobok-Diening, G., International workshop on testing distributed component-based systems (1999) SIGSOFT Software Engineering Notes, 24 (4), pp. 43-46; Vitharana, P., Risks and challenges of component-based software development (2003) Communication ACM, 46 (8), pp. 67-72; Voas, J., Charron, F., McGraw, G., Miller, K., Friedman, M., Predicting how badly ""good"" software can behave (1997) IEEE Software, 14 (4), pp. 73-83; Voas, J., Payne, J., Cots software failures: Can anything be done? (1998) Proceedings of the First IEEE Workshop on Application Specific Software Engineering and Technology (ASSET'98), pp. 140-145. , IEEE Press; White, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, pp. 350-358. , Washington, Nov.4-8; Wittenberg, C.H., Progress in testing component-based software (2000) Proceedings of the International Symposium on Software Testing and Analysis, p. 178. , ACM Press; Xie, Q., Memon, A.M., Rapid crash testing for continuously evolving GUI-based software applications (2005) Proceedings of the International Conference on Software Maintenance 2005 (ICSM'05), , Budapest, Hungary; Xie, Q., Memon, A.M., Designing and comparing automated test oracles for GUI-based software applications ACM Transactions on Software Testing and Methodology, , to appear; Zhao, W., Papachristou, C., Testing dsp cores based on self-test programs (1998) Proceedings of the Conference on Design, Automation and Test in Europe, pp. 166-172. , IEEE Computer Society","Memon, A.M.; Department of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,,"Kluwer Academic Publishers",,,,,09639314,,,,"English","Softw. Qual. J.",Article,"Final","",Scopus,2-s2.0-33749595443
"Limpiyakorn Y., Wongsuttipakorn P.","56032668700;26031751900;","GUI test case generation from UML",2005,"Proceedings of the 2005 International Conference on Software Engineering Research and Practice, SERP'05","1",,,"323","329",,,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-60749096388&partnerID=40&md5=d4fecd07d3617fd2aad6f6d329499430","Department of Computer Engineering, Chulalongkorn University, Phyathai Rd., Bangkok 10330, Thailand","Limpiyakorn, Y., Department of Computer Engineering, Chulalongkorn University, Phyathai Rd., Bangkok 10330, Thailand; Wongsuttipakorn, P., Department of Computer Engineering, Chulalongkorn University, Phyathai Rd., Bangkok 10330, Thailand","Graphical User Interfaces (GUIs) provide a friendly means to communicate with underlying software systems. However, they complicate the testing process. One of the major problems is a large number of test cases due to GUI enormous states of transitions. In this paper, we propose a task-based approach to generate GUI test cases from Unified Modeling Language (UML). Each test case represents a task of the system. A task is defined as a sequence of use cases or operators. An operator is mapped onto a sequence of GUI events. The resulting test case is in XML format of which an operator is a reusable component. The technique generates GUI test cases from Use Case diagram along with Use Case description, Window Navigation diagram, and Activity diagram. UML is the standard notation for modeling object-oriented analysis and design. Generating test cases from UML design document ensures the testing of valid requirements, as well as enables test case generation at the early stage of a software development lifecycle.","GUI testing; Test case generation; UML","Engineering research; Markup languages; Object oriented programming; Software engineering; Software testing; Telecommunication services; Testing; Unified Modeling Language; Activity diagrams; Case descriptions; GUI testing; Object-oriented analysis and designs; Reusable components; Software development life cycles; Software systems; Standard notations; Task-based approaches; Test case; Test case generation; Testing process; UML; UML designs; Unified modeling; Use case diagrams; Xml formats; Graphical user interfaces",,,,,,,,"Memon, A.M., GUI Testing: Pitfalls and Process (2003) IEEE Computer, 6 (3), pp. 27-33. , September; OMG Unified Modeling Language Specification, March 2003, Version 1.5, formal/03-03-01, An Adopted Formal Specification of the Object Management Group, Inc; Wang, L., Yuan, J., Yu, X., Hu, J., Li, X., Zheng, G., Generating Test Cases from UML Activity Diagram based on Gray-Box Method (2004) Proc. 11th Asia-Pacific Software Engineering Conference, pp. 284-291. , Busan, Korea; Kim, Y.G., Hong, H.S., Bae, D.H., Cha, S.D., Test cases generation from UML state diagrams (1999) Software, IEE Proceedings, 146 (4), pp. 187-192. , August; Fraikin, F., Leonhardt, T., SeDiTeC - Testing Based on Sequence Diagrams (2002) Proc. ASE 2002. 17th IEEE International Conference on Automated Software Engineering, pp. 261-266; Phillips, C., Kemp, E., Mei Kek, S., Extending UML Use Case Modeling to Support Graphical User Interface Design (2001) Proc. 13th Australian Conference on Software Engineering, pp. 48-57. , Canberra, Australia; Memon, A.M., Pollack, M.E., Lou Soffa, M., Plan Generation for GUI Testing (2000) Proc. 5th International Conference on Artificial Intelligence Planning and Scheduling, pp. 226-235. , Breckenridge, CO, USA; Arciniegas, F., (2001) XML Developer's Guide, , McGraw-Hill, Reading, USA; Richard K. Shehady and Daniel P. Siewiorek, A Method to Automate User Interface Testing Using Variable Finite State Machines. Proc. 27th Annual International Symposium on Fault-Tolerant Computing, Seattle, WA, USA, 1997, 80-88; Atif, M., Memon. GUITAR - A GUI Testing Framework, , http://www.cs.umd.edu/~atif/GUITARWeb, October 2003","Limpiyakorn, Y.; Department of Computer Engineering, Phyathai Rd., Bangkok 10330, Thailand",,,,"2005 International Conference on Software Engineering Research and Practice, SERP'05","27 June 2005 through 30 June 2005","Las Vegas, NV",75428,,9781932415490,,,"English","Proc. Int. Conf. Softw. Eng. Res. Pract., SERP",Conference Paper,"Final","",Scopus,2-s2.0-60749096388
"Belli F., Budnik C.J.","57200611344;8958239900;","Towards self-testing of component-based software",2005,"Proceedings - International Computer Software and Applications Conference","2",, 1508111,"205","210",,4,"10.1109/COMPSAC.2005.158","https://www.scopus.com/inward/record.uri?eid=2-s2.0-34248519254&doi=10.1109%2fCOMPSAC.2005.158&partnerID=40&md5=639b126714035100bf6dedea3a9ca2f3","Dept. of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Germany","Belli, F., Dept. of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Germany; Budnik, C.J., Dept. of Computer Science, Electrical Engineering and Mathematics, University of Paderborn, Germany","It is widely accepted that conventional test methods are not necessarily adequate for testing of component-based software (CBS). As a consequence, also conventional test tools cause similar problems for the test automation of CBS based on their graphical user interfaces (GUI), because for any level of user-focused testing domain knowledge and knowledge about the implementation of the CBS are essential to run the tests. The component manufacturer, on the other side, is usually not willing to deliver the code to protect his, or her, commercial interest. For solving this conflict, this paper introduces a framework for the automation of user-oriented component testing that significantly reduces the test costs. The concept is based on black-box testing techniques and utilizes the common features of commercial capture/replay test tools. © 2005 IEEE.",,"Automation; Codes (symbols); Computer aided software engineering; Graphical user interfaces; Problem solving; Component manufacturers; Component testing; Domain knowledge; Software testing",,,,,,,,"Binder, R.V., (2000) Testing Object-Oriented Systems, , Addison-Wesley; S www.lsbu.ac.uk/~nissanke. Beydeda, V. Gruhn, Testing Commercial-off-the-Shelf Components and Systems, Springer, Berlin, 2005; Gao, J.Z., Tsao, J.H.-S., Wu, Y., (2003) Testing and Quality Assurance for Component-based Software, , Artech House; D. R. Rosenblum, Adequate Testing of Component-Based Software, Dept of Comp. Science, Univ. of California, Irvine, TR UCI-ICS-97-34, Aug. 1997; Groß, H.G., (2004) Component-Based Software Testing with UML, , Berlin, Springer; Weyuker, E.J., The Trouble with Testing Components (2001) Component-Based Software, , Engineering, Heineman and Councill Eds, Addison-Wesley; Offutt, J., Shaoying, L., Abdurazik, A., Ammann, P., Generating Test Data From State-Based Specifications (2003) The Journal of Software Testing, Verification and Reliability, 13 (1), pp. 25-53; Parnas, D.L., On the Use of Transition Diagrams in the Design of User Interface for an Interactive Computer System (1969) Proc. 24th ACM Nat'l. Conf, pp. 379-385; Belli, F., Budnik, C.J., Minimal Spanning Set for Coverage Testing of Interactive Systems (2004) LNCS, 3407, pp. 220-235. , The First International Colloquium on Theoretical Aspects and Computing ICTAC, Springer Verlag, pp; Briand, L., Labiche, Y., A UML-Based Approach to System Testing (2002) Software and System Modeling, 1, pp. 10-42; Azulay, A., Automated Testing for X Applications (1993) The X Journal, pp. 67-70. , May-June, pp; Beydeda, S., (2003) The Self-Testing COTS Components (STECC) Method, , Dissertation, University of Leipzig; Memon, A.M., Soffa, M.L., Regression testing of GUIs, ESEC (2003) SIGSOFT FSE, pp. 118-127; OMG Unified Modelling Language Specification, Version 1.5, formal/03-03-01, 2003; (1998) Extensible Markup Language (XML) 1.0. World Wide Web Consortium (W3C), , http://www.w3.org/TR/REC-xml, T. Bray et.al, ed, February; WinRunner, (2004) Mercury Interactive, , http://www.mercuryinteractive.com, Version Oct","Belli, F.; Dept. of Computer Science, Electrical Engineering and Mathematics, Germany; email: belli@adt.upb.de",,"IEEE Computer Society",,"29th Annual International Computer Software and Applications Conference, COMPSAC 2005","26 July 2005 through 28 July 2005","Edinburgh, Scotland",68524,07303157,0769522092; 9780769522098,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-34248519254
"Paiva A.C.R., Faria J.C.P., Tillmann N., Vidal R.A.M.","7102683763;35219959000;8954553000;19640884400;","A model-to-implementation mapping tool for automated model-based GUI testing",2005,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","3785 LNCS",,,"450","464",,45,"10.1007/11576280_31","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646774696&doi=10.1007%2f11576280_31&partnerID=40&md5=3c39181aa7afdaac7af1800f82809872","Engineering Faculty, University of Porto, Portugal; INESC, Porto Rua Dr. Roberto Prias, s/n, 4200-465 Porto, Portugal; Microsoft Research, One Microsoft Way, Redmond, WA 98052, United States","Paiva, A.C.R., Engineering Faculty, University of Porto, Portugal; Faria, J.C.P., Engineering Faculty, University of Porto, Portugal, INESC, Porto Rua Dr. Roberto Prias, s/n, 4200-465 Porto, Portugal; Tillmann, N., Microsoft Research, One Microsoft Way, Redmond, WA 98052, United States; Vidal, R.A.M., Engineering Faculty, University of Porto, Portugal","This paper presents extensions to Spec Explorer to automate the testing of software applications through their GUIs based on a formal specification in Spec#. Spec Explorer, a tool developed at Microsoft Research, already supports automatic generation and execution of test cases for API testing, but requires that the actions described in the model are bound to methods in a .Net assembly. The tool described in this paper extends Spec Explorer to automate GUI testing: it adds the capability to gather information about the physical GUI objects that are the target of the user actions described in the model; and it automatically generates a .Net assembly with methods that simulate those actions upon the GUI application under test. The GUI modelling and the overall test process supported by these tools are described. The approach is illustrated with the Notepad application. © Springer-Verlag Berlin Heidelberg 2005.",,"Automatic generation; Mapping tool; Software applications; Computer simulation; Conformal mapping; Formal logic; Graphical user interfaces; Mathematical models; Specifications; Computer aided software engineering",,,,,,,,"Belli, F., Finite state testing and analysis of graphical user interfaces (2001) ISSRE 2001 - the 12th International Symposium on SW Reliability Engineering, , Hong Kong; Campbell, C., Grieskamp, W., Nachmanson, L., Schulte, W., Tillmann, N., Veanes, M., (2005) Model-based Testing of Object-Oriented Reactive Systems with Spec Explorer, , Microsoft Research MSR-TR-2005-59, May; Barnett, M., Leino, K.R.M., Schulte, W., The spec# programming system: An overview (2004) CASSIS'04 - International Workshop on Construction and Analysis of Safe, Secure and Interoperable Smart Devices, , Marseille; Paiva, A.C.R., Tillmann, N., Faria, J.C.P., Vidal, R.F.A.M., Modeling and testing hierarchical GUIs (2005) ASM 2005 - 12th International Workshop on Abstract State Machines, , Paris - France; Gurevich, Y., Evolving algebras 1993: Lipari guide (1995) Specification and Validation Methods, pp. 9-36. , E. Brger, Ed.: Oxford University Press; Grieskamp, W., Gurevich, Y., Schulte, W., Veanes, M., Generating finite state machines from abstract state machines (2002) ISSTA 2002, , International Symposium on SW Testing and Analysis; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) 8th European SW Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of SW Engineering (FSE-9); Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) 27th International Symposium on Fault-tolerant Computing; Fujiwara, S., Bochmann, G.V., Khendek, F., Amalou, M., Ghedamsi, A., Test selection based on finite state models (1991) IEEE Transactions on SW Engineering, 17, pp. 591-603; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on SW Engineering, 27; Memon, A., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) WCRE2003 - the 10th Working Conference on Reverse Engineering, , Victoria, British Columbia, Canada","Paiva, A.C.R.; Engineering Faculty, , Porto, Portugal; email: apaiva@fe.up.pt",,,,"7th International Conference on Formal Engineering Methods, ICFEM 2005","1 November 2005 through 4 November 2005","Manchester",67365,03029743,3540297979; 9783540297970,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-33646774696
"Vieira M.","7202140705;","Invited presentation II: Experiences in applying model based system testing generation",2005,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","3713 LNCS",,,"430","",,,"10.1007/11557432_32","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646199625&doi=10.1007%2f11557432_32&partnerID=40&md5=0211cf8e43ab73b401d4ae589f5bbd14","Siemens Corporate Research, United States","Vieira, M., Siemens Corporate Research, United States","The goal of this presentation is to illustrate the benefits of using an automated, model-based approach for improving system test design and generation. Our approach, TDE/UML, automatically generates system tests from behavioral models of an application using the Unified Modeling Language (UML.). TDE/UML builds on and combines existing techniques for data coverage and graph coverage. We focus here on the results of applying TDE/UML in diverse Siemens projects: its cost benefits and its fault detection capabilities. System testing, which ensures the functional compliance of an application with its requirements, is a well-defined process within Siemens. However, in many cases, it remains a manual process. Test designers typically derive their system input and expected output information from a variety of sources including textual use case specification and business process rules. They then create a set of test procedures comprising of individual test steps, which are executed manually by test executors against the system under test. Whenever an automated test environment is available, these test executors are also responsible for translating these textual test procedures into executable test scripts. To automate and formalize this process as much as possible, our research uses model based system test generation. Our approach makes use of UML Use Case diagrams to describe the relationship among the diverse use cases implemented by the system and the actors who interact with the system through those use cases. UML activity diagrams are used to model the logic captured by a single use case and between use cases. The set of activity diagrams represents the overall behavior specified for the system and it is the basis for testing the different functionalities and business rules described in the use cases specification. Tests are automatically generated from those models following three phases. During the first phase, a test designer manually annotates the UML models based on SCR Test Specification Language (TSL), which implements the category-partition methodology. In the second phase, the test generation tool (TDE/UML) automatically creates a set of textual test procedures (test cases) or executable test scripts. In the third phase, a test executor runs these against the system under test using a commercial UI testing tool. © Springer-Verlag Berlin Heidelberg 2005.",,"TDE; Test generation tool; Test Specification Language; Testing tool; Textual use case; Unified Modeling Language; Computer graphics; Computer programming languages; Computer simulation; Mathematical models; Automatic programming",,,,,,,,,"Vieira, M.; Siemens Corporate Research, Princeton, NJ, United States; email: marlon.vieira@siemens.com",,"ACM Special Interest Group on Software, SIGSOFT;IEEE Computer Society;Microsoft Corporation;IBM;Digicel Jamaica",,"8th International Conference on Model Driven Engineering Languages and Systems, MoDELS 2005","2 October 2005 through 7 October 2005","Montego Bay",67236,03029743,3540290109; 9783540290100,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-33646199625
"Berstel J., Reghizzi S.C., Roussel G., San Pietro P.","6701559693;55663318300;8693244600;6602653537;","A scalable formal method for design and automatic checking of user interfaces",2005,"ACM Transactions on Software Engineering and Methodology","14","2",,"124","167",,26,"10.1145/1061254.1061256","https://www.scopus.com/inward/record.uri?eid=2-s2.0-30544450684&doi=10.1145%2f1061254.1061256&partnerID=40&md5=6cbf2057e08e1c1700432d7d6b87ed4b","Institut Gaspard-Monge, Université de Marne-la-Vallée, France; Politecnico di Milano, Italy; Institut Gaspard-Monge, Université de Marne-la-Vallée, 5, Bd Descartes, 77454 Marne-la-Vallée Cedex 2, France; Dipartimento de Elettronica e Informazione, Politecnico di Milano, P.zza Leonardo da Vinci, 32, 20133 Milano, Italy","Berstel, J., Institut Gaspard-Monge, Université de Marne-la-Vallée, France, Institut Gaspard-Monge, Université de Marne-la-Vallée, 5, Bd Descartes, 77454 Marne-la-Vallée Cedex 2, France; Reghizzi, S.C., Politecnico di Milano, Italy, Dipartimento de Elettronica e Informazione, Politecnico di Milano, P.zza Leonardo da Vinci, 32, 20133 Milano, Italy; Roussel, G., Institut Gaspard-Monge, Université de Marne-la-Vallée, France, Institut Gaspard-Monge, Université de Marne-la-Vallée, 5, Bd Descartes, 77454 Marne-la-Vallée Cedex 2, France; San Pietro, P., Institut Gaspard-Monge, Université de Marne-la-Vallée, France, Dipartimento de Elettronica e Informazione, Politecnico di Milano, P.zza Leonardo da Vinci, 32, 20133 Milano, Italy","The article addresses the formal specification, design and implementation of the behavioral component of graphical user interfaces. The complex sequences of visual events and actions that constitute dialogs are specified by means of modular, communicating grammars called VEG (Visual Event Grammars), which extend traditional BNF grammars to make them more convenient to model dialogs. A VEG specification is independent of the actual layout of the GUI, but it can easily be integrated with various layout design toolkits. Moreover, a VEG specification may be verified with the model checker SPIN, in order to test consistency and correctness, to detect deadlocks and unreachable states, and also to generate test cases for validation purposes.Efficient code is automatically generated by the VEG toolkit, based on compiler technology. Realistic applications have been specified, verified and implemented, like a Notepad-style editor, a graph construction library and a large real application to medical software. It is also argued that VEG can be used to specify and test voice interfaces and multimodal dialogs. The major contribution of our work is blending together a set of features coming from GUI design, compilers, software engineering and formal verification. Even though we do not claim novelty in each of the techniques adopted for VEG, they have been united into a toolkit supporting all GUI design phases, that is, specification, design, verification and validation, linking to applications and coding. © 2005 ACM.","Applications of model checking; GUI design; Human-computer interaction (HCI)","Application of model checking; Compliers; Graphical user interfaces (GUI) design; Computer software; Human computer interaction; Software engineering; Specifications; Graphical user interfaces",,,,,,,,"Abowd, G.D., Wang, H.-M., Monk, A.F., A formal technique for automated dialogue development (1995) Proceedings of the First Symposium of Designing Interactive Systems (DIS'95), pp. 219-226. , (Aug.), ACM, New York; Complete Language Translation Solutions, , http://www.antlr.org; Ball, T., Rajamani, S.K., The SLAM toolkit (2001) Proceedings of the 13th Conference on Computer-aided Verification (CAV2001), 2102, pp. 260-264. , (Paris, France, July 18-23). Lecture Notes in Computer Science. Springer-Verlag, New York; Ball, T., Colby, C., Danielsen, P., Jagadeesan, L., Jagadeesan, R., Laufer, K., Mataga, P., Rehor, K., SISL: Several interfaces, single logic (2000) Internat. J. Speech Tech., 3 (2), pp. 93-108; Bastide, R., Palanque, P., A Petri net based environment for the design of event-driven interfaces (1995) 16th Int. Conference on Application and Theory of Petri Nets (ATPN'95), pp. 20-22. , Torino, Italy. June 1995; De Michelis, G., Diaz, M., Lecture Notes in Computer Science, 935, pp. 66-83. , Springer-Verlag, New York; Berry, G., Cosserat, L., The ESTEREL synchronous programming language and its mathematical semantics (1984) Seminar on Concurrency, 197, pp. 389-448. , A. W., Roscoe, G., Winskel, and S. D., Brookes, Eds. Lecture Notes in Computer Science, Springer-Verlag, New York; Berstel, J., (1979) Rational Transductions and Context-free Languages, , B. G. Teubner, Stuttgart; Berstel, J., Crespi Reghizzi, S., Roussel, G., San Pietro, P., A scalable formal method for design and automatic checking of user interfaces (2001) Proceedings of the 23rd International Conference on Software Engineering (ICSE 2001), pp. 453-462. , (Toronto, Ont. Canada, May 12-19). IEEE, New York; Bolt, R.A., Put-that-there: Voice and gesture at the graphics interface (1980) ACM Comput. Graph., 14 (3), pp. 262-270; Brun, P., XTL: A temporal logic for the formal development of interactive systems (1997) Formal Methods in Human-computer Interaction, pp. 121-139. , P., Palanque and F., Paternò, Eds. Springer-Verlag, New York; Bumbulis, P., Alencar, P.S.C., Cowan, D.D., Lucenan, C.J.P., Validating properties of component-based graphical user interfaces (1996) Proceedings of 3rd Eurographics Workshop on Design. Specification and Verification of Interactive Systems, pp. 347-365. , F., Bodart and J., Vanderdonckt, Eds. Springer-Verlag, New York; Campi, A., (2000) Design and Verification of GUIs by Syntactical Methods (in Italian), , Master Thesis, Politecnico di Milano, Italy, Dec. 2000; Campos, J.C., Harrison, M.D., Formally verifying interactive systems: A review (1997) Proceedings of 4th Eurographics Workshop on Design, Specification and Verification of Interactive Systems, pp. 109-124. , June 1997, M. D., Harrison and J. C., Torres, Eds., Springer-Verlag, New York; Campos, J.C., Harrison, M.D., Model checking interactor specifications (2001) Automat. Softw. Eng., 8 (3-4), pp. 275-310. , Aug; Carlsson, M., Hallgren, T., (1998) Fudgets - Purely Functional Processes with Applications to Graphical User Interfaces, , Ph.D. dissertation. Computing Science Department, Chalmers University of Technology and University of Göteborg. March 1998; Churcher, G.E., Atwell, E.S., Souter, C., (1997) Dialogue Management Systems: A Survey and Overview, , Report 97.06, University of Leeds, School of Computer Studies, Leeds, UK; Clarke, E.M., Emerson, A., Sistla, A.P., Automatic verification of finite-state concurrent systems using temporal logic specifications (1986) ACM TOPLAS, 8 (2), pp. 244-263; Clarke, E.M., Grumberg, O., Long, D.E., Model checking and abstraction (1994) ACM TOPLAS, 16 (5), pp. 1512-1542. , Sept; Cole, R., Mariani, J., Uszkoreit, H., Varile, G.B., Zaenen, A., Zampolli, A., Zue, V., (1996) Survey of the State of the Art in Human Language Technology, , Cambridge University Press; Corbett, J., Dwyer, M., Hatcliff, J., Pasareanu, C., Laubach, S., Zheng, H., Bandera: Extracting finite-state models from java source code (2000) Proceedings of the 22nd International Conference on Software Engineering (ICSE 2000), pp. 439-448. , Limerick, Ireland, June 4-11; D'Ausbourg, B., Durrieu, G., Roche, P., Deriving a formal model of an interactive system from its UIL description in order to verify and to test its behaviour (1996) Proceedings of the 3rd Eurographics Workshop on Design Specification and Verification of Interactive Systems, pp. 105-122. , (Namur, Belgium., June 5-7). F., Bodart and J., Vanderdonckt, Eds. Springer-Verlag, New York; Doherty, G., Campos, J.C., Harrison, M., Representational reasoning and verifications (2000) Form. Asp. Comput., 12 (4), pp. 260-277; Duke, D.J., Harrison, M.D., Abstract interaction objects (1993) Proceedings of EUROGRAPHICS 93; Hubbold, R.J., Juan, R., Computer Graphics Forum, 12 (3), pp. 26-36; Dwyer, M.B., Carr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) Proceedings of the 6th European Software Engineering Conference, pp. 244-261; Faconti, G., Paternò, F., An approach to the formal specification of the components of an interaction (1990) Proceedings of EUROGRAPHICS 90, pp. 481-494. , C., Vandoni and D., Duce, Eds; Fekete, J.D., Richard, M., Dragicevic, P., Specification and verification of interactors: A tour of esterel (1998) Formal Aspects of Human Computer Interaction Workshop (FAHCI'98), , (Sept.), Sheffield Hallam University, Sheffield, U.K; Foley, J.D., Interfaces for advanced computing (1987) Sci. Amer., 257 (4), pp. 127-135; Foley, J.D., Kim, W.C., Kovacevic, S., Murray, K., Defining interfaces at a high level of abstraction (1989) IEEE Softw., 6 (1), pp. 25-32; Gargantini, A., Heitmeyer, C., Using model checking to generate tests from requirements specifications (1999) Proceedings of the Joint 7th European Software Engineering Conference and 7th ACM SIGSOFT Information Symposium on Foundations of Software Eng. (ESECI FSE '99), 1687, pp. 146-162. , (Toulouse, France, Sept.). Lecture Notes in Computer Science, Springer-Verlag, New York; Godefroid, L., Jagadeesan, J., Jagadeesan, R., Laufer, K., Automated systematic testing for constraint-based interactive services (2000) Proceedings of the 8th International Symposium on the Foundations of Software Engineering (FSE'2000), pp. 40-49. , San Diego, Nov; Gray, W.D., Palanque, P., Paternó, F., Introduction to the special issue on interface issues and designs for safety-critical interactive systems: When there is no room for user error (1999) ACM Trans. Comput.-human. Inter., 6 (4), pp. 309-310; Green, M., Report on dialogue specification tools (1983) Proceedings of the Workshop on User Interface Management Systems, , (Seeheim, Germany, Nov. 1-3). G. E., Pfaff, Ed. Springer-Verlag, New York; Harel, D., Statecharts: A visual formalism for complex systems (1987) Sci. Comp. Progr., 8, pp. 231-274; Hartson, H.R., Hix, D., Human-computer interface development: Concepts and systems for its management (1989) ACM Comput. Surv., 21 (1), pp. 5-92; Hendricksen, C.S., Augmented state-transition diagrams for reactive software (1989) ACM SIGSOFT Software Engineering Notes, 14 (6), pp. 61-67; Hill, R.D., Supporting concurrency, communication and synchronization in human-computer interaction - The sassafras UIMS (1986) ACM Trans. Graph., 5 (3), pp. 179-210; Holzmann, G.J., The model checker SPIN (1997) IEEE Trans. Softw. Eng., 23 (5), pp. 279-295; Jacob, R.J.K., Using formal specifications in the design of a human-computer interface (1982) Proceedings of the 1982 Conference on Human Factors in Computer Systems, pp. 315-321. , (Gaithersburg, Md.) ACM, New York; Katayama, T., Translation of attribute grammars into procedures (1984) ACM Trans. Prog. Lang. Syst., 6 (3), pp. 345-369; Knuth, D.E., Semantics of context-free languages (1968) Math. Syst. Theory, 2 (2), pp. 127-145. , Correction in 1971: Math. Syst. Theory, 5, 1, 95-96; Larson, J.A., (2003) VoiceXML: Introduction to Developing Speech Applications, , Prentice-Hall, Englewood Cliffs, N.J; McGlashan, S., Towards multimodal dialogue management (1996) Proceedings of 11th Twente Workshop on Language Technology 11, 11. , Enschede, The Netherlands; Memon, A., Pollack, M., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the 8th International Symposium on the Foundations of Software Engineering (FSE 2000), pp. 30-39. , San Diego, Calif, Nov. 6-10; Nigay, L., Coutaz, J., A generic platform for addressing the multimodal challenge (1995) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 98-105. , (Denver, Colo.). ACM Press, New York; Norris, I.P.C., Dill, D., Better verification through symmetry (1996) Form. Meth. Syst. Des., 9 (1-2), pp. 41-75; Nymeyer, A., A grammatical specification of human-computer dialog (1995) Comput. Lang., 21 (1), pp. 1-16; Olsen Jr., D.R., Presentational, syntactic and semantic components of interactive dialogue specifications (1983) Proceedings of the Workshop on User Interface Management Systems, , (Seeheim, Germany, Nov. 1-3), G. E., Pfaff, Ed. Springer-Verlag, New York, 1985; Olsen Jr., D.R., Pushdown automata for user interface management (1984) ACM Trans. Graph., 3 (3), pp. 177-203; Palanque, P., Paternò, F., (1997) Formal Methods In Human-computer Interaction, , Springer-Verlag, New York; Paternò, F., Faconti, G., On the use of LOTOS to describe graphical interaction (1992) People and Computers VII: Proceedings of the HCI'92 Conference, pp. 155-173. , Cambridge University Press; Paternò, F., (1995) A Method for Formal Specification and Verification of Interactive Systems, , Ph.D. dissertation. Department of Computer Science, University of York; Peterson, J.L., (1981) Petri Net Theory and the Modelling of Systems, , Prentice-Hall, Englewood Cliffs N.J; Reisner, P., Formal grammar and human factor design of an interactive graphics system (1981) IEEE Trans. Softw. Eng., 7 (2), pp. 229-240; Shneidermann, B., Multiparty grammars and related features for defining interactive systems (1982) IEEE Trans. Syst. Man Cyber., 12 (2), pp. 148-154; Shneidermann, B., (1997) Designing the User Interface: Strategies for Effective Human-computer Interaction, 3rd Edition, , (July), Addison-Wesley, Reading, Mass; Shoemake, K., ARCBALL: A user interface for specifying three-dimensional orientation using a mouse (1992) Proceedings of Graphics Interface '92 Canadian Annual Conference, pp. 151-156; Van Den Boss, J., Abstract interaction tool: A language for user-interface management systems (1988) ACM Trans. Prog. Lang. Syst., 10, pp. 215-247","Berstel, J.; Institut Gaspard-Monge, 5, Bd Descartes, 77454 Marne-la-Vallée Cedex 2, France; email: berstel@univmlv.fr",,,,,,,,1049331X,,ATSME,,"English","ACM Trans. Software Eng. Methodol.",Article,"Final","",Scopus,2-s2.0-30544450684
"Memon A.M., Xie Q.","35599876500;35761589700;","Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software",2005,"IEEE Transactions on Software Engineering","31","10",,"884","896",,151,"10.1109/TSE.2005.117","https://www.scopus.com/inward/record.uri?eid=2-s2.0-30344472992&doi=10.1109%2fTSE.2005.117&partnerID=40&md5=e0f1422bb9b45ed0454c9b932a7c65c6","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Xie, Q., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Software is increasingly being developed/maintained by multiple, often geographically distributed developers working concurrently. Consequently, rapid-feedback-based quality assurance mechanisms such as daily builds and smoke regression tests, which help to detect and eliminate defects early during software development and maintenance, have become important. This paper addresses a major weakness of current smoke regression testing techniques, i.e., their inability to automatically (re)test graphical user interfaces (GUls). Several contributions are made to the area of GUI smoke testing. First, the requirements for GUI smoke testing are identified and a GUI smoke test is formally defined as a specialized sequence of events. Second, a GUI smoke regression testing process called Dally Automated Regression Tester (DART) that automates GUI smoke testing is presented. Third, the interplay between several characteristics of GUI smoke test suites including their size, fault detection ability, and test oracles is empirically studied. The results show that: 1) the entire smoke testing process is feasible in terms of execution time, storage space, and manual effort, 2) smoke tests cannot cover certain parts of the application code, 3) having comprehensive test oracles may make up for not having long smoke test cases, and 4) using certain oracles can make up for not having large smoke test suites. © 2005 IEEE.","Empirical studies; GUI testing; Regression testing; Smoke testing; Test oracles","Computer software maintenance; Concurrent engineering; Feedback control; Graphical user interfaces; Quality assurance; Regression analysis; Empirical studies; Regression testing; Smoke testing; Test oracles; Software engineering",,,,,"National Science Foundation, NSF: CCF0447864","The authors would like to thank the anonymous reviewers whose comments and suggestions greatly helped to improve the presentation of this paper. The authors also thank Adithya Nagaragan and Ishan Banerjee who helped to lay the foundation for this research. This work was partially supported by a grant from the US National Science Foundation (CCF0447864). A preliminary report of this work appeared in the Proceedings of the International Conference on Software Maintenence, 2004.",,"Memon, A.M., Xie, Q., ""Empirical Evaluation of the Fault-Detection Effectiveness of Smoke Regression Test Cases for GUI-Based Software"" (2004) Proc. Int'l Conf. Software Maintenance 2004 (ICSM '04), pp. 8-17. , Sept; Memon, A., Nagarajan, A., Xie, Q., ""Automating Regression Testing for Evolving GUI Software"" (2005) J. Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Memon, A.M., Banerjee, I., Nagarajan, A., ""GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing"" (2003) Proc. 10th Working Conf. Reverse Eng., pp. 260-269. , Nov; Memon, A.M., Pollack, M.E., Soffa, M.L., ""Hierarchical GUI Test Case Generation Using Automated Planning"" (2001) IEEE Trans. Software Eng., 27 (2), pp. 144-155. , Feb; Memon, A.M., Banerjee, I., Nagarajan, A., ""What Test Oracle Should I Use for Effective GUI Testing?"" (2003) Proc. IEEE Int'l Conf. Automated Software Eng., pp. 164-173. , Oct; Karlsson, E.-A., Andersson, L.-G., Leion, P., ""Daily Build and Feature Development in.Large Distributed Projects"" (2000) Proc. 22nd Int'l Conf. Software Eng., pp. 649-658; McConnell, S., ""Best Practices: Daily Build and Smoke Test"" (1996) IEEE Software, 13 (4), pp. 143-144. , July; Olsson, K., ""Daily Build - The Best of Both Worlds: Rapid Development and Control"" (1999), technical report, Swedish Eng. Industries; Robbins, J., (2000) Debugging Applications, , Microsoft Press; Halloran, T.J., Scherlis, W.L., ""High Quality and Open Source Software Practices"" (2002) Meeting Challenges and Surviving Success: Second Workshop Open Source Software Eng., , May; Marick, B., ""When Should a Test Be Automated?"" (1998) Proc. 11th Int'l Software/Internet Quality Week, , May; Crispin, L., House, T., Wade, C., ""The Need for Speed: Automating Acceptance Testing in an Extreme Programming Environment"" (2001) Proc. Second Int'l Conf. EXtreme Programming and Flexible Processes in Software Eng., pp. 96-104; ""WINE Daily Builds"" (2003), http://wine.dataparty.no/; ""Mozilla"" (2003), http://ftp.mozilla.org/; ""Open WebMail"" (2003), http://openwebmail.org/; ""Cruise Control"" (2003), http://cruisecontrol.sourceforge.net/; ""FAST C++ Compilation - IcrediBuild by Xoreax Software"" (2003), http://www.xoreax.com/main.htm; ""Positive-g-Daily Build Product Information - Mozilla"" (2003), http://positive-g.com/dailybuild/; ""Kinook Software - Automate Software Builds with Visual Build Pro"" (2003), http://www.visualbuild.com/; Baran, N., ""Load Testing Web Sites"" (2001) Dr. Dobb's J. Software Tools, 26 (3), pp. 118-119. , 112 114, 116, Mar; Ellis, S., Johnson, D., Schmit, M., Jones, J., Cooke, S., Granroth, K., ""Letters: Open Source Cobol; Setting the Debian Record Straight; Back to Basics; Load Testing Web Sites; Open Source Hat Tricks; KDE Insider"" (2001) Dr. Dobb's J. Software Tools, 26 (7), pp. 10-12. , July; Weirich, J., ""Using Perl to Check Web Links"" (1997) Linux J., 36. , Apr; Berghel, H., ""Using the WWW Test Pattern to Check HTML Client Compliance"" (1995) Computer, 28 (9), pp. 63-65. , Sept; Marick, B., ""Bypassing the GUI"" (2002) Software Testing and Quality Eng. Magazine, pp. 41-47. , Sept; Finsterwalder, M., ""Automating Acceptance Tests for GUI Applications in an Extreme Programming Environment"" (2001) Proc. Second Int'l Conf. EXtreme Programming and Flexible Processes in Software Eng., pp. 114-117. , May; White, L., AlMezen, H., Alzeidi, N., ""User-Based Testing of GUI Sequences and Their Interactions"" (2001) Proc. 12th Int'l Symp. Software Reliability Eng., pp. 54-63; ""JUnit, Testing Resources for Extreme Programming"" (2004), http://junit.org/news/extension/gui/index.htm/; Hicinbothom, J.H., Zachary, W.W., ""A Tool for Automatically Generating Transcripts of Human-Computer Interaction"" (1993) Proc. Human Factors and Ergonomics Society 37th Ann. Meeting, p. 1042; ""Capture-Replay Tool"" (2003), http://soft.com; ""Mercury Interactive WinRunner"" (2003), http://www.mercuryinteractive.com/products/winrunner; ""Abbot Java GUI Test Framework"" (2003), http://abbot.sourceforge.net; ""Rational Robot"" (2003), http://www.rational.com.ar/tools/robot.html; Memon, A.M., ""A Comprehensive Framework for Testing Graphical User Interfaces"" (2001), PhD thesis, Dept. of Computer Science, Univ. of Pittsburgh, July; ""Java Test Coverage Analyzer"" (2004), http://www.codework.com/JCover/product.html; Su, J., Ritter, P.R., ""Experience in Testing the Motif Interface"" (1991) IEEE Software, 8 (2), pp. 26-33. , Mar; Vogel, P.A., ""An Integrated General Purpose Automated Test Environment"" (1993) Proc. Int'l Symp. Software Testing and Analysis, pp. 61-69. , T. Ostrand and E. Weyuker, eds. June; Jobson, J.D., (1991) Applied Multivariate Data Analysis Volume 1: Regression and Experimental Design, , Springer; Sahai, H., Ageel, M., (2000) The Analysis of Variance: Fixed, Random and Mixed Models, , Birkhauser","Memon, A.M.; Department of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,,,,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-30344472992
"Hartmann J., Vieira M., Foster H., Ruder A.","57198127140;7202140705;7103146966;9432651800;","A UML-based approach to system testing",2005,"Innovations in Systems and Software Engineering","1","1",,"12","24",,58,"10.1007/s11334-005-0006-0","https://www.scopus.com/inward/record.uri?eid=2-s2.0-28044448116&doi=10.1007%2fs11334-005-0006-0&partnerID=40&md5=759b898a2cf913edcc107fe5eb1c1b36","Microsoft Corporation, 1 Microsoft Way, Redmond, WA 98052, United States; Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States","Hartmann, J., Microsoft Corporation, 1 Microsoft Way, Redmond, WA 98052, United States; Vieira, M., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; Foster, H., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States; Ruder, A., Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540, United States","This article describes an approach for automatically generating and executing system tests, which can be used to improve the validation of an application. Tests are automatically generated from behavioural models of the application using the unified modelling language (UML) and then executed using a suitable test execution environment. For this paper, we demonstrate our approach by means of an application that interacts with its users via a graphical user interface. Thus, we discuss the test- execution phase with respect to a commercial user interface (UI) or capture-replay tool. In this article, we show how, in the first step, a test designer manually annotates the UML models, which may have been semiautomatically extracted from existing, textual-use case documentation, with test requirements. In the second step, the test- generation tool automatically creates a set of textual test procedures (test cases) or executable test scripts. In the third step, a test executor runs these against the system under test using a commercial UI testing tool. The goal of the article is to illustrate the benefits of an automated, model-based approach for improving system test design, generation and execution. Details regarding the different tools are given. © Springer-Verlag Berlin Heidelberg 2005.","Activity diagrams; Functional testing; System testing; Test generation; Unified modelling language; Use cases",,,,,,,,,"Balcer, M., Hasling, W., Ostrand, T., Automatic generation of test scripts from formal test specifications (1990) Proceedings of ACM SIGSOFT'890-Third Symposium on Software Testing, Verification, and Analysis (TAVS-3), pp. 257-271. , ACM Press, New York; Ostrand, T., Balcer, M.J., The category-partition method for specifying and generating functional tests (1988) CACM, 31 (6), pp. 676-686; Hartmann, J., Imoberdorf, C., Meisinger, M., UML-based integration testing (2000) Proceedings of ISSTA 2000, pp. 60-70; Abdurazik, A., Offutt, J., Using UML collaboration diagrams for static checking and test generation (2000) Proceedings of Third International Conference on the UML, pp. 385-395; Cavarra, A., Davies, J., Jeron, T., Mournier, L., Hartman, A., Olvovsky, S., Using UML for automatic test generation (2002) Proceedings of ISSTA 2002; Lugato, D., Bigot, C., Valot, Y., Validation and automatic test generation on UML models: The AGATHA approach (2002) Electronics Notes in Theoretical Computer Science, 66 (2); Offutt, J., Abdurazik, A., Generating test cases from UML specifications (1999) Proceedings of 2nd International Conference on UML'99; Bertolino, A., Gnesi, S., Use case-based testing of product lines (2003) Proceedings of the ESEC/SIGSOFT FSE, pp. 355-358; Briand, L.C., Labiche, Y., A UML-based approach to system testing (2002) Software Syst. Model, 1 (1), pp. 10-42; Fröhlich, P., Link, J., Automated test case generation from dynamic models (2000) Proceedings of the ECOOP 2000, pp. 472-491. , Bertino E. (ed); Beer, A., Mohacsi, S., Stary, C., IDATG: An open tool for automated testing of interactive software (1998) Proceedings of the COMPSA'98 - 22nd International Computer Software and Applications Conference, 19-21 August, pp. 470-475; Menon, A., A comprehensive framework for testing graphical user interfaces (2001), PhD Dissertation, University of Pittsburgh, Pittsburgh; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for GUI systems (1998) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA-98). Vol 23.2 of ACM Software Engineering Notes, pp. 82-92; Menon, A., GUI testing: Pitfalls and process (2002) IEEE Computer. IEEE Computer Society Press, pp. 87-88","Hartmann, J.; Microsoft Corporation, 1 Microsoft Way, Redmond, WA 98052, United States; email: jeanhar@microsoft.com",,,,,,,,16145046,,,,"English","Innov. Syst. Softw. Eng.",Article,"Final","",Scopus,2-s2.0-28044448116
"Xie Q., Memon A.M.","35761589700;35599876500;","Rapid ""crash testing"" for continuously evolving GUI-based software applications",2005,"IEEE International Conference on Software Maintenance, ICSM","2005",, 1510142,"473","482",,17,"10.1109/icsm.2005.72","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646899615&doi=10.1109%2ficsm.2005.72&partnerID=40&md5=4665c4027982940e8b6e3a0865c33019","Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Xie, Q., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Memon, A.M., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Several rapid-feedback-based quality assurance mechanisms are used to manage the quality of continuously evolving software. Even though graphical user interfaces (GUIs) are one of the most important parts of software, there are currently no mechanisms to quickly retest evolving GUI software. We leverage our previous work on GUI testing to define a new automatic GUI re-testing process called ""crash testing "" that is integrated with GUI evolution. We describe two levels of crash testing: (1) immediate feedback-based in which a developer indicates that a GUI bug was fixed in response to a previously reported crash; only select crash test cases are rerun and the developer is notified of the results in a matter of seconds, and (2) between code changes in which new crash test cases are generated on-the-fly and executed on the GUI. Since the code may be changed by another developer before all the crash tests have been executed, hence requiring restarting of the process, we use a simple rotation-based scheme to ensure that all crash tests are executed over a series of code changes. We show, via empirical studies, that our crash tests are effective at revealing serious problems in the GUI. © 2005 IEEE.",,"Codes (symbols); Feedback; Graphical user interfaces; Maintenance; Software engineering; GUI re-testing process; Quality assurance mechanisms; Computer software",,,,,,,,"ACE+TAO Software Release, , deuce.doc.wustl.edu/Download.html; (2003) Cruise Control, , http://cruisecontrol.sourceforge.net/; (2003) FAST C++ Compilation - IncrediBuild by Xoreax Software, , http://www.xoreax.com/maln.htm; (2003) Kinook Software - Automate Software Builds with Visual Build Pro, , http://www.visualbulld.com/; (2003) Posltlve-g- Dally Build Product Information - Mozilla, , http://positive-g.com/dailybuild/; Aldemark, J., Vinter, J., Folkesson, P., Karlsson, J., Goofi: Generic object-oriented fault injection tool (2001) Proceedings of the. International Conference on Dependable Systems and Networks, 2001, pp. 83-88; Arlat, J., Aguera, M., Amat, L., Crouzet, Y., Fahre, J.-C., Laprie, J.C., Martins, E., Powell, D., Fault injection for dependability validation: A methodology and some applications (1990) IEEE Trans. Softw. Eng., 16 (2), pp. 166-182; Barton, J.H., Czeck, E.W., Segall, Z.Z., Slewiorek, D.P., Fault injection experiments using flat (1990) IEEE Trans. Comput., 39 (4), pp. 575-582; Brophy, H.F., Improving programming performance (1970) Australian Computer Journal, 2 (2), pp. 66-70; Carreira, J., Madeira, H., Silva, J.G., Xception: A technique for the experimental evaluation of dependability in modern computers (1998) IEEE Transactions on Software Engineering, 24 (2), pp. 125-136. , Feb; Csallner, C., Smaragdakis, Y., JCrasher: An automatic robustness tester for Java (2004) Software Pracetice and Experience, 34, pp. 1025-1050; De Souza, C.R.B., (2001) Global Software Development: Challenges and Perspectives, , May 13; Dix, M., D., H., Hofmann. Automated software robustness testing - Static and adaptive test case design methods (2002) Proceedings of the 28th Euromicro Conference, pp. 62-66; Fahre, J.-C., Rodríguez, M., Arlat, J., Sizun, J.-M., Building dependable cots microkernel-based systems using mafalda (2000) Proceedings of Pacific Rim International Symoslum on Dependable Computing, 2000, pp. 85-94; Fetzer, C., Felber, P., Högstedt, K., Automatic detection and masking of nonatomic exception handling (2004) IEEE Trans. Software Eng., 30 (8), pp. 547-560; Fu, C., Ryder, B.G., Milanova, A., Wonnacott, D., Testing of Java web services for robustness (2004) ISSTA '04: Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 23-34. , ACM Press; Herbsleb, J.D., Moitra, D., Guest Editors' introduction: Global software development (2001) IEEE Software, 18 (2), pp. 16-20. , Mor./Apr; Kanawati, G.A., Kanawati, N.A., Abraham, J.A., Ferrari: A tool for the validation of system dependability properties (1992) Proceedings of 22nd International Symposium on Fault-tolerant Computing, pp. 336-344; Kropp, N.P., K. Jr., P.J., Siewiorek, D.P., Automated robustness testing of off-the-shelf software components (1998) Proceedings of 28th International Symposium on Fault-tolerant Computing, pp. 230-239; Marick, B., When should a test be automated? (1998) Proceedings of the 11th International Software/internet Quality Week, , May; McConnell, S., Best practices: Daily build and smoke test (1996) IEEE Software, 13 (4), pp. 143-144. , July; Memon, A., Nagarajan, A., Xie, Q., Automating regression testing for evolving OUI software (2005) Journal of Software Maintenance and Evolution: Research and Practice, 17 (1), pp. 27-64; Memon, A., Porter, A., Yilmaz, C., Nagarajan, A., Schmidt, D.C., Natarajan, B., Skoll: Distributed continuous quality assurance (2004) Proceedings of the 26th IEEE/ACM International Conference on Software Engineering, , Edinburgh, Scotland, May. IEEE/ACM; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269. , Nov; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFTInternational Symposium on the Foundations of Software Engineering (FSE-11), pp. 118-127. , Sept; Memon, A.M., Xie, Q., Empirical evaluation of the fault-detection effectiveness of smoke regression test cases for gui-based software (2004) Proceedings of the International Conference on Software Maintenance 2004 (ICSM'04), pp. 8-17. , Chicago, Illinois, USA, Sept; Prikladnicki, R., Audy, J.L.N., Requirements engineering in global software development: Preliminary findings from a case study in a SW-CMM context (2003) Simpros2003; Riecken, R.D., Koenemann-Belliveau, J., Robertson, S.P., What do expert programmers communicate by means of descriptive commenting? (1991) Empirical Studies of Programmers: Fourth Workshop, Papers, pp. 177-195; Rosenberg, H.A., Shin, K.G., Han, S., DOCTOR: An integrated software fault injection environment for distributed real-time systems (1995) Proceedings of the International Computer Performance and Dependability Symposium 1995, pp. 204-213. , april; Seaman, C.B., Basili, V.R., Communication and organization: An empirical study of discussion in inspection meetings (1998) IEEE Transactions on Software Engineering, 24 (7), pp. 559-572. , July; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proceedings of the International Symposium on Software Reliability Engineering, pp. 110-121. , Oct; White, L., Almezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63","Xie, Q.; Department of Computer Science, , College Park, MD 20742, United States; email: qing@cs.umd.edu",,"University of Szeged, Hungary","IEEE Computer Society","21st IEEE International Conference on Software Maintenance, ICSM 2005","26 September 2005 through 29 September 2005","Budapest",67325,,0769523684; 9780769523682,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-33646899615
"Neto P.S., Resende R., Pádua C.","8894963200;22735751900;22735018700;","A method for information systems testing automation",2005,"Lecture Notes in Computer Science","3520",,,"504","518",,5,"10.1007/11431855_35","https://www.scopus.com/inward/record.uri?eid=2-s2.0-25144525539&doi=10.1007%2f11431855_35&partnerID=40&md5=e09d0be7f62f5aa8b4446355ce4aa819","Computer Science Department, Universidade Federal de Minas Gerais (UFMG), Brazil; Computer Sciense and Statistic Departament, Universidade Federal do Piauí (UFPI), Brazil","Neto, P.S., Computer Science Department, Universidade Federal de Minas Gerais (UFMG), Brazil, Computer Sciense and Statistic Departament, Universidade Federal do Piauí (UFPI), Brazil; Resende, R., Computer Science Department, Universidade Federal de Minas Gerais (UFMG), Brazil; Pádua, C., Computer Science Department, Universidade Federal de Minas Gerais (UFMG), Brazil","This paper presents MODEST, a MethOD to hElp System Testing. MODEST can reduce the overall effort required during software construction, using an extended design specification produced in a UP-like software process. This specification is used to automate test generation and execution, decreasing the effort required during test activities. The method deals with Information Systems that follow an architecture composed of a user interface layer, a business rule layer and a storage mechanism abstracted by a persistence layer. © Springer-Verlag Berlin Heidelberg 2005.",,"Automatic testing; Automation; Computer applications; Computer software; Interfaces (computer); Mathematical models; Information systems; Software construction; Software process; Software testing; Information retrieval systems",,,,,,,,"(2002) The Economic Impacts of Inadequate Infrastructure for Software Testing, , http://www.nist.gov/director/prog-ofc/report02-3.pdf, Planning Report 02-3, last access on November 2004; Jacobson, I., Rumbaugh, J., Booch, G., (1999) The Unified Software Development Process, , Addison Wesley; Rumbaugh, J., Jacobson, I., Booch, G., (1999) The Unified Modeling Language Reference Manual, , Addison Wesley; Warmer, J., Kleppe, A., (2003) The Object Constraint Language, , Addison-Wesley, 2nd edition; Maes, P., Concepts and experiments in computational reflection (1987) Proceedings of the Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA '87), pp. 147-155. , Orlando, Florida, December; Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C., Loingtier, J., Irwin, J., Aspect-oriented programming (1997) European Conference on Object-Oriented Programming (ECOOP'97), pp. 220-242. , LNCS 1241, Finland, June; (2003) UML Testing Profile, Object Management Group Document, , http://www.omg.org, March last access on November 2004; XML Metadata Interchange (XMI) (1998) Object Management Group Document, , http://www.omg.org/, July last access on November 2004; Basili, V., Selby, R., Hutchens, D., Experimentation in software engineering (1986) IEEE Transactions on Software Engineering, 12 (7). , July; Rational Rose User's Guide, , http://www.rational.com/, last access on November 2004; Abbot Java GUI Test Framework, , http://abbot.sourceforge.net/, last access on November 2004; Offutt, J., Abdurazik, A., Generating tests from UML specifications (1999) Proceedings of the 2nd Unified Modeling Language Conference (UML '99), pp. 416-429. , Fort Collins, CO, USA, October; Briand, L., Labiche, Y., A UML-based approach to system testing (2001) Proceedings of the 4th Unified Modeling Language Conference (UML'01), pp. 194-208. , Toronto, Canada, October; Hartmann, A., Nagin, K., The AGEDIS tools for model based testing (2004) International Symposium on Software Testing and Analysis (ISSTA 2004), , Boston, Massachusetts, USA, July; Hartmann, J., Imoberdorf, C., Meisinger, M., UML-based integration testing (2000) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA 2000), pp. 60-70. , Portland, Oregon, United States, August; Pickin, S., Jard, C., Le Traon, Y., Jéron, T., Jézéquel, J.-M., Le Guennec, A., System test synthesis from UML models of distributed software (2002) Proceedings of 22nd IFIP WG 6.1 International Conference on Formal Techniques for Networked and Distributed Systems (FORTE 2002), pp. 97-113. , Houston, Texas, November; DeMillo, R., Lipton, R., Sayward, F., Hints on test data selection: Help for the practicing programmer (1978) IEEE Computer, 11, pp. 34-41. , April","Neto, P.S.; Computer Science Department, , MG, Brazil; email: pasn@dcc.ufmg.br",,"ERCIM, European Res. Consortium for Informatics and Mathematics;FCT, Fundacao para a Ciencia e Tecnologia, Portugal;FEUP, Faculdade de Engenharia da Univ. do Porto, Portugal;Fundacao Luso Americana para o Desenvolvimento, Portugal;UP, Univ. do Porto, Portugal;UPV, Univ. Politecnica de Valencia, Spain","Springer Verlag","17th International Conference on Advanced Information Systems Engineering, CAiSE 2005","13 June 2005 through 17 June 2005","Porto",65647,03029743,,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","All Open Access, Bronze",Scopus,2-s2.0-25144525539
"Englefield P., Paddison C., Tibbits M., Damani I.","9639722900;8355536900;8699822900;8699823000;","A proposed architecture for integrating accessibility test tools",2005,"IBM Systems Journal","44","3",,"537","555",,9,"10.1147/sj.443.0537","https://www.scopus.com/inward/record.uri?eid=2-s2.0-23844477975&doi=10.1147%2fsj.443.0537&partnerID=40&md5=afc1b90ccf143fc2cb7db06f5a03c00d","IBM Warwick, Birmingham Road, Warwick CV34 5JL, United Kingdom","Englefield, P., IBM Warwick, Birmingham Road, Warwick CV34 5JL, United Kingdom; Paddison, C., IBM Warwick, Birmingham Road, Warwick CV34 5JL, United Kingdom; Tibbits, M., IBM Warwick, Birmingham Road, Warwick CV34 5JL, United Kingdom; Damani, I., IBM Warwick, Birmingham Road, Warwick CV34 5JL, United Kingdom","Automated test tools are an essential resource for practitioners responsible for evaluating the accessibility of Web sites. However, both systematic analysis of tool capabilities and practitioner feedback have identified a range of practical issues that mar the effectiveness of existing tools. In practice, although automated test tools need to be used in combination to give good coverage, their lack of consistent user experience and their diverse reporting formats discourage such combined usage. Furthermore, test tools are expensive to develop; in addition to core analytical capability, authors must individually construct the user interface, I/0 routines, Web crawlers, and report writers. In this paper, ah architecture is proposed to address these concerns. In this architecture, tools are developed as plug-ins to an infrastructure that provides a common user interface, crawling and parsing services, and practitioner-oriented tools for analysis and reporting. The architecture supports an efficient, systematic evaluation process and benefits accessibility practice in two distinct ways: first, it simplifies the task of the evaluator by providing a consistent, integrated, and efficient user experience for executing, reporting, and communicating a study; second, it supports an economic model in which tools can release development resources from mundane software engineering activities in order to invest in the intelligent-agent development necessary to address the deeper challenges of automated testing. © Copyright 2005 by International Business Machines Corporation.",,"Computer aided software engineering; User interfaces; Websites; World Wide Web; Accessibility test tools; Automated test tools; Design for accessibility; Usability engineering",,,,,,,,"Universal Usability Guide, , http://www.universalusability.org/, universalusability.org; Shneiderman, B., ""Universal Usability"" (2000) Communications of The ACM, 43 (5), pp. 84-91; (2004) The Web: Access and Inclusion for Disabled People, , http://www.drc-gb.org/publicationsandreports/report.asp, Disability Rights Commission; Chisholm, W., Vanderheiden, G., Jacobs, I., (1999) Web Content Accessibility Guidelines 1.0, , http://www.w3.org/TR/WCAG10/, World Wide Web Consortium (May 5); Speech and Braille Output Software, , http://www.rnib.org.uk/xpedio/groups/public/documents/PublicWebsite/ public_speechbrailleoutput.hcsp, Royal National Institute of the Blind; IBM Home Page Reader 3.04 http://www-3.ibm.com/able/solution_offerings/hpr.html, IBM Corporation; http://www.techdis.ac.uk/index.php, Welcome to TechDis, TechDis; http://www.rnib.org.uk/xpedio/groups/public/documents/ PublicWebsite/public_screenmagnification.hcsp, Screen Magnification Software, Royal National Institute of the Blind; Section 508: Glossary, , http://section508.nasa.gov/glossary.htm, NASA; User Engineering, , http://www-306.ibm.com/ibm/easy/eou_ext.nsf/publish/1996, IBM Corporation; Maslow, A.H., (1998) Toward a Psychology of Being, , 3rd Edition, Wiley, Hoboken, NJ; Norman, K., (1991) The Psychology of Menu Selection: Designing Cognitive Control at the Human/Computer Interface, , Intellect Ltd., Bristol, UK; Nielsen, J., (1994) Usability Engineering, , Morgan Kaufmann, San Francisco, CA; Rittel, H.W.J., ""Second Generation Design Methods"" (1984) Design Methods Group 5th Anniversary Report: DMG Occasional Paper, 1, pp. 317-327. , Interview in 5-10 (1972) Reprinted Developments in Design Methodology, N. Cross, Editor, Wiley, Hoboken, NJ; Professional discussion with blind colleague (2003); (2004) Disability Briefing December 2004, , http://www.drc-gb.org/publicationsandreports/campaigndetails.asp?section = ddb&id=666, Disability Rights Commission; Disability Discrimination Act 1995, , http://www.disability.gov.uk/dda/, Disability Unit of the Department for Work and Pensions, UK; http://www.section508.gov/, Section 508, Center for IT Accommodation (CITA), Office of Governmentwide Policy, U.S. General Services Administration; Vredenburg, K., (2002) User-Centered Design: The Integrated Approach, , Prentice Hall, New York; Dumas, J.S., Redish, J.C., (1999) A Practical Guide to Usability Testing, , Intellect Ltd., Bristol, UK; Englefield, P., (2003) A Pragmatic Framework for Selecting Empirical or Inspection Methods to Evaluate Usability, , http://www-306.ibm.com/ibm/easy/eou_ext.nsf/Publish/ 50?OpenDocument&../Publish/1118/$File/paper1118.pdf, IBM Corporation; West, J., ""The Newest AT Goes Mainstream and to the Movies: Academy Awards Party Features Innovative Access for All Courtesy of IBM"" (2003) The Assistive Technology Journal, 70. , http://www.atnet.org/news/2003/apr03/040102.htm, (April); Testing for Accessibility http://www.rnib.org.uk/xpedio/groups/public/documents/publicWebsite/ public_testing.hcsp#P27_2586, Royal National Institute of the Blind; http://www.laws-project.org.uk, Local Authority Websites (LAWs), UK National Projects Programme; http://www-128.ibm.com/developerworks/web/library/w-int.html, IBM Web Services, IBM Corporation; http://www.eclipse.org/eclipse/, The Eclipse Project, The Eclipse Foundation; Rubin, B.S., Christ, A.R., Bohrer, K.A., ""Java and the IBM San Francisco Project"" (1998) IBM Systems Journal, 37 (3), pp. 365-371; Rogers, E., (2003) Diffusion of Innovations, , 5th Edition, Free Press, New York; http://www.w3.org/WAI/, W3C Web Accessibility Initiative (WAI), World Wide Web Consortium; Lynx http://lynx.browser.org/; Knight, J., (2003) Attitudes to Web Accessibility, , http://www.usabilitynews.com/news/article1321.asp, UsabilityNews.com (October); Inspect32 and AccExplorer32 are both part of the Microsoft Active Accessibility® 2.0 Software Development Kit http://www.microsoft.com/downloads/details.aspx? FamilyId=3755582A-A707-460A-BF21-1373316E13F0&displaylang=en, For details, see Active Accessibility 2.0 SDK Tools, Microsoft Corporation; Delorie, D.J., Lynx Viewer http://www.delorie.com/web/lynxview.html; http://www.usablenet.com/products_services/lift_online/lift_online.html, LIFT Online, UsableNet Inc; http://www.usablenet.com/products_services/lift_machine/liftc_machine. html, LIFT Machine, UsableNet Inc; (1999) ISO Standard 9241: Ergonomic Requirements for Office Work With Visual Display Terminals, , International Organization for Standardization, Geneva, Switzerland; Nagi, S.Z., ""Disability Concepts Revisited: Implications for Prevention"" (1991) Disability in America: Toward a National Agenda for Prevention, pp. 309-327. , A. M. Pope and A. R. Tarlov, Editors, National Academy Press, Washington, D.C; (2001) International Classification of Functioning, Disability and Health (ICF), , http://www3.who.int/icf/icftemplate.cfm?myurl=introduction. html%20&mytitle=Introduction, World Health Organization, Geneva, Switzerland; http://www.rnib.org.uk, Royal National Institute of the Blind; Chisholm, W., Palmer, S.B., (2002) Evaluation and Report Language (EARL) 1.0, , http://www.w3.org/TR/2002/WD-EARL10-20021206/, World Wide Web Consortium (December 6)","Englefield, P.; IBM Warwick, Birmingham Road, Warwick CV34 5JL, United Kingdom; email: paul_englefiled@uk.ibm.com",,,"IBM Corporation",,,,,00188670,,IBMSA,,"English","IBM Syst J",Article,"Final","All Open Access, Green",Scopus,2-s2.0-23844477975
"Memon A., Nagarajan A., Xie Q.","35599876500;6701761320;35761589700;","Automating regression testing for evolving GUI software",2005,"Journal of Software Maintenance and Evolution","17","1 SPEC. ISS.",,"27","64",,55,"10.1002/smr.305","https://www.scopus.com/inward/record.uri?eid=2-s2.0-13844299010&doi=10.1002%2fsmr.305&partnerID=40&md5=441a0ca616776ee2726a6769f6cca767","Inst. for Advanced Computer Studies, University of Maryland, College Park, MD 20742, United States; Department of Computer Science, University of Maryland, College Park, MD 20742, United States","Memon, A., Inst. for Advanced Computer Studies, University of Maryland, College Park, MD 20742, United States, Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Nagarajan, A., Department of Computer Science, University of Maryland, College Park, MD 20742, United States; Xie, Q., Department of Computer Science, University of Maryland, College Park, MD 20742, United States","With the widespread deployment of broadband connections worldwide, software development and maintenance are increasingly being performed by multiple engineers, often working around-the-clock to maximize code churn rates. To ensure rapid quality assurance of such software, techniques such as 'nightly/daily building and smoke testing' have become widespread since they often reveal bugs early in the software development process. During these builds, a development version of the software is checked out from the source code repository tree, compiled, linked, and (re)tested with the goal of (re)validating its basic functionality. Although successful for conventional software, smoke tests are difficult to develop and automatically re-run for software that has a graphical user interface (GUI). In this paper, we describe a framework called DART (Daily Automated Regression Tester) that addresses the needs of frequent and automated re-testing of GUI software. The key to our success is automation: DART automates everything from structural GUI analysis, smoke-test-case generation, test-oracle creation, to code instrumentation, test execution, coverage evaluation, regeneration of test cases, and their re-execution. Together with the operating system's task scheduler, DART can execute frequently with little input from the developer/tester to re-test the GUI software. We provide results of experiments showing the time taken and memory required for GUI analysis, test case and test oracle generation, and test execution. We empirically compare the relative costs of employing different levels of detail in the GUI test oracle. We also show the events and statements covered by the smoke test cases. Copyright © 2005 John Wiley & Sons, Ltd.","Daily/nightly builds; Event-flow graphs; Graphical user interfaces; GUI regression testing; GUI testing; Smoke testing; Software quality","Automation; Codes (symbols); Computer software; Computer software maintenance; Graphical user interfaces; Regression analysis; Daily/nightly builds; Enent-flow graphs; GUI regression testing; GUI testing; Smoke testing; Software quality; Software engineering",,,,,,,,"Memon, A.M., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing nightly/daily builds of GUI applications (2003) Proceedings International Conference on Software Maintenance, pp. 410-419. , IEEE Computer Society Press: Los Alamitos CA; Karlsson, E.-A., Andersson, L.-G., Leion, P., Daily build and feature development in large distributed projects (2000) Proceedings of the 22nd International Conference on Software Engineering, pp. 649-658. , ACM Press: New York NY; McConnell, S., Best practices: Daily build and smoke test (1996) IEEE Software, 13 (4), pp. 143-144; Olsson, K., Daily build - The best of both worlds: Rapid development and control (1999) Technical Report, , Swedish Engineering Industries; Robbins, J., (2000) Debugging Applications, , Microsoft Press; Halloran, T.J., Scherlis, W.L., High quality and open source software practices (2002) Meeting Challenges and Surviving Success: Proceedings of the 2nd Workshop on Open Source Software Engineering, , ACM Press: New York NY; (2003) WINE Daily Builds, , http://wine.dataparty.no/[; (2003) Http://ftp.mozilla.org/pub/mozilla/nightly/latest/; (2003) Current Daily Builds of AceDB., , http://www.acedb.org/Software/Downloads/daily.shtml[; (2003), http://openwebmail.org/openwebmail/download/redhat/rpm/daily-build/; Marick, B., When should a test be automated? (1998) Proceedings of the 11th International Software/Internet Quality Week, , Software Research Institute: San Francisco CA; Crispin, L., House, T., Wade, C., The need for speed: Automating acceptance testing in an eXtreme Programming environment (2001) Proceedings of the Second International Conference on EXtreme Programming and Flexible Processes in Software Engineering., pp. 96-104. , Addison-Wesley: Boston MA; Grenning, J., Launching eXtreme programming at a process intensive company (2001) IEEE Software, 18, pp. 27-33; Schuh, P., Recovery, redemption and extreme programming (2001) IEEE Software, 18, pp. 34-41; Poole, C., Huisman, J.W., Using extreme programming in a maintenance environment (2001) IEEE Software, 18, pp. 42-50; (2003), http://cruisecontrol.sourceforge.net/; (2003) FAST C++ Compilation - IcrediBuild by Xoreax Software, , http://www.xoreax.com/main.htm[; (2003) Positive-g- Daily Build Product Information - Mozilla., , http://positive-g.com/dailybuild/; (2003) Kinook Software - Automate Software Builds with Visual Build Pro., , http://www.visualbuild.com/[; Salzman, M.C., Rivers, S.D., Smoke and mirrors: Setting the stage for a successful usability test (1994) Behaviour and Information Technology, 13 (1-2), pp. 9-16; Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210; Binkley, D., Semantics guided regression test cost reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516; Rosenblum, D.S., Weyuker, E.J., Using coverage information to predict the cost-effectiveness of regression testing strategies (1997) IEEE Transactions on Software Engineering, 23 (3), pp. 146-156; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Doctoral Dissertation, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), pp. 118-127. , ACM Press: New York NY; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer - Human Interaction, 2 (1), pp. 64-103; Marick, B., Bypassing the GUI (2002) Software Testing and Quality Engineering Magazine, (SEPTEMBER), pp. 41-47; Finsterwalder, M., Automating acceptance tests for GUI applications in an eXtreme programming environment (2001) Proceedings of the 2nd International Conference on Extreme Programming and Flexible Processes in Software Engineering, pp. 114-117. , Addison-Wesley: Boston MA; White, H.A.L., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings 12th International Symposium Software Reliability Engineering, pp. 54-63. , IEEE Computer Society Press: Los Alamitos CA; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, Vol. 2 Special Sessions: Demonstrations, 2, p. 1042. , Human Factors and Ergonomics Society: Santa Monica CA; Memon, A.M., Advances in GUI testing (2003) Advances in Computers, 57. , Zelkowitz MV (ed.). Academic Press: New York NY; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings 10th Working Conference on Reverse Engineering, , IEEE Computer Society Press: Los Alamitos CA; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press: New York NY; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , ACM Press: New York NY; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , ACM Press: New York NY; (2003) Java Source Code Instrumentation, , http://www.glenmccl.com/instr/instr.htm[; Cormen, T., Leiserson, C., Rivest, R., (1990) Introduction to Algorithms, pp. 477-485. , ch. 23.3. MIT Press: Cambridge MA; Kepple, L.R., The black art of GUI testing (1994) Dr Dobb's Journal of Software Tools, 19 (2), p. 40; Beck, K., (1999) EXtreme Programming Explained: Embrace Change, , Addison-Wesley: Reading MA; Kaner, C., Improving the maintainability of automated test suites (1997) Proceedings of the 10th International Software/Internet Quality Week; (2003), http://www.XProgramming.com/software.htm[; Jeffries, R., Anderson, A., Hendrickson, C., (2001) EXtreme Programming Installed, , Addison Wesley: Reading MA; (2003) Capture - Replay Tool, , http://soft.com; (2003) Mercury Interactive WinRunner, , http://www.mercuryinteractive.com/products/winrunner[; (2003) Abbot Java GUI Test Framework, , http://abbot.sourceforge.net; (2003) Rational Robot., , http://www.rational.com.ar/tools/robot.html[","Memon, A.; Inst. for Advanced Computer Studies, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,,,,,,,1532060X,,JSMEC,,"English","J. Software Maint. Evol.",Conference Paper,"Final","",Scopus,2-s2.0-13844299010
"Sun Y., Jones E.L.","55737680600;7404236646;","Specification-driven automated testing of GUI-based Java programs",2004,"Proceedings of the Annual Southeast Conference",,,,"140","145",,29,"10.1145/986537.986570","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953118432&doi=10.1145%2f986537.986570&partnerID=40&md5=f34cf85d84ac470778d2a3e85b60f776","Medtronic, Inc., MS T418, 7000 Central Ave. NE, Minneapolis, MN 55432, United States; Dept. of Computer and Information Sciences, Florida A and M University, Tallahassee, FL 32307, United States","Sun, Y., Medtronic, Inc., MS T418, 7000 Central Ave. NE, Minneapolis, MN 55432, United States; Jones, E.L., Dept. of Computer and Information Sciences, Florida A and M University, Tallahassee, FL 32307, United States","This paper presents a specification-driven approach to test automation for GUI-based JAVA programs as an alternative to the use of capture/replay. The NetBeans Jemmy library provides the basic technology. We introduce a GUI-event test specification language from which an automated test engine is generated. The test engine uses the library and incorporates the generation of GUI events, the capture of event responses, and an oracle to verify successful completion of events. The engine, once generated, can be used to test multiple versions of the application. The approach defined in this paper provides a language front-end to the Jemmy library to eliminate the programming usually needed to use this Java API. Results from applying the specification-driven approach to automate the grading of student programs indicate the feasibility of this approach. The specification-driven approach is equally useful for testing during development and regression testing. The primary benefit is that testers can focus on test case design rather than building test harnesses. This approach supports N-version testing, where each version of the application is intended to satisfy the same specification, and where each version is tested in an identical manner. Copyright 2004 ACM.","Test automation; Test engine; Test specification language","Automated test; Automated testing; Capture/replay; Engine test; Event-response; Java program; NetBeans; Regression testing; Test Automation; Test case; Test harness; Test specifications; Application programming interfaces (API); Automation; Engines; Graphical user interfaces; Java programming language; Linguistics; Software testing; Specification languages; Specifications; Testing; Automatic test pattern generation",,,,,,,,"Chen, J., Subramaniam, S., A GUI Environment to Manipulate FSMs for Testing GUI-Based Applications in Java Proceedings of the 34th Hawaii International Conference on Systems Science, 2001; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , February; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage Criteria for GUI Testing Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), Vienna Univeristy of Technology, Austria, September 10-14, 2001; Jemmy Module, , http://jemmy.4.org, at; Ostrand, T., Aanodide, A., Foster, H., Goradia, T., A Visual Test Development Environment for GUI Systems Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis(ISSTA-98), March 2-5 1998, pp. 82-92; Skrivanek, J., Sotona, A., (2002) Technical Articles & Tips: Testing Forte for Java: Quality Assurance with User Interface Test Libraries, Jemmy and Jelly, , http://developers.sun.com/tools/javatools/articles/JemmyJelly.htm, November; Takahashi, J., An Automated Oracle for Verifying GUI Objects (2001) Software Engineering Notes, 26 (4), pp. 83-88. , July; Sun, Y., (2003) Event-Driven Automated Testing for GUI-Based Java Programs, , M.S. Thesis, August Florida A&M University","Sun, Y.; Medtronic, Inc., 7000 Central Ave. NE, Minneapolis, MN 55432, United States; email: yanhong.sun@medtronic.com",,"Association for Computing Machinery (ACM)",,"42nd Annual Southeast Regional Conference, ACM-SE 42","2 April 2004 through 3 April 2004","Huntsville, AL",80485,,1581138709; 9781581138702,,,"English","Proc Annu Southeast Conf",Conference Paper,"Final","",Scopus,2-s2.0-77953118432
"Miller T., Strooper P.","7403948057;6603950473;","A case study in specification and implementation testing",2004,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC",,,,"130","139",,1,"10.1109/APSEC.2004.1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-18944371942&doi=10.1109%2fAPSEC.2004.1&partnerID=40&md5=2d440bfdeef7970e59cb30fb1454238d","Department of Computer Science, The University of Liverpool, Liverpool, L69 7ZF, United Kingdom; School of Information Technology and Electrical Engineering, The University of Queensland, 4072, Australia","Miller, T., Department of Computer Science, The University of Liverpool, Liverpool, L69 7ZF, United Kingdom; Strooper, P., School of Information Technology and Electrical Engineering, The University of Queensland, 4072, Australia","Achieving consistency between a specification and its implementation is an important part of software development. In previous work, we have presented a method and tool support for testing a formal specification using animation and then verifying an implementation of that specification. The method is based on a testgraph, which provides a partial model of the application under test. The testgraph is used in combination with an animator to generate test sequences for testing the formal specification. The same testgraph is used during testing to execute those same sequences on the implementation and to ensure that the implementation conforms to the specification. So far, the method and its tool support have been applied to software components that can be accessed through an Application Programmer Interface (API). In this paper, we use an industrially-based case study to discuss the problems associated with applying the method to a software system with a Graphical User Interface (GUI). In particular, the lack of a standardised interface, as well as controllability and observability problems, make it difficult to automate the testing of the implementation. The method can still be applied, but the amount of testing that can be carried on the implementation is limited by the manual effort involved. © 2004 IEEE.",,"Implementation testing; Software components; Software systems; Testgraphs; Animation; Computer aided design; Computer aided software engineering; Graphical user interfaces; Haptic interfaces; Mathematical models; Problem solving; Software engineering",,,,,,,,"Aichernig, B.K., Gerstinger, A., Aster, R., Formal specification techniques as a catalyst in validation (2000) Proceedings of the 5th International High Assurance Systems Engineering Symposium, pp. 203-206. , P. Srimani, editor, IEEE Computer Society; Ambert, F., Bouquet, F., Chemin, S., Guenaud, S., Legeard, B., Peureux, F., Vacelet, N., BZ-TT: A tool-set for test generation from Z and B using constraint logic programming (2002) Proc. of Formal Approaches to Testing of Software, Workshop of CONCUR'02, pp. 105-120; Antoy, S., Hamlet, D., Automatically checking an implementation against its formal specifica tion (2000) IEEE Transactions on Software Engineering, 26 (1), pp. 55-69; Bloesch, A., Kazmierczak, E., Kearney, P., Staples, J., Traynor, O., Utting, M., A formal reasoning environment for Sum - A Z based specification language (1995) Technical Report, 95 (2). , Software Verification Research Centre; Carrington, D., MacColl, I., McDonald, J., Murray, L., Strooper, P., From object-Z specifications to Classbench test suites (2000) Journal on Software Testing, Verification and Reliability, 10 (2), pp. 111-137; Chen, J., Subramaniam, S., A GUI environment to manipulate FSMs for testing GUI-based applications in java (2001) Proceedings of 34th Hawaii International Conference on Systems Science., , IEEE Computer Society Press; Daley, N., Hoffman, D., Strooper, P., Unit operations for automated class testing (2002) Software - Practice and Exprerience, 32 (5), pp. 465-493; Dick, J., Faivre, A., Automating the generation and sequencing of test cases from model-based specifications (1993) Formal Methods Europe: Industrial-Strength Formal Methods, pp. 268-284. , Springer-Verlag; Doong, R., Frankl, P., The ASTOOT approach to testing object-oriented programs (1994) ACM Transactions of Software Engineering and Methodology, 3 (2), pp. 101-130; Gaudel, M., Testing can be formal too (1995) Proceedings of TAPSOFT'95, pp. 82-96. , Springer-Verlag; Hazel, D., Strooper, P., Traynor, O., Possum: An animator for the SUM specification language (1997) Proceedings of Asia-Pacific Software Engineering Conference and International Computer Science Conference, pp. 42-51. , IEEE Computer Society; Hazel, D., Strooper, P., Traynor, O., Requirements engineering and verification using specification animation (1998) 13th IEEE International Conference on Automated Software Engineering, pp. 302-305. , IEEE Computer Society; Hewitt, M., O'Halloran, C., Sennett, C., Experiences with PiZA, an animator for Z (1997) ZUM'97: the Z Formal Specification Notation, pp. 37-51. , Springer-Verlag; Hierons, R.M., Testing from a Z specification (1997) Software Testing, Verification and Reliability, 7 (1), pp. 19-33; Hörcher, H.M., Improving software tests using Z specifications (1995) Proceedings of the Ninth Annual Z User Meeting, pp. 152-166. , J. P. Bowen and M. G. Hinchey, editors, Springer-Verlag; JUnit, Testing Resources for Extreme Programming, , http://www.junit.org; Kazmierczak, E., Dart, P., Sterling, L., Winikoff, M., Verifying requirements through mathematical modelling and animation (2000) International Journal of Software Engineering and Knowledge Engineering, 10 (2), pp. 251-273; Khurshid, S., Marinov, D., TestEra: A novel framework for automated testing of Java programs (2001) 16th IEEE Conference on Automated Software Engineering, pp. 22-31. , IEEE CS Press; Legeard, B., Peureux, F., Utting, M., Automated boundary testing from Z and B (2002) Formal Methods Europe, pp. 21-40. , Springer; Legeard, B., Peureux, F., Utting, M., Controlling test case explosion in test generation from B and Z specifications (2004) The Journal of Testing, Verification and Reliability, 14 (2). , To Appear; McDonald, J., Strooper, P., Translating Object-Z specifications to passive test oracles (1998) Second International Conference on Formal Engineering Methods, pp. 165-174. , S. Liu J. Staples, M.G. Hinchey, editor, IEEE Computer Society; Miller, T., Strooper, P., Model-based animation using testgraphs (2002) International Conference on Formal Engineering Methods, pp. 192-203. , Springer Verlag; Miller, T., Strooper, P., A framework for the systematic testing of model-based specifications (2003) ACM Transactions on Software Engineering and Methodology, 12 (4), pp. 409-439; Miller, T., Strooper, P., Supporting the software testing process through specification animation (2003) First International Conference on Software Engineering and Formal Methods, pp. 14-23. , IEEE Computer Society; Robinson, N., Barney, D., Kearney, P., Nikandros, G., Tombs, D., Automatic generation and verification of design specifications for railway signalling applications (2001) Proceedings of INCOSE 11th Annual International Symposium; Spivey, J., (1992) The Z Notation: A Reference Manual, , Prentice Hall, 2nd edition; Stepney, S., Testing as abstraction (1995) Z User Meeting'95, pp. 137-151. , Springer-Verlag; Stocks, P., Carrington, D., A framework for specification-based testing (1996) IEEE Transactions on Software Engineering, 22 (11), pp. 777-793; Turner, C., Robson, D., A state-based approach to the testing of class-based programs (1995) Software-Concepts and Tools, 16 (3), pp. 106-112; Waeselynck, H., Behnia, S., B-model animation for external verification (1998) Proceedings of International Conference for Formal Engineering Methods, pp. 36-45. , IEEE Computer Society; Wall, T., (2002) Abbot Java GUI Test Framework, , http://abbot.sourceforge.net/","Miller, T.; Department of Computer Science, , Liverpool, L69 7ZF, United Kingdom; email: tim@csc.liv.ac.uk",,"Korea Information Science Society",,"Proceedings - 11th Asia-Pacific Software Engineering Conference, APSEC 2004","30 November 2004 through 3 December 2004","Busan",64781,15301362,0769522459,,,"English","Proc. Asia Pac. Softw. Eng. Conf. APSEC",Conference Paper,"Final","",Scopus,2-s2.0-18944371942
"Memon A.M., Xie Q.","35599876500;35761589700;","Empirical evaluation of the fault-detection effectiveness of smoke regression test cases for GUI-based software",2004,"IEEE International Conference on Software Maintenance, ICSM",,,,"8","17",,11,"10.1109/ICSM.2004.1357785","https://www.scopus.com/inward/record.uri?eid=2-s2.0-18044394956&doi=10.1109%2fICSM.2004.1357785&partnerID=40&md5=34148cd99cc8771cf8b0f2db8429b1dd","Department of Computer Science, Inst. for Advanced Computer Studies, University of Maryland, College Park, MD, United States; Department of Computer Science, University of Maryland, College Park, MD, United States","Memon, A.M., Department of Computer Science, Inst. for Advanced Computer Studies, University of Maryland, College Park, MD, United States; Xie, Q., Department of Computer Science, University of Maryland, College Park, MD, United States","Daily builds and smoke regression tests have become popular quality assurance mechanisms to detect defects early during software development and maintenance. In previous work, we addressed a major weakness of current smoke regression testing techniques, i.e., their lack of ability to automatically (re)test graphical user interface (GUI) event interactions - we presented a GUI smoke regression testing process called Daily Automated Regression Tester (DART). We have deployed DART and have found several interesting characteristics of GUI smoke tests that we empirically demonstrate in this paper. We also combine smoke tests with different types of test oracles and present guidelines for practitioners to help them generate and execute the most effective combinations of test-case length and test oracle complexity. Our experimental subjects consist of four GUI-based applications. We generate 5000-8000 smoke tests (enough to be run in one night) for each application. Our results show that (1) short GUI smoke tests with certain test oracles are effective at detecting a large number of faults, (2) there are classes of faults that our smoke test cannot detect, (3) short smoke tests execute a large percentage of code, and (4) the entire smoke testing process is feasible to do in terms of execution time and storage space. © 2004 IEEE.",,"Daily automated regression testers (DART); Fault detection; GUI software; Smoke regression tests; Automation; Codes (symbols); Computer programming languages; Ergonomics; Graphical user interfaces; Human computer interaction; Software engineering; Computer software maintenance",,,,,,,,"(2003) Cruise Control, , http://cruisecontrol.sourceforge.net/; (2003) Current Daily Builds of AceDB, , http://www.acedb.org/Software/Downloads/daily.shtml; (2003) FAST C++ Compilation - IcrediBuild by Xoreax Software, , http://www.xoreax.com/main.htm; (2003) Java Source Code Instrumentation, , http://www.glenmccl.com/instr/instr.htm; (2003) Kinook Software - Automate Software Builds with Visual Build Pro, , http://www.visualbuild.com/; (2003), http://ftp.mozilla.org/pub/mozilla/nightly/latest/; (2003), http://openwebmail.org/openwebmail/download/redhat/rpm/dailybuild/; (2003) Positive-g- Daily Build Product Information - Mozilla, , http://positive-g.com/dailybuild/; (2003) WINE Daily Builds, , http://wine.dataparty.no/; Arlat, J., Aguera, M., Amat, L., Crouzet, Y., Fabre, J.-C., Laprie, J.C., Martins, E., Powell, D., Fault injection for dependability validation: A methodology and some applications (1990) IEEE Trans. Softw. Eng., 16 (2), pp. 166-182; Baresi, L., Young, M., Test oracles (2001) Technical Report, CIS-TR-01-02. , http://www.cs.uoregon.edu/michal/pubs/oracles.html, University of Oregon, Dept. of Computer and Information Science, Eugene, Oregon, U.S.A., August; Crispin, L., House, T., Wade, C., The need for speed: Automating acceptance testing in an extreme programming environment (2001) Second International Conference on EXtreme Programming and Flexible Processes in Software Engineering, pp. 96-104; Finsterwalder, M., Automating acceptance tests for GUI applications in an extreme programming environment (2001) Proceedings of the 2nd International Conference on EXtreme Programming and Flexible Processes in Software Engineering, pp. 114-117. , May; Grenning, J., Launching extreme programming at a process intensive company (2001) IEEE Software, 18, pp. 27-33; Halloran, T.J., Scherlis, W.L., High quality and open source software practices (2002) Meeting Challenges and Surviving Success: 2nd Workshop on Open Source Software Engineering, , May; Harrold, M.J., Offut, A.J., Tewary, K., An approach to fault modelling and fault seeding using the program dependence graph (1997) Journal of Systems and Software, 36 (3), pp. 273-296. , Mar; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) SPECIAL SESSIONS: Demonstrations, 2, p. 1042. , Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting; Karlsson, E.-A., Andersson, L.-G., Leion, P., Daily build and feature development in large distributed projects (2000) Proceedings of the 22nd International Conference on Software Engineering, pp. 649-658. , ACM Press; Marick, B., When should a test be automated? (1998) Proceedings of the 11th International Software/Internet Quality Week, , May; Marick, B., Bypassing the GUI (2002) Software Testing and Quality Engineering Magazine, pp. 41-47. , Sept; McConnell, S., Best practices: Daily build and smoke test (1996) IEEE Software, 13 (4), pp. 143-144. , July; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Advances in GUI testing (2003) Advances in Computers, 57. , ed. by Marvin V. Zelkowitz. Academic Press; Memon, A.M., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing nightly/daily builds of GUI applications (2003) Proceedings of the International Conference on Software Maintenance 2003, pp. 410-419. , September; Memon, A.M., Banerjee, I., Nagarajan, A., GUI ripping: Reverse engineering of graphical user interfaces for testing (2003) Proceedings of the 10th Working Conference on Reverse Engineering, pp. 260-269. , Nov; Memon, A.M., Banerjee, I., Nagarajan, A., What test oracle should I use for effective GUI testing? (2003) Proceedings of the IEEE International Conference on Automated Software Engineering, pp. 164-173. , IEEE Computer Society, Oct. 12-19; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, May; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Offutt, A.J., Hayes, J.H., A semantic model of program faults (1996) International Symposium on Software Testing and Analysis, pp. 195-200; Olsson, K., Daily build - The best of both worlds: Rapid development and control (1999) Technical Report, , Swedish Engineering Industries; Poole, C., Huisman, J.W., Using extreme programming in a maintenance environment (2001) IEEE Software, 18, pp. 42-50; Robbins, J., (2000) Debugging Applications, , Microsoft Press; Schuh, P., Recovery, redemption and extreme programming (2001) IEEE Software, 18, pp. 34-41; White, L., AlMezen, H., Alzeidi, N., User-based testing of GUI sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63","Memon, A.M.; Department of Computer Science, , College Park, MD, United States; email: atif@cs.umd.edu",,"IEEE Computer Society",,"Proceedings - 20th IEEE International Conference on Software Maintenance, ICSM 2004","11 September 2004 through 14 September 2004","Chicago, IL",64662,,,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-18044394956
"Offutt J., Wu Y., Du X., Huang H.","55375749200;7406896942;8406218900;55738237400;","Bypass testing of web applications",2004,"Proceedings - International Symposium on Software Reliability Engineering, ISSRE",,,,"187","197",,69,"10.1109/ISSRE.2004.13","https://www.scopus.com/inward/record.uri?eid=2-s2.0-16244370108&doi=10.1109%2fISSRE.2004.13&partnerID=40&md5=4b437e4e0cbbb53575deb67dbbf8581d","Information and Software Engineering, George Mason University, Fairfax, VA 22030, United States","Offutt, J., Information and Software Engineering, George Mason University, Fairfax, VA 22030, United States; Wu, Y., Information and Software Engineering, George Mason University, Fairfax, VA 22030, United States; Du, X., Information and Software Engineering, George Mason University, Fairfax, VA 22030, United States; Huang, H., Information and Software Engineering, George Mason University, Fairfax, VA 22030, United States","Web software applications are increasingly being deployed in sensitive situations. Web applications are used to transmit, accept and store data that is personal, company confidential and sensitive. Input validation testing (IVT) checks user inputs to ensure that they conform to the program's requirements, which is particularly important for software that relies on user inputs, including Web applications. A common technique in Web applications is to perform input validation on the client with scripting languages such as JavaScript. An insidious problem with client-side input validation is that end users can bypass this validation. Bypassing validation can cause failures in the software, and can also break the security on Web applications, leading to unauthorized access to data, system failures, invalid purchases and entry of bogus data. We are developing a strategy called bypass testing to create client-side tests for Web applications that intentionally violate explicit and implicit checks on user inputs. This paper describes the strategy, defines specific rules and adequacy criteria for tests, describes a proof-of-concept automated tool, and presents initial empirical results from applying bypass testing. © 2004 IEEE.",,"Bypass testing; Software components; Web applications; Web modeling language (WebML); Client server computer systems; Computer applications; Computer hardware; Computer program listings; Computer software; Computer system recovery; Data storage equipment; Graphical user interfaces; HTML; HTTP; Java programming language; Servers; World Wide Web",,,,,,,,"Andrews, A., Offutt, J., Alexander, R., Testing web applications (2004) Software and Systems Modeling, , Accepted per minor revision; Anley, C., (2004) Advanced SQL Injection in SQL Server Applications, , http://www.nextgenss.com/papers/advanced_sql-injection.pdf, online, last access February 2004; Benedikt, M., Freire, J., Godefroid, P., Veriweb: Automatically testing dynamic web sites (2002) Proceedings of 11th International World Wide Web Conference (WW W'2002), , Honolulu, HI, May; Ceri, S., Fraternali, P., Bongio, A., Web modeling language (WebML): A modeling language for designing web sites (2000) Ninth World Wide Web Conference, , Amsterdam, Netherlands, May; Elbaum, S., Karre, S., Rothermel, G., Improving web application testing with user session data (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 49-59. , Portland, Oregon, May. IEEE Computer Society Press; Hayes, J.H., Offutt, J., Increased software reliability through input validation analysis and testing (1999) Proceedings of the 10th International Symposium on Software Reliability Engineering, pp. 199-209. , Boca Raton, FL, November. IEEE Computer Society Press; Hower, R., (2002) Web Site Test Tools and Site Management Tools, , www.softwareqatest.com/qatweb1.html; Jia, X., Liu, H., Rigorous and automatic testing of Web applications (2002) 6th IASTED International Conference on Software Engineering and Applications (SEA 2002), pp. 280-285. , Cambridge, MA, November; Kung, D., Liu, C.H., Hsia, P., An object-oriented web test model for testing web applications (2000) Proc. of IEEE 24th Annual International Computer Software and Applications Conference (COMPSAC2000), pp. 537-542. , Taipei, Taiwan, October; Lee, S.C., Offutt, J., Generating test cases for XML-based web component interactions using mutation analysis (2001) Proceedings of the 12th International Symposium on Software Reliability Engineering, pp. 200-209. , Hong Kong China, November. IEEE Computer Society Press; Liu, C.H., Kung, D., Hsia, P., Hsu, C.T., Structural testing of web applications (2000) Proceedings of the 11th International Symposium on Software Reliability Engineering, pp. 84-96. , San Jose CA, October. IEEE Computer Society Press; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; Memon, A.M., Soffa, M.L., Pollack, M.E., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , February; Offutt, J., Quality attributes of web software applications (2002) IEEE Software: Special Issue on Software Engineering of Internet Software, 19 (2), pp. 25-32. , March/April; Ostrand, T.J., Balcer, M.J., The category-partition method for specifying and generating functional tests (1988) Communications of the ACM, 31 (6), pp. 676-686. , June; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) 23rd International Conference on Software Engineering (ICSE '01), pp. 25-34. , Toronto, CA, May; Van De Stadt, R., (2004) Cyberchair: A Free Web-based Paper Submission and Reviewing System, , http://www.cyberchair.org/, online, last access April 2004; Wheeler, D.A., (2003) Secure Programming for Linux and Unix HOWTO, , http://www.dwheeler.com/secure-programs/, Published online, March, last access Feb 2004; Wu, Y., Offutt, J., Du, X., Modeling and testing of dynamic aspects of web applications (2004) Technical Report, ISE-TR-04-01. , www.ise.gmu.edu/techreps/, Submitted for publication","Offutt, J.; Information and Software Engineering, , Fairfax, VA 22030, United States; email: ofut@ise.gmu.edu",,"IEEE Computer Society;Reliability Society;Institut de Recherche en Informatique et Syst. Aleatoires, IRISA",,"ISSRE 2004 Proceedings; 15th International Symposium on Software Reliability Engineering","2 November 2004 through 5 November 2004","Saint-Malo",64522,10719458,0769522157,PSSRF,,"English","Proc. Int. Symp. Softw. Reliab. Eng.",Conference Paper,"Final","",Scopus,2-s2.0-16244370108
"Memon A.M.","35599876500;","Using tasks to automate regression testing of GUIs",2004,"Proceedings of the IASTED International Conference. Applied Informatics",,, 411-052,"477","482",,8,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-11144347812&partnerID=40&md5=4d1b6bfe330c95f4e11245ca13e840aa","Department of Computer Science, Inst. for Advanced Computer Studies, University of Maryland, College Park, MD, United States","Memon, A.M., Department of Computer Science, Inst. for Advanced Computer Studies, University of Maryland, College Park, MD, United States","Graphical User Interfaces (GUIs) present unique challenges for software testing. In this paper, we demonstrate that a test suite originally used to test a GUI contains a large number of unusable test cases for the modified GUI. We present a novel technique to recreate unusable test cases by associating meta-information (called a task) with each test case. Tasks represent activities that can be performed by using the software. The sequence of events in a test case represents the actions needed to complete its associated task. Even when changes to the GUI make test cases unusable, many tasks remain valid across successive GUI versions. We experimentally show that our technique is able to automatically and efficiently regenerate a large number of test cases.","AI planning; GUI testing; Regression testing","Computer software; Planning; Random access storage; Regression analysis; UNIX; GUI testing; Meta-information; Regression testing; Graphical user interfaces",,,,,,,,"Agrawal, H., Morgan, J.R., Krauser, E.W., London, S.A., Incremental regression testing (1993) Proceedings of the Conference on Software Maintenance, pp. 348-357. , Washington, Sept; Ball, T., On the limit of control flow analysis for regression test selection (1998) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA-98), Volume 23,2 of ACM Software Engineering Notes, pp. 134-142. , New York, Mar.2-5; Benedusi, P., Cimitile, A., DeCarlini, U., Post-maintenance testing based on path change analysis (1988) Proceedings of the IEEE Conference on Software Maintenance, pp. 352-368; Binkley, D., Semantics guided regression test cost reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516. , Aug; Blum, A.L., Furst, M.L., Fast planning through planning graph analysis (1997) Artificial Intelligence, 90 (1-2), pp. 279-298; Harrold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions of Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Harrold, M.J., Soffa, M.L., Interprocedual data flow testing (1989) Proceedings of the ACM SIGSOFT '89 Third Symposium on Testing, Analysis, and Verification (TAV3), pp. 158-167; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) Proceedings of the Conference on Human Factors in Computing Systems: Common Ground, pp. 244-251. , New York, 13-18 Apr. ACM Press; Koehler, J., Nebel, B., Hoffman, J., Dimopoulos, Y., Extending planning graphs to an ADL subset (1997) Lecture Notes in Computer Science, 1348, p. 273; Koehler, J., Nebel, B., Hoffman, J., Dimopoulos, Y., Extending planning graphs to an ADL subset (1997) Proceedings of the 4th European Conference on Planning (ECP-97): Recent Advances in AI Planning, Volume 1348 of LNAI, 1348, pp. 273-285. , S. Steel and R. Alami, editors, Berlin, Sept.24-26. Springer; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31. , Jan; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Pollack, M.E., Sofia, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, May; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Plan generation for GUI testing (2000) Proceedings of the Fifth International Conference on Artificial Intelligence Planning and Scheduling, pp. 226-235. , AAAI Press, Apr; Memon, A.M., Pollack, M.E., Soffa, M.L., A planning-based approach to GUI testing (2000) Proceedings of the 13th International Software/Internet Quality Week, , May; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Regression testing of GUIs (2003) Proceedings of the 9th European Software Engineering Conference (ESEC) and 11th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-11), , Sept; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Rosenblum, D., Rothermel, G., A comparative study of regression test selection techniques (1997) Proceedings of the IEEE Computer Society 2nd International Workshop on Empirical Studies of Software Maintenance, pp. 89-94. , Oct; Rosenblum, D.S., Weyuker, E.J., Using coverage information to predict the cost-effectiveness of regression testing strategies (1997) IEEE Transactions on Software Engineering, 23 (3), pp. 146-156. , Mar; Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210. , Apr; Rothermel, G., Harrold, M.J., Empirical studies of a safe regression test selection technique (1998) IEEE Transactions on Software Engineering, 24 (6), pp. 401-419. , June; Simmons, R., Veloso, M., Smith, S., (1998) Proceedings of the Fourth International Conference on Atrificial Intelligence Planning Systems, , Pittsburgh, PA, June. AAAI Press; White, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, pp. 350-358. , Washington, Nov.4-8","Memon, A.M.; Department of Computer Science, , College Park, MD, United States; email: atif@cs.umd.edu","Hamza M.H.","IASTED",,"Proceedings of the IASTED International Conference on Artificial Intelligence and Applications (as part of the 22nd IASTED International Multi-Conference on Applied Informatics","16 February 2004 through 18 February 2004","Innsbruck",64123,,088986375X; 9780889863750,,,"English","Proc. IASTED Int. Conf. Appl. Inf.",Conference Paper,"Final","",Scopus,2-s2.0-11144347812
"Andersson J., Bache G.","8918841500;56285870200;","The video store revisited yet again: Adventures in GUI acceptance testing",2004,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","3092",,,"1","10",,22,"10.1007/978-3-540-24853-8_1","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944183631&doi=10.1007%2f978-3-540-24853-8_1&partnerID=40&md5=0b4bd4a95b1a9969f2090e1bb85f86bf","Carmen Systems AB, Odinsgatan 9, Göteborg, SE-41103, Sweden","Andersson, J., Carmen Systems AB, Odinsgatan 9, Göteborg, SE-41103, Sweden; Bache, G., Carmen Systems AB, Odinsgatan 9, Göteborg, SE-41103, Sweden","Acceptance testing for graphical user interfaces has long been recognised as a hard problem. At the same time, a full suite of acceptance tests written by the Onsite Customer has been a key principle of XP since it began [1]. It seems, however, that practice has lagged behind theory, with many practitioners still reporting weak or no acceptance testing. At XP2003, we presented our successes with text-based acceptance testing of a batch program[2]. In the past year we have extended this approach to apply to a user interface. We have developed an approach based on simulation of user actions via a record/replay layer between the application and the GUI library, generating a high-level script that functions as a use-case scenario, and using our text-based approach for verification of correctness. We believe this is an approach to GUI acceptance testing which is both customer- and developer-friendly. © Springer-Verlag Berlin Heidelberg 2004.",,"Graphical user interfaces; Software testing; Acceptance testing; Batch programs; GUI library; Hard problems; On-site customers; Text-based approach; Use case scenario; User action; Acceptance tests",,,,,,,,"Beck, K., (1999) Extreme Programming Explained, , Addison-Wesley; Andersson, J., Bache, G., Sutton, P., XP with Acceptance-Test Driven Development: A Rewrite Project for a Resource Optimization System (2003) In Proceedings of the 4Th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP2003), , Italy; http://sourceforge.net/projects/texttest; The Video Store Revisited - Thoughts on Refactoring and Testing (2002) Proceedings of the 3Rd International Conference on Extreme Programming and Flexible Processes in Software Engineering (XP2002), , Test-Driven Development: A Practical Guide” Prentice Hall, 2003 A discussion of refactoring with the same problem can be found in van Deursen, A. and Moonen, L, Italy; http://www.daa.com.au/james/pygtk, t comes as standard with Red Hat Linux versions 8.0 and onwards; http://www.centerline.com/productline/qcreplay/qcreplay.html; http://www.junit.org/news/extension/gui/index.htm; http://www.wildopensource.com/larry-projects/article1.html; It is in Any Case Bundled with Texttest as Texttest Itself Uses It for Its Own Testing",,"Eckstein J.Baumeister H.",,"Springer Verlag","5th International Conference on Extreme Programming and Agile Processes in Software Engineering, XP 2004","6 June 2004 through 10 June 2004",,126499,03029743,9783540221371,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84944183631
"Memon A., Banerjee I., Nagarajan A.","35599876500;7004506086;6701761320;","GUI Ripping: Reverse Engineering of Graphical User Interfaces for Testing",2003,"Reverse Engineering - Working Conference Proceedings",,,,"260","269",,116,"10.1109/WCRE.2003.1287256","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0346781624&doi=10.1109%2fWCRE.2003.1287256&partnerID=40&md5=b9dc0296f7ca028f1b418ab551bb6efb","Department of Computer Science, Fraunhofer Ctr. Exp. Software Eng., University of Maryland, College Park, MD, United States; Department of Computer Science, University of Maryland, College Park, MD, United States","Memon, A., Department of Computer Science, Fraunhofer Ctr. Exp. Software Eng., University of Maryland, College Park, MD, United States; Banerjee, I., Department of Computer Science, University of Maryland, College Park, MD, United States; Nagarajan, A., Department of Computer Science, University of Maryland, College Park, MD, United States","Graphical user interfaces (GUIs) are important parts of today's software and their correct execution is required to ensure the correctness of the overall software. A popular technique to detect defects in GUIs is to test them by executing test cases and checking the execution results. Test cases may either be created manually or generated automatically from a model of the GUI. While manual testing is unacceptably slow for many applications, our experience with GUI testing has shown that creating a model that can be used for automated test case generation is difficult. We describe a new approach to reverse engineer a model represented as structures called a GUI forest, event-flow graphs and an integration tree directly from the executable GUI. We describe ""GUI Ripping"", a dynamic process in which the software's GUI is automatically ""traversed"" by opening all its windows and extracting all their widgets (GUI objects), properties, and values. The extracted information is then verified by the test designer and used to automatically generate test cases. We present algorithms for the ripping process and describe their implementation in a tool suite that operates on Java and Microsoft Windows' GUIs. We present results of case studies which show that our approach requires very little human intervention and is especially useful for regression testing of software that is modified frequently. We have successfully used the ""GUI Ripper"" in several large experiments and have made it available as a downloadable tool.",,"Application under test (AUT); Ripping process; Algorithms; Automation; Computer software; Computer software selection and evaluation; Graphical user interfaces; Java programming language; Mathematical models; Regression analysis; Reverse engineering",,,,,,,,"Anderson, J.S., (1993) Automating Requirements Engineering Using Artificial Intelligence Techniques, , Ph.D. thesis, Dept. of Computer and Information Science, University of Oregon, Dec; Bashir, I., Goel, A.L., (1999) Testing Object-oriented Software, Life Cycle Solutions, , Springer-Verlag; Beizer, B., (1999) Black-box Testing: Techniques for Functional Testing of Software and Systems, , John Wiley & Sons; Chen, J., Subramaniam, S., A GUI environment to manipulate fsms for testing GUI-based applications in Java (2001) Proceeding of the 34th Hawaii International Conferences on System Sciences, , Jan; Cormen, T., Leiserson, C., Rivest, R., (2001) Introduction to Algorithms, pp. 477-485. , chapter 23.3. Prentice-Hall of India Private Limited, September; Dwyer, M.B., Can, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) ESEC/FSE '97, Volume 1301 of Lecture Notes in Computer Science, 1301, pp. 244-261. , M. Jazayeri and H. Schauer, editors. Springer / ACM Press; Fickas, S., Anderson, J.S., A proposed perspective shift: Viewing specification design as a planning problem (1991) Artificial Intelligence & Software Engineering, pp. 535-550. , D. Partridge, editor. Ablex, Norwood, NJ; Foster, H., Goradia, T., Ostrand, T., Szermer, W., A visual test development environment for GUI systems (1998) 11th International Software Quality Week, , IEEE Press, 26-29 May; Gerrard, P., Testing GUI applications (1997) EuroSTAR, , Nov; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, Volume 2 of Special Sessions: Demonstrations, 2, p. 1042; Koskimies, K., Mnnist, T., Syst, T., Tuomi, J., Automated support for modeling oo software (1998) IEEE Software, pp. 87-94. , Jan Feb; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; Memon, A.M., Advances in GUI testing (2003) Advances in Computers, 57. , ed. by Marvin V. Zelkowitz. Academic Press; Memon, A.M., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing nightly/daily builds of GUI applications (2003) Proceedings of the International Conference on Software Maintenance 2003, , September; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of UK 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, May; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Plan generation for GUI testing (2000) Proceedings of the Fifth International Conference on Artificial Intelligence Planning and Scheduling, pp. 226-235. , AAAI Press, Apr; Memon, A.M., Pollack, M.E., Soffa, M.L., A planning-based approach to GUI testing (2000) Proceedings of the 13th International Software/Internet Quality Week, , May; Memon, A.M., Pollack, M.E., Sofia, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Moore, M.M., Rule-based detection for reverse engineering user interfaces (1996) Proceedings of the Third Working Conference on Reverse Engineering, pp. 42-48. , Monterey, CA, 8-10 Nov. IEEE; Poston, R.M., Automating Specification-Based Software Testing (1996) IEEE Computer Society, , Los Alamitos, 1 edition; Scheetz, M., Mayrhauser, A.V., Dahlman, E., Howe, A.E., Generating Goal-oriented Test Cases; Scheetz, M., Mayrhauser, A.V., France, R., Dahlman, E., Howe, A.E., Generating test cases from an oo model with an ai planning system (2000) Proceedings in the Twenty-third Annual International Computer Software and Applications Conference, , March; Systa, T., Dynamic reverse engineering of Java software (2001) Technical Report, , http://www.fzi.de/Ecoop99-WS-Reengineering/papers/tarjan/ecoop.html, University of Tampere, Finland, Box 607, 33101 Tampere, Finland; Walworth, A., Java GUI testing (1997) Dr. Dobb's Journal of Software Tools, 22 (2), p. 30. , Feb","Memon, A.; Department of Computer Science, , College Park, MD, United States; email: atif@cs.umd.edu","Deursen A.Stroulia E.Storey M.A.","Reengineering Forum;IEEE Computer Society Technical Council on Software Engineering",,"Tenth Working Conference on Reverse Engineering","13 November 2003 through 16 November 2003","Victoria, BC",62035,,,,,"English","Rev Eng Working Conf Proc",Conference Paper,"Final","",Scopus,2-s2.0-0346781624
"Meszaros G.","7004782233;","Agile regression testing using record & playback",2003,"Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA",,,,"353","360",,13,"10.1145/949344.949442","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954365882&doi=10.1145%2f949344.949442&partnerID=40&md5=750ab850a9936337a185d220b227a90e","ClearStream Consulting, 87 Connaught Dr. NW, Calgary, AB T2K 1V9, Canada","Meszaros, G., ClearStream Consulting, 87 Connaught Dr. NW, Calgary, AB T2K 1V9, Canada","There are times when it is not practical to hand-script automated tests for an existing system before one starts to modify it (whether to refactor it to permit automated testing or to add new functionality). In these circumstances, the use of ""record & playback"" testing may be a viable alternative to handwriting all the tests. This paper describes experiences using this approach and summarizes key learnings applicable to other projects.","Acceptance test; Automated testing; Best practices; Functional test; JUnit; Patterns; Playback; Record; Robot user; User interface; XML","Acceptance tests; Automated testing; Best practices; Functional test; JUnit; Patterns; Playback; Record; Automation; Computer systems programming; Management; Software testing; Testing; User interfaces; XML; Object oriented programming",,,,,,,,"Beck, K., (2002) Test Driven Development: By Example, , Addison-Wesley, Boston MA; Beck, K., (1999) Extreme Programming Explained, , Addison-Wesley, Boston MA; Cunningham, W., Functional Integrated Test, , http://fit.c2.com; Fowler, M., (2002) Patterns of Enterprise Application Architectures, , Addison-Wesley, Boston MA; HttpUnit and JfcUnit User Interface Testing Frameworks, , http://JUnit.org; JUnit Testing Framework, , http://JUnit.org; TestDirector Test Management & QuickTest Test Automation Software, , http://www-svca.mercuryinteractive.com/products/; Meszaros, G., Test automation manifesto (2003) Proceedings of XP Universe 2003, , New Orleans, LA, August; Struts Web-based User Interface Framework, , http://jakarta.apache.org/struts/index.html; XUnit Family of Testing Frameworks, , http://www.xprogramming.com/software.ht","Meszaros, G.; ClearStream Consulting, 87 Connaught Dr. NW, Calgary, AB T2K 1V9, Canada; email: gerard.meszaros@acm.org",,"Assoc. Comput. Mach., Spec. Interest Group;Program. Lang. (ACM SIGPLAN)",,"18th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA'03","26 October 2003 through 30 October 2003","Anaheim, CA",83795,,1581137516; 9781581137514,,,"English","Proc Conf Object Orient Program Syst Lang Appl OOPSLA",Conference Paper,"Final","",Scopus,2-s2.0-77954365882
"Memon A.M., Soffa M.L.","35599876500;7003864328;","Regression testing of GUIs",2003,"Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering",,,,"118","127",,51,"10.1145/940071.940088","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33846308295&doi=10.1145%2f940071.940088&partnerID=40&md5=cb519d93a934b940970f1aeb5ecfdbcc","Dept. of Computer Science, University of Maryland, Fraunhofer Center Maryland, College Park, MD 20742, United States; Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Memon, A.M., Dept. of Computer Science, University of Maryland, Fraunhofer Center Maryland, College Park, MD 20742, United States; Soffa, M.L., Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Although graphical user interfaces (GUIs) constitute a large part of the software being developed today and are typically created using rapid prototyping, there are no effective regression testing techniques for GUIs. The needs of GUI regression testing differ from those of traditional software. When the structure of a GUI is modified, test cases from the original GUI are either reusable or unusable on the modified GUI. Since GUI test case generation is expensive, our goal is to make the unusable test cases usable. The idea of reusing these unusable (a.k.a. obsolete) test cases has not been explored before. In this paper, we show that for GUIs, the unusability of a large number of test cases is a serious problem. We present a novel GUI regression testing technique that first automatically determines the usable and unusable test cases from a test suite after a GUI modification. It then determines which of the unusable test cases can be repaired so they can execute on the modified GUI. The last step is to repair the test cases. Our technique is integrated into a GUI testing framework that, given a test case, automatically executes it on the GUI. We implemented our regression testing technique and demonstrate for two case studies that our approach is effective in that many of the test cases can be repaired, and is practical in terms of its time performance. © 2003 ACM.","call-tree; classification of events; GUI call-graph; GUI control-flow graph; GUI testing; regression testing; repairing test cases","Control-flow graphs; GUI regression testing; GUI testing; Large parts; Regression testing; Regression testing techniques; Test case; Test case generation; Concurrent engineering; Graphic methods; Job analysis; Rapid prototyping; Regression analysis; Repair; Software engineering; Software testing; Testing; Trees (mathematics); Graphical user interfaces",,,,,,,,"Khetawat, A., (1997) Collaborative Computing on the Internet, , Master's thesis, Electrical and Computer Engineering, North Carolina State University, Raleigh, N.C., May; Agrawal, H., Horgan, J.R., Krauser, E.W., London, S.A., Incremental regression testing (1993) Proceedings of the Conference on Software Maintenance, pp. 348-357. , Washington, Sept; Aho, A.V., Sethi, R., Ullman, J.D., (1986) Compilers Principles, Techniques, and Tools, , Addison-Wesley, Reading, MA, USA; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, 2nd edition; Benedusi, P., Cimitile, A., DeCarlini, U., Post-maintenance testing based on path change analysis (1988) Proceedings of the IEEE Conference on Software Maintenance, pp. 352-368; Binkley, D., Semantics guided regression test cost reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516. , Aug; Hammontree, M.L., Hendrickson, J.J., Hensley, B.W., Integrated data capture and analysis tools for research and testing an graphical user interfaces (1992) Proceedings of the Conference on Human Factors in Computing Systems, pp. 431-432. , New York, NY, USA, May; Harrold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions of Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Harrold, M.J., McGregor, J.D., Fitzpatrick, K.J., Incremental testing of object-oriented class structures (1992) Proceedings: 14th International Conference on Software Engineering, pp. 68-80; Harrold, M.J., Soffa, M.L., Interprocedual data flow testing (1989) Proceedings of the ACM SIGSOFT '89 Third Symposium on Testing, Analysis, and Verification (TAV3), pp. 158-167; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Special Sessions: Demonstrations, 2, p. 1042. , Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31. , Jan; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Gui testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , DOI 10.1109/32.908959; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Pollock, L., Soffa, M.L., Incremental global reoptimization of programs (1992) ACM Transactions on Programming Languages and Systems, 14 (2), pp. 173-200. , Apr; Pressman, R.S., (1994) Software Engineering: A Practitioner's Approach, , McGraw-Hill; Rosenblum, D., Rothermel, G., A comparative study of regression test selection techniques (1997) Proceedings of the IEEE Computer Society 2nd International Workshop on Empirical Studies of Software Maintenance, pp. 89-94. , Oct; Rosenblum, D.S., Weyuker, E.J., Using coverage information to predict the cost-effectiveness of regression testing strategies (1997) IEEE Transactions on Software Engineering, 23 (3), pp. 146-156. , Mar; Rothermel, G., Harrold, M.J., A safe, efficient algorithm for regression test selection (1993) Proceedings of the Conference on Software Maintenance, pp. 358-369; Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210; Rothermel, G., Harrold, M.J., Empirical studies of a safe regression test selection technique (1998) IEEE Transactions on Software Engineering, 24 (6), pp. 401-419; Rothermel, G., Harrold, M.J., Ostrin, J., Hong, C., An empirical study of the effects of minimization on the fault detection capabilities of test suites (1998) Proceedings; International Conference on Software Maintenance, pp. 34-43; White, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, pp. 350-358. , Washington, Nov.4-8","Memon, A. M.; Dept. of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,"Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT)",,"9th European Software Engineering Conference Held Jointly with 11th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/FSE-11","1 September 2003 through 5 September 2003","Helsinki",80970,,1581137435; 9781581137439,,,"English","Proc ACM SIGSOFT Symp Found Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-33846308295
"Dabóczi T., Kollár I., Simon G., Megyeri T.","56038762100;7004067351;7403268492;6506221384;","Automatic testing of Graphical User Interfaces",2003,"Conference Record - IEEE Instrumentation and Measurement Technology Conference","1",,,"441","445",,16,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0037493787&partnerID=40&md5=f0fa6aed21fd25daca5926a6259cbe4e","Dept. of Measurement Systems, Budapest Univ. of Technol./Economics, Magyar tudósok krt. 2, H-1521 Budapest, Hungary","Dabóczi, T., Dept. of Measurement Systems, Budapest Univ. of Technol./Economics, Magyar tudósok krt. 2, H-1521 Budapest, Hungary; Kollár, I., Dept. of Measurement Systems, Budapest Univ. of Technol./Economics, Magyar tudósok krt. 2, H-1521 Budapest, Hungary; Simon, G., Dept. of Measurement Systems, Budapest Univ. of Technol./Economics, Magyar tudósok krt. 2, H-1521 Budapest, Hungary; Megyeri, T., Dept. of Measurement Systems, Budapest Univ. of Technol./Economics, Magyar tudósok krt. 2, H-1521 Budapest, Hungary","Graphical User Interfaces are very difficult to test, since testing requires simulation of the activity of a person. The paper presents an approach where ""guided"" random selection and activation of the controls is performed. Guidance is implemented on the basis of a probability table. The technical means to perform the test is an action recorder (event recorder). Besides testing, this is a useful tool to perform demonstrations and self-guided introduction to the GUI. The recorder has been implemented in MATLAB, and it is available on the WEB.",,"Automatic testing; Computer simulation; Probability; Semantics; Application programs; Automatic testing; Computer testing; Data visualization; Embedded software; Instrument errors; Instrument testing; Instruments; MATLAB; Software testing; User interfaces; Text processors; Graphical user interfaces; Graphical user interfaces; Application softwares; Computer errors; Event recorders; Mice; Probability tables; Random selection; System testing",,,,,,,,"Virtual systems (1999) IEEE Instrumentation and Measurement Magazine, 2 (3). , the whole issue, September; User Interface Guidelines, , http://www.dcc.unicamp.br/~hans/mc750/guidelines/newfrontmatter.html; National instruments (1988) G Programming Reference Manual; Baroth, E., Hartsough, C., Wells, G., (1997) A Review of HP VEE 4.0, pp. 57-62. , Evaluation Engineering, Oct; http://www.ivifoundation.org/; Frequency Domain System Identification Toolbox for MATLAB Home Page, , http://elecwww.vub.ac.be/fdident/; Action Recorder for MATLAB Home Page, , http://www.mit.bme.hu/services/recorder/","Dabóczi, T.; Dept. of Measurement Systems, Magyar tudósok krt. 2, H-1521 Budapest, Hungary; email: daboczi@mit.bme.hu",,"IEEE Instrumentation and Measurment Society",,"Proceedings of the 20th IEEE Information and Measurement Technology Conference","20 May 2003 through 22 May 2003","Vail, CO",61133,,,CRIIE,,"English","Conf Rec IEEE Instrum Meas Technol Conf",Conference Paper,"Final","",Scopus,2-s2.0-0037493787
"Memon A., Banerjee I., Nagarajan A.","35599876500;7004506086;6701761320;","GUI ripping: Reverse engineering of graphical user interfaces for testing",2003,"Proceedings - Working Conference on Reverse Engineering, WCRE","2003-January",, 1287256,"260","269",,158,"10.1109/WCRE.2003.1287256","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944605040&doi=10.1109%2fWCRE.2003.1287256&partnerID=40&md5=cca8bb81d0940931584d92e2db9bcf35","Department of Computer Science, Fraunhofer Center for Experimental Software Engineering, University of Maryland, College Park, MD, United States; Department of Computer Science, University of Maryland, College Park, MD, United States","Memon, A., Department of Computer Science, Fraunhofer Center for Experimental Software Engineering, University of Maryland, College Park, MD, United States; Banerjee, I., Department of Computer Science, University of Maryland, College Park, MD, United States; Nagarajan, A., Department of Computer Science, University of Maryland, College Park, MD, United States","Graphical user interfaces (GUIs) are important parts of today's software and their correct execution is required to ensure the correctness of the overall software. A popular technique to detect defects in GUIs is to test them by executing test cases and checking the execution results. Test cases may either be created manually or generated automatically from a model of the GUI. While manual testing is unacceptably slow for many applications, our experience with GUI testing has shown that creating a model that can be used for automated test case generation is difficult. We describe a new approach to reverse engineer a model represented as structures called a GUI forest, event-flow graphs and an integration tree directly from the executable GUI. We describe ""GUI Ripping"", a dynamic process in which the software's GUI is automatically ""traversed"" by opening all its windows and extracting all their widgets (GUI objects), properties, and values. The extracted information is then verified by the test designer and used to automatically generate test cases. We present algorithms for the ripping process and describe their implementation in a tool suite that operates on Java and Microsoft Windows' GUIs. We present results of case studies which show that our approach requires very little human intervention and is especially useful for regression testing of software that is modified frequently. We have successfully used the ""GUI Ripper"" in several large experiments and have made it available as a downloadable tool. © 2003 IEEE.","Application software; Automatic testing; Computer science; Data mining; Educational institutions; Graphical user interfaces; Humans; Reverse engineering; Software engineering; Software testing","Application programs; Automatic test pattern generation; Automatic testing; Computer science; Computer testing; Data mining; Flow graphs; Reverse engineering; Software engineering; Software testing; User interfaces; Automated test case generation; Educational institutions; Event-flow graph; Graphical user interface (GUIs); Human intervention; Humans; Microsoft windows; Regression testing; Graphical user interfaces",,,,,,,,"Anderson, J.S., (1993) Automating Requirements Engineering Using Artificial Intelligence Techniques, , Ph.D. thesis, Dept. of Computer and Information Science, University of Oregon, Dec; Bashir, I., Goel, A.L., (1999) Testing Object-Oriented Software, Life Cycle Solutions, , Springer-Verlag; Beizer, B., (1999) Black-Box Testing: Techniques for Functional Testing of Software and Systems, , John Wiley & Sons; Chen, J., Subramaniam, S., A GUI environment to manipulate fsms for testing GUI-based applications in java Proceeding of the 34th Hawaii International Conferences on System Sciences, Jan 2001; Cormen, T., Leiserson, C., Rivest, R., (2001) Introduction to Algorithms, pp. 477-485. , chapter 23.3, Prentice-Hall of India Private Limited, September; Dwyer, M.B., Carr, V., Hines, L., Model checking graphical user interfaces using abstractions (1997) Lecture Notes in Computer Science, 1301, pp. 244-261. , M. Jazayeri and H. Schauer, editors, ESEC/FSE '97, Springer / ACM Press; Fickas, S., Anderson, J.S., A proposed perspective shift: Viewing specification design as a planning problem (1991) Artificial Intelligence & Software Engineering, pp. 535-550. , D. Partridge, editor, Ablex, Norwood, NJ; Foster, H., Goradia, T., Ostrand, T., Szermer, W., A visual test development environment for GUI systems (1998) 11th International Software Quality Week, , IEEE Press, 26-29 May; Gerrard, P., Testing GUI applications (1997) EuroSTAR, , Nov; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Special Sessions: Demonstrations, 2, p. 1042. , Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting; Koskimies, K., Mnnist, T., Syst, T., Tuomi, J., Automated support for modeling oo software (1998) IEEE Software, pp. 87-94. , Jan-Feb; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; Memon, A.M., Advances in GUI testing (2003) Advances in Computers, 57. , ed. by Marvin V. Zelkowitz, Academic Press; Memon, A.M., Banerjee, I., Hashmi, N., Nagarajan, A., DART: A framework for regression testing nightly/daily builds of GUI applications Proceedings of the International Conference on Software Maintenance 2003, September 2003; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, May; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Plan generation for GUI testing (2000) Proceedings of The Fifth International Conference on Artificial Intelligence Planning and Scheduling, pp. 226-235. , AAAI Press, Apr; Memon, A.M., Pollack, M.E., Soffa, M.L., A planning-based approach to GUI testing Proceedings of The 13th International Software/Internet Quality Week, May 2000; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Moore, M.M., Rule-based detection for reverse engineering user interfaces (1996) Proceedings of the Third Working Conference on Reverse Engineering, pp. 42-48. , Monterey, CA, 8-10 Nov. IEEE; Poston, R.M., (1996) Automating Specification-Based Software Testing, , IEEE Computer Society, Los Alamitos, 1 edition; Scheetz, M., Mayrhauser, A.V., Dahlman, E., Howe, A.E., Generating Goal-oriented Test Cases; Scheetz, M., Mayrhauser, A.V., France, R., Dahlman, E., Howe, A.E., Generating test cases from an oo model with an ai planning system Proceedings in the Twenty-Third Annual International Computer Software and Applications Conference, March 2000; Systa, T., (2001) Dynamic Reverse Engineering of Java Software, , http://www.fzi.de/Ecoop99-WS-Reengineering/papers/tarjan/ecoop.html, Technical report, University of Tampere, Finland, Box 607, 33101 Tampere, Finland; Walworth, A., Java GUI testing (1997) Dr. Dobb's Journal of Software Tools, 22 (2), pp. 30 and 32 and 34. , Feb",,"Stroulia E.Storey M.-A.van Deursen A.","IEEE Computer Society Technical Council on Software Engineering (TCSE);Reengineering Forum","IEEE Computer Society","10th Working Conference on Reverse Engineering, WCRE 2003","13 November 2003 through 16 November 2003",,114280,10951350,0769520278,,,"English","Proc. Working Conf. Rev. Eng. WCRE",Conference Paper,"Final","",Scopus,2-s2.0-84944605040
"Memon A., Banerjee I., Hashmi N., Nagarajan A.","35599876500;7004506086;14831459400;6701761320;","Dart: A Framework for Regression Testing ""Nightly/daily Builds"" of GUI Applications",2003,"IEEE International Conference on Software Maintenance, ICSM",,,,"410","419",,40,"10.1109/ICSM.2003.1235451","https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956619472&doi=10.1109%2fICSM.2003.1235451&partnerID=40&md5=f5c6361944af5a94ad4c6cb1edc39734","Department of Computer Science, Fraunhofer Ctr. Exp. Software Eng., University of Maryland, College Park, MD, United States; Department of Computer Science, University of Maryland, College Park, MD, United States","Memon, A., Department of Computer Science, Fraunhofer Ctr. Exp. Software Eng., University of Maryland, College Park, MD, United States; Banerjee, I., Department of Computer Science, University of Maryland, College Park, MD, United States; Hashmi, N., Department of Computer Science, University of Maryland, College Park, MD, United States; Nagarajan, A., Department of Computer Science, University of Maryland, College Park, MD, United States","""Nightly/daily building and smoke testing"" have become widespread since they often reveal bugs early in the software development process. During these builds, software is compiled, linked, and (re)tested with the goal of validating its basic functionality. Although successful for conventional software, smoke tests are difficult to develop and automatically rerun for software that has a graphical user interface (GUI). In this paper, we describe a framework called DART (Daily Automated Regression Tester) that addresses the needs of frequent and automated re-testing of GUI software. The key to our success is automation: DART automates everything from structural GUI analysis, test case generation, test oracle creation, to code instrumentation, test execution, coverage evaluation, regeneration of test cases, and their re-execution. Together with the operating system's task scheduler, DART can execute frequently with little input from the developer/tester to retest the GUI software. We provide results of experiments showing the time taken and memory required for GUI analysis, test case and test oracle generation, and test execution. We also empirically compare the relative costs of employing different levels of detail in the GUI test cases.",,"Computer operating systems; Regression analysis; Software engineering; Regression testing; Graphical user interfaces",,,,,,,,"http://wine.dataparty.no; http://ftp.mozilla.org/pub/mozilla/nightly/latest; http://www.acedb.org/Software/Downloads/daily.shtml; http://openwebmail.org/openwebmail/download/redhat/rpm/dailybuild; http://cruisecontrol.sourceforge.net; http://www.xoreax.com/main.htm; http://positive-g.com/dailybuild; http://www.visualbuild.com; http://www.glenmccl.com/instr/instr.htm; Beck, K., (1999) Extreme Programming Explained: Embrace Change, , Addison-Wesley; Binkley, D., Semantics guided regression test cost reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516. , Aug; Crispin, L., House, T., Wade, C., The need for speed: Automating acceptance testing in an extreme programming environment (2001) Second International Conference on eXtreme Programming and Flexible Processes in Software Engineering, pp. 96-104; Finsterwalder, M., Automating acceptance tests for gui applications in an extreme programming environment (2001) Proceedings of the 2nd International Conference on eXtreme Programming and Flexible Processes in Software Engineering, pp. 114-117. , May; Grenning, J., Launching extreme programming at a process intensive company (2001) IEEE Software, 18, pp. 27-33; Halloran, T.J., Scherlis, W.L., High quality and open source software practices (2002) Meeting Challenges and Surviving Success: 2nd Workshop on Open Source Software Engineering, , May; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, Volume 2 of SPECIAL SESSIONS: Demonstrations, 2, p. 1042; Jeffries, R., Anderson, A., Hendrickson, C., (2001) Extreme Programming Installed, , Addison Wesley; Kaner, C., Improving the maintainability of automated test suites (1997) Proceedings of the 10th International Software/Internet Quality Week; Karlsson, E.-A., Andersson, L.-G., Leion, P., Daily build and feature development in large distributed projects (2000) Proceedings of the 22nd International Conference on Software Engineering, pp. 649-658. , ACM Press; Lee White, H.A., Alzeidi, N., User-based testing of gui sequences and their interactions (2001) Proceedings of the 12th International Symposium Software Reliability Engineering, pp. 54-63; Marick, B., When should a test be automated? (1998) Proceedings of the 11th International Software/Internet Quality Week, , May; Marick, B., Bypassing the GUI (2002) Software Testing and Quality Engineering Magazine, pp. 41-47. , Sept; McConnell, S., Best practices: Daily build and smoke test (1996) IEEE Software, 13 (4), p. 144. , July; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., GUI testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; Memon, A.M., Advances in GUI testing (2003) Advances in Computers, 57. , ed. by Marvin V. Zelkowitz, Academic Press; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, May; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-Human Interaction, 2 (1), pp. 64-103; Olsson, K., Daily build - The best of both worlds: Rapid development and control (1999) Technical Report, , Swedish Engineering Industries; Poole, C., Huisman, J.W., Using extreme programming in a maintenance environment (2001) IEEE Software, 18, pp. 42-50; Robbins, J., (2000) Debugging Applications, , Microsoft Press; Rosenblum, D.S., Weyuker, E.J., Using coverage information to predict the cost-effectiveness of regression testing strategies (1997) IEEE Transactions on Software Engineering, 23 (3), pp. 146-156. , Mar; Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210. , Apr; Salzman, M.C., Rivers, S.D., Smoke and mirrors: Setting the stage for a successful usability test (1994) Behaviour and Information Technology, 13 (1-2), pp. 9-16; Schuh, P., Recovery, redemption and extreme programming (2001) IEEE Software, 18, pp. 34-41","Memon, A.; Department of Computer Science, , College Park, MD, United States; email: atif@cs.umd.edu",,"IEEE Computer Society Technical Counc. of Softw. Eng. (TCSE)","IEEE Computer Society","International Conference on Software Maintenance","22 September 2003 through 26 September 2003","Amsterdam,",61705,,769519059,CSFME,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","",Scopus,2-s2.0-77956619472
"Lowell C., Stell-Smith J.","57002790900;57003559000;","Successful automation of GUI driven acceptance testing",2003,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","2675",,,"331","333",,9,"10.1007/3-540-44870-5_43","https://www.scopus.com/inward/record.uri?eid=2-s2.0-54149105006&doi=10.1007%2f3-540-44870-5_43&partnerID=40&md5=201959b28e97cb3fb59b3e6c98c055f7","ThoughtWorks, Inc., 651 W. Washington Blvd. Suite 600, Chicago, IL  60661, United States","Lowell, C., ThoughtWorks, Inc., 651 W. Washington Blvd. Suite 600, Chicago, IL  60661, United States; Stell-Smith, J., ThoughtWorks, Inc., 651 W. Washington Blvd. Suite 600, Chicago, IL  60661, United States","Acceptance Testing is a fundamental part of XP. It provides the customer- developer “handshake” required for a project to succeed. One logical place to do this testing is at the GUI level. However, to do so requires a GUI testing tool. This paper will discuss the lessons we learned developing and using such a tool over the course of several projects. We believe that these lessons are generally applicable and will lead to successful GUI-driven testing on other projects aspiring to Agile development, whether our framework or another is in use. We particularly wanted to share those lessons for which we paid a high price to learn. © Springer-Verlag Berlin Heidelberg 2003.",,"Graphical user interfaces; Software engineering; Acceptance testing; Agile development; GUI testing; High price; Acceptance tests",,,,,,,,"Testing Framework Homepage, , http://www.junit.org/; http://marathonman.sourceforge.net/; http://groups.yahoo.com/group/java-gui-testing/; http://www.jython.org/; Lowell, C., Stell-Smith, J., Successful Automation of Gui-Driven Acceptance Testing Using Marathon, , http://marathonman.sourceforge.net/papers/Successful%20Automation%20of%20GUI%20Driven%20Acceptance%20Testing.pdf/",,"Marchesi M.Succi G.","Agile Alliance;eXoftware;Microsoft Corp;ThoughtWorks, Inc","Springer Verlag","4th International Conference on Extreme Programming and Agile Processes in Software Engineering, XP 2003","25 May 2003 through 29 May 2003",,134669,03029743,3540402152; 9783540402152,,,"English","Lect. Notes Comput. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-54149105006
"Erickson C., Palmer R., Crosby D., Marsiglia M., Alles M.","7102538228;57198522869;16244737800;16245869900;16244066900;","Make haste, not waste: Automated system testing",2003,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","2753",,,"120","128",,,"10.1007/978-3-540-45122-8_14","https://www.scopus.com/inward/record.uri?eid=2-s2.0-35248861710&doi=10.1007%2f978-3-540-45122-8_14&partnerID=40&md5=c6402194e2ec8008a611c6174bd92aad","Atomic Object LLC, 419 Norwood Ave SE, Grand Rapids, MI 49506, United States; Burke Porter Machinery, 730 Plymouth NE, Grand Rapids, MI 49505, United States; Department of Information Technology, Uppsala University, Uppsala, Sweden","Erickson, C., Atomic Object LLC, 419 Norwood Ave SE, Grand Rapids, MI 49506, United States, Department of Information Technology, Uppsala University, Uppsala, Sweden; Palmer, R., Burke Porter Machinery, 730 Plymouth NE, Grand Rapids, MI 49505, United States; Crosby, D., Atomic Object LLC, 419 Norwood Ave SE, Grand Rapids, MI 49506, United States; Marsiglia, M., Atomic Object LLC, 419 Norwood Ave SE, Grand Rapids, MI 49506, United States; Alles, M., Atomic Object LLC, 419 Norwood Ave SE, Grand Rapids, MI 49506, United States","Haste (High-level Automated System Test Environment) represents an approach to system testing that is philosophically consistent with standard XP unit testing practices. Test code runs in the same address space as the application under test, allowing for ready examination of application state. The fundamental Haste abstractions of Story, Step, and StoryBook provide a framework to implement system tests. Utility classes simplify test development. In addition to acting as XP acceptance tests, Haste tests aid source maintenance and extension, and can play an important role in a release process. This paper describes the elements of Haste, our experience with using it to test a complex Java Swing application, and the perspective of the client for whom the application was developed. Haste is available under an open source license. © Springer-Verlag Berlin Heidelberg 2003.","Acceptance; Automation; GUI; Haste; System; Testing",,,,,,,,,"Jorgensen, P., (2002) Software Testing, a Craftsman's Approach, 2nd Edition, , CRC Press; Gold, R., http://httpunit.sourceforge.net/, HTTPUnit; Kitiyakara, R., (2002) Acceptance Testing HTML, Extreme Programming and Agile Methods - XP/Agile Universe 2002, , Wells, D., Williams, L., Editors; http://jwebunit.sourceforge.net/, jWebUnit; http://jfcunit.sourceforge.net/, JFCUnit; http://jemmy.netbeans.org/, Jemmy; http://abbot.sourceforge.net/, Abbot; http://marathonman.sourceforge.net/, Marathon; Marick, B., Pettichord, B., (2002) Workshop on Agile Acceptance Tests, , http://www.pettichord.com/agile_workshop.html, XP Universe Chicago IL; Beck, K., (2000) Extreme Programming Explained, , Addison Wesley; http://webtest.canoo.com/webtest, Canoo WebTest","Erickson, C.; Atomic Object LLC, 419 Norwood Ave SE, Grand Rapids, MI 49506, United States; email: carl@atomicobject.com",,,"Springer Verlag",,,,,03029743,,,,"English","Lect. Notes Comput. Sci.",Article,"Final","",Scopus,2-s2.0-35248861710
"Memon A.M., Soffa M.L.","35599876500;7003864328;","Regression Testing of GUIs",2003,"Proceedings of the Joint European Software Engineering Conference (ESEC) and SIGSOFT Symposium on the Foundations of Software Engineering (FSE-11)",,,,"118","127",,65,"10.1145/940085.940088","https://www.scopus.com/inward/record.uri?eid=2-s2.0-1542317066&doi=10.1145%2f940085.940088&partnerID=40&md5=ac375e58bd04cdd2b99cd203b883f724","Dept. of Computer Science, University of Maryland, Fraunhofer Center Maryland, College Park, MD 20742, United States; Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Memon, A.M., Dept. of Computer Science, University of Maryland, Fraunhofer Center Maryland, College Park, MD 20742, United States; Soffa, M.L., Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Although graphical user interfaces (GUIs) constitute a large part of the software being developed today and are typically created using rapid prototyping, there are no effective regression testing techniques for GUIs. The needs of GUI regression testing differ from those of traditional software. When the structure of a GUI is modified, test cases from the original GUI are either reusable or unusable on the modified GUI. Since GUI test case generation is expensive, our goal is to make the unusable test cases usable. The idea of reusing these unusable (a.k.a. obsolete) test cases has not been explored before. In this paper, we show that for GUIs, the unusability of a large number of test cases is a serious problem. We present a novel GUI regression testing technique that first automatically determines the usable and unusable test cases from a test suite after a GUI modification. It then determines which of the unusable test cases can be repaired so they can execute on the modified GUI. The last step is to repair the test cases. Our technique is integrated into a GUI testing framework that, given a test case, automatically executes it on the GUI. We implemented our regression testing technique and demonstrate for two case studies that our approach is effective in that many of the test cases can be repaired, and is practical in terms of its time performance.","Call-tree; Classification of events; GUI call-graph; GUI control-flow graph; GUI testing; Regression testing; Repairing test cases","Computational methods; Computer software maintenance; Computer testing; Graph theory; Human engineering; Rapid prototyping; Regression analysis; Reliability; Software engineering; Call-tree; Classification of events; GUI call-graphs; GUI control-flow graphs; GUI testing; Regression testing; Repairing test cases; Graphical user interfaces",,,,,,,,"Khetawat, A., (1997) Collaborative Computing on the Internet, , Master's thesis, Electrical and Computer Engineering, North Carolina State University, Raleigh, N.C., May; Agrawal, H., Horgan, J.R., Krauser, E.W., London, S.A., Incremental regression testing (1993) Proceedings of the Conference on Software Maintenance, pp. 348-357. , Washington, Sept; Aho, A.V., Sethi, R., Ullman, J.D., (1986) Compilers Principles, Techniques, and Tools, , Addison-Wesley, Reading, MA, USA; Beizer, B., (1990) Software Testing Techniques, , Van Nostrand Reinhold, New York, 2nd edition; Benedusi, P., Cimitile, A., DeCarlini, U., Post-maintenance testing based on path change analysis (1988) Proceedings of the IEEE Conference on Software Maintenance, pp. 352-368; Binkley, D., Semantics guided regression test cost reduction (1997) IEEE Transactions on Software Engineering, 23 (8), pp. 498-516. , Aug; Hammontree, M.L., Hendrickson, J.J., Hensley, B.W., Integrated data capture and analysis tools for research and testing an graphical user interfaces (1992) Proceedings of the Conference on Human Factors in Computing Systems, pp. 431-432. , New York, NY, USA, May; Harrold, M.J., Gupta, R., Soffa, M.L., A methodology for controlling the size of a test suite (1993) ACM Transactions of Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Harrold, M.J., McGregor, J.D., Fitzpatrick, K.J., Incremental testing of object-oriented class structures (1992) Proceedings: 14th International Conference on Software Engineering, pp. 68-80; Harrold, M.J., Soffa, M.L., Interprocedual data flow testing (1989) Proceedings of the ACM SIGSOFT '89 Third Symposium on Testing, Analysis, and Verification (TAV3), pp. 158-167; Hicinbothom, J.H., Zachary, W.W., A tool for automatically generating transcripts of human-computer interaction (1993) Proceedings of the Human Factors and Ergonomics Society 37th Annual Meeting, Volume 2 of SPECIAL SESSIONS: Demonstrations, 2, p. 1042; Kung, D.C., Gao, J., Hsia, P., Toyoshima, Y., Chen, C., On regression testing of object-oriented programs (1996) The Journal of Systems and Software, 32 (1), pp. 21-31. , Jan; Memon, A.M., (2001) A Comprehensive Framework for Testing Graphical User Interfaces, , Ph.D. thesis, Department of Computer Science, University of Pittsburgh, July; Memon, A.M., Gui testing: Pitfalls and process (2002) IEEE Computer, 35 (8), pp. 90-91. , Aug; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracles for GUIs (2000) Proceedings of the ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8), pp. 30-39. , NY, Nov. 8-10; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155. , Feb; Memon, A.M., Soffa, M.L., Pollack, M.E., Coverage criteria for GUI testing (2001) Proceedings of the 8th European Software Engineering Conference (ESEC) and 9th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE-9), pp. 256-267. , Sept; Myers, B.A., User interface software tools (1995) ACM Transactions on Computer-human Interaction, 2 (1), pp. 64-103; Pollock, L., Soffa, M.L., Incremental global reoptimization of programs (1992) ACM Transactions on Programming Languages and Systems, 14 (2), pp. 173-200. , Apr; Pressman, R.S., (1994) Software Engineering: A Practitioner's Approach, , McGraw-Hill; Rosenblum, D., Rothermel, G., A comparative study of regression test selection techniques (1997) Proceedings of the IEEE Computer Society 2nd International Workshop on Empirical Studies of Software Maintenance, pp. 89-94. , Oct; Rosenblum, D.S., Weyuker, E.J., Using coverage information to predict the cost-effectiveness of regression testing strategies (1997) IEEE Transactions on Software Engineering, 23 (3), pp. 146-156. , Mar; Rothermel, G., Harrold, M.J., A safe, efficient algorithm for regression test selection (1993) Proceedings of the Conference on Software Maintenance, pp. 358-369; Rothermel, G., Harrold, M.J., A safe, efficient regression test selection technique (1997) ACM Transactions on Software Engineering and Methodology, 6 (2), pp. 173-210. , Apr; Rothermel, G., Harrold, M.J., Empirical studies of a safe regression test selection technique (1998) IEEE Transactions on Software Engineering, 24 (6), pp. 401-419. , June; Rothermel, G., Harrold, M.J., Ostrin, J., Hong, C., An empirical study of the effects of minimization on the fault detection capabilities of test suites (1998) Proceedings; International Conference on Software Maintenance, pp. 34-43; White, L., Regression testing of GUI event interactions (1996) Proceedings of the International Conference on Software Maintenance, pp. 350-358. , Washington, Nov.4-8","Memon, A.M.; Dept. of Computer Science, , College Park, MD 20742, United States; email: atif@cs.umd.edu",,"ACM SIGSOFT;Council of European Prof. Informatics Soc., CEPIS","Association for Computing Machinery","Proceedings of the Joint 9th European Software Engineering Conference (ESEC) and 11th SIGSOFT Symposium on the Foundations of Software Engineering (FSE-11)","1 September 2003 through 5 September 2003","Helsinki",62473,,1581137435; 9781581137439,,,"English","Proc. Joint Europ. Softw. Eng. Conf. (ESEC) SIGSOFT Symp. Found. Softw. Eng. (FSE-11)",Conference Paper,"Final","",Scopus,2-s2.0-1542317066
"Elbaum S., Karre S., Rothermel G.","6604075891;6504265954;7003915481;","Improving web application testing with user session data",2003,"Proceedings - International Conference on Software Engineering",,,,"49","59",,145,"10.1109/icse.2003.1201187","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0037925531&doi=10.1109%2ficse.2003.1201187&partnerID=40&md5=dbf8c59c3b0fc7ed7ad595392648264b","Dept. of Computer Science and Eng., University of Nebraska - Lincoln, Lincoln, NE, United States; Department of Computer Science, Oregon State University, Corvallis, OR, United States","Elbaum, S., Dept. of Computer Science and Eng., University of Nebraska - Lincoln, Lincoln, NE, United States; Karre, S., Dept. of Computer Science and Eng., University of Nebraska - Lincoln, Lincoln, NE, United States; Rothermel, G., Department of Computer Science, Oregon State University, Corvallis, OR, United States","Web applications have become critical components of the global information infrastructure, and it is important that they be validated to ensure their reliability. Therefore, many techniques and tools for validating web applications have been created. Only a few of these techniques, however, have addressed problems of testing the functionality of web applications, and those that do have not fully considered the unique attributes of web applications. In this paper we explore the notion that user session data gathered as users operate web applications can be successfully employed in the testing of those applications, particularly as those applications evolve and experience different usage profiles. We report results of an experiment comparing new and existing test generation techniques for web applications, assessing both the adequacy of the generated tests and their ability to detect faults on-a point-of-sale web application. Our results show that user session data can produce test suites as effective overall as those produced by existing white-box techniques, but at less expense. Moreover, the classes of faults detected differ somewhat across approaches, suggest- ing that the techniques may be complimentary.",,"Data flow analysis; Equivalence classes; Management information systems; User interfaces; Web browsers; Global information; User session data; Web application testing; Computer software selection and evaluation",,,,,,,,"http://httpd.apache.org/docs-2.0/, Apache-Organization. Apache http server version 2.0 documentation; Beizer, B., (1990) Softw. Testing Techniques, , Van Nostrand Reinhold, New York, NY; Binder, R., (2000) Testing Object-Oriented Systems, , Addison Wesley, Reading, MA; Conallen, J., (2000) Building Web Applications with UML, , Addison-Wesley Publishing Company, Reading, MA; Dickinson, W., Leon, D., Podgurski, A., Finding failures by cluster analysis of execution profiles (2001) Proceedings of the International Conference on Software Engineering, pp. 339-348. , May; Elbaum, S., Malishevsky, A.G., Rothermel, G., Test case prioritization: A family of empirical studies (2002) IEEE Transactions on Software Engineering, 28 (2), pp. 159-182. , Feb; Harrold, M., Gupta, R., Soffa, M., A methodology for controlling the size of a test suite (1993) ACM Transactions on Software Engineering and Methodology, 2 (3), pp. 270-285. , July; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments on the effectiveness of dataflow- and controlflow-based test adequacy criteria (1994) Proceedings of the International Conference on Software Engineering, pp. 191-200. , May; Kirda, E., Jazayeri, M., Kerer, C., Schranz, M., Experiences in engineering flexible web services (2001) IEEE Multi-Media, 8 (1), pp. 58-65. , Jan; Lee, T., http://www.w3.org/, World wide web consortium; Liu, C., Kung, D., Hsia, P., Hsu, C., Structural testing of web applications (2000) Proceedings of the 11th IEEE International Symposium on Software Reliability Engineering, pp. 84-96. , Oct; Manley, S., Seltzer, M., Web facts and fantasy Proceedings of the 1997 Usenix Symposium on Internet Technologies and Systems, Monterey, CA, 1997; Michael, B., Juliana, F., Patrice, G., Veri-web:automatically testing dynamic web sites Proceedings of 11th International WWW Conference, Honulolu, May 2002; Nikora, A., Munson, J., Software evolution and the fault process Proceedings of the Twenty Third Annual Software Engineering Workshop, NASA/Goddard Space Flight Center, 1998; http://www.parasoft.com/jsp/products, Parasoft. WebKing; http://www.rational.com/products/robot/, Rational-Corporation. Rational testing robot; Ricca, F., Tonella, P., Analysis and testing of web applications (2001) Proceedings of the International Conference on Software Engineering, pp. 25-34. , May; http://www.soft.com/eValid/, I. Software Research. eValid; Tzay, J., Huang, J., Wang, F., Chu, W., Constructing an object-oriented architecture for web application testing (2002) Journal of Information Science and Engineering, 18 (1), pp. 59-84. , Jan; Weyuker, E.J., On testing non-testable programs (1982) The Computing Journal, 15 (4), pp. 465-470; Weyuker, E.J., Jeng, B., Analyzing partition testing strategies (1991) IEEE Transactions on Software Engineering, 17 (7), pp. 703-711. , July; Wong, W., Horgan, J., London, S., Mathur, A., Effect of test set minimization on fault detection effectiveness (1995) Proceedings of the 17th International Conference on Software Engineering, pp. 41-50. , Apr","Elbaum, S.; Dept. of Computer Science and Eng., , Lincoln, NE, United States; email: elbaum@cse.unl.edu",,,"IEEE Computer Society","25th International Conference on Software Engineering","3 May 2003 through 10 May 2003","Portland, OR",61199,02705257,,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","",Scopus,2-s2.0-0037925531
"Fecko M.A., Lott C.M.","6603856046;24825038700;","Lessons learned from automating tests for an operations support system",2002,"Software - Practice and Experience","32","15",,"1485","1506",,5,"10.1002/spe.491","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0036912649&doi=10.1002%2fspe.491&partnerID=40&md5=1b3b074b5938355e6e97dd7caaaa0ff8","Applied Research Area, Telcordia Technologies Inc., 445 South Street, MCC-1G332R, Morristown, NJ 07960, United States","Fecko, M.A., Applied Research Area, Telcordia Technologies Inc., 445 South Street, MCC-1G332R, Morristown, NJ 07960, United States; Lott, C.M., Applied Research Area, Telcordia Technologies Inc., 445 South Street, MCC-1G332R, Morristown, NJ 07960, United States","We present experience gained in automating tests for an operations support system. A major portion of the effort was devoted to extending a commercial test tool so that testers could easily manipulate graphical user interface (GUI) objects on two implementations of the application. For this purpose, we developed a test automation library as support infrastructure for writing tests. The challenges and tradeoffs are discussed such as simplicity/complexity for a tester versus a library developer, hiding/exposing window hierarchy to the tester, providing common methods for different types of GUI objects, transparently manipulating custom GUI widgets, and coping with data-dependent test cases. We discuss the requirements of test code reusability, maintainability, and portability, and describe the solutions we found. In addition, we offer observations about benefits and pitfalls of test automation, our recommendations for maximizing return on investment, and results from automating a variety of tests.","Operations support system; Test automation; Test library","Automatic testing; Computer software maintenance; Computer software portability; Computer software reusability; Digital libraries; Graphical user interfaces; Investments; Operations support system; Test automation; Test library; World Wide Web",,,,,,,,"http://www.telecordia.com/products_services/oss, Telcordia Technologies, Inc., Piscataway, NJ. Telcordia™ Operations Support Systems; (2000) SilkTest User's Manual, , Segue Software, Inc., Lexington, MA; Boehmer, B., Patterson, B., Software test automation: Planning and infrastructure for success Proceedings of SQE STAR: International Conference on Software Testing, Analysis, and Review, Orlando, FL., May 2001. Software Quality Engineering (SQE): Orange Park, FL 2001; Allot, S.K., Automate your tests - You won't regress it! (1999) Proceedings of PNSQC: Pacific N.W. Software Quality Conference, Portland, OR, October 1999, pp. 132-154. , PNSQC: Portland, OR; Pettichord, B., Alternatives to capture replay (2000) Proceedings of SQE STAR: International Conference on Software Testing, Analysis, and Review, San Jose, CA, October 2000, , Software Quality Engineering (SQE): Orange Park, FL; Marick, B., When should a test be automated? (1998) Proceedings of QW: International Software Quality Week, San Francisco, CA, May 1998, , Software Research Institute: San Francisco, CA; Dalal, S.R., Jain, A., Kraunanithi, N., Leaton, J.M., Lott, C.M., Model-based testing of a highly programmable system (1998) Proceedings IEEE ISSRE: International Symposium on Software Reliability Engineering. Paderborn, Germany, November 1998, , IEEE Computer Society Press: Los Alamitos, CA; Fecko, M.A., Uyar, M.U., Amer, P.D., Sethi, A.S., Dzik, T.J., Menell, R., McMahon, M., A success story of formal description techniques: Estelle specification and test generation for MIL-STD 188-220 (2000) FDTs in Practice (Computer Communications), 23, pp. 1196-1213. , Lai R (ed.). Elsevier: Amsterdam; Johnson, D., Designing an automated Web test environment (2001) Proceedings of SQE STAR: International Conference on Software Testing, Analysis, and Review, Orlando, FL, May 2001, , Software Quality Engineering (SQE): Orange Park, FL; Kaner, C., Improving the maintainability of automated test suites Proceedings QW: International Software Quality Week, San Francisco, CA. Software Research Institute: San Francisco, CA, 1997; Suganuma, H., Nakamura, K., Symura, T., Test operation-driven approach on building regression testing environment (2001) Proceedings COMPSAC: International Computer Software and Applications Conference, Chicago, IL, October 2001, , IEEE Computer Society Press: Los Alamitos, CA; Tervo, B., Standards for test automation - a case study (2001) Proceedings of SQE STAR: International Conference on Software Testing, Analysis, and Review, Orlando, FL, May 2001, , Software Quality Engineering (SQE): Orange Park, FL; Lott, C.M., Automating tests on a PowerJ Web applet with SilkTest (2000) Segue@Work Newsletter, , http://www.seque.com.http://www.cs.umd.edu/∼cml, [October]; Hayes, L., The business case for test automation (2002) Proceedings of SQE STA: Software Test Automation Conference and Expo, Boston, MA, September 2002, , Software Quality Engineering (SQE): Orange Park, FL; (2000) NPAC SMS: Service Provider Certification and Regression Test Plan Matrix and Test Cases, , NeuStar, Inc., Chicago, IL.; rel. 2.0.r3.0.1 edn., July","Fecko, M.A.; Applied Research Area, 445 South Street, MCC-1G332R, Morristown, NJ 07960, United States; email: mfecko@research.telcordia.com",,,,,,,,00380644,,SPEXB,,"English","Software Pract Exper",Article,"Final","",Scopus,2-s2.0-0036912649
"Takahashi J., Kakuda Y.","7402170856;7005630359;","Effective automated testing: A solution of graphical object verification",2002,"Proceedings of the Asian Test Symposium","2002-January",, 1181725,"284","291",,,"10.1109/ATS.2002.1181725","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84949745031&doi=10.1109%2fATS.2002.1181725&partnerID=40&md5=7ad11f183cc2b48b845ad9058792034b","SAP Labs., Tokyo, Japan; Hiroshima City University, Japan","Takahashi, J., SAP Labs., Tokyo, Japan; Kakuda, Y., Hiroshima City University, Japan","Recently, software testers have relied more on automated testing to test software. Automated testing method consists of three modules: test case design, execution, and verification. Yet, to accomplish these three phases, we are always in a dilemma due to a lack of a verification function. Nearly all the commercial automated testing tools cannot efficiently compare graphical objects though GUI (Graphic User Interface) software is now more crucial than text based user interface. This research develops a technique that aids automatic behavior verification for a particularly difficult problem: determining the correction of screen and paper output. Methodology to capture and compare the output is presented and a case study using Microsoft® PowerPoint® is described. © 2002 IEEE.","Application software; Automatic testing; Desktop publishing; File systems; Graphics; Image storage; Operating systems; Page description languages; Performance evaluation; Printing","Application programs; Automatic testing; Automation; Computer operating systems; Desktop publishing; Graphical user interfaces; Optical image storage; Printing; User interfaces; Automated testing; Automated testing tools; Description languages; File systems; Graphic user interface; Graphical objects; Graphics; Performance evaluation; Software testing",,,,,,,,"(1999) PostScript® Language Reference Third Edition, , Adobe Systems, Inc Addison-Wesley Publishing Company; Beizer, B., (1995) Black-Box Testing, , John Wiley &Sons N.Y; Dustin, E., Lessons in test automation (1999) Software Testing & Quality Magazine, , September/October; Dustin, E., Rashka, J., Paul, J., (1999) Automated Software Testing, , Addison-Wesley; Fewster, M., Graham, D., (1999) Software Test Automation, , Addison Wesley N.Y; Ginsburg, A., Marks, J., A viewer for postscript documents (1996) Proc. of the ACM Symp. on User Interface Soft. and Tech.; Giuffrida, G., Shek, E., Yang, J., Knowledge-Based metadata extraction from PostScript files (2000) Proc. of the Fifth ACM Conf. on ACM, 2000; Kaner, C., Improving the maintainability of Automated Test Suites (1997) Int'l Soft. Quality Week; Memon, A.M., Pollack, M.E., Soffa, M.L., Automated test oracle (2000) Int'L. Symp. on Foundations of Soft. Eng.; (2000) Mercury Interactive Win Runner Users Guide; Myers, G.J., (1979) The Art of Software Testing, , New York: John Wiley & Sons; (1993) Microsoft Win32(tm) Programmer's Reference, , Microsoft Co Microsoft Press, WA; Takahashi, J., Is special software testing necessary before releasing products to an international markets (2000) Int'l Quality Week, , June; Takahashi, J., An automated oracle for verifying GUI objects (2001) ACM Soft. Eng. Note, 26 (4), pp. 83-88. , July; Takahahsi, J., Kakuda, Y., Extended Model-Based testing toward high code coverage rate (2002) 7th European Conf. on Soft. Quality, Helsinki; Whittaker, J., Thomason, M., A markov chain model for statistical software testing (1994) IEEE Trans. on Soft. Eng., 20 (10), pp. 812-824. , Oct; Whittaker, J., Jorgensen, A., Why software fails (1999) ACM Soft. Eng. Note, 24 (4), pp. 81-83. , July",,,"IEEE Computer Society Test Technology Technical Council (TTTC)","IEEE Computer Society","11th Asian Test Symposium, ATS 2002","18 November 2002 through 20 November 2002",,116244,10817735,0769518257; 0769518257,,,"English","Proc Asian Test Symp",Conference Paper,"Final","",Scopus,2-s2.0-84949745031
"Chen J., Subramaniam S.","56335950500;57190559145;","Specification-based Testing for GUI-based Applications",2002,"Software Quality Journal","10","3",,"205","224",,22,"10.1023/A:1021634422504","https://www.scopus.com/inward/record.uri?eid=2-s2.0-1842848037&doi=10.1023%2fA%3a1021634422504&partnerID=40&md5=1d0b0b2ce190ddfe504869beb6b24b46","School of Computer Science, University of Windsor, Windsor, Ont. N9B 3P4, Canada; Flyscan Technologies, Nepean, Canada","Chen, J., School of Computer Science, University of Windsor, Windsor, Ont. N9B 3P4, Canada; Subramaniam, S., School of Computer Science, University of Windsor, Windsor, Ont. N9B 3P4, Canada, Flyscan Technologies, Nepean, Canada","The development of GUI-based applications has raised a lot of new issues, one of them being how to automate effective testing for applications with complicated graphical user interactions. In this paper, we discuss the architectural issues and the implementation concerns of our approach to an automated specification-based testing technique for GUI-based applications. This approach is carried out by enriching existing architecture for automated specification-based testing. An essential part of our work is a visual environment to obtain test specifications. This environment pre-runs the Application Under Test (AUT) under its own control, with two prominent characteristics: First, testers can edit test specifications within the true GUI environment of the AUT. Second, the recorded input and output contain the same references as those in the AUT, so that the test cases generated from the edited specification can be used directly by test oracles during the automated testing procedure. We present our running prototype of a visual specification editor that allows users to graphically manipulate test specifications when these specifications are given in term of Finite State Machines (FSM) and the implementations of the AUT are GUI-based Java applications.","Capture/Replay; Finite state machines; Java AWT and Swing; Specification-based testing","Finite automata; Graphical user interfaces; Testing; Application under tests; Capture/replay; Existing architectures; Java AWT and Swing; Specification Based Testing; Test specifications; Visual environments; Visual specification; Specifications",,,,,"Natural Sciences and Engineering Research Council of Canada, NSERC: RGPIN 209774","This work is supported in part by the Natural Sciences and Engineering Research Council of Canada under grant number RGPIN 209774.",,"Message sequence chart (MSC) (1996) ITU-T, , Z. 120. Geneva, April 1996; Aho, A.V., Sethi, R., Ullman, J.D., (1986) Compilers: Principles, Techniques and Tools, , Addison-Wesley; Bastide, R., Palanque, P.A., A Petri net based environment for the design of event-driven interfaces (1995) Lecture Notes in Computer Science, 935, pp. 66-83. , Springer Verlag; Booch, G., Jacobson, I., Rumbaugh, J., (1998) The Unified Modeling Language User Guide, , Addison-Wesley; Bottoni, P., Chang, S.K., Costabile, M.F., Levialdi, S., Mussio, P., On the specification of dynamic visual languages (1998) IEEE Symposium on Visual Languages, pp. 14-21; Burnett, M., Sheretov, A., Rothermel, G., Scaling up a ""what you see is what you test"" methodology to spreadsheet grids (1999) IEEE Symposium on Visual Languages, pp. 30-37; Chow, T.S., Testing software design modeled by finite state machines (1978) IEEE Transactions on Software Engineering, 4 (3), pp. 178-187; Ekkart, R., Peter, G., Jens, G., Tutorial on message sequence charts (1996) Computer Networks and ISDN Systems, 28 (12), pp. 1629-1641; Erwig, M., Visual graphs (1999) IEEE Symposium on Visual Languages, pp. 122-129; Friedman, A.D., Menon, P.R., (1971) Fault Detection in Digital Circuits, , Prentice Hall Inc; Gerrard, P., Testing GUI applications (1997) Proc. of EuroSTAR'97; Gill, A., (1962) Introduction to the Theory of Finite State Machines, , New York, McGraw-Hill; Holzmann, G., (1991) The Design and Validation of Computer Protocols, , Prentice Hall; Kasik, D.J., George, H.G., Toward automatic generation of novice user test scripts (1996) ACM Conference Proc. on Human Factors in Computing Systems, pp. 244-251. , Vancouver, Canada; Lee, D., Yannakakis, M., Testing finite state machines: State identification and verification (1994) IEEE Transactions on Computers, 43, pp. 306-320; Li, X., Mugridge, W.B., Hosking, J.G., A Petri net-based visual language for specifying GUIs (1997) IEEE Symposium on Visual Languages, pp. 50-57; Memon, A., Pollack, M., Soffa, M., Hierarchical GUI test case generation using automated planning (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 144-155; Newmarch, J.D., Testing Java swing-based applications (1999) The 31st International Conference on Technology on Object-Oriented Language and Systems, pp. 156-165. , Nanjing, China, September; Rothermel, G., Li, L., DuPuis, C., Burnett, M., What you see is what you test: A methodology for testing form-based visual programs (1998) Proc. of International Conference on Software Engineering, pp. 198-207; Sabnani, K.K., Dahbura, A.T., A protocol test generation procedure (1988) Computer Networks and ISDN Systems, 15 (4), pp. 285-297; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proc. of IEEE 27th Annual International Symposium on Fault-Tolerant Computing, pp. 80-88; Sidhu, D.P., Leung, T.K., Formal methods for protocol testing: A detailed study (1989) IEEE Transactions on Software Engineering, 15, pp. 413-1326; Ural, H., Wu, X., Zhang, F., On minimizing the lengths of checking sequences (1997) IEEE Transactions on Computers, 46 (1), pp. 93-99; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction (2000) Proc. of the 11th International Symposium on Software Requirement Engineering, pp. 110-121; Yannakakis, M., Lee, D., Testing finite state machines: Fault detection (1995) Journal of Computer and System Sciences, 50, pp. 209-227","Chen, J.; School of Computer Science, , Windsor, Ont. N9B 3P4, Canada; email: suganthan@flyscan.com",,,"Kluwer Academic Publishers",,,,,09639314,,,,"English","Softw. Qual. J.",Article,"Final","",Scopus,2-s2.0-1842848037
"Belli F.","57200611344;","Finite state testing and analysis of graphical user interfaces",2001,"Proceedings of the International Symposium on Software Reliability Engineering, ISSRE",,,,"34","43",,146,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0035688762&partnerID=40&md5=92320896bbf36166eea17f2e5b5186a7","University of Paderborn, Paderborn, Germany","Belli, F., University of Paderborn, Paderborn, Germany","Based on finite-state automata (FSA) and equivalent regular expressions, the paper introduces a holistic view of fault modeling that can be carried out as a complementary step to system modeling, revealing much rationalization potential. Appropriate formal notions will be used to introduce efficient algorithms to systematically generate and select test cases. The completeness of the test can be determined exploiting the link coverage of the state transition diagram of the ISA that models both the desired and undesired behavior of the system under test; this enables a precise scalability of the test and analysis process, leading to a better cost-effectiveness. The elements of the approach will be narrated by realistic examples which will be used also to validate the approach.",,"Algorithms; Computer simulation; Cost effectiveness; Fault tolerant computer systems; Finite automata; Fault modeling; Graphical user interfaces",,,,,,,,"Aho, A.V., Dahbura, A.T., Lee, D., Uyar, M.Ü., An optimization technique for protocol conformance test generation based on UIO sequences and rural chinese postman tours (1991) IEEE Trans. Commun., 39, pp. 1604-1615; Ahrel, D., Namaad, A., The statemate semantics of statecharts (1996) ACM Trans. Softw. Eng. Meth., 5, pp. 293-333; Belli, F., Grosspietsch, K.-E., Specification of fault-tolerant system issues by predicate/transition nets and regular expressions - Approach and case study (1991) IEEE Trans. On Softw. Eng., 17 (6), pp. 513-526; Belli, F., Budnik, Ch., (2001) Minimal Spanning of Complete Interaction Sequences for GUI Testing, , Technical Report 2001/3, Softw. Eng. FB14, Univ. Paderborn; Belli, F., Dreyer, J., Program segmentation for controlling test coverage (1997) Proc. 8th ISSRE, pp. 72-83; Bochmann, G.V., Petrenko, A., Protocol testing: Review of methods and relevance for software testing (1994) Softw. Eng. Notes, ACM SIGSOFT, pp. 109-124; Boehm, B., (1981) Characteristics of Software Quality, , North Holland; Chow, T.S., Testing software designed modeled by finite-state machines (1978) IEEE Trans. Softw. Eng., 4, pp. 178-187; David, R., Thevenod-Fosse, P., Detecting transition sequences: Application to random testing of sequential circuits (1979) Proc. Int. Symp. Fault-Tolerant Computing, FTCS-9, pp. 121-124; Friedman, M.A., Voas, J., (1995) Software Assessment, , John Wiley & Sons, New York; Gargantini, A., Heitmeyer, C., Using model checking to generate tests from requirements specification (1999) Proc. ESEC/FSE '99, pp. 146-162. , ACM SIGSOFT; Hamlet, D., Foundation of software testing: Dependability theory (1994) Proc. Of ISSTA '96, pp. 84-91; Noris, C., Dill, D., Better verification through symmetry (1996) Formal Methods in System Design, 9, pp. 42-75; Kim, Y.G., Hong, H.S., Bae, D.H., Cha, S.D., Test cases generation from UML state diagrams (1999) IEE Proc.-Softw., 146, pp. 187-192. , Aug; Korel, B., Automated test data generation for programs with procedures (1996) Proc. ISSTA '96, pp. 209-215; Memon, A.M., Pollack, M.E., Soffa, M.L., Hierarchical GUI test case generation using automated planning (2001) IEEE Trans. Softw. Eng., 27 (2), pp. 144-155; Musa, J., (1999) Software Reliability Engineering - Faster Development and Testing, , McGraw-Hill, New York etc; Naito, S., Tsunoyama, M., Fault detection for sequential machines by transition tours (1981) Proc. FTCS, pp. 238-243; Parnas, D.L., On the use of transition diagrams in the design of user interface for an interactive computer system (1969) Proc. 24th ACM Nat'l. Conf., pp. 379-385; Rapps, S., Weyuker, E.J., Selecting software test data using data flow information (1985) IEEE Trans. Softw. Eng., pp. 367-375; Sabnani, K., Dahbura, A., A protocol test generation procedure (1998) Computer Networks and ISDN Systems, 15, pp. 285-297. , North-Holland; Salomaa, A., (1969) Theory of Automata, , Pergamon Press, New York; Schneider, F.B., Implementing fault-tolerant services using the state machine approach: A tutorial (1990) ACM Computing Surveys, 22, pp. 299-319; Shaw, A.C., Software specification languages based on regular expressions (1980) Software Development Tools, pp. 148-176. , ed. W.E. Riddle, R.E. Fairley, Springer, Berlin; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using finite state machines (1997) Proc. Int. Symp. Fault-Tolerant Computing, FTCS-27, pp. 80-88; Shneiderman, B., (1998) Designing the User Interface, , Addison Wesley Longman; Troebner, H., (1986) Implementierung eines Verfahrens zur syntaktischen Behandlung der Kommunikationsfehler mittels regulärer Ausdrücke, , Master Thesis and Technical Report 1986/10, Hochschule Bremerhaven, FB 2; White, L., Almezen, H., Generating test cases for GUI responsibilities using complete interaction sequences (2000) Proc. Int. Symposium on Softw. Reliability Engineering ISSRE 2000, pp. 110-119. , IEEE Comp. Press; Williams, T.W., Parker, K.P., Design for testability - A survey (1982) IEEE Trans. Comp., 31, pp. 2-15","Belli, F.; University of Paderborn, Paderborn, Germany; email: belli@upb.de",,"IEEE Compter Society;IEEE Reliability Society",,"12th International Symposium on Software Reliability Engineering","27 November 2001 through 30 November 2001","Hong Kong",58982,10719458,,PSSRF,,"English","Proc Int Symp Software Reliab Eng ISSRE",Conference Paper,"Final","",Scopus,2-s2.0-0035688762
"Memon A.M., Pollack M.E., Soffa M.L.","35599876500;7201625347;7003864328;","Hierarchical GUI test case generation using automated planning",2001,"IEEE Transactions on Software Engineering","27","2",,"144","155",,187,"10.1109/32.908959","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0035249240&doi=10.1109%2f32.908959&partnerID=40&md5=8a45d549211a35e3f0a1246fd829d077","Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Memon, A.M., Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States; Pollack, M.E., Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States; Soffa, M.L., Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","The widespread use of GUIs for interacting with software is leading to the construction of more and more complex GUIs. With the growing complexity come challenges in testing the correctness of a GUI and its underlying software. We present a new technique to automatically generate test cases for GUIs that exploits planning, a well-developed and used technique in artificial intelligence. Given a set of operators, an initial state, and a goal state, a planner produces a sequence of the operators that will transform the initial state to the goal state. Our test case generation technique enables efficient application of planning by first creating a hierarchical model of a GUI based on its structure. The GUI model consists of hierarchical planning operators representing the possible events in the GUI. The test designer defines the preconditions and effects of the hierarchical operators, which are input into a plan-generation system. The test designer also creates scenarios that represent typical initial and goal states for a GUI user. The planner then generates plans representing sequences of GUI interactions that a user might employ to reach the goal state from the initial state. We implemented our test case generation system, called Planning Assisted Tester for grapHical user interface Systems (PATHS) and experimentally evaluated its practically and effectiveness. We describe a prototype implementation of PATHS and report on the results of controlled experiments to generate test cases for Microsoft's WordPad.",,"Artificial intelligence; Computational complexity; Error correction; Graphical user interfaces; Regression analysis; Software prototyping; State assignment; Automated planning; Graphical user interface testing; Hierarchical model; Regression testing; Software Package Microsoft WordPad; Computer software selection and evaluation",,,,,"IRI-9619579

Air Force Office of Scientific Research, AFOSR: F49620-98-1-0436","This research was partially supported by the US Air Force Office of Scientific Research (F49620-98-1-0436) and by the US National Science Foundation (IRI-9619579). Atif Memon was partially supported by the Andrew Mellon Predoctoral Fellowship.",,"Myers, B.A., ""Why Are Human-Computer Interfaces Difficult to Design and Implement?"" Technical Report CS-93-183, School of Computer Science, Carnegie Mellon Univ., July, , 1993; Wittel, W.I., Jr. and T.G. Lewis, ""Integrating the MVC Paradigm into an Object-Oriented Framework to Accelerate GUI Application Development,"" Technical Report, , 91-60-06, Dept. of Computer Science, Oregon State Univ., Dec. 1991; Myers, B.A., ""User Interface Software Tools,"" ACM Trans. Computer-Human Interaction, Vol., , 2, no. 1, pp. 64-103, 1995; Rosenberg, D., ""User Interface Prototyping Paradigms in the, , 90's,"" Proc. Conf. Human Factors in Computing Systems-Adjunct Proc. (ACM INTERCHI '93), p. 231, 1993; El-Said, M.G., G. Fischer, S.A. Gamalel-Din, and M. Zaki, ""ADDI: a Tool for Automating the Design of Visual Interfaces,"" Computers & Graphics, Vol., , 21, no. 1, pp. 79-87, 1997; White, L., ""Regression Testing of GUI Event Interactions,"" Proc. Int'l Conf. Software Maintenance, Pp., , 350-358, Nov. 1996; Kasik, D.J., And H.G. George, ""Toward Automatic Generation of Novice User Test Scripts,"" Proc. Conf. Human Factors in Computing Systems: Common Ground, M.J. Tauber, V. Bellotti, R. Jeffries, J.D. Mackinlay, and J. Nielsen, Eds., Pp., , 244-251, Apr. 1996; Mulligan, R.M., M.W. Altom, and O.K. Simkin, ""User Interface Design in the Trenches: some Tips on Shooting from the Hip,"" Proc. Conf. Human Factors in Computing Systems (ACM CHI '91), Pp., , 232-236, 1991; Nielsen, J., ""Iterative User-Interface Design,"" Computer, Vol., , 26, no. 11, pp. 321, Nov. 1993; Kaddah, M.M., ""Interactive Scenarios for the Development of a User Interface Prototype,"" Proc. Fifth Int'l Conf. Human-Computer Interaction, Vol., , 2, pp. 128-133, 1993; Kaster, A., ""User Interface Design and Evaluation-Application of the Rapid Prototyping Tool EMSIG,"" Proc. Fourth Int'l Conf. Human-Computer Interaction, Vol., , 1, pp. 635-639, 1991; Kautz, H., And B. Selman, ""The Role of Domain-Specific Knowl-edge in the Planning as Satisfiability Framework,"" Proc. Fourth Int'l Conf. Artificial Intelligence Planning Systems (AlPS '98), R. Simmons, M. Veloso, and S. Smith, Eds., Pp., , 181-189, 1998; Walworth, A., ""Java GUI Testing,"" Dr. Dobb's J. Software Tools, Vol., , 22, no. 2, pp. 30, 32, and 34, Feb. 1997; Peot, M., And D. Smith, ""Conditional Nonlinear Planning,"" Proc. First Int'l Conf. AI Planning Systems, J. Hendler, Ed., Pp., , 189-197, June 1992; Weld, D.S., ""An Introduction to Least Commitment Planning,"" AI Magazine, Vol., , 15, no. 4, pp. 27-61, 1994; Weld, D.S., ""Recent Advances in AI Planning,"" AI Magazine, Vol., , 20, no. 1, pp. 55-64, 1999; Koehler, J., B. Nebel, J. Hoffman, and Y. Dimopoulos, ""Extending Planning Graphs to an ADL Subset,"" Lecture Notes in Computer Science, Vol., , 1348, pp. 273, 1997; Blum, A.L., And M.L. Fürst, ""Fast Planning through Planning Graph Analysis,"" Artificial Intelligence, Vol., , 90, no. 1-2, pp. 279-298, 1997; Erol, K., J. Hendler, and D.S. Nau, ""HTN Planning: Complexity and Expressivity,"" Proc., , 12th Nat'1 Conf. Artificial Intelligence (AAAI '94), vol. 2, pp. 1123-1128, Aug. 1994; The, L., ""Stress Tests for GUI Programs,"" Datamation, Vol., , 38, no. 18, p. 37, Sept. 1992; Hammontree, M.L., J.J. Hendrickson, and B.W. Hensley, ""Integrated Data Capture and Analysis Tools for Research and Testing a Graphical User Interfaces,"" Proc. Conf. Human Factors in Computing Systems, P. Bauersfeld, J. Bennett, and G. Lynch, Eds., Pp., , 431-432, May 1992; Kepple, L.R., ""The Black Art of GUI Testing,"" Dr. Dobb's J. Software Tools, Vol., , 19, no. 2, p. 40, Feb. 1994; Clarke, J.M., ""Automated Test Generation from a Behavioral Model,"" Proc. Pacific Northwest Software Quality Conf., May, , 1998; Chow, T.S., ""Testing Software Design Modeled by Finite-State Machines,"" IEEE Trans. Software Eng., Vol., , 4, no. 3, pp. 178-187, Mar. 1978; Esmelioglu, S., And L. Apfelbaum, ""Automated Test Generation, Execution, and Reporting,"" Proc. Pacific Northwest Software Quality Conf., Oct., , 1997; Bernhard, P.J., ""A Reduced Test Suite for Protocol Conformance Testing,"" ACM Trans. Software Eng. and Methodology, Vol., , 3, no. 3, pp. 201-220, July 1994; Cho, H., G.D. Hachtel, and F. Somenzi, ""Redundancy Identification/Removal and Test Generation for Sequential Circuits Using Implicit State Enumeration,"" Trans. Computer-Aided Design of Integrated Circuits and Systems, Vol., , 12, no. 7, pp. 935-945, July 1993; Shehady, R.K., And O.P. Siewiorek, ""A Method to Automate User Interface Testing Using Variable Finite State Machines,"" Proc., , 27th Ann. Int'l Symp. Fault-Tolerant Computing (FTCS '97), pp. 80-88, June 1997; Howe, A., A. Von Mayrhauser, and R.T. Mraz, ""Test Case Generation as an AI Planning Problem,"" Automated Software Eng., Vol., , 4, pp. 77-106, 1997; Memon, A.M., M.E. Pollack, and M.L. Soffa, ""Using a Goal-Driven Approach to Generate Test Cases for GUIs,"" Proc., , 21st Int'l Conf. Software Eng., pp. 257-266, May 1999","Memon, Atif M.; Univ of Pittsburgh, Pittsburgh, United States",,,"IEEE, Piscataway, NJ, United States",,,,,00985589,,IESED,,"English","IEEE Trans Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-0035249240
"Chen J., Subramaniam S.","56335950500;57190559145;","A GUI environment to manipulate FSMs for testing GUI-based applications in Java",2001,"Proceedings of the Hawaii International Conference on System Sciences",,,,"286","",,17,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034974197&partnerID=40&md5=eccc10f9b827649e1ec833a4c721e4c8",,"Chen, J.; Subramaniam, S.","The development of GUI-based applications has raised a lot of new issues, one of them being how to effectively test complicated graphical user interactions. In this paper, we present a visual environment for manipulating test specifications of GUI-based applications in Java. In our approach, the internal representation of a test specification, which contains the contexts of GUI input and output, is generated interactively by running the Application Under Test (AUT). In this way, existing testing tools, such as tools for test case generation, can possibly be applied on it. We provide a graphical interface to obtain such kind of internal test specifications so that testers do not need to know the details of the internal representation, and the test specification can be easily modified. We present our running prototype which let users graphically manipulate the test specification given in the form of a Finite State Machine, and the implementation of AUT is a GUI-based Java application.","Capture/Replay; Finite state machines; Java AWT and Swing; Specification-based testing","Computer aided software engineering; Graphical user interfaces; Finite state machines (FSM); Java programming language",,,,,,,,,,,,,"34th Annual Hawaii International Conference on System Sciences","3 January 2001 through 6 January 2001","Maui, HI",58187,10603425,,PHISD,,"English","Proc Hawaii Int Conf Syst Sci",Conference Paper,"Final","",Scopus,2-s2.0-0034974197
"White Lee, Almezen Husain","7402226173;6506652483;","Generating test cases for GUI responsibilities using complete interaction sequences",2000,"Proceedings of the International Symposium on Software Reliability Engineering, ISSRE",,,,"110","121",,131,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034541837&partnerID=40&md5=6229f0c3b041bf4800392f970d99739b","Case Western Reserve Univ, Cleveland, United States","White, Lee, Case Western Reserve Univ, Cleveland, United States; Almezen, Husain, Case Western Reserve Univ, Cleveland, United States","Testing Graphical User Interfaces (GUI) is a difficult problem due to the fact that the GUI possesses a large number of states to be tested, the input space is extremely large due to different permutations of inputs and events which affect the GUI, and complex GUI dependencies which may exist. There has been little systematic study of this problem yielding a resulting strategy which is effective and scalable. The proposed method concentrates upon user sequences of GUI objects and selections which collaborate, called complete interaction sequences (CIS), that produce a desired response for the user. A systematic method to test these CIS utilizes a finite-state model to generate tests. The required tests can be substantially reduced by identifying components of the CIS that can be tested separately. Since consideration is given to defects totally within each CIS, and the components reduce required testing further, this approach is scalable. An empirical investigation of this method shows that substantial reduction in tests can still detect the defects in the GUI. Future research will prioritize testing related to the CIS testing for maximum benefit if testing time is limited.",,"Computational complexity; Computer simulation; Computer supported cooperative work; Complete interaction sequences (CIS); Finite state models; Graphical user interfaces",,,,,,,,,"White, Lee; Case Western Reserve Univ, Cleveland, United States",,"Reliable Software Technologies;Telcordia Technologies;IBM Corp","IEEE, Los Alamitos, CA, United States","11th International Symposium on Software Reliability Engineering (ISSRE 2000)","8 October 2000 through 11 October 2000","San Jose, CA, USA",57707,10719458,,PSSRF,,"English","Proc Int Symp Software Reliab Eng ISSRE",Conference Paper,"Final","",Scopus,2-s2.0-0034541837
"Kung David C., Liu Chien-Hung, Hsia Pei","7005075730;7409787147;7006543413;","Object-oriented Web test model for testing Web applications",2000,"Proceedings - IEEE Computer Society's International Computer Software and Applications Conference",,,,"537","542",,33,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034504474&partnerID=40&md5=e56e37ed23f57509294ec359d09b4244","Univ of Texas at Arlington, Arlington, United States","Kung, David C., Univ of Texas at Arlington, Arlington, United States; Liu, Chien-Hung, Univ of Texas at Arlington, Arlington, United States; Hsia, Pei, Univ of Texas at Arlington, Arlington, United States","Recently, the number of Web applications has increased immensely. Many businesses have been using Web applications for their mission-critical operations. As Web applications become complex, their quality and reliability become crucial. This paper describes an Object-Oriented test model that captures both structural and behavioral test artifacts of Web applications. The model represents the entities of Web applications as objects and describes their structures, relationships, and dynamic behaviors. Based on the test model, test methods are presented to derive test cases automatically for ensuring the structures and behaviors of Web applications.",,"Object oriented programming; User interfaces; Web browsers; World Wide Web; Web application testing; Computer software selection and evaluation",,,,,,,,,"Kung, David C.; Univ of Texas at Arlington, Arlington, United States",,"IEEE","IEEE, Los Alamitos, CA, United States","2000 IEEE 24th Annual International Computer Software and Applications Conference (COMPSAC 2000)","25 October 2000 through 27 October 2000","Taipei, Taiwan",57757,07303157,,PSICD,,"English","Proc IEEE Comput Soc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-0034504474
"Memon A.M., Pollack M.E., Soffa M.L.","35599876500;7201625347;7003864328;","Automated test oracles for GUIs",2000,"Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering",,,,"30","39",,109,"10.1145/355045.355050","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0034448398&doi=10.1145%2f355045.355050&partnerID=40&md5=2987c398fa07a93789606300cbf83aea","Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Memon, A.M., Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States; Pollack, M.E., Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States; Soffa, M.L., Dept. of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260, United States","Graphical User Interfaces (GUIs) are critical components of today's software. Because GUIs have different characteristics than traditional software, conventional testing techniques do not apply to GUI software. In previous work, we presented an approach to generate GUI test cases, which take the form of sequences of actions. In this paper we develop a test oracle technique to determine if a GUI behaves as expected for a given test case. Our oracle uses a formal model of a GUI, expressed as sets of objects, object properties, and actions. Given the formal model and a test case, our oracle automatically derives the expected state for every action in the test case. We represent the actual state of an executing GUI in terms of objects and their properties derived from the GUI's execution. Using the actual state acquired from an execution monitor, our oracle automatically compares the expected and actual states after each action to verify the correctness of the GUI for the test case. We implemented the oracle as a component in our GUI testing system, called Planning Assisted Tester for grapHical user interface Systems (PATHS), which is based on AI planning. We experimentally evaluated the practicality and effectiveness of our oracle technique and report on the results of experiments to test and verify the behavior of our version of the Microsoft WordPad's GUI.","Automated oracles; GUI test oracles; GUI testing","Algorithms; C (programming language); Computer hardware description languages; Computer selection and evaluation; Computer simulation; Java programming language; Software engineering; Systems analysis; Automated oracles; Graphical user interfaces test oracles; Graphical user interfaces testing; Graphical user interfaces",,,,,,,,"Dillon, L.K., Ramakrishna, Y.S., Generating oracles from your favorite temporal logic specifications (1996) Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, Volume 21 of ACM Software Engineering Notes, pp. 106-117. , New York, Oct. 16-18; ACM Press; Dillon, L.K., Yu, Q., Oracles for checking temporal properties of concurrent systems (1994) Proceedings of the ACM SIGSOFT '94 Symposium on the Foundations of Software Engineering, pp. 140-153. , Dec; Du Bousquet, L., Ouabdesselam, F., Richier, J.-L., Zuanon, N., Lutess: A specification-driven testing environment for synchronous software (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 267-276. , ACM Press, May; Frank, M., De, J.J.G., Gieskens, D., Foley, J.D., Building user interfaces interactively using pre- and postconditions (1992) Proceedings of CHI '92; Green, M., (1985) The Design of Graphical User Interfaces, , Ph.d. thesis, Department of Computer Science, University of Toronto; Jagadeesan, L.J., Porter, A., Puchol, C., Ramming, J.C., Votta, L.G., Specification-based testing of reactive software: Tools and experiments (1997) Proceedings of the 19th International Conference on Software Engineering (ICSE '97), pp. 525-537. , Berlin - Heidelberg - New York, May; Springer; Lifschitz, V., On the semantics of STRIPS Reasoning About Actions and Plans: Proceedings of the 1986 Workshop, pp. 1-9. , In M. P. Georgeff and A. L. Lansky, editors; Timberline, Oregon, June-July 1986. Morgan Kaufmann; McCarthy, J., Situations, actions, and causal laws (1963), Memo 2, Stanford University Artificial Intelligence Project, Stanford, California; Memon, A.M., Pollack, M.E., Soffa, M.L., Using a goal-driven approach to generate test cases for GUIs (1999) Proceedings of the 21st International Conference on Software Engineering, pp. 257-266. , ACM Press, May; Myers, B.A., Why are human-computer interfaces difficult to design and implement Technical Report CS-93-183, Carnegie Mellon University, School of Computer Science, July 1993; Myers, B.A., Hollan, J.D., Cruz, I.F., Strategic directions in human-computer interaction (1996) ACM Computing Surveys, 28 (4), pp. 794-809. , Dec; Myers, B.A., Olsen D.R., Jr., Bonar, J.G., User interface tools (1993) Proceedings of ACM INTERCHI'93 Conference on Human Factors in Computing Systems - Adjunct Proceedings, p. 239. , Tutorials; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for GUI systems (1998) Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA-98), pp. 82-92. , Volume 23,2 of ACM Software Engineering Notes,; New York, Mar.2-5 1998. ACM Press; Pednault, E.P.D., ADL: Exploring the middle ground between STRIPS and the situation calculus (1989) Proceedings of KR'89, pp. 324-331. , Toronto, Canada; May; Peters, D., Parnas, D.L., Generating a test oracle from program documentation (1994) Proceedings of the 1994 International Symposium on Software Testing and Analysis (ISSTA), pp. 58-65. , In T. Ostrand, editor; Richardson, D.J., TAOS: Testing with analysis and oracle support (1994) Proceedings of the 1994 International Symposium on Software Testing and Analysis (ISSTA): August 17-19, 1994, Seattle, Washington, USA, pp. 138-153. , In T. Ostrand, editor; New York, NY 10036, USA; ACM Press; Richardson, D.J., Leif-Aha, S., OMalley, T.O., Specification-based test oracles for reactive systems (1992) Proceedings of the 14th International Conference on Software Engineering, pp. 105-118. , May; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines Proceedings of the Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS'97), pp. 80-88. , Washington - Brussels - Tokyo, June 1997. IEEE Press; Siepman, E., Newton, A.R., TOBAC: Test case browser for object-oriented software (1994) Proc. International Symposium on Software Testing and Analysis, pp. 154-168. , New York, Aug.; ACM Press; Su, J., Ritter, P.R., Experience in testing the Motif interface (1991) IEEE Software, 8 (2), pp. 26-33. , Mar; Vogel, P., An integrated general purpose automated test environment (1993) Proceedings of the International Symposium on Software Testing and Analysis, pp. 61-69. , In T. Ostrand and E. Weyuker, editors; New York, NY, USA, June; ACM Press; Weld, D.S., An introduction to least commitment planning (1994) AI Magazine, 15 (4), pp. 27-61; Weld, D.S., Recent advances in AI planning (1999) AI Magazine, 20 (1), pp. 55-64. , Spring; Wittel W.I., Jr., Lewis, T.G., Integrating the MVC paradigm into an object-oriented framework to accelerate GUI application development (1991), Technical Report 91-60-06, Department of Computer Science, Oregon State University","Memon, A.M.; Dept. of Computer Science, , Pittsburgh, PA 15260, United States; email: atif@cs.pitt.edu",,"SIGSOFT","Association for Computing Machinery (ACM)","ACM SIGSOFT 8th International Symposium on the Foundations of Software Engineering (FSE-8)","8 November 2000 through 10 November 2000","San Diego, CA",58105,,,,,"English","Proc ACM SIGSOFT Symp Found Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-0034448398
"Memon Atif M., Pollack Martha E., Sofia Mary Lou","35599876500;7201625347;7007086611;","Using a goal-driven approach to generate test cases for GUIs",1999,"Proceedings - International Conference on Software Engineering",,,,"257","266",,64,"10.1145/302405.302632","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0032643001&doi=10.1145%2f302405.302632&partnerID=40&md5=ac1526cdf8bb9d99dad43396454f0cf4","Univ of Pittsburgh, Pittsburgh, PA, United States","Memon, Atif M., Univ of Pittsburgh, Pittsburgh, PA, United States; Pollack, Martha E., Univ of Pittsburgh, Pittsburgh, PA, United States; Sofia, Mary Lou, Univ of Pittsburgh, Pittsburgh, PA, United States","The widespread use of GUIs for interacting with software is leading to the construction of more and more complex GUIs. With the growing complexity comes challenges in testing the correctness of a GUI and the underlying software. We present a new technique to automatically generate test cases for GUIs that exploits planning, a well developed and used technique in artificial intelligence. Given a set of operators, an initial state and a goal state, a planner produces a sequence of the operators that will change the initial state to the goal state. Our test case generation technique first analyzes a GUI and derives hierarchical planning operators from the actions in the GUI. The test designer determines the preconditions and effects of the hierarchical operators, which are then input into a planning system. With the knowledge of the GUI and the way in which the user will interact with the GUI, the test designer creates sets of initial and goal states. Given these initial and final states of the GUI, a hierarchical planner produces plans, or a set of test cases, that enable the goal state to be reached. Our technique has the additional benefit of putting verification commands into the test cases automatically. We implemented our technique by developing the GUI analyzer and extending a planner. We generated test cases for Microsoft's Word-Pad to demonstrate the viability and practicality of the approach.",,"Computer architecture; Computer software selection and evaluation; Graphical user interfaces; Hierarchical systems; Mathematical operators; Regression analysis; Hierarchical planners; Test case generation; Computer aided software engineering",,,,,,,,,"Memon, Atif M.; Univ of Pittsburgh, Pittsburgh, PA, United States",,"ACM SIGSOFT;IEEE","IEEE, Los Alamitos","Proceedings of the 1999 International Conference on Software Engineering","16 May 1999 through 22 May 1999","Los Angeles, CA, USA",55237,02705257,,PCSED,,"English","Proc Int Conf Software Eng",Article,"Final","All Open Access, Green",Scopus,2-s2.0-0032643001
"Beer Armin, Mohacsi Stefan, Stary Christian","24821955100;6506640102;7003448093;","IDATG: an open tool for automated testing of interactive software",1998,"Proceedings - IEEE Computer Society's International Computer Software and Applications Conference",,,,"470","475",,8,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0032288894&partnerID=40&md5=b308183d41c65cb2d5b9e6492a54af07","SIEMENS, Austria","Beer, Armin, SIEMENS, Austria; Mohacsi, Stefan, SIEMENS, Austria; Stary, Christian, SIEMENS, Austria","The IDATG (Integrating Design and Automated Test Case Generation) specification technique and tool is introduced. It is designed for the automated generation of test cases during the testing of interactive industrial applications. In addition to checking the application's usability, IDATG supports both the specification of the behavior of a user interface and the generation of two types of test case i.e. for GUI coverage and for checking the usability of the application. The test procedure for both cases is based on a particular test-process model and on a formal language for representing the user interface. The tool architecture comprises a set of visual editors, a language interpreter and a test-case generator. The interface concept on which the components are based enables the tool to be integrated into industrial platforms for defining and executing test cases. A first cost/benefit analysis indicates a significant reduction of effort for test-case specification and test-result analysis.",,"Computer architecture; Computer simulation; Error detection; Formal languages; Graphical user interfaces; Industrial applications; Interactive computer systems; Program interpreters; Integrating design and automated test case generation; Language interpreter; Test case generator; Visual editors; Computer aided software engineering",,,,,,,,,"Beer, Armin; SIEMENSAustria",,"IEEE","IEEE Comp Soc, Los Alamitos, CA, United States","Proceedings of the 1998 IEEE 22nd Annual International Computer Software & Applications Conference","19 August 1998 through 21 August 1998","Vienna, Austria",49277,07303157,,PSICD,,"English","Proc IEEE Comput Soc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-0032288894
"Ostrand T., Anodide A., Foster H., Goradia T.","6603642808;57195741520;7103146966;6603558956;","A visual test development environment for GUI systems",1998,"Proceedings of the 1998 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 1998",,,,"82","92",,38,"10.1145/271771.271793","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969580558&doi=10.1145%2f271771.271793&partnerID=40&md5=0d552fd30b1a7b9c21722ff31f3a1695","Siemens Corporate Research, 755 College Road East, Princeton, NJ  08540, United States","Ostrand, T., Siemens Corporate Research, 755 College Road East, Princeton, NJ  08540, United States; Anodide, A., Siemens Corporate Research, 755 College Road East, Princeton, NJ  08540, United States; Foster, H., Siemens Corporate Research, 755 College Road East, Princeton, NJ  08540, United States; Goradia, T., Siemens Corporate Research, 755 College Road East, Princeton, NJ  08540, United States","We have implemented an experimental test development environment (TDE) intended to raise the effectiveness of tests produced for GUI systems, and raise the productivity of the GUI system tester. The environment links a test designer, a test design library, and a test generation engine with a standard commercial capture/replay tool. These components provide a human tester the capabilities to capture sequences of interactions with the system under test (SUT), to visually manipulate and modify the sequences, and to create test designs that represent multiple individual test sequences. Test development is done using a high-level model of the SUT's GUI, and graphical representations of test designs. TDE performs certain test maintenance tasks automatically, permitting previously written test scripts to run on a revised version of the SUT.","Capture/replay; GUI-based system; Test coverage; Test designer; Test generation; Test maintenance; Test scenario; Testing; Visual editor","Graphical user interfaces; Systems analysis; Testing; Capture/replay; Test coverage; Test generations; Test maintenances; Test scenario; Visual editors; Software testing",,,,,,,,"Balcer, M.J., Hasling, W., Ostrand, T.J., Automatic generation of test scripts from formal test specifications (1989) Proc. of the Third Symposium on Testing, Analysis, and Verification, pp. 210-218. , ACM Press, New York; (1996) QA Partner and QA Planner User's Guide, , Segue Software, Inc., Newton Centre, MA; Mercury Interactive Home Page, , http://www.merc-int.com/, Mercury Interactive Corporation, Sunnyvale, CA; SQA Robot, , http://www.rational.com/products/sqasuite/robot/, Cupertino, CA; Java Star, , http://www.suntest.com/JavaStar/JavaStar.html, SunTest, Sun Microsystems, Inc., Palo Alto, CA",,"Tracz W.","ACM Special Interest Group on Software Engineering (SIGSOFT)","Association for Computing Machinery, Inc","1998 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 1998","2 March 1998 through 4 March 1998",,129251,,0897919718; 9780897919715,,,"English","Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal., ISSTA",Conference Paper,"Final","",Scopus,2-s2.0-84969580558
"Beer A., Mohacsi S., Stary C.","24821955100;6506640102;7003448093;","IDATG: An open tool for automated testing of interactive software",1998,"Proceedings - International Computer Software and Applications Conference",,,,"470","475",,,"10.1109/CMPSAC.1998.716698","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046030631&doi=10.1109%2fCMPSAC.1998.716698&partnerID=40&md5=2b19cc8f3172ba566eb12a6fe13e1e1f","SIEMENS, Austria; University of Linz, Linz, Austria","Beer, A., SIEMENS, Austria; Mohacsi, S., SIEMENS, Austria; Stary, C., University of Linz, Linz, Austria","The IDATG (Integrating Design and Automated Test Case Generation) specification technique and tool is introduced. It is designed for the automated generation of test cases during the testing of interactive industrial applications. In addition to checking the application's usability, IDATG supports both the specification of the behavior of a user interface and the generation of two types of test case i.e. for GUI coverage and for checking the usability of the application. The test procedure for both cases is based on a particular test process model and on a formal language for representing the user interface. The tool architecture comprises a set of visual editors, a language interpreter and a test case generator. The interface concept on which the components are based enables the tool to be integrated into industrial platforms for defining and executing test cases. A first cost/benefit analysis indicates a significant reduction of effort for test case specification and test result analysis. © 1998 IEEE.",,"Application programs; Automation; Behavioral research; Cost benefit analysis; Formal languages; Specifications; User interfaces; Visual languages; Automated generation; Automated test case generation; Interactive software; Language interpreters; Specification technique; Test case generators; Test case specifications; Test process models; Software testing",,,,,,,,"Daich, G.T., Emphasizing software test process improvement (1996) Testing Technique Newsletters, , SRI, San Francisco, Nov./Dec; Beizer, B., (1995) Black-Box Testing. Techniques for Functional Testing of Software and Systems, , John Wiley & Sons, New York; Ostrand, T., Anodide, A., Foster, H., Goradia, T., A visual test development environment for GUI systems Proc. of ACM SIGSOFT, ISSTA 1998, 1998, pp. 82-92. , Clearwater Beach, Florida, USA; Beer, A., Bridging the gap between specifications and tests (1994) Proc. 4th Europ. Conf. on Software Quality, pp. 78-87. , EOQ-SC, Basel, Switzerland; Marick, B., (1995) The Craft of Software Testing, , Prentice Hall, Englewood Cliffs, N.J; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments on the effectiveness of data-flow and controlflow-based test adequacy criteria (1994) IEEE Proc. ICSE-16, 16th Int. Conf. on Softw. Engineering, , IEEE, Sorrento, Italy; (1996) Structural Coverage Metrics, , IPL Inf. Proc. Ltd, IPL White paper, Bath, UK; Stary, Ch., St. Mohacsi, Nagelholz, M., Vidakis, N., Task-oriented prototyping for interactive software development (1997) Proceedings IEEE COMPSAC'97, , Washington D.C; (1993) SEM Engineering Manual v 3.0, , Siemens Austria, Siemens AG Austria, Vienna; Weidmann, C., Entwicklung eines Kostenmodells zur Bewertung der Auswirkungen von qualitätssichernden Maßnahmen im Software-Entwicklungsprozeß (1993) Master-Thesis, Fachhochschule/Siemens Munich, , Munich, Germany; Boehm, B.W., Pappacio, P.N., Understanding and controlling software costs (1988) IEEE Transaction Software Eng., 14 (10), pp. 1462-1477. , IEEE, Oct; Lugger, A., (1998) Cost-benefit Analysis of Process-oriented Testing, , Master-Thesis, Universität Linz. Linz, Austria; Jones, C.P., (1996) Software defect removal efficiency, 29 (4), pp. 94-95. , IEEE Trans. Computer, IEEE",,,"IEEE Computer Society","IEEE Computer Society","22nd Annual International Computer Software and Applications Conference, Compsac 1998","19 August 1998 through 21 August 1998",,134867,07303157,0818685859,PSICD,,"English","Proc Int Comput Software Appl Conf",Conference Paper,"Final","",Scopus,2-s2.0-85046030631
"Spence I.","7006340060;","Specification for testing - The removal of abstraction",1998,"Software Testing Verification and Reliability","8","1",,"3","14",,,"10.1002/(SICI)1099-1689(199803)8:1<3::AID-STVR152>3.0.CO;2-M","https://www.scopus.com/inward/record.uri?eid=2-s2.0-11544325629&doi=10.1002%2f%28SICI%291099-1689%28199803%298%3a1%3c3%3a%3aAID-STVR152%3e3.0.CO%3b2-M&partnerID=40&md5=1851f1211a422056ddaf6bd37bd4453b","Department of Computer Science, Queen's University of Belfast, University Road, Belfast BT7 INN, United Kingdom","Spence, I., Department of Computer Science, Queen's University of Belfast, University Road, Belfast BT7 INN, United Kingdom","A good specification of a software system is the best foundation for good testing, and automated testing really requires a formal specification. A formal specification of the operations provided by a system is typically written at an abstract level. The data types of any arguments and result values may not be directly supported by the user interface and there is no indication of the precise means by which an operation is invoked. This abstraction is essential for considering the overall functionality but means that the system is under-specified from the point of view of the tester - particularly if automated testing is envisaged. Some techniques are presented for including concrete user interface details with the abstract description of a formal specification, and these are illustrated with a worked example. The formal notation used is VDM-SL. © 1998 John Wiley & Sons, Ltd.","Automated testing; Formal specification; Specification-based testing; User interface specification","Formal languages; Software engineering; Specifications; User interfaces; Automated testing; Formal specification; Specification based testing; User interface specification; Computer software",,,,,,,,"Harrison, M., Thimbleby, H., (1990) Formal Methods in Human-Computer Interaction, , Cambridge University Press, Cambridge, U.K; (1993) Information Technology Programming Languages - VDM-SL, , First Committee Draft Standard CD 13817-1, Document ISO/IEC JTC1/SC22/WG19N-20, International Organisation for Standardization, Geneva, Switzerland; Jones, C., (1990) Systematic Software Development Using VDM, 2nd Edn., , Prentice-Hall International, Hemel Hempstead, U.K; Myers, G., (1979) The Art of Software Testing, , Wiley Interscience, New York, U.S.A; Schlungbaum, E., Elwert, T., Dialogue graphs - A formal and visual specification technique for dialogue modelling (1996) Proceedings of the BCS-FACS Workshop on Formal Aspects of the Human-Computer Interface, , Sheffield Hallam University, Springer-Verlag, Berlin, Germany; Spence, I., Meudec, C., Generation of software tests from specifications (1994) Building Quality into Software, Proceedings of SQM'94, pp. 517-530. , Computational Mechanics Publications, Southampton, U.K; Stocks, P., Carrington, D., A framework for specification-based testing (1996) IEEE Transactions on Software Engineering, 22 (11), pp. 777-793; Welsh, J., Elder, J., (1987) Introduction to Modula-2, , Prentice-Hall International, Hemel Hempstead, U.K","Spence, I.; Department of Computer Science, University Road, Belfast BT7 INN, United Kingdom",,,"John Wiley and Sons Ltd",,,,,09600833,,JTREE,,"English","Software Test Verif Reliab",Article,"Final","",Scopus,2-s2.0-11544325629
"Shehady R.K., Siewiorek D.P.","57204955985;7004535258;","A method to automate user interface testing using variable finite state machines",1997,"Digest of Papers - 27th Annual International Symposium on Fault-Tolerant Computing, FTCS 1997",,, 614080,"80","88",,93,"10.1109/FTCS.1997.614080","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84957710750&doi=10.1109%2fFTCS.1997.614080&partnerID=40&md5=ac8607def71b272ddd26a6c0afc7d511","Department of Electrical and Computer Engineering, Carnegie Mellon University, Pittsburgh, PA  15213, United States","Shehady, R.K., Department of Electrical and Computer Engineering, Carnegie Mellon University, Pittsburgh, PA  15213, United States; Siewiorek, D.P., Department of Electrical and Computer Engineering, Carnegie Mellon University, Pittsburgh, PA  15213, United States","A method has been developed that allows automating a portion of interface testing. A core component of this method is a simple, yet flexible way to specify a formal model of a user interface, named variable finite state machines (VFSM). The model can be converted into an equivalent finite state machine, from which tests can be generated. The method has been applied to the user interface of Navigator II, a wearable computer system employed by aircraft repair personnel. A VFSM model of the interface was constructed and used to generate 5,968 tests, each composed of an input sequence and its corresponding expected output sequence. The tests were then applied to an instrumented form of the interface, and the results were compared to the expected output. From the data collected, three error sources were detected in the original interface that had escaped months of previous debugging efforts and field usage. © 1997 IEEE.",,"Air navigation; Fault tolerance; Fault tolerant computer systems; Interface states; Aircraft repairs; Core components; Debugging efforts; Error sources; Formal model; Input sequence; Interface testings; Output sequences; User interfaces",,,,,,"* Research Supported in part by Boeing Computer Services Grant NO.G 1151-SJA-94-071",,"Andriole, S., (1986) Software Validation, Verification, Testing & Documentation, , Petrocelli Books, Princeton, NJ; Howden, W.E., A survey of dynamic analysis methods (1981) Tutorial: Software Testing & Validation Techniques, , IEEE Press; Gonenc, G., A method for the design of fault detection experiments (1970) IEEE Trans. Computer, C-19, pp. 551-558. , June; Chow, T.S., Testing design modeled by finite state machines (1978) IEEE Trans. on Software Eng., 4 (3); Naito, S., Tsunoyama, M., Fault detection for sequential machines by transition tours (1981) Proc. of Fault Tolerant Computing Symposium, pp. 238-243; Sabnani, K.K., Dahbura, A.T., A protocol testing procedure (1988) Computer Networks and ISDN System, 15 (4), pp. 285-297; Fujiwara, S., Bochmann, G.V., Khendek, F., Ama-Ioua Ghedemsi, M., Test selection based on finite state models (1991) IEEE Trans. on Soft Eng., 17 (6), pp. 591-603; Ghedemsi, A., Bochmann, G.V., (1992) Diagnostic Tests for Finite State Machines, , Univ de Montreal, Montreal, January; Ghedemsi, A., (1991) Test Selection and Diagnostic Methods, , TR, Univ de Montreal, Montreal, February; Shehady, R., Siewiorek, D., (1996) A Methodology to Automate User Interface Testing, , EDRC Tech Report, December; Smailagic, A., Siewiorek, D., Modalities of interaction with CMU wearable computers (1996) IEEE Personal Communications, 3 (1), pp. 15-25. , February",,,"IEEE Computer Society Technical Committee on Fault-Tolerant Computing","Institute of Electrical and Electronics Engineers Inc.","27th Annual International Symposium on Fault-Tolerant Computing, FTCS 1997","24 June 1997 through 27 June 1997",,142051,,0818678313; 9780818678318,,,"English","Dig. Pap. - Annu. Int. Symp. Fault-Toler. Comput., FTCS",Conference Paper,"Final","",Scopus,2-s2.0-84957710750
"Maxion R.A., Syme P.A.","6701748212;6602258639;","MetriStation: A tool for user-interface fault detection",1997,"Digest of Papers - 27th Annual International Symposium on Fault-Tolerant Computing, FTCS 1997",,, 614081,"89","98",,1,"10.1109/FTCS.1997.614081","https://www.scopus.com/inward/record.uri?eid=2-s2.0-33845583771&doi=10.1109%2fFTCS.1997.614081&partnerID=40&md5=9c098e0b4882164bfbe89d44ff8d90a9","School of Computer Science, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA  15213, United States","Maxion, R.A., School of Computer Science, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA  15213, United States; Syme, P.A., School of Computer Science, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA  15213, United States","Using extant methods of evaluation, user-interface fault detection is difficult, time consuming, error prone, often qualitative, and subject to evaluator bias. One of the more effective approaches, empirical evaluation, is data intensive, laboratory oriented, and requires up to 25 hours of skilled analyst time for every hour of testing time; hence it is seldom used. Preparing the evaluation is difficult; results can be inconsistent and hard to replicate. This paper presents MetriStation-a new, portable user-interface evaluation system that runs on an IBM-compatible desktop or notebook computer. MetriStation monitors user sessions, automatically capturing derailed data about user-system behavior including keystrokes, mouse clicks, mouse movements, video display context, user speech (think-aloud protocols), observer speech and critical incidents. Hesitation analysis is used for automatic location of potential user-interface defects. Data can be analyzed and presented in as much as three orders of magnitude less time than is conventionally possible; the uniformity of the data and analysis provide increased repeatability and accuracy over traditional evaluation methods. MetriStation's capabilities are demonstrated in a study of a simple interface. © 1997 IEEE.",,"Behavioral research; Display devices; Fault detection; Fault tolerance; Mammals; Automatic location; Critical incidents; Effective approaches; Empirical evaluations; Evaluation methods; Interface evaluation; Think-aloud protocol; Three orders of magnitude; User interfaces",,,,,"Office of Naval Research, ONR: N00014-93-1-1358","This work was supported by the Office of Naval Research under contract #N00014-93-1-1358. The views and conclusions herein are those of the authors, and should not be interpreted as representing official policies, epher expressed or implied, of ONR or the U.S. government.","This work was supported by the Office of Naval Research under contract","Desurvire, H.W., Faster, C., Are usability inspection methods as effective as empirical testing? (1994) Usability Inspection Methods, pp. 173-202. , Jakob Nielsen and Robert L. Mack (Eds.). New York John Wiley & Sons, Ch. 7; Ericsson, K.A., Simon, H.A., Appendix [Practical advice for verbal reports] (1984) Protocol Analysis: Verbal Reports As Data, pp. 375-379. , Cambridge, Massachusetts: MIT Press; Hollnagel, E., (1993) Human Reliability Analysis: Context and Control, , Academic Press, London; Maxion, R.A., Dechambeau, A.L., Dependability at the user interface (1995) 25th International Symposium on Fault-Tolerant Computing (FTCS-25), pp. 528-535. , Silver Spring, Maryland: IEEE Computer Society Press, June 27-30, Pasadena, Califomia; Messmer, H.-P., (1995) The Indispensable PC Hardware Book, , 2nd Edition, Addison-Wesley, Wokingham, England; Molich, R., Nielsen, J., Improving a human-computer dialogue (1990) Communications of the ACM, 33 (3), pp. 338-348. , March; Nielsen, J., Heuristic evaluation (1994) Usability Inspection Methods, pp. 25-62. , Jakob Nielsen and Robert L. Mack (Eds.). New York John Wiley & Sons, Ch. 2; Preece, J., Rogers, Y., Sharp, H., Benyon, D., Holland, S., Carey, T., (1994) Human-Computer Interaction, , Addison-Wesley, Wokingham, England; Sanderson, P., Scott, J., Johnston, T., Mainzer, J., Watanabe, L., James, J., MacSHAPA and the enterprise of exploratory sequential data analysis (ESDA) (1994) International Journal of Human-Computer Studies, 41 (5), pp. 633-681. , November; Toy, W.N., Fault-tolerant design of local ESS processors (1978) Proceedings of the IEEE, 66 (10), pp. 1126-1145. , October; Treu, S., (1994) User Interface Evaluation. A Structured, , Approach, Plenum Press, New York; Wharton, C., Rieman, J., Lewis, C., Polson, P., The cognitive walkthrough method: A Practitioner's guide (1994) Usabiliry Inspection Methods, pp. 105-140. , Jakob Nielsen and Robert L. Mack (Eds.). New York: John Wiley & Sons, Ch. 5",,,"IEEE Computer Society Technical Committee on Fault-Tolerant Computing","Institute of Electrical and Electronics Engineers Inc.","27th Annual International Symposium on Fault-Tolerant Computing, FTCS 1997","24 June 1997 through 27 June 1997",,142051,,0818678313; 9780818678318,,,"English","Dig. Pap. - Annu. Int. Symp. Fault-Toler. Comput., FTCS",Conference Paper,"Final","",Scopus,2-s2.0-33845583771
"Hicks I.D., South G.J., Oshisanwo A.O.","6603575736;36861923700;6602938462;","Automated testing as an aid to systems integration",1997,"BT Technology Journal","15","3",,"26","36",,6,"10.1023/A:1018677900982","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0031192805&doi=10.1023%2fA%3a1018677900982&partnerID=40&md5=87e42ff90564671e38e49831cc6623a8","University of Essex, United Kingdom; University College, London, United Kingdom; IVV and T, United Kingdom; CVNS Service, Canada; Reading University, United Kingdom; NOMS2 VV and T; WMS Product; University of Waterloo, Canada; Systems Integration Department; MCSS for BT Telemarketing Services; MCSS BT Telemarketing Serv. I.","Hicks, I.D., University of Essex, United Kingdom, University College, London, United Kingdom, IVV and T, United Kingdom, CVNS Service, Canada; South, G.J., Reading University, United Kingdom, NOMS2 VV and T, WMS Product; Oshisanwo, A.O., University of Waterloo, Canada, Systems Integration Department, MCSS for BT Telemarketing Services, MCSS BT Telemarketing Serv. I.","Within BT's Systems Integration department, the integration and testing of large, complex software systems often requires large and complex test regimes. Optimising the activities and time-scales within this part of the life cycle will invariably involve the application of test tools. This paper sets out the main elements required for successful test automation. It begins by introducing test complexity measures in process testing of a character-based user interface software system. This is then developed to describe a theoretical approach to the application of test automation in the context of graphical user interface (GUI) software systems and discusses methodologies for test-case design and reuse, to achieve the maximum benefit of tool utilisation. The paper concludes with a description of the successful application of test automation within two major systems integration projects, Work Manager and MCSS for Cambridge.",,"Automatic testing; Graphical user interfaces; Large scale systems; Optimization; Program debugging; Complex software systems; Systems integration; Computer aided software engineering",,,,,,,,"Myers, G.J., (1979) The Art of Software Testing, , Wiley, New York; Norris, M., Rigby, P., (1992) Software Engineering Explained, p. 106. , Wiley; South, G.J., (1994) Automating Complex Systems, , MSc Dissertation; Hicks, I.D., (1995) Automation of GUI Software Systems, , MSc Dissertation; (1983) IEEE Standard for Software Test Documentation, , ANSI/IEEE Std 829; Kepple, L.R., The black art of GUI testing (1994) Dr Dobb's Journal; Graham, D.R., (1991) The CAST Report, , Grove Consultants, Unicom Seminars Ltd; Beizer, B., (1990) 'Software Testing Techniques', Second Edition, p. 459. , Van Nostrand Reinhold, New York; WinRunner User Guide, , Mercury Interactive; PurePerformix User Guide","Hicks, I.D.; University College, London, United Kingdom",,,"Kluwer Academic Publishers",,,,,13583948,,BTTJE,,"English","BT Technol J",Article,"Final","",Scopus,2-s2.0-0031192805
"Lin D.C., Klein J.R., Pendley R.D., Hoge S.L.","7403692077;7404605428;6506063730;7004016626;","Use of XRunner for automation",1996,"International Telemetering Conference (Proceedings)","32",,,"689","696",,1,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0030384083&partnerID=40&md5=4d858dddca7984e11a0ffba80864fcf3",,"Lin, D.C.; Klein, J.R.; Pendley, R.D.; Hoge, S.L.","XRunner, a UNIX, client-server based, automated record-replay test tool developed by Mercury Interactive Corporation, was used by a project at NASA's Goddard Space Flight Center to automate intensive GUI/window-driven satellite operations functions. This work was part of the Integrated Monitoring, Analysis and Control COTS System (IMACCS), a COTS integration prototype development effort. XRunner, running in its object-oriented context sensitive mode, recorded the window/push-button images of significant events in spacecraft operations with sequential steps and generated test script language (TSL) for subsequent replay or test verification. The recorded TSL was optimized such that scenario replay timing, sequencing, grouping, and UNIX interactions became simple, easily-automated tasks instead of manually intensive, error-prone operations. This feature of the XRunner tool is expected to greatly enhance operations and testing.",,"Analysis; Automation; Control systems; Graphical user interfaces; Monitoring; Object oriented programming; Satellites; Spacecraft; Testing; Integrated monitoring; Replay timing; Test script language; XRunner; UNIX",,,,,,,,,"Lin, D.C.",,"International Foundation for Telemetering","Instrument Society of America, Research Triangle Park, NC, United States","Proceedings of the 1996 International Telemetering Conference, ITC","28 October 1996 through 31 October 1996","San Diego, CA, USA",45601,08845123,,ITCOD,,"English","Int Telem Conf Proc",Conference Paper,"Final","",Scopus,2-s2.0-0030384083
"White Lee J.","7402226173;","Regression testing of GUI event interactions",1996,"Conference on Software Maintenance",,,,"350","358",,42,"10.1109/icsm.1996.565038","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0030393439&doi=10.1109%2ficsm.1996.565038&partnerID=40&md5=9586858c5d31f5e3fa5b0cea5b8ac3b3","Case Western Reserve Univ, Cleveland, OH, United States","White, Lee J., Case Western Reserve Univ, Cleveland, OH, United States","Graphics User Interface (GUI) design is an expected part of almost every contemporary software or computer project, and yet the testing is usually approached in an ad hoc fashion. The reason GUI testing is different and difficult is that the input is interactive whereas the output may be graphical or may be an event. An especially serious problem occurs in maintenance where changes are made to the GUI interface, and the maintenance engineer does not have a sufficient understanding of how the GUI software was designed; in this case, an automated GUI testing method is needed. This paper identifies both static and dynamic event interactions in a GUI, and shows how automated regression tests can be generated to test these interactions. It is shown how Latin Squares can be used for this automated test design, where Latin Squares techniques are borrowed from statistical experimental design. Three methods will be compared: brute force test generation, random test generation and the use of Latin Squares, comparing the number of tests required to cover specified GUI event interactions in each case.",,"Automatic testing; Interactive computer graphics; Regression analysis; Software engineering; Automated regression tests; Latin squares techniques; Pairwise event interactions; Graphical user interfaces",,,,,,,,,"White, Lee J.; Case Western Reserve Univ, Cleveland, OH, United States",,"IEEE","IEEE, Piscataway","Proceedings of the 1996 IEEE Conference on Software Maintenance, ICSM","4 November 1996 through 8 November 1996","Monterey, CA, USA",45809,,,CSFME,,"English","Conf Software Maint",Conference Paper,"Final","",Scopus,2-s2.0-0030393439
"Kasik David J., George Harry G.","6603127245;7006124889;","Toward automatic generation of novice user test scripts",1996,"Conference on Human Factors in Computing Systems - Proceedings",,,,"244","251",,44,"10.1145/238386.238519","https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029706604&doi=10.1145%2f238386.238519&partnerID=40&md5=5950cda7c932b915e6c2d0d433727682","Boeing Commercial Airplane Group, Seattle, WA, United States","Kasik, David J., Boeing Commercial Airplane Group, Seattle, WA, United States; George, Harry G., Boeing Commercial Airplane Group, Seattle, WA, United States","Graphical user interfaces (GUI's) make applications easier to learn and use. At the same time, they make application design, construction, and especially test more difficult because user-directed dialogs increase the number of potential execution paths. This paper considers a subset of GUI-based application testing: how to exercise an application like a novice user. We discuss different solutions and a specific implementation that uses genetic algorithms to automatically generate user events in an unpredictable yet controlled manner to produce novice-like test scripts.",,"Computer aided software engineering; Computer science; Computer simulation; Computer software; Computer testing; Genetic algorithms; Automated test generation; Dialog model specification; Software engineering test process; Graphical user interfaces",,,,,,,,,"Kasik, David J.; Boeing Commercial Airplane Group, Seattle, WA, United States",,,"ACM, New York","Proceedings of the 1996 Conference on Human Factors in Computing Systems, CHI 96","13 April 1996 through 18 April 1996","Vancouver, BC, Can",44819,,,00216,,"English","Conf Hum Fact Comput Syst Proc",Conference Paper,"Final","",Scopus,2-s2.0-0029706604
"Maxion Roy A., deChambeau Aimee L.","6701748212;6506920118;","Dependability at the user interface",1995,"Proceedings - Annual International Conference on Fault-Tolerant Computing",,,,"528","535",,6,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028994231&partnerID=40&md5=48a7de4b74c9b0e721e504002999adfa","Carnegie Mellon Univ, Pittsburgh, United States","Maxion, Roy A., Carnegie Mellon Univ, Pittsburgh, United States; deChambeau, Aimee L., Carnegie Mellon Univ, Pittsburgh, United States","Even if a system's hardware and software underpinnings are completely reliable, errors at the user interface can cripple or destroy a mission, often with catastrophic consequences. Little attention has been paid to handling faults and errors at the user interface; their causes and remediations are little understood, and methods of predeployment fault detection in user interfaces are almost nonexistent. This paper presents a working definition of a user interface defect, and a robust method for detecting defects automatically. An experimental methodology for empirical testing and validation is given. Results show that while manifestations of defects may be many, only a few root causes are responsible for them.",,"Computer hardware; Computer software; Error detection; User interfaces; Availability; Cognitive systems; Computer testing; Fault tolerant computer systems; Performance; Program debugging; Reliability; Error handling; Fault handling; Fault detection; Human error; User interface defects; Fault tolerant computer systems; User interfaces",,,,,,,,,"Maxion, Roy A.; Carnegie Mellon Univ, Pittsburgh, United States",,"IEEE","IEEE, Piscataway, NJ, United States","Proceedings of the 25th International Symposium on Fault-Tolerant Computing","27 June 1995 through 30 June 1995","Pasadena, CA, USA",43520,07313071,,DPFTD,,"English","Dig Pap Int Symp Fault Tolerant Comput",Conference Paper,"Final","",Scopus,2-s2.0-0028994231
"Cohen D.M., Dalal S.R., Kajla A., Patton G.C.","56990618800;7006715420;6507902514;7102184371;","Automatic efficient test generator (AETG) system",1994,"Proceedings of the International Symposium on Software Reliability Engineering, ISSRE",,,,"303","309",,82,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028698974&partnerID=40&md5=a5fe991aabf84cfa0e9c7a1a644e2cbf","Bellcore, Morristown, United States","Cohen, D.M., Bellcore, Morristown, United States; Dalal, S.R., Bellcore, Morristown, United States; Kajla, A., Bellcore, Morristown, United States; Patton, G.C., Bellcore, Morristown, United States","Software testing is expensive, tedious and time consuming. Thus, the problem of making testing more efficient and mechanical, without losing its effectiveness, is very important. The Automatic Efficient Test Generator (AETG) is a new tool that mechanically generates efficient test sets from user defined test requirements. It is based on algorithms that use ideas from statistical experimental design theory to minimize the number of tests needed for a specific level of test coverage of the input test space. The savings due to AETG are substantial when compared to exhaustive testing or other methods of testing. AETG has been used in Bellcore for screen testing, interoperability testing and for protocol conformance testing. This paper describes the current system and it constructs and reports some preliminary results obtained during initial trials.",,"Algorithms; Database systems; Fluorescent screens; Network protocols; Performance; Program debugging; Statistical methods; User interfaces; Automatic efficient test generator; Screen testing; Software testing; Computer software",,,,,,,,,"Cohen, D.M.; Bellcore, Morristown, United States",,"IEEE","IEEE, Los Alamitos, CA, United States","Proceedings of the 4th International Symposium on Software Reliability Engineering","6 November 1994 through 9 November 1994","Monterey, CA, USA",42399,10719458,,00178,,"English","Int Symp Software Reliab Eng Proc",Conference Paper,"Final","",Scopus,2-s2.0-0028698974
"Birjandi A., Sydorowicz S.","57209530136;57209531352;","Validation of motif graphical user interface widget set",1991,"Proceedings of the Annual Hawaii International Conference on System Sciences","2",, 183968,"102","103",,,"10.1109/HICSS.1991.183968","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068026242&doi=10.1109%2fHICSS.1991.183968&partnerID=40&md5=7ab8de289e4cf634c1d408198e838786","Open Software Foundation, 11 Cambridge Center, Cambridge, MA  02141, United States","Birjandi, A., Open Software Foundation, 11 Cambridge Center, Cambridge, MA  02141, United States; Sydorowicz, S., Open Software Foundation, 11 Cambridge Center, Cambridge, MA  02141, United States","Discusses Motif Validation Environment (MVE), a set of tools to produce test suites to validate the conformance of Motif implementation to its specification. The complexity of graphical user interfaces makes validation a task which requires significant time and effort. By automating the process of test generation and test runs, MVE provides a solution to the problem of manual testing. MVE consists of a language to describe the behavior of Motif widgets and default characteristics, a parser for parsing the syntax of the language, a test generator, and a controlled environment for automatically and consistently validating the conformance of Motif implementations to Motif Widget Set specifications. The test runs produce a profile of known and detected discrepancies which may be used to identify and resolve the implementation issues. MVE also provides a set of support libraries for input synthesis (synthesis of events) and checking the correctness of the visuals. © 1991 IEEE.",,"Specifications; Syntactics; Testing; Controlled environment; Manual testing; Support libraries; Test generations; Test runs; Graphical user interfaces",,,,,,,,,,,,"IEEE Computer Society","24th Annual Hawaii International Conference on System Sciences, HICSS 1991","8 January 1991 through 11 January 1991",,146842,15301605,,,,"English","Proc. Annu. Hawaii Int. Conf. Syst. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-85068026242
"Yip S.W.L., Robson D.J.","7102134312;7101984126;","Graphical user interfaces validation: A problem analysis and a strategy to solution",1991,"Proceedings of the Annual Hawaii International Conference on System Sciences","2",, 183966,"91","100",,3,"10.1109/HICSS.1991.183966","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880821986&doi=10.1109%2fHICSS.1991.183966&partnerID=40&md5=e5c84b43d947caaf9a21cb7c513378c6","Computer Science Dept., University of Durham, South Road, Durham, DH13LE, United Kingdom","Yip, S.W.L., Computer Science Dept., University of Durham, South Road, Durham, DH13LE, United Kingdom; Robson, D.J., Computer Science Dept., University of Durham, South Road, Durham, DH13LE, United Kingdom","This paper begins by justifying the importance of graphical user interfaces (GUIs) and the need for proper validation. The various problems in GUI validation are classified into 3 categories : Functional, structural and environmental issues. The functional aspects of GUI are examined from the mapping of display objects on screen, interaction functions, to basic interaction components and window management functions. The largest functional issue identified is the lack of a formal specification suitable for deriving test cases. The main structural problem is in deciding on which of the software levels (i.e. window systems, toolkits, UIMS and applications) to target tests. The environmental issues concern human testers, automation, input synthesis and output visual verification. At the heart of all software testing activities, whether GUI or conventional, lies the problem of test case selection as testing budgets are finite. This paper concludes with a strategy for validation, based on derivation of test cases from a formal specification. © 1991 IEEE.",,"Application programs; Budget control; Environmental protection; Formal specification; Software testing; Environmental issues; Functional aspects; Graphical user interface (GUIs); Interaction functions; Structural problems; Test case selection; Visual verification; Window management; Graphical user interfaces",,,,,"Connecticut State Emergency Response Commission, SERC","S.W.L.Yip is funded by grants from the UK Science and Engineering Research Council (SERC) and the British Telecom Research Laboratories (BTRL). We gratefully acknowledge their support.",,"Alexander, H., (1986) Formally-Based Tools and Techniques for Human-Computer Dialogues, , PhD. Thesis, Stirling University; (1987) Major Vendors Agree on Window, pp. 5-6. , Special Report on The Anderson Report February Anderson Publishing Company; Arthur, J.D., Towards a formal specification of menu-based systems (1987) The Journal of System and Software; Bobrow, D.G., Expert systems: Perils and promise (1986) Communications of the ACM, pp. 880-894. , Sept; Casey, B.E., Dasarathy, B., Modelling and validating the man-machine interface (1982) GTE Labs. . Software Practice and Experience, 12 (6), pp. 558-569; Chi, U.I., Formal specification of user interface: A comparison and evaluation of 4 axiomatic approaches (1985) IEEE Trans. Software Eng., 11 (8), pp. 671-685; (1989) Serpent Overview, , SEI Carnegie Mellon University August; Coutu, D., (1990) Automating X Window System Testing by User Synthesis, , Digital Equipment Corp., X Technical Conference Jan (Abstract only; Duce, D.A., Fielding, E.V.C., Towards a formal specification of the gks output primitives (1986) Proc. Eurographics, 86, pp. 307-324; Ehrlich, K., (1989) Incorporating Usability Studies & Interface Design into Software Development, , Sun Microsystems Inc; (1989) Evaluator-Sales Literature, in Personal Computer Magazine, , Elverex August; Green, M., A survey of three dialogue models (1986) ACM Trans. Graphics, pp. 244-275. , July; Harel, D., On visual formalisms (1988) Comms. of ACM, 31 (5), pp. 514-531. , May; Harrison, M., Thimbleby, H., (1990) Formal Methods in Human-Computer Interaction, , Cambridge Univ. Press; Hartson, R., User-interface management control and communication (1989) IEEE Software, pp. 62-70. , Jan; Hekmatpour, S., Ince, D., (1988) Software Prototyping, Formal Methods and VDM, , Addison-Wesley; Howden, W.E., (1987) Functional Program Testing & Analysis, , McGraw-Hill; Ince, D., Hekmatpour, S., An Evaluation of Some Black-box Testing Methods, , Technical Report No 84/7 Computing Discipline, Faculty of Mathematics, Open University; Islam, N., Ingoglia, J.P., Testing window systems Proc. 28th Annual Technical Symposium ""interfaces : System and People Working Together, , Washington D. C. ACM Chapter; Jacob, R.J.K., A specification language for direct manipulation user-interfaces (1986) ACM Transactions on Graphics, pp. 283-317. , Oct; Jamison, A., (1990) Enhancing the Input Synthesis Extension with Xtrap, , Digital Equipment Corp., X Technical Conference Jan Abstract only; Johnson, M.A., Automated testing of user interfaces (1987) Pacific North West Software Quality Conference, pp. 285-293; Jones, C.B., (1990) Systematic Software Development Using VDM 2nd Edition, , Prentice-Hall; Leach, D.M., Paige, M.R., Satko, J.E., (1983) AutoTester: A Testing Methodology for Interactive User Environments, pp. l43-147. , Wang Laboratories; Software Reliability Engineering Group. IEEE CHI August; Lewis, R., Beck, D.W., Hartmann, J., Robson, D.J., Assay- A tool to support regression testing (1989) Procs. of 2nd European Software Engineering Conference, , Sept; Liskov, B., Guttag, J., (1986) Abstraction and Specification in Program Development, , MIT Press; Mallgren, W.R., (1981) Formal Specification of Interactive Graphics Programming Languages, , PhD. dissertation, Univ. Washington, Seattle; Marshall, S.L., (1986) A Formal Description Method for User Interfaces, , PhD. thesis, University of Manchester; Maurer, M.E., Full-screen testing of interactive applications (1983) IBM Systems Journal, 22 (3), pp. 246-261; (1988) AUTO MAC III, Macro Recorder Reference Manual, , Microsoft Corporation; (1989) Various Documents in X11R4 Distribution Tape MIT; Myers, B.A., A taxonomy of window manager user interfaces (1988) IEEE Computer Graphics and Applications, pp. 79-109. , Sept; Myers, B.A., User-interface tools: Introduction and survey (1989) IEEE Software, , Jan; Myers, G.J., (1979) Art of Software Testing, , John Wiley & Sons; Parnas, D.L., On the use of transition diagrams in the design of a user interface for an interactive computer system (1969) Proc. 24th National ACM Conference, pp. 379-385; Pfaff, G.E., User interface management system (1983) Proceedings of Workshop on UIMS, Seeheim, Germany, , Nov. Springer- Verlag 1985; Scheifler, R.W., Gettys, J., The x window system (1986) ACM Transactions on Graphics, 5 (2). , April; Shneiderman, B., Direct manipulation: A step beyond programming languages (1983) Computer, pp. 57-69. , August; Shooman, M.L., (1983) Software Engineering, , McGraw-Hill; Shu, N.C., Visual programming: Perspectives and approaches (1989) IBM System Journal, 28 (4), pp. 525-547; (1990) CAPBAK/X-Test Capture/Replay for X Windows, Technical Specifications, , Software Research Software Research Inc. May San Francisco, USA; Spivey, J.M., An introduction to z and formal specifications (1989) Software Engineering Journal, pp. 40-50. , Jan; Sufrin, B., Formal specification of a display-oriented text editor (1982) Sci. Comput. Program., 1, pp. l57-202; Yip, S.W.L., A Survey of 6 User Interface Systems in Search for a Specification Approach Suitable for Deriving Test Cases, , unpublished manuscript; Yip, S.W.L., Robson, D.J., User interfaces and software maintenance (1990) Journal of Software Maintenance, , Sept; Yip, S.W.L., Functional Testing for Graphical User Interfaces (Test Cases for Xmail), , Technical Report 5\90, Computer Science Dept., University of Durham",,,,"IEEE Computer Society","24th Annual Hawaii International Conference on System Sciences, HICSS 1991","8 January 1991 through 11 January 1991",,146842,15301605,,,,"English","Proc. Annu. Hawaii Int. Conf. Syst. Sci.",Conference Paper,"Final","",Scopus,2-s2.0-84880821986
